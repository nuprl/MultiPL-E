language: pl
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $is_lower = 0 if $key !~\
    \ /^[a-z]+$/;\n        $is_upper = 0 if $key !~ /^[A-Z]+$/;\n    }\n    return\
    \ $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012641
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $lower\
    \ = 0;\n    my $upper = 0;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /[a-z]/) {\n            $lower = 1;\n        }\n        if ($key =~ /[A-Z]/)\
    \ {\n            $upper = 1;\n        }\n    }\n    if ($lower && $upper) {\n\
    \        $result = 0;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $is_lower = 0 if $key !~\
    \ /^[a-z]+$/;\n        $is_upper = 0 if $key !~ /^[A-Z]+$/;\n    }\n    return\
    \ $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012641
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $all_lower = 0 if $key =~\
    \ /[A-Z]/;\n        $all_upper = 0 if $key =~ /[a-z]/;\n    }\n    return $all_lower\
    \ || $all_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $key;\n    my $value;\n   \
    \ my $all_lower = 1;\n    my $all_upper = 1;\n    my $is_empty = 1;\n    while\
    \ (($key, $value) = each %$dict) {\n        $is_empty = 0;\n        if ($key =~\
    \ /[A-Z]/) {\n            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $all_upper = 0;\n        }\n    }\n    return 0 if $is_empty;\n\
    \    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $is_upper\
    \ = 0;\n    my $is_lower = 0;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n        }\n        if ($key\
    \ =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n    }\n    if ($is_upper\
    \ && $is_lower) {\n        $ret = 0;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type\
    \ = \"\";\n    foreach my $key (keys %$dict) {\n        if ($key_type eq \"\"\
    ) {\n            $key_type = ($key =~ /^[a-z]*$/) ? \"lower\" : \"upper\";\n \
    \       }\n        if ($key_type eq \"lower\" && $key =~ /^[A-Z]*$/) {\n     \
    \       $result = 0;\n            last;\n        }\n        if ($key_type eq \"\
    upper\" && $key =~ /^[a-z]*$/) {\n            $result = 0;\n            last;\n\
    \        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $is_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n     \
    \       $is_upper = 0;\n        }\n    }\n    return $is_lower || $is_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012641
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my($key, $value);\n    my($all_lower,\
    \ $all_upper);\n    $all_lower = 1;\n    $all_upper = 1;\n    while (($key, $value)\
    \ = each %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n\
    \        }\n        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n    \
    \    }\n    }\n    return ($all_lower || $all_upper);\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $upper = 0;\n    my $lower = 0;\n    my $other = 0;\n   \
    \ foreach $key (keys %$dict) {\n        $val = $dict->{$key};\n        if ($key\
    \ =~ /^[A-Z]+$/) {\n            $upper++;\n        } elsif ($key =~ /^[a-z]+$/)\
    \ {\n            $lower++;\n        } else {\n            $other++;\n        }\n\
    \    }\n    if ($upper > 0 && $lower > 0) {\n        $ret = 0;\n    }\n    if\
    \ ($other > 0) {\n        $ret = 0;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper\
    \ = 1;\n    my $is_empty = 1;\n    foreach my $key (keys %$dict) {\n        $is_empty\
    \ = 0;\n        if ($key =~ /[A-Z]/) {\n            $is_lower = 0;\n        }\n\
    \        if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n        }\n    }\n\
    \    return $is_empty ? 0 : ($is_lower || $is_upper);\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper++;\n\
    \        } else {\n            return 0;\n        }\n    }\n    return $lower\
    \ == 0 || $upper == 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012641
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $upper = 0;\n    my $lower = 0;\n    my $other = 0;\n   \
    \ my $count = 0;\n    my $key_count = 0;\n    my $val_count = 0;\n    my $key_upper\
    \ = 0;\n    my $key_lower = 0;\n    my $key_other = 0;\n    my $val_upper = 0;\n\
    \    my $val_lower = 0;\n    my $val_other = 0;\n    my $key_upper_count = 0;\n\
    \    my $key_lower_count = 0;\n    my $key_other_count = 0;\n    my $val_upper_count\
    \ = 0;\n    my $val_lower_count = 0;\n    my $val_other_count = 0;\n    my $key_upper_val_upper\
    \ = 0;\n    my $key_upper_val_lower = 0;\n    my $key_upper_val_other = 0;\n \
    \   my $key_lower_val_upper = 0;\n    my $key_lower_val_lower = 0;\n    my $key_lower_val_other\
    \ = 0;\n    my $key_other_val_upper = 0;\n    my $key_other_val_lower = 0;\n \
    \   my $key_other_val_other = 0;\n    my $key_upper_val_upper_count = 0;\n   \
    \ my $key_upper_val_lower_count = 0;\n    my $key_upper_val_other_count = 0;\n\
    \    my $key_lower_val_upper_count = 0;\n    my $key_lower_val_lower_count = 0;\n\
    \    my $key_lower_val_other_count = 0;\n    my $key_other_val_upper_count = 0;\n\
    \    my $key_other_val_lower_count = 0;\n    my $key_other_val_other_count = 0;\n\
    \    my $key_upper_val_upper_count_max = 0;\n    my $key_upper_val_lower_count_max\
    \ = 0;\n   \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpz98iro8w.pl line 89, at
    end of line

    syntax error at /tmp/tmpz98iro8w.pl line 89, at EOF

    Execution of /tmp/tmpz98iro8w.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012641
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $is_lower = 0 if $key !~\
    \ /^[a-z]+$/;\n        $is_upper = 0 if $key !~ /^[A-Z]+$/;\n    }\n    return\
    \ $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012641
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $key_type = \"\";\n    my $value_type = \"\";\n    my\
    \ $key_type_count = 0;\n    my $value_type_count = 0;\n    my $key_type_lower\
    \ = 0;\n    my $key_type_upper = 0;\n    my $value_type_lower = 0;\n    my $value_type_upper\
    \ = 0;\n    my $key_type_lower_count = 0;\n    my $key_type_upper_count = 0;\n\
    \    my $value_type_lower_count = 0;\n    my $value_type_upper_count = 0;\n  \
    \  my $key_type_mixed = 0;\n    my $value_type_mixed = 0;\n    my $key_type_mixed_count\
    \ = 0;\n    my $value_type_mixed_count = 0;\n    my $key_type_other = 0;\n   \
    \ my $value_type_other = 0;\n    my $key_type_other_count = 0;\n    my $value_type_other_count\
    \ = 0;\n    my $key_type_other_count_total = 0;\n    my $value_type_other_count_total\
    \ = 0;\n    my $key_type_other_count_total_max = 0;\n    my $value_type_other_count_total_max\
    \ = 0;\n    my $key_type_other_count_total_max_key = \"\";\n    my $value_type_other_count_total_max_key\
    \ = \"\";\n    my $key_type_other_count_total_max_value = \"\";\n    my $value_type_other_count_total_max_value\
    \ = \"\";\n    my $key_type_other_count_total_max_key_type = \"\";\n    my $value_type_other_count_total_max_key_type\
    \ = \"\";\n    my $key_type_other_count_total_max_value_type = \"\";\n    my $value_type_other_count_total_max_value_type\
    \ = \"\";\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp64cd153i.pl line 82, at
    end of line

    syntax error at /tmp/tmp64cd153i.pl line 82, at EOF

    Execution of /tmp/tmp64cd153i.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012641
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n\
    \            $is_upper = 1;\n        }\n        else {\n            return 0;\n\
    \        }\n    }\n    return $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper++;\n\
    \        } else {\n            return 0;\n        }\n    }\n    return $lower\
    \ == 0 || $upper == 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012641
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $key_type;\n    my $key_type_count = 0;\n    my $key_type_lower\
    \ = 0;\n    my $key_type_upper = 0;\n    my $key_type_other = 0;\n    my $key_type_lower_count\
    \ = 0;\n    my $key_type_upper_count = 0;\n    my $key_type_other_count = 0;\n\
    \    my $key_type_lower_first = 0;\n    my $key_type_upper_first = 0;\n    my\
    \ $key_type_other_first = 0;\n    my $key_type_lower_first_count = 0;\n    my\
    \ $key_type_upper_first_count = 0;\n    my $key_type_other_first_count = 0;\n\
    \    my $key_type_lower_first_char = \"\";\n    my $key_type_upper_first_char\
    \ = \"\";\n    my $key_type_other_first_char = \"\";\n    my $key_type_lower_first_char_count\
    \ = 0;\n    my $key_type_upper_first_char_count = 0;\n    my $key_type_other_first_char_count\
    \ = 0;\n    my $key_type_lower_first_char_count_max = 0;\n    my $key_type_upper_first_char_count_max\
    \ = 0;\n    my $key_type_other_first_char_count_max = 0;\n    my $key_type_lower_first_char_count_max_char\
    \ = \"\";\n    my $key_type_upper_first_char_count_max_char = \"\";\n    my $key_type_other_first_char_count_max_char\
    \ = \"\";\n    my $key_type_lower_first_char_count_max_char_count = 0;\n    my\
    \ $key_type_upper_first_char_count_max_char_count = 0;\n    my $key_type_other_first_char_count_max_char_count\
    \ = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmplj2wbefi.pl line 45,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmplj2wbefi.pl line 45, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmplj2wbefi.pl line 80, at end of line\nsyntax\
    \ error at /tmp/tmplj2wbefi.pl line 80, at EOF\nExecution of /tmp/tmplj2wbefi.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660012641
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $all_lower = 0 if $key =~\
    \ /[A-Z]/;\n        $all_upper = 0 if $key =~ /[a-z]/;\n    }\n    return $all_lower\
    \ || $all_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my @keys = keys %$dict;\n    return\
    \ 0 if @keys == 0;\n    my $lower = 0;\n    my $upper = 0;\n    foreach my $key\
    \ (@keys) {\n        $lower = 1 if $key =~ /^[a-z]+$/;\n        $upper = 1 if\
    \ $key =~ /^[A-Z]+$/;\n    }\n    return $lower && $upper ? 0 : 1;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $is_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n     \
    \       $is_upper = 0;\n        }\n    }\n    return $is_lower || $is_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012641
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper++;\n\
    \        } else {\n            return 0;\n        }\n    }\n    if ($lower ==\
    \ 0 || $upper == 0) {\n        return 1;\n    } else {\n        return 0;\n  \
    \  }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $first_key;\n    my $first_value;\n    my $first_key_type;\n\
    \    my $first_value_type;\n    my $key_type;\n    my $value_type;\n    if (scalar(keys\
    \ %$dict) > 0) {\n        ($first_key, $first_value) = each %$dict;\n        $first_key_type\
    \ = is_lower_case($first_key);\n        $first_value_type = is_lower_case($first_value);\n\
    \        while (($key, $value) = each %$dict) {\n            $key_type = is_lower_case($key);\n\
    \            $value_type = is_lower_case($value);\n            if (($first_key_type\
    \ != $key_type) || ($first_value_type != $value_type)) {\n                $result\
    \ = 0;\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_lower_case called at /tmp/tmpeve6bfhk.pl
    line 23.

    '
  stdout: ''
  timestamp: 1660012641
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n    \
    \        $upper++;\n        }\n        else {\n            return 0;\n       \
    \ }\n    }\n    if ($lower == 0 || $upper == 0) {\n        return 1;\n    }\n\
    \    else {\n        return 0;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $all_lower = 0 if $key =~\
    \ /[A-Z]/;\n        $all_upper = 0 if $key =~ /[a-z]/;\n    }\n    return $all_lower\
    \ || $all_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $lower_case = 0;\n    my $upper_case = 0;\n    my $other_case\
    \ = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my\
    \ $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n  \
    \  my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n\
    \    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n\
    \    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n\
    \    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n\
    \    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n\
    \    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n\
    \    my $other = 0;\n    my $length = 0;\n    my $char;\n    my $char_code;\n\
    \    my $char_code_str;\n    my $char_code_str_length;\n    my $char_code_str_length_str;\n\
    \    my $char_code_str_length_str_length;\n    my $char_code_str_length_str_length_str;\n\
    \    my $char_code_str_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpul_m2cg4.pl line 72, at end
    of line

    syntax error at /tmp/tmpul_m2cg4.pl line 72, near "$char_code_str_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpul_m2cg4.pl line 107, at end
    of line

    syntax error at /tmp/tmpul_m2cg4.pl line 107, at EOF

    Execution of /tmp/tmpul_m2cg4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012641
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper++;\n\
    \        } else {\n            return 0;\n        }\n    }\n    return ($lower\
    \ == 0 || $upper == 0);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $k (keys %$dict) {\n        if ($k =~ /^[a-z]+$/) {\n \
    \           $lower++;\n        } elsif ($k =~ /^[A-Z]+$/) {\n            $upper++;\n\
    \        } else {\n            return 0;\n        }\n    }\n    return $lower\
    \ == 0 || $upper == 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012641
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return ($all_lower || $all_upper);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $is_lower\
    \ = 0;\n    my $is_upper = 0;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        } elsif ($key =~\
    \ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } else {\n            $ret\
    \ = 0;\n            last;\n        }\n    }\n    if ($is_lower && $is_upper) {\n\
    \        $ret = 0;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012641
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $flag = 0;\n\
    \    foreach my $key (keys %$dict) {\n        if ($flag == 0) {\n            if\
    \ ($key =~ /^[a-z]+$/) {\n                $flag = 1;\n            } elsif ($key\
    \ =~ /^[A-Z]+$/) {\n                $flag = 2;\n            } else {\n       \
    \         $ret = 0;\n                last;\n            }\n        } else {\n\
    \            if ($flag == 1) {\n                if ($key !~ /^[a-z]+$/) {\n  \
    \                  $ret = 0;\n                    last;\n                }\n \
    \           } else {\n                if ($key !~ /^[A-Z]+$/) {\n            \
    \        $ret = 0;\n                    last;\n                }\n           \
    \ }\n        }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $upper = 0;\n    my $lower = 0;\n    if (scalar(keys %$dict)\
    \ == 0) {\n        $ret = 0;\n    } else {\n        while (($key, $val) = each\
    \ %$dict) {\n            if ($key =~ /^[A-Z]+$/) {\n                $upper = 1;\n\
    \            } elsif ($key =~ /^[a-z]+$/) {\n                $lower = 1;\n   \
    \         } else {\n                $ret = 0;\n                last;\n       \
    \     }\n        }\n        if ($upper && $lower) {\n            $ret = 0;\n \
    \       }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return ($all_lower || $all_upper);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if (lc($key) eq $key) {\n\
    \            $is_lower = 1;\n        }\n        if (uc($key) eq $key) {\n    \
    \        $is_upper = 1;\n        }\n    }\n    return $is_lower && $is_upper ?\
    \ 0 : 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my($key);\n    my($is_upper) =\
    \ 1;\n    my($is_lower) = 1;\n    foreach $key (keys %$dict) {\n        if ($key\
    \ =~ /[A-Z]/) {\n            $is_lower = 0;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $is_upper = 0;\n        }\n    }\n    return ($is_upper || $is_lower);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $all_lower = 0 if $key =~\
    \ /[A-Z]/;\n        $all_upper = 0 if $key =~ /[a-z]/;\n    }\n    return $all_lower\
    \ || $all_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $lower =\
    \ 0;\n    my $upper = 0;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $lower = 1;\n        }\n        elsif ($key =~\
    \ /^[A-Z]+$/) {\n            $upper = 1;\n        }\n        else {\n        \
    \    $ret = 0;\n            last;\n        }\n    }\n    if ($lower && $upper)\
    \ {\n        $ret = 0;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type\
    \ = \"\";\n    foreach my $key (keys %$dict) {\n        if ($key_type eq \"\"\
    ) {\n            $key_type = ($key =~ /^[a-z]+$/) ? \"lower\" : \"upper\";\n \
    \       }\n        if ($key_type eq \"lower\" && $key !~ /^[a-z]+$/) {\n     \
    \       $result = 0;\n            last;\n        }\n        if ($key_type eq \"\
    upper\" && $key !~ /^[A-Z]+$/) {\n            $result = 0;\n            last;\n\
    \        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key,\
    \ $val) = each %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        elsif ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        else {\n            $ret = 0;\n            last;\n\
    \        }\n    }\n    if ($is_upper && $is_lower) {\n        $ret = 0;\n    }\n\
    \    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my @keys = keys(%$dict);\n   \
    \ my $key = $keys[0];\n    my $is_lower = $key =~ /^[a-z]+$/;\n    my $is_upper\
    \ = $key =~ /^[A-Z]+$/;\n    foreach $key (@keys) {\n        if ($is_lower &&\
    \ $key =~ /^[A-Z]+$/) {\n            return 0;\n        }\n        if ($is_upper\
    \ && $key =~ /^[a-z]+$/) {\n            return 0;\n        }\n    }\n    return\
    \ 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    my $is_mixed =\
    \ 0;\n    my $is_num = 0;\n    my $is_empty = 1;\n    while (($key, $val) = each\
    \ %$dict) {\n        $is_empty = 0;\n        if ($key =~ /^[a-z]+$/) {\n     \
    \       $is_lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        } elsif ($key =~ /^[0-9]+$/) {\n            $is_num = 1;\n   \
    \     } else {\n            $is_mixed = 1;\n        }\n    }\n    if ($is_empty)\
    \ {\n        $ret = 0;\n    } elsif ($is_lower && $is_upper) {\n        $ret =\
    \ 0;\n    } elsif ($is_lower && $is_num) {\n        $ret = 0;\n    } elsif ($is_upper\
    \ && $is_num) {\n        $ret = 0;\n    } elsif ($is_lower && $is_mixed) {\n \
    \       $ret = 0;\n    } elsif ($is_upper && $is_mixed) {\n        $ret = 0;\n\
    \    } elsif ($is_num && $is_mixed) {\n        $ret = 0;\n    }\n    return $ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $lower\
    \ = 0;\n    my $upper = 0;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $upper = 1;\n        } else {\n            $result = 0;\n   \
    \         last;\n        }\n    }\n    if ($lower && $upper) {\n        $result\
    \ = 0;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return ($all_lower or $all_upper);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    foreach $key (keys\
    \ %$dict) {\n        $val = $dict->{$key};\n        if ($key =~ /[A-Z]/) {\n \
    \           $is_upper = 1;\n        }\n        if ($key =~ /[a-z]/) {\n      \
    \      $is_lower = 1;\n        }\n    }\n    if ($is_upper && $is_lower) {\n \
    \       $ret = 0;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    my $is_mixed =\
    \ 0;\n    my $is_empty = 1;\n    while (($key, $val) = each %$dict) {\n      \
    \  $is_empty = 0;\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n\
    \        }\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n     \
    \   }\n        if ($is_upper && $is_lower) {\n            $is_mixed = 1;\n   \
    \         last;\n        }\n    }\n    if ($is_mixed || $is_empty) {\n       \
    \ $ret = 0;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $lower = 0;\n    my $upper = 0;\n    while (($key, $value)\
    \ = each %$dict) {\n        if ($key =~ /[a-z]/) {\n            $lower = 1;\n\
    \        }\n        if ($key =~ /[A-Z]/) {\n            $upper = 1;\n        }\n\
    \    }\n    if ($lower && $upper) {\n        $result = 0;\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $lower\
    \ = 0;\n    my $upper = 0;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $upper = 1;\n        } else {\n            $result = 0;\n   \
    \         last;\n        }\n    }\n    if ($lower && $upper) {\n        $result\
    \ = 0;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return ($all_lower || $all_upper);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[a-z]/) {\n\
    \            $all_upper = 0;\n        }\n        if ($key =~ /[A-Z]/) {\n    \
    \        $all_lower = 0;\n        }\n    }\n    return ($all_lower || $all_upper);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return ($all_lower || $all_upper);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n\
    \            $is_upper = 1;\n        }\n        else {\n            return 0;\n\
    \        }\n    }\n    return ($is_lower && $is_upper) ? 0 : 1;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n    \
    \        $upper++;\n        }\n        else {\n            return 0;\n       \
    \ }\n    }\n    if ($lower > 0 && $upper > 0) {\n        return 0;\n    }\n  \
    \  return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $is_upper = 1;\n    my $is_lower = 1;\n    if (scalar(keys\
    \ %$dict) == 0) {\n        return 0;\n    }\n    while (($key, $val) = each %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $is_lower = 0;\n        }\n \
    \       if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n        }\n    }\n\
    \    if ($is_lower == 0 && $is_upper == 0) {\n        $ret = 0;\n    }\n    return\
    \ $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return ($all_lower || $all_upper);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type\
    \ = \"\";\n    my $key_type_count = 0;\n    my $key_type_count_max = 0;\n    my\
    \ $key_type_count_min = 0;\n    my $key_type_count_max_key = \"\";\n    my $key_type_count_min_key\
    \ = \"\";\n    my $key_type_count_max_value = \"\";\n    my $key_type_count_min_value\
    \ = \"\";\n    my $key_type_count_max_key_type = \"\";\n    my $key_type_count_min_key_type\
    \ = \"\";\n    my $key_type_count_max_key_type_count = 0;\n    my $key_type_count_min_key_type_count\
    \ = 0;\n    my $key_type_count_max_key_type_count_key = \"\";\n    my $key_type_count_min_key_type_count_key\
    \ = \"\";\n    my $key_type_count_max_key_type_count_value = \"\";\n    my $key_type_count_min_key_type_count_value\
    \ = \"\";\n    my $key_type_count_max_key_type_count_key_type = \"\";\n    my\
    \ $key_type_count_min_key_type_count_key_type = \"\";\n    my $key_type_count_max_key_type_count_key_type_count\
    \ = 0;\n    my $key_type_count_min_key_type_count_key_type_count = 0;\n    my\
    \ $key_type_count_max_key_type_count_key_type_count_key = \"\";\n    my $key_type_count_min_key_type_count_key_type_count_key\
    \ = \"\";\n    my $key_type_count_max_key_type_count_key_type_count_value = \"\
    \";\n    my $key_type_count_min_key_type_count_key_type_count_value = \"\";\n\
    \    my $key_type_count_max_key_\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp4czyalk9.pl line 38, at end
    of line

    syntax error at /tmp/tmp4czyalk9.pl line 38, near "$key_type_count_max_key_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp4czyalk9.pl line 73, at end of
    line

    syntax error at /tmp/tmp4czyalk9.pl line 73, at EOF

    Execution of /tmp/tmp4czyalk9.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $lower = 0;\n    my $upper = 0;\n    my $other = 0;\n\
    \    while (($key, $value) = each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper++;\n\
    \        } else {\n            $other++;\n        }\n    }\n    if ($lower > 0\
    \ && $upper > 0) {\n        $result = 0;\n    }\n    if ($other > 0) {\n     \
    \   $result = 0;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $key_type;\n    my $value_type;\n    my $key_type_count\
    \ = 0;\n    my $value_type_count = 0;\n    if (scalar(keys %$dict) == 0) {\n \
    \       $result = 0;\n    } else {\n        while (($key, $value) = each %$dict)\
    \ {\n            $key_type = ref($key);\n            $value_type = ref($value);\n\
    \            if ($key_type eq \"\") {\n                $key_type_count++;\n  \
    \          }\n            if ($value_type eq \"\") {\n                $value_type_count++;\n\
    \            }\n        }\n        if ($key_type_count != scalar(keys %$dict))\
    \ {\n            $result = 0;\n        }\n        if ($value_type_count != scalar(keys\
    \ %$dict)) {\n            $result = 0;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 0;\n    my $key;\n\
    \    my $value;\n    my $key_type = \"\";\n    my $value_type = \"\";\n    my\
    \ $key_count = 0;\n    my $value_count = 0;\n    my $key_type_count = 0;\n   \
    \ my $value_type_count = 0;\n    my $key_type_flag = 0;\n    my $value_type_flag\
    \ = 0;\n    my $key_type_count_flag = 0;\n    my $value_type_count_flag = 0;\n\
    \    my $key_count_flag = 0;\n    my $value_count_flag = 0;\n    my $key_type_count_flag_2\
    \ = 0;\n    my $value_type_count_flag_2 = 0;\n    my $key_count_flag_2 = 0;\n\
    \    my $value_count_flag_2 = 0;\n    my $key_type_count_flag_3 = 0;\n    my $value_type_count_flag_3\
    \ = 0;\n    my $key_count_flag_3 = 0;\n    my $value_count_flag_3 = 0;\n    my\
    \ $key_type_count_flag_4 = 0;\n    my $value_type_count_flag_4 = 0;\n    my $key_count_flag_4\
    \ = 0;\n    my $value_count_flag_4 = 0;\n    my $key_type_count_flag_5 = 0;\n\
    \    my $value_type_count_flag_5 = 0;\n    my $key_count_flag_5 = 0;\n    my $value_count_flag_5\
    \ = 0;\n    my $key_type_count_flag_6 = 0;\n    my $value_type_count_flag_6 =\
    \ 0;\n    my $key_count_flag_6 = 0;\n    my $value_count_flag_6 = 0;\n    my $key_type_count_flag_7\
    \ = 0;\n    my $value_type_count_flag_7 = 0;\n    my $key_count_flag_7 = 0;\n\
    \    my $value_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpwsliz8_n.pl line 51, at end
    of line

    syntax error at /tmp/tmpwsliz8_n.pl line 51, near "$value_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpwsliz8_n.pl line 86, at end of
    line

    syntax error at /tmp/tmpwsliz8_n.pl line 86, at EOF

    Execution of /tmp/tmpwsliz8_n.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    foreach $key (keys\
    \ %$dict) {\n        $val = $dict->{$key};\n        if ($key =~ /[A-Z]/) {\n \
    \           $is_upper = 1;\n        }\n        if ($key =~ /[a-z]/) {\n      \
    \      $is_lower = 1;\n        }\n    }\n    if ($is_upper && $is_lower) {\n \
    \       $ret = 0;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 1;\n    my $upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $lower = 0 if $key =~ /[A-Z]/;\n\
    \        $upper = 0 if $key =~ /[a-z]/;\n    }\n    return $lower || $upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type\
    \ = \"\";\n    my $key_type_count = 0;\n    foreach my $key (keys %$dict) {\n\
    \        if ($key_type eq \"\") {\n            if ($key =~ /[a-z]/) {\n      \
    \          $key_type = \"lower\";\n            } elsif ($key =~ /[A-Z]/) {\n \
    \               $key_type = \"upper\";\n            } else {\n               \
    \ $result = 0;\n                last;\n            }\n        }\n        if ($key_type\
    \ eq \"lower\") {\n            if ($key =~ /[A-Z]/) {\n                $result\
    \ = 0;\n                last;\n            }\n        } elsif ($key_type eq \"\
    upper\") {\n            if ($key =~ /[a-z]/) {\n                $result = 0;\n\
    \                last;\n            }\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return ($all_lower || $all_upper);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $is_lower = 0 if $key !~\
    \ /^[a-z]+$/;\n        $is_upper = 0 if $key !~ /^[A-Z]+$/;\n    }\n    return\
    \ $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012641
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key_type == 0) {\n \
    \           $key_type = ($key =~ /^[a-z]+$/) ? 1 : 2;\n        }\n        if ($key_type\
    \ == 1) {\n            $result = 0 if ($key !~ /^[a-z]+$/);\n        } else {\n\
    \            $result = 0 if ($key !~ /^[A-Z]+$/);\n        }\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        $is_lower = 1 if $key =~\
    \ /^[a-z]+$/;\n        $is_upper = 1 if $key =~ /^[A-Z]+$/;\n    }\n    return\
    \ $is_lower && !$is_upper || !$is_lower && $is_upper;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my($key, $value);\n    my($lower)\
    \ = 0;\n    my($upper) = 0;\n    my($mixed) = 0;\n    my($num) = 0;\n    my($ret)\
    \ = 0;\n    my($empty) = 1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpnx1i4j0b.pl line 54, at
    end of line

    syntax error at /tmp/tmpnx1i4j0b.pl line 54, at EOF

    Execution of /tmp/tmpnx1i4j0b.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 1;\n    my $upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n        \
    \    $upper = 0;\n        }\n    }\n    return $lower || $upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n    \
    \        $upper++;\n        }\n        else {\n            return 0;\n       \
    \ }\n    }\n    if ($lower == 0 || $upper == 0) {\n        return 1;\n    }\n\
    \    else {\n        return 0;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    my $other = 0;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $lower++;\n        } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $upper++;\n        } else {\n            $other++;\n        }\n\
    \    }\n    if ($lower == 0 && $upper == 0) {\n        return 0;\n    }\n    if\
    \ ($lower > 0 && $upper > 0) {\n        return 0;\n    }\n    if ($other > 0)\
    \ {\n        return 0;\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return ($all_lower || $all_upper);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper++;\n\
    \        } else {\n            return 0;\n        }\n    }\n    return ($lower\
    \ == 0 || $upper == 0);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $k (keys %$dict) {\n        if ($k =~ /^[a-z]+$/) {\n \
    \           $lower++;\n        }\n        if ($k =~ /^[A-Z]+$/) {\n          \
    \  $upper++;\n        }\n    }\n    if ($lower == 0 && $upper == 0) {\n      \
    \  return 0;\n    }\n    if ($lower == 0 || $upper == 0) {\n        return 1;\n\
    \    }\n    return 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $is_upper\
    \ = 0;\n    my $is_lower = 0;\n    my $key;\n    foreach $key (keys %$dict) {\n\
    \        if ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n  \
    \      if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n    }\n\
    \    if ($is_upper && $is_lower) {\n        $result = 0;\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 0;\n    my $key;\n \
    \   my $val;\n    my $all_lower = 1;\n    my $all_upper = 1;\n    my $all_string\
    \ = 1;\n    my $all_number = 1;\n    my $all_symbol = 1;\n    my $all_other =\
    \ 1;\n    my $all_same = 1;\n    my $first_key = \"\";\n    my $first_val = \"\
    \";\n    my $key_type = \"\";\n    my $val_type = \"\";\n    my $key_type_count\
    \ = 0;\n    my $val_type_count = 0;\n    my $key_type_count_max = 0;\n    my $val_type_count_max\
    \ = 0;\n    my $key_type_count_max_type = \"\";\n    my $val_type_count_max_type\
    \ = \"\";\n    my $key_type_count_max_type_count = 0;\n    my $val_type_count_max_type_count\
    \ = 0;\n    my $key_type_count_max_type_count_type = \"\";\n    my $val_type_count_max_type_count_type\
    \ = \"\";\n    my $key_type_count_max_type_count_type_count = 0;\n    my $val_type_count_max_type_count_type_count\
    \ = 0;\n    my $key_type_count_max_type_count_type_count_type = \"\";\n    my\
    \ $val_type_count_max_type_count_type_count_type = \"\";\n    my $key_type_count_max_type_count_type_count_type_count\
    \ = 0;\n    my $val_type_count_max_type_count_type_count_type_count = 0;\n   \
    \ my $key_type_count_max_type_count_type_count_type_count_type = \"\";\n    my\
    \ $val_type_count_max_type_count_type_count_type_count_type = \"\";\n    my $key_type_count_max_type_count_type_count_type\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpkosnvjmi.pl line 45, at end
    of line

    syntax error at /tmp/tmpkosnvjmi.pl line 45, near "$key_type_count_max_type_count_type_count_type

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpkosnvjmi.pl line 80, at end of
    line

    syntax error at /tmp/tmpkosnvjmi.pl line 80, at EOF

    Execution of /tmp/tmpkosnvjmi.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    my $is_mixed =\
    \ 0;\n    my $is_num = 0;\n    my $is_empty = 1;\n    while(($key, $val) = each\
    \ %$dict) {\n        $is_empty = 0;\n        if ($key =~ /^[a-z]+$/) {\n     \
    \       $is_lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        } elsif ($key =~ /^[0-9]+$/) {\n            $is_num = 1;\n   \
    \     } else {\n            $is_mixed = 1;\n        }\n    }\n    if ($is_empty)\
    \ {\n        $ret = 0;\n    } elsif ($is_lower && $is_upper) {\n        $ret =\
    \ 0;\n    } elsif ($is_lower && $is_num) {\n        $ret = 0;\n    } elsif ($is_upper\
    \ && $is_num) {\n        $ret = 0;\n    } elsif ($is_lower && $is_mixed) {\n \
    \       $ret = 0;\n    } elsif ($is_upper && $is_mixed) {\n        $ret = 0;\n\
    \    } elsif ($is_num && $is_mixed) {\n        $ret = 0;\n    }\n    return $ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $case = 0;\n    my $is_upper = 0;\n    my $is_lower =\
    \ 0;\n    while (($key, $value) = each %$dict) {\n        if ($key =~ /[A-Z]/)\
    \ {\n            $is_upper = 1;\n        }\n        if ($key =~ /[a-z]/) {\n \
    \           $is_lower = 1;\n        }\n        if ($is_upper && $is_lower) {\n\
    \            $result = 0;\n            last;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $all_lower = 0 if $key =~\
    \ /[A-Z]/;\n        $all_upper = 0 if $key =~ /[a-z]/;\n    }\n    return $all_lower\
    \ || $all_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $case;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n\
    \    my $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my\
    \ $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n\
    \    my $z;\n    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n    my\
    \ $F;\n    my $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\n    my $L;\n\
    \    my $M;\n    my $N;\n    my $O;\n    my $P;\n    my $Q;\n    my $R;\n    my\
    \ $S;\n    my $T;\n    my $U;\n    my $V;\n    my $W;\n    my $X;\n    my $Y;\n\
    \    my $Z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my\
    \ $f;\n    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n\
    \    my $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my\
    \ $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n\
    \    my $z;\n    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n    my\
    \ $F;\n    my $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpbuwoksgw.pl line 132,
    at end of line

    syntax error at /tmp/tmpbuwoksgw.pl line 132, at EOF

    Execution of /tmp/tmpbuwoksgw.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $key_type = \"\";\n    my $value_type = \"\";\n    my\
    \ $key_type_count = 0;\n    my $value_type_count = 0;\n    my $key_type_lower\
    \ = 0;\n    my $key_type_upper = 0;\n    my $value_type_lower = 0;\n    my $value_type_upper\
    \ = 0;\n    my $key_type_other = 0;\n    my $value_type_other = 0;\n    my $key_type_mixed\
    \ = 0;\n    my $value_type_mixed = 0;\n    my $key_type_mixed_lower = 0;\n   \
    \ my $key_type_mixed_upper = 0;\n    my $value_type_mixed_lower = 0;\n    my $value_type_mixed_upper\
    \ = 0;\n    my $key_type_mixed_other = 0;\n    my $value_type_mixed_other = 0;\n\
    \    my $key_type_mixed_count = 0;\n    my $value_type_mixed_count = 0;\n    my\
    \ $key_type_mixed_lower_count = 0;\n    my $key_type_mixed_upper_count = 0;\n\
    \    my $value_type_mixed_lower_count = 0;\n    my $value_type_mixed_upper_count\
    \ = 0;\n    my $key_type_mixed_other_count = 0;\n    my $value_type_mixed_other_count\
    \ = 0;\n    my $key_type_mixed_lower_count_max = 0;\n    my $key_type_mixed_upper_count_max\
    \ = 0;\n    my $value_type_mixed_lower_count_max = 0;\n    my $value_type_mixed_upper_count_max\
    \ = 0;\n    my $key_type_mixed_other_count_max = 0;\n    my $value_type_mixed_other_count_max\
    \ = 0;\n    my $key_type_mixed_lower_count\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpg8z387w7.pl line 48, at end
    of line

    syntax error at /tmp/tmpg8z387w7.pl line 48, near "$key_type_mixed_lower_count

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpg8z387w7.pl line 83, at end of
    line

    syntax error at /tmp/tmpg8z387w7.pl line 83, at EOF

    Execution of /tmp/tmpg8z387w7.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    my $is_mixed =\
    \ 0;\n    my $is_num = 0;\n    my $is_empty = 1;\n    my $is_str = 0;\n    my\
    \ $is_num_str = 0;\n    my $is_mixed_str = 0;\n    my $is_mixed_num = 0;\n   \
    \ my $is_mixed_num_str = 0;\n    my $is_mixed_upper = 0;\n    my $is_mixed_lower\
    \ = 0;\n    my $is_mixed_upper_lower = 0;\n    my $is_mixed_upper_lower_num =\
    \ 0;\n    my $is_mixed_upper_lower_num_str = 0;\n    my $is_mixed_upper_lower_str\
    \ = 0;\n    my $is_mixed_upper_num = 0;\n    my $is_mixed_upper_num_str = 0;\n\
    \    my $is_mixed_upper_str = 0;\n    my $is_mixed_lower_num = 0;\n    my $is_mixed_lower_num_str\
    \ = 0;\n    my $is_mixed_lower_str = 0;\n    my $is_mixed_num_str = 0;\n    my\
    \ $is_mixed_num_str = 0;\n    my $is_mixed_num_str = 0;\n    my $is_mixed_num_str\
    \ = 0;\n    my $is_mixed_num_str = 0;\n    my $is_mixed_num_str = 0;\n    my $is_mixed_num_str\
    \ = 0;\n    my $is_mixed_num_str = 0;\n    my $is_mixed_num_str = 0;\n    my $is_mixed_num_str\
    \ = 0;\n    my $is_mixed_num_str = 0;\n    my $is_mixed_num_str = 0;\n    my $is_mixed_num\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpfgyx5hp9.pl line 50, at end
    of line

    syntax error at /tmp/tmpfgyx5hp9.pl line 50, near "$is_mixed_num

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpfgyx5hp9.pl line 85, at end of
    line

    syntax error at /tmp/tmpfgyx5hp9.pl line 85, at EOF

    Execution of /tmp/tmpfgyx5hp9.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_all_lower = 1;\n    my\
    \ $is_all_upper = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~\
    \ /[A-Z]/) {\n            $is_all_lower = 0;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $is_all_upper = 0;\n        }\n    }\n    return $is_all_lower\
    \ || $is_all_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 0;\n    my $key;\n \
    \   my $val;\n    my $count = 0;\n    my $upper = 0;\n    my $lower = 0;\n   \
    \ my $other = 0;\n    while (($key, $val) = each %$dict) {\n        $count++;\n\
    \        if ($key =~ /^[A-Z]+$/) {\n            $upper++;\n        } elsif ($key\
    \ =~ /^[a-z]+$/) {\n            $lower++;\n        } else {\n            $other++;\n\
    \        }\n    }\n    if ($count > 0) {\n        if (($upper > 0) && ($lower\
    \ > 0)) {\n            $ret = 0;\n        } elsif (($upper > 0) && ($lower ==\
    \ 0)) {\n            $ret = 1;\n        } elsif (($upper == 0) && ($lower > 0))\
    \ {\n            $ret = 1;\n        }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $dict_size = scalar keys %$dict;\n\
    \    if ($dict_size == 0) {\n        return 0;\n    }\n    my $lower_case = 0;\n\
    \    my $upper_case = 0;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $lower_case = 1;\n        }\n        if ($key\
    \ =~ /^[A-Z]+$/) {\n            $upper_case = 1;\n        }\n    }\n    return\
    \ $lower_case && $upper_case ? 0 : 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $key;\n    my $value;\n   \
    \ my $result = 1;\n    my $upper = 0;\n    my $lower = 0;\n    my $other = 0;\n\
    \    my $count = 0;\n    while (($key, $value) = each %$dict) {\n        $count++;\n\
    \        if ($key =~ /^[A-Z]+$/) {\n            $upper++;\n        } elsif ($key\
    \ =~ /^[a-z]+$/) {\n            $lower++;\n        } else {\n            $other++;\n\
    \        }\n    }\n    if ($count == 0) {\n        $result = 0;\n    } elsif ($upper\
    \ > 0 && $lower > 0) {\n        $result = 0;\n    }\n    return $result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    while (($key,\
    \ $val) = each %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        } elsif ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n \
    \       } else {\n            $ret = 0;\n            last;\n        }\n    }\n\
    \    if ($is_upper && $is_lower) {\n        $ret = 0;\n    }\n    return $ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $all_upper\
    \ = 1;\n    my $all_lower = 1;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /[a-z]/) {\n            $all_upper = 0;\n        }\n        if ($key\
    \ =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n    }\n    if ($all_upper\
    \ == 0 && $all_lower == 0) {\n        $ret = 0;\n    }\n    return $ret;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $key_type;\n    my $key_type_upper = 1;\n    my $key_type_lower = 1;\n\
    \    my $key_type_mixed = 0;\n    my $key_type_digit = 0;\n    my $key_type_other\
    \ = 0;\n    my $key_type_other_char = \"\";\n    my $key_type_other_char_count\
    \ = 0;\n    my $key_type_other_char_max = 0;\n    my $key_type_other_char_max_count\
    \ = 0;\n    my $key_type_other_char_max_count_prev = 0;\n    my $key_type_other_char_max_count_prev_prev\
    \ = 0;\n    my $key_type_other_char_max_count_prev_prev_prev = 0;\n    my $key_type_other_char_max_count_prev_prev_prev_prev\
    \ = 0;\n    my $key_type_other_char_max_count_prev_prev_prev_prev_prev = 0;\n\
    \    my $key_type_other_char_max_count_prev_prev_prev_prev_prev_prev = 0;\n  \
    \  my $key_type_other_char_max_count_prev_prev_prev_prev_prev_prev_prev = 0;\n\
    \    my $key_type_other_char_max_count_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $key_type_other_char_max_count_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $key_type_other_char_max_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $key_type_other_char_max_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $key_type_other_char_max_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpo1j1srmy.pl line 36, at end
    of line

    syntax error at /tmp/tmpo1j1srmy.pl line 36, near "$key_type_other_char_max_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpo1j1srmy.pl line 71, at end of
    line

    syntax error at /tmp/tmpo1j1srmy.pl line 71, at EOF

    Execution of /tmp/tmpo1j1srmy.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $is_lower = 0 if $key =~\
    \ /[A-Z]/;\n        $is_upper = 0 if $key =~ /[a-z]/;\n    }\n    return $is_lower\
    \ || $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    my $is_mixed =\
    \ 0;\n    my $is_empty = 1;\n    while (($key, $val) = each %$dict) {\n      \
    \  $is_empty = 0;\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower =\
    \ 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n   \
    \     } else {\n            $is_mixed = 1;\n        }\n    }\n    if ($is_empty)\
    \ {\n        $ret = 0;\n    } elsif ($is_lower && $is_upper) {\n        $ret =\
    \ 0;\n    } elsif ($is_mixed) {\n        $ret = 0;\n    }\n    return $ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $case = 0;\n    while (($key, $value) = each %$dict) {\n\
    \        if ($case == 0) {\n            if ($key =~ /[A-Z]/) {\n             \
    \   $case = 1;\n            }\n            elsif ($key =~ /[a-z]/) {\n       \
    \         $case = 2;\n            }\n            else {\n                $result\
    \ = 0;\n                last;\n            }\n        }\n        elsif ($case\
    \ == 1) {\n            if ($key !~ /[A-Z]/) {\n                $result = 0;\n\
    \                last;\n            }\n        }\n        elsif ($case == 2) {\n\
    \            if ($key !~ /[a-z]/) {\n                $result = 0;\n          \
    \      last;\n            }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $is_upper\
    \ = 0;\n    my $is_lower = 0;\n    my $key;\n    foreach $key (keys %$dict) {\n\
    \        if ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } elsif\
    \ ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        } else {\n     \
    \       $result = 0;\n            last;\n        }\n    }\n    if ($is_upper &&\
    \ $is_lower) {\n        $result = 0;\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n\
    \            $is_upper = 1;\n        }\n        else {\n            return 0;\n\
    \        }\n    }\n    return $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $key;\n    my $value;\n   \
    \ my $retval = 1;\n    my $lower_case = 0;\n    my $upper_case = 0;\n    my $first_key\
    \ = 1;\n    my $first_value = 1;\n    my $first_key_case = 0;\n    my $first_value_case\
    \ = 0;\n    my $key_case = 0;\n    my $value_case = 0;\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpk3ybnyx4.pl line 58, at
    end of line

    syntax error at /tmp/tmpk3ybnyx4.pl line 58, at EOF

    Execution of /tmp/tmpk3ybnyx4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my @keys = keys %$dict;\n    my\
    \ $first_key = $keys[0];\n    my $first_key_is_lower = $first_key =~ /^[a-z]+$/;\n\
    \    my $first_key_is_upper = $first_key =~ /^[A-Z]+$/;\n    my $all_keys_are_lower\
    \ = 1;\n    my $all_keys_are_upper = 1;\n    foreach my $key (@keys) {\n     \
    \   $all_keys_are_lower = 0 if $key !~ /^[a-z]+$/;\n        $all_keys_are_upper\
    \ = 0 if $key !~ /^[A-Z]+$/;\n    }\n    return $all_keys_are_lower || $all_keys_are_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 1;\n    my $upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $lower = 0 if $key !~ /^[a-z]+$/;\n\
    \        $upper = 0 if $key !~ /^[A-Z]+$/;\n    }\n    return $lower || $upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    my $is_mixed =\
    \ 0;\n    my $is_num = 0;\n    my $is_empty = 1;\n    foreach $key (keys %$dict)\
    \ {\n        $is_empty = 0;\n        if ($key =~ /[a-z]/) {\n            $is_lower\
    \ = 1;\n        }\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n\
    \        }\n        if ($key =~ /[0-9]/) {\n            $is_num = 1;\n       \
    \ }\n        if ($is_lower && $is_upper) {\n            $is_mixed = 1;\n     \
    \   }\n    }\n    if ($is_empty) {\n        $ret = 0;\n    }\n    if ($is_mixed\
    \ || $is_num) {\n        $ret = 0;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $key_type = \"\";\n    my $val_type = \"\";\n    my $key_type_set\
    \ = 0;\n    my $val_type_set = 0;\n    my $key_type_count = 0;\n    my $val_type_count\
    \ = 0;\n    my $key_type_count_set = 0;\n    my $val_type_count_set = 0;\n   \
    \ my $key_type_count_set_count = 0;\n    my $val_type_count_set_count = 0;\n \
    \   my $key_type_count_set_count_set = 0;\n    my $val_type_count_set_count_set\
    \ = 0;\n    my $key_type_count_set_count_set_count = 0;\n    my $val_type_count_set_count_set_count\
    \ = 0;\n    my $key_type_count_set_count_set_count_set = 0;\n    my $val_type_count_set_count_set_count_set\
    \ = 0;\n    my $key_type_count_set_count_set_count_set_count = 0;\n    my $val_type_count_set_count_set_count_set_count\
    \ = 0;\n    my $key_type_count_set_count_set_count_set_count_set = 0;\n    my\
    \ $val_type_count_set_count_set_count_set_count_set = 0;\n    my $key_type_count_set_count_set_count_set_count_set_count\
    \ = 0;\n    my $val_type_count_set_count_set_count_set_count_set_count = 0;\n\
    \    my $key_type_count_set_count_set_count_set_count_set_count_set = 0;\n   \
    \ my $val_type_count_set_count_set_count_set_count_set_count_set = 0;\n    my\
    \ $key_type_count_set_count_set_count_set_count_set_count_set_\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpx_oymeds.pl line 40, at end
    of line

    syntax error at /tmp/tmpx_oymeds.pl line 40, near "$key_type_count_set_count_set_count_set_count_set_count_set_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpx_oymeds.pl line 75, at end of
    line

    syntax error at /tmp/tmpx_oymeds.pl line 75, at EOF

    Execution of /tmp/tmpx_oymeds.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $lc_key;\n    my $uc_key;\n    my $lc_val;\n    my $uc_val;\n\
    \    my $lc_count = 0;\n    my $uc_count = 0;\n    my $other_count = 0;\n    my\
    \ $lc_flag = 0;\n    my $uc_flag = 0;\n    my $other_flag = 0;\n    my $lc_dict\
    \ = {};\n    my $uc_dict = {};\n    my $other_dict = {};\n    my $lc_dict_str;\n\
    \    my $uc_dict_str;\n    my $other_dict_str;\n    my $dict_str;\n    my $dict_str_lc;\n\
    \    my $dict_str_uc;\n    my $dict_str_other;\n    my $dict_str_lc_uc;\n    my\
    \ $dict_str_lc_other;\n    my $dict_str_uc_other;\n    my $dict_str_lc_uc_other;\n\
    \    my $dict_str_lc_uc_other_lc;\n    my $dict_str_lc_uc_other_uc;\n    my $dict_str_lc_uc_other_other;\n\
    \    my $dict_str_lc_uc_other_lc_uc;\n    my $dict_str_lc_uc_other_lc_other;\n\
    \    my $dict_str_lc_uc_other_uc_other;\n    my $dict_str_lc_uc_other_lc_uc_other;\n\
    \    my $dict_str_lc_uc_other_lc_uc_other_lc;\n    my $dict_str_lc_uc_other_lc_uc_other_uc;\n\
    \    my $dict_str_lc_uc_other_lc_uc_other_other;\n    my $dict_str_lc_uc_other_lc_uc_other_lc_uc;\n\
    \    my $dict_str_lc_uc_other_lc_uc_other_lc_other;\n    my $dict_str_lc_uc_other_lc_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpsdkio4zh.pl line 52, at end
    of line

    syntax error at /tmp/tmpsdkio4zh.pl line 52, near "$dict_str_lc_uc_other_lc_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpsdkio4zh.pl line 87, at end of
    line

    syntax error at /tmp/tmpsdkio4zh.pl line 87, at EOF

    Execution of /tmp/tmpsdkio4zh.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n        \
    \    $is_upper = 1;\n        } else {\n            return 0;\n        }\n    }\n\
    \    return ($is_lower && $is_upper) ? 0 : 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n    \
    \        $upper++;\n        }\n        else {\n            return 0;\n       \
    \ }\n    }\n    if ($lower == 0 || $upper == 0) {\n        return 1;\n    }\n\
    \    else {\n        return 0;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_upper = 0;\n    my $is_lower\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[A-Z]+$/) {\n\
    \            $is_upper = 1;\n        } elsif ($key =~ /^[a-z]+$/) {\n        \
    \    $is_lower = 1;\n        } else {\n            return 0;\n        }\n    }\n\
    \    return $is_upper && $is_lower ? 0 : 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[a-z]/) {\n\
    \            $lower++;\n        }\n        if ($key =~ /[A-Z]/) {\n          \
    \  $upper++;\n        }\n    }\n    if ($lower == 0 || $upper == 0) {\n      \
    \  return 1;\n    }\n    return 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $upper = 0;\n    my $lower = 0;\n    my $num = 0;\n  \
    \  my $other = 0;\n    my $empty = 0;\n    my $count = 0;\n    my $total = 0;\n\
    \    my $key_type = \"\";\n    my $value_type = \"\";\n    my $key_type_count\
    \ = 0;\n    my $value_type_count = 0;\n    my $key_type_total = 0;\n    my $value_type_total\
    \ = 0;\n    my $key_type_result = 1;\n    my $value_type_result = 1;\n    my $key_type_empty\
    \ = 0;\n    my $value_type_empty = 0;\n    my $key_type_upper = 0;\n    my $value_type_upper\
    \ = 0;\n    my $key_type_lower = 0;\n    my $value_type_lower = 0;\n    my $key_type_num\
    \ = 0;\n    my $value_type_num = 0;\n    my $key_type_other = 0;\n    my $value_type_other\
    \ = 0;\n    my $key_type_str = 0;\n    my $value_type_str = 0;\n    my $key_type_int\
    \ = 0;\n    my $value_type_int = 0;\n    my $key_type_float = 0;\n    my $value_type_float\
    \ = 0;\n    my $key_type_bool = 0;\n    my $value_type_bool = 0;\n    my $key_type_undef\
    \ = 0;\n    my $value_type_undef = 0;\n    my $key_type_ref = 0;\n    my $value_type_ref\
    \ = 0;\n    my $key_type_array = 0;\n    my $value_type_array = 0;\n    my $key_type_hash\
    \ = 0;\n    my $value_type_hash = 0;\n    my $key_type_code = 0;\n    my $value_type_code\
    \ = 0;\n    my $key_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmps889qirt.pl line 59, at end
    of line

    syntax error at /tmp/tmps889qirt.pl line 59, near "$key_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmps889qirt.pl line 94, at end of
    line

    syntax error at /tmp/tmps889qirt.pl line 94, at EOF

    Execution of /tmp/tmps889qirt.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $is_lower = 0 if $key =~\
    \ /[A-Z]/;\n        $is_upper = 0 if $key =~ /[a-z]/;\n    }\n    return $is_lower\
    \ || $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    my $is_mixed =\
    \ 0;\n    my $is_num = 0;\n    my $is_empty = 1;\n    while (($key, $val) = each\
    \ %$dict) {\n        $is_empty = 0;\n        if ($key =~ /^[a-z]+$/) {\n     \
    \       $is_lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        } elsif ($key =~ /^[0-9]+$/) {\n            $is_num = 1;\n   \
    \     } else {\n            $is_mixed = 1;\n        }\n    }\n    if ($is_empty)\
    \ {\n        $ret = 0;\n    } elsif ($is_mixed || $is_num) {\n        $ret = 0;\n\
    \    } elsif ($is_lower && $is_upper) {\n        $ret = 0;\n    }\n    return\
    \ $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $key_type = \"\";\n    my $val_type = \"\";\n    my $key_type_count\
    \ = 0;\n    my $val_type_count = 0;\n    my $key_type_lower = 0;\n    my $key_type_upper\
    \ = 0;\n    my $val_type_lower = 0;\n    my $val_type_upper = 0;\n    my $key_type_mixed\
    \ = 0;\n    my $val_type_mixed = 0;\n    my $key_type_num = 0;\n    my $val_type_num\
    \ = 0;\n    my $key_type_other = 0;\n    my $val_type_other = 0;\n    my $key_type_all\
    \ = 0;\n    my $val_type_all = 0;\n    my $key_type_all_lower = 0;\n    my $key_type_all_upper\
    \ = 0;\n    my $val_type_all_lower = 0;\n    my $val_type_all_upper = 0;\n   \
    \ my $key_type_all_mixed = 0;\n    my $val_type_all_mixed = 0;\n    my $key_type_all_num\
    \ = 0;\n    my $val_type_all_num = 0;\n    my $key_type_all_other = 0;\n    my\
    \ $val_type_all_other = 0;\n    my $key_type_all_count = 0;\n    my $val_type_all_count\
    \ = 0;\n    my $key_type_all_lower_count = 0;\n    my $key_type_all_upper_count\
    \ = 0;\n    my $val_type_all_lower_count = 0;\n    my $val_type_all_upper_count\
    \ = 0;\n    my $key_type_all_mixed_count = 0;\n    my $val_type_all_mixed_count\
    \ = 0;\n    my $key_type_all_num_count = 0;\n    my $val_type_all_num_count =\
    \ 0;\n   \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmptimp3zrk.pl line 87, at
    end of line

    syntax error at /tmp/tmptimp3zrk.pl line 87, at EOF

    Execution of /tmp/tmptimp3zrk.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n  \
    \          $upper = 1;\n        }\n        else {\n            return 0;\n   \
    \     }\n    }\n    return $lower + $upper == 1;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $upper =\
    \ 0;\n    my $lower = 0;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /[A-Z]/) {\n            $upper++;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $lower++;\n        }\n    }\n    if ($upper && $lower) {\n  \
    \      $ret = 0;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 1;\n    my $upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $lower = 0 if ($key !~ /^[a-z]+$/);\n\
    \        $upper = 0 if ($key !~ /^[A-Z]+$/);\n    }\n    return $lower || $upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $is_upper\
    \ = 0;\n    my $is_lower = 0;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n        }\n        if ($key\
    \ =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n    }\n    if ($is_upper\
    \ && $is_lower) {\n        $result = 0;\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $all_lower = 0 if $key =~\
    \ /[A-Z]/;\n        $all_upper = 0 if $key =~ /[a-z]/;\n    }\n    return $all_lower\
    \ || $all_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $all_lower = 0 if $key =~\
    \ /[A-Z]/;\n        $all_upper = 0 if $key =~ /[a-z]/;\n    }\n    return $all_lower\
    \ || $all_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        }\n        if ($key =~ /^[A-Z]+$/) {\n  \
    \          $is_upper = 1;\n        }\n    }\n    return ($is_lower && $is_upper)\
    \ ? 0 : 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $case;\n    while (($key, $value) = each %$dict) {\n \
    \       if ($case) {\n            if ($case eq 'upper') {\n                $result\
    \ = 0 if $key !~ /^[A-Z]+$/;\n            } else {\n                $result =\
    \ 0 if $key !~ /^[a-z]+$/;\n            }\n        } else {\n            if ($key\
    \ =~ /^[A-Z]+$/) {\n                $case = 'upper';\n            } else {\n \
    \               $case = 'lower';\n            }\n        }\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $all_lower = 0 if $key =~\
    \ /[A-Z]/;\n        $all_upper = 0 if $key =~ /[a-z]/;\n    }\n    return $all_lower\
    \ || $all_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        } elsif ($key =~ /^[A-Z]+$/) {\n        \
    \    $is_upper = 1;\n        } else {\n            return 0;\n        }\n    }\n\
    \    return $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $key_type = \"\";\n    my $value_type = \"\";\n    my\
    \ $key_type_count = 0;\n    my $value_type_count = 0;\n    my $key_type_lower\
    \ = 0;\n    my $key_type_upper = 0;\n    my $value_type_lower = 0;\n    my $value_type_upper\
    \ = 0;\n    my $key_type_other = 0;\n    my $value_type_other = 0;\n    my $key_type_digit\
    \ = 0;\n    my $value_type_digit = 0;\n    my $key_type_space = 0;\n    my $value_type_space\
    \ = 0;\n    my $key_type_punct = 0;\n    my $value_type_punct = 0;\n    my $key_type_alpha\
    \ = 0;\n    my $value_type_alpha = 0;\n    my $key_type_alnum = 0;\n    my $value_type_alnum\
    \ = 0;\n    my $key_type_graph = 0;\n    my $value_type_graph = 0;\n    my $key_type_print\
    \ = 0;\n    my $value_type_print = 0;\n    my $key_type_xdigit = 0;\n    my $value_type_xdigit\
    \ = 0;\n    my $key_type_blank = 0;\n    my $value_type_blank = 0;\n    my $key_type_cntrl\
    \ = 0;\n    my $value_type_cntrl = 0;\n    my $key_type_ascii = 0;\n    my $value_type_ascii\
    \ = 0;\n    my $key_type_length = 0;\n    my $value_type_length = 0;\n    my $key_type_length_min\
    \ = 0;\n    my $value_type_length_min = 0;\n    my $key_type_length_max = 0;\n\
    \    my $value_type_length_max = 0;\n    my $key_type_length_avg = 0;\n    my\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'No such class use at /tmp/tmp37hu232e.pl line 55, near "my

    use"

    syntax error at /tmp/tmp37hu232e.pl line 55, near "my

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp37hu232e.pl line 90, at end of
    line

    syntax error at /tmp/tmp37hu232e.pl line 90, at EOF

    Execution of /tmp/tmp37hu232e.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $is_lower\
    \ = 0;\n    my $is_upper = 0;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n        elsif\
    \ ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n        else\
    \ {\n            $result = 0;\n            last;\n        }\n    }\n    if ($is_lower\
    \ && $is_upper) {\n        $result = 0;\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $lower\
    \ = 1;\n    my $upper = 1;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /[A-Z]/) {\n            $lower = 0;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $upper = 0;\n        }\n    }\n    if ($lower == 0 && $upper\
    \ == 0) {\n        $result = 0;\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $case;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n\
    \    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n\
    \    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n\
    \    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n\
    \    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n\
    \    my $Z = 0;\n    my $count = 0;\n    my $count_upper = 0;\n    my $count_lower\
    \ = 0;\n    my $count_other = 0;\n    foreach $key (keys %$dict) {\n        $value\
    \ = $dict->{$key};\n        $count++;\n        if ($key =~ /[a-z]/) {\n      \
    \      $count_lower++;\n        }\n        if ($key =~ /[A-Z]/) {\n          \
    \  $count_upper++;\n        }\n        if ($key =~ /[^a-zA-Z\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Search pattern not terminated at /tmp/tmpagrnppfb.pl line 73.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    foreach $key (keys\
    \ %$dict) {\n        $val = $dict->{$key};\n        if ($key =~ /^[A-Z]+$/) {\n\
    \            $is_upper = 1;\n        }\n        if ($key =~ /^[a-z]+$/) {\n  \
    \          $is_lower = 1;\n        }\n    }\n    if ($is_upper && $is_lower) {\n\
    \        $ret = 0;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n    \
    \        $upper++;\n        }\n        else {\n            return 0;\n       \
    \ }\n    }\n    return ($lower == 0 || $upper == 0) ? 1 : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $all_lower\
    \ = 1;\n    my $all_upper = 1;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n        if ($key\
    \ =~ /[a-z]/) {\n            $all_upper = 0;\n        }\n    }\n    if ($all_lower\
    \ == 0 && $all_upper == 0) {\n        $ret = 0;\n    }\n    return $ret;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $all_lower = 0 if $key =~\
    \ /[A-Z]/;\n        $all_upper = 0 if $key =~ /[a-z]/;\n    }\n    return $all_lower\
    \ || $all_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my($key, $value);\n    my($all_lower,\
    \ $all_upper);\n    my($retval) = 1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpwclhni4d.pl line 50, at
    end of line

    syntax error at /tmp/tmpwclhni4d.pl line 50, at EOF

    Execution of /tmp/tmpwclhni4d.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $lower_case\
    \ = 0;\n    my $upper_case = 0;\n    foreach my $key (keys %$dict) {\n       \
    \ if ($key =~ /^[a-z]+$/) {\n            $lower_case = 1;\n        }\n       \
    \ elsif ($key =~ /^[A-Z]+$/) {\n            $upper_case = 1;\n        }\n    \
    \    else {\n            $result = 0;\n            last;\n        }\n    }\n \
    \   if ($lower_case && $upper_case) {\n        $result = 0;\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $is_upper\
    \ = 0;\n    my $is_lower = 0;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n        }\n        if ($key\
    \ =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n    }\n    if ($is_upper\
    \ && $is_lower) {\n        $result = 0;\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper++;\n\
    \        } else {\n            return 0;\n        }\n    }\n    return $lower\
    \ == 0 || $upper == 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012641
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $value;\n    my $lower = 0;\n    my $upper = 0;\n    my $other = 0;\n \
    \   while (($key, $value) = each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper++;\n\
    \        } else {\n            $other++;\n        }\n    }\n    if ($lower > 0\
    \ && $upper > 0) {\n        $ret = 0;\n    }\n    if ($other > 0) {\n        $ret\
    \ = 0;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $key_type;\n    my $value_type;\n    my $key_type_count\
    \ = 0;\n    my $value_type_count = 0;\n    my $key_type_lower = 0;\n    my $key_type_upper\
    \ = 0;\n    my $value_type_lower = 0;\n    my $value_type_upper = 0;\n    my $key_type_mixed\
    \ = 0;\n    my $value_type_mixed = 0;\n    my $key_type_other = 0;\n    my $value_type_other\
    \ = 0;\n    my $key_type_count_lower = 0;\n    my $key_type_count_upper = 0;\n\
    \    my $value_type_count_lower = 0;\n    my $value_type_count_upper = 0;\n  \
    \  my $key_type_count_mixed = 0;\n    my $value_type_count_mixed = 0;\n    my\
    \ $key_type_count_other = 0;\n    my $value_type_count_other = 0;\n    my $key_type_count_total\
    \ = 0;\n    my $value_type_count_total = 0;\n    my $key_type_count_total_lower\
    \ = 0;\n    my $key_type_count_total_upper = 0;\n    my $value_type_count_total_lower\
    \ = 0;\n    my $value_type_count_total_upper = 0;\n    my $key_type_count_total_mixed\
    \ = 0;\n    my $value_type_count_total_mixed = 0;\n    my $key_type_count_total_other\
    \ = 0;\n    my $value_type_count_total_other = 0;\n    my $key_type_count_total_all\
    \ = 0;\n    my $value_type_count_total_all = 0;\n    my $key_type_count_total_all_lower\
    \ = 0;\n    my $key_type_count_total_all_upper = 0;\n    my $value_type_count_total_all_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpip51k0l7.pl line 50, at end
    of line

    syntax error at /tmp/tmpip51k0l7.pl line 50, near "$value_type_count_total_all_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpip51k0l7.pl line 85, at end of
    line

    syntax error at /tmp/tmpip51k0l7.pl line 85, at EOF

    Execution of /tmp/tmpip51k0l7.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_upper = 0;\n    my $is_lower\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[a-z]/) {\n\
    \            $is_lower = 1;\n        }\n        if ($key =~ /[A-Z]/) {\n     \
    \       $is_upper = 1;\n        }\n    }\n    return $is_lower && $is_upper ?\
    \ 0 : 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $key_type = 0;\n    my $val_type = 0;\n    my $key_type_upper\
    \ = 0;\n    my $key_type_lower = 0;\n    my $val_type_upper = 0;\n    my $val_type_lower\
    \ = 0;\n    my $key_type_num = 0;\n    my $val_type_num = 0;\n    my $key_type_str\
    \ = 0;\n    my $val_type_str = 0;\n    my $key_type_mix = 0;\n    my $val_type_mix\
    \ = 0;\n    my $key_type_mix_upper = 0;\n    my $key_type_mix_lower = 0;\n   \
    \ my $val_type_mix_upper = 0;\n    my $val_type_mix_lower = 0;\n    my $key_type_mix_num\
    \ = 0;\n    my $val_type_mix_num = 0;\n    my $key_type_mix_str = 0;\n    my $val_type_mix_str\
    \ = 0;\n    my $key_type_mix_upper_num = 0;\n    my $key_type_mix_upper_str =\
    \ 0;\n    my $key_type_mix_lower_num = 0;\n    my $key_type_mix_lower_str = 0;\n\
    \    my $val_type_mix_upper_num = 0;\n    my $val_type_mix_upper_str = 0;\n  \
    \  my $val_type_mix_lower_num = 0;\n    my $val_type_mix_lower_str = 0;\n    my\
    \ $key_type_mix_upper_lower = 0;\n    my $val_type_mix_upper_lower = 0;\n    my\
    \ $key_type_mix_upper_lower_num = 0;\n    my $key_type_mix_upper_lower_str = 0;\n\
    \    my $val_type_mix_upper_lower_num = 0;\n    my $val_type_mix_upper_lower_str\
    \ = 0;\n    my $key_type_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmph64qdbsn.pl line 50, at end
    of line

    syntax error at /tmp/tmph64qdbsn.pl line 50, near "$key_type_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmph64qdbsn.pl line 85, at end of
    line

    syntax error at /tmp/tmph64qdbsn.pl line 85, at EOF

    Execution of /tmp/tmph64qdbsn.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    my $is_empty = 1;\n    foreach my $key (keys %$dict) {\n        $is_empty\
    \ = 0;\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n      \
    \  } elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } else\
    \ {\n            return 0;\n        }\n    }\n    return $is_empty ? 0 : ($is_lower\
    \ && !$is_upper) || (!$is_lower && $is_upper);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    my $is_mixed =\
    \ 0;\n    my $is_num = 0;\n    my $is_empty = 1;\n    my $is_str = 0;\n    my\
    \ $is_dict = 0;\n    my $is_list = 0;\n    my $is_bool = 0;\n    my $is_null =\
    \ 0;\n    my $is_other = 0;\n    my $is_str_lower = 0;\n    my $is_str_upper =\
    \ 0;\n    my $is_str_mixed = 0;\n    my $is_str_num = 0;\n    my $is_str_empty\
    \ = 1;\n    my $is_str_str = 0;\n    my $is_str_dict = 0;\n    my $is_str_list\
    \ = 0;\n    my $is_str_bool = 0;\n    my $is_str_null = 0;\n    my $is_str_other\
    \ = 0;\n    my $is_val_lower = 0;\n    my $is_val_upper = 0;\n    my $is_val_mixed\
    \ = 0;\n    my $is_val_num = 0;\n    my $is_val_empty = 1;\n    my $is_val_str\
    \ = 0;\n    my $is_val_dict = 0;\n    my $is_val_list = 0;\n    my $is_val_bool\
    \ = 0;\n    my $is_val_null = 0;\n    my $is_val_other = 0;\n    my $is_key_lower\
    \ = 0;\n    my $is_key_upper = 0;\n    my $is_key_mixed = 0;\n    my $is_key_num\
    \ = 0;\n    my $is_key_empty = 1;\n    my $is_key_str = 0;\n    my $is_key_dict\
    \ = 0;\n    my $is_key_list = 0;\n    my $is_key_bool = 0;\n    my $is_\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp41dwvkb4.pl line 58, at end
    of line

    syntax error at /tmp/tmp41dwvkb4.pl line 58, near "$is_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp41dwvkb4.pl line 93, at end of
    line

    syntax error at /tmp/tmp41dwvkb4.pl line 93, at EOF

    Execution of /tmp/tmp41dwvkb4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $key;\n    my $val;\n    my\
    \ $lower_count = 0;\n    my $upper_count = 0;\n    my $other_count = 0;\n    my\
    \ $result = 1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpyojxydt0.pl line 53, at
    end of line

    syntax error at /tmp/tmpyojxydt0.pl line 53, at EOF

    Execution of /tmp/tmpyojxydt0.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my($key, $val);\n    my($all_lower,\
    \ $all_upper);\n    $all_lower = 1;\n    $all_upper = 1;\n    foreach $key (keys\
    \ %$dict) {\n        if ($key !~ /^[a-z]+$/) {\n            $all_lower = 0;\n\
    \        }\n        if ($key !~ /^[A-Z]+$/) {\n            $all_upper = 0;\n \
    \       }\n    }\n    return ($all_lower || $all_upper);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $lower\
    \ = 0;\n    my $upper = 0;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $lower = 1;\n        }\n        elsif ($key =~\
    \ /^[A-Z]+$/) {\n            $upper = 1;\n        }\n        else {\n        \
    \    $result = 0;\n            last;\n        }\n    }\n    if ($lower && $upper)\
    \ {\n        $result = 0;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n    \
    \        $upper++;\n        }\n        else {\n            return 0;\n       \
    \ }\n    }\n    return ($lower == 0 || $upper == 0);\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key !~ /^[a-z]+$/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key !~ /^[A-Z]+$/) {\n \
    \           $all_upper = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $upper_case = 0;\n    my $lower_case = 0;\n    my $mixed_case\
    \ = 0;\n    my $non_alpha = 0;\n    my $empty = 0;\n    my $count = 0;\n    my\
    \ $key_count = 0;\n    my $value_count = 0;\n    my $key_value_count = 0;\n  \
    \  my $key_value_mixed_count = 0;\n    my $key_value_non_alpha_count = 0;\n  \
    \  my $key_value_empty_count = 0;\n    my $key_value_upper_count = 0;\n    my\
    \ $key_value_lower_count = 0;\n    my $key_value_upper_lower_count = 0;\n    my\
    \ $key_value_upper_lower_mixed_count = 0;\n    my $key_value_upper_lower_non_alpha_count\
    \ = 0;\n    my $key_value_upper_lower_empty_count = 0;\n    my $key_value_upper_mixed_count\
    \ = 0;\n    my $key_value_upper_non_alpha_count = 0;\n    my $key_value_upper_empty_count\
    \ = 0;\n    my $key_value_lower_mixed_count = 0;\n    my $key_value_lower_non_alpha_count\
    \ = 0;\n    my $key_value_lower_empty_count = 0;\n    my $key_value_mixed_non_alpha_count\
    \ = 0;\n    my $key_value_mixed_empty_count = 0;\n    my $key_value_non_alpha_empty_count\
    \ = 0;\n    my $key_value_upper_lower_mixed_non_alpha_count = 0;\n    my $key_value_upper_lower_mixed_empty_count\
    \ = 0;\n    my $key_value_upper_lower_non_alpha_empty_count = 0;\n    my $key_value_upper_mixed_non_alpha_count\
    \ = 0;\n    my $key_value_upper_mixed_empty\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpppwinjmp.pl line 47, at end
    of line

    syntax error at /tmp/tmpppwinjmp.pl line 47, near "$key_value_upper_mixed_empty

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpppwinjmp.pl line 82, at end of
    line

    syntax error at /tmp/tmpppwinjmp.pl line 82, at EOF

    Execution of /tmp/tmpppwinjmp.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $is_upper\
    \ = 0;\n    my $is_lower = 0;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        } elsif ($key =~\
    \ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } else {\n            $ret\
    \ = 0;\n            last;\n        }\n    }\n    if ($is_lower && $is_upper) {\n\
    \        $ret = 0;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key_type\
    \ = \"\";\n    my $key_type_count = 0;\n    foreach my $key (keys %$dict) {\n\
    \        if ($key_type eq \"\") {\n            if ($key =~ /[a-z]/) {\n      \
    \          $key_type = \"lower\";\n            } elsif ($key =~ /[A-Z]/) {\n \
    \               $key_type = \"upper\";\n            } else {\n               \
    \ $ret = 0;\n                last;\n            }\n        }\n        if ($key_type\
    \ eq \"lower\") {\n            if ($key =~ /[A-Z]/) {\n                $ret =\
    \ 0;\n                last;\n            }\n        } elsif ($key_type eq \"upper\"\
    ) {\n            if ($key =~ /[a-z]/) {\n                $ret = 0;\n         \
    \       last;\n            }\n        }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $lower = 0;\n    my $upper = 0;\n    if (scalar(keys %$dict)\
    \ == 0) {\n        $result = 0;\n    } else {\n        while (($key, $value) =\
    \ each %$dict) {\n            if ($key =~ /^[a-z]+$/) {\n                $lower++;\n\
    \            } elsif ($key =~ /^[A-Z]+$/) {\n                $upper++;\n     \
    \       } else {\n                $result = 0;\n                last;\n      \
    \      }\n        }\n        if ($lower > 0 && $upper > 0) {\n            $result\
    \ = 0;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $all_lower = 0 if $key =~\
    \ /[A-Z]/;\n        $all_upper = 0 if $key =~ /[a-z]/;\n    }\n    return $all_lower\
    \ || $all_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $all_lower = 0 if $key =~\
    \ /[A-Z]/;\n        $all_upper = 0 if $key =~ /[a-z]/;\n    }\n    return $all_lower\
    \ || $all_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $lower_case = 0;\n    my $upper_case = 0;\n    my $other_case\
    \ = 0;\n    my $key_count = 0;\n    my $value_count = 0;\n    my $key_value_count\
    \ = 0;\n    my $key_value_count_lower = 0;\n    my $key_value_count_upper = 0;\n\
    \    my $key_value_count_other = 0;\n    my $key_value_count_lower_upper = 0;\n\
    \    my $key_value_count_lower_other = 0;\n    my $key_value_count_upper_other\
    \ = 0;\n    my $key_value_count_lower_upper_other = 0;\n    my $key_value_count_lower_upper_other_equal\
    \ = 0;\n    my $key_value_count_lower_upper_other_not_equal = 0;\n    my $key_value_count_lower_upper_other_equal_lower\
    \ = 0;\n    my $key_value_count_lower_upper_other_equal_upper = 0;\n    my $key_value_count_lower_upper_other_equal_other\
    \ = 0;\n    my $key_value_count_lower_upper_other_not_equal_lower = 0;\n    my\
    \ $key_value_count_lower_upper_other_not_equal_upper = 0;\n    my $key_value_count_lower_upper_other_not_equal_other\
    \ = 0;\n    my $key_value_count_lower_upper_other_equal_lower_upper = 0;\n   \
    \ my $key_value_count_lower_upper_other_equal_lower_other = 0;\n    my $key_value_count_lower_upper_other_equal_upper_other\
    \ = 0;\n    my $key_value_count_lower_upper_other_not_equal_lower_upper = 0;\n\
    \    my $key_value_count_lower_upper_other_not_equal_lower_other = 0;\n    my\
    \ $key_value_count_lower_upper_other_not_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp42hl5l8k.pl line 42, at end
    of line

    syntax error at /tmp/tmp42hl5l8k.pl line 42, near "$key_value_count_lower_upper_other_not_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp42hl5l8k.pl line 77, at end of
    line

    syntax error at /tmp/tmp42hl5l8k.pl line 77, at EOF

    Execution of /tmp/tmp42hl5l8k.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_all_lower = 1;\n    my\
    \ $is_all_upper = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~\
    \ /[A-Z]/) {\n            $is_all_lower = 0;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $is_all_upper = 0;\n        }\n    }\n    return $is_all_lower\
    \ || $is_all_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $upper = 0;\n    my $lower\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $upper++;\n        }\n        if ($key =~ /[a-z]/) {\n          \
    \  $lower++;\n        }\n    }\n    return ($upper == 0 || $lower == 0);\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $is_lower = 0 if $key !~\
    \ /^[a-z]+$/;\n        $is_upper = 0 if $key !~ /^[A-Z]+$/;\n    }\n    return\
    \ $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012641
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $k (keys %$dict) {\n        if ($k =~ /^[a-z]+$/) {\n \
    \           $lower++;\n        }\n        elsif ($k =~ /^[A-Z]+$/) {\n       \
    \     $upper++;\n        }\n        else {\n            return 0;\n        }\n\
    \    }\n    return $lower == 0 || $upper == 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $case;\n    my $count = 0;\n    while (($key, $value)\
    \ = each %$dict) {\n        if ($count == 0) {\n            if ($key =~ /[a-z]/)\
    \ {\n                $case = \"lower\";\n            } else {\n              \
    \  $case = \"upper\";\n            }\n        }\n        if ($case eq \"lower\"\
    ) {\n            if ($key !~ /[a-z]/) {\n                $result = 0;\n      \
    \          last;\n            }\n        } else {\n            if ($key !~ /[A-Z]/)\
    \ {\n                $result = 0;\n                last;\n            }\n    \
    \    }\n        $count++;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_upper = 1;\n    my $is_lower\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $is_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n     \
    \       $is_upper = 0;\n        }\n    }\n    return $is_upper || $is_lower;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n    \
    \        $upper++;\n        }\n        else {\n            return 0;\n       \
    \ }\n    }\n    if ($lower > 0 && $upper > 0) {\n        return 0;\n    }\n  \
    \  else {\n        return 1;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $is_lower = 0 if $key =~\
    \ /[A-Z]/;\n        $is_upper = 0 if $key =~ /[a-z]/;\n    }\n    return $is_lower\
    \ || $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper++;\n\
    \        } else {\n            return 0;\n        }\n    }\n    return $lower\
    \ == 0 || $upper == 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012641
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_upper = 1;\n    my $all_lower\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return $all_upper || $all_lower;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $is_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n     \
    \       $is_upper = 0;\n        }\n    }\n    return $is_lower || $is_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012641
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 1;\n    my $upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[a-z]/) {\n\
    \            $upper = 0;\n        }\n        if ($key =~ /[A-Z]/) {\n        \
    \    $lower = 0;\n        }\n    }\n    return $lower || $upper;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $value;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    my $is_mixed\
    \ = 0;\n    while (($key, $value) = each %$dict) {\n        if ($key =~ /[A-Z]/)\
    \ {\n            $is_upper = 1;\n        }\n        if ($key =~ /[a-z]/) {\n \
    \           $is_lower = 1;\n        }\n        if ($is_upper && $is_lower) {\n\
    \            $is_mixed = 1;\n            last;\n        }\n    }\n    if ($is_mixed)\
    \ {\n        $ret = 0;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $key;\n    my $value;\n   \
    \ my $is_lower = 0;\n    my $is_upper = 0;\n    my $is_mixed = 0;\n    my $is_empty\
    \ = 0;\n    my $is_string = 0;\n    my $is_number = 0;\n    my $is_other = 0;\n\
    \    my $is_all_string = 0;\n    my $is_all_number = 0;\n    my $is_all_other\
    \ = 0;\n    my $is_all_lower = 0;\n    my $is_all_upper = 0;\n    my $is_all_mixed\
    \ = 0;\n    my $is_all_empty = 0;\n    my $is_all_lower_string = 0;\n    my $is_all_upper_string\
    \ = 0;\n    my $is_all_mixed_string = 0;\n    my $is_all_lower_number = 0;\n \
    \   my $is_all_upper_number = 0;\n    my $is_all_mixed_number = 0;\n    my $is_all_lower_other\
    \ = 0;\n    my $is_all_upper_other = 0;\n    my $is_all_mixed_other = 0;\n   \
    \ my $is_all_lower_empty = 0;\n    my $is_all_upper_empty = 0;\n    my $is_all_mixed_empty\
    \ = 0;\n    my $is_all_lower_string_number = 0;\n    my $is_all_upper_string_number\
    \ = 0;\n    my $is_all_mixed_string_number = 0;\n    my $is_all_lower_string_other\
    \ = 0;\n    my $is_all_upper_string_other = 0;\n    my $is_all_mixed_string_other\
    \ = 0;\n    my $is_all_lower_string_empty = 0;\n    my $is_all_upper_string_empty\
    \ = 0;\n    my $is_all_mixed_string_empty = 0;\n    my $is_all_lower_number_other\
    \ = 0;\n    my $is_all_upper\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpvbwqs8d3.pl line 51, at end
    of line

    syntax error at /tmp/tmpvbwqs8d3.pl line 51, near "$is_all_upper

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpvbwqs8d3.pl line 86, at end of
    line

    syntax error at /tmp/tmpvbwqs8d3.pl line 86, at EOF

    Execution of /tmp/tmpvbwqs8d3.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $lc_key;\n    my $uc_key;\n    my $lc_value;\n    my $uc_value;\n\
    \    my $lc_count = 0;\n    my $uc_count = 0;\n    my $lc_key_count = 0;\n   \
    \ my $uc_key_count = 0;\n    my $lc_value_count = 0;\n    my $uc_value_count =\
    \ 0;\n    my $key_count = 0;\n    my $value_count = 0;\n    my $key_len = 0;\n\
    \    my $value_len = 0;\n    my $key_len_sum = 0;\n    my $value_len_sum = 0;\n\
    \    my $key_len_avg = 0;\n    my $value_len_avg = 0;\n    my $key_len_min = 0;\n\
    \    my $value_len_min = 0;\n    my $key_len_max = 0;\n    my $value_len_max =\
    \ 0;\n    my $key_len_median = 0;\n    my $value_len_median = 0;\n    my $key_len_mode\
    \ = 0;\n    my $value_len_mode = 0;\n    my $key_len_range = 0;\n    my $value_len_range\
    \ = 0;\n    my $key_len_variance = 0;\n    my $value_len_variance = 0;\n    my\
    \ $key_len_stddev = 0;\n    my $value_len_stddev = 0;\n    my $key_len_skew =\
    \ 0;\n    my $value_len_skew = 0;\n    my $key_len_kurtosis = 0;\n    my $value_len_kurtosis\
    \ = 0;\n    my $key_len_entropy = 0;\n    my $value_len_entropy = 0;\n    my $key_len_gini\
    \ = 0;\n    my $value_len_gini = 0;\n    my $key_len_gini_coeff = 0;\n   \nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp0cf3f5oe.pl line 92, at
    end of line

    syntax error at /tmp/tmp0cf3f5oe.pl line 92, at EOF

    Execution of /tmp/tmp0cf3f5oe.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my($key);\n    my($is_upper) =\
    \ 1;\n    my($is_lower) = 1;\n    foreach $key (keys %$dict) {\n        if ($key\
    \ =~ /[A-Z]/) {\n            $is_lower = 0;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $is_upper = 0;\n        }\n    }\n    return ($is_upper || $is_lower);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $key_type = \"\";\n    my $value_type = \"\";\n    while\
    \ (($key, $value) = each %$dict) {\n        if ($key_type eq \"\") {\n       \
    \     if ($key =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n    \
    \        } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\"\
    ;\n            } else {\n                $result = 0;\n                last;\n\
    \            }\n        } else {\n            if ($key_type eq \"lower\" && $key\
    \ =~ /^[A-Z]+$/) {\n                $result = 0;\n                last;\n    \
    \        } elsif ($key_type eq \"upper\" && $key =~ /^[a-z]+$/) {\n          \
    \      $result = 0;\n                last;\n            }\n        }\n       \
    \ if ($value_type eq \"\") {\n            if ($value =~ /^[a-z]+$/) {\n      \
    \          $value_type = \"lower\";\n            } elsif ($value =~ /^[A-Z]+$/)\
    \ {\n                $value_type = \"upper\";\n            } else {\n        \
    \        $result = 0;\n                last;\n            }\n        } else {\n\
    \            if ($value_type eq \"lower\" && $value =~ /^[A-Z]+$/) {\n       \
    \         $result = 0;\n                last;\n            } elsif ($value_type\
    \ eq \"upper\" && $value =~ /^[a-z]+$/) {\n                $result = 0;\n    \
    \            last;\n            }\n        }\n    }\n    return $result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n    \
    \        $upper++;\n        }\n        else {\n            return 0;\n       \
    \ }\n    }\n    return ($lower == 0 || $upper == 0) ? 1 : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $key_type = \"\";\n    my $val_type = \"\";\n    my $key_type_count\
    \ = 0;\n    my $val_type_count = 0;\n    my $key_type_count_lower = 0;\n    my\
    \ $key_type_count_upper = 0;\n    my $val_type_count_lower = 0;\n    my $val_type_count_upper\
    \ = 0;\n    my $key_type_count_alpha = 0;\n    my $key_type_count_numeric = 0;\n\
    \    my $val_type_count_alpha = 0;\n    my $val_type_count_numeric = 0;\n    my\
    \ $key_type_count_alpha_lower = 0;\n    my $key_type_count_alpha_upper = 0;\n\
    \    my $val_type_count_alpha_lower = 0;\n    my $val_type_count_alpha_upper =\
    \ 0;\n    my $key_type_count_numeric_lower = 0;\n    my $key_type_count_numeric_upper\
    \ = 0;\n    my $val_type_count_numeric_lower = 0;\n    my $val_type_count_numeric_upper\
    \ = 0;\n    my $key_type_count_alpha_lower_upper = 0;\n    my $val_type_count_alpha_lower_upper\
    \ = 0;\n    my $key_type_count_numeric_lower_upper = 0;\n    my $val_type_count_numeric_lower_upper\
    \ = 0;\n    my $key_type_count_alpha_lower_upper_numeric = 0;\n    my $val_type_count_alpha_lower_upper_numeric\
    \ = 0;\n    my $key_type_count_alpha_lower_upper_numeric_other = 0;\n    my $val_type_count_alpha_lower_upper_numeric_other\
    \ = 0;\n    my $key_type_count_alpha_lower_upper_numeric_other_lower = 0;\n  \
    \  my $val_type_count_alpha_lower_upper\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp6apveudj.pl line 45, at end
    of line

    syntax error at /tmp/tmp6apveudj.pl line 45, near "$val_type_count_alpha_lower_upper

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp6apveudj.pl line 80, at end of
    line

    syntax error at /tmp/tmp6apveudj.pl line 80, at EOF

    Execution of /tmp/tmp6apveudj.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $all_lower\
    \ = 1;\n    my $all_upper = 1;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n        if ($key\
    \ =~ /[a-z]/) {\n            $all_upper = 0;\n        }\n    }\n    if ($all_lower\
    \ == 0 && $all_upper == 0) {\n        $ret = 0;\n    }\n    return $ret;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $is_lower = 0 if $key =~\
    \ /[A-Z]/;\n        $is_upper = 0 if $key =~ /[a-z]/;\n    }\n    return $is_lower\
    \ || $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type\
    \ = \"\";\n    foreach my $key (keys %$dict) {\n        if ($key_type eq \"\"\
    ) {\n            if ($key =~ /^[a-z]+$/) {\n                $key_type = \"lower\"\
    ;\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type = \"\
    upper\";\n            } else {\n                $result = 0;\n               \
    \ last;\n            }\n        } elsif ($key_type eq \"lower\") {\n         \
    \   if ($key !~ /^[a-z]+$/) {\n                $result = 0;\n                last;\n\
    \            }\n        } elsif ($key_type eq \"upper\") {\n            if ($key\
    \ !~ /^[A-Z]+$/) {\n                $result = 0;\n                last;\n    \
    \        }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $key_type;\n    my $value_type;\n    my $key_type_count\
    \ = 0;\n    my $value_type_count = 0;\n    my $key_type_lower = 0;\n    my $key_type_upper\
    \ = 0;\n    my $value_type_lower = 0;\n    my $value_type_upper = 0;\n    my $key_type_mixed\
    \ = 0;\n    my $value_type_mixed = 0;\n    my $key_type_number = 0;\n    my $value_type_number\
    \ = 0;\n    my $key_type_other = 0;\n    my $value_type_other = 0;\n    my $key_type_count_lower\
    \ = 0;\n    my $key_type_count_upper = 0;\n    my $value_type_count_lower = 0;\n\
    \    my $value_type_count_upper = 0;\n    my $key_type_count_mixed = 0;\n    my\
    \ $value_type_count_mixed = 0;\n    my $key_type_count_number = 0;\n    my $value_type_count_number\
    \ = 0;\n    my $key_type_count_other = 0;\n    my $value_type_count_other = 0;\n\
    \    my $key_type_count_total = 0;\n    my $value_type_count_total = 0;\n    my\
    \ $key_type_count_total_lower = 0;\n    my $key_type_count_total_upper = 0;\n\
    \    my $value_type_count_total_lower = 0;\n    my $value_type_count_total_upper\
    \ = 0;\n    my $key_type_count_total_mixed = 0;\n    my $value_type_count_total_mixed\
    \ = 0;\n    my $key_type_count_total_number = 0;\n    my $value_type_count_total_number\
    \ = 0;\n    my $key_type_count_total_other = 0;\n    my $value_type_count_total_other\
    \ =\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmppko7ekao.pl line 51, at end
    of line

    syntax error at /tmp/tmppko7ekao.pl line 51, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmppko7ekao.pl line 86, at end of
    line

    syntax error at /tmp/tmppko7ekao.pl line 86, at EOF

    Execution of /tmp/tmppko7ekao.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $lc_key;\n    my $uc_key;\n    my $lc_val;\n    my $uc_val;\n\
    \    my $lc_count = 0;\n    my $uc_count = 0;\n    my $other_count = 0;\n    my\
    \ $key_count = 0;\n    my $val_count = 0;\n    foreach $key (keys %$dict) {\n\
    \        $key_count++;\n        $lc_key = lc($key);\n        $uc_key = uc($key);\n\
    \        if ($key eq $lc_key) {\n            $lc_count++;\n        } elsif ($key\
    \ eq $uc_key) {\n            $uc_count++;\n        } else {\n            $other_count++;\n\
    \        }\n        $val = $dict->{$key};\n        $val_count++;\n        $lc_val\
    \ = lc($val);\n        $uc_val = uc($val);\n        if ($val eq $lc_val) {\n \
    \           $lc_count++;\n        } elsif ($val eq $uc_val) {\n            $uc_count++;\n\
    \        } else {\n            $other_count++;\n        }\n    }\n    if ($key_count\
    \ == 0) {\n        $ret = 0;\n    } elsif ($lc_count == 0 || $uc_count == 0) {\n\
    \        $ret = 0;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012642
- exit_code: 255
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $key_type = \"\";\n    my $val_type = \"\";\n    my $key_type_prev\
    \ = \"\";\n    my $val_type_prev = \"\";\n    my $type = \"\";\n    my $type_prev\
    \ = \"\";\n    my $key_count = 0;\n    my $val_count = 0;\n    my $count = 0;\n\
    \    my $count_prev = 0;\n    my $key_count_prev = 0;\n    my $val_count_prev\
    \ = 0;\n    my $key_count_diff = 0;\n    my $val_count_diff = 0;\n    my $count_diff\
    \ = 0;\n    my $key_count_diff_prev = 0;\n    my $val_count_diff_prev = 0;\n \
    \   my $count_diff_prev = 0;\n    my $key_count_diff_prev_prev = 0;\n    my $val_count_diff_prev_prev\
    \ = 0;\n    my $count_diff_prev_prev = 0;\n    my $key_count_diff_prev_prev_prev\
    \ = 0;\n    my $val_count_diff_prev_prev_prev = 0;\n    my $count_diff_prev_prev_prev\
    \ = 0;\n    my $key_count_diff_prev_prev_prev_prev = 0;\n    my $val_count_diff_prev_prev_prev_prev\
    \ = 0;\n    my $count_diff_prev_prev_prev_prev = 0;\n    my $key_count_diff_prev_prev_prev_prev_prev\
    \ = 0;\n    my $val_count_diff_prev_prev_prev_prev_prev = 0;\n    my $count_diff_prev_prev_prev_prev_prev\
    \ = 0;\n    my $key_count_diff_prev_prev_prev_prev_prev_prev = 0;\n    my $val_count_diff_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $count_diff_prev_prev_prev_prev_prev_prev = 0;\n    my $\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp_704ovbf.pl line 49,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp_704ovbf.pl line 49, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp_704ovbf.pl line 84, at end of line\nsyntax\
    \ error at /tmp/tmp_704ovbf.pl line 84, at EOF\nExecution of /tmp/tmp_704ovbf.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $key;\n    my $value;\n   \
    \ my $is_upper = 0;\n    my $is_lower = 0;\n    my $is_mixed = 0;\n    my $is_empty\
    \ = 1;\n    while (($key, $value) = each %$dict) {\n        $is_empty = 0;\n \
    \       if ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } elsif\
    \ ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        } else {\n     \
    \       $is_mixed = 1;\n        }\n    }\n    return 0 if $is_empty;\n    return\
    \ 0 if $is_mixed;\n    return 1 if $is_upper && $is_lower;\n    return 0;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my($key, $value);\n    my($all_lower)\
    \ = 1;\n    my($all_upper) = 1;\n    while (($key, $value) = each %$dict) {\n\
    \        if ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n    \
    \    if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n        }\n    }\n \
    \   return ($all_lower || $all_upper);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $is_lower = 0 if $key =~\
    \ /[A-Z]/;\n        $is_upper = 0 if $key =~ /[a-z]/;\n    }\n    return $is_lower\
    \ || $is_upper;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my($key, $value);\n    my($lower_case)\
    \ = 0;\n    my($upper_case) = 0;\n    my($other) = 0;\n    while (($key, $value)\
    \ = each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $lower_case++;\n\
    \        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper_case++;\n        }\
    \ else {\n            $other++;\n        }\n    }\n    return ($lower_case ==\
    \ 0 || $upper_case == 0) && $other == 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_upper = 1;\n    my $is_lower\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $is_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n     \
    \       $is_upper = 0;\n        }\n    }\n    return $is_upper || $is_lower;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $is_lower = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n\
    \            $is_upper = 1;\n        }\n        else {\n            return 0;\n\
    \        }\n    }\n    return $is_lower || $is_upper;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $lc = 0;\n    my $uc = 0;\n    my $other = 0;\n    while\
    \ (($key, $val) = each %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n        \
    \    $lc++;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $uc++;\n    \
    \    } else {\n            $other++;\n        }\n    }\n    if ($lc > 0 && $uc\
    \ > 0) {\n        $ret = 0;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $is_lower = 1;\n    my $is_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $is_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n     \
    \       $is_upper = 0;\n        }\n    }\n    return $is_lower || $is_upper;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012641
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $lower = 0;\n    my $upper\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower++;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper++;\n\
    \        } else {\n            return 0;\n        }\n    }\n    return 1 if ($lower\
    \ == 0 || $upper == 0);\n    return 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $all_upper = 0;\n        }\n    }\n    return ($all_lower || $all_upper);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\n \
    \   my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    foreach $key (keys\
    \ %$dict) {\n        $val = $dict->{$key};\n        if ($key =~ /[A-Z]/) {\n \
    \           $is_upper = 1;\n        }\n        if ($key =~ /[a-z]/) {\n      \
    \      $is_lower = 1;\n        }\n    }\n    if ($is_upper && $is_lower) {\n \
    \       $ret = 0;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $key_type\
    \ = \"\";\n    foreach my $key (keys %$dict) {\n        if ($key_type eq \"\"\
    ) {\n            if ($key =~ /^[a-z]+$/) {\n                $key_type = \"lower\"\
    ;\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type = \"\
    upper\";\n            } else {\n                $result = 0;\n               \
    \ last;\n            }\n        } elsif ($key_type eq \"lower\") {\n         \
    \   if ($key !~ /^[a-z]+$/) {\n                $result = 0;\n                last;\n\
    \            }\n        } elsif ($key_type eq \"upper\") {\n            if ($key\
    \ !~ /^[A-Z]+$/) {\n                $result = 0;\n                last;\n    \
    \        }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my $result = 1;\n    my $lower\
    \ = 0;\n    my $upper = 0;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $lower++;\n        } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $upper++;\n        } else {\n            $result = 0;\n     \
    \       last;\n        }\n    }\n    if ($lower > 0 && $upper > 0) {\n       \
    \ $result = 0;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my($key, $value);\n    my($all_lower,\
    \ $all_upper);\n    $all_lower = 1;\n    $all_upper = 1;\n    while (($key, $value)\
    \ = each %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n\
    \        }\n        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n    \
    \    }\n    }\n    return $all_lower || $all_upper;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    sub check_dict_case {\n    my($dict) = @_;\n    my($key, $value);\n    my($lower_case)\
    \ = 1;\n    my($upper_case) = 1;\n    my($count) = 0;\n    while(($key, $value)\
    \ = each %$dict) {\n        $count++;\n        if($key =~ /[A-Z]/) {\n       \
    \     $lower_case = 0;\n        }\n        if($key =~ /[a-z]/) {\n           \
    \ $upper_case = 0;\n        }\n    }\n    return ($count == 0) ? 0 : ($lower_case\
    \ || $upper_case);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012642
