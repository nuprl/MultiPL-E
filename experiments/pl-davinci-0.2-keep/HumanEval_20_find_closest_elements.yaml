name: HumanEval_20_find_closest_elements
language: humaneval_to_perl.py
prompt: "# From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n# other and return them in order (smaller number,\
  \ larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  # (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n# (2.0,\
  \ 2.0)\nsub find_closest_elements {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_closest_elements;\n\
  \        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0,\
  \ 2.2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0])) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
  \ 3.1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($smallest_difference) = abs($numbers->[0] - $numbers->[1]);\n\
    \    my($smallest_difference_index) = 0;\n    for my $i (1 .. $#$numbers - 1)\
    \ {\n        my($difference) = abs($numbers->[$i] - $numbers->[$i + 1]);\n   \
    \     if ($difference < $smallest_difference) {\n            $smallest_difference\
    \ = $difference;\n            $smallest_difference_index = $i;\n        }\n  \
    \  }\n    return ($numbers->[$smallest_difference_index], $numbers->[$smallest_difference_index\
    \ + 1]);\n}", "    my($smallest_distance) = abs($numbers->[0] - $numbers->[1]);\n\
    \    my($smallest_distance_index) = 0;\n    for my $i (1 .. $#$numbers - 1) {\n\
    \        my($distance) = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if\
    \ ($distance < $smallest_distance) {\n            $smallest_distance = $distance;\n\
    \            $smallest_distance_index = $i;\n        }\n    }\n    return ($numbers->[$smallest_distance_index],\
    \ $numbers->[$smallest_distance_index + 1]);\n}", "    my($min_diff) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($min_diff_i) = 0;\n    for my $i (1 .. $#$numbers\
    \ - 1) {\n        my($diff) = abs($numbers->[$i] - $numbers->[$i + 1]);\n    \
    \    if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_i\
    \ = $i;\n        }\n    }\n    return ($numbers->[$min_diff_i], $numbers->[$min_diff_i\
    \ + 1]);\n}", "    my($min_diff) = abs($numbers->[0] - $numbers->[1]);\n    my($min_pair)\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my($i) = 0; $i < @$numbers - 1;\
    \ $i++) {\n        for (my($j) = $i + 1; $j < @$numbers; $j++) {\n           \
    \ my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return @$min_pair;\n}",
  "    my($min_diff, $min_pair) = (1e99, undef);\n    for my $i (0 .. $#$numbers -\
    \ 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return @$min_pair;\n}", "    my $min_distance\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_index = 0;\n    for my $i\
    \ (1 .. $#$numbers - 1) {\n        my $distance = abs($numbers->[$i] - $numbers->[$i\
    \ + 1]);\n        if ($distance < $min_distance) {\n            $min_distance\
    \ = $distance;\n            $min_index = $i;\n        }\n    }\n    return ($numbers->[$min_index],\
    \ $numbers->[$min_index + 1]);\n}", "    my($first, $second);\n    my($min_diff)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    for my $i (0 .. $#$numbers - 1) {\n\
    \        my($diff) = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $first = $numbers->[$i];\n\
    \            $second = $numbers->[$i + 1];\n        }\n    }\n    return ($first,\
    \ $second);\n}", "    my($min_diff, $min_pair) = (1e100, undef);\n    for my $i\
    \ (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n      \
    \      my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ wantarray ? @$min_pair : $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my($min_diff, $min_pair) = (1e99, undef);\n    for (my\
    \ $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return wantarray ? @$min_pair : $min_pair;\n}", "    my($smaller,\
    \ $larger);\n    my($min_diff) = 1e99;\n    for my $i (0 .. $#$numbers - 1) {\n\
    \        for my $j ($i + 1 .. $#$numbers) {\n            my($diff) = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $smaller = $numbers->[$i];\n                $larger\
    \ = $numbers->[$j];\n            }\n        }\n    }\n    return ($smaller, $larger);\n\
    }", "    my($min_diff) = abs($numbers->[0] - $numbers->[1]);\n    my($min_diff_index)\
    \ = 0;\n    for my $i (1 .. $#$numbers - 1) {\n        my($diff) = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return ($numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]);\n}", "    my($min_diff) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($min_diff_index) = 0;\n    for(my($i) = 1; $i < scalar(@$numbers)\
    \ - 1; $i++) {\n        my($diff) = abs($numbers->[$i] - $numbers->[$i + 1]);\n\
    \        if($diff < $min_diff) {\n            $min_diff = $diff;\n           \
    \ $min_diff_index = $i;\n        }\n    }\n    return ($numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]);\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < scalar(@$numbers) - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < scalar(@$numbers); $j++) {\n            my $diff = abs($numbers->[$i] -\
    \ $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return @$min_pair;\n}", "    my($smallest_diff)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my($smallest_diff_index) = 0;\n \
    \   for my $i (1 .. $#$numbers - 1) {\n        my($diff) = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $smallest_diff) {\n            $smallest_diff\
    \ = $diff;\n            $smallest_diff_index = $i;\n        }\n    }\n    return\
    \ ($numbers->[$smallest_diff_index], $numbers->[$smallest_diff_index + 1]);\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i\
    \ + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return @$min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return wantarray ? @$min_pair : $min_pair;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return @$min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my @min_pair = ($numbers->[0], $numbers->[1]);\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                @min_pair = ($numbers->[$i], $numbers->[$j]);\n  \
    \          }\n        }\n    }\n    return @min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return @$min_pair;\n}", "    my($min_diff, $min_diff_pair) = (1e99,\
    \ [0, 0]);\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 ..\
    \ $#$numbers) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_diff_pair = [$numbers->[$i], $numbers->[$j]];\n          \
    \  }\n        }\n    }\n    return wantarray ? @$min_diff_pair : $min_diff_pair;\n\
    }", "    my $smallest = $numbers->[0];\n    my $largest = $numbers->[0];\n   \
    \ my $closest = $numbers->[0] - $numbers->[1];\n    for (my $i = 0; $i < @$numbers;\
    \ $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my\
    \ $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $closest)\
    \ {\n                $closest = $diff;\n                $smallest = $numbers->[$i]\
    \ < $numbers->[$j] ? $numbers->[$i] : $numbers->[$j];\n                $largest\
    \ = $numbers->[$i] > $numbers->[$j] ? $numbers->[$i] : $numbers->[$j];\n     \
    \       }\n        }\n    }\n    return ($smallest, $largest);\n}", "    my($min_diff)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my($min_diff_index) = 0;\n    for\
    \ my $i (1 .. $#$numbers - 1) {\n        my($diff) = abs($numbers->[$i] - $numbers->[$i\
    \ + 1]);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n \
    \           $min_diff_index = $i;\n        }\n    }\n    return ($numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]);\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return @$min_pair;\n}", "    my($min_diff) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($min_diff_index) = 0;\n    for my $i (1 .. $#$numbers\
    \ - 1) {\n        my($diff) = abs($numbers->[$i] - $numbers->[$i + 1]);\n    \
    \    if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return ($numbers->[$min_diff_index], $numbers->[$min_diff_index\
    \ + 1]);\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my\
    \ $min_diff_index = 0;\n    for my $i (1..$#$numbers - 1) {\n        my $diff\
    \ = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($diff < $min_diff)\
    \ {\n            $min_diff = $diff;\n            $min_diff_index = $i;\n     \
    \   }\n    }\n    return ($numbers->[$min_diff_index], $numbers->[$min_diff_index\
    \ + 1]);\n}", "    my($smaller, $larger);\n    my($min_diff) = 999999999;\n  \
    \  for(my($i) = 0; $i < @$numbers; $i++) {\n        for(my($j) = $i + 1; $j <\
    \ @$numbers; $j++) {\n            my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if($diff < $min_diff) {\n                $min_diff = $diff;\n   \
    \             $smaller = $numbers->[$i];\n                $larger = $numbers->[$j];\n\
    \            }\n        }\n    }\n    return($smaller, $larger);\n}", "    my($min_distance)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my($min_distance_index) = 0;\n  \
    \  for my $i (1 .. $#$numbers - 1) {\n        my($distance) = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($distance < $min_distance) {\n         \
    \   $min_distance = $distance;\n            $min_distance_index = $i;\n      \
    \  }\n    }\n    return ($numbers->[$min_distance_index], $numbers->[$min_distance_index\
    \ + 1]);\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my\
    \ $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers;\
    \ $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my\
    \ $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return @$min_pair;\n}",
  "    my($smallest_diff) = abs($numbers->[0] - $numbers->[1]);\n    my($smallest_diff_index)\
    \ = 0;\n    for(my($i) = 1; $i < @$numbers - 1; $i++) {\n        my($diff) = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if($diff < $smallest_diff) {\n            $smallest_diff\
    \ = $diff;\n            $smallest_diff_index = $i;\n        }\n    }\n    return\
    \ ($numbers->[$smallest_diff_index], $numbers->[$smallest_diff_index + 1]);\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for\
    \ (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return @$min_pair;\n}", "    my($smallest_difference)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my($smallest_difference_index) =\
    \ 0;\n    for my $i (1 .. $#$numbers - 1) {\n        my($difference) = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($difference < $smallest_difference) {\n\
    \            $smallest_difference = $difference;\n            $smallest_difference_index\
    \ = $i;\n        }\n    }\n    return ($numbers->[$smallest_difference_index],\
    \ $numbers->[$smallest_difference_index + 1]);\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return @$min_pair;\n}", "    my($min_diff, $min_diff_pair)\
    \ = (1e99, []);\n    for my $i (0 .. $#$numbers-1) {\n        for my $j ($i+1\
    \ .. $#$numbers) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_diff_pair = [$numbers->[$i], $numbers->[$j]];\n          \
    \  }\n        }\n    }\n    return @$min_diff_pair;\n}", "    my($min_diff) =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my($min_index) = 0;\n    for my $i\
    \ (1 .. $#$numbers - 1) {\n        my($diff) = abs($numbers->[$i] - $numbers->[$i\
    \ + 1]);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n \
    \           $min_index = $i;\n        }\n    }\n    return ($numbers->[$min_index],\
    \ $numbers->[$min_index + 1]);\n}", "    my($min_diff) = abs($numbers->[0] - $numbers->[1]);\n\
    \    my($min_pair) = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my($diff) =\
    \ abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff) {\n\
    \                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return @$min_pair;\n}",
  "    my($min_diff) = $numbers->[1] - $numbers->[0];\n    my($min_diff_index) = 0;\n\
    \    for my $i (1 .. $#$numbers - 1) {\n        my($diff) = $numbers->[$i + 1]\
    \ - $numbers->[$i];\n        if ($diff < $min_diff) {\n            $min_diff =\
    \ $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return ($numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]);\n}", "    my($min_diff) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($min_diff_index) = 0;\n    for my $i (1 .. $#$numbers\
    \ - 1) {\n        my($diff) = abs($numbers->[$i] - $numbers->[$i + 1]);\n    \
    \    if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return ($numbers->[$min_diff_index], $numbers->[$min_diff_index\
    \ + 1]);\n}", "    my($min_diff) = abs($numbers->[0] - $numbers->[1]);\n    my($min_pair)\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my($i) = 0; $i < @$numbers - 1;\
    \ $i++) {\n        for (my($j) = $i + 1; $j < @$numbers; $j++) {\n           \
    \ my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return @$min_pair;\n}",
  "    my($min_diff) = $numbers->[1] - $numbers->[0];\n    my($min_diff_index) = 0;\n\
    \    for my $i (1 .. $#$numbers - 1) {\n        my($diff) = $numbers->[$i + 1]\
    \ - $numbers->[$i];\n        if ($diff < $min_diff) {\n            $min_diff =\
    \ $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return ($numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]);\n}", "    my($closest_diff) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($closest_elements) = [$numbers->[0], $numbers->[1]];\n\
    \    for (my($i) = 0; $i < @$numbers - 1; $i++) {\n        for (my($j) = $i +\
    \ 1; $j < @$numbers; $j++) {\n            my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n\
    \                $closest_elements = [$numbers->[$i], $numbers->[$j]];\n     \
    \       }\n        }\n    }\n    return @$closest_elements;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return @$min_pair;\n}", "    my $closest_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $closest_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n    \
    \            $closest_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return wantarray ? @$closest_pair : $closest_pair;\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my\
    \ $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return @$min_pair;\n}", "    my($smallest_diff,\
    \ $smallest_diff_numbers) = (undef, undef);\n    for my $i (0 .. $#$numbers -\
    \ 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if (!defined($smallest_diff) || $diff < $smallest_diff)\
    \ {\n                $smallest_diff = $diff;\n                $smallest_diff_numbers\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ @$smallest_diff_numbers;\n}", "    my($min_diff, $min_pair) = (1e99, undef);\n\
    \    for my $i (0 .. $#$numbers-1) {\n        my($diff) = abs($numbers->[$i] -\
    \ $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_pair = [$numbers->[$i], $numbers->[$i+1]];\n    \
    \    }\n    }\n    return @$min_pair;\n}", "    my($smallest_difference) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($smallest_difference_elements) = [$numbers->[0], $numbers->[1]];\n\
    \    for (my($i) = 0; $i < @$numbers - 1; $i++) {\n        for (my($j) = $i +\
    \ 1; $j < @$numbers; $j++) {\n            my($difference) = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($difference < $smallest_difference) {\n\
    \                $smallest_difference = $difference;\n                $smallest_difference_elements\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ wantarray ? @$smallest_difference_elements : $smallest_difference_elements;\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return @$min_pair;\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i\
    \ + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return @$min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ @$min_pair;\n}", "    my($closest_diff) = undef;\n    my($closest_pair) = undef;\n\
    \    for (my($i) = 0; $i < scalar(@$numbers) - 1; $i++) {\n        for (my($j)\
    \ = $i + 1; $j < scalar(@$numbers); $j++) {\n            my($diff) = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if (!defined($closest_diff) || $diff < $closest_diff)\
    \ {\n                $closest_diff = $diff;\n                $closest_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return ($closest_pair->[0],\
    \ $closest_pair->[1]);\n}", "    my $closest_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $closest_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i\
    \ < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $closest_diff) {\n                $closest_diff = $diff;\n        \
    \        $closest_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n  \
    \      }\n    }\n    return @$closest_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return @$min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return @$min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return @$min_pair;\n}", "    my $closest = $numbers->[0];\n\
    \    my $closest_diff = abs($numbers->[1] - $numbers->[0]);\n    for my $i (1\
    \ .. $#$numbers) {\n        for my $j ($i+1 .. $#$numbers) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest_diff = $diff;\n                $closest = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $closest;\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for\
    \ (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return wantarray ? @$min_pair : $min_pair;\n\
    }", "    my($min_diff) = abs($numbers->[0] - $numbers->[1]);\n    my($min_index)\
    \ = 0;\n    for (my($i) = 1; $i < @$numbers - 1; $i++) {\n        my($diff) =\
    \ abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n\
    \            $min_diff = $diff;\n            $min_index = $i;\n        }\n   \
    \ }\n    return ($numbers->[$min_index], $numbers->[$min_index + 1]);\n}", " \
    \   my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my\
    \ $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return @$min_pair;\n}", "    my($min_diff,\
    \ $min_pair) = (1e99, undef);\n    for my $i (0 .. $#$numbers - 1) {\n       \
    \ for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return @$min_pair;\n}", "    my($smaller,\
    \ $larger) = (0, 1);\n    my($difference) = abs($numbers->[$larger] - $numbers->[$smaller]);\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my($new_difference) = abs($numbers->[$j] - $numbers->[$i]);\n\
    \            if ($new_difference < $difference) {\n                ($smaller,\
    \ $larger, $difference) = ($i, $j, $new_difference);\n            }\n        }\n\
    \    }\n    return ($numbers->[$smaller], $numbers->[$larger]);\n}", "    my($min_diff,\
    \ $min_pair) = (1e99, []);\n    for my $i (0 .. $#$numbers - 1) {\n        for\
    \ my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i] -\
    \ $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return wantarray ? @$min_pair : $min_pair;\n\
    }", "    my($smaller, $larger);\n    my($min_diff) = abs($numbers->[0] - $numbers->[1]);\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        my($diff) = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $smaller = $numbers->[$i];\n            $larger = $numbers->[$i\
    \ + 1];\n        }\n    }\n    return ($smaller, $larger);\n}", "    my($min_diff)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my($min_diff_index) = 0;\n    for\
    \ my $i (1 .. $#$numbers - 1) {\n        my($diff) = abs($numbers->[$i] - $numbers->[$i\
    \ + 1]);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n \
    \           $min_diff_index = $i;\n        }\n    }\n    return ($numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]);\n}", "    my($min_diff) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($min_index) = 0;\n    for my $i (1 .. $#$numbers -\
    \ 1) {\n        my($diff) = abs($numbers->[$i] - $numbers->[$i + 1]);\n      \
    \  if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index\
    \ = $i;\n        }\n    }\n    return ($numbers->[$min_index], $numbers->[$min_index\
    \ + 1]);\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my($min_a,\
    \ $min_b) = ($numbers->[0], $numbers->[1]);\n    for my $i (0 .. $#$numbers -\
    \ 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                ($min_a, $min_b) = ($numbers->[$i], $numbers->[$j]);\n\
    \            }\n        }\n    }\n    return ($min_a, $min_b);\n}", "    my($smallest_diff,\
    \ $smallest_diff_pair) = (1e99, ());\n    for my $i (0 .. $#$numbers - 1) {\n\
    \        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $smallest_diff) {\n            \
    \    $smallest_diff = $diff;\n                $smallest_diff_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return @$smallest_diff_pair;\n\
    }", "    my($min_diff) = abs($numbers->[0] - $numbers->[1]);\n    my($min_pair)\
    \ = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n \
    \       for my $j ($i + 1 .. $#$numbers) {\n            my($diff) = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return @$min_pair;\n}", "    my($min_diff)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my($min_pair) = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n         \
    \   if ($diff < $min_diff) {\n                $min_diff = $diff;\n           \
    \     $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return @$min_pair;\n}", "    my($smallest_difference) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($smallest_difference_index) = 0;\n    for my $i (1\
    \ .. $#$numbers - 1) {\n        my($difference) = abs($numbers->[$i] - $numbers->[$i\
    \ + 1]);\n        if ($difference < $smallest_difference) {\n            $smallest_difference\
    \ = $difference;\n            $smallest_difference_index = $i;\n        }\n  \
    \  }\n    return ($numbers->[$smallest_difference_index], $numbers->[$smallest_difference_index\
    \ + 1]);\n}", "    my($min_diff) = abs($numbers->[0] - $numbers->[1]);\n    my($min_diff_index)\
    \ = 0;\n    for my $i (1 .. $#$numbers - 1) {\n        my($diff) = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return ($numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]);\n}", "    my $closest_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $closest_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers) {\n        for my $j ($i + 1 .. $#$numbers) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $closest_diff) {\n                $closest_diff = $diff;\n        \
    \        $closest_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n  \
    \      }\n    }\n    return wantarray ? @$closest_pair : $closest_pair;\n}", " \
    \   my($min_diff) = abs($numbers->[0] - $numbers->[1]);\n    my($min_pair) = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my($i) = 0; $i < @$numbers; $i++) {\n        for (my($j)\
    \ = $i + 1; $j < @$numbers; $j++) {\n            my($diff) = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return @$min_pair;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return @$min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return ($numbers->[$min_diff_index], $numbers->[$min_diff_index+1]);\n\
    }", "    my $closest_diff = abs($numbers->[0] - $numbers->[1]);\n    my $closest_pair\
    \ = ($numbers->[0], $numbers->[1]);\n    for (my $i = 0; $i < @$numbers; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest_diff = $diff;\n                $closest_pair = ($numbers->[$i],\
    \ $numbers->[$j]);\n            }\n        }\n    }\n    return $closest_pair;\n\
    }", "    my($min_diff, $min_diff_pair) = (undef, undef);\n    for my $i (0 ..\
    \ $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my\
    \ $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if (!defined($min_diff)\
    \ || $diff < $min_diff) {\n                $min_diff = $diff;\n              \
    \  $min_diff_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n       \
    \ }\n    }\n    return wantarray ? @$min_diff_pair : $min_diff_pair;\n}", "  \
    \  my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i\
    \ + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return @$min_pair;\n}", "    my $closest_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $closest_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j\
    \ < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n\
    \                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n         \
    \   }\n        }\n    }\n    return @$closest_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ @$min_pair;\n}", "    my($i, $j, $min_diff, $min_i, $min_j);\n    $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    $min_i = 0;\n    $min_j = 1;\n  \
    \  for ($i = 0; $i < scalar(@$numbers) - 1; $i++) {\n        for ($j = $i + 1;\
    \ $j < scalar(@$numbers); $j++) {\n            if (abs($numbers->[$i] - $numbers->[$j])\
    \ < $min_diff) {\n                $min_diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \                $min_i = $i;\n                $min_j = $j;\n            }\n \
    \       }\n    }\n    return ($numbers->[$min_i], $numbers->[$min_j]);\n}", " \
    \   my($min_diff, $min_pair) = (undef, undef);\n    for my $i (0 .. $#$numbers)\
    \ {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if (!defined($min_diff) || $diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my($min_distance) = abs($numbers->[0] - $numbers->[1]);\n    my($min_index)\
    \ = 0;\n    for my $i (1 .. $#$numbers - 1) {\n        my($distance) = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($distance < $min_distance) {\n         \
    \   $min_distance = $distance;\n            $min_index = $i;\n        }\n    }\n\
    \    return ($numbers->[$min_index], $numbers->[$min_index + 1]);\n}", "    my($min_diff,\
    \ $min_pair) = (1e99, undef);\n    for my $i (0 .. $#$numbers - 1) {\n       \
    \ for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return @$min_pair;\n}", "    my($min_diff)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my($min_elements) = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my($i) = 0; $i < @$numbers; $i++) {\n        for (my($j)\
    \ = $i + 1; $j < @$numbers; $j++) {\n            my($diff) = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_elements = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return @$min_elements;\n}", "    my($min_diff,\
    \ $min_pair) = (undef, undef);\n    for my $i (0 .. $#$numbers - 1) {\n      \
    \  for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if (!defined($min_diff) || $diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return @$min_pair;\n}",
  "    my $closest = $numbers->[0];\n    my $closest_index = 0;\n    my $second_closest\
    \ = $numbers->[1];\n    my $second_closest_index = 1;\n    for my $i (1..$#$numbers)\
    \ {\n        my $diff = abs($numbers->[$i] - $closest);\n        if ($diff < abs($second_closest\
    \ - $closest)) {\n            $second_closest = $numbers->[$i];\n            $second_closest_index\
    \ = $i;\n        }\n    }\n    if ($closest_index > $second_closest_index) {\n\
    \        return ($second_closest, $closest);\n    } else {\n        return ($closest,\
    \ $second_closest);\n    }\n}", "    my($min_diff, $min_pair) = (1e100, undef);\n\
    \    for my $i (0 .. $#$numbers-1) {\n        for my $j ($i+1 .. $#$numbers) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers\
    \ - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n       \
    \     my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n  \
    \  my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers\
    \ - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n       \
    \     my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff\
    \ < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ @$min_pair;\n}", "    my $smallest_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $smallest_index = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff\
    \ = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff < $smallest_diff)\
    \ {\n            $smallest_diff = $diff;\n            $smallest_index = $i;\n\
    \        }\n    }\n    return ($numbers->[$smallest_index], $numbers->[$smallest_index+1]);\n\
    }", "    my($smallest_diff, $smallest_diff_pair) = (1e99, undef);\n    for my\
    \ $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n   \
    \         my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff\
    \ < $smallest_diff) {\n                $smallest_diff = $diff;\n             \
    \   $smallest_diff_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n \
    \       }\n    }\n    return $smallest_diff_pair;\n}", "    my($min_diff, $min_pair)\
    \ = (undef, undef);\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j\
    \ ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if (!defined($min_diff) || $diff < $min_diff) {\n               \
    \ $min_diff = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return @$min_pair;\n}", "    my $closest_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $closest_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my\
    \ $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $closest_diff) {\n             \
    \   $closest_diff = $diff;\n                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return @$closest_pair;\n}", "    my($closest_diff)\
    \ = $numbers->[1] - $numbers->[0];\n    my($closest_pair) = ($numbers->[0], $numbers->[1]);\n\
    \    for (my($i) = 0; $i < @$numbers - 1; $i++) {\n        for (my($j) = $i +\
    \ 1; $j < @$numbers; $j++) {\n            my($diff) = $numbers->[$j] - $numbers->[$i];\n\
    \            if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n\
    \                $closest_pair = ($numbers->[$i], $numbers->[$j]);\n         \
    \   }\n        }\n    }\n    return $closest_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return @$min_pair;\n}", "    my($min_diff, $min_diff_pair)\
    \ = (1e99, undef);\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i\
    \ + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_diff_pair = [$numbers->[$i], $numbers->[$j]];\n          \
    \  }\n        }\n    }\n    return wantarray ? @$min_diff_pair : $min_diff_pair;\n\
    }", "    my($smallest_diff, $smallest_diff_pair) = (undef, undef);\n    for my\
    \ $i (0 .. $#$numbers-1) {\n        for my $j ($i+1 .. $#$numbers) {\n       \
    \     my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if (!defined($smallest_diff)\
    \ || $diff < $smallest_diff) {\n                $smallest_diff = $diff;\n    \
    \            $smallest_diff_pair = [$numbers->[$i], $numbers->[$j]];\n       \
    \     }\n        }\n    }\n    return wantarray ? @$smallest_diff_pair : $smallest_diff_pair;\n\
    }", "    my $closest = $numbers->[0];\n    my $closest_diff = abs($numbers->[1]\
    \ - $numbers->[0]);\n    my $closest_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i+1] - $numbers->[$i]);\n        if ($diff\
    \ < $closest_diff) {\n            $closest_diff = $diff;\n            $closest_index\
    \ = $i;\n        }\n    }\n    return ($numbers->[$closest_index], $numbers->[$closest_index+1]);\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return @$min_pair;\n}",
  "    my($smaller, $larger) = (0, 1);\n    my($smaller_distance, $larger_distance)\
    \ = (abs($numbers->[$smaller] - $numbers->[$larger]),\n                      \
    \                         abs($numbers->[$larger] - $numbers->[$smaller]));\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my($distance) = abs($numbers->[$i] - $numbers->[$j]);\n     \
    \       if ($distance < $smaller_distance) {\n                ($smaller, $larger)\
    \ = ($i, $j);\n                ($smaller_distance, $larger_distance) = ($distance,\
    \ abs($numbers->[$larger] - $numbers->[$smaller]));\n            }\n         \
    \   elsif ($distance < $larger_distance) {\n                ($larger) = ($j);\n\
    \                ($larger_distance) = ($distance);\n            }\n        }\n\
    \    }\n    return ($numbers->[$smaller], $numbers->[$larger]);\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my @min_pair = ($numbers->[0], $numbers->[1]);\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    @min_pair = ($numbers->[$i], $numbers->[$j]);\n            }\n        }\n\
    \    }\n    return @min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return @$min_pair;\n}", "    my($smaller,\
    \ $larger) = (0, 1);\n    my($difference) = abs($numbers->[$larger] - $numbers->[$smaller]);\n\
    \    for (my($i) = 0; $i < scalar(@{$numbers}) - 1; $i++) {\n        for (my($j)\
    \ = $i + 1; $j < scalar(@{$numbers}); $j++) {\n            my($new_difference)\
    \ = abs($numbers->[$j] - $numbers->[$i]);\n            if ($new_difference < $difference)\
    \ {\n                $difference = $new_difference;\n                $smaller\
    \ = $i;\n                $larger = $j;\n            }\n        }\n    }\n    return\
    \ ($numbers->[$smaller], $numbers->[$larger]);\n}", "    my($min_diff) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($min_pair) = [$numbers->[0], $numbers->[1]];\n   \
    \ for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n         \
    \   if ($diff < $min_diff) {\n                $min_diff = $diff;\n           \
    \     $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return @$min_pair;\n}", "    my($smaller, $larger);\n    my($smallest_difference)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    for my $i (0 .. @$numbers - 2) {\n\
    \        for my $j ($i + 1 .. @$numbers - 1) {\n            my($difference) =\
    \ abs($numbers->[$i] - $numbers->[$j]);\n            if ($difference < $smallest_difference)\
    \ {\n                $smallest_difference = $difference;\n                $smaller\
    \ = $numbers->[$i];\n                $larger = $numbers->[$j];\n            }\n\
    \        }\n    }\n    return ($smaller, $larger);\n}", "    my($closest_diff)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my($closest_elements) = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my($i) = 0; $i < scalar(@{$numbers}) - 1; $i++) {\n\
    \        for (my($j) = $i + 1; $j < scalar(@{$numbers}); $j++) {\n           \
    \ my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest_diff = $diff;\n                $closest_elements\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ @{$closest_elements};\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i <\
    \ @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ wantarray ? @$min_pair : $min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return @$min_pair;\n}", "    my($min_diff, $min_pair) = (1e99,\
    \ undef);\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 ..\
    \ $#$numbers) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return wantarray ? @$min_pair : $min_pair;\n}", "    my\
    \ $min_distance = abs($numbers->[0] - $numbers->[1]);\n    my $min_index = 0;\n\
    \    for my $i (1 .. $#$numbers - 1) {\n        my $distance = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($distance < $min_distance) {\n         \
    \   $min_distance = $distance;\n            $min_index = $i;\n        }\n    }\n\
    \    return ($numbers->[$min_index], $numbers->[$min_index + 1]);\n}", "    my\
    \ $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for\
    \ (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return @$min_pair;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my $j = $i + 1; $j\
    \ < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return @$min_pair;\n}", "    my $closest = $numbers->[0];\n\
    \    my $closest_pair = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $closest) {\n                $closest\
    \ = $diff;\n                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return @$closest_pair;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my @min_pair = ($numbers->[0], $numbers->[1]);\n\
    \    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              @min_pair = ($numbers->[$i], $numbers->[$j]);\n            }\n\
    \        }\n    }\n    return @min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return ($numbers->[$min_diff_index], $numbers->[$min_diff_index+1]);\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n \
    \       for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return wantarray ? @$min_pair : $min_pair;\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n \
    \       for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return @$min_pair;\n}", "    my($smallest_difference)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my($smallest_difference_index) =\
    \ 0;\n    for my $i (1 .. $#$numbers - 1) {\n        my($difference) = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($difference < $smallest_difference) {\n\
    \            $smallest_difference = $difference;\n            $smallest_difference_index\
    \ = $i;\n        }\n    }\n    return ($numbers->[$smallest_difference_index],\
    \ $numbers->[$smallest_difference_index + 1]);\n}", "    my $min_diff = $numbers->[1]\
    \ - $numbers->[0];\n    my $min_diff_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = $numbers->[$i+1] - $numbers->[$i];\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return ($numbers->[$min_diff_index], $numbers->[$min_diff_index+1]);\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers - 1; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return @$min_pair;\n}",
  "    my($min_diff) = abs($numbers->[0] - $numbers->[1]);\n    my($min_diff_index)\
    \ = 0;\n    for my $i (1 .. $#$numbers - 1) {\n        my($diff) = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return ($numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]);\n}", "    my($smallest) = $numbers->[0];\n\
    \    my($largest) = $numbers->[0];\n    my($smallest_diff) = $numbers->[1] - $numbers->[0];\n\
    \    my($largest_diff) = $numbers->[1] - $numbers->[0];\n    for (my($i) = 1;\
    \ $i < @$numbers; $i++) {\n        my($diff) = $numbers->[$i] - $numbers->[$i\
    \ - 1];\n        if ($diff < $smallest_diff) {\n            $smallest_diff = $diff;\n\
    \            $smallest = $numbers->[$i - 1];\n            $largest = $numbers->[$i];\n\
    \        }\n        if ($diff > $largest_diff) {\n            $largest_diff =\
    \ $diff;\n        }\n    }\n    return($smallest, $largest);\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return @$min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i <\
    \ @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ @$min_pair;\n}", "    my $min = $numbers->[0];\n    my $max = $numbers->[0];\n\
    \    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    for my $i (0..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min = $numbers->[$i];\n\
    \            $max = $numbers->[$i+1];\n        }\n    }\n    return ($min, $max);\n\
    }", "    my $closest = $numbers->[0];\n    my $closest_diff = abs($numbers->[1]\
    \ - $numbers->[0]);\n    for (my $i = 1; $i < scalar(@$numbers); $i++) {\n   \
    \     my $diff = abs($numbers->[$i] - $numbers->[$i - 1]);\n        if ($diff\
    \ < $closest_diff) {\n            $closest_diff = $diff;\n            $closest\
    \ = [$numbers->[$i - 1], $numbers->[$i]];\n        }\n    }\n    return @$closest;\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index\
    \ = 0;\n    for my $i (1..$#$numbers-1) {\n        my $diff = abs($numbers->[$i]\
    \ - $numbers->[$i+1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return ($numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index+1]);\n}", "    my $smallest_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $smallest_diff_index = 0;\n    for my $i (1..$#$numbers-1)\
    \ {\n        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $smallest_diff) {\n            $smallest_diff = $diff;\n            $smallest_diff_index\
    \ = $i;\n        }\n    }\n    return ($numbers->[$smallest_diff_index], $numbers->[$smallest_diff_index+1]);\n\
    }", "    my($min_diff, $min_diff_pair) = (1e99, undef);\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_diff_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return wantarray ? @$min_diff_pair : $min_diff_pair;\n\
    }", "    my $smallest_diff = abs($numbers->[0] - $numbers->[1]);\n    my $smallest_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $smallest_diff)\
    \ {\n                $smallest_diff = $diff;\n                $smallest_pair =\
    \ [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ wantarray ? @$smallest_pair : $smallest_pair;\n}", "    my($min_diff) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($min_pair) = [$numbers->[0], $numbers->[1]];\n   \
    \ for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n         \
    \   if ($diff < $min_diff) {\n                $min_diff = $diff;\n           \
    \     $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return wantarray ? @$min_pair : $min_pair;\n}", "    my($smallest_diff,\
    \ $smallest_diff_pair) = (undef, undef);\n    for (my $i = 0; $i < @$numbers -\
    \ 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n         \
    \   my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if (!defined($smallest_diff)\
    \ || $diff < $smallest_diff) {\n                $smallest_diff = $diff;\n    \
    \            $smallest_diff_pair = [$numbers->[$i], $numbers->[$j]];\n       \
    \     }\n        }\n    }\n    return @$smallest_diff_pair;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for (my $i = 0; $i < scalar(@$numbers) - 1; $i++) {\n        for (my $j =\
    \ $i + 1; $j < scalar(@$numbers); $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $closest_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $closest_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i\
    \ + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n\
    \                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n         \
    \   }\n        }\n    }\n    return wantarray ? @$closest_pair : $closest_pair;\n\
    }", "    my $closest_diff = abs($numbers->[0] - $numbers->[1]);\n    my $closest_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < scalar(@$numbers)\
    \ - 1; $i++) {\n        for (my $j = $i + 1; $j < scalar(@$numbers); $j++) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $closest_diff) {\n                $closest_diff = $diff;\n        \
    \        $closest_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n  \
    \      }\n    }\n    return ($closest_pair->[0], $closest_pair->[1]);\n}", " \
    \   my($min_diff) = abs($numbers->[0] - $numbers->[1]);\n    my($min_pair) = [$numbers->[0],\
    \ $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i\
    \ + 1 .. $#$numbers) {\n            my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return @$min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_index = 0;\n    for my $i (1..$#$numbers-1) {\n\
    \        my $diff = abs($numbers->[$i] - $numbers->[$i+1]);\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $min_index = $i;\n\
    \        }\n    }\n    return ($numbers->[$min_index], $numbers->[$min_index+1]);\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n \
    \       for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return @$min_pair;\n}", "    my($min_diff,\
    \ $min_pair) = (undef, undef);\n    for my $i (0 .. $#$numbers - 1) {\n      \
    \  for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if (!defined($min_diff) || $diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return @$min_pair;\n}",
  "    my $closest_diff = abs($numbers->[0] - $numbers->[1]);\n    my $closest_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n \
    \       for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $closest_diff) {\n             \
    \   $closest_diff = $diff;\n                $closest_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return @$closest_pair;\n}", "    my($smallest_difference,\
    \ $smallest_difference_pair) = (1e99, []);\n    for my $i (0 .. $#$numbers - 1)\
    \ {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $difference =\
    \ abs($numbers->[$i] - $numbers->[$j]);\n            if ($difference < $smallest_difference)\
    \ {\n                $smallest_difference = $difference;\n                $smallest_difference_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ @$smallest_difference_pair;\n}", "    my($min_diff) = abs($numbers->[0] - $numbers->[1]);\n\
    \    my($min_pair) = [$numbers->[0], $numbers->[1]];\n    for (my($i) = 0; $i\
    \ < scalar(@$numbers) - 1; $i++) {\n        for (my($j) = $i + 1; $j < scalar(@$numbers);\
    \ $j++) {\n            my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n   \
    \         if ($diff < $min_diff) {\n                $min_diff = $diff;\n     \
    \           $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n   \
    \     }\n    }\n    return @$min_pair;\n}", "    my($smallest_diff, $smallest_diff_pair)\
    \ = (undef, undef);\n    for (my $i = 0; $i < @$numbers; $i++) {\n        for\
    \ (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if (!defined($smallest_diff) || $diff < $smallest_diff)\
    \ {\n                $smallest_diff = $diff;\n                $smallest_diff_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ @$smallest_diff_pair;\n}", "    my($min_diff) = abs($numbers->[0] - $numbers->[1]);\n\
    \    my($min_pair) = [$numbers->[0], $numbers->[1]];\n    for (my($i) = 0; $i\
    \ < @$numbers - 1; $i++) {\n        for (my($j) = $i + 1; $j < @$numbers; $j++)\
    \ {\n            my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n         \
    \   if ($diff < $min_diff) {\n                $min_diff = $diff;\n           \
    \     $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return($min_pair->[0], $min_pair->[1]);\n}", "    my($smallest_diff,\
    \ $smallest_diff_pair) = (undef, undef);\n    for my $i (0 .. $#$numbers - 1)\
    \ {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if (!defined($smallest_diff) || $diff < $smallest_diff)\
    \ {\n                $smallest_diff = $diff;\n                $smallest_diff_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ @$smallest_diff_pair;\n}", "    my($smaller, $larger);\n    my($min_diff) =\
    \ $numbers->[1] - $numbers->[0];\n    for (my($i) = 0; $i < @$numbers - 1; $i++)\
    \ {\n        my($diff) = $numbers->[$i + 1] - $numbers->[$i];\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $smaller = $numbers->[$i];\n\
    \            $larger = $numbers->[$i + 1];\n        }\n    }\n    return ($smaller,\
    \ $larger);\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n   \
    \ my $min_pair = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return @$min_pair;\n}", "    my($min_diff)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my($min_pair) = [$numbers->[0], $numbers->[1]];\n\
    \    for (my($i) = 0; $i < @$numbers; $i++) {\n        for (my($j) = $i + 1; $j\
    \ < @$numbers; $j++) {\n            my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return @$min_pair;\n}", "    my($min_diff) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($min_index) = 0;\n    for my $i (1 .. $#$numbers -\
    \ 1) {\n        my($diff) = abs($numbers->[$i] - $numbers->[$i + 1]);\n      \
    \  if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index\
    \ = $i;\n        }\n    }\n    return ($numbers->[$min_index], $numbers->[$min_index\
    \ + 1]);\n}", "    my($min_distance) = abs($numbers->[0] - $numbers->[1]);\n \
    \   my($min_distance_index) = 0;\n    for my $i (1 .. $#$numbers - 1) {\n    \
    \    my($distance) = abs($numbers->[$i] - $numbers->[$i + 1]);\n        if ($distance\
    \ < $min_distance) {\n            $min_distance = $distance;\n            $min_distance_index\
    \ = $i;\n        }\n    }\n    return ($numbers->[$min_distance_index], $numbers->[$min_distance_index\
    \ + 1]);\n}", "    my($smallest, $largest) = ($numbers->[0], $numbers->[1]);\n\
    \    my($diff) = abs($smallest - $largest);\n    for my $i (0 .. $#$numbers -\
    \ 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my($new_diff)\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($new_diff < $diff)\
    \ {\n                ($smallest, $largest, $diff) = ($numbers->[$i], $numbers->[$j],\
    \ $new_diff);\n            }\n        }\n    }\n    return ($smallest, $largest);\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my @closest =\
    \ ($numbers->[0], $numbers->[1]);\n    for (my $i = 0; $i < @$numbers - 1; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                @closest = ($numbers->[$i],\
    \ $numbers->[$j]);\n            }\n        }\n    }\n    return @closest;\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my\
    \ $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return wantarray ? @$min_pair : $min_pair;\n\
    }", "    my($closest_difference) = abs($numbers->[0] - $numbers->[1]);\n    my($closest_elements)\
    \ = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#{$numbers} - 1) {\n\
    \        for my $j ($i + 1 .. $#{$numbers}) {\n            my($difference) = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($difference < $closest_difference) {\n \
    \               $closest_difference = $difference;\n                $closest_elements\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ wantarray ? @{$closest_elements} : $closest_elements;\n}", "    my($min_diff)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my($min_pair) = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n         \
    \   if ($diff < $min_diff) {\n                $min_diff = $diff;\n           \
    \     $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return @$min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return @$min_pair;\n}", "    my($min_diff)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my($min_pair) = [$numbers->[0], $numbers->[1]];\n\
    \    for (my($i) = 0; $i < @$numbers - 1; $i++) {\n        for (my($j) = $i +\
    \ 1; $j < @$numbers; $j++) {\n            my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return @$min_pair;\n}", "    my($smallest_diff, $smallest_diff_pair)\
    \ = (undef, undef);\n    for (my $i = 0; $i < scalar(@$numbers); $i++) {\n   \
    \     for (my $j = $i + 1; $j < scalar(@$numbers); $j++) {\n            my($diff)\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if (!defined($smallest_diff)\
    \ || $diff < $smallest_diff) {\n                $smallest_diff = $diff;\n    \
    \            $smallest_diff_pair = [$numbers->[$i], $numbers->[$j]];\n       \
    \     }\n        }\n    }\n    return @$smallest_diff_pair;\n}", "    my $closest\
    \ = $numbers->[0];\n    my $closest_pair = [$numbers->[0], $numbers->[1]];\n \
    \   for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $closest) {\n                $closest = $diff;\n              \
    \  $closest_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return wantarray ? @$closest_pair : $closest_pair;\n}", "    my($closest_diff)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my($closest_elements) = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my($i) = 0; $i < @$numbers - 1; $i++) {\n        for\
    \ (my($j) = $i + 1; $j < @$numbers; $j++) {\n            my($diff) = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $closest_diff) {\n             \
    \   $closest_diff = $diff;\n                $closest_elements = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return wantarray ? @$closest_elements\
    \ : $closest_elements;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers\
    \ - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return @$min_pair;\n}", "    my($smallest_diff,\
    \ $smallest_diff_pair) = (1e99, undef);\n    for my $i (0 .. $#$numbers - 1) {\n\
    \        for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $smallest_diff) {\n            \
    \    $smallest_diff = $diff;\n                $smallest_diff_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return wantarray ? @$smallest_diff_pair\
    \ : $smallest_diff_pair;\n}", "    my @numbers = @$numbers;\n    my $min_diff\
    \ = abs($numbers[0] - $numbers[1]);\n    my @min_pair = ($numbers[0], $numbers[1]);\n\
    \    for (my $i = 0; $i < @numbers - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < @numbers; $j++) {\n            my $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              @min_pair = ($numbers[$i], $numbers[$j]);\n            }\n    \
    \    }\n    }\n    return @min_pair;\n}", "    my($min_distance, $min_pair) =\
    \ (undef, undef);\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i\
    \ + 1 .. $#$numbers) {\n            my $distance = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if (!defined($min_distance) || $distance < $min_distance) {\n   \
    \             $min_distance = $distance;\n                $min_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return $min_pair;\n}",
  "    my $closest_diff = abs($numbers->[0] - $numbers->[1]);\n    my $closest_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i < @$numbers; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff\
    \ = abs($numbers->[$i] - $numbers->[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest_diff = $diff;\n                $closest_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return wantarray ? @$closest_pair\
    \ : $closest_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i <\
    \ @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ @$min_pair;\n}", "    my($min_diff, $min_pair) = (1e99, undef);\n    for (my\
    \ $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return @$min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return ($min_pair->[0], $min_pair->[1]);\n}", "    my($min_diff,\
    \ $min_diff_pair) = (1e99, [0, 0]);\n    for my $i (0 .. $#$numbers - 1) {\n \
    \       for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_diff_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return @$min_diff_pair;\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_diff_index = 0;\n    for\
    \ my $i (1..$#$numbers - 1) {\n        my $diff = abs($numbers->[$i] - $numbers->[$i\
    \ + 1]);\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n \
    \           $min_diff_index = $i;\n        }\n    }\n    return ($numbers->[$min_diff_index],\
    \ $numbers->[$min_diff_index + 1]);\n}", "    my($min_diff) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($min_pair) = [$numbers->[0], $numbers->[1]];\n   \
    \ for (my($i) = 0; $i < @$numbers - 1; $i++) {\n        for (my($j) = $i + 1;\
    \ $j < @$numbers; $j++) {\n            my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return @$min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return @$min_pair;\n}", "    my $min_diff = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers;\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return @$min_pair;\n}", "    my($min_diff, $min_pair) = (1e100,\
    \ [0, 0]);\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 ..\
    \ $#$numbers) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return @$min_pair;\n}", "    my($min_diff) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($min_pair) = [$numbers->[0], $numbers->[1]];\n   \
    \ for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n         \
    \   if ($diff < $min_diff) {\n                $min_diff = $diff;\n           \
    \     $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return @$min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i <\
    \ @$numbers - 1; $i++) {\n        for (my $j = $i + 1; $j < @$numbers; $j++) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ @$min_pair;\n}", "    my($smallest_difference, $smallest_difference_pair) =\
    \ (1e99, []);\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i +\
    \ 1 .. $#$numbers) {\n            my $difference = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($difference < $smallest_difference) {\n                $smallest_difference\
    \ = $difference;\n                $smallest_difference_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return wantarray ? @$smallest_difference_pair\
    \ : $smallest_difference_pair;\n}", "    my($min_diff, $min_pair) = (1e99, undef);\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return $min_pair;\n}", "    my($min_diff) = $numbers->[1] - $numbers->[0];\n\
    \    my($min_diff_pair) = [$numbers->[0], $numbers->[1]];\n    for my $i (0 ..\
    \ $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n            my($diff)\
    \ = $numbers->[$j] - $numbers->[$i];\n            if ($diff < $min_diff) {\n \
    \               $min_diff = $diff;\n                $min_diff_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return @$min_diff_pair;\n\
    }", "    my($min_diff) = abs($numbers->[0] - $numbers->[1]);\n    my($min_index)\
    \ = 0;\n    for my $i (1 .. $#$numbers - 1) {\n        my($diff) = abs($numbers->[$i]\
    \ - $numbers->[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_index = $i;\n        }\n    }\n    return ($numbers->[$min_index],\
    \ $numbers->[$min_index + 1]);\n}", "    my($smallest_difference) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($smallest_difference_index) = 0;\n    for my $i (1\
    \ .. $#$numbers - 1) {\n        my($difference) = abs($numbers->[$i] - $numbers->[$i\
    \ + 1]);\n        if ($difference < $smallest_difference) {\n            $smallest_difference\
    \ = $difference;\n            $smallest_difference_index = $i;\n        }\n  \
    \  }\n    return ($numbers->[$smallest_difference_index], $numbers->[$smallest_difference_index\
    \ + 1]);\n}", "    my($smallest_difference) = abs($numbers->[0] - $numbers->[1]);\n\
    \    my($smallest_difference_pair) = [$numbers->[0], $numbers->[1]];\n    for\
    \ (my($i) = 0; $i < $#$numbers; $i++) {\n        for (my($j) = $i + 1; $j <= $#$numbers;\
    \ $j++) {\n            my($difference) = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($difference < $smallest_difference) {\n                $smallest_difference\
    \ = $difference;\n                $smallest_difference_pair = [$numbers->[$i],\
    \ $numbers->[$j]];\n            }\n        }\n    }\n    return($smallest_difference_pair);\n\
    }", "    my($smaller, $larger) = (0, 1);\n    my($min_diff) = abs($numbers->[$larger]\
    \ - $numbers->[$smaller]);\n    for my $i (0 .. $#$numbers) {\n        for my\
    \ $j (($i + 1) .. $#$numbers) {\n            my($diff) = abs($numbers->[$j] -\
    \ $numbers->[$i]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                ($smaller, $larger) = ($i, $j);\n            }\n \
    \       }\n    }\n    return ($numbers->[$smaller], $numbers->[$larger]);\n}",
  "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0],\
    \ $numbers->[1]];\n    for (my $i = 0; $i < @$numbers; $i++) {\n        for (my\
    \ $j = $i + 1; $j < @$numbers; $j++) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return @$min_pair;\n}", "    my($min_diff)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my($min_pair) = [$numbers->[0], $numbers->[1]];\n\
    \    for (my($i) = 0; $i < $#$numbers; $i++) {\n        for (my($j) = $i + 1;\
    \ $j <= $#$numbers; $j++) {\n            my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return @$min_pair;\n}", "    my($min_diff) = abs($numbers->[0]\
    \ - $numbers->[1]);\n    my($min_pair) = [$numbers->[0], $numbers->[1]];\n   \
    \ for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n         \
    \   if ($diff < $min_diff) {\n                $min_diff = $diff;\n           \
    \     $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return @$min_pair;\n}", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n\
    \    my $min_pair = [$numbers->[0], $numbers->[1]];\n    for (my $i = 0; $i <\
    \ scalar(@$numbers) - 1; $i++) {\n        for (my $j = $i + 1; $j < scalar(@$numbers);\
    \ $j++) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n    \
    \        if ($diff < $min_diff) {\n                $min_diff = $diff;\n      \
    \          $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n    \
    \    }\n    }\n    return ($min_pair->[0], $min_pair->[1]);\n}", "    my($min_diff,\
    \ $min_pair) = (1e99, undef);\n    for my $i (0 .. $#$numbers - 1) {\n       \
    \ for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return $min_pair;\n}", "    my $min_diff =\
    \ abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return @$min_pair;\n}", "    my($min_diff) = abs($numbers->[0] - $numbers->[1]);\n\
    \    my($min_pair) = [$numbers->[0], $numbers->[1]];\n    for (my($i) = 0; $i\
    \ < @$numbers; $i++) {\n        for (my($j) = $i + 1; $j < @$numbers; $j++) {\n\
    \            my($diff) = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ ($diff < $min_diff) {\n                $min_diff = $diff;\n                $min_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ @$min_pair;\n}", "    my($min_diff, $min_diff_pair) = (undef, undef);\n    for\
    \ my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers) {\n\
    \            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n            if\
    \ (not defined $min_diff or $diff < $min_diff) {\n                $min_diff =\
    \ $diff;\n                $min_diff_pair = [$numbers->[$i], $numbers->[$j]];\n\
    \            }\n        }\n    }\n    return wantarray ? @$min_diff_pair : $min_diff_pair;\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair\
    \ = [$numbers->[0], $numbers->[1]];\n    for my $i (0 .. $#$numbers - 1) {\n \
    \       for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min_pair = [$numbers->[$i], $numbers->[$j]];\n  \
    \          }\n        }\n    }\n    return @$min_pair;\n}", "    my($smallest_difference)\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my($closest_elements) = [$numbers->[0],\
    \ $numbers->[1]];\n    for my $i (0 .. $#{$numbers} - 1) {\n        for my $j\
    \ ($i + 1 .. $#{$numbers}) {\n            my($difference) = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($difference < $smallest_difference) {\n\
    \                $smallest_difference = $difference;\n                $closest_elements\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ wantarray ? @{$closest_elements} : $closest_elements;\n}", "    my($min_diff,\
    \ $min_pair) = (1e99, [0, 0]);\n    for my $i (0 .. $#$numbers-1) {\n        for\
    \ my $j ($i+1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n\
    \        }\n    }\n    return @$min_pair;\n}", "    my @numbers = @$numbers;\n\
    \    my $min = abs($numbers[0] - $numbers[1]);\n    my $min_index = 0;\n    for\
    \ (my $i = 1; $i < scalar(@numbers) - 1; $i++) {\n        my $diff = abs($numbers[$i]\
    \ - $numbers[$i + 1]);\n        if ($diff < $min) {\n            $min = $diff;\n\
    \            $min_index = $i;\n        }\n    }\n    return ($numbers[$min_index],\
    \ $numbers[$min_index + 1]);\n}", "    my($smaller, $larger);\n    my($min_diff)\
    \ = 999999999;\n    for (my $i = 0; $i < @$numbers - 1; $i++) {\n        for (my\
    \ $j = $i + 1; $j < @$numbers; $j++) {\n            my($diff) = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $smaller = $numbers->[$i];\n                $larger\
    \ = $numbers->[$j];\n            }\n        }\n    }\n    return ($smaller, $larger);\n\
    }", "    my $min_diff = abs($numbers->[0] - $numbers->[1]);\n    my($min_a, $min_b)\
    \ = ($numbers->[0], $numbers->[1]);\n    for my $i (0 .. $#$numbers - 1) {\n \
    \       for my $j ($i + 1 .. $#$numbers) {\n            my $diff = abs($numbers->[$i]\
    \ - $numbers->[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                ($min_a, $min_b) = ($numbers->[$i], $numbers->[$j]);\n\
    \            }\n        }\n    }\n    return ($min_a, $min_b);\n}", "    my $min_diff\
    \ = abs($numbers->[0] - $numbers->[1]);\n    my $min_pair = [$numbers->[0], $numbers->[1]];\n\
    \    for my $i (0 .. $#$numbers - 1) {\n        for my $j ($i + 1 .. $#$numbers)\
    \ {\n            my $diff = abs($numbers->[$i] - $numbers->[$j]);\n          \
    \  if ($diff < $min_diff) {\n                $min_diff = $diff;\n            \
    \    $min_pair = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n\
    \    }\n    return @$min_pair;\n}", "    my($smallest_difference, $closest_pair)\
    \ = (1e99, [0, 0]);\n    for my $i (0 .. $#$numbers - 1) {\n        for my $j\
    \ ($i + 1 .. $#$numbers) {\n            my $difference = abs($numbers->[$i] -\
    \ $numbers->[$j]);\n            if ($difference < $smallest_difference) {\n  \
    \              $smallest_difference = $difference;\n                $closest_pair\
    \ = [$numbers->[$i], $numbers->[$j]];\n            }\n        }\n    }\n    return\
    \ wantarray ? @$closest_pair : $closest_pair;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
