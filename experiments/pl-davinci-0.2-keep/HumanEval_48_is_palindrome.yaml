name: HumanEval_48_is_palindrome
language: humaneval_to_perl.py
prompt: "# Checks if given string is a palindrome\n# >>> is_palindrome('')\n# True\n\
  # >>> is_palindrome('aba')\n# True\n# >>> is_palindrome('aaaaa')\n# True\n# >>>\
  \ is_palindrome('zbcd')\n# False\nsub is_palindrome {\n    my($text) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_palindrome;\n\
  \        if(eq_deeply($candidate->(\"\"),1)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"aba\"),1)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  aaaaa\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"zbcd\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyx\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  xywyz\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"xywzx\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    my $len = length($text);\n\
    \    for (my $i = 0; $i < $len / 2; $i++) {\n        return 0 if (substr($text,\
    \ $i, 1) ne substr($text, $len - $i - 1, 1));\n    }\n    return 1;\n}", "   \
    \ return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    my $len = length($text);\n    for\
    \ (my $i = 0; $i < $len/2; $i++) {\n        return 0 if substr($text, $i, 1) ne\
    \ substr($text, $len-$i-1, 1);\n    }\n    return 1;\n}", "    return $text eq\
    \ reverse $text;\n}", "    return $text eq reverse $text;\n}", "    return $text\
    \ eq reverse $text;\n}", "    return $text eq reverse $text;\n}", "    return\
    \ $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}", "    return\
    \ $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}", "    return\
    \ $text eq reverse $text;\n}", "    my $len = length($text);\n    for (my $i =\
    \ 0; $i < $len / 2; $i++) {\n        return 0 if substr($text, $i, 1) ne substr($text,\
    \ $len - $i - 1, 1);\n    }\n    return 1;\n}", "    return $text eq reverse $text;\n\
    }", "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n\
    }", "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n\
    }", "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n\
    }", "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n\
    }", "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n\
    }", "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n\
    }", "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n\
    }", "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n\
    }", "    return $text eq reverse $text;\n}", "    my $len = length($text);\n \
    \   for (my $i = 0; $i < $len/2; $i++) {\n        return 0 if substr($text, $i,\
    \ 1) ne substr($text, $len-$i-1, 1);\n    }\n    return 1;\n}", "    return $text\
    \ eq reverse $text;\n}", "    return $text eq reverse $text;\n}", "    return\
    \ $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}", "    return\
    \ $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}", "    return\
    \ $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}", "    return\
    \ $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}", "    return\
    \ $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}", "    return\
    \ $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}", "    return\
    \ $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}", "    return\
    \ $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}", "    my\
    \ $len = length($text);\n    for (my $i = 0; $i < $len / 2; $i++) {\n        return\
    \ 0 if substr($text, $i, 1) ne substr($text, $len - $i - 1, 1);\n    }\n    return\
    \ 1;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    my $len = length($text);\n    for (my $i = 0; $i < $len/2;\
    \ $i++) {\n        return 0 if substr($text, $i, 1) ne substr($text, $len-$i-1,\
    \ 1);\n    }\n    return 1;\n}", "    return $text eq reverse $text;\n}", "  \
    \  return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}",
  "    my $len = length($text);\n    return 1 if $len == 0;\n    return 1 if $len\
    \ == 1;\n    return 0 if substr($text, 0, 1) ne substr($text, $len - 1, 1);\n\
    \    return is_palindrome(substr($text, 1, $len - 2));\n}", "    return $text\
    \ eq reverse $text;\n}", "    return $text eq reverse $text;\n}", "    return\
    \ $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}", "    return\
    \ $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}", "    return\
    \ $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}", "    return\
    \ $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}", "    return\
    \ $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}", "    my\
    \ $len = length($text);\n    for (my $i = 0; $i < $len / 2; $i++) {\n        return\
    \ 0 if substr($text, $i, 1) ne substr($text, $len - $i - 1, 1);\n    }\n    return\
    \ 1;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}", "    return $text eq reverse $text;\n}", "    return $text eq reverse\
    \ $text;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
