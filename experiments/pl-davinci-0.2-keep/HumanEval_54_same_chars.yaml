completions:
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    return 0 if keys %s0 != keys\
  \ %s1;\n    for my $k (keys %s0) {\n        return 0 if $s0{$k} != $s1{$k};\n  \
  \  }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n\
  \    for (@s0) {\n        $s0{$_}++;\n    }\n    for (@s1) {\n        $s1{$_}++;\n\
  \    }\n    for (keys %s0) {\n        return 0 if $s0{$_} != $s1{$_};\n    }\n \
  \   for (keys %s1) {\n        return 0 if $s0{$_} != $s1{$_};\n    }\n    return\
  \ 1;\n}"
- "    my %c0 = count_chars($s0);\n    my %c1 = count_chars($s1);\n    return 0 ==\
  \ grep { $c0{$_} != $c1{$_} } keys %c0;\n}"
- "    my @s0 = sort split //, $s0;\n    my @s1 = sort split //, $s1;\n    return\
  \ \"@s0\" eq \"@s1\";\n}"
- "    my %c0 = count_chars($s0);\n    my %c1 = count_chars($s1);\n    return 0 ==\
  \ grep { $c0{$_} != $c1{$_} } keys %c0;\n}"
- "    my %count;\n    for my $c (split //, $s0) {\n        $count{$c}++;\n    }\n\
  \    for my $c (split //, $s1) {\n        $count{$c}--;\n    }\n    for my $c (keys\
  \ %count) {\n        return 0 if $count{$c} != 0;\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n\
  \    for my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n     \
  \   $s1{$c}++;\n    }\n    for my $c (keys %s0) {\n        if (!exists $s1{$c})\
  \ {\n            return 0;\n        }\n        if ($s0{$c} != $s1{$c}) {\n     \
  \       return 0;\n        }\n    }\n    for my $c (keys %s1) {\n        if (!exists\
  \ $s0{$c}) {\n            return 0;\n        }\n        if ($s0{$c} != $s1{$c})\
  \ {\n            return 0;\n        }\n    }\n    return 1;\n}"
- "    my @s0 = sort split //, $s0;\n    my @s1 = sort split //, $s1;\n    return\
  \ 0 if @s0 != @s1;\n    for (0..$#s0) {\n        return 0 if $s0[$_] ne $s1[$_];\n\
  \    }\n    return 1;\n}"
- "    my %chars;\n    for my $c (split //, $s0) {\n        $chars{$c}++;\n    }\n\
  \    for my $c (split //, $s1) {\n        $chars{$c}--;\n    }\n    for my $c (keys\
  \ %chars) {\n        return 0 if $chars{$c} != 0;\n    }\n    return 1;\n}"
- "    my @a0 = sort split //, $s0;\n    my @a1 = sort split //, $s1;\n    return\
  \ \"@a0\" eq \"@a1\";\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my %c0 = map {$_ => 1} split //, $s0;\n    my %c1 = map {$_ => 1} split //,\
  \ $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0) {\n\
  \        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my @a0 = split(//, $s0);\n    my @a1 = split(//, $s1);\n    my %h0 = map {\
  \ $_ => 1 } @a0;\n    my %h1 = map { $_ => 1 } @a1;\n    return 0 unless scalar(keys\
  \ %h0) == scalar(keys %h1);\n    for my $k (keys %h0) {\n        return 0 unless\
  \ exists $h1{$k};\n    }\n    return 1;\n}"
- "    return 0 if length($s0) != length($s1);\n    my @s0 = sort split //, $s0;\n\
  \    my @s1 = sort split //, $s1;\n    for (my $i = 0; $i < @s0; $i++) {\n     \
  \   return 0 if $s0[$i] ne $s1[$i];\n    }\n    return 1;\n}"
- "    my %s0 = map { $_ => 1 } split //, $s0;\n    my %s1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %s0 == keys %s1;\n    for my $k (keys %s0)\
  \ {\n        return 0 unless $s0{$k} == $s1{$k};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $k (keys %c0)\
  \ {\n        return 0 unless $c0{$k} == $c1{$k};\n    }\n    return 1;\n}"
- "    my %c0 = count_chars($s0);\n    my %c1 = count_chars($s1);\n    return 0 unless\
  \ keys(%c0) == keys(%c1);\n    for my $k (keys %c0) {\n        return 0 unless $c0{$k}\
  \ == $c1{$k};\n    }\n    return 1;\n}"
- "    my %c0 = count_chars($s0);\n    my %c1 = count_chars($s1);\n    return 0 unless\
  \ keys(%c0) == keys(%c1);\n    for my $k (keys %c0) {\n        return 0 unless $c0{$k}\
  \ == $c1{$k};\n    }\n    return 1;\n}"
- "    my @a0 = sort split //, $s0;\n    my @a1 = sort split //, $s1;\n    return\
  \ \"@a0\" eq \"@a1\";\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 if scalar keys %c0 != scalar keys %c1;\n    for my $c (keys\
  \ %c0) {\n        return 0 if $c0{$c} != $c1{$c};\n    }\n    return 1;\n}"
- "    my @a0 = split //, $s0;\n    my @a1 = split //, $s1;\n    my %h0 = map { $_\
  \ => 1 } @a0;\n    my %h1 = map { $_ => 1 } @a1;\n    return 0 if keys %h0 != keys\
  \ %h1;\n    for my $k (keys %h0) {\n        return 0 if $h0{$k} != $h1{$k};\n  \
  \  }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my @s0 = split(//, $s0);\n    my @s1 = split(//, $s1);\n    my %s0;\n    my\
  \ %s1;\n    for my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n\
  \        $s1{$c}++;\n    }\n    for my $c (keys %s0) {\n        if ($s0{$c} != $s1{$c})\
  \ {\n            return 0;\n        }\n    }\n    for my $c (keys %s1) {\n     \
  \   if ($s0{$c} != $s1{$c}) {\n            return 0;\n        }\n    }\n    return\
  \ 1;\n}"
- "    my %chars;\n    for my $c (split //, $s0) {\n        $chars{$c}++;\n    }\n\
  \    for my $c (split //, $s1) {\n        $chars{$c}--;\n    }\n    for my $c (keys\
  \ %chars) {\n        return 0 if $chars{$c} != 0;\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n\
  \    for my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n     \
  \   $s1{$c}++;\n    }\n    for my $c (keys %s0) {\n        return 0 if $s0{$c} !=\
  \ $s1{$c};\n    }\n    for my $c (keys %s1) {\n        return 0 if $s0{$c} != $s1{$c};\n\
  \    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    return 0 if @s0 !=\
  \ @s1;\n    my %s0 = map { $_ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n \
  \   return 0 if keys %s0 != keys %s1;\n    for my $k (keys %s0) {\n        return\
  \ 0 if $s0{$k} != $s1{$k};\n    }\n    return 1;\n}"
- "    my @a0 = split //, $s0;\n    my @a1 = split //, $s1;\n    my %h0 = map { $_\
  \ => 1 } @a0;\n    my %h1 = map { $_ => 1 } @a1;\n    return 0 unless keys %h0 ==\
  \ keys %h1;\n    for my $k (keys %h0) {\n        return 0 unless exists $h1{$k};\n\
  \    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n\
  \    for my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n     \
  \   $s1{$c}++;\n    }\n    for my $c (keys %s0) {\n        return 0 if !exists $s1{$c};\n\
  \        return 0 if $s0{$c} != $s1{$c};\n    }\n    for my $c (keys %s1) {\n  \
  \      return 0 if !exists $s0{$c};\n        return 0 if $s0{$c} != $s1{$c};\n \
  \   }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 if keys %c0 != keys %c1;\n    for my $k (keys %c0) {\n\
  \        return 0 if $c0{$k} != $c1{$k};\n    }\n    return 1;\n}"
- "    my %c0 = count_chars($s0);\n    my %c1 = count_chars($s1);\n    return 0 ==\
  \ grep { $c0{$_} != $c1{$_} } keys %c0;\n}"
- "    my $s0_counts = count_chars($s0);\n    my $s1_counts = count_chars($s1);\n\
  \    return $s0_counts eq $s1_counts;\n}"
- "    my %h0 = map { $_ => 1 } split //, $s0;\n    my %h1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 if scalar keys %h0 != scalar keys %h1;\n    for my $k (keys\
  \ %h0) {\n        return 0 if $h0{$k} != $h1{$k};\n    }\n    return 1;\n}"
- "    my %c;\n    $c{$_}++ for split //, $s0;\n    $c{$_}-- for split //, $s1;\n\
  \    !grep {$_} values %c;\n}"
- "    return 0 if length($s0) != length($s1);\n    my %h0 = map { $_ => 1 } split(//,\
  \ $s0);\n    my %h1 = map { $_ => 1 } split(//, $s1);\n    return 0 if scalar(keys\
  \ %h0) != scalar(keys %h1);\n    for my $k (keys %h0) {\n        return 0 if $h0{$k}\
  \ != $h1{$k};\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    return 0 unless keys %s0 ==\
  \ keys %s1;\n    for my $c (keys %s0) {\n        return 0 unless exists $s1{$c};\n\
  \    }\n    return 1;\n}"
- "    my $s0_sorted = join '', sort split //, $s0;\n    my $s1_sorted = join '',\
  \ sort split //, $s1;\n    return $s0_sorted eq $s1_sorted;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n\
  \    for (@s0) {\n        $s0{$_}++;\n    }\n    for (@s1) {\n        $s1{$_}++;\n\
  \    }\n    for (keys %s0) {\n        if (not exists $s1{$_}) {\n            return\
  \ 0;\n        }\n        if ($s0{$_} != $s1{$_}) {\n            return 0;\n    \
  \    }\n    }\n    for (keys %s1) {\n        if (not exists $s0{$_}) {\n       \
  \     return 0;\n        }\n        if ($s0{$_} != $s1{$_}) {\n            return\
  \ 0;\n        }\n    }\n    return 1;\n}"
- "    my $s0_sorted = join '', sort split //, $s0;\n    my $s1_sorted = join '',\
  \ sort split //, $s1;\n    return $s0_sorted eq $s1_sorted;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n\
  \    for my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n     \
  \   $s1{$c}++;\n    }\n    for my $c (keys %s0) {\n        return 0 if !exists $s1{$c};\n\
  \        return 0 if $s0{$c} != $s1{$c};\n    }\n    for my $c (keys %s1) {\n  \
  \      return 0 if !exists $s0{$c};\n        return 0 if $s0{$c} != $s1{$c};\n \
  \   }\n    return 1;\n}"
- "    return 0 if length($s0) != length($s1);\n    my @a0 = split //, $s0;\n    my\
  \ @a1 = split //, $s1;\n    my %h0 = map { $_ => 1 } @a0;\n    my %h1 = map { $_\
  \ => 1 } @a1;\n    return 0 if scalar(keys %h0) != scalar(keys %h1);\n    for my\
  \ $k (keys %h0) {\n        return 0 if $h0{$k} != $h1{$k};\n    }\n    return 1;\n\
  }"
- "    my @s0 = sort split //, $s0;\n    my @s1 = sort split //, $s1;\n    return\
  \ join('', @s0) eq join('', @s1);\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    return 0 if scalar(keys %s0)\
  \ != scalar(keys %s1);\n    for my $c (keys %s0) {\n        return 0 if $s0{$c}\
  \ != $s1{$c};\n    }\n    return 1;\n}"
- "    my $len0 = length($s0);\n    my $len1 = length($s1);\n    return 0 if $len0\
  \ != $len1;\n    my @chars0 = split //, $s0;\n    my @chars1 = split //, $s1;\n\
  \    my %counts;\n    for my $c (@chars0) {\n        $counts{$c}++;\n    }\n   \
  \ for my $c (@chars1) {\n        return 0 if !$counts{$c};\n        $counts{$c}--;\n\
  \    }\n    return 1;\n}"
- "    my @s0 = sort split //, $s0;\n    my @s1 = sort split //, $s1;\n    return\
  \ \"@s0\" eq \"@s1\";\n}"
- "    my %c0 = map {$_ => 1} split //, $s0;\n    my %c1 = map {$_ => 1} split //,\
  \ $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0) {\n\
  \        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my %s0 = map { $_ => 1 } split //, $s0;\n    my %s1 = map { $_ => 1 } split\
  \ //, $s1;\n    return scalar(keys %s0) == scalar(keys %s1) &&\n        scalar(grep\
  \ { $s0{$_} != $s1{$_} } keys %s0) == 0;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my @s0 = sort split //, $s0;\n    my @s1 = sort split //, $s1;\n    return\
  \ join('', @s0) eq join('', @s1);\n}"
- "    my %c;\n    for my $c (split //, $s0) {\n        $c{$c}++;\n    }\n    for\
  \ my $c (split //, $s1) {\n        $c{$c}--;\n    }\n    for my $c (keys %c) {\n\
  \        return 0 if $c{$c};\n    }\n    return 1;\n}"
- "    my @a0 = sort split //, $s0;\n    my @a1 = sort split //, $s1;\n    return\
  \ \"@a0\" eq \"@a1\";\n}"
- "    my @a0 = sort split //, $s0;\n    my @a1 = sort split //, $s1;\n    return\
  \ \"@a0\" eq \"@a1\";\n}"
- "    my @s0 = sort split //, $s0;\n    my @s1 = sort split //, $s1;\n    return\
  \ \"@s0\" eq \"@s1\";\n}"
- "    my %c0 = count_chars($s0);\n    my %c1 = count_chars($s1);\n    return 0 unless\
  \ keys(%c0) == keys(%c1);\n    for my $k (keys %c0) {\n        return 0 unless $c0{$k}\
  \ == $c1{$k};\n    }\n    return 1;\n}"
- "    my $s0_count = count_chars($s0);\n    my $s1_count = count_chars($s1);\n  \
  \  return $s0_count eq $s1_count;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n\
  \    for my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n     \
  \   $s1{$c}++;\n    }\n    for my $c (keys %s0) {\n        return 0 if $s0{$c} !=\
  \ $s1{$c};\n    }\n    for my $c (keys %s1) {\n        return 0 if $s0{$c} != $s1{$c};\n\
  \    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n\
  \    for my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n     \
  \   $s1{$c}++;\n    }\n    return 0 unless keys %s0 == keys %s1;\n    for my $c\
  \ (keys %s0) {\n        return 0 unless $s0{$c} == $s1{$c};\n    }\n    return 1;\n\
  }"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    return 0 if @s0 != @s1;\n\
  \    for my $c (keys %s0) {\n        return 0 if !exists $s1{$c};\n    }\n    return\
  \ 1;\n}"
- "    my @s0 = sort split //, $s0;\n    my @s1 = sort split //, $s1;\n    return\
  \ join('', @s0) eq join('', @s1);\n}"
- "    my %c0 = count_chars($s0);\n    my %c1 = count_chars($s1);\n    return 0 if\
  \ keys(%c0) != keys(%c1);\n    for my $k (keys %c0) {\n        return 0 if $c0{$k}\
  \ != $c1{$k};\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n\
  \    for my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n     \
  \   $s1{$c}++;\n    }\n    return (keys %s0 == keys %s1) && (keys %s0 == keys %s1);\n\
  }"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 if keys %c0 != keys %c1;\n    for my $c (keys %c0) {\n\
  \        return 0 if $c0{$c} != $c1{$c};\n    }\n    return 1;\n}"
- "    my $s0_count = count_chars($s0);\n    my $s1_count = count_chars($s1);\n  \
  \  return $s0_count eq $s1_count;\n}"
- "    my %c0 = count_chars($s0);\n    my %c1 = count_chars($s1);\n    return 0 if\
  \ scalar(keys %c0) != scalar(keys %c1);\n    for my $c (keys %c0) {\n        return\
  \ 0 if $c0{$c} != $c1{$c};\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    return 0 if scalar(keys %s0)\
  \ != scalar(keys %s1);\n    for my $k (keys %s0) {\n        return 0 if $s0{$k}\
  \ != $s1{$k};\n    }\n    return 1;\n}"
- "    my %c0 = count_chars($s0);\n    my %c1 = count_chars($s1);\n    return 0 unless\
  \ keys(%c0) == keys(%c1);\n    for my $c (keys %c0) {\n        return 0 unless $c0{$c}\
  \ == $c1{$c};\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    return 0 unless scalar keys\
  \ %s0 == scalar keys %s1;\n    for my $k (keys %s0) {\n        return 0 unless exists\
  \ $s1{$k};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless exists $c1{$c};\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    return 0 if scalar(keys %s0)\
  \ != scalar(keys %s1);\n    for my $k (keys %s0) {\n        return 0 if $s0{$k}\
  \ != $s1{$k};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split(//, $s0);\n    my %c1 = map { $_ => 1 } split(//,\
  \ $s1);\n    return 0 unless scalar(keys %c0) == scalar(keys %c1);\n    for my $c\
  \ (keys %c0) {\n        return 0 unless exists $c1{$c};\n    }\n    return 1;\n}"
- "    my @a0 = sort split //, $s0;\n    my @a1 = sort split //, $s1;\n    return\
  \ join('', @a0) eq join('', @a1);\n}"
- "    my %c0 = count_chars($s0);\n    my %c1 = count_chars($s1);\n    return 0 unless\
  \ keys(%c0) == keys(%c1);\n    for my $c (keys %c0) {\n        return 0 unless $c0{$c}\
  \ == $c1{$c};\n    }\n    return 1;\n}"
- "    my %counts;\n    $counts{$_}++ for split //, $s0;\n    $counts{$_}-- for split\
  \ //, $s1;\n    !grep { $_ } values %counts;\n}"
- "    my %h0 = map { $_ => 1 } split //, $s0;\n    my %h1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %h0 == keys %h1;\n    for my $k (keys %h0)\
  \ {\n        return 0 unless $h0{$k} == $h1{$k};\n    }\n    return 1;\n}"
- "    my @a0 = sort split //, $s0;\n    my @a1 = sort split //, $s1;\n    return\
  \ join('', @a0) eq join('', @a1);\n}"
- "    my %count;\n    $count{$_}++ for split //, $s0;\n    $count{$_}-- for split\
  \ //, $s1;\n    !grep { $_ != 0 } values %count;\n}"
- "    my %c0 = count_chars($s0);\n    my %c1 = count_chars($s1);\n    return 0 unless\
  \ keys(%c0) == keys(%c1);\n    for my $k (keys %c0) {\n        return 0 unless $c0{$k}\
  \ == $c1{$k};\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    return 0 if scalar(keys %s0)\
  \ != scalar(keys %s1);\n    for my $k (keys %s0) {\n        return 0 if $s0{$k}\
  \ != $s1{$k};\n    }\n    return 1;\n}"
- "    my %c;\n    $c{$_}++ for split //, $s0;\n    $c{$_}-- for split //, $s1;\n\
  \    return !grep { $_ != 0 } values %c;\n}"
- "    my %count;\n    for my $c (split //, $s0) {\n        $count{$c}++;\n    }\n\
  \    for my $c (split //, $s1) {\n        $count{$c}--;\n    }\n    for my $c (keys\
  \ %count) {\n        return 0 if $count{$c} != 0;\n    }\n    return 1;\n}"
- "    my $s0_chars = {};\n    my $s1_chars = {};\n    for my $c (split //, $s0) {\n\
  \        $s0_chars->{$c}++;\n    }\n    for my $c (split //, $s1) {\n        $s1_chars->{$c}++;\n\
  \    }\n    for my $c (keys %$s0_chars) {\n        return 0 if $s0_chars->{$c} !=\
  \ $s1_chars->{$c};\n    }\n    for my $c (keys %$s1_chars) {\n        return 0 if\
  \ $s0_chars->{$c} != $s1_chars->{$c};\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    return 0 unless scalar(keys\
  \ %s0) == scalar(keys %s1);\n    for my $c (keys %s0) {\n        return 0 unless\
  \ $s0{$c} == $s1{$c};\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map {$_\
  \ => 1} @s0;\n    my %s1 = map {$_ => 1} @s1;\n    return 0 if keys %s0 != keys\
  \ %s1;\n    for my $c (keys %s0) {\n        return 0 if $s0{$c} != $s1{$c};\n  \
  \  }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    return 0 unless keys %s0 ==\
  \ keys %s1;\n    for my $c (keys %s0) {\n        return 0 unless exists $s1{$c};\n\
  \    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my @a0 = sort split //, $s0;\n    my @a1 = sort split //, $s1;\n    return\
  \ join('', @a0) eq join('', @a1);\n}"
- "    my %c0 = count_chars($s0);\n    my %c1 = count_chars($s1);\n    return 0 unless\
  \ keys(%c0) == keys(%c1);\n    for my $k (keys %c0) {\n        return 0 unless $c0{$k}\
  \ == $c1{$k};\n    }\n    return 1;\n}"
- "    my @s0 = sort split //, $s0;\n    my @s1 = sort split //, $s1;\n    return\
  \ \"@s0\" eq \"@s1\";\n}"
- "    my @a0 = sort split //, $s0;\n    my @a1 = sort split //, $s1;\n    return\
  \ \"@a0\" eq \"@a1\";\n}"
- "    my @s0 = sort split //, $s0;\n    my @s1 = sort split //, $s1;\n    return\
  \ \"@s0\" eq \"@s1\";\n}"
- "    my $s0_count = count_chars($s0);\n    my $s1_count = count_chars($s1);\n  \
  \  return $s0_count eq $s1_count;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n\
  \    for my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n     \
  \   $s1{$c}++;\n    }\n    return 0 if scalar(keys %s0) != scalar(keys %s1);\n \
  \   for my $c (keys %s0) {\n        return 0 if $s0{$c} != $s1{$c};\n    }\n   \
  \ return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    return 0 if scalar keys %s0\
  \ != scalar keys %s1;\n    for my $c (keys %s0) {\n        return 0 if $s0{$c} !=\
  \ $s1{$c};\n    }\n    return 1;\n}"
- "    my %s0 = map { $_ => 1 } split //, $s0;\n    my %s1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %s0 == keys %s1;\n    for my $k (keys %s0)\
  \ {\n        return 0 unless exists $s1{$k};\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map {$_\
  \ => 1} @s0;\n    my %s1 = map {$_ => 1} @s1;\n    return 0 if scalar(keys %s0)\
  \ != scalar(keys %s1);\n    for my $k (keys %s0) {\n        return 0 if $s0{$k}\
  \ != $s1{$k};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 if scalar keys %c0 != scalar keys %c1;\n    for my $c (keys\
  \ %c0) {\n        return 0 if !exists $c1{$c};\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    return 0 if keys %s0 != keys\
  \ %s1;\n    for my $c (keys %s0) {\n        return 0 if $s0{$c} != $s1{$c};\n  \
  \  }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    return 0 if scalar keys %s0\
  \ != scalar keys %s1;\n    for my $c (keys %s0) {\n        return 0 if $s0{$c} !=\
  \ $s1{$c};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless exists $c1{$c};\n    }\n    return 1;\n}"
- "    my @s0 = sort split //, $s0;\n    my @s1 = sort split //, $s1;\n    return\
  \ join('', @s0) eq join('', @s1);\n}"
- "    my $s0_count = count_chars($s0);\n    my $s1_count = count_chars($s1);\n  \
  \  return $s0_count eq $s1_count;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    return 0 unless scalar(keys\
  \ %s0) == scalar(keys %s1);\n    for my $c (keys %s0) {\n        return 0 unless\
  \ $s0{$c} == $s1{$c};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 if keys %c0 != keys %c1;\n    for my $c (keys %c0) {\n\
  \        return 0 if $c0{$c} != $c1{$c};\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    my @s0_unique = sort keys\
  \ %s0;\n    my @s1_unique = sort keys %s1;\n    return 0 if @s0_unique != @s1_unique;\n\
  \    for my $i (0 .. $#s0_unique) {\n        return 0 if $s0_unique[$i] ne $s1_unique[$i];\n\
  \    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n\
  \    for my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n     \
  \   $s1{$c}++;\n    }\n    for my $c (keys %s0) {\n        return 0 if $s0{$c} !=\
  \ $s1{$c};\n    }\n    for my $c (keys %s1) {\n        return 0 if $s0{$c} != $s1{$c};\n\
  \    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless scalar keys %c0 == scalar keys %c1;\n    for my\
  \ $c (keys %c0) {\n        return 0 unless $c1{$c};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my %h0 = map { $_ => 1 } split //, $s0;\n    my %h1 = map { $_ => 1 } split\
  \ //, $s1;\n    return !(grep { !$h1{$_} } keys %h0) && !(grep { !$h0{$_} } keys\
  \ %h1);\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 if keys %c0 != keys %c1;\n    for my $c (keys %c0) {\n\
  \        return 0 if $c0{$c} != $c1{$c};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless exists $c1{$c};\n    }\n    return 1;\n}"
- "    my $s0_chars = {};\n    my $s1_chars = {};\n    for my $c (split //, $s0) {\n\
  \        $s0_chars->{$c}++;\n    }\n    for my $c (split //, $s1) {\n        $s1_chars->{$c}++;\n\
  \    }\n    return $s0_chars eq $s1_chars;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless exists $c1{$c};\n    }\n    return 1;\n}"
- "    my %h0 = map { $_ => 1 } split //, $s0;\n    my %h1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %h0 == keys %h1;\n    for my $k (keys %h0)\
  \ {\n        return 0 unless $h0{$k} == $h1{$k};\n    }\n    return 1;\n}"
- "    my $s0_count = count_chars($s0);\n    my $s1_count = count_chars($s1);\n  \
  \  return $s0_count eq $s1_count;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    return 0 if scalar keys %s0\
  \ != scalar keys %s1;\n    for my $c (keys %s0) {\n        return 0 if $s0{$c} !=\
  \ $s1{$c};\n    }\n    return 1;\n}"
- "    my @s0 = sort split //, $s0;\n    my @s1 = sort split //, $s1;\n    return\
  \ \"@s0\" eq \"@s1\";\n}"
- "    my %c0 = count_chars($s0);\n    my %c1 = count_chars($s1);\n    return 0 if\
  \ keys(%c0) != keys(%c1);\n    for my $k (keys %c0) {\n        return 0 if $c0{$k}\
  \ != $c1{$k};\n    }\n    return 1;\n}"
- "    my @a0 = sort split //, $s0;\n    my @a1 = sort split //, $s1;\n    return\
  \ join('', @a0) eq join('', @a1);\n}"
- "    my @a0 = split //, $s0;\n    my @a1 = split //, $s1;\n    my %h0 = map { $_\
  \ => 1 } @a0;\n    my %h1 = map { $_ => 1 } @a1;\n    return 0 if keys %h0 != keys\
  \ %h1;\n    for my $k (keys %h0) {\n        return 0 if $h0{$k} != $h1{$k};\n  \
  \  }\n    return 1;\n}"
- "    my $s0_count = count_chars($s0);\n    my $s1_count = count_chars($s1);\n  \
  \  return $s0_count eq $s1_count;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n\
  \    for (@s0) {\n        $s0{$_}++;\n    }\n    for (@s1) {\n        $s1{$_}++;\n\
  \    }\n    for (keys %s0) {\n        return 0 if $s0{$_} != $s1{$_};\n    }\n \
  \   return 1;\n}"
- "    my @s0 = sort split //, $s0;\n    my @s1 = sort split //, $s1;\n    return\
  \ join('', @s0) eq join('', @s1);\n}"
- "    my @s0 = sort split //, $s0;\n    my @s1 = sort split //, $s1;\n    return\
  \ \"@s0\" eq \"@s1\";\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %h0 = map { $_\
  \ => 1 } @s0;\n    my %h1 = map { $_ => 1 } @s1;\n    return 0 unless scalar keys\
  \ %h0 == scalar keys %h1;\n    for my $k (keys %h0) {\n        return 0 unless exists\
  \ $h1{$k};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless exists $c1{$c};\n    }\n    return 1;\n}"
- "    my $s0_sorted = join('', sort split(//, $s0));\n    my $s1_sorted = join('',\
  \ sort split(//, $s1));\n    return $s0_sorted eq $s1_sorted;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my %s0 = map { $_ => 1 } split //, $s0;\n    my %s1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %s0 == keys %s1;\n    for my $k (keys %s0)\
  \ {\n        return 0 unless $s0{$k} == $s1{$k};\n    }\n    return 1;\n}"
- "    my %h0 = map { $_ => 1 } split //, $s0;\n    my %h1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %h0 == keys %h1;\n    for my $k (keys %h0)\
  \ {\n        return 0 unless $h0{$k} == $h1{$k};\n    }\n    return 1;\n}"
- "    my @a0 = sort split //, $s0;\n    my @a1 = sort split //, $s1;\n    return\
  \ \"@a0\" eq \"@a1\";\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n\
  \    for my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n     \
  \   $s1{$c}++;\n    }\n    for my $c (keys %s0) {\n        return 0 if $s0{$c} !=\
  \ $s1{$c};\n    }\n    for my $c (keys %s1) {\n        return 0 if $s0{$c} != $s1{$c};\n\
  \    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return scalar(keys %c0) == scalar(keys %c1) &&\n        scalar(grep\
  \ { $c0{$_} != $c1{$_} } keys %c0) == 0;\n}"
- "    my %c;\n    $c{$_}++ for split //, $s0;\n    $c{$_}-- for split //, $s1;\n\
  \    return !grep { $_ != 0 } values %c;\n}"
- "    my %counts;\n    for my $c (split //, $s0) {\n        $counts{$c}++;\n    }\n\
  \    for my $c (split //, $s1) {\n        $counts{$c}--;\n    }\n    for my $c (keys\
  \ %counts) {\n        return 0 if $counts{$c} != 0;\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n\
  \    for my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n     \
  \   $s1{$c}++;\n    }\n    for my $c (keys %s0) {\n        return 0 if $s0{$c} !=\
  \ $s1{$c};\n    }\n    for my $c (keys %s1) {\n        return 0 if $s0{$c} != $s1{$c};\n\
  \    }\n    return 1;\n}"
- "    return 0 if length($s0) != length($s1);\n    my %c0 = map {$_ => 1} split //,\
  \ $s0;\n    my %c1 = map {$_ => 1} split //, $s1;\n    return 0 if scalar(keys %c0)\
  \ != scalar(keys %c1);\n    for my $c (keys %c0) {\n        return 0 if $c0{$c}\
  \ != $c1{$c};\n    }\n    return 1;\n}"
- "    my $s0_count = count_chars($s0);\n    my $s1_count = count_chars($s1);\n  \
  \  return $s0_count eq $s1_count;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless scalar keys %c0 == scalar keys %c1;\n    for my\
  \ $c (keys %c0) {\n        return 0 unless $c1{$c};\n    }\n    return 1;\n}"
- "    my %s0 = map { $_ => 1 } split //, $s0;\n    my %s1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %s0 == keys %s1;\n    for my $c (keys %s0)\
  \ {\n        return 0 unless $s0{$c} == $s1{$c};\n    }\n    return 1;\n}"
- "    my @s0 = sort split //, $s0;\n    my @s1 = sort split //, $s1;\n    return\
  \ \"@s0\" eq \"@s1\";\n}"
- "    my @a0 = split //, $s0;\n    my @a1 = split //, $s1;\n    my %h0 = map { $_\
  \ => 1 } @a0;\n    my %h1 = map { $_ => 1 } @a1;\n    return 0 if scalar(keys %h0)\
  \ != scalar(keys %h1);\n    for my $k (keys %h0) {\n        return 0 if $h0{$k}\
  \ != $h1{$k};\n    }\n    return 1;\n}"
- "    my @a0 = split //, $s0;\n    my @a1 = split //, $s1;\n    my %h0 = map { $_\
  \ => 1 } @a0;\n    my %h1 = map { $_ => 1 } @a1;\n    return 0 if scalar(keys %h0)\
  \ != scalar(keys %h1);\n    for my $k (keys %h0) {\n        return 0 if $h0{$k}\
  \ != $h1{$k};\n    }\n    return 1;\n}"
- "    my %c;\n    $c{$_}++ for split //, $s0;\n    $c{$_}-- for split //, $s1;\n\
  \    !grep { $_ != 0 } values %c;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless exists $c1{$c};\n    }\n    return 1;\n}"
- "    my @s0 = sort split //, $s0;\n    my @s1 = sort split //, $s1;\n    return\
  \ \"@s0\" eq \"@s1\";\n}"
- "    my $len0 = length($s0);\n    my $len1 = length($s1);\n    return 0 if $len0\
  \ != $len1;\n    my %chars;\n    for (my $i = 0; $i < $len0; $i++) {\n        my\
  \ $c = substr($s0, $i, 1);\n        $chars{$c}++;\n    }\n    for (my $i = 0; $i\
  \ < $len1; $i++) {\n        my $c = substr($s1, $i, 1);\n        return 0 if !$chars{$c};\n\
  \        $chars{$c}--;\n    }\n    return 1;\n}"
- "    return 0 if length($s0) != length($s1);\n    my %c0 = map { $_ => 1 } split\
  \ //, $s0;\n    my %c1 = map { $_ => 1 } split //, $s1;\n    return 0 if keys %c0\
  \ != keys %c1;\n    for my $c (keys %c0) {\n        return 0 if $c0{$c} != $c1{$c};\n\
  \    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless exists $c1{$c};\n    }\n    return 1;\n}"
- "    return 0 unless length($s0) == length($s1);\n    my %c0 = count_chars($s0);\n\
  \    my %c1 = count_chars($s1);\n    return 0 unless keys(%c0) == keys(%c1);\n \
  \   for my $c (keys %c0) {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n\
  \    return 1;\n}"
- "    my $s0_count = count_chars($s0);\n    my $s1_count = count_chars($s1);\n  \
  \  return $s0_count eq $s1_count;\n}"
- "    return 0 if length($s0) != length($s1);\n    my %c0 = map { $_ => 1 } split\
  \ //, $s0;\n    my %c1 = map { $_ => 1 } split //, $s1;\n    return 0 if keys %c0\
  \ != keys %c1;\n    for my $c (keys %c0) {\n        return 0 if $c0{$c} != $c1{$c};\n\
  \    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my %s0 = map { $_ => 1 } split //, $s0;\n    my %s1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %s0 == keys %s1;\n    for my $k (keys %s0)\
  \ {\n        return 0 unless exists $s1{$k};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    return 0 unless keys %s0 ==\
  \ keys %s1;\n    for my $c (keys %s0) {\n        return 0 unless $s0{$c} == $s1{$c};\n\
  \    }\n    return 1;\n}"
- "    my %c0 = map {$_ => 1} split //, $s0;\n    my %c1 = map {$_ => 1} split //,\
  \ $s1;\n    return 0 unless scalar keys %c0 == scalar keys %c1;\n    for my $c (keys\
  \ %c0) {\n        return 0 unless exists $c1{$c};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my $len0 = length($s0);\n    my $len1 = length($s1);\n    return 0 if $len0\
  \ != $len1;\n    my @a0 = split //, $s0;\n    my @a1 = split //, $s1;\n    my %h0;\n\
  \    my %h1;\n    for my $c (@a0) {\n        $h0{$c}++;\n    }\n    for my $c (@a1)\
  \ {\n        $h1{$c}++;\n    }\n    for my $c (keys %h0) {\n        return 0 if\
  \ $h0{$c} != $h1{$c};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my %h0 = map { $_ => 1 } split //, $s0;\n    my %h1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %h0 == keys %h1;\n    for my $c (keys %h0)\
  \ {\n        return 0 unless $h0{$c} == $h1{$c};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my @a0 = sort split //, $s0;\n    my @a1 = sort split //, $s1;\n    return\
  \ \"@a0\" eq \"@a1\";\n}"
- "    my %c0 = count_chars($s0);\n    my %c1 = count_chars($s1);\n    return 0 if\
  \ keys(%c0) != keys(%c1);\n    for my $k (keys %c0) {\n        return 0 if $c0{$k}\
  \ != $c1{$k};\n    }\n    return 1;\n}"
- "    my %c0 = count_chars($s0);\n    my %c1 = count_chars($s1);\n    return 0 unless\
  \ scalar(keys %c0) == scalar(keys %c1);\n    for my $k (keys %c0) {\n        return\
  \ 0 unless exists $c1{$k} && $c0{$k} == $c1{$k};\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %h0 = map { $_\
  \ => 1 } @s0;\n    my %h1 = map { $_ => 1 } @s1;\n    return 0 if keys %h0 != keys\
  \ %h1;\n    for my $k (keys %h0) {\n        return 0 if $h0{$k} != $h1{$k};\n  \
  \  }\n    return 1;\n}"
- "    my %c0 = count_chars($s0);\n    my %c1 = count_chars($s1);\n    return 0 unless\
  \ keys(%c0) == keys(%c1);\n    for my $c (keys %c0) {\n        return 0 unless $c0{$c}\
  \ == $c1{$c};\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n\
  \    for my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n     \
  \   $s1{$c}++;\n    }\n    for my $c (keys %s0) {\n        return 0 if !exists $s1{$c};\n\
  \        return 0 if $s0{$c} != $s1{$c};\n    }\n    for my $c (keys %s1) {\n  \
  \      return 0 if !exists $s0{$c};\n        return 0 if $s0{$c} != $s1{$c};\n \
  \   }\n    return 1;\n}"
- "    my $s0_counts = count_chars($s0);\n    my $s1_counts = count_chars($s1);\n\
  \    return $s0_counts eq $s1_counts;\n}"
- "    my %s0 = map { $_ => 1 } split //, $s0;\n    my %s1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %s0 == keys %s1;\n    for my $k (keys %s0)\
  \ {\n        return 0 unless exists $s1{$k};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split(//, $s0);\n    my %c1 = map { $_ => 1 } split(//,\
  \ $s1);\n    return 0 unless scalar(keys %c0) == scalar(keys %c1);\n    for my $c\
  \ (keys %c0) {\n        return 0 unless exists $c1{$c};\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n\
  \    for my $c (@s0) {\n        $s0{$c}++;\n    }\n    for my $c (@s1) {\n     \
  \   $s1{$c}++;\n    }\n    for my $c (keys %s0) {\n        return 0 if $s0{$c} !=\
  \ $s1{$c};\n    }\n    for my $c (keys %s1) {\n        return 0 if $s0{$c} != $s1{$c};\n\
  \    }\n    return 1;\n}"
- "    my %c0 = count_chars($s0);\n    my %c1 = count_chars($s1);\n    return 0 ==\
  \ grep { $c0{$_} != $c1{$_} } keys %c0;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 if keys %c0 != keys %c1;\n    for my $c (keys %c0) {\n\
  \        return 0 if $c0{$c} != $c1{$c};\n    }\n    return 1;\n}"
- "    my @a0 = split //, $s0;\n    my @a1 = split //, $s1;\n    my %h0 = map { $_\
  \ => 1 } @a0;\n    my %h1 = map { $_ => 1 } @a1;\n    return 0 if keys %h0 != keys\
  \ %h1;\n    for my $k (keys %h0) {\n        return 0 if $h0{$k} != $h1{$k};\n  \
  \  }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    return 0 if scalar keys %s0\
  \ != scalar keys %s1;\n    for my $c (keys %s0) {\n        return 0 if $s0{$c} !=\
  \ $s1{$c};\n    }\n    return 1;\n}"
- "    my %c0 = map {$_ => 1} split(//, $s0);\n    my %c1 = map {$_ => 1} split(//,\
  \ $s1);\n    return 0 unless scalar(keys %c0) == scalar(keys %c1);\n    for my $c\
  \ (keys %c0) {\n        return 0 unless $c1{$c};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless $c0{$c} == $c1{$c};\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    return 0 unless scalar keys\
  \ %s0 == scalar keys %s1;\n    for my $c (keys %s0) {\n        return 0 unless $s0{$c}\
  \ == $s1{$c};\n    }\n    return 1;\n}"
- "    my @s0 = sort split //, $s0;\n    my @s1 = sort split //, $s1;\n    return\
  \ \"@s0\" eq \"@s1\";\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0;\n    my %s1;\n\
  \    for (@s0) {\n        $s0{$_}++;\n    }\n    for (@s1) {\n        $s1{$_}++;\n\
  \    }\n    return 0 if @s0 != @s1;\n    for (keys %s0) {\n        return 0 if $s0{$_}\
  \ != $s1{$_};\n    }\n    return 1;\n}"
- "    return 0 if length($s0) != length($s1);\n    my %s0 = map { $_ => 1 } split\
  \ //, $s0;\n    my %s1 = map { $_ => 1 } split //, $s1;\n    return 0 if scalar(keys\
  \ %s0) != scalar(keys %s1);\n    for my $k (keys %s0) {\n        return 0 if !exists\
  \ $s1{$k};\n    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    return 0 if scalar keys %s0\
  \ != scalar keys %s1;\n    for my $k (keys %s0) {\n        return 0 if $s0{$k} !=\
  \ $s1{$k};\n    }\n    return 1;\n}"
- "    my @a0 = sort split //, $s0;\n    my @a1 = sort split //, $s1;\n    return\
  \ \"@a0\" eq \"@a1\";\n}"
- "    my %c;\n    for (split(//, $s0)) {\n        $c{$_}++;\n    }\n    for (split(//,\
  \ $s1)) {\n        $c{$_}--;\n    }\n    for (values %c) {\n        return 0 if\
  \ $_;\n    }\n    return 1;\n}"
- "    my @a0 = split //, $s0;\n    my @a1 = split //, $s1;\n    my %h0 = map { $_\
  \ => 1 } @a0;\n    my %h1 = map { $_ => 1 } @a1;\n    return 0 unless scalar(keys\
  \ %h0) == scalar(keys %h1);\n    for my $c (keys %h0) {\n        return 0 unless\
  \ $h0{$c} == $h1{$c};\n    }\n    return 1;\n}"
- "    my %c0 = count_chars($s0);\n    my %c1 = count_chars($s1);\n    return 0 unless\
  \ keys(%c0) == keys(%c1);\n    for my $c (keys %c0) {\n        return 0 unless $c0{$c}\
  \ == $c1{$c};\n    }\n    return 1;\n}"
- "    my %s0 = map { $_ => 1 } split //, $s0;\n    my %s1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 if scalar keys %s0 != scalar keys %s1;\n    for my $k (keys\
  \ %s0) {\n        return 0 if !exists $s1{$k};\n    }\n    return 1;\n}"
- "    my $s0_chars = {};\n    my $s1_chars = {};\n    for my $c (split //, $s0) {\n\
  \        $s0_chars->{$c}++;\n    }\n    for my $c (split //, $s1) {\n        $s1_chars->{$c}++;\n\
  \    }\n    for my $c (keys %$s0_chars) {\n        return 0 if !exists $s1_chars->{$c}\
  \ || $s1_chars->{$c} != $s0_chars->{$c};\n    }\n    for my $c (keys %$s1_chars)\
  \ {\n        return 0 if !exists $s0_chars->{$c} || $s0_chars->{$c} != $s1_chars->{$c};\n\
  \    }\n    return 1;\n}"
- "    my @s0 = split //, $s0;\n    my @s1 = split //, $s1;\n    my %s0 = map { $_\
  \ => 1 } @s0;\n    my %s1 = map { $_ => 1 } @s1;\n    return 0 unless keys %s0 ==\
  \ keys %s1;\n    for my $c (keys %s0) {\n        return 0 unless $s0{$c} == $s1{$c};\n\
  \    }\n    return 1;\n}"
- "    my @s0 = sort split //, $s0;\n    my @s1 = sort split //, $s1;\n    return\
  \ \"@s0\" eq \"@s1\";\n}"
- "    my %c0 = map { $_ => 1 } split //, $s0;\n    my %c1 = map { $_ => 1 } split\
  \ //, $s1;\n    return 0 unless keys %c0 == keys %c1;\n    for my $c (keys %c0)\
  \ {\n        return 0 unless exists $c1{$c};\n    }\n    return 1;\n}"
language: pl
name: HumanEval_54_same_chars
prompt: "# Check if two words have the same characters.\n# >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddeddabc')\n# True\n# >>> same_chars('abcd', 'dddddddabc')\n# True\n\
  # >>> same_chars('dddddddabc', 'abcd')\n# True\n# >>> same_chars('eabcd', 'dddddddabc')\n\
  # False\n# >>> same_chars('abcd', 'dddddddabce')\n# False\n# >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddddabc')\n# False\nsub same_chars {\n    my($s0, $s1) = @_;\n"
stop_tokens:
- '

  sub'
- '

  #'
- '


  '
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&same_chars;\n\
  \        if(eq_deeply($candidate->(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcd\", \"dddddddabc\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n \
  \       }\n        if(eq_deeply($candidate->(\"dddddddabc\", \"abcd\"),1)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  eabcd\", \"dddddddabc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"abcd\", \"dddddddabcf\"),\"\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  eabcdzzzz\", \"dddzzzzzzzddddabc\"),\"\")) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\", \"aaccc\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
