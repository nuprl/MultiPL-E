name: HumanEval_119_match_parens
language: humaneval_to_perl.py
prompt: "# You are given a list of two strings, both strings consist of open\n# parentheses\
  \ '(' or close parentheses ')' only.\n# Your job is to check if it is possible to\
  \ concatenate the two strings in\n# some order, that the resulting string will be\
  \ good.\n# A string S is considered to be good if and only if all parentheses in\
  \ S\n# are balanced. For example: the string '(())()' is good, while the string\n\
  # '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return\
  \ 'No' otherwise.\n# Examples:\n# match_parens(['()(', ')']) == 'Yes'\n# match_parens([')',\
  \ ')']) == 'No'\nsub match_parens {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&match_parens;\n\
  \        if(eq_deeply($candidate->([\"()(\", \")\"]),\"Yes\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  )\", \")\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([\"(()(())\", \"())())\"]),\"No\")) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  )())\", \"(()()(\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([\"(())))\", \"(()())((\"]),\"Yes\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  ()\", \"())\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([\"(()(\", \"()))()\"]),\"Yes\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  ((((\", \"((())\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([\")(()\", \"(()(\"]),\"No\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  )(\", \")(\"]),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->([\"(\", \")\"]),\"Yes\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  )\", \"(\"]),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n}\n\ntesthumaneval();"
completions: ["    my($str1, $str2) = @$lst;\n    my($cnt1, $cnt2) = (0, 0);\n   \
    \ for my $c (split //, $str1) {\n        $cnt1++ if $c eq '(';\n        $cnt1--\
    \ if $c eq ')';\n        return 'No' if $cnt1 < 0;\n    }\n    for my $c (split\
    \ //, $str2) {\n        $cnt2++ if $c eq '(';\n        $cnt2-- if $c eq ')';\n\
    \        return 'No' if $cnt2 < 0;\n    }\n    return 'Yes' if $cnt1 == 0 && $cnt2\
    \ == 0;\n    return 'No';\n}", "    my($s1, $s2) = @$lst;\n    my($c1, $c2) =\
    \ (0, 0);\n    for my $c (split //, $s1) {\n        $c1++ if $c eq '(';\n    \
    \    $c1-- if $c eq ')';\n        return 'No' if $c1 < 0;\n    }\n    for my $c\
    \ (split //, $s2) {\n        $c2++ if $c eq '(';\n        $c2-- if $c eq ')';\n\
    \        return 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1 == $c2;\n   \
    \ return 'No';\n}", "    my $l = $lst->[0];\n    my $r = $lst->[1];\n    my $l_cnt\
    \ = 0;\n    my $r_cnt = 0;\n    for my $c (split //, $l) {\n        $l_cnt++ if\
    \ $c eq '(';\n        $l_cnt-- if $c eq ')';\n    }\n    for my $c (split //,\
    \ $r) {\n        $r_cnt++ if $c eq '(';\n        $r_cnt-- if $c eq ')';\n    }\n\
    \    return 'Yes' if $l_cnt == 0 and $r_cnt == 0;\n    return 'Yes' if $l_cnt\
    \ == $r_cnt;\n    return 'No';\n}", "    my($a, $b) = @$lst;\n    my($cnt) = 0;\n\
    \    for my $c (split //, $a) {\n        $cnt++ if $c eq '(';\n        $cnt--\
    \ if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    for my $c (split\
    \ //, $b) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n    \
    \    return 'No' if $cnt < 0;\n    }\n    return 'Yes' if $cnt == 0;\n    return\
    \ 'No';\n}", "    my($a, $b) = @$lst;\n    my($i, $j);\n    my($cnt) = 0;\n  \
    \  for ($i = 0; $i < length($a); $i++) {\n        $cnt++ if substr($a, $i, 1)\
    \ eq '(';\n        $cnt-- if substr($a, $i, 1) eq ')';\n        return 'No' if\
    \ $cnt < 0;\n    }\n    for ($j = 0; $j < length($b); $j++) {\n        $cnt++\
    \ if substr($b, $j, 1) eq '(';\n        $cnt-- if substr($b, $j, 1) eq ')';\n\
    \        return 'No' if $cnt < 0;\n    }\n    return 'Yes' if $cnt == 0;\n   \
    \ return 'No';\n}", "    my($s1, $s2) = @$lst;\n    my($cnt) = 0;\n    for my\
    \ $c (split(//, $s1)) {\n        if ($c eq '(') {\n            $cnt++;\n     \
    \   } elsif ($c eq ')') {\n            $cnt--;\n        }\n        return 'No'\
    \ if $cnt < 0;\n    }\n    for my $c (split(//, $s2)) {\n        if ($c eq '(')\
    \ {\n            $cnt++;\n        } elsif ($c eq ')') {\n            $cnt--;\n\
    \        }\n        return 'No' if $cnt < 0;\n    }\n    return 'Yes' if $cnt\
    \ == 0;\n    return 'No';\n}", "    my($a, $b) = @$lst;\n    my $cnt = 0;\n  \
    \  for my $c (split //, $a) {\n        $cnt++ if $c eq '(';\n        $cnt-- if\
    \ $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    for my $c (split //,\
    \ $b) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return\
    \ 'No' if $cnt < 0;\n    }\n    return 'Yes' if $cnt == 0;\n    return 'No';\n\
    }", "    my($left, $right) = @$lst;\n    my($left_open, $left_close) = (0, 0);\n\
    \    my($right_open, $right_close) = (0, 0);\n    for my $c (split //, $left)\
    \ {\n        if ($c eq '(') {\n            $left_open++;\n        } else {\n \
    \           $left_close++;\n        }\n    }\n    for my $c (split //, $right)\
    \ {\n        if ($c eq '(') {\n            $right_open++;\n        } else {\n\
    \            $right_close++;\n        }\n    }\n    my($open, $close) = ($left_open\
    \ + $right_open, $left_close + $right_close);\n    return $open == $close ? 'Yes'\
    \ : 'No';\n}", "    my $s1 = $lst->[0];\n    my $s2 = $lst->[1];\n    my $s =\
    \ $s1 . $s2;\n    my $cnt = 0;\n    for my $c (split //, $s) {\n        $cnt++\
    \ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n\
    \    }\n    return 'Yes';\n}", "    my($a, $b) = @$lst;\n    my($cnt) = 0;\n \
    \   for my $c (split //, $a) {\n        $cnt++ if $c eq '(';\n        $cnt-- if\
    \ $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    for my $c (split //,\
    \ $b) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return\
    \ 'No' if $cnt < 0;\n    }\n    return 'Yes' if $cnt == 0;\n    return 'No';\n\
    }", "    my($a, $b) = @$lst;\n    my($cnt) = 0;\n    for my $c (split '', $a)\
    \ {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return\
    \ 'No' if $cnt < 0;\n    }\n    for my $c (split '', $b) {\n        $cnt++ if\
    \ $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n\
    \    }\n    return 'Yes' if $cnt == 0;\n    return 'No';\n}", "    my($a, $b)\
    \ = @$lst;\n    my($i, $j, $k);\n    my($a_open, $a_close, $b_open, $b_close);\n\
    \    my($a_open_pos, $a_close_pos, $b_open_pos, $b_close_pos);\n    my($a_open_pos_last,\
    \ $a_close_pos_last, $b_open_pos_last, $b_close_pos_last);\n    my($a_open_pos_next,\
    \ $a_close_pos_next, $b_open_pos_next, $b_close_pos_next);\n    my($a_open_pos_prev,\
    \ $a_close_pos_prev, $b_open_pos_prev, $b_close_pos_prev);\n    my($a_open_pos_prev_last,\
    \ $a_close_pos_prev_last, $b_open_pos_prev_last, $b_close_pos_prev_last);\n  \
    \  my($a_open_pos_next_last, $a_close_pos_next_last, $b_open_pos_next_last, $b_close_pos_next_last);\n\
    \    my($a_open_pos_prev_next, $a_close_pos_prev_next, $b_open_pos_prev_next,\
    \ $b_close_pos_prev_next);\n    my($a_open_pos_prev_next_last, $a_close_pos_prev_next_last,\
    \ $b_open_pos_prev_next_last, $b_close_pos_prev_next_last);\n    my($a_open_pos_prev_next_last_last,\
    \ $a_close_pos_prev_next_last_last, $b_open_pos_prev_next_last_last, $b_close_pos_prev_next_last_last);\n\
    \    my($a_open_pos_prev_next_last_last_last, $a_close_pos_prev_next_last_last_last,\
    \ $b_open_pos_prev_next_last_last_last, $", "    my $str1 = $lst->[0];\n    my\
    \ $str2 = $lst->[1];\n    my $str = $str1 . $str2;\n    my $count = 0;\n    for\
    \ my $c (split //, $str) {\n        if ($c eq '(') {\n            $count++;\n\
    \        } elsif ($c eq ')') {\n            $count--;\n        }\n        return\
    \ 'No' if $count < 0;\n    }\n    return 'Yes';\n}", "    my($left, $right) =\
    \ @$lst;\n    my($left_parens, $right_parens) = (0, 0);\n    for my $c (split\
    \ //, $left) {\n        $left_parens++ if $c eq '(';\n        $left_parens-- if\
    \ $c eq ')';\n        return 'No' if $left_parens < 0;\n    }\n    for my $c (split\
    \ //, $right) {\n        $right_parens++ if $c eq '(';\n        $right_parens--\
    \ if $c eq ')';\n        return 'No' if $right_parens < 0;\n    }\n    return\
    \ 'Yes' if $left_parens == $right_parens;\n    return 'No';\n}", "    my $str1\
    \ = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str = $str1 . $str2;\n    my\
    \ $count = 0;\n    for my $c (split //, $str) {\n        if ($c eq '(') {\n  \
    \          $count++;\n        }\n        elsif ($c eq ')') {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return 'No';\n        }\n \
    \   }\n    return 'Yes';\n}", "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n\
    \    my $str = $str1 . $str2;\n    my $count = 0;\n    for my $c (split //, $str)\
    \ {\n        if ($c eq '(') {\n            $count++;\n        }\n        elsif\
    \ ($c eq ')') {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return 'No';\n        }\n    }\n    return $count == 0 ? 'Yes' :\
    \ 'No';\n}", "    my($a, $b) = @$lst;\n    my $cnt = 0;\n    for my $c (split\
    \ //, $a) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n    \
    \    return 'No' if $cnt < 0;\n    }\n    for my $c (split //, $b) {\n       \
    \ $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No' if $cnt\
    \ < 0;\n    }\n    return 'Yes' if $cnt == 0;\n    return 'No';\n}", "    my $str1\
    \ = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str1_open = 0;\n    my $str2_open\
    \ = 0;\n    my $str1_close = 0;\n    my $str2_close = 0;\n    for my $c (split\
    \ //, $str1) {\n        if ($c eq '(') {\n            $str1_open++;\n        }\n\
    \        elsif ($c eq ')') {\n            $str1_close++;\n        }\n    }\n \
    \   for my $c (split //, $str2) {\n        if ($c eq '(') {\n            $str2_open++;\n\
    \        }\n        elsif ($c eq ')') {\n            $str2_close++;\n        }\n\
    \    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n  \
    \      return 'Yes';\n    }\n    elsif ($str1_open == $str1_close && $str2_open\
    \ > $str2_close) {\n        return 'Yes' if $str2_open - $str2_close == $str1_open;\n\
    \    }\n    elsif ($str1_open > $str1_close && $str2_open == $str2_close) {\n\
    \        return 'Yes' if $str1_open - $str1_close == $str2_open;\n    }\n    elsif\
    \ ($str1_open > $str1_close && $str2_open > $str2_close) {\n        return 'Yes'\
    \ if $str1_open - $str1_close == $str2_open - $str2_close;\n    }\n    return\
    \ 'No';\n}", "    my($left, $right) = @$lst;\n    my($left_count, $right_count)\
    \ = (0, 0);\n    for my $c (split //, $left) {\n        $left_count++ if $c eq\
    \ '(';\n        $left_count-- if $c eq ')';\n        return 'No' if $left_count\
    \ < 0;\n    }\n    for my $c (split //, $right) {\n        $right_count++ if $c\
    \ eq '(';\n        $right_count-- if $c eq ')';\n        return 'No' if $right_count\
    \ < 0;\n    }\n    return 'Yes' if $left_count == $right_count;\n    return 'No';\n\
    }", "    my($s1, $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n    for my $c (split\
    \ //, $s1) {\n        $c1++ if $c eq '(';\n        $c1-- if $c eq ')';\n     \
    \   return 'No' if $c1 < 0;\n    }\n    for my $c (split //, $s2) {\n        $c2++\
    \ if $c eq '(';\n        $c2-- if $c eq ')';\n        return 'No' if $c2 < 0;\n\
    \    }\n    return 'Yes' if $c1 == $c2;\n    return 'No';\n}", "    my($s1, $s2)\
    \ = @$lst;\n    my($c1, $c2) = (0, 0);\n    for my $c (split //, $s1) {\n    \
    \    $c1++ if $c eq '(';\n        $c1-- if $c eq ')';\n        return 'No' if\
    \ $c1 < 0;\n    }\n    for my $c (split //, $s2) {\n        $c2++ if $c eq '(';\n\
    \        $c2-- if $c eq ')';\n        return 'No' if $c2 < 0;\n    }\n    return\
    \ 'Yes' if $c1 == $c2;\n    return 'No';\n}", "    my($s1, $s2) = @$lst;\n   \
    \ my($c1, $c2) = (0, 0);\n    for my $c (split //, $s1) {\n        $c1++ if $c\
    \ eq '(';\n        $c1-- if $c eq ')';\n        return 'No' if $c1 < 0;\n    }\n\
    \    for my $c (split //, $s2) {\n        $c2++ if $c eq '(';\n        $c2-- if\
    \ $c eq ')';\n        return 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1\
    \ == $c2;\n    return 'No';\n}", "    my($str1, $str2) = @$lst;\n    my($cnt1,\
    \ $cnt2) = (0, 0);\n    for my $c (split //, $str1) {\n        $cnt1++ if $c eq\
    \ '(';\n        $cnt1-- if $c eq ')';\n        return 'No' if $cnt1 < 0;\n   \
    \ }\n    for my $c (split //, $str2) {\n        $cnt2++ if $c eq '(';\n      \
    \  $cnt2-- if $c eq ')';\n        return 'No' if $cnt2 < 0;\n    }\n    return\
    \ 'Yes' if $cnt1 == 0 && $cnt2 == 0;\n    return 'No';\n}", "    my($left, $right)\
    \ = @$lst;\n    my($left_count, $right_count) = (0, 0);\n    for my $c (split\
    \ //, $left) {\n        $left_count++ if $c eq '(';\n        $left_count-- if\
    \ $c eq ')';\n        return 'No' if $left_count < 0;\n    }\n    for my $c (split\
    \ //, $right) {\n        $right_count++ if $c eq '(';\n        $right_count--\
    \ if $c eq ')';\n        return 'No' if $right_count < 0;\n    }\n    return 'Yes'\
    \ if $left_count == $right_count;\n    return 'No';\n}", "    my $s1 = $lst->[0];\n\
    \    my $s2 = $lst->[1];\n    my $s = $s1 . $s2;\n    my $cnt = 0;\n    for my\
    \ $c (split //, $s) {\n        if ($c eq '(') {\n            $cnt++;\n       \
    \ } elsif ($c eq ')') {\n            $cnt--;\n        }\n        if ($cnt < 0)\
    \ {\n            return 'No';\n        }\n    }\n    return $cnt == 0 ? 'Yes'\
    \ : 'No';\n}", "    my($s1, $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n    for\
    \ my $c (split //, $s1) {\n        $c1++ if $c eq '(';\n        $c1-- if $c eq\
    \ ')';\n        return 'No' if $c1 < 0;\n    }\n    for my $c (split //, $s2)\
    \ {\n        $c2++ if $c eq '(';\n        $c2-- if $c eq ')';\n        return\
    \ 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1 == $c2;\n    return 'No';\n\
    }", "    my($s1, $s2) = @$lst;\n    my $s = $s1 . $s2;\n    my $cnt = 0;\n   \
    \ for my $c (split //, $s) {\n        if ($c eq '(') {\n            $cnt++;\n\
    \        } else {\n            $cnt--;\n        }\n        return 'No' if $cnt\
    \ < 0;\n    }\n    return 'Yes';\n}", "    my($s1, $s2) = @$lst;\n    my($c1,\
    \ $c2) = (0, 0);\n    for my $c (split //, $s1) {\n        $c1++ if $c eq '(';\n\
    \        $c1-- if $c eq ')';\n        return 'No' if $c1 < 0;\n    }\n    for\
    \ my $c (split //, $s2) {\n        $c2++ if $c eq '(';\n        $c2-- if $c eq\
    \ ')';\n        return 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1 == $c2;\n\
    \    return 'No';\n}", "    my($s1, $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n\
    \    for my $c (split //, $s1) {\n        $c1++ if $c eq '(';\n        $c1-- if\
    \ $c eq ')';\n        return 'No' if $c1 < 0;\n    }\n    for my $c (split //,\
    \ $s2) {\n        $c2++ if $c eq '(';\n        $c2-- if $c eq ')';\n        return\
    \ 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1 == $c2;\n    return 'No';\n\
    }", "    my($s1, $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n    for my $c (split(//,\
    \ $s1)) {\n        $c1++ if $c eq '(';\n        $c1-- if $c eq ')';\n        return\
    \ 'No' if $c1 < 0;\n    }\n    for my $c (split(//, $s2)) {\n        $c2++ if\
    \ $c eq '(';\n        $c2-- if $c eq ')';\n        return 'No' if $c2 < 0;\n \
    \   }\n    return 'Yes' if $c1 == $c2;\n    return 'No';\n}", "    my($s1, $s2)\
    \ = @$lst;\n    my($c1, $c2) = (0, 0);\n    for my $c (split //, $s1) {\n    \
    \    $c1++ if $c eq '(';\n        $c1-- if $c eq ')';\n        return 'No' if\
    \ $c1 < 0;\n    }\n    for my $c (split //, $s2) {\n        $c2++ if $c eq '(';\n\
    \        $c2-- if $c eq ')';\n        return 'No' if $c2 < 0;\n    }\n    return\
    \ 'Yes' if $c1 == $c2;\n    return 'No';\n}", "    my $str1 = $lst->[0];\n   \
    \ my $str2 = $lst->[1];\n    my $str = $str1 . $str2;\n    my $count = 0;\n  \
    \  for my $c (split //, $str) {\n        if ($c eq '(') {\n            $count++;\n\
    \        } elsif ($c eq ')') {\n            $count--;\n        }\n        if ($count\
    \ < 0) {\n            return 'No';\n        }\n    }\n    return 'Yes';\n}", " \
    \   my $s1 = $lst->[0];\n    my $s2 = $lst->[1];\n    my $s = $s1 . $s2;\n   \
    \ my $cnt = 0;\n    for my $c (split //, $s) {\n        if ($c eq '(') {\n   \
    \         $cnt++;\n        } elsif ($c eq ')') {\n            $cnt--;\n      \
    \  }\n        if ($cnt < 0) {\n            return 'No';\n        }\n    }\n  \
    \  if ($cnt == 0) {\n        return 'Yes';\n    } else {\n        return 'No';\n\
    \    }\n}", "    my($s1, $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n    for my\
    \ $c (split //, $s1) {\n        $c1++ if $c eq '(';\n        $c1-- if $c eq ')';\n\
    \        return 'No' if $c1 < 0;\n    }\n    for my $c (split //, $s2) {\n   \
    \     $c2++ if $c eq '(';\n        $c2-- if $c eq ')';\n        return 'No' if\
    \ $c2 < 0;\n    }\n    return 'Yes' if $c1 == $c2;\n    return 'No';\n}", "  \
    \  my($s1, $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n    for my $c (split //,\
    \ $s1) {\n        $c1++ if $c eq '(';\n        $c1-- if $c eq ')';\n        return\
    \ 'No' if $c1 < 0;\n    }\n    for my $c (split //, $s2) {\n        $c2++ if $c\
    \ eq '(';\n        $c2-- if $c eq ')';\n        return 'No' if $c2 < 0;\n    }\n\
    \    return 'Yes' if $c1 == $c2;\n    return 'No';\n}", "    my $str = join('',\
    \ @$lst);\n    my $cnt = 0;\n    for my $c (split //, $str) {\n        $cnt++\
    \ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n\
    \    }\n    return 'Yes';\n}", "    my($s1, $s2) = @$lst;\n    my $s = $s1 . $s2;\n\
    \    my $cnt = 0;\n    for my $c (split //, $s) {\n        if ($c eq '(') {\n\
    \            $cnt++;\n        } elsif ($c eq ')') {\n            $cnt--;\n   \
    \     }\n        if ($cnt < 0) {\n            return 'No';\n        }\n    }\n\
    \    return 'Yes';\n}", "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n\
    \    my $str = $str1 . $str2;\n    my $count = 0;\n    for my $c (split //, $str)\
    \ {\n        $count++ if $c eq '(';\n        $count-- if $c eq ')';\n        return\
    \ 'No' if $count < 0;\n    }\n    return 'Yes';\n}", "    my $str = join('', @$lst);\n\
    \    my $cnt = 0;\n    for my $c (split //, $str) {\n        if ($c eq '(') {\n\
    \            $cnt++;\n        } else {\n            $cnt--;\n        }\n     \
    \   return 'No' if $cnt < 0;\n    }\n    return 'Yes';\n}", "    my($a, $b) =\
    \ @$lst;\n    my($i, $j, $k, $cnt);\n    for ($i = 0; $i < length($a); $i++) {\n\
    \        $cnt = 0;\n        for ($j = 0; $j < length($a); $j++) {\n          \
    \  $cnt++ if substr($a, $j, 1) eq '(';\n            $cnt-- if substr($a, $j, 1)\
    \ eq ')';\n            return 'Yes' if $cnt < 0;\n        }\n        $a = substr($a,\
    \ 1) . substr($a, 0, 1);\n    }\n    for ($i = 0; $i < length($b); $i++) {\n \
    \       $cnt = 0;\n        for ($j = 0; $j < length($b); $j++) {\n           \
    \ $cnt++ if substr($b, $j, 1) eq '(';\n            $cnt-- if substr($b, $j, 1)\
    \ eq ')';\n            return 'Yes' if $cnt < 0;\n        }\n        $b = substr($b,\
    \ 1) . substr($b, 0, 1);\n    }\n    return 'No';\n}", "    my($a, $b) = @$lst;\n\
    \    my $cnt = 0;\n    for my $c (split //, $a) {\n        $cnt++ if $c eq '(';\n\
    \        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    for\
    \ my $c (split //, $b) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq\
    \ ')';\n        return 'No' if $cnt < 0;\n    }\n    return 'Yes' if $cnt == 0;\n\
    \    return 'No';\n}", "    my($s1, $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n\
    \    for my $c (split //, $s1) {\n        $c1++ if $c eq '(';\n        $c1-- if\
    \ $c eq ')';\n        return 'No' if $c1 < 0;\n    }\n    for my $c (split //,\
    \ $s2) {\n        $c2++ if $c eq '(';\n        $c2-- if $c eq ')';\n        return\
    \ 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1 == $c2;\n    return 'No';\n\
    }", "    my($left, $right) = @$lst;\n    my($left_count, $right_count) = (0, 0);\n\
    \    for my $c (split //, $left) {\n        $left_count++ if $c eq '(';\n    \
    \    $left_count-- if $c eq ')';\n        return 'No' if $left_count < 0;\n  \
    \  }\n    for my $c (split //, $right) {\n        $right_count++ if $c eq '(';\n\
    \        $right_count-- if $c eq ')';\n        return 'No' if $right_count < 0;\n\
    \    }\n    return 'Yes' if $left_count == $right_count;\n    return 'No';\n}",
  "    my($s1, $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n    for my $c (split //,\
    \ $s1) {\n        $c1++ if $c eq '(';\n        $c1-- if $c eq ')';\n        return\
    \ 'No' if $c1 < 0;\n    }\n    for my $c (split //, $s2) {\n        $c2++ if $c\
    \ eq '(';\n        $c2-- if $c eq ')';\n        return 'No' if $c2 < 0;\n    }\n\
    \    return 'Yes' if $c1 == $c2;\n    return 'No';\n}", "    my($s1, $s2) = @$lst;\n\
    \    my($cnt) = 0;\n    for my $c (split //, $s1) {\n        $cnt++ if $c eq '(';\n\
    \        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    for\
    \ my $c (split //, $s2) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c\
    \ eq ')';\n        return 'No' if $cnt < 0;\n    }\n    return 'Yes' if $cnt ==\
    \ 0;\n    return 'No';\n}", "    my($left, $right) = @$lst;\n    my($left_cnt,\
    \ $right_cnt) = (0, 0);\n    for my $c (split //, $left) {\n        $left_cnt++\
    \ if $c eq '(';\n        $left_cnt-- if $c eq ')';\n    }\n    for my $c (split\
    \ //, $right) {\n        $right_cnt++ if $c eq '(';\n        $right_cnt-- if $c\
    \ eq ')';\n    }\n    return 'Yes' if $left_cnt == 0 and $right_cnt == 0;\n  \
    \  return 'Yes' if $left_cnt == 1 and $right_cnt == -1;\n    return 'Yes' if $left_cnt\
    \ == -1 and $right_cnt == 1;\n    return 'No';\n}", "    my($s1, $s2) = @$lst;\n\
    \    my($c1, $c2) = (0, 0);\n    for my $c (split //, $s1) {\n        $c1++ if\
    \ $c eq '(';\n        $c1-- if $c eq ')';\n        return 'No' if $c1 < 0;\n \
    \   }\n    for my $c (split //, $s2) {\n        $c2++ if $c eq '(';\n        $c2--\
    \ if $c eq ')';\n        return 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1\
    \ == $c2;\n    return 'No';\n}", "    my($a, $b) = @$lst;\n    my($cnt) = 0;\n\
    \    for my $c (split //, $a) {\n        $cnt++ if $c eq '(';\n        $cnt--\
    \ if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    for my $c (split\
    \ //, $b) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n    \
    \    return 'No' if $cnt < 0;\n    }\n    return 'Yes' if $cnt == 0;\n    return\
    \ 'No';\n}", "    my($a, $b) = @$lst;\n    my($i, $j, $k, $n, $m);\n    my($cnt,\
    \ $ok);", "    my($s1, $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n    for my $c\
    \ (split //, $s1) {\n        $c1++ if $c eq '(';\n        $c1-- if $c eq ')';\n\
    \        return 'No' if $c1 < 0;\n    }\n    for my $c (split //, $s2) {\n   \
    \     $c2++ if $c eq '(';\n        $c2-- if $c eq ')';\n        return 'No' if\
    \ $c2 < 0;\n    }\n    return 'Yes' if $c1 == $c2;\n    return 'No';\n}", "  \
    \  my($a, $b) = @$lst;\n    my($cnt) = 0;\n    for my $c (split //, $a) {\n  \
    \      $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No'\
    \ if $cnt < 0;\n    }\n    for my $c (split //, $b) {\n        $cnt++ if $c eq\
    \ '(';\n        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n\
    \    return 'Yes' if $cnt == 0;\n    return 'No';\n}", "    my($s1, $s2) = @$lst;\n\
    \    my($cnt) = 0;\n    for my $c (split //, $s1) {\n        $cnt++ if $c eq '(';\n\
    \        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    for\
    \ my $c (split //, $s2) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c\
    \ eq ')';\n        return 'No' if $cnt < 0;\n    }\n    return 'Yes' if $cnt ==\
    \ 0;\n    return 'No';\n}", "    my $s1 = $lst->[0];\n    my $s2 = $lst->[1];\n\
    \    my $s = $s1 . $s2;\n    my $cnt = 0;\n    for my $c (split //, $s) {\n  \
    \      if ($c eq '(') {\n            $cnt++;\n        } elsif ($c eq ')') {\n\
    \            $cnt--;\n        }\n        return 'No' if $cnt < 0;\n    }\n   \
    \ return 'Yes';\n}", "    my($s1, $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n\
    \    for my $c (split //, $s1) {\n        $c1++ if $c eq '(';\n        $c1-- if\
    \ $c eq ')';\n        return 'No' if $c1 < 0;\n    }\n    for my $c (split //,\
    \ $s2) {\n        $c2++ if $c eq '(';\n        $c2-- if $c eq ')';\n        return\
    \ 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1 == $c2;\n    return 'No';\n\
    }", "    my($l, $r) = @$lst;\n    my($l_cnt, $r_cnt) = (0, 0);\n    for my $c\
    \ (split //, $l) {\n        $l_cnt++ if $c eq '(';\n        $l_cnt-- if $c eq\
    \ ')';\n    }\n    for my $c (split //, $r) {\n        $r_cnt++ if $c eq '(';\n\
    \        $r_cnt-- if $c eq ')';\n    }\n    return 'Yes' if $l_cnt == 0 && $r_cnt\
    \ == 0;\n    return 'Yes' if $l_cnt == $r_cnt && $l_cnt > 0;\n    return 'Yes'\
    \ if $l_cnt == -$r_cnt && $l_cnt < 0;\n    return 'No';\n}", "    my($a, $b) =\
    \ @$lst;\n    my $a_cnt = $a =~ tr/\\(/\\(/;\n    my $b_cnt = $b =~ tr/\\(/\\\
    (/;\n    my $a_rev = reverse $a;\n    $a_rev =~ tr/\\(/\\)/;\n    my $b_rev =\
    \ reverse $b;\n    $b_rev =~ tr/\\(/\\)/;\n    if ($a_cnt == $b_cnt) {\n     \
    \   return 'Yes';\n    }\n    elsif ($a_cnt > $b_cnt) {\n        return 'Yes'\
    \ if $a_rev eq $b;\n    }\n    elsif ($a_cnt < $b_cnt) {\n        return 'Yes'\
    \ if $a eq $b_rev;\n    }\n    return 'No';\n}", "    my($left, $right) = @$lst;\n\
    \    my($left_count, $right_count) = (0, 0);\n    for my $c (split //, $left)\
    \ {\n        $left_count++ if $c eq '(';\n        $left_count-- if $c eq ')';\n\
    \        return 'No' if $left_count < 0;\n    }\n    for my $c (split //, $right)\
    \ {\n        $right_count++ if $c eq '(';\n        $right_count-- if $c eq ')';\n\
    \        return 'No' if $right_count < 0;\n    }\n    return 'Yes' if $left_count\
    \ == $right_count;\n    return 'No';\n}", "    my $s1 = $lst->[0];\n    my $s2\
    \ = $lst->[1];\n    my $s = $s1 . $s2;\n    my $cnt = 0;\n    for my $c (split\
    \ //, $s) {\n        if ($c eq '(') {\n            $cnt++;\n        } elsif ($c\
    \ eq ')') {\n            $cnt--;\n        }\n        return 'No' if $cnt < 0;\n\
    \    }\n    return 'Yes';\n}", "    my $str = join('', @$lst);\n    my $cnt =\
    \ 0;\n    for my $c (split //, $str) {\n        if ($c eq '(') {\n           \
    \ $cnt++;\n        } elsif ($c eq ')') {\n            $cnt--;\n        }\n   \
    \     return 'No' if $cnt < 0;\n    }\n    return 'Yes';\n}", "    my($a, $b)\
    \ = @$lst;\n    my $cnt = 0;\n    for my $c (split //, $a) {\n        $cnt++ if\
    \ $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n\
    \    }\n    for my $c (split //, $b) {\n        $cnt++ if $c eq '(';\n       \
    \ $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    return 'Yes'\
    \ if $cnt == 0;\n    return 'No';\n}", "    my($s1, $s2) = @$lst;\n    my($c1,\
    \ $c2) = (0, 0);\n    my($i, $j);\n    for ($i = 0; $i < length($s1); $i++) {\n\
    \        $c1++ if substr($s1, $i, 1) eq '(';\n        $c1-- if substr($s1, $i,\
    \ 1) eq ')';\n        return 'No' if $c1 < 0;\n    }\n    for ($j = 0; $j < length($s2);\
    \ $j++) {\n        $c2++ if substr($s2, $j, 1) eq '(';\n        $c2-- if substr($s2,\
    \ $j, 1) eq ')';\n        return 'No' if $c2 < 0;\n    }\n    return 'Yes' if\
    \ $c1 == $c2;\n    return 'No';\n}", "    my($s1, $s2) = @$lst;\n    my($c1, $c2)\
    \ = (0, 0);\n    for my $c (split //, $s1) {\n        $c1++ if $c eq '(';\n  \
    \      $c1-- if $c eq ')';\n        return 'No' if $c1 < 0;\n    }\n    for my\
    \ $c (split //, $s2) {\n        $c2++ if $c eq '(';\n        $c2-- if $c eq ')';\n\
    \        return 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1 == $c2;\n   \
    \ return 'No';\n}", "    my($left, $right) = @$lst;\n    my($left_count, $right_count)\
    \ = (0, 0);\n    for my $c (split //, $left) {\n        $left_count++ if $c eq\
    \ '(';\n        $left_count-- if $c eq ')';\n        return 'No' if $left_count\
    \ < 0;\n    }\n    for my $c (split //, $right) {\n        $right_count++ if $c\
    \ eq '(';\n        $right_count-- if $c eq ')';\n        return 'No' if $right_count\
    \ < 0;\n    }\n    return 'Yes' if $left_count == $right_count;\n    return 'No';\n\
    }", "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str = $str1\
    \ . $str2;\n    my $count = 0;\n    for my $c (split //, $str) {\n        if ($c\
    \ eq '(') {\n            $count++;\n        } elsif ($c eq ')') {\n          \
    \  $count--;\n        }\n        if ($count < 0) {\n            return 'No';\n\
    \        }\n    }\n    return $count == 0 ? 'Yes' : 'No';\n}", "    my($a, $b)\
    \ = @$lst;\n    my($cnt) = 0;\n    for my $c (split //, $a) {\n        $cnt++\
    \ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n\
    \    }\n    for my $c (split //, $b) {\n        $cnt++ if $c eq '(';\n       \
    \ $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    return 'Yes'\
    \ if $cnt == 0;\n    return 'No';\n}", "    my($left, $right) = @$lst;\n    my($left_count,\
    \ $right_count) = (0, 0);\n    for my $c (split //, $left) {\n        $left_count++\
    \ if $c eq '(';\n        $left_count-- if $c eq ')';\n        return 'No' if $left_count\
    \ < 0;\n    }\n    for my $c (split //, $right) {\n        $right_count++ if $c\
    \ eq '(';\n        $right_count-- if $c eq ')';\n        return 'No' if $right_count\
    \ < 0;\n    }\n    return 'Yes' if $left_count == $right_count;\n    return 'No';\n\
    }", "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str = $str1\
    \ . $str2;\n    my $len = length($str);\n    my $cnt = 0;\n    for (my $i = 0;\
    \ $i < $len; $i++) {\n        my $ch = substr($str, $i, 1);\n        if ($ch eq\
    \ '(') {\n            $cnt++;\n        } elsif ($ch eq ')') {\n            $cnt--;\n\
    \        }\n        if ($cnt < 0) {\n            return 'No';\n        }\n   \
    \ }\n    if ($cnt == 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}", "    my($a, $b) = @$lst;\n    my($i, $j, $k);\n    my($cnt);\n\
    \    my($res);", "    my($s1, $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n    for\
    \ my $c (split //, $s1) {\n        $c1++ if $c eq '(';\n        $c1-- if $c eq\
    \ ')';\n        return 'No' if $c1 < 0;\n    }\n    for my $c (split //, $s2)\
    \ {\n        $c2++ if $c eq '(';\n        $c2-- if $c eq ')';\n        return\
    \ 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1 == $c2;\n    return 'No';\n\
    }", "    my($str1, $str2) = @$lst;\n    my($cnt1, $cnt2) = (0, 0);\n    for my\
    \ $c (split //, $str1) {\n        $cnt1++ if $c eq '(';\n        $cnt1-- if $c\
    \ eq ')';\n        return 'No' if $cnt1 < 0;\n    }\n    for my $c (split //,\
    \ $str2) {\n        $cnt2++ if $c eq '(';\n        $cnt2-- if $c eq ')';\n   \
    \     return 'No' if $cnt2 < 0;\n    }\n    return 'Yes' if $cnt1 == 0 && $cnt2\
    \ == 0;\n    return 'No';\n}", "    my($s1, $s2) = @$lst;\n    my($c1, $c2) =\
    \ (0, 0);\n    for my $c (split //, $s1) {\n        $c1++ if $c eq '(';\n    \
    \    $c1-- if $c eq ')';\n        return 'No' if $c1 < 0;\n    }\n    for my $c\
    \ (split //, $s2) {\n        $c2++ if $c eq '(';\n        $c2-- if $c eq ')';\n\
    \        return 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1 == $c2;\n   \
    \ return 'No';\n}", "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n  \
    \  my $str = $str1 . $str2;\n    my $count = 0;\n    for my $c (split //, $str)\
    \ {\n        if ($c eq '(') {\n            $count++;\n        } elsif ($c eq ')')\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return 'No';\n        }\n    }\n    return 'Yes';\n}", "    my($s1, $s2) = @$lst;\n\
    \    my($cnt1, $cnt2) = (0, 0);\n    for my $c (split //, $s1) {\n        $cnt1++\
    \ if $c eq '(';\n        $cnt1-- if $c eq ')';\n        return 'No' if $cnt1 <\
    \ 0;\n    }\n    for my $c (split //, $s2) {\n        $cnt2++ if $c eq '(';\n\
    \        $cnt2-- if $c eq ')';\n        return 'No' if $cnt2 < 0;\n    }\n   \
    \ return 'Yes' if $cnt1 == 0 && $cnt2 == 0;\n    return 'No';\n}", "    my $str1\
    \ = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str = $str1 . $str2;\n    my\
    \ $count = 0;\n    for my $c (split //, $str) {\n        if ($c eq '(') {\n  \
    \          $count++;\n        }\n        elsif ($c eq ')') {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return 'No';\n        }\n \
    \   }\n    return 'Yes';\n}", "    my($l, $r) = @$lst;\n    my($l_open, $l_close)\
    \ = (0, 0);\n    my($r_open, $r_close) = (0, 0);\n    for my $c (split //, $l)\
    \ {\n        if ($c eq '(') {\n            $l_open++;\n        } else {\n    \
    \        $l_close++;\n        }\n    }\n    for my $c (split //, $r) {\n     \
    \   if ($c eq '(') {\n            $r_open++;\n        } else {\n            $r_close++;\n\
    \        }\n    }\n    if ($l_open == $l_close && $r_open == $r_close) {\n   \
    \     return 'Yes';\n    }\n    if ($l_open == $l_close + 1 && $r_open == $r_close)\
    \ {\n        return 'Yes';\n    }\n    if ($l_open == $l_close && $r_open == $r_close\
    \ + 1) {\n        return 'Yes';\n    }\n    return 'No';\n}", "    my $s1 = $lst->[0];\n\
    \    my $s2 = $lst->[1];\n    my $s = $s1 . $s2;\n    my $cnt = 0;\n    for my\
    \ $c (split //, $s) {\n        if ($c eq '(') {\n            $cnt++;\n       \
    \ } elsif ($c eq ')') {\n            $cnt--;\n        }\n        if ($cnt < 0)\
    \ {\n            return 'No';\n        }\n    }\n    if ($cnt == 0) {\n      \
    \  return 'Yes';\n    } else {\n        return 'No';\n    }\n}", "    my($s1,\
    \ $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n    for my $c (split //, $s1) {\n\
    \        $c1++ if $c eq '(';\n        $c1-- if $c eq ')';\n        return 'No'\
    \ if $c1 < 0;\n    }\n    for my $c (split //, $s2) {\n        $c2++ if $c eq\
    \ '(';\n        $c2-- if $c eq ')';\n        return 'No' if $c2 < 0;\n    }\n\
    \    return 'Yes' if $c1 == $c2;\n    return 'No';\n}", "    my($s1, $s2) = @$lst;\n\
    \    my($c1, $c2) = (0, 0);\n    for my $c (split //, $s1) {\n        $c1++ if\
    \ $c eq '(';\n        $c1-- if $c eq ')';\n        return 'No' if $c1 < 0;\n \
    \   }\n    for my $c (split //, $s2) {\n        $c2++ if $c eq '(';\n        $c2--\
    \ if $c eq ')';\n        return 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1\
    \ == $c2;\n    return 'No';\n}", "    my($a, $b) = @$lst;\n    my $n = 0;\n  \
    \  for my $c (split //, $a) {\n        $n++ if $c eq '(';\n        $n-- if $c\
    \ eq ')';\n        return 'No' if $n < 0;\n    }\n    for my $c (split //, $b)\
    \ {\n        $n++ if $c eq '(';\n        $n-- if $c eq ')';\n        return 'No'\
    \ if $n < 0;\n    }\n    return 'Yes';\n}", "    my($a, $b) = @$lst;\n    my($count)\
    \ = 0;\n    for my $c (split //, $a) {\n        $count++ if $c eq '(';\n     \
    \   $count-- if $c eq ')';\n        return 'No' if $count < 0;\n    }\n    for\
    \ my $c (split //, $b) {\n        $count++ if $c eq '(';\n        $count-- if\
    \ $c eq ')';\n        return 'No' if $count < 0;\n    }\n    return 'Yes';\n}",
  "    my($s1, $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n    for my $c (split //,\
    \ $s1) {\n        $c1++ if $c eq '(';\n        $c1-- if $c eq ')';\n        return\
    \ 'No' if $c1 < 0;\n    }\n    for my $c (split //, $s2) {\n        $c2++ if $c\
    \ eq '(';\n        $c2-- if $c eq ')';\n        return 'No' if $c2 < 0;\n    }\n\
    \    return 'Yes' if $c1 == $c2;\n    return 'No';\n}", "    my($left, $right)\
    \ = @$lst;\n    my($left_count, $right_count) = (0, 0);\n    for my $c (split\
    \ //, $left) {\n        $left_count++ if $c eq '(';\n        $left_count-- if\
    \ $c eq ')';\n        return 'No' if $left_count < 0;\n    }\n    for my $c (split\
    \ //, $right) {\n        $right_count++ if $c eq '(';\n        $right_count--\
    \ if $c eq ')';\n        return 'No' if $right_count < 0;\n    }\n    return 'Yes'\
    \ if $left_count == $right_count;\n    return 'No';\n}", "    my($str1, $str2)\
    \ = @$lst;\n    my($cnt1, $cnt2) = (0, 0);\n    for my $ch (split //, $str1) {\n\
    \        $cnt1++ if $ch eq '(';\n        $cnt1-- if $ch eq ')';\n        return\
    \ 'No' if $cnt1 < 0;\n    }\n    for my $ch (split //, $str2) {\n        $cnt2++\
    \ if $ch eq '(';\n        $cnt2-- if $ch eq ')';\n        return 'No' if $cnt2\
    \ < 0;\n    }\n    return 'Yes' if $cnt1 == $cnt2;\n    return 'No';\n}", "  \
    \  my $s = join('', @$lst);\n    my $c = 0;\n    for my $c (split //, $s) {\n\
    \        $c == '(' ? $c++ : $c--;\n        return 'No' if $c < 0;\n    }\n   \
    \ return 'Yes';\n}", "    my($a, $b) = @$lst;\n    my($cnt) = 0;\n    for my $c\
    \ (split(//, $a)) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n\
    \        return 'No' if $cnt < 0;\n    }\n    for my $c (split(//, $b)) {\n  \
    \      $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No'\
    \ if $cnt < 0;\n    }\n    return 'Yes';\n}", "    my($s1, $s2) = @$lst;\n   \
    \ my($c1, $c2) = (0, 0);\n    for my $c (split //, $s1) {\n        $c1++ if $c\
    \ eq '(';\n        $c1-- if $c eq ')';\n        return 'No' if $c1 < 0;\n    }\n\
    \    for my $c (split //, $s2) {\n        $c2++ if $c eq '(';\n        $c2-- if\
    \ $c eq ')';\n        return 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1\
    \ == $c2;\n    return 'No';\n}", "    my $str = join('', @$lst);\n    my $cnt\
    \ = 0;\n    for my $c (split //, $str) {\n        if ($c eq '(') {\n         \
    \   $cnt++;\n        } else {\n            $cnt--;\n        }\n        return\
    \ 'No' if $cnt < 0;\n    }\n    return 'Yes';\n}", "    my($left, $right) = @$lst;\n\
    \    my($left_count, $right_count) = (0, 0);\n    foreach my $c (split //, $left)\
    \ {\n        $left_count++ if $c eq '(';\n        $left_count-- if $c eq ')';\n\
    \        return 'No' if $left_count < 0;\n    }\n    foreach my $c (split //,\
    \ $right) {\n        $right_count++ if $c eq '(';\n        $right_count-- if $c\
    \ eq ')';\n        return 'No' if $right_count < 0;\n    }\n    return 'Yes' if\
    \ $left_count == $right_count;\n    return 'No';\n}", "    my($a, $b) = @$lst;\n\
    \    my($i, $j, $k, $n, $m, $cnt);\n    $n = length($a);\n    $m = length($b);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $cnt = 0;\n        for ($j = 0; $j\
    \ < $i; $j++) {\n            $cnt++ if substr($a, $j, 1) eq '(';\n           \
    \ $cnt-- if substr($a, $j, 1) eq ')';\n        }\n        for ($k = 0; $k < $m;\
    \ $k++) {\n            $cnt++ if substr($b, $k, 1) eq '(';\n            $cnt--\
    \ if substr($b, $k, 1) eq ')';\n            return 'Yes' if $cnt == 0;\n     \
    \   }\n    }\n    return 'No';\n}", "    my $str1 = $lst->[0];\n    my $str2 =\
    \ $lst->[1];\n    my $cnt1 = 0;\n    my $cnt2 = 0;\n    for my $c (split //, $str1)\
    \ {\n        if ($c eq '(') {\n            $cnt1++;\n        } else {\n      \
    \      $cnt1--;\n        }\n        if ($cnt1 < 0) {\n            return 'No';\n\
    \        }\n    }\n    for my $c (split //, $str2) {\n        if ($c eq '(') {\n\
    \            $cnt2++;\n        } else {\n            $cnt2--;\n        }\n   \
    \     if ($cnt2 < 0) {\n            return 'No';\n        }\n    }\n    if ($cnt1\
    \ == 0 && $cnt2 == 0) {\n        return 'Yes';\n    }\n    if ($cnt1 == 0 && $cnt2\
    \ > 0) {\n        return 'Yes';\n    }\n    if ($cnt1 > 0 && $cnt2 == 0) {\n \
    \       return 'Yes';\n    }\n    return 'No';\n}", "    my $s = join('', @$lst);\n\
    \    my $c = 0;\n    for my $c (split //, $s) {\n        if ($c eq '(') {\n  \
    \          $c++;\n        } else {\n            $c--;\n        }\n        return\
    \ 'No' if $c < 0;\n    }\n    return 'Yes';\n}", "    my($a, $b) = @$lst;\n  \
    \  my($n, $m) = (0, 0);\n    for my $c (split //, $a) {\n        $n++ if $c eq\
    \ '(';\n        $n-- if $c eq ')';\n        return 'No' if $n < 0;\n    }\n  \
    \  for my $c (split //, $b) {\n        $m++ if $c eq '(';\n        $m-- if $c\
    \ eq ')';\n        return 'No' if $m < 0;\n    }\n    return 'Yes' if $n == $m;\n\
    \    return 'No';\n}", "    my $s1 = $lst->[0];\n    my $s2 = $lst->[1];\n   \
    \ my $s = $s1 . $s2;\n    my $cnt = 0;\n    for my $c (split //, $s) {\n     \
    \   if ($c eq '(') {\n            $cnt++;\n        } else {\n            $cnt--;\n\
    \        }\n        if ($cnt < 0) {\n            return 'No';\n        }\n   \
    \ }\n    return $cnt == 0 ? 'Yes' : 'No';\n}", "    my($a, $b) = @$lst;\n    my($cnt)\
    \ = 0;\n    for my $c (split //, $a) {\n        $cnt++ if $c eq '(';\n       \
    \ $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    for my $c\
    \ (split //, $b) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n\
    \        return 'No' if $cnt < 0;\n    }\n    return 'Yes' if $cnt == 0;\n   \
    \ return 'No';\n}", "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n  \
    \  my $str = $str1 . $str2;\n    my $count = 0;\n    for my $c (split //, $str)\
    \ {\n        if ($c eq '(') {\n            $count++;\n        } elsif ($c eq ')')\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return 'No';\n        }\n    }\n    return $count == 0 ? 'Yes' : 'No';\n}",
  "    my $s1 = $lst->[0];\n    my $s2 = $lst->[1];\n    my $s = $s1 . $s2;\n    my\
    \ $cnt = 0;\n    for my $c (split //, $s) {\n        if ($c eq '(') {\n      \
    \      $cnt++;\n        } else {\n            $cnt--;\n        }\n        if ($cnt\
    \ < 0) {\n            return 'No';\n        }\n    }\n    if ($cnt == 0) {\n \
    \       return 'Yes';\n    } else {\n        return 'No';\n    }\n}", "    my($s1,\
    \ $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n    for my $c (split //, $s1) {\n\
    \        $c1++ if $c eq '(';\n        $c1-- if $c eq ')';\n        return 'No'\
    \ if $c1 < 0;\n    }\n    for my $c (split //, $s2) {\n        $c2++ if $c eq\
    \ '(';\n        $c2-- if $c eq ')';\n        return 'No' if $c2 < 0;\n    }\n\
    \    return 'Yes' if $c1 == $c2;\n    return 'No';\n}", "    my($s1, $s2) = @$lst;\n\
    \    my($c1, $c2) = (0, 0);\n    for my $c (split //, $s1) {\n        $c1++ if\
    \ $c eq '(';\n        $c1-- if $c eq ')';\n        return 'No' if $c1 < 0;\n \
    \   }\n    for my $c (split //, $s2) {\n        $c2++ if $c eq '(';\n        $c2--\
    \ if $c eq ')';\n        return 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1\
    \ == $c2;\n    return 'No';\n}", "    my $s = join('', @$lst);\n    my $c = 0;\n\
    \    for my $c (split //, $s) {\n        $c++ if $c eq '(';\n        $c-- if $c\
    \ eq ')';\n        return 'No' if $c < 0;\n    }\n    return 'Yes';\n}", "   \
    \ my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str = $str1 . $str2;\n\
    \    my $cnt = 0;\n    for my $c (split //, $str) {\n        if ($c eq '(') {\n\
    \            $cnt++;\n        } elsif ($c eq ')') {\n            $cnt--;\n   \
    \     }\n        if ($cnt < 0) {\n            return 'No';\n        }\n    }\n\
    \    if ($cnt == 0) {\n        return 'Yes';\n    } else {\n        return 'No';\n\
    \    }\n}", "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str\
    \ = $str1 . $str2;\n    my $count = 0;\n    for my $c (split //, $str) {\n   \
    \     if ($c eq '(') {\n            $count++;\n        } elsif ($c eq ')') {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ 'No';\n        }\n    }\n    return 'Yes';\n}", "    my($s1, $s2) = @$lst;\n\
    \    my($c1, $c2) = (0, 0);\n    for my $c (split //, $s1) {\n        $c1++ if\
    \ $c eq '(';\n        $c1-- if $c eq ')';\n        return 'No' if $c1 < 0;\n \
    \   }\n    for my $c (split //, $s2) {\n        $c2++ if $c eq '(';\n        $c2--\
    \ if $c eq ')';\n        return 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1\
    \ == $c2;\n    return 'No';\n}", "    my($s1, $s2) = @$lst;\n    my($c1, $c2)\
    \ = (0, 0);\n    for my $c (split //, $s1) {\n        $c1++ if $c eq '(';\n  \
    \      $c1-- if $c eq ')';\n        return 'No' if $c1 < 0;\n    }\n    for my\
    \ $c (split //, $s2) {\n        $c2++ if $c eq '(';\n        $c2-- if $c eq ')';\n\
    \        return 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1 == $c2;\n   \
    \ return 'No';\n}", "    my($left, $right) = @$lst;\n    my($left_count, $right_count)\
    \ = (0, 0);\n    my($i, $j);\n    for ($i = 0; $i < length($left); $i++) {\n \
    \       $left_count++ if substr($left, $i, 1) eq '(';\n        $left_count-- if\
    \ substr($left, $i, 1) eq ')';\n        return 'No' if $left_count < 0;\n    }\n\
    \    for ($j = 0; $j < length($right); $j++) {\n        $right_count++ if substr($right,\
    \ $j, 1) eq '(';\n        $right_count-- if substr($right, $j, 1) eq ')';\n  \
    \      return 'No' if $right_count < 0;\n    }\n    return 'Yes' if $left_count\
    \ == $right_count;\n    return 'No';\n}", "    my $str = join('', @$lst);\n  \
    \  my $cnt = 0;\n    for my $c (split(//, $str)) {\n        if ($c eq '(') {\n\
    \            $cnt++;\n        } elsif ($c eq ')') {\n            $cnt--;\n   \
    \     }\n        return 'No' if $cnt < 0;\n    }\n    return 'Yes';\n}", "   \
    \ my($l, $r) = @$lst;\n    my($l_open, $l_close) = (0, 0);\n    my($r_open, $r_close)\
    \ = (0, 0);\n    for my $c (split //, $l) {\n        if ($c eq '(') {\n      \
    \      $l_open++;\n        } else {\n            $l_close++;\n        }\n    }\n\
    \    for my $c (split //, $r) {\n        if ($c eq '(') {\n            $r_open++;\n\
    \        } else {\n            $r_close++;\n        }\n    }\n    if ($l_open\
    \ == $l_close && $r_open == $r_close) {\n        return 'Yes';\n    }\n    if\
    \ ($l_open == $l_close + 1 && $r_open == $r_close) {\n        return 'Yes';\n\
    \    }\n    if ($l_open == $l_close && $r_open == $r_close + 1) {\n        return\
    \ 'Yes';\n    }\n    return 'No';\n}", "    my $str1 = $lst->[0];\n    my $str2\
    \ = $lst->[1];\n    my $str = $str1 . $str2;\n    my $count = 0;\n    for my $c\
    \ (split //, $str) {\n        if ($c eq '(') {\n            $count++;\n      \
    \  } elsif ($c eq ')') {\n            $count--;\n        }\n        if ($count\
    \ < 0) {\n            return 'No';\n        }\n    }\n    if ($count == 0) {\n\
    \        return 'Yes';\n    } else {\n        return 'No';\n    }\n}", "    my($s1,\
    \ $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n    for my $c (split //, $s1) {\n\
    \        $c1++ if $c eq '(';\n        $c1-- if $c eq ')';\n        return 'No'\
    \ if $c1 < 0;\n    }\n    for my $c (split //, $s2) {\n        $c2++ if $c eq\
    \ '(';\n        $c2-- if $c eq ')';\n        return 'No' if $c2 < 0;\n    }\n\
    \    return 'Yes' if $c1 == $c2;\n    return 'No';\n}", "    my($left, $right)\
    \ = @$lst;\n    my($left_count, $right_count) = (0, 0);\n    for my $c (split\
    \ //, $left) {\n        $left_count++ if $c eq '(';\n        $left_count-- if\
    \ $c eq ')';\n        return 'No' if $left_count < 0;\n    }\n    for my $c (split\
    \ //, $right) {\n        $right_count++ if $c eq '(';\n        $right_count--\
    \ if $c eq ')';\n        return 'No' if $right_count < 0;\n    }\n    return 'Yes'\
    \ if $left_count == $right_count;\n    return 'No';\n}", "    my($s1, $s2) = @$lst;\n\
    \    my($c1, $c2) = (0, 0);\n    for my $c (split //, $s1) {\n        $c1++ if\
    \ $c eq '(';\n        $c1-- if $c eq ')';\n        return 'No' if $c1 < 0;\n \
    \   }\n    for my $c (split //, $s2) {\n        $c2++ if $c eq '(';\n        $c2--\
    \ if $c eq ')';\n        return 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1\
    \ == $c2;\n    return 'No';\n}", "    my($left, $right) = @$lst;\n    my($left_parens,\
    \ $right_parens) = (0, 0);\n    for my $c (split //, $left) {\n        if ($c\
    \ eq '(') {\n            $left_parens++;\n        } else {\n            $left_parens--;\n\
    \        }\n    }\n    for my $c (split //, $right) {\n        if ($c eq '(')\
    \ {\n            $right_parens++;\n        } else {\n            $right_parens--;\n\
    \        }\n    }\n    if ($left_parens == 0 && $right_parens == 0) {\n      \
    \  return 'Yes';\n    }\n    if ($left_parens > 0 && $right_parens < 0) {\n  \
    \      return 'Yes';\n    }\n    if ($left_parens < 0 && $right_parens > 0) {\n\
    \        return 'Yes';\n    }\n    return 'No';\n}", "    my($s1, $s2) = @$lst;\n\
    \    my($c1, $c2) = (0, 0);\n    for my $c (split //, $s1) {\n        $c1++ if\
    \ $c eq '(';\n        $c1-- if $c eq ')';\n        return 'No' if $c1 < 0;\n \
    \   }\n    for my $c (split //, $s2) {\n        $c2++ if $c eq '(';\n        $c2--\
    \ if $c eq ')';\n        return 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1\
    \ == $c2;\n    return 'No';\n}", "    my($left, $right) = @$lst;\n    my($n_left,\
    \ $n_right) = (0, 0);\n    $n_left++ while $left =~ /\\(/g;\n    $n_right++ while\
    \ $right =~ /\\)/g;\n    return $n_left == $n_right ? 'Yes' : 'No';\n}", "   \
    \ my $s1 = $lst->[0];\n    my $s2 = $lst->[1];\n    my $s = $s1 . $s2;\n    my\
    \ $n = length($s);\n    my $cnt = 0;\n    for (my $i = 0; $i < $n; $i++) {\n \
    \       if (substr($s, $i, 1) eq '(') {\n            $cnt++;\n        } else {\n\
    \            $cnt--;\n        }\n        if ($cnt < 0) {\n            return 'No';\n\
    \        }\n    }\n    if ($cnt == 0) {\n        return 'Yes';\n    } else {\n\
    \        return 'No';\n    }\n}", "    my $str = join('', @$lst);\n    my $cnt\
    \ = 0;\n    for my $c (split(//, $str)) {\n        if ($c eq '(') {\n        \
    \    $cnt++;\n        } elsif ($c eq ')') {\n            $cnt--;\n        }\n\
    \        return 'No' if $cnt < 0;\n    }\n    return 'Yes';\n}", "    my $str1\
    \ = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str = $str1 . $str2;\n    my\
    \ $count = 0;\n    for my $c (split //, $str) {\n        if ($c eq '(') {\n  \
    \          $count++;\n        } elsif ($c eq ')') {\n            $count--;\n \
    \       }\n        return 'No' if $count < 0;\n    }\n    return 'Yes';\n}", " \
    \   my($a, $b) = @$lst;\n    my($cnt) = 0;\n    for my $c (split //, $a) {\n \
    \       $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No'\
    \ if $cnt < 0;\n    }\n    for my $c (split //, $b) {\n        $cnt++ if $c eq\
    \ '(';\n        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n\
    \    return 'Yes' if $cnt == 0;\n    return 'No';\n}", "    my($left, $right)\
    \ = @$lst;\n    my($l, $r) = (0, 0);\n    for my $c (split //, $left) {\n    \
    \    $l++ if $c eq '(';\n        $l-- if $c eq ')';\n        return 'No' if $l\
    \ < 0;\n    }\n    for my $c (split //, $right) {\n        $r++ if $c eq '(';\n\
    \        $r-- if $c eq ')';\n        return 'No' if $r < 0;\n    }\n    return\
    \ 'Yes' if $l == $r;\n    return 'No';\n}", "    my($s1, $s2) = @$lst;\n    my\
    \ $s = $s1 . $s2;\n    my $cnt = 0;\n    for my $c (split //, $s) {\n        if\
    \ ($c eq '(') {\n            $cnt++;\n        } elsif ($c eq ')') {\n        \
    \    $cnt--;\n        }\n        return 'No' if $cnt < 0;\n    }\n    return 'Yes';\n\
    }", "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str = $str1\
    \ . $str2;\n    my $cnt = 0;\n    for my $c (split //, $str) {\n        $cnt++\
    \ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n\
    \    }\n    return 'Yes';\n}", "    my($s1, $s2) = @$lst;\n    my($c1, $c2) =\
    \ (0, 0);\n    for my $c (split //, $s1) {\n        $c1++ if $c eq '(';\n    \
    \    $c1-- if $c eq ')';\n        return 'No' if $c1 < 0;\n    }\n    for my $c\
    \ (split //, $s2) {\n        $c2++ if $c eq '(';\n        $c2-- if $c eq ')';\n\
    \        return 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1 == $c2;\n   \
    \ return 'No';\n}", "    my($left, $right) = @$lst;\n    my($left_count, $right_count)\
    \ = (0, 0);\n    my($i, $j);\n    for ($i = 0; $i < length($left); $i++) {\n \
    \       $left_count++ if substr($left, $i, 1) eq '(';\n        $left_count-- if\
    \ substr($left, $i, 1) eq ')';\n        return 'No' if $left_count < 0;\n    }\n\
    \    for ($j = 0; $j < length($right); $j++) {\n        $right_count++ if substr($right,\
    \ $j, 1) eq '(';\n        $right_count-- if substr($right, $j, 1) eq ')';\n  \
    \      return 'No' if $right_count < 0;\n    }\n    return 'Yes' if $left_count\
    \ == $right_count;\n    return 'No';\n}", "    my($a, $b) = @$lst;\n    my $n\
    \ = 0;\n    for my $c (split '', $a) {\n        $n++ if $c eq '(';\n        $n--\
    \ if $c eq ')';\n        return 'No' if $n < 0;\n    }\n    for my $c (split '',\
    \ $b) {\n        $n++ if $c eq '(';\n        $n-- if $c eq ')';\n        return\
    \ 'No' if $n < 0;\n    }\n    return 'Yes' if $n == 0;\n    return 'No';\n}",
  "    my $s1 = $lst->[0];\n    my $s2 = $lst->[1];\n    my $s = $s1 . $s2;\n    my\
    \ $n = length($s);\n    my $cnt = 0;\n    for (my $i = 0; $i < $n; $i++) {\n \
    \       my $c = substr($s, $i, 1);\n        if ($c eq '(') {\n            $cnt++;\n\
    \        } else {\n            $cnt--;\n        }\n        if ($cnt < 0) {\n \
    \           return 'No';\n        }\n    }\n    if ($cnt == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}", "    my($s1, $s2) = @$lst;\n\
    \    my($cnt) = 0;\n    for my $c (split //, $s1) {\n        $cnt++ if $c eq '(';\n\
    \        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    for\
    \ my $c (split //, $s2) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c\
    \ eq ')';\n        return 'No' if $cnt < 0;\n    }\n    return 'Yes' if $cnt ==\
    \ 0;\n    return 'No';\n}", "    my($l, $r) = @$lst;\n    my($l_open, $l_close)\
    \ = (0, 0);\n    my($r_open, $r_close) = (0, 0);\n    for my $c (split //, $l)\
    \ {\n        if ($c eq '(') {\n            $l_open++;\n        } else {\n    \
    \        $l_close++;\n        }\n    }\n    for my $c (split //, $r) {\n     \
    \   if ($c eq '(') {\n            $r_open++;\n        } else {\n            $r_close++;\n\
    \        }\n    }\n    if ($l_open == $l_close and $r_open == $r_close) {\n  \
    \      return 'Yes';\n    }\n    if ($l_open == $l_close and $r_open > $r_close)\
    \ {\n        return 'Yes';\n    }\n    if ($l_open > $l_close and $r_open == $r_close)\
    \ {\n        return 'Yes';\n    }\n    return 'No';\n}", "    my($a, $b) = @$lst;\n\
    \    my($cnt) = 0;\n    for my $c (split //, $a) {\n        $cnt++ if $c eq '(';\n\
    \        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    for\
    \ my $c (split //, $b) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq\
    \ ')';\n        return 'No' if $cnt < 0;\n    }\n    return 'Yes' if $cnt == 0;\n\
    \    return 'No';\n}", "    my($left, $right) = @$lst;\n    my($left_cnt, $right_cnt)\
    \ = (0, 0);\n    for my $c (split //, $left) {\n        $left_cnt++ if $c eq '(';\n\
    \        $left_cnt-- if $c eq ')';\n    }\n    for my $c (split //, $right) {\n\
    \        $right_cnt++ if $c eq '(';\n        $right_cnt-- if $c eq ')';\n    }\n\
    \    return $left_cnt == 0 && $right_cnt == 0 ? 'Yes' : 'No';\n}", "    my($l,\
    \ $r) = @$lst;\n    my($cnt) = 0;\n    for my $c (split //, $l) {\n        $cnt++\
    \ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n\
    \    }\n    for my $c (split //, $r) {\n        $cnt++ if $c eq '(';\n       \
    \ $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    return 'Yes'\
    \ if $cnt == 0;\n    return 'No';\n}", "    my $s = join('', @$lst);\n    my $c\
    \ = 0;\n    for my $c (split //, $s) {\n        $c++ if $c eq '(';\n        $c--\
    \ if $c eq ')';\n        return 'No' if $c < 0;\n    }\n    return 'Yes';\n}",
  "    my $str = join('', @$lst);\n    my $cnt = 0;\n    for my $c (split //, $str)\
    \ {\n        if ($c eq '(') {\n            $cnt++;\n        } else {\n       \
    \     $cnt--;\n        }\n        return 'No' if $cnt < 0;\n    }\n    return\
    \ 'Yes';\n}", "    my($a, $b) = @$lst;\n    my $cnt = 0;\n    for my $c (split\
    \ //, $a) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n    \
    \    return 'No' if $cnt < 0;\n    }\n    for my $c (split //, $b) {\n       \
    \ $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No' if $cnt\
    \ < 0;\n    }\n    return 'Yes' if $cnt == 0;\n    return 'No';\n}", "    my $str1\
    \ = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str1_good = is_good($str1);\n\
    \    my $str2_good = is_good($str2);\n    my $str1_str2_good = is_good($str1 .\
    \ $str2);\n    my $str2_str1_good = is_good($str2 . $str1);\n    if ($str1_good\
    \ && $str2_good) {\n        return 'Yes';\n    }\n    if ($str1_str2_good || $str2_str1_good)\
    \ {\n        return 'Yes';\n    }\n    return 'No';\n}", "    my($a, $b) = @$lst;\n\
    \    my $a_cnt = $a =~ tr/\\(/\\(/;\n    my $b_cnt = $b =~ tr/\\(/\\(/;\n    my\
    \ $a_rev = reverse $a;\n    $a_rev =~ tr/\\(/\\)/;\n    my $b_rev = reverse $b;\n\
    \    $b_rev =~ tr/\\(/\\)/;\n    if ($a_cnt == $b_cnt) {\n        return 'Yes';\n\
    \    }\n    if ($a_cnt == $b_rev) {\n        return 'Yes';\n    }\n    if ($a_rev\
    \ == $b_cnt) {\n        return 'Yes';\n    }\n    return 'No';\n}", "    my($a,\
    \ $b) = @$lst;\n    my $c = $a . $b;\n    my $n = 0;\n    for my $c (split //,\
    \ $c) {\n        if ($c eq '(') {\n            $n++;\n        } elsif ($c eq ')')\
    \ {\n            $n--;\n        }\n        return 'No' if $n < 0;\n    }\n   \
    \ return 'Yes';\n}", "    my $s1 = $lst->[0];\n    my $s2 = $lst->[1];\n    my\
    \ $s = $s1 . $s2;\n    my $n = length($s);\n    my $cnt = 0;\n    for (my $i =\
    \ 0; $i < $n; $i++) {\n        if (substr($s, $i, 1) eq '(') {\n            $cnt++;\n\
    \        } else {\n            $cnt--;\n        }\n        if ($cnt < 0) {\n \
    \           return 'No';\n        }\n    }\n    if ($cnt == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}", "    my($a, $b) = @$lst;\n\
    \    my($cnt) = 0;\n    for my $c (split //, $a) {\n        $cnt++ if $c eq '(';\n\
    \        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    for\
    \ my $c (split //, $b) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq\
    \ ')';\n        return 'No' if $cnt < 0;\n    }\n    return 'Yes' if $cnt == 0;\n\
    \    return 'No';\n}", "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n\
    \    my $str = $str1 . $str2;\n    my $open = 0;\n    for my $c (split //, $str)\
    \ {\n        if ($c eq '(') {\n            $open++;\n        } elsif ($c eq ')')\
    \ {\n            $open--;\n        }\n        return 'No' if $open < 0;\n    }\n\
    \    return 'Yes';\n}", "    my($left, $right) = @$lst;\n    my $left_parens =\
    \ () = $left =~ /\\(/g;\n    my $right_parens = () = $right =~ /\\)/g;\n    return\
    \ $left_parens == $right_parens ? 'Yes' : 'No';\n}", "    my $str1 = $lst->[0];\n\
    \    my $str2 = $lst->[1];\n    my $str = $str1 . $str2;\n    my $count = 0;\n\
    \    for my $c (split //, $str) {\n        if ($c eq '(') {\n            $count++;\n\
    \        } elsif ($c eq ')') {\n            $count--;\n        }\n        return\
    \ 'No' if $count < 0;\n    }\n    return 'Yes';\n}", "    my $str1 = $lst->[0];\n\
    \    my $str2 = $lst->[1];\n    my $str = $str1 . $str2;\n    my $count = 0;\n\
    \    for my $c (split //, $str) {\n        if ($c eq '(') {\n            $count++;\n\
    \        } elsif ($c eq ')') {\n            $count--;\n        }\n        if ($count\
    \ < 0) {\n            return 'No';\n        }\n    }\n    if ($count == 0) {\n\
    \        return 'Yes';\n    } else {\n        return 'No';\n    }\n}", "    my($left,\
    \ $right) = @$lst;\n    my($l_count, $r_count) = (0, 0);\n    for my $c (split\
    \ //, $left) {\n        $l_count++ if $c eq '(';\n        $l_count-- if $c eq\
    \ ')';\n    }\n    for my $c (split //, $right) {\n        $r_count++ if $c eq\
    \ '(';\n        $r_count-- if $c eq ')';\n    }\n    return $l_count + $r_count\
    \ == 0 ? 'Yes' : 'No';\n}", "    my($left, $right) = @$lst;\n    my($left_parens,\
    \ $right_parens) = (0, 0);\n    for my $c (split //, $left) {\n        $left_parens++\
    \ if $c eq '(';\n        $left_parens-- if $c eq ')';\n    }\n    for my $c (split\
    \ //, $right) {\n        $right_parens++ if $c eq '(';\n        $right_parens--\
    \ if $c eq ')';\n    }\n    return $left_parens + $right_parens == 0 ? 'Yes' :\
    \ 'No';\n}", "    my($a, $b) = @$lst;\n    my($cnt) = 0;\n    for my $c (split\
    \ //, $a) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n    \
    \    return 'No' if $cnt < 0;\n    }\n    for my $c (split //, $b) {\n       \
    \ $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No' if $cnt\
    \ < 0;\n    }\n    return 'Yes' if $cnt == 0;\n    return 'No';\n}", "    my($a,\
    \ $b) = @$lst;\n    my($cnt) = 0;\n    for my $c (split //, $a) {\n        $cnt++\
    \ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n\
    \    }\n    for my $c (split //, $b) {\n        $cnt++ if $c eq '(';\n       \
    \ $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    return 'Yes'\
    \ if $cnt == 0;\n    return 'No';\n}", "    my($a, $b) = @$lst;\n    my($cnt)\
    \ = 0;\n    for my $c (split //, $a) {\n        $cnt++ if $c eq '(';\n       \
    \ $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    for my $c\
    \ (split //, $b) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n\
    \        return 'No' if $cnt < 0;\n    }\n    return 'Yes' if $cnt == 0;\n   \
    \ return 'No';\n}", "    my $l = $lst->[0];\n    my $r = $lst->[1];\n    my $l_cnt\
    \ = 0;\n    my $r_cnt = 0;\n    for my $c (split //, $l) {\n        $l_cnt++ if\
    \ $c eq '(';\n        $l_cnt-- if $c eq ')';\n    }\n    for my $c (split //,\
    \ $r) {\n        $r_cnt++ if $c eq '(';\n        $r_cnt-- if $c eq ')';\n    }\n\
    \    return 'Yes' if $l_cnt == 0 && $r_cnt == 0;\n    return 'Yes' if $l_cnt ==\
    \ 1 && $r_cnt == -1;\n    return 'Yes' if $l_cnt == -1 && $r_cnt == 1;\n    return\
    \ 'No';\n}", "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str\
    \ = $str1 . $str2;\n    my $cnt = 0;\n    for my $c (split //, $str) {\n     \
    \   if ($c eq '(') {\n            $cnt++;\n        } elsif ($c eq ')') {\n   \
    \         $cnt--;\n        }\n        if ($cnt < 0) {\n            return 'No';\n\
    \        }\n    }\n    return 'Yes';\n}", "    my $s1 = $lst->[0];\n    my $s2\
    \ = $lst->[1];\n    my $s = $s1 . $s2;\n    my $cnt = 0;\n    for my $c (split\
    \ //, $s) {\n        if ($c eq '(') {\n            $cnt++;\n        } elsif ($c\
    \ eq ')') {\n            $cnt--;\n        }\n        return 'No' if $cnt < 0;\n\
    \    }\n    return 'Yes';\n}", "    my($left, $right) = @$lst;\n    my $left_count\
    \ = $left =~ tr/\\(/\\(/;\n    my $right_count = $right =~ tr/\\)/\\)/;\n    return\
    \ $left_count == $right_count ? 'Yes' : 'No';\n}", "    my $str1 = $lst->[0];\n\
    \    my $str2 = $lst->[1];\n    my $str = $str1 . $str2;\n    my $count = 0;\n\
    \    for my $c (split //, $str) {\n        if ($c eq '(') {\n            $count++;\n\
    \        }\n        elsif ($c eq ')') {\n            $count--;\n        }\n  \
    \      if ($count < 0) {\n            return 'No';\n        }\n    }\n    return\
    \ $count == 0 ? 'Yes' : 'No';\n}", "    my($a, $b) = @$lst;\n    my($cnt) = 0;\n\
    \    for my $c (split //, $a) {\n        $cnt++ if $c eq '(';\n        $cnt--\
    \ if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    for my $c (split\
    \ //, $b) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n    \
    \    return 'No' if $cnt < 0;\n    }\n    return 'Yes';\n}", "    my $str = join('',\
    \ @$lst);\n    my $cnt = 0;\n    for my $c (split //, $str) {\n        $cnt++\
    \ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n\
    \    }\n    return 'Yes';\n}", "    my($s1, $s2) = @$lst;\n    my($cnt) = 0;\n\
    \    for my $c (split //, $s1) {\n        $cnt++ if $c eq '(';\n        $cnt--\
    \ if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    for my $c (split\
    \ //, $s2) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n   \
    \     return 'No' if $cnt < 0;\n    }\n    return 'Yes' if $cnt == 0;\n    return\
    \ 'No';\n}", "    my($s1, $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n    my($i);\n\
    \    for($i = 0; $i < length($s1); $i++) {\n        $c1++ if substr($s1, $i, 1)\
    \ eq '(';\n        $c1-- if substr($s1, $i, 1) eq ')';\n        return 'No' if\
    \ $c1 < 0;\n    }\n    for($i = 0; $i < length($s2); $i++) {\n        $c2++ if\
    \ substr($s2, $i, 1) eq '(';\n        $c2-- if substr($s2, $i, 1) eq ')';\n  \
    \      return 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1 == $c2;\n    return\
    \ 'No';\n}", "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str\
    \ = $str1 . $str2;\n    my $cnt = 0;\n    for my $c (split //, $str) {\n     \
    \   if ($c eq '(') {\n            $cnt++;\n        } elsif ($c eq ')') {\n   \
    \         $cnt--;\n        }\n        if ($cnt < 0) {\n            return 'No';\n\
    \        }\n    }\n    return $cnt == 0 ? 'Yes' : 'No';\n}", "    my $s = join('',\
    \ @$lst);\n    my $c = 0;\n    for my $ch (split //, $s) {\n        if ($ch eq\
    \ '(') {\n            $c++;\n        } elsif ($ch eq ')') {\n            $c--;\n\
    \        }\n        if ($c < 0) {\n            return 'No';\n        }\n    }\n\
    \    return $c == 0 ? 'Yes' : 'No';\n}", "    my $str = join('', @$lst);\n   \
    \ my $cnt = 0;\n    for my $c (split //, $str) {\n        $cnt++ if $c eq '(';\n\
    \        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    return\
    \ 'Yes';\n}", "    my($a, $b) = @$lst;\n    my $cnt = 0;\n    for my $c (split\
    \ //, $a) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n    \
    \    return 'No' if $cnt < 0;\n    }\n    for my $c (split //, $b) {\n       \
    \ $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No' if $cnt\
    \ < 0;\n    }\n    return 'Yes' if $cnt == 0;\n    return 'No';\n}", "    my($a,\
    \ $b) = @$lst;\n    my($cnt) = 0;\n    for my $c (split //, $a) {\n        $cnt++\
    \ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n\
    \    }\n    for my $c (split //, $b) {\n        $cnt++ if $c eq '(';\n       \
    \ $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    return 'Yes';\n\
    }", "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str = $str1\
    \ . $str2;\n    my $count = 0;\n    for my $c (split //, $str) {\n        if ($c\
    \ eq '(') {\n            $count++;\n        } elsif ($c eq ')') {\n          \
    \  $count--;\n        }\n        if ($count < 0) {\n            return 'No';\n\
    \        }\n    }\n    return 'Yes';\n}", "    my($str1, $str2) = @$lst;\n   \
    \ my($cnt1, $cnt2) = (0, 0);\n    for my $c (split //, $str1) {\n        $cnt1++\
    \ if $c eq '(';\n        $cnt1-- if $c eq ')';\n        return 'No' if $cnt1 <\
    \ 0;\n    }\n    for my $c (split //, $str2) {\n        $cnt2++ if $c eq '(';\n\
    \        $cnt2-- if $c eq ')';\n        return 'No' if $cnt2 < 0;\n    }\n   \
    \ return 'Yes' if $cnt1 == 0 && $cnt2 == 0;\n    return 'No';\n}", "    my($a,\
    \ $b) = @$lst;\n    my $cnt = 0;\n    for my $c (split //, $a) {\n        $cnt++\
    \ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n\
    \    }\n    for my $c (split //, $b) {\n        $cnt++ if $c eq '(';\n       \
    \ $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    return 'Yes'\
    \ if $cnt == 0;\n    return 'No';\n}", "    my($left, $right) = @$lst;\n    my($left_count,\
    \ $right_count) = (0, 0);\n    for my $c (split //, $left) {\n        $left_count++\
    \ if $c eq '(';\n        $left_count-- if $c eq ')';\n        return 'No' if $left_count\
    \ < 0;\n    }\n    for my $c (split //, $right) {\n        $right_count++ if $c\
    \ eq '(';\n        $right_count-- if $c eq ')';\n        return 'No' if $right_count\
    \ < 0;\n    }\n    return 'Yes' if $left_count == $right_count;\n    return 'No';\n\
    }", "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str = $str1\
    \ . $str2;\n    my $count = 0;\n    for my $c (split //, $str) {\n        if ($c\
    \ eq '(') {\n            $count++;\n        } elsif ($c eq ')') {\n          \
    \  $count--;\n        }\n        if ($count < 0) {\n            return 'No';\n\
    \        }\n    }\n    return 'Yes';\n}", "    my($a, $b) = @$lst;\n    my($cnt)\
    \ = 0;\n    for my $c (split //, $a) {\n        $cnt++ if $c eq '(';\n       \
    \ $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    for my $c\
    \ (split //, $b) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n\
    \        return 'No' if $cnt < 0;\n    }\n    return 'Yes' if $cnt == 0;\n   \
    \ return 'No';\n}", "    my($s1, $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n \
    \   for my $c (split //, $s1) {\n        $c1++ if $c eq '(';\n        $c1-- if\
    \ $c eq ')';\n        return 'No' if $c1 < 0;\n    }\n    for my $c (split //,\
    \ $s2) {\n        $c2++ if $c eq '(';\n        $c2-- if $c eq ')';\n        return\
    \ 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1 == $c2;\n    return 'No';\n\
    }", "    my($left, $right) = @$lst;\n    my($left_count, $right_count) = (0, 0);\n\
    \    for my $c (split //, $left) {\n        $left_count++ if $c eq '(';\n    \
    \    $left_count-- if $c eq ')';\n        return 'No' if $left_count < 0;\n  \
    \  }\n    for my $c (split //, $right) {\n        $right_count++ if $c eq '(';\n\
    \        $right_count-- if $c eq ')';\n        return 'No' if $right_count < 0;\n\
    \    }\n    return 'Yes' if $left_count == $right_count;\n    return 'No';\n}",
  "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str = $str1 . $str2;\n\
    \    my $count = 0;\n    for my $c (split //, $str) {\n        if ($c eq '(')\
    \ {\n            $count++;\n        } elsif ($c eq ')') {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return 'No';\n        }\n \
    \   }\n    if ($count == 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}", "    my($a, $b) = @$lst;\n    my($n) = 0;\n    for my $c (split\
    \ //, $a) {\n        $n++ if $c eq '(';\n        $n-- if $c eq ')';\n        return\
    \ 'No' if $n < 0;\n    }\n    for my $c (split //, $b) {\n        $n++ if $c eq\
    \ '(';\n        $n-- if $c eq ')';\n        return 'No' if $n < 0;\n    }\n  \
    \  return 'Yes' if $n == 0;\n    return 'No';\n}", "    my($s1, $s2) = @$lst;\n\
    \    my $s = $s1 . $s2;\n    my $cnt = 0;\n    for my $c (split //, $s) {\n  \
    \      $cnt += $c eq '(' ? 1 : -1;\n        return 'No' if $cnt < 0;\n    }\n\
    \    return 'Yes';\n}", "    my($s1, $s2) = @$lst;\n    my($cnt) = 0;\n    for\
    \ my $c (split //, $s1) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c\
    \ eq ')';\n        return 'No' if $cnt < 0;\n    }\n    for my $c (split //, $s2)\
    \ {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return\
    \ 'No' if $cnt < 0;\n    }\n    return 'Yes' if $cnt == 0;\n    return 'No';\n\
    }", "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str = $str1\
    \ . $str2;\n    my $count = 0;\n    for my $c (split //, $str) {\n        if ($c\
    \ eq '(') {\n            $count++;\n        } elsif ($c eq ')') {\n          \
    \  $count--;\n        }\n        return 'No' if $count < 0;\n    }\n    return\
    \ 'Yes';\n}", "    my($left, $right) = @$lst;\n    my($left_count, $right_count)\
    \ = (0, 0);\n    for my $c (split //, $left) {\n        if ($c eq '(') {\n   \
    \         $left_count++;\n        } else {\n            $left_count--;\n     \
    \   }\n        return 'No' if $left_count < 0;\n    }\n    for my $c (split //,\
    \ $right) {\n        if ($c eq '(') {\n            $right_count++;\n        }\
    \ else {\n            $right_count--;\n        }\n        return 'No' if $right_count\
    \ < 0;\n    }\n    return 'Yes' if $left_count == $right_count;\n    return 'No';\n\
    }", "    my($s1, $s2) = @$lst;\n    my $s = $s1 . $s2;\n    my $cnt = 0;\n   \
    \ for my $c (split //, $s) {\n        $cnt++ if $c eq '(';\n        $cnt-- if\
    \ $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    return 'Yes';\n}",
  "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str1_good = is_good($str1);\n\
    \    my $str2_good = is_good($str2);\n    my $str1_str2_good = is_good($str1 .\
    \ $str2);\n    my $str2_str1_good = is_good($str2 . $str1);\n    if ($str1_good\
    \ && $str2_good) {\n        return 'Yes';\n    }\n    if ($str1_str2_good || $str2_str1_good)\
    \ {\n        return 'Yes';\n    }\n    return 'No';\n}", "    my($a, $b) = @$lst;\n\
    \    my($cnt) = 0;\n    for my $c (split //, $a) {\n        $cnt++ if $c eq '(';\n\
    \        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    for\
    \ my $c (split //, $b) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq\
    \ ')';\n        return 'No' if $cnt < 0;\n    }\n    return 'Yes';\n}", "    my($s1,\
    \ $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n    for my $c (split //, $s1) {\n\
    \        $c1++ if $c eq '(';\n        $c1-- if $c eq ')';\n        return 'No'\
    \ if $c1 < 0;\n    }\n    for my $c (split //, $s2) {\n        $c2++ if $c eq\
    \ '(';\n        $c2-- if $c eq ')';\n        return 'No' if $c2 < 0;\n    }\n\
    \    return 'Yes' if $c1 == $c2;\n    return 'No';\n}", "    my($a, $b) = @$lst;\n\
    \    my($cnt) = 0;\n    for my $c (split //, $a) {\n        $cnt++ if $c eq '(';\n\
    \        $cnt-- if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    for\
    \ my $c (split //, $b) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq\
    \ ')';\n        return 'No' if $cnt < 0;\n    }\n    return 'Yes';\n}", "    my\
    \ $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str3 = $str1 . $str2;\n\
    \    my $str4 = $str2 . $str1;\n    return 'Yes' if is_good($str3) || is_good($str4);\n\
    \    return 'No';\n}", "    my($s1, $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n\
    \    for my $c (split //, $s1) {\n        $c1++ if $c eq '(';\n        $c1-- if\
    \ $c eq ')';\n        return 'No' if $c1 < 0;\n    }\n    for my $c (split //,\
    \ $s2) {\n        $c2++ if $c eq '(';\n        $c2-- if $c eq ')';\n        return\
    \ 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1 == $c2;\n    return 'No';\n\
    }", "    my($a, $b) = @$lst;\n    my($n) = 0;\n    for my $c (split //, $a) {\n\
    \        if ($c eq '(') {\n            $n++;\n        } else {\n            $n--;\n\
    \        }\n    }\n    for my $c (split //, $b) {\n        if ($c eq '(') {\n\
    \            $n++;\n        } else {\n            $n--;\n        }\n    }\n  \
    \  return $n == 0 ? 'Yes' : 'No';\n}", "    my($a, $b) = @$lst;\n    my $cnt =\
    \ 0;\n    for my $c (split //, $a) {\n        $cnt++ if $c eq '(';\n        $cnt--\
    \ if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    for my $c (split\
    \ //, $b) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n    \
    \    return 'No' if $cnt < 0;\n    }\n    return 'Yes' if $cnt == 0;\n    return\
    \ 'No';\n}", "    my($s1, $s2) = @$lst;\n    my($c1, $c2) = (0, 0);\n    for my\
    \ $c (split //, $s1) {\n        $c1++ if $c eq '(';\n        $c1-- if $c eq ')';\n\
    \        return 'No' if $c1 < 0;\n    }\n    for my $c (split //, $s2) {\n   \
    \     $c2++ if $c eq '(';\n        $c2-- if $c eq ')';\n        return 'No' if\
    \ $c2 < 0;\n    }\n    return 'Yes' if $c1 == $c2;\n    return 'No';\n}", "  \
    \  my($a, $b) = @$lst;\n    my($count) = 0;\n    for my $c (split //, $a) {\n\
    \        $count++ if $c eq '(';\n        $count-- if $c eq ')';\n        return\
    \ 'No' if $count < 0;\n    }\n    for my $c (split //, $b) {\n        $count++\
    \ if $c eq '(';\n        $count-- if $c eq ')';\n        return 'No' if $count\
    \ < 0;\n    }\n    return 'Yes';\n}", "    my($s1, $s2) = @$lst;\n    my($c1,\
    \ $c2) = (0, 0);\n    for my $c (split //, $s1) {\n        $c1++ if $c eq '(';\n\
    \        $c1-- if $c eq ')';\n        return 'No' if $c1 < 0;\n    }\n    for\
    \ my $c (split //, $s2) {\n        $c2++ if $c eq '(';\n        $c2-- if $c eq\
    \ ')';\n        return 'No' if $c2 < 0;\n    }\n    return 'Yes' if $c1 == $c2;\n\
    \    return 'No';\n}", "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n\
    \    my $str = $str1 . $str2;\n    my $cnt = 0;\n    for my $c (split //, $str)\
    \ {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n        return\
    \ 'No' if $cnt < 0;\n    }\n    return 'Yes';\n}", "    my($a, $b) = @$lst;\n\
    \    my($a_open, $a_close) = (0, 0);\n    my($b_open, $b_close) = (0, 0);\n  \
    \  for my $c (split //, $a) {\n        if ($c eq '(') {\n            $a_open++;\n\
    \        } else {\n            $a_close++;\n        }\n    }\n    for my $c (split\
    \ //, $b) {\n        if ($c eq '(') {\n            $b_open++;\n        } else\
    \ {\n            $b_close++;\n        }\n    }\n    return 'Yes' if $a_open ==\
    \ $b_close;\n    return 'Yes' if $a_close == $b_open;\n    return 'No';\n}", " \
    \   my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str = $str1 . $str2;\n\
    \    my $cnt = 0;\n    for my $c (split //, $str) {\n        if ($c eq '(') {\n\
    \            $cnt++;\n        } elsif ($c eq ')') {\n            $cnt--;\n   \
    \     }\n        return 'No' if $cnt < 0;\n    }\n    return 'Yes';\n}", "   \
    \ my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n    my $str3 = $str1 . $str2;\n\
    \    my $str4 = $str2 . $str1;\n    return 'Yes' if is_good($str3) || is_good($str4);\n\
    \    return 'No';\n}", "    my($a, $b) = @$lst;\n    my $n = 0;\n    for my $c\
    \ (split //, $a) {\n        $n++ if $c eq '(';\n        $n-- if $c eq ')';\n \
    \       return 'No' if $n < 0;\n    }\n    for my $c (split //, $b) {\n      \
    \  $n++ if $c eq '(';\n        $n-- if $c eq ')';\n        return 'No' if $n <\
    \ 0;\n    }\n    return 'Yes';\n}", "    my($left, $right) = @$lst;\n    my($left_count,\
    \ $right_count) = (0, 0);\n    for my $c (split //, $left) {\n        $left_count++\
    \ if $c eq '(';\n        $left_count-- if $c eq ')';\n        return 'No' if $left_count\
    \ < 0;\n    }\n    for my $c (split //, $right) {\n        $right_count++ if $c\
    \ eq '(';\n        $right_count-- if $c eq ')';\n        return 'No' if $right_count\
    \ < 0;\n    }\n    return 'Yes' if $left_count == $right_count;\n    return 'No';\n\
    }", "    my $s = join('', @$lst);\n    my $c = 0;\n    for my $ch (split //, $s)\
    \ {\n        $c++ if $ch eq '(';\n        $c-- if $ch eq ')';\n        return\
    \ 'No' if $c < 0;\n    }\n    return 'Yes';\n}", "    my $str1 = $lst->[0];\n\
    \    my $str2 = $lst->[1];\n    my $str = $str1 . $str2;\n    my $cnt = 0;\n \
    \   for my $c (split //, $str) {\n        if ($c eq '(') {\n            $cnt++;\n\
    \        } elsif ($c eq ')') {\n            $cnt--;\n        }\n        return\
    \ 'No' if $cnt < 0;\n    }\n    return 'Yes';\n}", "    my $str1 = $lst->[0];\n\
    \    my $str2 = $lst->[1];\n    my $str1_open = 0;\n    my $str2_open = 0;\n \
    \   my $str1_close = 0;\n    my $str2_close = 0;\n    for my $c (split //, $str1)\
    \ {\n        if ($c eq '(') {\n            $str1_open++;\n        } else {\n \
    \           $str1_close++;\n        }\n    }\n    for my $c (split //, $str2)\
    \ {\n        if ($c eq '(') {\n            $str2_open++;\n        } else {\n \
    \           $str2_close++;\n        }\n    }\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    }\n    if ($str1_open\
    \ == $str1_close) {\n        return 'Yes' if $str2_open > $str2_close;\n    }\n\
    \    if ($str2_open == $str2_close) {\n        return 'Yes' if $str1_open > $str1_close;\n\
    \    }\n    return 'No';\n}", "    my $str1 = $lst->[0];\n    my $str2 = $lst->[1];\n\
    \    my $str = $str1 . $str2;\n    my $cnt = 0;\n    for my $c (split //, $str)\
    \ {\n        if ($c eq '(') {\n            $cnt++;\n        }\n        elsif ($c\
    \ eq ')') {\n            $cnt--;\n        }\n        if ($cnt < 0) {\n       \
    \     return 'No';\n        }\n    }\n    return $cnt == 0 ? 'Yes' : 'No';\n}",
  "    my($l, $r) = @$lst;\n    my($l_open, $l_close) = (0, 0);\n    my($r_open, $r_close)\
    \ = (0, 0);\n    for my $c (split //, $l) {\n        if ($c eq '(') {\n      \
    \      $l_open++;\n        }\n        else {\n            $l_close++;\n      \
    \  }\n    }\n    for my $c (split //, $r) {\n        if ($c eq '(') {\n      \
    \      $r_open++;\n        }\n        else {\n            $r_close++;\n      \
    \  }\n    }\n    return 'Yes' if $l_open == $r_close;\n    return 'Yes' if $l_close\
    \ == $r_open;\n    return 'No';\n}", "    my($a, $b) = @$lst;\n    my $n = 0;\n\
    \    $n++ while $a =~ /\\(/g;\n    $n-- while $a =~ /\\)/g;\n    $n++ while $b\
    \ =~ /\\(/g;\n    $n-- while $b =~ /\\)/g;\n    return $n == 0 ? 'Yes' : 'No';\n\
    }", "    my $l = $lst->[0];\n    my $r = $lst->[1];\n    my $l_cnt = 0;\n    my\
    \ $r_cnt = 0;\n    for my $c (split //, $l) {\n        if ($c eq '(') {\n    \
    \        $l_cnt++;\n        } else {\n            $l_cnt--;\n        }\n    }\n\
    \    for my $c (split //, $r) {\n        if ($c eq '(') {\n            $r_cnt++;\n\
    \        } else {\n            $r_cnt--;\n        }\n    }\n    return $l_cnt\
    \ == $r_cnt ? 'Yes' : 'No';\n}", "    my($s1, $s2) = @$lst;\n    my($cnt) = 0;\n\
    \    for my $c (split //, $s1) {\n        $cnt++ if $c eq '(';\n        $cnt--\
    \ if $c eq ')';\n        return 'No' if $cnt < 0;\n    }\n    for my $c (split\
    \ //, $s2) {\n        $cnt++ if $c eq '(';\n        $cnt-- if $c eq ')';\n   \
    \     return 'No' if $cnt < 0;\n    }\n    return 'Yes' if $cnt == 0;\n    return\
    \ 'No';\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
