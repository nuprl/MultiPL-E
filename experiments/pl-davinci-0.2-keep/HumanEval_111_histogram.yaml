completions:
- "    my %histogram;\n    foreach my $letter (split(/\\s+/, $test)) {\n        $histogram{$letter}++;\n\
  \    }\n    return %histogram;\n}"
- "    my %hash;\n    my @arr = split(/ /, $test);\n    foreach my $i (@arr) {\n \
  \       $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach my\
  \ $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n\
  \            @max_keys = ($key);\n        } elsif ($hash{$key} == $max) {\n    \
  \        push @max_keys, $key;\n        }\n    }\n    my %result;\n    foreach my\
  \ $key (@max_keys) {\n        $result{$key} = $max;\n    }\n    return %result;\n\
  }"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = max(values\
  \ %histogram);\n    my @max_letters = grep { $histogram{$_} == $max } keys %histogram;\n\
  \    my %max_histogram;\n    foreach my $letter (@max_letters) {\n        $max_histogram{$letter}\
  \ = $max;\n    }\n    return %max_histogram;\n}"
- "    my %hash = ();\n    my @array = split(' ', $test);\n    foreach my $letter\
  \ (@array) {\n        if (exists $hash{$letter}) {\n            $hash{$letter}++;\n\
  \        } else {\n            $hash{$letter} = 1;\n        }\n    }\n    my $max\
  \ = 0;\n    my @keys = ();\n    foreach my $key (keys %hash) {\n        if ($hash{$key}\
  \ > $max) {\n            $max = $hash{$key};\n            @keys = ($key);\n    \
  \    } elsif ($hash{$key} == $max) {\n            push(@keys, $key);\n        }\n\
  \    }\n    my %result = ();\n    foreach my $key (@keys) {\n        $result{$key}\
  \ = $max;\n    }\n    return %result;\n}"
- "    my %histogram;\n    foreach my $letter (split(/\\s+/, $test)) {\n        $histogram{$letter}++;\n\
  \    }\n    return %histogram;\n}"
- "    my(%histo);\n    my(@letters) = split(/\\s+/, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histo{$letter}++;\n    }\n    return %histo;\n}"
- "    my %result;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $result{$letter}++;\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $key (keys %histogram) {\n        $max = $histogram{$key} if $histogram{$key}\
  \ > $max;\n    }\n    my @max_letters;\n    foreach my $key (keys %histogram) {\n\
  \        push @max_letters, $key if $histogram{$key} == $max;\n    }\n    my %result;\n\
  \    foreach my $letter (@max_letters) {\n        $result{$letter} = $max;\n   \
  \ }\n    return %result;\n}"
- "    my @letters = split(' ', $test);\n    my %count;\n    foreach my $letter (@letters)\
  \ {\n        $count{$letter}++;\n    }\n    my $max = 0;\n    my %result;\n    foreach\
  \ my $letter (keys %count) {\n        if ($count{$letter} > $max) {\n          \
  \  $max = $count{$letter};\n            %result = ($letter => $count{$letter});\n\
  \        } elsif ($count{$letter} == $max) {\n            $result{$letter} = $count{$letter};\n\
  \        }\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n  \
  \          $max = $histogram{$letter};\n        }\n    }\n    my %max_histogram;\n\
  \    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter} ==\
  \ $max) {\n            $max_histogram{$letter} = $max;\n        }\n    }\n    return\
  \ %max_histogram;\n}"
- "    my @letters = split(/ /, $test);\n    my %histogram;\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my @test = split(' ', $test);\n    my %test;\n    foreach my $test (@test)\
  \ {\n        $test{$test}++;\n    }\n    my %result;\n    my $max = 0;\n    foreach\
  \ my $key (keys %test) {\n        if ($test{$key} > $max) {\n            $max =\
  \ $test{$key};\n        }\n    }\n    foreach my $key (keys %test) {\n        if\
  \ ($test{$key} == $max) {\n            $result{$key} = $max;\n        }\n    }\n\
  \    return %result;\n}"
- "    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $letter\
  \ (keys %hist) {\n        if ($hist{$letter} > $max) {\n            $max = $hist{$letter};\n\
  \        }\n    }\n    my %result;\n    foreach my $letter (keys %hist) {\n    \
  \    if ($hist{$letter} == $max) {\n            $result{$letter} = $max;\n     \
  \   }\n    }\n    return %result;\n}"
- "    my %hist;\n    foreach my $letter (split(/\\s+/, $test)) {\n        $hist{$letter}++;\n\
  \    }\n    my %result;\n    my $max = 0;\n    foreach my $letter (keys %hist) {\n\
  \        if ($hist{$letter} > $max) {\n            %result = ();\n            $max\
  \ = $hist{$letter};\n        }\n        if ($hist{$letter} == $max) {\n        \
  \    $result{$letter} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %hist;\n    my @letters = split(' ', $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $letter\
  \ (keys %hist) {\n        if ($hist{$letter} > $max) {\n            $max = $hist{$letter};\n\
  \        }\n    }\n    my %result;\n    foreach my $letter (keys %hist) {\n    \
  \    if ($hist{$letter} == $max) {\n            $result{$letter} = $max;\n     \
  \   }\n    }\n    return %result;\n}"
- "    my %hist;\n    foreach my $letter (split(' ', $test)) {\n        $hist{$letter}++;\n\
  \    }\n    my $max = max(values %hist);\n    my @max_letters = grep { $hist{$_}\
  \ == $max } keys %hist;\n    my %result;\n    foreach my $letter (@max_letters)\
  \ {\n        $result{$letter} = $max;\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my @letters = split(/ /, $test);\n    my %histogram;\n    foreach my $letter\
  \ (@letters) {\n        if (exists $histogram{$letter}) {\n            $histogram{$letter}++;\n\
  \        } else {\n            $histogram{$letter} = 1;\n        }\n    }\n    return\
  \ %histogram;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %hash;\n    my @array = split(' ', $test);\n    foreach my $i (@array) {\n\
  \        $hash{$i}++;\n    }\n    return %hash;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    my\
  \ @max_letters;\n    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter}\
  \ > $max) {\n            $max = $histogram{$letter};\n            @max_letters =\
  \ ($letter);\n        } elsif ($histogram{$letter} == $max) {\n            push\
  \ @max_letters, $letter;\n        }\n    }\n    my %result;\n    foreach my $letter\
  \ (@max_letters) {\n        $result{$letter} = $max;\n    }\n    return %result;\n\
  }"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = max(values\
  \ %histogram);\n    my @max_letters = grep { $histogram{$_} == $max } keys %histogram;\n\
  \    my %result;\n    foreach my $letter (@max_letters) {\n        $result{$letter}\
  \ = $max;\n    }\n    return %result;\n}"
- "    my %hist;\n    my %max;\n    my $max = 0;\n    foreach my $letter (split(/\\\
  s+/, $test)) {\n        $hist{$letter}++;\n        if ($hist{$letter} > $max) {\n\
  \            $max = $hist{$letter};\n            %max = ($letter => $max);\n   \
  \     } elsif ($hist{$letter} == $max) {\n            $max{$letter} = $max;\n  \
  \      }\n    }\n    return %max;\n}"
- "    my %count;\n    my %result;\n    my $max = 0;\n    foreach my $letter (split(/\\\
  s+/, $test)) {\n        $count{$letter}++;\n        if ($count{$letter} > $max)\
  \ {\n            $max = $count{$letter};\n        }\n    }\n    foreach my $letter\
  \ (keys %count) {\n        if ($count{$letter} == $max) {\n            $result{$letter}\
  \ = $max;\n        }\n    }\n    return %result;\n}"
- "    my %histogram;\n    foreach my $letter (split(/\\s+/, $test)) {\n        $histogram{$letter}++;\n\
  \    }\n    return %histogram;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n  \
  \          $max = $histogram{$letter};\n        }\n    }\n    my %result;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} == $max) {\n \
  \           $result{$letter} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %histogram;\n    foreach my $letter (split(' ', $test)) {\n        $histogram{$letter}++;\n\
  \    }\n    return %histogram;\n}"
- "    my %histo;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $histo{$letter}++;\n    }\n    return %histo;\n}"
- "    my %histogram;\n    foreach my $letter (split(/\\s+/, $test)) {\n        $histogram{$letter}++;\n\
  \    }\n    return %histogram;\n}"
- "    my @letters = split(/ /, $test);\n    my %histogram;\n    foreach my $letter\
  \ (@letters) {\n        if (exists $histogram{$letter}) {\n            $histogram{$letter}\
  \ += 1;\n        } else {\n            $histogram{$letter} = 1;\n        }\n   \
  \ }\n    return %histogram;\n}"
- "    my(%histogram);\n    foreach my $letter (split(' ', $test)) {\n        $histogram{$letter}++;\n\
  \    }\n    my($max) = 0;\n    foreach my $letter (keys %histogram) {\n        if\
  \ ($histogram{$letter} > $max) {\n            $max = $histogram{$letter};\n    \
  \    }\n    }\n    my(%result);\n    foreach my $letter (keys %histogram) {\n  \
  \      if ($histogram{$letter} == $max) {\n            $result{$letter} = $max;\n\
  \        }\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n        \
  \    $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach my\
  \ $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n          \
  \  $result{$key} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n  \
  \          $max = $histogram{$letter};\n        }\n    }\n    my %result;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} == $max) {\n \
  \           $result{$letter} = $max;\n        }\n    }\n    return %result;\n}"
- "    my @letters = split(/ /, $test);\n    my %histogram;\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n  \
  \          $max = $histogram{$letter};\n        }\n    }\n    my %result;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} == $max) {\n \
  \           $result{$letter} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my @letters = split(' ', $test);\n    my %histogram;\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my @letters = split(/ /, $test);\n    my %histogram;\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    my\
  \ @max_letters;\n    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter}\
  \ > $max) {\n            $max = $histogram{$letter};\n            @max_letters =\
  \ ($letter);\n        } elsif ($histogram{$letter} == $max) {\n            push\
  \ @max_letters, $letter;\n        }\n    }\n    my %result;\n    foreach my $letter\
  \ (@max_letters) {\n        $result{$letter} = $max;\n    }\n    return %result;\n\
  }"
- "    my %hist;\n    foreach my $char (split(/ /, $test)) {\n        $hist{$char}++;\n\
  \    }\n    my $max = 0;\n    foreach my $key (keys %hist) {\n        if ($hist{$key}\
  \ > $max) {\n            $max = $hist{$key};\n        }\n    }\n    my %result;\n\
  \    foreach my $key (keys %hist) {\n        if ($hist{$key} == $max) {\n      \
  \      $result{$key} = $max;\n        }\n    }\n    return %result;\n}"
- "    my @letters = split(/ /, $test);\n    my %histogram;\n    foreach my $letter\
  \ (@letters) {\n        if (exists $histogram{$letter}) {\n            $histogram{$letter}++;\n\
  \        } else {\n            $histogram{$letter} = 1;\n        }\n    }\n    my\
  \ $max = 0;\n    my @maxes;\n    foreach my $letter (keys %histogram) {\n      \
  \  if ($histogram{$letter} > $max) {\n            $max = $histogram{$letter};\n\
  \            @maxes = ($letter);\n        } elsif ($histogram{$letter} == $max)\
  \ {\n            push(@maxes, $letter);\n        }\n    }\n    my %result;\n   \
  \ foreach my $letter (@maxes) {\n        $result{$letter} = $max;\n    }\n    return\
  \ %result;\n}"
- "    my %histo;\n    foreach my $letter (split(' ', $test)) {\n        $histo{$letter}++;\n\
  \    }\n    my $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %histo)\
  \ {\n        if ($histo{$letter} > $max) {\n            $max = $histo{$letter};\n\
  \            @max_letters = ($letter);\n        } elsif ($histo{$letter} == $max)\
  \ {\n            push @max_letters, $letter;\n        }\n    }\n    my %result;\n\
  \    foreach my $letter (@max_letters) {\n        $result{$letter} = $max;\n   \
  \ }\n    return %result;\n}"
- "    my %hash;\n    my @array = split(' ', $test);\n    foreach my $i (@array) {\n\
  \        $hash{$i}++;\n    }\n    my $max = 0;\n    foreach my $key (keys %hash)\
  \ {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n      \
  \  }\n    }\n    my %result;\n    foreach my $key (keys %hash) {\n        if ($hash{$key}\
  \ == $max) {\n            $result{$key} = $max;\n        }\n    }\n    return %result;\n\
  }"
- "    my %hist;\n    foreach my $char (split(/ /, $test)) {\n        $hist{$char}++;\n\
  \    }\n    return %hist;\n}"
- "    my %hist;\n    foreach my $letter (split(/\\s+/, $test)) {\n        $hist{$letter}++;\n\
  \    }\n    my $max = 0;\n    foreach my $letter (keys %hist) {\n        $max =\
  \ $hist{$letter} if $hist{$letter} > $max;\n    }\n    my %results;\n    foreach\
  \ my $letter (keys %hist) {\n        $results{$letter} = $hist{$letter} if $hist{$letter}\
  \ == $max;\n    }\n    return %results;\n}"
- "    my %hash;\n    my @array = split(' ', $test);\n    foreach my $i (@array) {\n\
  \        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach my\
  \ $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n\
  \            @max_keys = ($key);\n        } elsif ($hash{$key} == $max) {\n    \
  \        push @max_keys, $key;\n        }\n    }\n    my %result;\n    foreach my\
  \ $key (@max_keys) {\n        $result{$key} = $max;\n    }\n    return %result;\n\
  }"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my @test = split(/ /, $test);\n    my %histogram;\n    foreach my $letter (@test)\
  \ {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n  \
  \          $max = $histogram{$letter};\n        }\n    }\n    my %result;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} == $max) {\n \
  \           $result{$letter} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
  \ %hist) {\n        if ($hist{$key} > $max) {\n            $max = $hist{$key};\n\
  \        }\n    }\n    my %result;\n    foreach my $key (keys %hist) {\n       \
  \ if ($hist{$key} == $max) {\n            $result{$key} = $max;\n        }\n   \
  \ }\n    return %result;\n}"
- "    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $letter\
  \ (keys %hist) {\n        if ($hist{$letter} > $max) {\n            $max = $hist{$letter};\n\
  \        }\n    }\n    my %result;\n    foreach my $letter (keys %hist) {\n    \
  \    if ($hist{$letter} == $max) {\n            $result{$letter} = $max;\n     \
  \   }\n    }\n    return %result;\n}"
- "    my %h;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $h{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
  \ %h) {\n        if ($h{$key} > $max) {\n            $max = $h{$key};\n        }\n\
  \    }\n    my %result;\n    foreach my $key (keys %h) {\n        if ($h{$key} ==\
  \ $max) {\n            $result{$key} = $max;\n        }\n    }\n    return %result;\n\
  }"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        if (exists $histogram{$letter}) {\n            $histogram{$letter}++;\n\
  \        } else {\n            $histogram{$letter} = 1;\n        }\n    }\n    return\
  \ %histogram;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n        \
  \    $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach my\
  \ $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n          \
  \  $result{$key} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n  \
  \          $max = $histogram{$letter};\n        }\n    }\n    my %result;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} == $max) {\n \
  \           $result{$letter} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n        \
  \    $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach my\
  \ $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n          \
  \  $result{$key} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n        \
  \    $max = $histogram{$key};\n        }\n    }\n    my %max_histogram;\n    foreach\
  \ my $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n       \
  \     $max_histogram{$key} = $max;\n        }\n    }\n    return %max_histogram;\n\
  }"
- "    my %histo;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $histo{$letter}++;\n    }\n    return %histo;\n}"
- "    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    return %hist;\n}"
- "    my %hash;\n    my @arr = split(' ', $test);\n    foreach my $i (@arr) {\n \
  \       $hash{$i}++;\n    }\n    my $max = max(values %hash);\n    my @keys = grep\
  \ { $hash{$_} == $max } keys %hash;\n    return { map { $_ => $hash{$_} } @keys\
  \ };\n}"
- "    my %histo;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $histo{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
  \ %histo) {\n        if ($histo{$key} > $max) {\n            $max = $histo{$key};\n\
  \        }\n    }\n    my %result;\n    foreach my $key (keys %histo) {\n      \
  \  if ($histo{$key} == $max) {\n            $result{$key} = $max;\n        }\n \
  \   }\n    return %result;\n}"
- "    my %hist;\n    my %max;\n    my $max = 0;\n    my @letters = split(/ /, $test);\n\
  \    foreach my $letter (@letters) {\n        $hist{$letter}++;\n        if ($hist{$letter}\
  \ > $max) {\n            $max = $hist{$letter};\n            %max = ($letter =>\
  \ $max);\n        } elsif ($hist{$letter} == $max) {\n            $max{$letter}\
  \ = $max;\n        }\n    }\n    return %max;\n}"
- "    my %hash = ();\n    my @array = split(/ /, $test);\n    foreach my $element\
  \ (@array) {\n        if (exists $hash{$element}) {\n            $hash{$element}\
  \ += 1;\n        } else {\n            $hash{$element} = 1;\n        }\n    }\n\
  \    return %hash;\n}"
- "    my %result;\n    my @letters = split(' ', $test);\n    foreach my $letter (@letters)\
  \ {\n        $result{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
  \ %result) {\n        if ($result{$key} > $max) {\n            $max = $result{$key};\n\
  \        }\n    }\n    my %result2;\n    foreach my $key (keys %result) {\n    \
  \    if ($result{$key} == $max) {\n            $result2{$key} = $result{$key};\n\
  \        }\n    }\n    return %result2;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n        \
  \    $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach my\
  \ $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n          \
  \  $result{$key} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n  \
  \          $max = $histogram{$letter};\n        }\n    }\n    my %result;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} == $max) {\n \
  \           $result{$letter} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n  \
  \          $max = $histogram{$letter};\n        }\n    }\n    my %result;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} == $max) {\n \
  \           $result{$letter} = $max;\n        }\n    }\n    return %result;\n}"
- "    my @letters = split(' ', $test);\n    my %histogram;\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %hist;\n    foreach my $char (split(/\\s+/, $test)) {\n        $hist{$char}++;\n\
  \    }\n    my $max = 0;\n    my %max_hist;\n    foreach my $char (keys %hist) {\n\
  \        if ($hist{$char} > $max) {\n            $max = $hist{$char};\n        \
  \    %max_hist = ($char => $hist{$char});\n        } elsif ($hist{$char} == $max)\
  \ {\n            $max_hist{$char} = $hist{$char};\n        }\n    }\n    return\
  \ %max_hist;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n        \
  \    $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach my\
  \ $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n          \
  \  $result{$key} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n  \
  \          $max = $histogram{$letter};\n        }\n    }\n    my %result;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} == $max) {\n \
  \           $result{$letter} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %hist;\n    my @letters = split(' ', $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
  \    foreach my $letter (keys %hist) {\n        if ($hist{$letter} > $max) {\n \
  \           $max = $hist{$letter};\n            @max_letters = ($letter);\n    \
  \    } elsif ($hist{$letter} == $max) {\n            push @max_letters, $letter;\n\
  \        }\n    }\n    my %result;\n    foreach my $letter (@max_letters) {\n  \
  \      $result{$letter} = $max;\n    }\n    return %result;\n}"
- "    my @letters = split(/\\s+/, $test);\n    my %count;\n    foreach my $letter\
  \ (@letters) {\n        $count{$letter}++;\n    }\n    my $max = 0;\n    my %result;\n\
  \    foreach my $letter (keys %count) {\n        if ($count{$letter} > $max) {\n\
  \            $max = $count{$letter};\n            %result = ($letter => $count{$letter});\n\
  \        } elsif ($count{$letter} == $max) {\n            $result{$letter} = $count{$letter};\n\
  \        }\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    return \\%hist;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    my\
  \ @max_letters;\n    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter}\
  \ > $max) {\n            $max = $histogram{$letter};\n            @max_letters =\
  \ ($letter);\n        } elsif ($histogram{$letter} == $max) {\n            push\
  \ @max_letters, $letter;\n        }\n    }\n    my %result;\n    foreach my $letter\
  \ (@max_letters) {\n        $result{$letter} = $max;\n    }\n    return %result;\n\
  }"
- "    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = max(values %hist);\n    my\
  \ @max_letters = grep { $hist{$_} == $max } keys %hist;\n    my %max_hist = map\
  \ { $_ => $max } @max_letters;\n    return %max_hist;\n}"
- "    my %hist;\n    foreach my $letter (split(/\\s+/, $test)) {\n        $hist{$letter}++;\n\
  \    }\n    my $max = max(values %hist);\n    my %result;\n    foreach my $letter\
  \ (keys %hist) {\n        if ($hist{$letter} == $max) {\n            $result{$letter}\
  \ = $max;\n        }\n    }\n    return %result;\n}"
- "    my %hist;\n    my @letters = split(' ', $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
  \ %hist) {\n        if ($hist{$key} > $max) {\n            $max = $hist{$key};\n\
  \        }\n    }\n    my %result;\n    foreach my $key (keys %hist) {\n       \
  \ if ($hist{$key} == $max) {\n            $result{$key} = $max;\n        }\n   \
  \ }\n    return %result;\n}"
- "    my %hist;\n    my @letters = split(' ', $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    return \\%hist;\n}"
- "    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    my %max_hist;\n   \
  \ foreach my $key (keys %hist) {\n        if ($hist{$key} > $max) {\n          \
  \  $max = $hist{$key};\n            %max_hist = ();\n            $max_hist{$key}\
  \ = $hist{$key};\n        } elsif ($hist{$key} == $max) {\n            $max_hist{$key}\
  \ = $hist{$key};\n        }\n    }\n    return %max_hist;\n}"
- "    my %histo;\n    my @letters = split(' ', $test);\n    foreach my $letter (@letters)\
  \ {\n        $histo{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
  \ %histo) {\n        if ($histo{$key} > $max) {\n            $max = $histo{$key};\n\
  \        }\n    }\n    my %result;\n    foreach my $key (keys %histo) {\n      \
  \  if ($histo{$key} == $max) {\n            $result{$key} = $max;\n        }\n \
  \   }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %histogram;\n    foreach my $letter (split(/\\s+/, $test)) {\n        $histogram{$letter}++;\n\
  \    }\n    return %histogram;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n  \
  \          $max = $histogram{$letter};\n        }\n    }\n    my %result;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} == $max) {\n \
  \           $result{$letter} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        if (exists $histogram{$letter}) {\n            $histogram{$letter}++;\n\
  \        } else {\n            $histogram{$letter} = 1;\n        }\n    }\n    my\
  \ $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %histogram) {\n\
  \        if ($histogram{$letter} > $max) {\n            $max = $histogram{$letter};\n\
  \            @max_letters = ($letter);\n        } elsif ($histogram{$letter} ==\
  \ $max) {\n            push(@max_letters, $letter);\n        }\n    }\n    my %result;\n\
  \    foreach my $letter (@max_letters) {\n        $result{$letter} = $max;\n   \
  \ }\n    return %result;\n}"
- "    my %hist;\n    my %max;\n    my $max = 0;\n    foreach my $letter (split(/\\\
  s+/, $test)) {\n        $hist{$letter}++;\n        if ($hist{$letter} > $max) {\n\
  \            $max = $hist{$letter};\n            %max = ($letter => $max);\n   \
  \     } elsif ($hist{$letter} == $max) {\n            $max{$letter} = $max;\n  \
  \      }\n    }\n    return %max;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    my\
  \ %max_letters;\n    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter}\
  \ > $max) {\n            $max = $histogram{$letter};\n            %max_letters =\
  \ ($letter => $max);\n        } elsif ($histogram{$letter} == $max) {\n        \
  \    $max_letters{$letter} = $max;\n        }\n    }\n    return %max_letters;\n\
  }"
- "    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
  \ %hist) {\n        if ($hist{$key} > $max) {\n            $max = $hist{$key};\n\
  \        }\n    }\n    my %max_hist;\n    foreach my $key (keys %hist) {\n     \
  \   if ($hist{$key} == $max) {\n            $max_hist{$key} = $hist{$key};\n   \
  \     }\n    }\n    return %max_hist;\n}"
- "    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    return %hist;\n}"
- "    my %hist;\n    my @letters = split(' ', $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
  \    foreach my $letter (keys %hist) {\n        if ($hist{$letter} > $max) {\n \
  \           $max = $hist{$letter};\n            @max_letters = ($letter);\n    \
  \    } elsif ($hist{$letter} == $max) {\n            push @max_letters, $letter;\n\
  \        }\n    }\n    my %result;\n    foreach my $letter (@max_letters) {\n  \
  \      $result{$letter} = $max;\n    }\n    return %result;\n}"
- "    my %histo;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        if (exists $histo{$letter}) {\n            $histo{$letter}++;\n   \
  \     } else {\n            $histo{$letter} = 1;\n        }\n    }\n    my $max\
  \ = 0;\n    foreach my $key (keys %histo) {\n        if ($histo{$key} > $max) {\n\
  \            $max = $histo{$key};\n        }\n    }\n    my %result;\n    foreach\
  \ my $key (keys %histo) {\n        if ($histo{$key} == $max) {\n            $result{$key}\
  \ = $max;\n        }\n    }\n    return %result;\n}"
- "    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = max(values %hist);\n    my\
  \ @max_letters = grep { $hist{$_} == $max } keys %hist;\n    my %result;\n    foreach\
  \ my $letter (@max_letters) {\n        $result{$letter} = $max;\n    }\n    return\
  \ %result;\n}"
- "    my @letters = split(/ /, $test);\n    my %histogram;\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n        \
  \    $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach my\
  \ $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n          \
  \  $result{$key} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n        \
  \    $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach my\
  \ $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n          \
  \  $result{$key} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %histo;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $histo{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
  \ %histo) {\n        if ($histo{$key} > $max) {\n            $max = $histo{$key};\n\
  \        }\n    }\n    my %result;\n    foreach my $key (keys %histo) {\n      \
  \  if ($histo{$key} == $max) {\n            $result{$key} = $max;\n        }\n \
  \   }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n        \
  \    $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach my\
  \ $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n          \
  \  $result{$key} = $max;\n        }\n    }\n    return %result;\n}"
- "    my @letters = split(' ', $test);\n    my %histogram;\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    my\
  \ @max_letters;\n    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter}\
  \ > $max) {\n            $max = $histogram{$letter};\n            @max_letters =\
  \ ($letter);\n        } elsif ($histogram{$letter} == $max) {\n            push\
  \ @max_letters, $letter;\n        }\n    }\n    my %result;\n    foreach my $letter\
  \ (@max_letters) {\n        $result{$letter} = $max;\n    }\n    return %result;\n\
  }"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n        \
  \    $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach my\
  \ $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n          \
  \  $result{$key} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %result;\n    my @letters = split(' ', $test);\n    foreach my $letter (@letters)\
  \ {\n        $result{$letter}++;\n    }\n    return %result;\n}"
- "    my %hist;\n    foreach my $letter (split(/\\s+/, $test)) {\n        $hist{$letter}++;\n\
  \    }\n    return \\%hist;\n}"
- "    my(%count);\n    my(@letters) = split(/\\s+/, $test);\n    foreach my $letter\
  \ (@letters) {\n        $count{$letter}++;\n    }\n    my($max) = 0;\n    foreach\
  \ my $letter (keys %count) {\n        if ($count{$letter} > $max) {\n          \
  \  $max = $count{$letter};\n        }\n    }\n    my(%result);\n    foreach my $letter\
  \ (keys %count) {\n        if ($count{$letter} == $max) {\n            $result{$letter}\
  \ = $max;\n        }\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my @letters = split(' ', $test);\n    my %histogram;\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %hash = ();\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
  \ {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else {\n\
  \            $hash{$i} = 1;\n        }\n    }\n    my @keys = sort { $hash{$b} <=>\
  \ $hash{$a} } keys %hash;\n    my %result = ();\n    my $max = $hash{$keys[0]};\n\
  \    foreach my $key (@keys) {\n        if ($hash{$key} == $max) {\n           \
  \ $result{$key} = $max;\n        }\n    }\n    return %result;\n}"
- "    my @test = split(/ /, $test);\n    my %histogram;\n    foreach my $letter (@test)\
  \ {\n        if (exists $histogram{$letter}) {\n            $histogram{$letter}\
  \ += 1;\n        } else {\n            $histogram{$letter} = 1;\n        }\n   \
  \ }\n    return %histogram;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    my\
  \ @max_letters;\n    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter}\
  \ > $max) {\n            $max = $histogram{$letter};\n            @max_letters =\
  \ ($letter);\n        } elsif ($histogram{$letter} == $max) {\n            push\
  \ @max_letters, $letter;\n        }\n    }\n    my %result;\n    foreach my $letter\
  \ (@max_letters) {\n        $result{$letter} = $max;\n    }\n    return %result;\n\
  }"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %hist;\n    my @letters = split(' ', $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $letter\
  \ (keys %hist) {\n        if ($hist{$letter} > $max) {\n            $max = $hist{$letter};\n\
  \        }\n    }\n    my %result;\n    foreach my $letter (keys %hist) {\n    \
  \    if ($hist{$letter} == $max) {\n            $result{$letter} = $max;\n     \
  \   }\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %result;\n    my @letters = split(' ', $test);\n    foreach my $letter (@letters)\
  \ {\n        $result{$letter}++;\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %count;\n    my %result;\n    my $max = 0;\n    foreach my $char (split\
  \ //, $test) {\n        $count{$char}++;\n        if ($count{$char} > $max) {\n\
  \            $max = $count{$char};\n            %result = ($char => $max);\n   \
  \     } elsif ($count{$char} == $max) {\n            $result{$char} = $max;\n  \
  \      }\n    }\n    return %result;\n}"
- "    my @letters = split(/\\s+/, $test);\n    my %histogram;\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n        \
  \    $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach my\
  \ $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n          \
  \  $result{$key} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %histo;\n    foreach my $letter (split(/\\s+/, $test)) {\n        $histo{$letter}++;\n\
  \    }\n    my $max = 0;\n    my %result;\n    foreach my $key (keys %histo) {\n\
  \        if ($histo{$key} > $max) {\n            $max = $histo{$key};\n        \
  \    %result = ($key => $histo{$key});\n        } elsif ($histo{$key} == $max) {\n\
  \            $result{$key} = $histo{$key};\n        }\n    }\n    return %result;\n\
  }"
- "    my %histogram;\n    foreach my $letter (split(/\\s+/, $test)) {\n        $histogram{$letter}++;\n\
  \    }\n    return %histogram;\n}"
- "    my @letters = split(' ', $test);\n    my %counts;\n    my %max;\n    foreach\
  \ my $letter (@letters) {\n        $counts{$letter}++;\n        if (!defined($max{$letter})\
  \ || $counts{$letter} > $max{$letter}) {\n            $max{$letter} = $counts{$letter};\n\
  \        }\n    }\n    my %result;\n    foreach my $letter (keys %counts) {\n  \
  \      if ($counts{$letter} == $max{$letter}) {\n            $result{$letter} =\
  \ $counts{$letter};\n        }\n    }\n    return %result;\n}"
- "    my %histogram;\n    foreach my $letter (split(/ /, $test)) {\n        $histogram{$letter}++;\n\
  \    }\n    return %histogram;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    my\
  \ @max_letters;\n    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter}\
  \ > $max) {\n            $max = $histogram{$letter};\n            @max_letters =\
  \ ($letter);\n        } elsif ($histogram{$letter} == $max) {\n            push\
  \ @max_letters, $letter;\n        }\n    }\n    my %result;\n    foreach my $letter\
  \ (@max_letters) {\n        $result{$letter} = $max;\n    }\n    return %result;\n\
  }"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = max(values\
  \ %histogram);\n    my @max_letters = grep { $histogram{$_} == $max } keys %histogram;\n\
  \    my %result;\n    foreach my $letter (@max_letters) {\n        $result{$letter}\
  \ = $max;\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = max(values\
  \ %histogram);\n    my @max_letters = grep { $histogram{$_} == $max } keys %histogram;\n\
  \    my %result;\n    foreach my $letter (@max_letters) {\n        $result{$letter}\
  \ = $max;\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = max(values\
  \ %histogram);\n    my @max_letters = grep { $histogram{$_} == $max } keys %histogram;\n\
  \    my %result;\n    foreach my $letter (@max_letters) {\n        $result{$letter}\
  \ = $max;\n    }\n    return %result;\n}"
- "    my %result;\n    my @letters = split(' ', $test);\n    foreach my $letter (@letters)\
  \ {\n        if (exists $result{$letter}) {\n            $result{$letter} += 1;\n\
  \        } else {\n            $result{$letter} = 1;\n        }\n    }\n    return\
  \ %result;\n}"
- "    my %histo;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $histo{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
  \ %histo) {\n        if ($histo{$key} > $max) {\n            $max = $histo{$key};\n\
  \        }\n    }\n    my %result;\n    foreach my $key (keys %histo) {\n      \
  \  if ($histo{$key} == $max) {\n            $result{$key} = $max;\n        }\n \
  \   }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n        \
  \    $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach my\
  \ $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n          \
  \  $result{$key} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %hist;\n    my %max;\n    my $max = 0;\n    foreach my $letter (split /\
  \ /, $test) {\n        $hist{$letter}++;\n        if ($hist{$letter} > $max) {\n\
  \            $max = $hist{$letter};\n            %max = ($letter => $max);\n   \
  \     } elsif ($hist{$letter} == $max) {\n            $max{$letter} = $max;\n  \
  \      }\n    }\n    return %max;\n}"
- "    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
  \ %hist) {\n        if ($hist{$key} > $max) {\n            $max = $hist{$key};\n\
  \        }\n    }\n    my %result;\n    foreach my $key (keys %hist) {\n       \
  \ if ($hist{$key} == $max) {\n            $result{$key} = $max;\n        }\n   \
  \ }\n    return %result;\n}"
- "    my %histo;\n    foreach my $letter (split(/\\s+/, $test)) {\n        $histo{$letter}++;\n\
  \    }\n    return %histo;\n}"
- "    my %count;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $count{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
  \ %count) {\n        if ($count{$key} > $max) {\n            $max = $count{$key};\n\
  \        }\n    }\n    my %result;\n    foreach my $key (keys %count) {\n      \
  \  if ($count{$key} == $max) {\n            $result{$key} = $max;\n        }\n \
  \   }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
  \    foreach my $letter (keys %hist) {\n        if ($hist{$letter} > $max) {\n \
  \           $max = $hist{$letter};\n            @max_letters = ($letter);\n    \
  \    } elsif ($hist{$letter} == $max) {\n            push @max_letters, $letter;\n\
  \        }\n    }\n    my %max_hist;\n    foreach my $letter (@max_letters) {\n\
  \        $max_hist{$letter} = $max;\n    }\n    return %max_hist;\n}"
- "    my %hist;\n    my %max;\n    my $max = 0;\n    foreach my $letter (split(/\\\
  s+/, $test)) {\n        $hist{$letter}++;\n        if ($hist{$letter} > $max) {\n\
  \            $max = $hist{$letter};\n            %max = ($letter => $max);\n   \
  \     } elsif ($hist{$letter} == $max) {\n            $max{$letter} = $max;\n  \
  \      }\n    }\n    return %max;\n}"
- "    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $letter\
  \ (keys %hist) {\n        if ($hist{$letter} > $max) {\n            $max = $hist{$letter};\n\
  \        }\n    }\n    my %result;\n    foreach my $letter (keys %hist) {\n    \
  \    if ($hist{$letter} == $max) {\n            $result{$letter} = $max;\n     \
  \   }\n    }\n    return %result;\n}"
- "    my %count;\n    my %max;\n    my $max = 0;\n    foreach my $letter (split('\
  \ ', $test)) {\n        $count{$letter}++;\n        if ($count{$letter} > $max)\
  \ {\n            $max = $count{$letter};\n            %max = ($letter => $max);\n\
  \        } elsif ($count{$letter} == $max) {\n            $max{$letter} = $max;\n\
  \        }\n    }\n    return %max;\n}"
- "    my(%hist, @hist);\n    my(@letters) = split(/\\s+/, $test);\n    foreach my\
  \ $letter (@letters) {\n        $hist{$letter}++;\n    }\n    my($max) = 0;\n  \
  \  foreach my $letter (keys %hist) {\n        if ($hist{$letter} > $max) {\n   \
  \         $max = $hist{$letter};\n        }\n    }\n    foreach my $letter (keys\
  \ %hist) {\n        if ($hist{$letter} == $max) {\n            push(@hist, $letter);\n\
  \        }\n    }\n    return { map { $_ => $max } @hist };\n}"
- "    my @letters = split(' ', $test);\n    my %letters;\n    foreach my $letter\
  \ (@letters) {\n        $letters{$letter}++;\n    }\n    my %max;\n    my $max =\
  \ 0;\n    foreach my $letter (keys %letters) {\n        if ($letters{$letter} >\
  \ $max) {\n            $max = $letters{$letter};\n            %max = ($letter =>\
  \ $letters{$letter});\n        } elsif ($letters{$letter} == $max) {\n         \
  \   $max{$letter} = $letters{$letter};\n        }\n    }\n    return %max;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = max(values\
  \ %histogram);\n    my @max_letters = grep { $histogram{$_} == $max } keys %histogram;\n\
  \    my %result;\n    foreach my $letter (@max_letters) {\n        $result{$letter}\
  \ = $max;\n    }\n    return %result;\n}"
- "    my %histogram;\n    foreach my $letter (split(/ /, $test)) {\n        $histogram{$letter}++;\n\
  \    }\n    return %histogram;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n        \
  \    $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach my\
  \ $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n          \
  \  $result{$key} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %hash = ();\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        if (exists $hash{$letter}) {\n            $hash{$letter}\
  \ += 1;\n        } else {\n            $hash{$letter} = 1;\n        }\n    }\n \
  \   return %hash;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $key (keys %histogram) {\n        if ($histogram{$key} > $max) {\n        \
  \    $max = $histogram{$key};\n        }\n    }\n    my %result;\n    foreach my\
  \ $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n          \
  \  $result{$key} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
  \ %hist) {\n        if ($hist{$key} > $max) {\n            $max = $hist{$key};\n\
  \        }\n    }\n    my %result;\n    foreach my $key (keys %hist) {\n       \
  \ if ($hist{$key} == $max) {\n            $result{$key} = $max;\n        }\n   \
  \ }\n    return %result;\n}"
- "    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
  \ %hist) {\n        if ($hist{$key} > $max) {\n            $max = $hist{$key};\n\
  \        }\n    }\n    my %result;\n    foreach my $key (keys %hist) {\n       \
  \ if ($hist{$key} == $max) {\n            $result{$key} = $max;\n        }\n   \
  \ }\n    return %result;\n}"
- "    my %result;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $result{$letter} += 1;\n    }\n    return %result;\n}"
- "    my @letters = split(/\\s+/, $test);\n    my %hist;\n    foreach my $letter\
  \ (@letters) {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $letter (keys %hist) {\n        if ($hist{$letter} > $max) {\n            $max\
  \ = $hist{$letter};\n        }\n    }\n    my %result;\n    foreach my $letter (keys\
  \ %hist) {\n        if ($hist{$letter} == $max) {\n            $result{$letter}\
  \ = $max;\n        }\n    }\n    return %result;\n}"
- "    my %hist;\n    my @letters = split / /, $test;\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
  \ %hist) {\n        if ($hist{$key} > $max) {\n            $max = $hist{$key};\n\
  \        }\n    }\n    my %result;\n    foreach my $key (keys %hist) {\n       \
  \ if ($hist{$key} == $max) {\n            $result{$key} = $max;\n        }\n   \
  \ }\n    return %result;\n}"
- "    my %hash;\n    my @array = split(' ', $test);\n    foreach my $i (@array) {\n\
  \        $hash{$i}++;\n    }\n    my $max = 0;\n    foreach my $key (keys %hash)\
  \ {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n      \
  \  }\n    }\n    my %result;\n    foreach my $key (keys %hash) {\n        if ($hash{$key}\
  \ == $max) {\n            $result{$key} = $max;\n        }\n    }\n    return %result;\n\
  }"
- "    my @letters = split(' ', $test);\n    my %histogram;\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %histo;\n    my %max;\n    my $max = 0;\n    foreach my $letter (split(/\
  \ /, $test)) {\n        $histo{$letter}++;\n        if ($histo{$letter} > $max)\
  \ {\n            $max = $histo{$letter};\n            %max = ($letter => $max);\n\
  \        } elsif ($histo{$letter} == $max) {\n            $max{$letter} = $max;\n\
  \        }\n    }\n    return %max;\n}"
- "    my %histogram;\n    foreach my $letter (split(/\\s+/, $test)) {\n        $histogram{$letter}++;\n\
  \    }\n    return %histogram;\n}"
- "    my %result;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $result{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
  \ %result) {\n        if ($result{$key} > $max) {\n            $max = $result{$key};\n\
  \        }\n    }\n    my %final;\n    foreach my $key (keys %result) {\n      \
  \  if ($result{$key} == $max) {\n            $final{$key} = $max;\n        }\n \
  \   }\n    return %final;\n}"
- "    my @letters = split(' ', $test);\n    my %count;\n    foreach my $letter (@letters)\
  \ {\n        $count{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
  \    foreach my $letter (keys %count) {\n        if ($count{$letter} > $max) {\n\
  \            $max = $count{$letter};\n            @max_letters = ($letter);\n  \
  \      } elsif ($count{$letter} == $max) {\n            push @max_letters, $letter;\n\
  \        }\n    }\n    my %result;\n    foreach my $letter (@max_letters) {\n  \
  \      $result{$letter} = $max;\n    }\n    return %result;\n}"
- "    my(%hist, @hist, $letter, $count);\n    foreach $letter (split(/ /, $test))\
  \ {\n        $hist{$letter}++;\n    }\n    foreach $letter (keys %hist) {\n    \
  \    push(@hist, [$letter, $hist{$letter}]);\n    }\n    @hist = sort {$b->[1] <=>\
  \ $a->[1]} @hist;\n    $count = $hist[0]->[1];\n    %hist = ();\n    foreach $letter\
  \ (@hist) {\n        if ($letter->[1] == $count) {\n            $hist{$letter->[0]}\
  \ = $letter->[1];\n        }\n    }\n    return %hist;\n}"
- "    my %histo;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $histo{$letter}++;\n    }\n    return %histo;\n}"
- "    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        if (exists $hist{$letter}) {\n            $hist{$letter} += 1;\n  \
  \      } else {\n            $hist{$letter} = 1;\n        }\n    }\n    return %hist;\n\
  }"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %histo;\n    foreach my $letter (split(/\\s+/, $test)) {\n        $histo{$letter}++;\n\
  \    }\n    my $max = max(values %histo);\n    my %result;\n    foreach my $letter\
  \ (keys %histo) {\n        if ($histo{$letter} == $max) {\n            $result{$letter}\
  \ = $max;\n        }\n    }\n    return %result;\n}"
- "    my @letters = split(' ', $test);\n    my %histogram;\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %hist;\n    my @letters = split(' ', $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
  \ %hist) {\n        if ($hist{$key} > $max) {\n            $max = $hist{$key};\n\
  \        }\n    }\n    my %result;\n    foreach my $key (keys %hist) {\n       \
  \ if ($hist{$key} == $max) {\n            $result{$key} = $max;\n        }\n   \
  \ }\n    return %result;\n}"
- "    my @letters = split(/ /, $test);\n    my %histogram;\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n  \
  \          $max = $histogram{$letter};\n        }\n    }\n    my %result;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} == $max) {\n \
  \           $result{$letter} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %hash;\n    my @array = split(' ', $test);\n    foreach my $i (@array) {\n\
  \        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach my\
  \ $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n\
  \            @max_keys = ($key);\n        } elsif ($hash{$key} == $max) {\n    \
  \        push @max_keys, $key;\n        }\n    }\n    my %result;\n    foreach my\
  \ $key (@max_keys) {\n        $result{$key} = $max;\n    }\n    return %result;\n\
  }"
- "    my %hash = ();\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
  \ {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else {\n\
  \            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    my\
  \ @max_letters;\n    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter}\
  \ > $max) {\n            $max = $histogram{$letter};\n            @max_letters =\
  \ ($letter);\n        } elsif ($histogram{$letter} == $max) {\n            push\
  \ @max_letters, $letter;\n        }\n    }\n    my %result;\n    foreach my $letter\
  \ (@max_letters) {\n        $result{$letter} = $max;\n    }\n    return %result;\n\
  }"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    my\
  \ @max_letters;\n    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter}\
  \ > $max) {\n            $max = $histogram{$letter};\n            @max_letters =\
  \ ($letter);\n        } elsif ($histogram{$letter} == $max) {\n            push\
  \ @max_letters, $letter;\n        }\n    }\n    my %result;\n    foreach my $letter\
  \ (@max_letters) {\n        $result{$letter} = $max;\n    }\n    return %result;\n\
  }"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = max(values\
  \ %histogram);\n    my @max_letters = grep { $histogram{$_} == $max } keys %histogram;\n\
  \    my %result;\n    foreach my $letter (@max_letters) {\n        $result{$letter}\
  \ = $max;\n    }\n    return %result;\n}"
- "    my %histogram;\n    my %max;\n    my $max = 0;\n    my @letters = split(/ /,\
  \ $test);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
  \        if ($histogram{$letter} > $max) {\n            $max = $histogram{$letter};\n\
  \            %max = ($letter => $max);\n        } elsif ($histogram{$letter} ==\
  \ $max) {\n            $max{$letter} = $max;\n        }\n    }\n    return %max;\n\
  }"
- "    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
  \    foreach my $letter (keys %hist) {\n        if ($hist{$letter} > $max) {\n \
  \           $max = $hist{$letter};\n            @max_letters = ($letter);\n    \
  \    } elsif ($hist{$letter} == $max) {\n            push @max_letters, $letter;\n\
  \        }\n    }\n    my %max_hist;\n    foreach my $letter (@max_letters) {\n\
  \        $max_hist{$letter} = $max;\n    }\n    return %max_hist;\n}"
- "    my @letters = split(/\\s+/, $test);\n    my %histogram;\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %histo;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $histo{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
  \    foreach my $key (keys %histo) {\n        if ($histo{$key} > $max) {\n     \
  \       $max = $histo{$key};\n            @max_letters = ($key);\n        } elsif\
  \ ($histo{$key} == $max) {\n            push(@max_letters, $key);\n        }\n \
  \   }\n    my %result;\n    foreach my $letter (@max_letters) {\n        $result{$letter}\
  \ = $max;\n    }\n    return %result;\n}"
- "    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
  \ %hist) {\n        if ($hist{$key} > $max) {\n            $max = $hist{$key};\n\
  \        }\n    }\n    my %result;\n    foreach my $key (keys %hist) {\n       \
  \ if ($hist{$key} == $max) {\n            $result{$key} = $max;\n        }\n   \
  \ }\n    return %result;\n}"
- "    my %result;\n    my @letters = split(' ', $test);\n    foreach my $letter (@letters)\
  \ {\n        $result{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
  \ %result) {\n        if ($result{$key} > $max) {\n            $max = $result{$key};\n\
  \        }\n    }\n    my %result2;\n    foreach my $key (keys %result) {\n    \
  \    if ($result{$key} == $max) {\n            $result2{$key} = $result{$key};\n\
  \        }\n    }\n    return %result2;\n}"
- "    my %histogram;\n    my %max;\n    my $max = 0;\n    foreach my $letter (split('\
  \ ', $test)) {\n        $histogram{$letter}++;\n        if ($histogram{$letter}\
  \ > $max) {\n            $max = $histogram{$letter};\n            %max = ($letter\
  \ => $max);\n        } elsif ($histogram{$letter} == $max) {\n            $max{$letter}\
  \ = $max;\n        }\n    }\n    return %max;\n}"
- "    my %hist;\n    my %max;\n    my $max = 0;\n    foreach my $letter (split /\
  \ /, $test) {\n        $hist{$letter}++;\n        if ($hist{$letter} > $max) {\n\
  \            $max = $hist{$letter};\n            %max = ($letter => $max);\n   \
  \     } elsif ($hist{$letter} == $max) {\n            $max{$letter} = $max;\n  \
  \      }\n    }\n    return %max;\n}"
- "    my %hist;\n    foreach my $char (split(/\\s+/, $test)) {\n        $hist{$char}++;\n\
  \    }\n    my $max = max(values %hist);\n    my %result;\n    foreach my $key (keys\
  \ %hist) {\n        if ($hist{$key} == $max) {\n            $result{$key} = $max;\n\
  \        }\n    }\n    return %result;\n}"
- "    my %hist;\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
  \ {\n        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $letter\
  \ (keys %hist) {\n        if ($hist{$letter} > $max) {\n            $max = $hist{$letter};\n\
  \        }\n    }\n    my %result;\n    foreach my $letter (keys %hist) {\n    \
  \    if ($hist{$letter} == $max) {\n            $result{$letter} = $max;\n     \
  \   }\n    }\n    return %result;\n}"
- "    my %histogram;\n    foreach my $letter (split(/ /, $test)) {\n        $histogram{$letter}++;\n\
  \    }\n    return %histogram;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    my\
  \ @max_letters;\n    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter}\
  \ > $max) {\n            $max = $histogram{$letter};\n            @max_letters =\
  \ ($letter);\n        } elsif ($histogram{$letter} == $max) {\n            push\
  \ @max_letters, $letter;\n        }\n    }\n    my %max_letters;\n    foreach my\
  \ $letter (@max_letters) {\n        $max_letters{$letter} = $max;\n    }\n    return\
  \ %max_letters;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    for my $letter (@letters)\
  \ {\n        $histogram{$letter}++;\n    }\n    my $max = max(values %histogram);\n\
  \    my @max_letters = grep { $histogram{$_} == $max } keys %histogram;\n    return\
  \ { map { $_ => $max } @max_letters };\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    my\
  \ @max_letters;\n    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter}\
  \ > $max) {\n            $max = $histogram{$letter};\n            @max_letters =\
  \ ($letter);\n        } elsif ($histogram{$letter} == $max) {\n            push\
  \ @max_letters, $letter;\n        }\n    }\n    my %result;\n    foreach my $letter\
  \ (@max_letters) {\n        $result{$letter} = $max;\n    }\n    return %result;\n\
  }"
- "    my %hist;\n    my %max;\n    my $max = 0;\n    foreach my $letter (split(/\\\
  s+/, $test)) {\n        $hist{$letter}++;\n        if ($hist{$letter} > $max) {\n\
  \            $max = $hist{$letter};\n            %max = ($letter => $max);\n   \
  \     } elsif ($hist{$letter} == $max) {\n            $max{$letter} = $max;\n  \
  \      }\n    }\n    return %max;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n  \
  \          $max = $histogram{$letter};\n        }\n    }\n    my %result;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} == $max) {\n \
  \           $result{$letter} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %hash;\n    my @array = split(' ', $test);\n    foreach my $i (@array) {\n\
  \        $hash{$i}++;\n    }\n    my $max = 0;\n    foreach my $i (keys %hash) {\n\
  \        if ($hash{$i} > $max) {\n            $max = $hash{$i};\n        }\n   \
  \ }\n    my %result;\n    foreach my $i (keys %hash) {\n        if ($hash{$i} ==\
  \ $max) {\n            $result{$i} = $max;\n        }\n    }\n    return %result;\n\
  }"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        if (exists $histogram{$letter}) {\n            $histogram{$letter}\
  \ += 1;\n        } else {\n            $histogram{$letter} = 1;\n        }\n   \
  \ }\n    return \\%histogram;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n  \
  \          $max = $histogram{$letter};\n        }\n    }\n    my %result;\n    foreach\
  \ my $letter (keys %histogram) {\n        if ($histogram{$letter} == $max) {\n \
  \           $result{$letter} = $max;\n        }\n    }\n    return %result;\n}"
- "    my %result;\n    my @words = split(' ', $test);\n    foreach my $word (@words)\
  \ {\n        $result{$word}++;\n    }\n    return %result;\n}"
- "    my %hist;\n    my %max;\n    my $max = 0;\n    foreach my $char (split(/\\\
  s+/, $test)) {\n        $hist{$char}++;\n        if ($hist{$char} > $max) {\n  \
  \          $max = $hist{$char};\n            %max = ($char => $max);\n        }\
  \ elsif ($hist{$char} == $max) {\n            $max{$char} = $max;\n        }\n \
  \   }\n    return %max;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        if (exists $histogram{$letter}) {\n            $histogram{$letter}++;\n\
  \        } else {\n            $histogram{$letter} = 1;\n        }\n    }\n    my\
  \ $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %histogram) {\n\
  \        if ($histogram{$letter} > $max) {\n            $max = $histogram{$letter};\n\
  \            @max_letters = ($letter);\n        } elsif ($histogram{$letter} ==\
  \ $max) {\n            push @max_letters, $letter;\n        }\n    }\n    my %result;\n\
  \    foreach my $letter (@max_letters) {\n        $result{$letter} = $max;\n   \
  \ }\n    return %result;\n}"
- "    my %histogram;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
  \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}"
- "    my %histogram;\n    my @letters = split(' ', $test);\n    foreach my $letter\
  \ (@letters) {\n        if (exists $histogram{$letter}) {\n            $histogram{$letter}\
  \ += 1;\n        } else {\n            $histogram{$letter} = 1;\n        }\n   \
  \ }\n    return %histogram;\n}"
language: pl
name: HumanEval_111_histogram
prompt: "# Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n# of the letter with the most repetition and containing the corresponding\
  \ count.\n# If several letters have the same occurrence, return all of them.\n#\
  \ Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n# histogram('a b b\
  \ a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a': 2, 'b': 2}\n# histogram('b\
  \ b b b a') == {'b': 4}\n# histogram('') == {}\nsub histogram {\n    my($test) =\
  \ @_;\n"
stop_tokens:
- '

  sub'
- '

  #'
- '


  '
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
  \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" =>\
  \ 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"\
  ),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\"\
  \ => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
