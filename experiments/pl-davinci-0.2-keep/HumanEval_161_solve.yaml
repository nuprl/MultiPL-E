name: HumanEval_161_solve
language: humaneval_to_perl.py
prompt: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
  \ contains no letters, reverse the string.\n# The function should return the resulted\
  \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
  # solve(\"#a@C\") = \"#A@c\"\nsub solve {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n\
  \        if(eq_deeply($candidate->(\"AsDf\"),\"aSdF\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1234\"\
  ),\"4321\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"ab\"),\"AB\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#a@C\"),\"#A@c\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  #AsdfW^45\"),\"#aSDFw^45\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"#6@2\"),\"2@6#\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  #$a^D\"),\"#$A^d\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"#ccc\"),\"#CCC\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $rev = reverse $s;\n    my $r = '';\n    for my $i (0..length($s)-1)\
    \ {\n        my $c = substr($rev, $i, 1);\n        if ($c =~ /[a-z]/) {\n    \
    \        $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc\
    \ $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n\
    }", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n           \
    \ $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n  \
    \  return $r;\n}", "    my @s = split //, $s;\n    my @r;\n    my $has_letter\
    \ = 0;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n            $has_letter\
    \ = 1;\n            if ($c =~ /[a-z]/) {\n                push @r, uc $c;\n  \
    \          } else {\n                push @r, lc $c;\n            }\n        }\
    \ else {\n            push @r, $c;\n        }\n    }\n    if ($has_letter) {\n\
    \        return join '', @r;\n    } else {\n        return join '', reverse @r;\n\
    \    }\n}", "    my @s = split //, $s;\n    my @r;\n    my $has_letter = 0;\n\
    \    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n            $has_letter\
    \ = 1;\n            if ($c =~ /[a-z]/) {\n                push @r, uc $c;\n  \
    \          } else {\n                push @r, lc $c;\n            }\n        }\
    \ else {\n            push @r, $c;\n        }\n    }\n    return $has_letter ?\
    \ join('', @r) : reverse $s;\n}", "    my $rev = reverse $s;\n    my $res = '';\n\
    \    for (my $i = 0; $i < length $s; $i++) {\n        my $c = substr($s, $i, 1);\n\
    \        my $r = substr($rev, $i, 1);\n        if ($c =~ /[a-z]/) {\n        \
    \    $res .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $res .= lc\
    \ $c;\n        } else {\n            $res .= $c;\n        }\n    }\n    return\
    \ $res;\n}", "    my $result = '';\n    for my $c (split //, $s) {\n        if\
    \ ($c =~ /[a-z]/) {\n            $result .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $result .= lc $c;\n        } else {\n            $result .= $c;\n\
    \        }\n    }\n    return $result;\n}", "    my $r = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n      \
    \      $r .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r,\
    \ lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n    return\
    \ join '', @r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n       \
    \ if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n   \
    \ my $has_letter = 0;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n \
    \           $has_letter = 1;\n            if ($c =~ /[a-z]/) {\n             \
    \   push @r, uc $c;\n            } else {\n                push @r, lc $c;\n \
    \           }\n        } else {\n            push @r, $c;\n        }\n    }\n\
    \    if ($has_letter) {\n        return join '', @r;\n    } else {\n        return\
    \ join '', reverse @r;\n    }\n}", "    return reverse $s if $s !~ /[a-z]/i;\n\
    \    my @s = split //, $s;\n    for (my $i = 0; $i < @s; $i++) {\n        if ($s[$i]\
    \ =~ /[a-z]/i) {\n            $s[$i] =~ tr/a-zA-Z/A-Za-z/;\n        }\n    }\n\
    \    return join '', @s;\n}", "    my $result = \"\";\n    my $flag = 0;\n   \
    \ for my $c (split //, $s) {\n        if ($c =~ /[a-zA-Z]/) {\n            $flag\
    \ = 1;\n            if ($c =~ /[a-z]/) {\n                $result .= uc($c);\n\
    \            } else {\n                $result .= lc($c);\n            }\n   \
    \     } else {\n            $result .= $c;\n        }\n    }\n    if ($flag ==\
    \ 0) {\n        return scalar reverse $s;\n    }\n    return $result;\n}", " \
    \   my @s = split //, $s;\n    my @r;\n    for (@s) {\n        if (/[a-z]/) {\n\
    \            push @r, uc $_;\n        } elsif (/[A-Z]/) {\n            push @r,\
    \ lc $_;\n        } else {\n            push @r, $_;\n        }\n    }\n    return\
    \ join '', @r;\n}", "    my $result = \"\";\n    my $is_letter = 0;\n    for (my\
    \ $i = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n     \
    \   if ($c =~ /[a-zA-Z]/) {\n            $is_letter = 1;\n            if ($c =~\
    \ /[a-z]/) {\n                $c = uc($c);\n            } else {\n           \
    \     $c = lc($c);\n            }\n        }\n        $result .= $c;\n    }\n\
    \    if ($is_letter == 0) {\n        $result = reverse($result);\n    }\n    return\
    \ $result;\n}", "    my $r = \"\";\n    for my $c (split //, $s) {\n        if\
    \ ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s)\
    \ {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c\
    \ =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .=\
    \ $c;\n        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my\
    \ @r;\n    my $has_letter = 0;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i)\
    \ {\n            $has_letter = 1;\n            $c =~ tr/a-zA-Z/A-Za-z/;\n    \
    \    }\n        push @r, $c;\n    }\n    return $has_letter ? join('', @r) : scalar\
    \ reverse $s;\n}", "    my $result = '';\n    my @chars = split //, $s;\n    for\
    \ my $char (@chars) {\n        if ($char =~ /[a-z]/) {\n            $result .=\
    \ uc $char;\n        } elsif ($char =~ /[A-Z]/) {\n            $result .= lc $char;\n\
    \        } else {\n            $result .= $char;\n        }\n    }\n    return\
    \ $result;\n}", "    my $result = \"\";\n    my $is_letter = 0;\n    for (my $i\
    \ = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n        if\
    \ ($c =~ /[a-zA-Z]/) {\n            $is_letter = 1;\n            if ($c =~ /[a-z]/)\
    \ {\n                $c = uc($c);\n            } else {\n                $c =\
    \ lc($c);\n            }\n        }\n        $result .= $c;\n    }\n    if ($is_letter\
    \ == 0) {\n        $result = reverse($result);\n    }\n    return $result;\n}",
  "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~\
    \ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n\
    \            push @r, lc $c;\n        } else {\n            push @r, $c;\n   \
    \     }\n    }\n    return join '', @r;\n}", "    my $r = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n      \
    \      $r .= $c;\n        }\n    }\n    return $r;\n}", "    return reverse $s\
    \ if $s !~ /[a-z]/i;\n    return join '', map {\n        if (/[a-z]/) {\n    \
    \        tr/a-z/A-Z/;\n        } elsif (/[A-Z]/) {\n            tr/A-Z/a-z/;\n\
    \        } else {\n            $_;\n        }\n    } split //, $s;\n}", "    my\
    \ $r = \"\";\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n \
    \           $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my @arr = split //, $s;\n    my $r = '';\n    for my $c (@arr)\
    \ {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c\
    \ =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .=\
    \ $c;\n        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my\
    \ @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r,\
    \ uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n   \
    \     } else {\n            push @r, $c;\n        }\n    }\n    return join '',\
    \ @r;\n}", "    my $result = \"\";\n    my $has_letter = 0;\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-zA-Z]/) {\n            $has_letter = 1;\n \
    \           $result .= $c =~ /[a-z]/ ? uc $c : lc $c;\n        } else {\n    \
    \        $result .= $c;\n        }\n    }\n    return $has_letter ? $result :\
    \ reverse $s;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s)\
    \ {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n         \
    \   push @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my @s =\
    \ split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n        \
    \    push @r, lc $c;\n        } else {\n            push @r, $c;\n        }\n\
    \    }\n    return join '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    my $c = 0;\n    for my $i (0..$#s) {\n        if ($s[$i] =~ /[a-zA-Z]/) {\n\
    \            $c++;\n            push @r, $s[$i] =~ /[a-z]/ ? uc $s[$i] : lc $s[$i];\n\
    \        } else {\n            push @r, $s[$i];\n        }\n    }\n    return\
    \ $c ? join('', @r) : scalar reverse $s;\n}", "    my @s = split //, $s;\n   \
    \ my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push\
    \ @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n\
    \        } else {\n            push @r, $c;\n        }\n    }\n    return join\
    \ '', reverse @r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n    \
    \    if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return $r;\n}", "    my $r = '';\n    if ($s =~ /[a-zA-Z]/)\
    \ {\n        $r = reverse $s;\n    } else {\n        $r = reverse $s;\n    }\n\
    \    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s)\
    \ {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n         \
    \   push @r, $c;\n        }\n    }\n    if (@r == @s) {\n        return join '',\
    \ reverse @r;\n    } else {\n        return join '', @r;\n    }\n}", "    my $r\
    \ = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n\
    \        } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}",
  "    my @s = split //, $s;\n    my @r;\n    my $flag = 0;\n    for my $i (0..$#s)\
    \ {\n        if ($s[$i] =~ /[a-zA-Z]/) {\n            $flag = 1;\n           \
    \ if ($s[$i] =~ /[a-z]/) {\n                $s[$i] = uc $s[$i];\n            }\
    \ else {\n                $s[$i] = lc $s[$i];\n            }\n        }\n    \
    \    push @r, $s[$i];\n    }\n    if ($flag == 0) {\n        @r = reverse @r;\n\
    \    }\n    return join '', @r;\n}", "    my $r = '';\n    for my $c (split //,\
    \ $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r\
    \ .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split(//, $s);\n\
    \    my @r;\n    foreach my $c (@s) {\n        if ($c =~ /[a-z]/) {\n        \
    \    push @r, uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n            push @r,\
    \ lc($c);\n        } else {\n            push @r, $c;\n        }\n    }\n    return\
    \ join('', @r);\n}", "    my @s = split //, $s;\n    my @r;\n    my $flag = 0;\n\
    \    for my $c (@s) {\n        if ($c =~ /[a-zA-Z]/) {\n            $flag = 1;\n\
    \            if ($c =~ /[a-z]/) {\n                push @r, uc $c;\n         \
    \   } else {\n                push @r, lc $c;\n            }\n        } else {\n\
    \            push @r, $c;\n        }\n    }\n    if ($flag) {\n        return\
    \ join '', @r;\n    } else {\n        return join '', reverse @r;\n    }\n}",
  "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my $r = reverse $s;\n    return $r if $r =~ /\\d/;\n    $r =~\
    \ s/([a-z])/\\U$1/g;\n    $r =~ s/([A-Z])/\\L$1/g;\n    return $r;\n}", "    my\
    \ @s = split //, $s;\n    my @r;\n    for (@s) {\n        if (/[a-z]/) {\n   \
    \         push @r, uc $_;\n        } elsif (/[A-Z]/) {\n            push @r, lc\
    \ $_;\n        } else {\n            push @r, $_;\n        }\n    }\n    return\
    \ @r ? join '', @r : reverse $s;\n}", "    my $r = '';\n    for my $c (split //,\
    \ $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r\
    \ .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n \
    \   my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push\
    \ @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n\
    \        } else {\n            push @r, $c;\n        }\n    }\n    return join\
    \ '', @r;\n}", "    my @s = split //, $s;\n    my @result;\n    my $has_letter\
    \ = 0;\n    for my $c (@s) {\n        if ($c =~ /[a-zA-Z]/) {\n            $has_letter\
    \ = 1;\n            if ($c =~ /[a-z]/) {\n                push @result, uc $c;\n\
    \            } else {\n                push @result, lc $c;\n            }\n \
    \       } else {\n            push @result, $c;\n        }\n    }\n    if ($has_letter)\
    \ {\n        return join '', @result;\n    } else {\n        return join '', reverse\
    \ @result;\n    }\n}", "    my @s = split //, $s;\n    my @r;\n    my $has_letter\
    \ = 0;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n            $has_letter\
    \ = 1;\n            if ($c =~ /[a-z]/) {\n                push @r, uc $c;\n  \
    \          } else {\n                push @r, lc $c;\n            }\n        }\
    \ else {\n            push @r, $c;\n        }\n    }\n    if ($has_letter) {\n\
    \        return join '', @r;\n    } else {\n        return join '', reverse @r;\n\
    \    }\n}", "    my @a = split //, $s;\n    my @b = map {\n        if (/[a-z]/)\
    \ {\n            uc $_;\n        } elsif (/[A-Z]/) {\n            lc $_;\n   \
    \     } else {\n            $_;\n        }\n    } @a;\n    return join '', @b;\n\
    }", "    my $result = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            $result .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n      \
    \      $result .= lc $c;\n        } else {\n            $result .= $c;\n     \
    \   }\n    }\n    return $result;\n}", "    my $r = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n      \
    \      $r .= $c;\n        }\n    }\n    return $r;\n}", "    my $r = '';\n   \
    \ my $i = 0;\n    my $l = length($s);\n    while ($i < $l) {\n        my $c =\
    \ substr($s, $i, 1);\n        if ($c =~ /[a-z]/) {\n            $r .= uc($c);\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc($c);\n        } else\
    \ {\n            $r .= $c;\n        }\n        $i++;\n    }\n    return $r;\n}",
  "    my @s = split //, $s;\n    my @r;\n    my $l = 0;\n    for (@s) {\n       \
    \ if (/[a-zA-Z]/) {\n            $l = 1;\n            push @r, $_ =~ /[a-z]/ ?\
    \ uc $_ : lc $_;\n        } else {\n            push @r, $_;\n        }\n    }\n\
    \    return $l ? join '', @r : reverse $s;\n}", "    my $r = '';\n    for my $c\
    \ (split '', $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n \
    \       } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n\
    \            $r .= $c;\n        }\n    }\n    return scalar reverse $r;\n}", " \
    \   $s = reverse $s;\n    $s =~ s/([a-zA-Z])/uc($1) eq $1 ? lc($1) : uc($1)/ge;\n\
    \    return $s;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s)\
    \ {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n         \
    \   push @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my $r =\
    \ \"\";\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n\
    \        } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}",
  "    my $result = \"\";\n    my $is_letter = 0;\n    for my $i (0..length($s)-1)\
    \ {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-zA-Z]/) {\n   \
    \         $is_letter = 1;\n            if ($c =~ /[a-z]/) {\n                $c\
    \ = uc($c);\n            } else {\n                $c = lc($c);\n            }\n\
    \        }\n        $result = $c . $result;\n    }\n    if ($is_letter == 0) {\n\
    \        $result = reverse($result);\n    }\n    return $result;\n}", "    my\
    \ @arr = split //, $s;\n    my $len = scalar @arr;\n    my $i = 0;\n    while\
    \ ($i < $len) {\n        if ($arr[$i] =~ /[a-zA-Z]/) {\n            if ($arr[$i]\
    \ =~ /[a-z]/) {\n                $arr[$i] = uc $arr[$i];\n            }\n    \
    \        else {\n                $arr[$i] = lc $arr[$i];\n            }\n    \
    \    }\n        $i++;\n    }\n    return join '', @arr;\n}", "    my $r = '';\n\
    \    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r\
    \ .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n   \
    \     } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}", " \
    \   my @s = split //, $s;\n    my @r;\n    my $has_letter = 0;\n    for my $c\
    \ (@s) {\n        if ($c =~ /[a-z]/i) {\n            $has_letter = 1;\n      \
    \      if ($c =~ /[a-z]/) {\n                push @r, uc $c;\n            } else\
    \ {\n                push @r, lc $c;\n            }\n        } else {\n      \
    \      push @r, $c;\n        }\n    }\n    return $has_letter ? join('', @r) :\
    \ scalar reverse $s;\n}", "    my @a = split //, $s;\n    my @b = map { $_ =~\
    \ /[a-z]/ ? uc $_ : $_ =~ /[A-Z]/ ? lc $_ : $_ } @a;\n    return join '', @b;\n\
    }", "    my $result = \"\";\n    my $has_letter = 0;\n    for my $c (split //,\
    \ $s) {\n        if ($c =~ /[a-zA-Z]/) {\n            $has_letter = 1;\n     \
    \       $result .= $c =~ /[a-z]/ ? uc $c : lc $c;\n        } else {\n        \
    \    $result .= $c;\n        }\n    }\n    return $has_letter ? $result : scalar\
    \ reverse $s;\n}", "    my $r = '';\n    for my $c (split '', $s) {\n        if\
    \ ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return scalar reverse $r;\n}", "    my @arr = split //, $s;\n\
    \    my @res;\n    my $flag = 0;\n    for my $c (@arr) {\n        if ($c =~ /[a-zA-Z]/)\
    \ {\n            $flag = 1;\n            if ($c =~ /[a-z]/) {\n              \
    \  $c =~ tr/a-z/A-Z/;\n            } else {\n                $c =~ tr/A-Z/a-z/;\n\
    \            }\n        }\n        push @res, $c;\n    }\n    if ($flag == 0)\
    \ {\n        @res = reverse @res;\n    }\n    return join '', @res;\n}", "   \
    \ my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n        \
    \    push @r, lc $c;\n        } else {\n            push @r, $c;\n        }\n\
    \    }\n    return join '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else\
    \ {\n            push @r, $c;\n        }\n    }\n    return join '', @r;\n}",
  "    my $r = \"\";\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ scalar reverse $r;\n}", "    my @s = split //, $s;\n    my @r;\n    my $n =\
    \ 0;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n            $n++;\n\
    \            if ($c =~ /[a-z]/) {\n                push @r, uc $c;\n         \
    \   } else {\n                push @r, lc $c;\n            }\n        } else {\n\
    \            push @r, $c;\n        }\n    }\n    if ($n == 0) {\n        return\
    \ reverse $s;\n    } else {\n        return join '', @r;\n    }\n}", "    my $result\
    \ = \"\";\n    my $has_letter = 0;\n    for my $c (split //, $s) {\n        if\
    \ ($c =~ /[a-zA-Z]/) {\n            $has_letter = 1;\n            $result .= $c\
    \ =~ /[a-z]/ ? uc $c : lc $c;\n        } else {\n            $result .= $c;\n\
    \        }\n    }\n    return $has_letter ? $result : scalar reverse $s;\n}",
  "    my @chars = split //, $s;\n    my @result;\n    for my $char (@chars) {\n \
    \       if ($char =~ /[a-z]/) {\n            push @result, uc $char;\n       \
    \ } elsif ($char =~ /[A-Z]/) {\n            push @result, lc $char;\n        }\
    \ else {\n            push @result, $char;\n        }\n    }\n    return join\
    \ '', @result;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n       \
    \ if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n   \
    \ for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else\
    \ {\n            push @r, $c;\n        }\n    }\n    return join '', @r;\n}",
  "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n    \
    \    if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n            push\
    \ @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my $r = '';\n \
    \   for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .=\
    \ uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n      \
    \  } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}", "  \
    \  my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~\
    \ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n\
    \            push @r, lc $c;\n        } else {\n            push @r, $c;\n   \
    \     }\n    }\n    return join '', @r;\n}", "    my $r = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n      \
    \      $r .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r,\
    \ lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n    return\
    \ join '', @r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n       \
    \ if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s)\
    \ {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c\
    \ =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .=\
    \ $c;\n        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my\
    \ @r;\n    my $flag = 0;\n    for my $i (0..$#s) {\n        if ($s[$i] =~ /[a-zA-Z]/)\
    \ {\n            $flag = 1;\n            if ($s[$i] =~ /[a-z]/) {\n          \
    \      $s[$i] = uc $s[$i];\n            } else {\n                $s[$i] = lc\
    \ $s[$i];\n            }\n        }\n        push @r, $s[$i];\n    }\n    if ($flag\
    \ == 0) {\n        @r = reverse @r;\n    }\n    return join '', @r;\n}", "   \
    \ my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n    \
    \    if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n            push\
    \ @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my $result = '';\n\
    \    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $result\
    \ .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $result .= lc $c;\n\
    \        } else {\n            $result .= $c;\n        }\n    }\n    return $result;\n\
    }", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c\
    \ =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            push @r, lc $c;\n        } else {\n            push @r, $c;\n\
    \        }\n    }\n    return join '', @r;\n}", "    my @s = split //, $s;\n \
    \   my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push\
    \ @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n\
    \        } else {\n            push @r, $c;\n        }\n    }\n    return join\
    \ '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n\
    \        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c\
    \ =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n            push\
    \ @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r,\
    \ lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n    return\
    \ join '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s)\
    \ {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n         \
    \   push @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my $r =\
    \ '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n        \
    \    $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n\
    \        } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}",
  "    my @s = split //, $s;\n    my @r;\n    my $has_letter = 0;\n    for my $c (@s)\
    \ {\n        if ($c =~ /[a-z]/i) {\n            $has_letter = 1;\n           \
    \ if ($c =~ /[a-z]/) {\n                push @r, uc $c;\n            } else {\n\
    \                push @r, lc $c;\n            }\n        } else {\n          \
    \  push @r, $c;\n        }\n    }\n    if ($has_letter) {\n        return join\
    \ '', @r;\n    } else {\n        return join '', reverse @r;\n    }\n}", "   \
    \ my $result = '';\n    for my $i (0..length($s)-1) {\n        my $c = substr($s,\
    \ $i, 1);\n        if ($c =~ /[a-z]/) {\n            $result .= uc($c);\n    \
    \    } elsif ($c =~ /[A-Z]/) {\n            $result .= lc($c);\n        } else\
    \ {\n            $result .= $c;\n        }\n    }\n    return $result;\n}", " \
    \   my $result = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            $result .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n      \
    \      $result .= lc $c;\n        } else {\n            $result .= $c;\n     \
    \   }\n    }\n    return $result;\n}", "    my $res = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $res .= uc $c;\n      \
    \  } elsif ($c =~ /[A-Z]/) {\n            $res .= lc $c;\n        } else {\n \
    \           $res .= $c;\n        }\n    }\n    return $res;\n}", "    my $r =\
    \ '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n        \
    \    $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n\
    \        } else {\n            $r .= $c;\n        }\n    }\n    return scalar\
    \ reverse $r;\n}", "    my $r = \"\";\n    my $l = length($s);\n    for (my $i\
    \ = 0; $i < $l; $i++) {\n        my $c = substr($s, $i, 1);\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n \
    \           $r .= lc($c);\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my\
    \ $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n     \
    \   } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n\
    \            push @r, $c;\n        }\n    }\n    return join '', @r;\n}", "  \
    \  if($s =~ /[a-zA-Z]/) {\n        $s =~ tr/a-zA-Z/A-Za-z/;\n    } else {\n  \
    \      $s = reverse $s;\n    }\n    return $s;\n}", "    my $r = reverse $s;\n\
    \    $r =~ tr/a-zA-Z/A-Za-z/;\n    return $r;\n}", "    my @s = split //, $s;\n\
    \    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push\
    \ @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n\
    \        } else {\n            push @r, $c;\n        }\n    }\n    if (@r) {\n\
    \        return join '', @r;\n    } else {\n        return scalar reverse $s;\n\
    \    }\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n   \
    \     if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n            push\
    \ @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my $r = '';\n \
    \   for (my $i = length($s) - 1; $i >= 0; $i--) {\n        my $c = substr($s,\
    \ $i, 1);\n        if ($c =~ /[a-z]/) {\n            $r .= uc($c);\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            $r .= lc($c);\n        } else {\n     \
    \       $r .= $c;\n        }\n    }\n    return $r;\n}", "    return reverse $s\
    \ if $s !~ /[a-z]/i;\n    $s =~ s/([a-z])/uc $1/egi;\n    $s =~ s/([A-Z])/lc $1/eg;\n\
    \    return $s;\n}", "    my $rev = '';\n    for my $c (split //, $s) {\n    \
    \    if ($c =~ /[a-z]/) {\n            $rev .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $rev .= lc $c;\n        } else {\n            $rev .=\
    \ $c;\n        }\n    }\n    return $rev;\n}", "    my $reversed = reverse $s;\n\
    \    my $result = \"\";\n    for (my $i = 0; $i < length $s; $i++) {\n       \
    \ my $c = substr($reversed, $i, 1);\n        if ($c =~ /[a-z]/) {\n          \
    \  $result .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $result .=\
    \ lc $c;\n        } else {\n            $result .= $c;\n        }\n    }\n   \
    \ return $result;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n    \
    \    if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return $r;\n}", "    if ($s =~ /[a-zA-Z]/) {\n        $s =~\
    \ tr/a-zA-Z/A-Za-z/;\n    } else {\n        $s = reverse $s;\n    }\n    return\
    \ $s;\n}", "    my $result = \"\";\n    my $has_letter = 0;\n    for (my $i =\
    \ 0; $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n        if\
    \ ($c =~ /[a-zA-Z]/) {\n            $has_letter = 1;\n            if ($c =~ /[a-z]/)\
    \ {\n                $c = uc($c);\n            } else {\n                $c =\
    \ lc($c);\n            }\n        }\n        $result = $c . $result;\n    }\n\
    \    if ($has_letter == 0) {\n        $result = reverse($result);\n    }\n   \
    \ return $result;\n}", "    my $r = \"\";\n    foreach my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    my $has_letter = 0;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n\
    \            $has_letter = 1;\n            if ($c =~ /[a-z]/) {\n            \
    \    push @r, uc $c;\n            } else {\n                push @r, lc $c;\n\
    \            }\n        } else {\n            push @r, $c;\n        }\n    }\n\
    \    if ($has_letter) {\n        return join '', @r;\n    } else {\n        return\
    \ join '', reverse @r;\n    }\n}", "    my @a = split //, $s;\n    my @b = ();\n\
    \    for my $i (0..$#a) {\n        if ($a[$i] =~ /[a-z]/) {\n            $b[$i]\
    \ = uc $a[$i];\n        } elsif ($a[$i] =~ /[A-Z]/) {\n            $b[$i] = lc\
    \ $a[$i];\n        } else {\n            $b[$i] = $a[$i];\n        }\n    }\n\
    \    return join '', @b;\n}", "    my @s = split //, $s;\n    my @r;\n    for\
    \ my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n  \
    \      } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else\
    \ {\n            push @r, $c;\n        }\n    }\n    return join '', @r;\n}",
  "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my $res = \"\";\n    my $has_letter = 0;\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-zA-Z]/) {\n            $has_letter = 1;\n \
    \           $res .= $c =~ /[a-z]/ ? uc $c : lc $c;\n        } else {\n       \
    \     $res .= $c;\n        }\n    }\n    return $has_letter ? $res : scalar reverse\
    \ $s;\n}", "    my $result = \"\";\n    my $is_letter = 0;\n    for my $i (0..length($s)-1)\
    \ {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-zA-Z]/) {\n   \
    \         $is_letter = 1;\n            if ($c =~ /[a-z]/) {\n                $c\
    \ = uc($c);\n            } else {\n                $c = lc($c);\n            }\n\
    \        }\n        $result = $c . $result;\n    }\n    if ($is_letter == 0) {\n\
    \        $result = reverse($result);\n    }\n    return $result;\n}", "    my\
    \ $r = \"\";\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n \
    \           $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n    \
    \    if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n            push\
    \ @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    foreach my $c (@s) {\n        if ($c =~ /[a-z]/) {\n  \
    \          push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push\
    \ @r, lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n \
    \   return join '', @r;\n}", "    my $s_rev = reverse $s;\n    my $s_rev_case\
    \ = '';\n    for my $c (split //, $s_rev) {\n        if ($c =~ /[a-z]/) {\n  \
    \          $s_rev_case .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n        \
    \    $s_rev_case .= lc $c;\n        } else {\n            $s_rev_case .= $c;\n\
    \        }\n    }\n    return $s_rev_case;\n}", "    my $r = '';\n    for my $c\
    \ (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n \
    \       } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n\
    \            $r .= $c;\n        }\n    }\n    return $r;\n}", "    my $r = reverse\
    \ $s;\n    $r =~ tr/a-zA-Z/A-Za-z/;\n    return $r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r,\
    \ lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n    return\
    \ join '', @r;\n}", "    my $result = \"\";\n    my $flag = 0;\n    for (my $i\
    \ = 0; $i < length($s); $i++) {\n        if ($s =~ /[a-zA-Z]/) {\n           \
    \ $flag = 1;\n        }\n        if ($s =~ /[a-z]/) {\n            $result .=\
    \ uc(substr($s, $i, 1));\n        } elsif ($s =~ /[A-Z]/) {\n            $result\
    \ .= lc(substr($s, $i, 1));\n        } else {\n            $result .= substr($s,\
    \ $i, 1);\n        }\n    }\n    if ($flag == 0) {\n        $result = reverse($result);\n\
    \    }\n    return $result;\n}", "    my $r = '';\n    for my $c (split //, $s)\
    \ {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c\
    \ =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .=\
    \ $c;\n        }\n    }\n    return $r;\n}", "    my $res = '';\n    for my $c\
    \ (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $res .= uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            $res .= lc $c;\n        } else\
    \ {\n            $res .= $c;\n        }\n    }\n    return $res;\n}", "    my\
    \ $r = \"\";\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n \
    \           $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my $result = '';\n    for my $c (split //, $s) {\n        if ($c\
    \ =~ /[a-z]/) {\n            $result .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $result .= lc $c;\n        } else {\n            $result .= $c;\n\
    \        }\n    }\n    return $result;\n}", "    my @s = split //, $s;\n    my\
    \ @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r,\
    \ uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n   \
    \     } else {\n            push @r, $c;\n        }\n    }\n    return join '',\
    \ @r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n  \
    \          $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my\
    \ $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n     \
    \   } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n\
    \            push @r, $c;\n        }\n    }\n    return join '', @r;\n}", "  \
    \  if($s =~ /[a-zA-Z]/) {\n        return join('', map { $_ =~ /[a-zA-Z]/ ? ucfirst\
    \ lc $_ : $_ } split //, $s);\n    } else {\n        return scalar reverse $s;\n\
    \    }\n}", "    my $r = reverse $s;\n    $r =~ tr/[a-zA-Z]/[A-Za-z]/;\n    return\
    \ $r;\n}", "    my @s = split(//, $s);\n    my @r;\n    for my $c (@s) {\n   \
    \     if ($c =~ /[a-z]/) {\n            push @r, uc($c);\n        } elsif ($c\
    \ =~ /[A-Z]/) {\n            push @r, lc($c);\n        } else {\n            push\
    \ @r, $c;\n        }\n    }\n    return join('', @r);\n}", "    my @s = split(//,\
    \ $s);\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n     \
    \       push @r, uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n            push\
    \ @r, lc($c);\n        } else {\n            push @r, $c;\n        }\n    }\n\
    \    return join('', @r);\n}", "    my $res = \"\";\n    for my $i (0..length($s)-1)\
    \ {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/) {\n      \
    \      $res .= uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n            $res .=\
    \ lc($c);\n        } else {\n            $res .= $c;\n        }\n    }\n    return\
    \ $res;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c\
    \ =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n\
    \            $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    return reverse($s) if $s !~ /[a-zA-Z]/;\n   \
    \ $s =~ s/([a-zA-Z])/uc($1) eq $1 ? lc($1) : uc($1)/ge;\n    return $s;\n}", " \
    \   my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~\
    \ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n\
    \            push @r, lc $c;\n        } else {\n            push @r, $c;\n   \
    \     }\n    }\n    return join '', @r;\n}", "    my $result = \"\";\n    my $has_letter\
    \ = 0;\n    for my $c (split //, $s) {\n        if ($c =~ /[a-zA-Z]/) {\n    \
    \        $has_letter = 1;\n            if ($c =~ /[a-z]/) {\n                $result\
    \ .= uc($c);\n            } else {\n                $result .= lc($c);\n     \
    \       }\n        } else {\n            $result .= $c;\n        }\n    }\n  \
    \  if ($has_letter) {\n        return $result;\n    } else {\n        return reverse($s);\n\
    \    }\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n  \
    \          $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my @arr = split(//, $s);\n    my $flag = 0;\n\
    \    for my $i (0..$#arr) {\n        if ($arr[$i] =~ /[a-zA-Z]/) {\n         \
    \   $flag = 1;\n            if ($arr[$i] =~ /[a-z]/) {\n                $arr[$i]\
    \ = uc($arr[$i]);\n            } else {\n                $arr[$i] = lc($arr[$i]);\n\
    \            }\n        }\n    }\n    if ($flag == 0) {\n        @arr = reverse(@arr);\n\
    \    }\n    return join(\"\", @arr);\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    my $flag = 0;\n    for my $c (@s) {\n        if ($c =~ /[a-zA-Z]/) {\n  \
    \          $flag = 1;\n            if ($c =~ /[a-z]/) {\n                push\
    \ @r, uc $c;\n            } else {\n                push @r, lc $c;\n        \
    \    }\n        } else {\n            push @r, $c;\n        }\n    }\n    if ($flag)\
    \ {\n        return join '', @r;\n    } else {\n        return join '', reverse\
    \ @r;\n    }\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if\
    \ ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n   \
    \ for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else\
    \ {\n            push @r, $c;\n        }\n    }\n    return join '', @r;\n}",
  "    my $result = \"\";\n    my $has_letter = 0;\n    for my $i (0..length($s)-1)\
    \ {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-zA-Z]/) {\n   \
    \         $has_letter = 1;\n            if ($c =~ /[a-z]/) {\n               \
    \ $c = uc($c);\n            } else {\n                $c = lc($c);\n         \
    \   }\n        }\n        $result = $c . $result;\n    }\n    if (!$has_letter)\
    \ {\n        $result = reverse($result);\n    }\n    return $result;\n}", "  \
    \  my $r = \"\";\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n    \
    \    if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n            push\
    \ @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r,\
    \ lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n    return\
    \ join '', @r;\n}", "    my $res = \"\";\n    for (my $i = 0; $i < length($s);\
    \ $i++) {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/) {\n\
    \            $res .= uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n            $res\
    \ .= lc($c);\n        } else {\n            $res .= $c;\n        }\n    }\n  \
    \  return $res;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s)\
    \ {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n         \
    \   push @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my @s =\
    \ split(//, $s);\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            push @r, uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n       \
    \     push @r, lc($c);\n        } else {\n            push @r, $c;\n        }\n\
    \    }\n    return join('', @r);\n}", "    my $r = '';\n    for my $c (split //,\
    \ $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r\
    \ .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n \
    \   my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push\
    \ @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n\
    \        } else {\n            push @r, $c;\n        }\n    }\n    return join\
    \ '', @r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c\
    \ =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n\
    \            $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my $result = '';\n    for my $c (split //, $s)\
    \ {\n        if ($c =~ /[a-z]/) {\n            $result .= uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            $result .= lc $c;\n        } else {\n       \
    \     $result .= $c;\n        }\n    }\n    return scalar reverse $result;\n}",
  "    my $result = \"\";\n    my $has_letter = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i++) {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-zA-Z]/) {\n\
    \            $has_letter = 1;\n            if ($c =~ /[a-z]/) {\n            \
    \    $c = uc($c);\n            } else {\n                $c = lc($c);\n      \
    \      }\n        }\n        $result = $c . $result;\n    }\n    if ($has_letter\
    \ == 0) {\n        $result = reverse($result);\n    }\n    return $result;\n}",
  "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~\
    \ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n\
    \            push @r, lc $c;\n        } else {\n            push @r, $c;\n   \
    \     }\n    }\n    return join '', @r;\n}", "    my $r = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n      \
    \      $r .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r,\
    \ lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n    return\
    \ join '', @r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n       \
    \ if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s)\
    \ {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c\
    \ =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .=\
    \ $c;\n        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my\
    \ @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r,\
    \ uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n   \
    \     } else {\n            push @r, $c;\n        }\n    }\n    return join '',\
    \ @r;\n}", "    my $result = \"\";\n    my $is_letter = 0;\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-zA-Z]/) {\n            $is_letter = 1;\n  \
    \          $result .= $c =~ /[a-z]/ ? uc $c : lc $c;\n        } else {\n     \
    \       $result .= $c;\n        }\n    }\n    return $is_letter ? $result : scalar\
    \ reverse $s;\n}", "    my $r = \"\";\n    if ($s =~ /[a-zA-Z]/) {\n        $r\
    \ = reverse $s;\n    } else {\n        $r = reverse $s;\n    }\n    return $r;\n\
    }", "    my @s = split //, $s;\n    my @r;\n    my $l = 0;\n    for my $i (0..$#s)\
    \ {\n        if ($s[$i] =~ /[a-zA-Z]/) {\n            $l = 1;\n            push\
    \ @r, $s[$i] =~ /[a-z]/ ? uc $s[$i] : lc $s[$i];\n        } else {\n         \
    \   push @r, $s[$i];\n        }\n    }\n    return $l ? join '', @r : reverse\
    \ $s;\n}", "    return reverse($s) if $s !~ /[a-zA-Z]/;\n    $s =~ s/([a-zA-Z])/uc($1)\
    \ eq $1 ? lc($1) : uc($1)/eg;\n    return $s;\n}", "    my @s = split //, $s;\n\
    \    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push\
    \ @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n\
    \        } else {\n            push @r, $c;\n        }\n    }\n    return join\
    \ '', @r;\n}", "    my $result = '';\n    for my $c (split //, $s) {\n       \
    \ if ($c =~ /[a-z]/) {\n            $result .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $result .= lc $c;\n        } else {\n            $result\
    \ .= $c;\n        }\n    }\n    return $result;\n}", "    my $result = '';\n \
    \   for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $result\
    \ .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $result .= lc $c;\n\
    \        } else {\n            $result .= $c;\n        }\n    }\n    return scalar\
    \ reverse $result;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n   \
    \     if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return $r;\n}", "    my $r = \"\";\n    for my $c (split //,\
    \ $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r\
    \ .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n \
    \   my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push\
    \ @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n\
    \        } else {\n            push @r, $c;\n        }\n    }\n    return join\
    \ '', @r;\n}", "    my $result = \"\";\n    my $has_letter = 0;\n    for my $c\
    \ (split //, $s) {\n        if ($c =~ /[a-zA-Z]/) {\n            $has_letter =\
    \ 1;\n            if ($c =~ /[a-z]/) {\n                $result .= uc $c;\n  \
    \          } else {\n                $result .= lc $c;\n            }\n      \
    \  } else {\n            $result .= $c;\n        }\n    }\n    if ($has_letter)\
    \ {\n        return $result;\n    } else {\n        return reverse $s;\n    }\n\
    }", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n           \
    \ $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n  \
    \  return $r;\n}", "    my $res = '';\n    for (my $i = 0; $i < length($s); $i++)\
    \ {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/) {\n      \
    \      $res .= uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n            $res .=\
    \ lc($c);\n        } else {\n            $res .= $c;\n        }\n    }\n    return\
    \ $res;\n}", "    my $result = \"\";\n    my $has_letter = 0;\n    for my $i (0..length($s)-1)\
    \ {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-zA-Z]/) {\n   \
    \         $has_letter = 1;\n            if ($c =~ /[a-z]/) {\n               \
    \ $c = uc($c);\n            } else {\n                $c = lc($c);\n         \
    \   }\n        }\n        $result = $c . $result;\n    }\n    if (!$has_letter)\
    \ {\n        $result = reverse($result);\n    }\n    return $result;\n}", "  \
    \  my @arr = split //, $s;\n    my $rev = '';\n    for my $i (0..$#arr) {\n  \
    \      if ($arr[$i] =~ /[a-zA-Z]/) {\n            $rev .= $arr[$i] =~ /[a-z]/\
    \ ? uc $arr[$i] : lc $arr[$i];\n        } else {\n            $rev .= $arr[$i];\n\
    \        }\n    }\n    return $rev;\n}", "    my $result = \"\";\n    my $has_letter\
    \ = 0;\n    for my $c (split //, $s) {\n        if ($c =~ /[a-zA-Z]/) {\n    \
    \        $has_letter = 1;\n            $result .= $c =~ /[a-z]/ ? uc $c : lc $c;\n\
    \        } else {\n            $result .= $c;\n        }\n    }\n    return $has_letter\
    \ ? $result : scalar reverse $s;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    my $has_letter = 0;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/i) {\n\
    \            $has_letter = 1;\n            if ($c =~ /[a-z]/) {\n            \
    \    push @r, uc $c;\n            } else {\n                push @r, lc $c;\n\
    \            }\n        } else {\n            push @r, $c;\n        }\n    }\n\
    \    return $has_letter ? join '', @r : reverse $s;\n}", "    my @s = split(//,\
    \ $s);\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n     \
    \       push @r, uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n            push\
    \ @r, lc($c);\n        } else {\n            push @r, $c;\n        }\n    }\n\
    \    return join('', @r);\n}", "    my @s = split //, $s;\n    my @r;\n    for\
    \ my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n  \
    \      } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else\
    \ {\n            push @r, $c;\n        }\n    }\n    return join '', @r;\n}",
  "    my $res = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $res .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $res\
    \ .= lc $c;\n        } else {\n            $res .= $c;\n        }\n    }\n   \
    \ return $res;\n}", "    my @a = split //, $s;\n    my @b = map { /[a-z]/ ? uc\
    \ $_ : /[A-Z]/ ? lc $_ : $_ } @a;\n    return join \"\", @b;\n}", "    my $result\
    \ = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      $result .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $result\
    \ .= lc $c;\n        } else {\n            $result .= $c;\n        }\n    }\n\
    \    return $result;\n}", "    my $result = \"\";\n    my $is_letter = 0;\n  \
    \  for my $c (split //, $s) {\n        if ($c =~ /[a-zA-Z]/) {\n            $is_letter\
    \ = 1;\n            $result .= $c =~ /[a-z]/ ? uc $c : lc $c;\n        } else\
    \ {\n            $result .= $c;\n        }\n    }\n    return $is_letter ? $result\
    \ : reverse $result;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c\
    \ (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n   \
    \         push @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my\
    \ @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n        \
    \    push @r, lc $c;\n        } else {\n            push @r, $c;\n        }\n\
    \    }\n    return join '', @r;\n}", "    my $r = '';\n    for my $c (split //,\
    \ $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r\
    \ .= $c;\n        }\n    }\n    return scalar reverse $r;\n}", "    my $r = '';\n\
    \    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r\
    \ .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n   \
    \     } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}", " \
    \   my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~\
    \ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n\
    \            push @r, lc $c;\n        } else {\n            push @r, $c;\n   \
    \     }\n    }\n    return join '', @r;\n}", "    my @s = split //, $s;\n    my\
    \ @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r,\
    \ uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n   \
    \     } else {\n            push @r, $c;\n        }\n    }\n    return join '',\
    \ @r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n  \
    \          $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n      \
    \      $r .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split(//,\
    \ $s);\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n     \
    \       push @r, uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n            push\
    \ @r, lc($c);\n        } else {\n            push @r, $c;\n        }\n    }\n\
    \    return join('', @r);\n}", "    my $result = \"\";\n    my $has_letter = 0;\n\
    \    for my $c (split //, $s) {\n        if ($c =~ /[a-zA-Z]/) {\n           \
    \ $has_letter = 1;\n            if ($c =~ /[a-z]/) {\n                $result\
    \ .= uc($c);\n            } else {\n                $result .= lc($c);\n     \
    \       }\n        } else {\n            $result .= $c;\n        }\n    }\n  \
    \  if ($has_letter) {\n        return $result;\n    } else {\n        return reverse($s);\n\
    \    }\n}", "    my $result = '';\n    for my $c (split //, $s) {\n        if\
    \ ($c =~ /[a-z]/) {\n            $result .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $result .= lc $c;\n        } else {\n            $result .= $c;\n\
    \        }\n    }\n    return $result;\n}", "    my $r = reverse $s;\n    $r =~\
    \ tr/[a-z]/[A-Z]/ if $r =~ /[a-z]/;\n    $r =~ tr/[A-Z]/[a-z]/ if $r =~ /[A-Z]/;\n\
    \    return $r;\n}", "    my $r = '';\n    for (my $i = length($s) - 1; $i >=\
    \ 0; $i--) {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n            $r\
    \ .= lc($c);\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my $res = \"\";\n    foreach my $c (split //, $s) {\n        if\
    \ ($c =~ /[a-z]/) {\n            $res .= uc($c);\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $res .= lc($c);\n        } else {\n            $res .= $c;\n\
    \        }\n    }\n    return $res;\n}", "    my $result = \"\";\n    my $has_letter\
    \ = 0;\n    for my $i (0..length($s)-1) {\n        my $c = substr($s, $i, 1);\n\
    \        if ($c =~ /[a-zA-Z]/) {\n            $has_letter = 1;\n            if\
    \ ($c =~ /[a-z]/) {\n                $c = uc($c);\n            } else {\n    \
    \            $c = lc($c);\n            }\n        }\n        $result = $c . $result;\n\
    \    }\n    if (!$has_letter) {\n        $result = reverse($result);\n    }\n\
    \    return $result;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c\
    \ (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n   \
    \         push @r, $c;\n        }\n    }\n    return join '', @r;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
