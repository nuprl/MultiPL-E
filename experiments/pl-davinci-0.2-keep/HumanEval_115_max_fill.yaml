name: HumanEval_115_max_fill
language: humaneval_to_perl.py
prompt: "# You are given a rectangular grid of wells. Each row represents a single\
  \ well,\n# and each 1 in a row represents a single unit of water.\n# Each well has\
  \ a corresponding bucket that can be used to extract water from it, \n# and all\
  \ buckets have the same capacity.\n# Your task is to use the buckets to empty the\
  \ wells.\n# Output the number of times you need to lower the buckets.\n# Example\
  \ 1:\n# Input: \n# grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n# bucket_capacity :\
  \ 1\n# Output: 6\n# Example 2:\n# Input: \n# grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1],\
  \ [0,1,1,1]]\n# bucket_capacity : 2\n# Output: 5\n# Example 3:\n# Input: \n# grid\
  \ : [[0,0,0], [0,0,0]]\n# bucket_capacity : 5\n# Output: 0\n# Constraints:\n# *\
  \ all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length\
  \ <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\nsub max_fill {\n  \
  \  my($grid, $capacity) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_fill;\n\
  \        if(eq_deeply($candidate->([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[0,\
  \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[0,\
  \ 0, 0], [0, 0, 0]], 5),0)) {\n        print \"ok!\" }else{\n        exit 1;\n \
  \       }\n        if(eq_deeply($candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1,\
  \ 1, 1, 1], [1, 1, 1, 1]], 9),2)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill\
    \ = 0;\n        for my $well (@$row) {\n            $fill += $well;\n        \
    \    if ($fill > $capacity) {\n                $max_fill++;\n                $fill\
    \ = $well;\n            }\n        }\n        $max_fill++ if $fill > 0;\n    }\n\
    \    return $max_fill;\n}", "    my $m = @$grid;\n    my $n = @{$grid->[0]};\n\
    \    my $count = 0;\n    for my $i (0..$m-1) {\n        for my $j (0..$n-1) {\n\
    \            if ($grid->[$i][$j] == 1) {\n                $count += $capacity;\n\
    \                $grid->[$i][$j] = 0;\n            }\n        }\n    }\n    return\
    \ $count;\n}", "    my $num_rows = @$grid;\n    my $num_cols = @{$grid->[0]};\n\
    \    my $num_fill = 0;\n    for my $i (0..$num_rows-1) {\n        for my $j (0..$num_cols-1)\
    \ {\n            if ($grid->[$i][$j] == 1) {\n                $num_fill += $capacity;\n\
    \                $grid->[$i][$j] = 0;\n            }\n        }\n    }\n    return\
    \ $num_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $max_fill\
    \ = 0;\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n           \
    \ if ($grid->[$i][$j] == 1) {\n                $max_fill = max($max_fill, $i+1);\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $num_rows\
    \ = @$grid;\n    my $num_cols = @{$grid->[0]};\n    my $num_buckets = 0;\n   \
    \ for my $row (0..$num_rows-1) {\n        my $num_units = 0;\n        for my $col\
    \ (0..$num_cols-1) {\n            $num_units += $grid->[$row][$col];\n       \
    \ }\n        $num_buckets += int($num_units / $capacity);\n        $num_buckets\
    \ += ($num_units % $capacity) > 0 ? 1 : 0;\n    }\n    return $num_buckets;\n\
    }\nuse Test::More;\nuse Test::LMU;", "    my $max_fill = 0;\n    for my $row (@$grid)\
    \ {\n        my $fill = 0;\n        for my $well (@$row) {\n            $fill\
    \ += $well;\n            $fill = $capacity if $fill > $capacity;\n        }\n\
    \        $max_fill = $fill if $fill > $max_fill;\n    }\n    return $max_fill;\n\
    }", "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n\
    \        for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }", "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n\
    \        for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }", "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n\
    \        for my $cell (@$row) {\n            $fill += $cell;\n            $fill\
    \ = $capacity if $fill > $capacity;\n        }\n        $max_fill = $fill if $fill\
    \ > $max_fill;\n    }\n    return $max_fill;\n}", "    my $rows = @$grid;\n  \
    \  my $cols = @{$grid->[0]};\n    my $count = 0;\n    for my $i (0..$rows-1) {\n\
    \        for my $j (0..$cols-1) {\n            if ($grid->[$i][$j] == 1) {\n \
    \               $count += $capacity;\n                $grid->[$i][$j] = 0;\n \
    \           }\n        }\n    }\n    return $count;\n}", "    my $max_fill = 0;\n\
    \    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row)\
    \ {\n            $fill += $well;\n            $fill = $capacity if $fill > $capacity;\n\
    \        }\n        $max_fill = $fill if $fill > $max_fill;\n    }\n    return\
    \ $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            $fill = $capacity if $fill > $capacity;\n        }\n        $max_fill\
    \ = $fill if $fill > $max_fill;\n    }\n    return $max_fill;\n}", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]], 5); # 0", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]], 5); # 0", "    my $rows\
    \ = @$grid;\n    my $cols = @{$grid->[0]};\n    my $max_fill = 0;\n    for my\
    \ $i (0..$rows-1) {\n        for my $j (0..$cols-1) {\n            if ($grid->[$i][$j]\
    \ == 1) {\n                $max_fill = max($max_fill, $i+1);\n            }\n\
    \        }\n    }\n    return $max_fill;\n}", "    my $n = @$grid;\n    my $m\
    \ = @{$grid->[0]};\n    my $max_fill = 0;\n    for my $i (0..$n-1) {\n       \
    \ for my $j (0..$m-1) {\n            if ($grid->[$i][$j] == 1) {\n           \
    \     $max_fill = max($max_fill, $i+1);\n            }\n        }\n    }\n   \
    \ return $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n\
    \        my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $max = 0;\n    for my $row (@$grid) {\n        my $fill\
    \ = 0;\n        for my $well (@$row) {\n            $fill += $well;\n        \
    \    if ($fill > $capacity) {\n                $max++;\n                $fill\
    \ = $well;\n            }\n        }\n        $max += int($fill / $capacity);\n\
    \    }\n    return $max;\n}\nuse Test::More;\nuse Test::LMU;", "    my $rows =\
    \ @$grid;\n    my $cols = @{$grid->[0]};\n    my $max_fill = 0;\n    for my $i\
    \ (0..$rows-1) {\n        for my $j (0..$cols-1) {\n            if ($grid->[$i][$j]\
    \ == 1) {\n                $max_fill = max($max_fill, $i + $capacity);\n     \
    \       }\n        }\n    }\n    return $max_fill;\n}", "    my $max_fill = 0;\n\
    \    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row)\
    \ {\n            $fill += $well;\n            if ($fill > $capacity) {\n     \
    \           $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $rows = @$grid;\n\
    \    my $cols = @{$grid->[0]};\n    my $max_fill = 0;\n    for my $row (@$grid)\
    \ {\n        for my $col (@$row) {\n            $max_fill = max($max_fill, $col);\n\
    \        }\n    }\n    my $low = 0;\n    my $high = $max_fill;\n    while ($low\
    \ < $high) {\n        my $mid = int(($low + $high) / 2);\n        my $count =\
    \ 0;\n        for my $row (@$grid) {\n            for my $col (@$row) {\n    \
    \            $count += max(0, $col - $mid);\n            }\n        }\n      \
    \  if ($count <= $capacity) {\n            $high = $mid;\n        } else {\n \
    \           $low = $mid + 1;\n        }\n    }\n    my $fill = $low;\n    my $count\
    \ = 0;\n    for my $row (@$grid) {\n        for my $col (@$row) {\n          \
    \  $count += max(0, $col - $fill);\n        }\n    }\n    return $count;\n}",
  "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n    \
    \    for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]],\
    \ 5); # 0", "    my $count = 0;\n    for my $row (@$grid) {\n        my $fill\
    \ = 0;\n        for my $cell (@$row) {\n            $fill += $cell;\n        \
    \    if ($fill == $capacity) {\n                $count++;\n                $fill\
    \ = 0;\n            }\n        }\n        $count++ if $fill > 0;\n    }\n    return\
    \ $count;\n}\nuse Test::More;\nuse Test::LMU;", "    my $max_fill = 0;\n    for\
    \ my $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row) {\n\
    \            $fill += $well;\n            if ($fill > $capacity) {\n         \
    \       $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            $fill = $capacity if $fill\
    \ > $capacity;\n        }\n        $max_fill = $fill if $fill > $max_fill;\n \
    \   }\n    return $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid)\
    \ {\n        my $fill = 0;\n        for my $well (@$row) {\n            $fill\
    \ += $well;\n            if ($fill > $capacity) {\n                $max_fill +=\
    \ $fill - $capacity;\n                $fill = $capacity;\n            }\n    \
    \    }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]],\
    \ 1); # 6\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\n\
    say max_fill([[0,0,0], [0,0,0]], 5); # 0", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $count = 0;\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n\
    \            if ($grid->[$i][$j] == 1) {\n                $count += $capacity;\n\
    \                $grid->[$i][$j] = 0;\n            }\n        }\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    for my $row (@$grid) {\n        my $fill\
    \ = 0;\n        for my $well (@$row) {\n            $fill += $well;\n        \
    \    if ($fill == $capacity) {\n                $count++;\n                $fill\
    \ = 0;\n            }\n        }\n        $count++ if $fill > 0;\n    }\n    return\
    \ $count;\n}", "    my $total = 0;\n    for my $row (@$grid) {\n        my $fill\
    \ = 0;\n        for my $well (@$row) {\n            $fill += $well;\n        \
    \    if ($fill >= $capacity) {\n                $total += $capacity;\n       \
    \         $fill = 0;\n            }\n        }\n        $total += $fill;\n   \
    \ }\n    return $total;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $fill = 0;\n    for my $i(0..$n-1) {\n        for my $j(0..$m-1) {\n \
    \           if ($grid->[$i][$j] == 1) {\n                $fill++;\n          \
    \      $grid->[$i][$j] = 0;\n                if ($i+1 < $n) {\n              \
    \      $grid->[$i+1][$j] = 0;\n                }\n                if ($j+1 < $m)\
    \ {\n                    $grid->[$i][$j+1] = 0;\n                }\n         \
    \   }\n        }\n    }\n    return $fill;\n}", "    my $count = 0;\n    for my\
    \ $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row) {\n   \
    \         $fill += $well;\n            if ($fill == $capacity) {\n           \
    \     $count++;\n                $fill = 0;\n            }\n        }\n      \
    \  $count++ if $fill;\n    }\n    return $count;\n}\nuse Test::More;\nuse Test::LMU;",
  "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n    \
    \    for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $max = 0;\n    for\
    \ my $i(0..$n-1) {\n        for my $j(0..$m-1) {\n            $max = max($max,\
    \ $grid->[$i][$j]);\n        }\n    }\n    my $lo = 0;\n    my $hi = $max;\n \
    \   while($lo < $hi) {\n        my $mid = int(($lo + $hi) / 2);\n        my $count\
    \ = 0;\n        for my $i(0..$n-1) {\n            for my $j(0..$m-1) {\n     \
    \           if($grid->[$i][$j] > $mid) {\n                    $count += $grid->[$i][$j]\
    \ - $mid;\n                }\n            }\n        }\n        if($count > $capacity)\
    \ {\n            $lo = $mid + 1;\n        } else {\n            $hi = $mid;\n\
    \        }\n    }\n    return $lo;\n}", "    my $max_fill = 0;\n    foreach my\
    \ $row (@$grid) {\n        my $fill = 0;\n        foreach my $well (@$row) {\n\
    \            $fill += $well;\n            if ($fill > $capacity) {\n         \
    \       $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            $fill = $capacity if $fill\
    \ > $capacity;\n        }\n        $max_fill = $fill if $fill > $max_fill;\n \
    \   }\n    return $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid)\
    \ {\n        my $fill = 0;\n        for my $well (@$row) {\n            $fill\
    \ += $well;\n            if ($fill > $capacity) {\n                $max_fill +=\
    \ $fill - $capacity;\n                $fill = $capacity;\n            }\n    \
    \    }\n    }\n    return $max_fill;\n}", "    my $n = scalar(@$grid);\n    my\
    \ $m = scalar(@{$grid->[0]});\n    my $max_fill = 0;\n    for my $i (0..$n-1)\
    \ {\n        for my $j (0..$m-1) {\n            if ($grid->[$i][$j] == 1) {\n\
    \                $max_fill = max($max_fill, $capacity);\n            }\n     \
    \   }\n    }\n    return $max_fill;\n}", "    my $max_fill = 0;\n    for my $row\
    \ (@$grid) {\n        my $fill = 0;\n        for my $well (@$row) {\n        \
    \    $fill += $well;\n            if ($fill > $capacity) {\n                $max_fill\
    \ += $fill - $capacity;\n                $fill = $capacity;\n            }\n \
    \       }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0],\
    \ [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]],\
    \ 2); # 5\nsay max_fill([[0,0,0], [0,0,0]], 5); # 0", "    my $n = @$grid;\n \
    \   my $m = @{$grid->[0]};\n    my $count = 0;\n    my $i = 0;\n    while ($i\
    \ < $n) {\n        my $j = 0;\n        while ($j < $m) {\n            if ($grid->[$i][$j]\
    \ == 1) {\n                $count += $capacity;\n                $j += 1;\n  \
    \          } else {\n                $j += 1;\n            }\n        }\n    \
    \    $i += 1;\n    }\n    return $count;\n}", "    my $max_fill = 0;\n    for\
    \ my $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row) {\n\
    \            $fill += $well;\n            if ($fill > $capacity) {\n         \
    \       $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]], 5); # 0", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $max_fill\
    \ = 0;\n    foreach my $row (@$grid) {\n        my $fill = 0;\n        foreach\
    \ my $cell (@$row) {\n            $fill += $cell;\n            $fill = $capacity\
    \ if $fill > $capacity;\n        }\n        $max_fill = $fill if $fill > $max_fill;\n\
    \    }\n    return $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid)\
    \ {\n        my $fill = 0;\n        for my $well (@$row) {\n            $fill\
    \ += $well;\n            if ($fill > $capacity) {\n                $max_fill +=\
    \ $fill - $capacity;\n                $fill = $capacity;\n            }\n    \
    \    }\n    }\n    return $max_fill;\n}", "    my $max = 0;\n    for my $row (@$grid)\
    \ {\n        my $fill = 0;\n        for my $well (@$row) {\n            $fill\
    \ += $well;\n            if ($fill > $capacity) {\n                $fill = $capacity;\n\
    \            }\n        }\n        $max = $fill if $fill > $max;\n    }\n    return\
    \ $max;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill\
    \ = 0;\n        for my $well (@$row) {\n            $fill += $well;\n        \
    \    if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1);\nsay max_fill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2);\nsay max_fill([[0,0,0], [0,0,0]], 5);",
  "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n    \
    \    for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]],\
    \ 5); # 0", "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill\
    \ = 0;\n        for my $well (@$row) {\n            $fill += $well;\n        \
    \    if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay\
    \ max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0],\
    \ [0,0,0]], 5); # 0", "    my $max_fill = 0;\n    for my $row (@$grid) {\n   \
    \     for my $i (0..$#$row) {\n            if ($row->[$i] == 1) {\n          \
    \      $max_fill += $capacity;\n            }\n            else {\n          \
    \      $max_fill += $i;\n                last;\n            }\n        }\n   \
    \ }\n    return $max_fill;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $count = 0;\n    for my $i(0..$n-1) {\n        for my $j(0..$m-1) {\n\
    \            if ($grid->[$i][$j] == 1) {\n                $count += $capacity;\n\
    \                for my $k(0..$i-1) {\n                    $count -= $grid->[$k][$j];\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}", " \
    \   my $max = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for\
    \ my $well (@$row) {\n            $fill += $well;\n            if ($fill > $capacity)\
    \ {\n                $max += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max;\n}", "    my $max_fill = 0;\n\
    \    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row)\
    \ {\n            $fill += $well;\n            if ($fill > $capacity) {\n     \
    \           $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            $fill = $capacity if $fill\
    \ > $capacity;\n        }\n        $max_fill = $fill if $fill > $max_fill;\n \
    \   }\n    return $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid)\
    \ {\n        my $fill = 0;\n        for my $well (@$row) {\n            $fill\
    \ += $well;\n            if ($fill > $capacity) {\n                $max_fill +=\
    \ $fill - $capacity;\n                $fill = $capacity;\n            }\n    \
    \    }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]],\
    \ 1); # 6\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\n\
    say max_fill([[0,0,0], [0,0,0]], 5); # 0", "    my $max_fill = 0;\n    for my\
    \ $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row) {\n   \
    \         $fill += $well;\n            if ($fill > $capacity) {\n            \
    \    $max_fill += $fill - $capacity;\n                $fill = $capacity;\n   \
    \         }\n        }\n    }\n    return $max_fill;\n}", "    my $max = 0;\n\
    \    for my $row (@$grid) {\n        my $sum = 0;\n        for my $col (@$row)\
    \ {\n            $sum += $col;\n            if ($sum > $capacity) {\n        \
    \        $sum = $col;\n            }\n        }\n        $max = $sum if $sum >\
    \ $max;\n    }\n    return $max;\n}", "    my $max_fill = 0;\n    for my $row\
    \ (@$grid) {\n        my $fill = 0;\n        for my $well (@$row) {\n        \
    \    $fill += $well;\n            if ($fill > $capacity) {\n                $max_fill\
    \ += $fill - $capacity;\n                $fill = $capacity;\n            }\n \
    \       }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0],\
    \ [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]],\
    \ 2); # 5\nsay max_fill([[0,0,0], [0,0,0]], 5); # 0", "    my $max = 0;\n    for\
    \ my $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row) {\n\
    \            $fill += $well;\n            if ($fill > $capacity) {\n         \
    \       $fill = $capacity;\n            }\n        }\n        $max = $fill if\
    \ $fill > $max;\n    }\n    return $max;\n}", "    my $max_fill = 0;\n    for\
    \ my $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row) {\n\
    \            $fill += $well;\n            if ($fill > $capacity) {\n         \
    \       $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]], 5); # 0", "    my $rows\
    \ = @$grid;\n    my $cols = @{$grid->[0]};\n    my $max_fill = 0;\n    for my\
    \ $row (0..$rows-1) {\n        for my $col (0..$cols-1) {\n            if ($grid->[$row][$col]\
    \ == 1) {\n                $max_fill += $capacity;\n            }\n        }\n\
    \    }\n    return $max_fill;\n}", "    my $max_fill = 0;\n    foreach my $row\
    \ (@$grid) {\n        my $fill = 0;\n        foreach my $cell (@$row) {\n    \
    \        $fill += $cell;\n            $fill = $capacity if $fill > $capacity;\n\
    \        }\n        $max_fill = $fill if $fill > $max_fill;\n    }\n    return\
    \ $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $max_fill\
    \ = 0;\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n           \
    \ if ($grid->[$i][$j] == 1) {\n                $max_fill = max($max_fill, $capacity\
    \ - $i);\n            }\n        }\n    }\n    return $max_fill;\n}", "    my\
    \ $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for\
    \ my $well (@$row) {\n            $fill += $well;\n            if ($fill > $capacity)\
    \ {\n                $max_fill += $fill - $capacity;\n                $fill =\
    \ $capacity;\n            }\n        }\n    }\n    return $max_fill;\n}", "  \
    \  my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n    \
    \    for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]],\
    \ 5); # 0", "    my $max = 0;\n    for my $row (@$grid) {\n        my $fill =\
    \ 0;\n        for my $well (@$row) {\n            $fill += $well;\n          \
    \  if ($fill > $capacity) {\n                $fill = $capacity;\n            }\n\
    \        }\n        $max = $fill if $fill > $max;\n    }\n    return $max;\n}",
  "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n    \
    \    for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]],\
    \ 5); # 0", "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill\
    \ = 0;\n        for my $well (@$row) {\n            $fill += $well;\n        \
    \    if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay\
    \ max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0],\
    \ [0,0,0]], 5); # 0", "    my $max_fill = 0;\n    for my $row (@$grid) {\n   \
    \     my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1);\nsay max_fill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2);\nsay max_fill([[0,0,0], [0,0,0]], 5);",
  "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n    \
    \    for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $max_fill = 0;\n\
    \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            if ($grid->[$i][$j]\
    \ == 1) {\n                $max_fill = max($max_fill, $i+1);\n            }\n\
    \        }\n    }\n    return $max_fill;\n}", "    my $n = scalar(@$grid);\n \
    \   my $m = scalar(@{$grid->[0]});\n    my $ans = 0;\n    for my $i (0..$n-1)\
    \ {\n        my $j = 0;\n        while ($j < $m) {\n            if ($grid->[$i][$j]\
    \ == 0) {\n                $j++;\n                next;\n            }\n     \
    \       my $k = $j;\n            while ($k < $m && $grid->[$i][$k] == 1) {\n \
    \               $k++;\n            }\n            my $fill = $k - $j;\n      \
    \      if ($fill > $capacity) {\n                $ans += $capacity;\n        \
    \    } else {\n                $ans += $fill;\n            }\n            $j =\
    \ $k;\n        }\n    }\n    return $ans;\n}\nuse Test::More;\nuse Test::LMU;",
  "    my $max = 0;\n    foreach my $row (@$grid) {\n        my $fill = 0;\n     \
    \   foreach my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                return -1;\n            }\n        }\n     \
    \   $max = $fill if $fill > $max;\n    }\n    return $max;\n}", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $num_rows\
    \ = @$grid;\n    my $num_cols = @{$grid->[0]};\n    my $num_buckets = 0;\n   \
    \ for my $row (0..$num_rows-1) {\n        my $num_units = 0;\n        for my $col\
    \ (0..$num_cols-1) {\n            $num_units += $grid->[$row][$col];\n       \
    \ }\n        $num_buckets += int($num_units / $capacity);\n        $num_buckets\
    \ += ($num_units % $capacity) > 0 ? 1 : 0;\n    }\n    return $num_buckets;\n\
    }\nuse Test::More;\nuse Test::LMU;", "    my $max_fill = 0;\n    for my $row (@$grid)\
    \ {\n        my $fill = 0;\n        for my $well (@$row) {\n            $fill\
    \ += $well;\n            if ($fill > $capacity) {\n                $max_fill +=\
    \ $fill - $capacity;\n                $fill = $capacity;\n            }\n    \
    \    }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]],\
    \ 1); # 6\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\n\
    say max_fill([[0,0,0], [0,0,0]], 5); # 0", "    my $max_fill = 0;\n    for my\
    \ $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row) {\n   \
    \         $fill += $well;\n            if ($fill > $capacity) {\n            \
    \    $max_fill += $fill - $capacity;\n                $fill = $capacity;\n   \
    \         }\n        }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]], 5); # 0", "    my $max_fill\
    \ = 0;\n    foreach my $row (@$grid) {\n        my $fill = 0;\n        foreach\
    \ my $well (@$row) {\n            $fill += $well;\n            if ($fill > $capacity)\
    \ {\n                $max_fill += $fill - $capacity;\n                $fill =\
    \ $capacity;\n            }\n        }\n    }\n    return $max_fill;\n}", "  \
    \  my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n    \
    \    for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $total = 0;\n   \
    \ for my $i(0..$n-1) {\n        for my $j(0..$m-1) {\n            $total += $grid->[$i][$j];\n\
    \        }\n    }\n    my $max_fill = $total / $capacity;\n    return $max_fill;\n\
    }", "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n\
    \        for my $col (@$row) {\n            $fill += $col;\n            $fill\
    \ = $capacity if $fill > $capacity;\n        }\n        $max_fill = $fill if $fill\
    \ > $max_fill;\n    }\n    return $max_fill;\n}", "    my $max_fill = 0;\n   \
    \ for my $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row)\
    \ {\n            $fill += $well;\n            $fill = $capacity if $fill > $capacity;\n\
    \        }\n        $max_fill = $fill if $fill > $max_fill;\n    }\n    return\
    \ $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay\
    \ max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0],\
    \ [0,0,0]], 5); # 0", "    my $max_fill = 0;\n    for my $row (@$grid) {\n   \
    \     my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            if ($well) {\n  \
    \              $fill++;\n            } else {\n                $max_fill = max($max_fill,\
    \ $fill);\n                $fill = 0;\n            }\n        }\n        $max_fill\
    \ = max($max_fill, $fill);\n    }\n    return $max_fill;\n}", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $max_fill = 0;\n    for my $i (0..$n-1) {\n\
    \        for my $j (0..$m-1) {\n            if ($grid->[$i][$j] == 1) {\n    \
    \            $max_fill = max($max_fill, $i);\n            }\n        }\n    }\n\
    \    return $max_fill;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $max_fill = 0;\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            if ($grid->[$i][$j] == 1) {\n                $max_fill = max($max_fill,\
    \ $i+1);\n            }\n        }\n    }\n    return $max_fill;\n}", "    my\
    \ $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for\
    \ my $well (@$row) {\n            $fill += $well;\n            if ($fill > $capacity)\
    \ {\n                $max_fill += $fill - $capacity;\n                $fill =\
    \ $capacity;\n            }\n        }\n    }\n    return $max_fill;\n}", "  \
    \  my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n    \
    \    for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }", "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n\
    \        for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]],\
    \ 5); # 0", "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill\
    \ = 0;\n        for my $cell (@$row) {\n            $fill += $cell;\n        \
    \    $fill = $capacity if $fill > $capacity;\n        }\n        $max_fill = $fill\
    \ if $fill > $max_fill;\n    }\n    return $max_fill;\n}", "    my $max_fill =\
    \ 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill == $capacity)\
    \ {\n                $max_fill++;\n                $fill = 0;\n            }\n\
    \        }\n        $max_fill++ if $fill > 0;\n    }\n    return $max_fill;\n}",
  "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n    \
    \    for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]],\
    \ 5); # 0", "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill\
    \ = 0;\n        for my $well (@$row) {\n            $fill += $well;\n        \
    \    if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay\
    \ max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0],\
    \ [0,0,0]], 5); # 0", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my\
    \ $max_fill = 0;\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n \
    \           $max_fill = max($max_fill, $grid->[$i][$j]);\n        }\n    }\n \
    \   my $min_fill = 0;\n    while ($min_fill < $max_fill) {\n        my $mid =\
    \ int(($min_fill + $max_fill) / 2);\n        if (can_fill($grid, $capacity, $mid))\
    \ {\n            $min_fill = $mid + 1;\n        } else {\n            $max_fill\
    \ = $mid;\n        }\n    }\n    return $min_fill - 1;\n}", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]], 5); # 0", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]], 5); # 0", "    my $rows\
    \ = @$grid;\n    my $cols = @{$grid->[0]};\n    my $count = 0;\n    for my $i\
    \ (0..$rows-1) {\n        my $row = $grid->[$i];\n        my $fill = 0;\n    \
    \    for my $j (0..$cols-1) {\n            if ($row->[$j]) {\n               \
    \ $fill++;\n            } else {\n                $count += $fill / $capacity;\n\
    \                $fill = 0;\n            }\n        }\n        $count += $fill\
    \ / $capacity;\n    }\n    return $count;\n}\nuse Test::More;\nuse Test::LMU;",
  "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n    \
    \    for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]],\
    \ 5); # 0", "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill\
    \ = 0;\n        for my $well (@$row) {\n            $fill += $well;\n        \
    \    if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $max = 0;\n    for my $row (@$grid) {\n        my $fill\
    \ = 0;\n        for my $well (@$row) {\n            $fill += $well;\n        \
    \    if ($fill > $capacity) {\n                $max += $fill - $capacity;\n  \
    \              $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]],\
    \ 5); # 0", "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill\
    \ = 0;\n        for my $well (@$row) {\n            $fill += $well;\n        \
    \    if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay\
    \ max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0],\
    \ [0,0,0]], 5); # 0", "    my $max_fill = 0;\n    for my $row (@$grid) {\n   \
    \     my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            $fill = $capacity if $fill > $capacity;\n        }\n        $max_fill\
    \ = $fill if $fill > $max_fill;\n    }\n    return $max_fill;\n}", "    my $n\
    \ = @$grid;\n    my $m = @{$grid->[0]};\n    my $max_fill = 0;\n    for my $i\
    \ (0..$n-1) {\n        my $fill = 0;\n        for my $j (0..$m-1) {\n        \
    \    $fill += $grid->[$i][$j];\n            if ($fill > $capacity) {\n       \
    \         $max_fill = $capacity;\n                last;\n            }\n     \
    \       $max_fill = $fill if $fill > $max_fill;\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay\
    \ max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0],\
    \ [0,0,0]], 5); # 0", "    my $max_fill = 0;\n    for my $row (@$grid) {\n   \
    \     my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            $fill = $capacity if $fill > $capacity;\n        }\n        $max_fill\
    \ = $fill if $fill > $max_fill;\n    }\n    return $max_fill;\n}", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            if ($well) {\n                $fill++;\n            }\
    \ else {\n                $max_fill = max($max_fill, $fill);\n               \
    \ $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill, $fill);\n\
    \    }\n    return $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid)\
    \ {\n        my $fill = 0;\n        for my $well (@$row) {\n            $fill\
    \ += $well;\n            if ($fill > $capacity) {\n                $max_fill +=\
    \ $fill - $capacity;\n                $fill = $capacity;\n            }\n    \
    \    }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]],\
    \ 1);\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2);\nsay max_fill([[0,0,0],\
    \ [0,0,0]], 5);", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay\
    \ max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0],\
    \ [0,0,0]], 5); # 0", "    my $count = 0;\n    for my $row (@$grid) {\n      \
    \  my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill == $capacity) {\n                $count++;\n          \
    \      $fill = 0;\n            }\n        }\n        $count++ if $fill > 0;\n\
    \    }\n    return $count;\n}\nuse Test::More;\nuse Test::LMU;", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1);\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]],\
    \ 2);\nsay max_fill([[0,0,0], [0,0,0]], 5);", "    my $max_fill = 0;\n    for\
    \ my $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row) {\n\
    \            $fill += $well;\n            if ($fill > $capacity) {\n         \
    \       $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1);\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]],\
    \ 2);\nsay max_fill([[0,0,0], [0,0,0]], 5);", "    my $max_fill = 0;\n    for\
    \ my $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row) {\n\
    \            $fill += $well;\n            $fill = $capacity if $fill > $capacity;\n\
    \        }\n        $max_fill = $fill if $fill > $max_fill;\n    }\n    return\
    \ $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            $fill = $capacity if $fill > $capacity;\n        }\n        $max_fill\
    \ = $fill if $fill > $max_fill;\n    }\n    return $max_fill;\n}", "    my $max\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $fill = $capacity;\n            }\n        }\n        $max =\
    \ $fill if $fill > $max;\n    }\n    return $max;\n}", "    my $max_fill = 0;\n\
    \    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row)\
    \ {\n            $fill += $well;\n            if ($fill > $capacity) {\n     \
    \           $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $max_fill = 0;\n    for my $i (0..$n-1) {\n\
    \        for my $j (0..$m-1) {\n            if ($grid->[$i][$j] == 1) {\n    \
    \            $max_fill = max($max_fill, $i);\n            }\n        }\n    }\n\
    \    return $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n\
    \        my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay\
    \ max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0],\
    \ [0,0,0]], 5); # 0", "    my $max_fill = 0;\n    for my $row (@$grid) {\n   \
    \     my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay\
    \ max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0],\
    \ [0,0,0]], 5); # 0", "    my $rows = @$grid;\n    my $cols = @{$grid->[0]};\n\
    \    my $max_fill = 0;\n    for my $row (0..$rows-1) {\n        for my $col (0..$cols-1)\
    \ {\n            if ($grid->[$row][$col] == 1) {\n                $max_fill =\
    \ $capacity;\n                last;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $max_fill\
    \ = 0;\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n           \
    \ if ($grid->[$i][$j] == 1) {\n                $max_fill = $capacity;\n      \
    \          last;\n            }\n        }\n    }\n    return $max_fill;\n}",
  "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n    \
    \    for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]],\
    \ 5); # 0", "    my $max = 0;\n    for my $row (@$grid) {\n        my $fill =\
    \ 0;\n        for my $well (@$row) {\n            $fill += $well;\n          \
    \  if ($fill > $capacity) {\n                $max += $fill - $capacity;\n    \
    \            $fill = $capacity;\n            }\n        }\n    }\n    return $max;\n\
    }\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1);\nsay max_fill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2);\nsay max_fill([[0,0,0], [0,0,0]], 5);",
  "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n    \
    \    for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }", "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n\
    \        for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }", "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n\
    \        for my $well (@$row) {\n            $fill += $well;\n            $fill\
    \ = $capacity if $fill > $capacity;\n        }\n        $max_fill = $fill if $fill\
    \ > $max_fill;\n    }\n    return $max_fill;\n}", "    my $max_fill = 0;\n   \
    \ for my $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row)\
    \ {\n            $fill += $well;\n            if ($fill > $capacity) {\n     \
    \           $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1);\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]],\
    \ 2);\nsay max_fill([[0,0,0], [0,0,0]], 5);", "    my $count = 0;\n    for my\
    \ $i (0..$#$grid) {\n        my $row = $grid->[$i];\n        for my $j (0..$#$row)\
    \ {\n            my $cell = $row->[$j];\n            if ($cell == 1) {\n     \
    \           $count += $capacity;\n                $grid->[$i][$j] = 0;\n     \
    \       }\n        }\n    }\n    return $count;\n}", "    my $max_fill = 0;\n\
    \    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row)\
    \ {\n            $fill += $well;\n            if ($fill > $capacity) {\n     \
    \           $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]], 5); # 0", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]], 5); # 0", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\nuse Test::More;\n\
    use Test::LMU;", "    my $num_rows = @$grid;\n    my $num_cols = @{$grid->[0]};\n\
    \    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n  \
    \      for my $col (@$row) {\n            $fill += $col;\n            if ($fill\
    \ == $capacity) {\n                $max_fill++;\n                $fill = 0;\n\
    \            }\n        }\n        $max_fill += int($fill / $capacity);\n    }\n\
    \    return $max_fill;\n}\nuse Test::More;\nuse Test::LMU;", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]], 5); # 0", "    my $m =\
    \ @$grid;\n    my $n = @{$grid->[0]};\n    my $count = 0;\n    for my $i (0..$m-1)\
    \ {\n        for my $j (0..$n-1) {\n            if ($grid->[$i][$j] == 1) {\n\
    \                $count += $capacity;\n                for my $k ($i+1..$m-1)\
    \ {\n                    if ($grid->[$k][$j] == 1) {\n                       \
    \ $count += $capacity;\n                    } else {\n                       \
    \ last;\n                    }\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}\nuse Test::More;\nuse Test::LMU;", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $max_fill = 0;\n    for my $i (0..$n-1) {\n\
    \        for my $j (0..$m-1) {\n            $max_fill = max($max_fill, $grid->[$i][$j]);\n\
    \        }\n    }\n    my $min_fill = 0;\n    while ($min_fill < $max_fill) {\n\
    \        my $mid = int(($min_fill + $max_fill) / 2);\n        if (can_fill($grid,\
    \ $capacity, $mid)) {\n            $min_fill = $mid + 1;\n        } else {\n \
    \           $max_fill = $mid;\n        }\n    }\n    return $min_fill - 1;\n}",
  "    my $max = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for\
    \ my $col (@$row) {\n            $fill += $col;\n            $fill = $capacity\
    \ if $fill > $capacity;\n        }\n        $max = $fill if $fill > $max;\n  \
    \  }\n    return $max;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n\
    \        my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $max\
    \ = 0;\n    for my $i(0..$n-1) {\n        for my $j(0..$m-1) {\n            $max\
    \ = max($max, $grid->[$i][$j]);\n        }\n    }\n    my $left = 0;\n    my $right\
    \ = $max;\n    while($left < $right) {\n        my $mid = int(($left + $right)\
    \ / 2);\n        if(can_fill($grid, $capacity, $mid)) {\n            $left = $mid\
    \ + 1;\n        } else {\n            $right = $mid;\n        }\n    }\n    return\
    \ $left - 1;\n}", "    my $count = 0;\n    for my $row (@$grid) {\n        my\
    \ $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n  \
    \          if ($fill == $capacity) {\n                $count++;\n            \
    \    $fill = 0;\n            }\n        }\n        $count++ if $fill > 0;\n  \
    \  }\n    return $count;\n}\nuse Test::More;\nuse Test::LMU;", "    my $max =\
    \ 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $col (@$row)\
    \ {\n            $fill += $col;\n            if ($fill > $capacity) {\n      \
    \          $max += $fill - $capacity;\n                $fill = $capacity;\n  \
    \          }\n        }\n    }\n    return $max;\n}", "    my $max = 0;\n    for\
    \ my $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row) {\n\
    \            $fill += $well;\n            if ($fill > $capacity) {\n         \
    \       $max += $fill - $capacity;\n                $fill = $capacity;\n     \
    \       }\n        }\n    }\n    return $max;\n}", "    my $max_fill = 0;\n  \
    \  for my $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row)\
    \ {\n            $fill += $well;\n            if ($fill > $capacity) {\n     \
    \           $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill == $capacity)\
    \ {\n                $max_fill++;\n                $fill = 0;\n            }\n\
    \        }\n        $max_fill++ if $fill > 0;\n    }\n    return $max_fill;\n}",
  "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n    \
    \    for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1);\nsay max_fill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2);\nsay max_fill([[0,0,0], [0,0,0]], 5);",
  "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n    \
    \    for my $well (@$row) {\n            $fill += $well;\n            $fill =\
    \ $capacity if $fill > $capacity;\n        }\n        $max_fill = $fill if $fill\
    \ > $max_fill;\n    }\n    return $max_fill;\n}", "    my $max_fill = 0;\n   \
    \ for my $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row)\
    \ {\n            $fill += $well;\n            if ($fill > $capacity) {\n     \
    \           $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1],\
    \ [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]], 5); # 0", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $max = 0;\n\
    \    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row)\
    \ {\n            $fill += $well;\n            if ($fill > $capacity) {\n     \
    \           $fill = $capacity;\n            }\n        }\n        $max = $fill\
    \ if $fill > $max;\n    }\n    return $max;\n}", "    my $max = 0;\n    for my\
    \ $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row) {\n   \
    \         $fill += $well;\n            if ($fill > $capacity) {\n            \
    \    $fill = $capacity;\n            }\n        }\n        $max = $fill if $fill\
    \ > $max;\n    }\n    return $max;\n}", "    my $max_fill = 0;\n    for my $row\
    \ (@$grid) {\n        my $fill = 0;\n        for my $well (@$row) {\n        \
    \    $fill += $well;\n            if ($fill > $capacity) {\n                $max_fill\
    \ += $fill - $capacity;\n                $fill = $capacity;\n            }\n \
    \       }\n    }\n    return $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0],\
    \ [1,1,1,1]], 1);\nsay max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]],\
    \ 2);\nsay max_fill([[0,0,0], [0,0,0]], 5);", "    my $max_fill = 0;\n    for\
    \ my $row (@$grid) {\n        my $fill = 0;\n        for my $well (@$row) {\n\
    \            $fill += $well;\n            if ($fill > $capacity) {\n         \
    \       $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $max_fill = 0;\n    for my $i (0..$n-1) {\n\
    \        for my $j (0..$m-1) {\n            if ($grid->[$i][$j] == 1) {\n    \
    \            $max_fill = max($max_fill, $i+1);\n            }\n        }\n   \
    \ }\n    return $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid)\
    \ {\n        my $fill = 0;\n        for my $well (@$row) {\n            $fill\
    \ += $well;\n            if ($fill > $capacity) {\n                $max_fill +=\
    \ $fill - $capacity;\n                $fill = $capacity;\n            }\n    \
    \    }\n    }\n    return $max_fill;\n}", "    my $rows = @$grid;\n    my $cols\
    \ = @{$grid->[0]};\n    my $max_fill = 0;\n    for my $i (0..$rows-1) {\n    \
    \    for my $j (0..$cols-1) {\n            if ($grid->[$i][$j] == 1) {\n     \
    \           $max_fill = max($max_fill, $i);\n            }\n        }\n    }\n\
    \    return $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n\
    \        my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay\
    \ max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0],\
    \ [0,0,0]], 5); # 0", "    my $max_fill = 0;\n    for my $row (@$grid) {\n   \
    \     my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            $fill = $capacity if $fill > $capacity;\n        }\n        $max_fill\
    \ = $fill if $fill > $max_fill;\n    }\n    return $max_fill;\n}", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        for my $col (@$row) {\n          \
    \  $max_fill = $col if $col > $max_fill;\n        }\n    }\n    return $max_fill;\n\
    }", "    my $max = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n   \
    \     for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max += $fill - $capacity;\n               \
    \ $fill = $capacity;\n            }\n        }\n    }\n    return $max;\n}", " \
    \   my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $max = 0;\n    for my\
    \ $i(0..$n-1) {\n        for my $j(0..$m-1) {\n            $max = max($max, $grid->[$i][$j]);\n\
    \        }\n    }\n    my $lo = 0;\n    my $hi = $max;\n    while($lo < $hi) {\n\
    \        my $mid = int(($lo + $hi) / 2);\n        if(can_fill($grid, $capacity,\
    \ $mid)) {\n            $hi = $mid;\n        } else {\n            $lo = $mid\
    \ + 1;\n        }\n    }\n    return $lo;\n}", "    my $max = 0;\n    for (@$grid)\
    \ {\n        my $sum = 0;\n        for my $i (0..$#$_) {\n            $sum +=\
    \ $_->[$i];\n            if ($sum > $capacity) {\n                $sum = $capacity;\n\
    \            }\n        }\n        $max = $sum if $sum > $max;\n    }\n    return\
    \ $max;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill\
    \ = 0;\n        for my $well (@$row) {\n            $fill += $well;\n        \
    \    if ($fill == $capacity) {\n                $max_fill++;\n               \
    \ $fill = 0;\n            }\n        }\n        $max_fill++ if $fill;\n    }\n\
    \    return $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n\
    \        my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $max_fill\
    \ = 0;\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n           \
    \ if ($grid->[$i][$j] == 1) {\n                $max_fill = max($max_fill, $i);\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $max_fill\
    \ = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for my $well\
    \ (@$row) {\n            $fill += $well;\n            if ($fill > $capacity) {\n\
    \                $max_fill += $fill - $capacity;\n                $fill = $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $count = 0;\n    for my $i(0..$n-1) {\n  \
    \      for my $j(0..$m-1) {\n            if($grid->[$i][$j] == 1) {\n        \
    \        $count += $capacity;\n                $grid->[$i][$j] = 0;\n        \
    \    }\n        }\n    }\n    return $count;\n}", "    my $max = 0;\n    for my\
    \ $row (@$grid) {\n        my $sum = 0;\n        for my $col (@$row) {\n     \
    \       $sum += $col;\n            $sum = $capacity if $sum > $capacity;\n   \
    \     }\n        $max = $sum if $sum > $max;\n    }\n    return $max;\n}", " \
    \   my $count = 0;\n    for my $row (@$grid) {\n        my $sum = 0;\n       \
    \ for my $col (@$row) {\n            $sum += $col;\n            if ($sum == $capacity)\
    \ {\n                $count++;\n                $sum = 0;\n            }\n   \
    \     }\n        $count++ if $sum > 0;\n    }\n    return $count;\n}", "    my\
    \ $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n        for\
    \ my $well (@$row) {\n            $fill += $well;\n            if ($fill > $capacity)\
    \ {\n                $max_fill += $fill - $capacity;\n                $fill =\
    \ $capacity;\n            }\n        }\n    }\n    return $max_fill;\n}", "  \
    \  my $max = 0;\n    for (@$grid) {\n        my $fill = 0;\n        for (@$_)\
    \ {\n            $fill += $_;\n            $fill = $capacity if $fill > $capacity;\n\
    \        }\n        $max = $fill if $fill > $max;\n    }\n    return $max;\n}",
  "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n    \
    \    for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]],\
    \ 5); # 0", "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill\
    \ = 0;\n        for my $well (@$row) {\n            $fill += $well;\n        \
    \    if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1);\nsay max_fill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2);\nsay max_fill([[0,0,0], [0,0,0]], 5);",
  "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n    \
    \    for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }", "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n\
    \        for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1);\nsay max_fill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2);\nsay max_fill([[0,0,0], [0,0,0]], 5);",
  "    my $max = 0;\n    for (@$grid) {\n        my $sum = 0;\n        for (@$_) {\n\
    \            $sum += $_;\n            $sum = $capacity if $sum > $capacity;\n\
    \        }\n        $max = $sum if $sum > $max;\n    }\n    return $max;\n}",
  "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill = 0;\n    \
    \    for my $well (@$row) {\n            $fill += $well;\n            if ($fill\
    \ > $capacity) {\n                $max_fill += $fill - $capacity;\n          \
    \      $fill = $capacity;\n            }\n        }\n    }\n    return $max_fill;\n\
    }\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay max_fill([[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0], [0,0,0]],\
    \ 5); # 0", "    my $max_fill = 0;\n    for my $row (@$grid) {\n        my $fill\
    \ = 0;\n        for my $well (@$row) {\n            $fill += $well;\n        \
    \    if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $cell (@$row) {\n            $fill += $cell;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}", "    my $max_fill = 0;\n    for my $row (@$grid) {\n       \
    \ my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay\
    \ max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0],\
    \ [0,0,0]], 5); # 0", "    my $max_fill = 0;\n    for my $row (@$grid) {\n   \
    \     my $fill = 0;\n        for my $well (@$row) {\n            $fill += $well;\n\
    \            if ($fill > $capacity) {\n                $max_fill += $fill - $capacity;\n\
    \                $fill = $capacity;\n            }\n        }\n    }\n    return\
    \ $max_fill;\n}\nsay max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1); # 6\nsay\
    \ max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2); # 5\nsay max_fill([[0,0,0],\
    \ [0,0,0]], 5); # 0"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
