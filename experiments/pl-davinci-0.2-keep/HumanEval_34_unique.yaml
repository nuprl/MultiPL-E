completions:
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [ sort\
  \ { $a <=> $b } keys %h ];\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
  \ keys %h;\n}"
- "    my %h;\n    for (@$l) {\n        $h{$_} = 1;\n    }\n    return sort keys %h;\n\
  }"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
  \ { $a <=> $b } keys %h;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort {\
  \ $a <=> $b } keys %h;\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}"
- "    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
  \ { $a <=> $b } keys %h;\n    return \\@u;\n}"
- "    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
  \ keys %h;\n    return @u;\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
  \ { $a <=> $b } keys %h;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return [sort\
  \ keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my(%h);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort\
  \ {$a <=> $b} keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
  \ { $a <=> $b } keys %h;\n    return \\@u;\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
  \ { $a <=> $b } keys %h;\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
  \ { $a <=> $b } keys %h;\n}"
- "    my %h;\n    for (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
  \ { $a <=> $b } keys %h;\n    return \\@u;\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
  \ { $a <=> $b } keys %h;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
  \ { $a <=> $b } keys %h;\n}"
- "    my %seen;\n    my @uniq = grep { !$seen{$_}++ } @$l;\n    return @uniq;\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
  \ { $a <=> $b } keys %h;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort keys\
  \ %h;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [ sort\
  \ { $a <=> $b } keys %h ];\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return [sort\
  \ {$a <=> $b} keys %h];\n}"
- "    my(%h, $e);\n    foreach $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
  \ [sort keys %h];\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
  \ { $a <=> $b } keys %h;\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return [\
  \ sort { $a <=> $b } keys %h ];\n}"
- "    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
  \ keys %h;\n    return \\@u;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    my @u;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n\
  \    foreach my $e (sort keys %h) {\n        push @u, $e;\n    }\n    return @u;\n\
  }"
- "    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
  \ keys %h;\n    return \\@u;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [ sort\
  \ { $a <=> $b } keys %h ];\n}"
- "    my %seen;\n    my @u = grep { !$seen{$_}++ } @$l;\n    return \\@u;\n}"
- "    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
  \ keys %h;\n    return @u;\n}"
- "    my(%h);\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return\
  \ sort { $a <=> $b } keys %h;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [ sort\
  \ keys %h ];\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my %seen;\n    return grep { !$seen{$_}++ } @$l;\n}"
- "    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
  \ { $a <=> $b } keys %h;\n    return \\@u;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %seen;\n    my @uniq = grep { !$seen{$_}++ } @$l;\n    return @uniq;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
  \ { $a <=> $b } keys %h;\n    return \\@u;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %seen;\n    my @uniq = grep { !$seen{$_}++ } @$l;\n    return @uniq;\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
  \ { $a <=> $b } keys %h;\n}"
- "    my %seen;\n    my @r;\n    foreach my $e (@$l) {\n        push(@r, $e) unless\
  \ $seen{$e}++;\n    }\n    return @r;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
  \ { $a <=> $b } keys %h;\n    return \\@u;\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return [sort\
  \ {$a <=> $b} keys %h];\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
  \ { $a <=> $b } keys %h;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return [sort\
  \ {$a <=> $b} keys %h];\n}"
- "    my(%h, @u);\n    foreach (@$l) { $h{$_} = 1; }\n    foreach (sort keys %h)\
  \ { push(@u, $_); }\n    return @u;\n}"
- "    my %s;\n    @s{@$l} = ();\n    return [sort {$a <=> $b} keys %s];\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
  \ { $a <=> $b } keys %h;\n}"
- "    my %seen;\n    my @uniq = grep { !$seen{$_}++ } @$l;\n    return @uniq;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my @u = sort { $a <=> $b } @$l;\n    my @r;\n    my $last = undef;\n    foreach\
  \ my $e (@u) {\n        if (!defined($last) || $last != $e) {\n            push\
  \ @r, $e;\n        }\n        $last = $e;\n    }\n    return @r;\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
  \ { $a <=> $b } keys %h;\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return [\
  \ sort keys %h ];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort keys\
  \ %h;\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n \
  \   }\n    return @u;\n}"
- "    my %h;\n    my @u;\n    foreach my $e (@$l) {\n        if (!exists $h{$e})\
  \ {\n            $h{$e} = 1;\n            push @u, $e;\n        }\n    }\n    return\
  \ @u;\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
  \ { $a <=> $b } keys %h;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n \
  \   }\n    return @u;\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return [sort\
  \ {$a <=> $b} keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort keys\
  \ %h;\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my %s;\n    foreach (@$l) {\n        $s{$_} = 1;\n    }\n    return sort {\
  \ $a <=> $b } keys %s;\n}"
- "    my %seen;\n    my @uniq = grep { !$seen{$_}++ } @$l;\n    return @uniq;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort keys\
  \ %h;\n}"
- "    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n \
  \   }\n    return \\@r;\n}"
- "    my %seen;\n    my @uniq = sort grep { !$seen{$_}++ } @$l;\n    return @uniq;\n\
  }"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort keys\
  \ %h;\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
  \ { $a <=> $b } keys %h;\n}"
- "    my %h;\n    return sort {$a <=> $b} grep {!$h{$_}++} @$l;\n}"
- "    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n \
  \   }\n    return \\@r;\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return [\
  \ sort { $a <=> $b } keys %h ];\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort keys %h];\n}"
- "    my %h;\n    my @u;\n    foreach my $e (@$l) {\n        push(@u, $e) unless\
  \ $h{$e}++;\n    }\n    return @u;\n}"
- "    my %seen;\n    my @uniq = sort { $a <=> $b } grep { !$seen{$_}++ } @$l;\n \
  \   return @uniq;\n}"
- "    my %s;\n    map { $s{$_} = 1 } @$l;\n    return sort keys %s;\n}"
- "    my %h;\n    map { $h{$_} = 1 } @$l;\n    sort { $a <=> $b } keys %h;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort keys\
  \ %h;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
  \ { $a <=> $b } keys %h;\n}"
- "    my(%h, @u);\n    foreach (@$l) { $h{$_} = 1; }\n    @u = sort { $a <=> $b }\
  \ keys %h;\n    return \\@u;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [ sort\
  \ { $a <=> $b } keys %h ];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    my @u;\n    foreach my $e (@$l) {\n        if (!$h{$e}) {\n   \
  \         $h{$e} = 1;\n            push @u, $e;\n        }\n    }\n    return \\\
  @u;\n}"
- "    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
  \ { $a <=> $b } keys %h;\n    return \\@u;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return [sort\
  \ {$a <=> $b} keys %h];\n}"
- "    my %h;\n    for my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return [sort\
  \ {$a <=> $b} keys %h];\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return [sort\
  \ {$a <=> $b} keys %h];\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return [sort\
  \ {$a <=> $b} keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [ sort\
  \ { $a <=> $b } keys %h ];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my @u = sort { $a <=> $b } @$l;\n    my $i = 0;\n    while ($i < @u - 1) {\n\
  \        if ($u[$i] == $u[$i + 1]) {\n            splice(@u, $i, 1);\n        }\
  \ else {\n            $i++;\n        }\n    }\n    return @u;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}"
- "    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n \
  \   }\n    return \\@u;\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return [sort\
  \ {$a <=> $b} keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort {\
  \ $a <=> $b } keys %h;\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
  \ keys %h;\n}"
- "    my %seen;\n    my @uniq = sort grep { !$seen{$_}++ } @$l;\n    return @uniq;\n\
  }"
- "    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
  \ keys %h;\n    return \\@u;\n}"
- "    my %seen;\n    my @uniq = grep { !$seen{$_}++ } @$l;\n    return @uniq;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    map { $h{$_} = 1 } @$l;\n    return [sort { $a <=> $b } keys %h];\n\
  }"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return [sort\
  \ {$a <=> $b} keys %h];\n}"
- "    my(%h, @u);\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    @u\
  \ = sort { $a <=> $b } keys %h;\n    return \\@u;\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n \
  \   }\n    return @r;\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return [sort\
  \ {$a <=> $b} keys %h];\n}"
- "    my %h;\n    my @r;\n    foreach my $e (@$l) {\n        if (!exists $h{$e})\
  \ {\n            $h{$e} = 1;\n            push @r, $e;\n        }\n    }\n    return\
  \ @r;\n}"
- "    my %seen;\n    my @unique = grep { !$seen{$_}++ } @$l;\n    return @unique;\n\
  }"
- "    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
  \ keys %h;\n    return @u;\n}"
- "    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
  \ { $a <=> $b } keys %h;\n    return \\@u;\n}"
- "    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n \
  \   }\n    return @u;\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}"
- "    my %seen;\n    my @uniq = grep { !$seen{$_}++ } @$l;\n    return @uniq;\n}"
- "    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
  \ { $a <=> $b } keys %h;\n    return \\@u;\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return [sort\
  \ {$a <=> $b} keys %h];\n}"
- "    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
  \ { $a <=> $b } keys %h;\n    return \\@u;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort keys\
  \ %h;\n}"
- "    my(%h, @r);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @r = sort\
  \ keys %h;\n    return \\@r;\n}"
- "    my %h;\n    my @u;\n    foreach my $e (@$l) {\n        if (!exists $h{$e})\
  \ {\n            $h{$e} = 1;\n            push @u, $e;\n        }\n    }\n    return\
  \ \\@u;\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort keys %h];\n}"
- "    my %h;\n    my @u;\n    for (@$l) {\n        push @u, $_ unless $h{$_}++;\n\
  \    }\n    return @u;\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my %seen;\n    return sort grep { !$seen{$_}++ } @$l;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [ sort\
  \ { $a <=> $b } keys %h ];\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort keys\
  \ %h];\n}"
- "    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n \
  \   }\n    return \\@u;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n \
  \   }\n    return \\@u;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %seen;\n    return grep { !$seen{$_}++ } @$l;\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
  \ { $a <=> $b } keys %h;\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}"
- "    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
  \ { $a <=> $b } keys %h;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return [sort {$a\
  \ <=> $b} keys %h];\n}"
- "    my %h;\n    @h{@$l} = ();\n    return [sort {$a <=> $b} keys %h];\n}"
- "    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u = sort\
  \ { $a <=> $b } keys %h;\n    return @u;\n}"
- "    my %seen;\n    my @uniq = grep { !$seen{$_}++ } @$l;\n    return \\@uniq;\n\
  }"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort {\
  \ $a <=> $b } keys %h;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort keys\
  \ %h;\n}"
- "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return sort keys\
  \ %h;\n}"
language: pl
name: HumanEval_34_unique
prompt: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3, 3,\
  \ 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n"
stop_tokens:
- '

  sub'
- '

  #'
- '


  '
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n\
  \        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9,\
  \ 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
