name: HumanEval_77_iscube
language: humaneval_to_perl.py
prompt: "# Write a function that takes an integer a and returns True \n# if this ingeger\
  \ is a cube of some integer number.\n# Note: you may assume the input is always\
  \ valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==> False\n# iscube(-1)\
  \ ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n# iscube(180) ==> False\n\
  sub iscube {\n    my($a) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&iscube;\n\
  \        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\")) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: []
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
