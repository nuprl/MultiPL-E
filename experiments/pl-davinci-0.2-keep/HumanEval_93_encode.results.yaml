language: pl
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a','e','i','o','u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 }\
    \ ('a'..'z');\n    my $alphabet_size = scalar keys %alphabet;\n    foreach my\
    \ $letter (split //, $message) {\n        if ($letter =~ /[A-Z]/) {\n        \
    \    $letter = lc($letter);\n        }\n        if ($letter =~ /[a-z]/) {\n  \
    \          if ($vowels{$letter}) {\n                my $vowel_index = 0;\n   \
    \             for (my $i = 0; $i < scalar @vowels; $i++) {\n                 \
    \   if ($vowels[$i] eq $letter) {\n                        $vowel_index = $i;\n\
    \                        last;\n                    }\n                }\n   \
    \             my $new_vowel_index = ($vowel_index + 2) % $alphabet_size;\n   \
    \             $letter = $vowels[$new_vowel_index];\n            }\n        }\n\
    \        $encoded_message .= $letter;\n    }\n    return $encoded_message;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @alphabet = ('a'..'z');\n    my %vowels\
    \ = map { $_ => 1 } qw(a e i o u);\n    for my $char (split //, $message) {\n\
    \        if ($vowels{lc $char}) {\n            my $index = first_index { $_ eq\
    \ lc $char } @alphabet;\n            $index = ($index + 2) % scalar @alphabet;\n\
    \            $char = $alphabet[$index];\n        }\n        $encoded .= uc $char;\n\
    \    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t call method "first_index" without a package or object reference
    at /tmp/tmpulwqr25q.pl line 18.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split //, $message;\n    my $encoded_message = '';\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $letter\
    \ (@message) {\n        if ($letter =~ /[a-z]/) {\n            if ($letter =~\
    \ /[aeiou]/) {\n                $letter = $vowels{$letter};\n            }\n \
    \           $letter =~ tr/a-z/A-Z/;\n        }\n        $encoded_message .= $letter;\n\
    \    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = qw(a e i o u);\n    my $vowel_index\
    \ = 0;\n    my $vowel_count = 0;\n    my $vowel_length = scalar @vowels;\n   \
    \ my $message_length = length $message;\n    for (my $i = 0; $i < $message_length;\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        if ($char =~ /[a-zA-Z]/)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $char = uc $char;\n\
    \            } else {\n                $char = lc $char;\n            }\n    \
    \        if ($char =~ /[aeiou]/) {\n                $vowel_index = 0;\n      \
    \          for (my $j = 0; $j < $vowel_length; $j++) {\n                    if\
    \ ($char eq $vowels[$j]) {\n                        $vowel_index = $j;\n     \
    \                   last;\n                    }\n                }\n        \
    \        $vowel_index += 2;\n                if ($vowel_index >= $vowel_length)\
    \ {\n                    $vowel_index -= $vowel_length;\n                }\n \
    \               $char = $vowels[$vowel_index];\n            }\n        }\n   \
    \     $encoded .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    foreach my $char (split //, $message) {\n\
    \        if ($char =~ /[aeiou]/i) {\n            $encoded .= chr(ord($char) +\
    \ 2);\n        } else {\n            $encoded .= $char;\n        }\n    }\n  \
    \  return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @letters = split //, $message;\n    my @encoded;\n    my %vowels\
    \ = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 'y',\n    );\n    for my $letter (@letters) {\n\
    \        if (exists $vowels{$letter}) {\n            push @encoded, $vowels{$letter};\n\
    \        }\n        elsif ($letter =~ /[A-Z]/) {\n            push @encoded, lc\
    \ $letter;\n        }\n        elsif ($letter =~ /[a-z]/) {\n            push\
    \ @encoded, uc $letter;\n        }\n        else {\n            push @encoded,\
    \ $letter;\n        }\n    }\n    return join '', @encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_encoded\
    \ = 'cgjkr';\n    my $vowels_encoded_hash = {};\n    for (my $i = 0; $i < length($vowels);\
    \ $i++) {\n        $vowels_encoded_hash->{substr($vowels, $i, 1)} = substr($vowels_encoded,\
    \ $i, 1);\n    }\n    for (my $i = 0; $i < length($message); $i++) {\n       \
    \ my $char = substr($message, $i, 1);\n        if (exists $vowels_encoded_hash->{$char})\
    \ {\n            $encoded .= $vowels_encoded_hash->{$char};\n        } elsif ($char\
    \ =~ /[a-z]/) {\n            $encoded .= chr(ord($char) - 32);\n        } elsif\
    \ ($char =~ /[A-Z]/) {\n            $encoded .= chr(ord($char) + 32);\n      \
    \  } else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = qw(a e i o u);\n    my %vowels\
    \ = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 } qw(a b c d e\
    \ f g h i j k l m n o p q r s t u v w x y z);\n    my %vowel_map = (\n       \
    \ 'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n\
    \        'u' => 'y',\n    );\n    for my $char (split //, $message) {\n      \
    \  if ($alphabet{$char}) {\n            if ($vowels{$char}) {\n              \
    \  $encoded .= $vowel_map{$char};\n            }\n            else {\n       \
    \         $encoded .= uc $char;\n            }\n        }\n        else {\n  \
    \          $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    foreach my $char (split //, $message) {\n        if (uc($char) eq\
    \ $char) {\n            $encoded_message .= lc($char);\n        } else {\n   \
    \         $encoded_message .= uc($char);\n        }\n        if (grep {$_ eq lc($char)}\
    \ @vowels) {\n            my $index = first_index {$_ eq lc($char)} @vowels;\n\
    \            $index = ($index + 2) % 5;\n            $encoded_message .= $vowels[$index];\n\
    \        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t call method "first_index" without a package or object reference
    at /tmp/tmpxewen5nu.pl line 22.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @letters = split(//, $message);\n    foreach\
    \ my $letter (@letters) {\n        if ($letter =~ /[a-z]/) {\n            $encoded\
    \ .= chr(ord($letter) - 32);\n        } elsif ($letter =~ /[A-Z]/) {\n       \
    \     $encoded .= chr(ord($letter) + 32);\n        } else {\n            $encoded\
    \ .= $letter;\n        }\n    }\n    $encoded =~ s/[aeiou]/chr(ord($&) + 2)/eg;\n\
    \    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my $vowels = 'aeiou';\n    my $vowels_hash\
    \ = {\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 'y',\n    };\n    foreach my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n \
    \               $char = uc $char;\n            }\n            if ($char =~ /[A-Z]/)\
    \ {\n                $char = lc $char;\n            }\n            if ($vowels\
    \ =~ /$char/) {\n                $char = $vowels_hash->{$char};\n            }\n\
    \        }\n        $encoded_message .= $char;\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split(//, $message);\n    my @encoded;\n    my $vowels\
    \ = 'aeiou';\n    foreach my $char (@message) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $char = uc($char);\n\
    \            } else {\n                $char = lc($char);\n            }\n   \
    \         if ($vowels =~ /$char/) {\n                my $index = index($vowels,\
    \ $char);\n                $index += 2;\n                $index = $index % 5;\n\
    \                $char = substr($vowels, $index, 1);\n            }\n        }\n\
    \        push(@encoded, $char);\n    }\n    return join('', @encoded);\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = \"\";\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_flag\
    \ = 0;\n    my $vowel_char = \"\";\n    my $vowel_char_index = 0;\n    my $vowel_char_count\
    \ = 0;\n    my $vowel_char_flag = 0;\n    my $vowel_char_flag_count = 0;\n   \
    \ my $vowel_char_flag_index = 0;\n    my $vowel_char_flag_char = \"\";\n    my\
    \ $vowel_char_flag_char_index = 0;\n    my $vowel_char_flag_char_count = 0;\n\
    \    my $vowel_char_flag_char_flag = 0;\n    my $vowel_char_flag_char_flag_count\
    \ = 0;\n    my $vowel_char_flag_char_flag_index = 0;\n    my $vowel_char_flag_char_flag_char\
    \ = \"\";\n    my $vowel_char_flag_char_flag_char_index = 0;\n    my $vowel_char_flag_char_flag_char_count\
    \ = 0;\n    my $vowel_char_flag_char_flag_char_flag = 0;\n    my $vowel_char_flag_char_flag_char_flag_count\
    \ = 0;\n    my $vowel_char_flag_char_flag_char_flag_index = 0;\n    my $vowel_char_flag_char_flag_char_flag_char\
    \ = \"\";\n    my $vowel_char_flag_char_flag_char_flag_char_index = 0;\n    my\
    \ $vowel_char_flag_char_flag_char_flag_char_count = 0;\n    my $vowel_char_flag_char_flag_char_flag_char_flag\
    \ = 0;\n    my $vowel_char_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp6thsqsav.pl line 41, at end
    of line

    syntax error at /tmp/tmp6thsqsav.pl line 41, near "$vowel_char_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp6thsqsav.pl line 68, at end of
    line

    syntax error at /tmp/tmp6thsqsav.pl line 68, at EOF

    Execution of /tmp/tmp6thsqsav.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    for my $char (split //,\
    \ $message) {\n        if ($vowels{lc $char}) {\n            $encoded_message\
    \ .= chr(ord($char) + 2);\n        } else {\n            $encoded_message .= $char;\n\
    \        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a'..'z');\n    my %vowels =\
    \ map { $_ => 1 } @vowels;\n    my %encoded_vowels = map { $vowels[$_] => $vowels[($_\
    \ + 2) % 26] } (0..25);\n    for my $char (split //, $message) {\n        if ($vowels{lc\
    \ $char}) {\n            $encoded .= uc $encoded_vowels{lc $char};\n        }\
    \ elsif ($vowels{uc $char}) {\n            $encoded .= lc $encoded_vowels{uc $char};\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = qw(a e i o u);\n    my %vowels\
    \ = map { $_ => 1 } @vowels;\n    my %vowels_map = (\n        'a' => 'c',\n  \
    \      'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n\
    \    );\n    for my $char (split //, $message) {\n        if ($vowels{lc $char})\
    \ {\n            $encoded .= $vowels_map{lc $char};\n        }\n        elsif\
    \ ($char =~ /[a-z]/) {\n            $encoded .= uc $char;\n        }\n       \
    \ elsif ($char =~ /[A-Z]/) {\n            $encoded .= lc $char;\n        }\n \
    \       else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 }\
    \ ('a'..'z');\n    my %encoded_alphabet = map { $_ => 1 } ('c'..'z', 'a', 'b');\n\
    \    my %encoded_vowels = map { $_ => 1 } ('e', 'i', 'o', 'u', 'a', 'b');\n  \
    \  for my $char (split //, $message) {\n        if ($alphabet{$char}) {\n    \
    \        if ($vowels{$char}) {\n                $encoded .= $encoded_vowels{$char};\n\
    \            } else {\n                $encoded .= $encoded_alphabet{$char};\n\
    \            }\n        } else {\n            $encoded .= $char;\n        }\n\
    \    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = \"\";\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowel_map = (\n        'a' => 'c',\n        'e' => 'g',\n   \
    \     'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for my\
    \ $char (split //, $message) {\n        if ($char =~ /[a-zA-Z]/) {\n         \
    \   if (grep {$_ eq lc($char)} @vowels) {\n                $encoded_message .=\
    \ uc($vowel_map{lc($char)});\n            } else {\n                $encoded_message\
    \ .= uc($char);\n            }\n        } else {\n            $encoded_message\
    \ .= $char;\n        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split //, $message;\n    my @encoded_message;\n   \
    \ foreach my $letter (@message) {\n        if ($letter =~ /[a-z]/) {\n       \
    \     $letter =~ tr/a-z/b-za/;\n            push @encoded_message, $letter;\n\
    \        } elsif ($letter =~ /[A-Z]/) {\n            $letter =~ tr/A-Z/B-ZA/;\n\
    \            push @encoded_message, $letter;\n        } else {\n            push\
    \ @encoded_message, $letter;\n        }\n    }\n    my $encoded_message = join\
    \ '', @encoded_message;\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split(//, $message);\n    my @encoded;\n    my %vowels\
    \ = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $char (@message) {\n\
    \        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n     \
    \           $char = uc($char);\n            } else {\n                $char =\
    \ lc($char);\n            }\n        }\n        if ($char =~ /[aeiou]/i) {\n \
    \           $char = $vowels{lc($char)};\n        }\n        push(@encoded, $char);\n\
    \    }\n    return join('', @encoded);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_map\
    \ = 'cfilorux';\n    my $vowels_map_index = 0;\n    my $message_length = length($message);\n\
    \    for(my $i = 0; $i < $message_length; $i++) {\n        my $char = substr($message,\
    \ $i, 1);\n        if(index($vowels, $char) != -1) {\n            $encoded .=\
    \ substr($vowels_map, $vowels_map_index, 1);\n            $vowels_map_index++;\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my $vowels = 'aeiou';\n    my $vowels_2\
    \ = 'cgjkqsxyz';\n    my $vowels_2_index = 0;\n    my $vowels_index = 0;\n   \
    \ my $char;\n    my $char_index;\n    my $char_2;\n    my $char_2_index;\n   \
    \ my $char_3;\n    my $char_3_index;\n    my $char_4;\n    my $char_4_index;\n\
    \    my $char_5;\n    my $char_5_index;\n    my $char_6;\n    my $char_6_index;\n\
    \    my $char_7;\n    my $char_7_index;\n    my $char_8;\n    my $char_8_index;\n\
    \    my $char_9;\n    my $char_9_index;\n    my $char_10;\n    my $char_10_index;\n\
    \    my $char_11;\n    my $char_11_index;\n    my $char_12;\n    my $char_12_index;\n\
    \    my $char_13;\n    my $char_13_index;\n    my $char_14;\n    my $char_14_index;\n\
    \    my $char_15;\n    my $char_15_index;\n    my $char_16;\n    my $char_16_index;\n\
    \    my $char_17;\n    my $char_17_index;\n    my $char_18;\n    my $char_18_index;\n\
    \    my $char_19;\n    my $char_19_index;\n    my $char_20;\n    my $char_20_index;\n\
    \    my $char_21;\n    my $char_21_index;\n    my $char_22;\n    my $char_22_index;\n\
    \    my $char_23;\n    my $char_23_index;\n    my $char_24;\n    my $char_24_index;\n\
    \    my $char_25;\n    my $char_25\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp0d_w1zlt.pl line 68, at end
    of line

    syntax error at /tmp/tmp0d_w1zlt.pl line 68, near "$char_25

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp0d_w1zlt.pl line 95, at end of
    line

    syntax error at /tmp/tmp0d_w1zlt.pl line 95, at EOF

    Execution of /tmp/tmp0d_w1zlt.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_encoded\
    \ = 'cgjkr';\n    my $vowels_encoded_index = 0;\n    for my $letter (split //,\
    \ $message) {\n        if ($letter =~ /[a-z]/i) {\n            if ($letter =~\
    \ /[a-z]/) {\n                $letter = uc $letter;\n            } else {\n  \
    \              $letter = lc $letter;\n            }\n            if ($vowels =~\
    \ /$letter/i) {\n                $encoded .= substr($vowels_encoded, $vowels_encoded_index,\
    \ 1);\n                $vowels_encoded_index++;\n            } else {\n      \
    \          $encoded .= $letter;\n            }\n        } else {\n           \
    \ $encoded .= $letter;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split(//, $message);\n    my @encoded_message;\n  \
    \  my $encoded_message;\n    my $letter;\n    my $vowel_index;\n    my $vowel;\n\
    \    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my $vowel_index;\n    my $vowel_index_plus_two;\n\
    \    my $vowel_index_plus_two_mod_five;\n    my $vowel_index_plus_two_mod_five_plus_one;\n\
    \    my $vowel_index_plus_two_mod_five_plus_one_mod_five;\n    my $vowel_index_plus_two_mod_five_plus_one_mod_five_plus_one;\n\
    \    my $vowel_index_plus_two_mod_five_plus_one_mod_five_plus_one_mod_five;\n\
    \    my $vowel_index_plus_two_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one;\n\
    \    my $vowel_index_plus_two_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one_mod_five;\n\
    \    my $vowel_index_plus_two_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one;\n\
    \    my $vowel_index_plus_two_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one_mod_five;\n\
    \    my $vowel_index_plus_two_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one;\n\
    \    my $vowel_index_plus_two_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one_mod_five_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmptwy6ejk8.pl line 33, at end
    of line

    syntax error at /tmp/tmptwy6ejk8.pl line 33, near "$vowel_index_plus_two_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one_mod_five_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmptwy6ejk8.pl line 60, at end of
    line

    syntax error at /tmp/tmptwy6ejk8.pl line 60, at EOF

    Execution of /tmp/tmptwy6ejk8.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 }\
    \ ('a'..'z');\n    my %alphabet_upper = map { $_ => 1 } ('A'..'Z');\n    my %alphabet_lower\
    \ = map { $_ => 1 } ('a'..'z');\n    my $alphabet_size = keys %alphabet;\n   \
    \ my $alphabet_lower_size = keys %alphabet_lower;\n    my $alphabet_upper_size\
    \ = keys %alphabet_upper;\n    my $vowels_size = keys %vowels;\n    my $vowel_index\
    \ = 0;\n    my $vowel_index_lower = 0;\n    my $vowel_index_upper = 0;\n    my\
    \ $vowel_index_lower_size = 0;\n    my $vowel_index_upper_size = 0;\n    my $vowel_index_size\
    \ = 0;\n    my $vowel_index_lower_size = 0;\n    my $vowel_index_upper_size =\
    \ 0;\n    my $vowel_index_size = 0;\n    my $vowel_index_lower_size = 0;\n   \
    \ my $vowel_index_upper_size = 0;\n    my $vowel_index_size = 0;\n    my $vowel_index_lower_size\
    \ = 0;\n    my $vowel_index_upper_size = 0;\n    my $vowel_index_size = 0;\n \
    \   my $vowel_index_lower_size = 0;\n    my $vowel_index_upper_size = 0;\n   \
    \ my $vowel_index_size = 0;\n    my $vowel_index_lower_size = 0;\n    my $vowel_index_upper_size\
    \ = 0;\n    my $vowel_index_size = 0;\n    my $vowel_index_lower_size = 0\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpyq_jp2u9.pl line 45, at end
    of line

    syntax error at /tmp/tmpyq_jp2u9.pl line 45, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpyq_jp2u9.pl line 72, at end of
    line

    syntax error at /tmp/tmpyq_jp2u9.pl line 72, at EOF

    Execution of /tmp/tmpyq_jp2u9.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message_array = split(//, $message);\n    my $encoded_message\
    \ = '';\n    foreach my $letter (@message_array) {\n        if ($letter =~ /[a-z]/)\
    \ {\n            $encoded_message .= chr(ord($letter) - 32);\n        } elsif\
    \ ($letter =~ /[A-Z]/) {\n            $encoded_message .= chr(ord($letter) + 32);\n\
    \        } else {\n            $encoded_message .= $letter;\n        }\n    }\n\
    \    $encoded_message =~ s/[aeiou]/chr(ord($&) + 2)/eg;\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %letters = map { $_ => 1 }\
    \ ('a'..'z');\n    my %letters_upper = map { $_ => 1 } ('A'..'Z');\n    my %letters_lower\
    \ = map { $_ => 1 } ('a'..'z');\n    my %letters_both = map { $_ => 1 } ('a'..'z',\
    \ 'A'..'Z');\n    my %letters_lower_swap = map { $_ => 1 } ('a'..'z');\n    my\
    \ %letters_upper_swap = map { $_ => 1 } ('A'..'Z');\n    my %letters_both_swap\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z');\n    my $i = 0;\n    foreach my $letter\
    \ (keys %letters_lower) {\n        $letters_lower_swap{$letter} = (keys %letters_lower)[$i];\n\
    \        $i++;\n    }\n    $i = 0;\n    foreach my $letter (keys %letters_upper)\
    \ {\n        $letters_upper_swap{$letter} = (keys %letters_upper)[$i];\n     \
    \   $i++;\n    }\n    $i = 0;\n    foreach my $letter (keys %letters_both) {\n\
    \        $letters_both_swap{$letter} = (keys %letters_both)[$i];\n        $i++;\n\
    \    }\n    my $vowel_index = 0;\n    foreach my $letter (split //, $message)\
    \ {\n        if (exists $letters_both{$letter}) {\n            $encoded .= $letters_both_swap{$letter};\n\
    \        }\n        elsif (exists $letters_lower{$letter}) {\n            $encoded\
    \ .= $letters_lower_swap{$letter};\n        }\n        elsif (exists $letters_upper{$letter})\
    \ {\n            $encoded .= $letters_upper_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpqv0srlg1.pl line 48, at end
    of line

    syntax error at /tmp/tmpqv0srlg1.pl line 48, near "$letters_upper_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpqv0srlg1.pl line 75, at end of
    line

    syntax error at /tmp/tmpqv0srlg1.pl line 75, at EOF

    Execution of /tmp/tmpqv0srlg1.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = \"\";\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowel_map = (\n        'a' => 'c',\n        'e' => 'g',\n   \
    \     'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    my @message_chars\
    \ = split(//, $message);\n    foreach my $char (@message_chars) {\n        if\
    \ (grep {$_ eq $char} @vowels) {\n            $encoded_message .= $vowel_map{$char};\n\
    \        } else {\n            $encoded_message .= $char;\n        }\n    }\n\
    \    return uc($encoded_message);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my $vowels = 'aeiou';\n    my $vowels_hash\
    \ = {\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 'y',\n    };\n    for my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[A-Z]/) {\n \
    \               $encoded_message .= lc($char);\n            } else {\n       \
    \         $encoded_message .= uc($char);\n            }\n        }\n        if\
    \ ($char =~ /[aeiou]/i) {\n            if ($char =~ /[A-Z]/) {\n             \
    \   $encoded_message .= uc($vowels_hash->{lc($char)});\n            } else {\n\
    \                $encoded_message .= $vowels_hash->{$char};\n            }\n \
    \       }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my $vowels = 'aeiou';\n    my $vowels_hash\
    \ = {\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 'y',\n    };\n    for my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n \
    \               $char = uc $char;\n            } else {\n                $char\
    \ = lc $char;\n            }\n            if ($vowels =~ /$char/i) {\n       \
    \         $char = $vowels_hash->{lc $char};\n            }\n        }\n      \
    \  $encoded_message .= $char;\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %letters = map { $_ => 1 }\
    \ ('a'..'z');\n    my %letters_upper = map { $_ => 1 } ('A'..'Z');\n    my $i\
    \ = 0;\n    while ($i < length($message)) {\n        my $letter = substr($message,\
    \ $i, 1);\n        if (exists $letters{$letter}) {\n            $encoded .= chr(ord($letter)\
    \ + 2);\n        } elsif (exists $letters_upper{$letter}) {\n            $encoded\
    \ .= chr(ord($letter) + 2 - 26);\n        } else {\n            $encoded .= $letter;\n\
    \        }\n        $i++;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_encoded\
    \ = 'cgjkr';\n    my $vowels_encoded_hash = {};\n    my $vowels_hash = {};\n \
    \   my $i = 0;\n    foreach my $vowel (split(//, $vowels)) {\n        $vowels_hash->{$vowel}\
    \ = 1;\n        $vowels_encoded_hash->{$vowel} = substr($vowels_encoded, $i, 1);\n\
    \        $i++;\n    }\n    foreach my $char (split(//, $message)) {\n        if\
    \ ($vowels_hash->{lc($char)}) {\n            $encoded .= $vowels_encoded_hash->{lc($char)};\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my $vowels = 'aeiou';\n    my $vowels_2_ahead\
    \ = 'cgkmoqsuwy';\n    my $vowels_hash = {};\n    my $vowels_2_ahead_hash = {};\n\
    \    my @vowels_array = split(//, $vowels);\n    my @vowels_2_ahead_array = split(//,\
    \ $vowels_2_ahead);\n    for (my $i = 0; $i < scalar(@vowels_array); $i++) {\n\
    \        $vowels_hash->{$vowels_array[$i]} = $vowels_2_ahead_array[$i];\n    \
    \    $vowels_2_ahead_hash->{$vowels_2_ahead_array[$i]} = $vowels_array[$i];\n\
    \    }\n    my @message_array = split(//, $message);\n    for (my $i = 0; $i <\
    \ scalar(@message_array); $i++) {\n        if ($vowels_hash->{lc($message_array[$i])})\
    \ {\n            $encoded_message .= $vowels_hash->{lc($message_array[$i])};\n\
    \        } elsif ($vowels_2_ahead_hash->{lc($message_array[$i])}) {\n        \
    \    $encoded_message .= $vowels_2_ahead_hash->{lc($message_array[$i])};\n   \
    \     } else {\n            $encoded_message .= $message_array[$i];\n        }\n\
    \    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map {$_ => 1} @vowels;\n    my $vowel_index = 0;\n    my $vowel_count\
    \ = scalar @vowels;\n    for my $char (split //, $message) {\n        if ($char\
    \ =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n                $char =~\
    \ tr/a-z/A-Z/;\n            } else {\n                $char =~ tr/A-Z/a-z/;\n\
    \            }\n            if ($vowels{lc($char)}) {\n                $vowel_index\
    \ = ($vowel_index + 2) % $vowel_count;\n                $char = $vowels[$vowel_index];\n\
    \            }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my $vowels = 'aeiou';\n    my $vowels_length\
    \ = length($vowels);\n    my $vowel_index = 0;\n    my $vowel_found = 0;\n   \
    \ my $message_length = length($message);\n    my $message_index = 0;\n    my $message_char\
    \ = '';\n    my $message_char_upper = '';\n    my $message_char_lower = '';\n\
    \    my $message_char_index = 0;\n    my $message_char_upper_index = 0;\n    my\
    \ $message_char_lower_index = 0;\n    my $message_char_upper_index_plus_two =\
    \ 0;\n    my $message_char_lower_index_plus_two = 0;\n    my $message_char_upper_index_plus_two_mod\
    \ = 0;\n    my $message_char_lower_index_plus_two_mod = 0;\n    my $message_char_upper_index_plus_two_mod_char\
    \ = '';\n    my $message_char_lower_index_plus_two_mod_char = '';\n    for ($message_index\
    \ = 0; $message_index < $message_length; $message_index++) {\n        $message_char\
    \ = substr($message, $message_index, 1);\n        $message_char_upper = uc($message_char);\n\
    \        $message_char_lower = lc($message_char);\n        $message_char_upper_index\
    \ = index($vowels, $message_char_upper);\n        $message_char_lower_index =\
    \ index($vowels, $message_char_lower);\n        $message_char_upper_index_plus_two\
    \ = $message_char_upper_index + 2;\n        $message_char_lower_index_plus_two\
    \ = $message_char_lower_index + 2;\n        $message_char_upper_index_plus_two_mod\
    \ = $message_char_upper_index_plus_two % $vowels_length;\n        $message_char_lower_index_plus_two_mod\
    \ = $message\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpqxoo8y_9.pl line 42, at end
    of line

    syntax error at /tmp/tmpqxoo8y_9.pl line 42, near "$message

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpqxoo8y_9.pl line 69, at end of
    line

    syntax error at /tmp/tmpqxoo8y_9.pl line 69, at EOF

    Execution of /tmp/tmpqxoo8y_9.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 }\
    \ ('a'..'z');\n    my %alphabet_upper = map { $_ => 1 } ('A'..'Z');\n    my %alphabet_lower\
    \ = map { $_ => 1 } ('a'..'z');\n    my %alphabet_upper_lower = map { $_ => 1\
    \ } ('A'..'Z', 'a'..'z');\n    my %alphabet_lower_upper = map { $_ => 1 } ('a'..'z',\
    \ 'A'..'Z');\n    my %alphabet_lower_upper_swap = map { $_ => 1 } ('a'..'z', 'A'..'Z');\n\
    \    my %alphabet_upper_lower_swap = map { $_ => 1 } ('A'..'Z', 'a'..'z');\n \
    \   my %alphabet_lower_upper_swap_vowels = map { $_ => 1 } ('a'..'z', 'A'..'Z');\n\
    \    my %alphabet_upper_lower_swap_vowels = map { $_ => 1 } ('A'..'Z', 'a'..'z');\n\
    \    my $i = 0;\n    foreach my $letter (split //, $message) {\n        if ($alphabet_lower{$letter})\
    \ {\n            $alphabet_lower_upper_swap{$letter} = chr(ord($letter) - 32);\n\
    \        }\n        if ($alphabet_upper{$letter}) {\n            $alphabet_upper_lower_swap{$letter}\
    \ = chr(ord($letter) + 32);\n        }\n        if ($vowels{$letter}) {\n    \
    \        $alphabet_lower_upper_swap_vowels{$letter} = chr(ord($letter) - 32);\n\
    \            $alphabet_upper_lower_swap_vowels{$letter} = chr(ord($letter) + 32);\n\
    \        }\n    }\n   \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpz9c1y_kh.pl line 66, at
    end of line

    syntax error at /tmp/tmpz9c1y_kh.pl line 66, at EOF

    Execution of /tmp/tmpz9c1y_kh.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_encoded\
    \ = 'cgjkr';\n    my $vowels_encoded_index = 0;\n    for my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n \
    \               $encoded .= uc $char;\n            } else {\n                $encoded\
    \ .= lc $char;\n            }\n        }\n        if ($char =~ /[aeiou]/i) {\n\
    \            if ($char =~ /[aeiou]/) {\n                $encoded .= uc substr($vowels_encoded,\
    \ $vowels_encoded_index, 1);\n            } else {\n                $encoded .=\
    \ lc substr($vowels_encoded, $vowels_encoded_index, 1);\n            }\n     \
    \       $vowels_encoded_index++;\n        }\n    }\n    return $encoded;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @letters = split(//, $message);\n    foreach\
    \ my $letter (@letters) {\n        if ($letter =~ /[a-z]/) {\n            if ($letter\
    \ =~ /[aeiou]/) {\n                $letter =~ tr/aeiou/efghj/;\n            }\n\
    \            $letter =~ tr/a-z/A-Z/;\n        }\n        $encoded .= $letter;\n\
    \    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split(//, $message);\n    my @encoded_message;\n  \
    \  my $letter;\n    my $vowel_index;\n    my $vowel_index_plus_two;\n    my $vowel_index_plus_two_mod_26;\n\
    \    my $vowel_index_plus_two_mod_26_plus_97;\n    my $vowel_index_plus_two_mod_26_plus_97_chr;\n\
    \    my $vowel_index_plus_two_mod_26_plus_65;\n    my $vowel_index_plus_two_mod_26_plus_65_chr;\n\
    \    my $vowel;\n    my $vowel_is_upper;\n    my $vowel_is_lower;\n    my $vowel_is_upper_or_lower;\n\
    \    my $vowel_is_upper_or_lower_chr;\n    my $vowel_is_upper_or_lower_chr_plus_two;\n\
    \    my $vowel_is_upper_or_lower_chr_plus_two_mod_26;\n    my $vowel_is_upper_or_lower_chr_plus_two_mod_26_plus_97;\n\
    \    my $vowel_is_upper_or_lower_chr_plus_two_mod_26_plus_97_chr;\n    my $vowel_is_upper_or_lower_chr_plus_two_mod_26_plus_65;\n\
    \    my $vowel_is_upper_or_lower_chr_plus_two_mod_26_plus_65_chr;\n    my $vowel_is_upper_or_lower_chr_plus_two_mod_26_plus_65_chr_upper;\n\
    \    my $vowel_is_upper_or_lower_chr_plus_two_mod_26_plus_65_chr_lower;\n    my\
    \ $vowel_is_upper_or_lower_chr_plus_two_mod_26_plus_\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpcsgwn2c2.pl line 37, at end
    of line

    syntax error at /tmp/tmpcsgwn2c2.pl line 37, near "$vowel_is_upper_or_lower_chr_plus_two_mod_26_plus_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpcsgwn2c2.pl line 64, at end of
    line

    syntax error at /tmp/tmpcsgwn2c2.pl line 64, at EOF

    Execution of /tmp/tmpcsgwn2c2.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split //, $message;\n    my @encoded;\n    foreach\
    \ my $char (@message) {\n        if ($char =~ /[a-z]/i) {\n            if ($char\
    \ =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n            }\n      \
    \      else {\n                $char =~ tr/A-Z/a-z/;\n            }\n        \
    \    if ($char =~ /[aeiou]/i) {\n                $char =~ tr/aeiou/EIOUA/;\n \
    \           }\n        }\n        push @encoded, $char;\n    }\n    return join\
    \ '', @encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my $vowel_index = 0;\n\
    \    my $vowel_count = scalar @vowels;\n    for my $char (split //, $message)\
    \ {\n        if ($vowels{lc $char}) {\n            $vowel_index = ($vowel_index\
    \ + 2) % $vowel_count;\n            $char = $vowels[$vowel_index];\n        }\n\
    \        $encoded_message .= $char;\n    }\n    return $encoded_message;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my $vowel_index = 0;\n    my $vowel_count = scalar @vowels;\n    my $vowel_found\
    \ = 0;\n    my $vowel_position = 0;\n    my $vowel_replacement = '';\n    my $vowel_replacement_index\
    \ = 0;\n    my $vowel_replacement_position = 0;\n    my $vowel_replacement_found\
    \ = 0;\n    my $vowel_replacement_count = 0;\n    my $vowel_replacement_char =\
    \ '';\n    my $char = '';\n    my $char_index = 0;\n    my $char_count = 0;\n\
    \    my $char_position = 0;\n    my $char_found = 0;\n    my $char_replacement\
    \ = '';\n    my $char_replacement_index = 0;\n    my $char_replacement_position\
    \ = 0;\n    my $char_replacement_found = 0;\n    my $char_replacement_count =\
    \ 0;\n    my $char_replacement_char = '';\n    my $char_replacement_char_index\
    \ = 0;\n    my $char_replacement_char_count = 0;\n    my $char_replacement_char_position\
    \ = 0;\n    my $char_replacement_char_found = 0;\n    my $char_replacement_char_replacement\
    \ = '';\n    my $char_replacement_char_replacement_index = 0;\n    my $char_replacement_char_replacement_position\
    \ = 0;\n    my $char_replacement_char_replacement_found = 0;\n    my $char_replacement_char_replacement_count\
    \ = 0;\n    my $char_replacement_char_replacement_char = '';\n    my $char_replacement_char_replacement_char_index\
    \ = 0;\n    my $char_replacement_char_replacement_char_count = 0;\n    my $char_replacement_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmppv6839kh.pl line 49, at end
    of line

    syntax error at /tmp/tmppv6839kh.pl line 49, near "$char_replacement_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmppv6839kh.pl line 76, at end of
    line

    syntax error at /tmp/tmppv6839kh.pl line 76, at EOF

    Execution of /tmp/tmppv6839kh.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my $vowels = 'aeiou';\n    my $vowels_hash\
    \ = {\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 'y',\n    };\n    for my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[A-Z]/) {\n \
    \               $encoded_message .= lc($char);\n            }\n            else\
    \ {\n                $encoded_message .= uc($char);\n            }\n        }\n\
    \        elsif ($char =~ /[$vowels]/i) {\n            $encoded_message .= $vowels_hash->{lc($char)};\n\
    \        }\n        else {\n            $encoded_message .= $char;\n        }\n\
    \    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 0
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    for my $c (split //, $message)\
    \ {\n        if ($c =~ /[a-z]/i) {\n            if ($c =~ /[a-z]/) {\n       \
    \         $c =~ tr/a-z/A-Z/;\n            } else {\n                $c =~ tr/A-Z/a-z/;\n\
    \            }\n            if ($vowels{lc($c)}) {\n                $c = chr(ord($c)\
    \ + 2);\n            }\n        }\n        $encoded .= $c;\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %letters = map { $_ => 1 }\
    \ ('a'..'z');\n    my %letters_upper = map { $_ => 1 } ('A'..'Z');\n    my %letters_lower\
    \ = map { $_ => 1 } ('a'..'z');\n    my %letters_lower_upper = map { $_ => 1 }\
    \ ('a'..'z', 'A'..'Z');\n    my %letters_lower_upper_numbers = map { $_ => 1 }\
    \ ('a'..'z', 'A'..'Z', '0'..'9');\n    my %letters_lower_upper_numbers_space =\
    \ map { $_ => 1 } ('a'..'z', 'A'..'Z', '0'..'9', ' ');\n    my %letters_lower_upper_numbers_space_punctuation\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z', '0'..'9', ' ', '.', ',', '!', '?', ':',\
    \ ';', '\"', '\\'', '-');\n    my %letters_lower_upper_numbers_space_punctuation_underscore\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z', '0'..'9', ' ', '.', ',', '!', '?', ':',\
    \ ';', '\"', '\\'', '-', '_');\n    my %letters_lower_upper_numbers_space_punctuation_underscore_at\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z', '0'..'9', ' ', '.', ',', '!', '?', ':',\
    \ ';', '\"', '\\'', '-', '_', '@');\n    my %letters_lower_upper_numbers_space_punctuation_underscore_at_hash\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z',\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpjui807eq.pl line 26, at end
    of line

    syntax error at /tmp/tmpjui807eq.pl line 26, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpjui807eq.pl line 53, at end of
    line

    syntax error at /tmp/tmpjui807eq.pl line 53, at EOF

    Execution of /tmp/tmpjui807eq.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n        'a'\
    \ => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' => 'f',\n   \
    \     'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n        'h' => 'j',\n\
    \        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n        'l' =>\
    \ 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' => 'q',\n      \
    \  'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n        's' => 'u',\n\
    \        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n        'w' =>\
    \ 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' => 'b',\n    );\n\
    \    for my $char (split //, $message) {\n        if ($vowels{lc($char)}) {\n\
    \            $encoded .= $alphabet{lc($char)};\n        } else {\n           \
    \ $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = qw(a e i o u);\n    my\
    \ @alphabet = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n    my\
    \ %vowel_hash = map { $vowels[$_] => $vowels[($_ + 2) % 5] } 0..$#vowels;\n  \
    \  my %alphabet_hash = map { $alphabet[$_] => $_ } 0..$#alphabet;\n    my @message_array\
    \ = split //, $message;\n    foreach my $char (@message_array) {\n        if (exists\
    \ $vowel_hash{$char}) {\n            $encoded_message .= $vowel_hash{$char};\n\
    \        } elsif (exists $alphabet_hash{$char}) {\n            my $index = $alphabet_hash{$char};\n\
    \            my $new_index = ($index + 2) % 26;\n            $encoded_message\
    \ .= $alphabet[$new_index];\n        } else {\n            $encoded_message .=\
    \ $char;\n        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %letters = map { $_ => 1 }\
    \ ('a'..'z');\n    my %letters_uppercase = map { $_ => 1 } ('A'..'Z');\n    my\
    \ $index = 0;\n    my $length = length($message);\n    while ($index < $length)\
    \ {\n        my $letter = substr($message, $index, 1);\n        if (exists $letters{$letter})\
    \ {\n            $letter = chr(ord($letter) + 2);\n            if (exists $vowels{$letter})\
    \ {\n                $letter = chr(ord($letter) + 1);\n            }\n       \
    \     if (exists $letters_uppercase{$letter}) {\n                $letter = chr(ord($letter)\
    \ - 26);\n            }\n        }\n        $encoded .= $letter;\n        $index++;\n\
    \    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    for my $char (split //,\
    \ $message) {\n        if ($vowels{lc $char}) {\n            $encoded_message\
    \ .= chr(ord($char) + 2);\n        } else {\n            $encoded_message .= $char;\n\
    \        }\n    }\n    return uc $encoded_message;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split(//, $message);\n    my @encoded;\n    foreach\
    \ my $char (@message) {\n        if ($char =~ /[a-z]/i) {\n            if ($char\
    \ =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n            }\n      \
    \      else {\n                $char =~ tr/A-Z/a-z/;\n            }\n        \
    \    if ($char =~ /[aeiou]/i) {\n                if ($char =~ /[aeiou]/) {\n \
    \                   $char =~ tr/aeiou/EIOUA/;\n                }\n           \
    \     else {\n                    $char =~ tr/AEIOU/eioua/;\n                }\n\
    \            }\n        }\n        push(@encoded, $char);\n    }\n    return join('',\
    \ @encoded);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @chars = split //, $message;\n    my @encoded;\n    for my $char\
    \ (@chars) {\n        if ($char =~ /[a-z]/i) {\n            my $encoded = $char;\n\
    \            if ($char =~ /[a-z]/) {\n                $encoded = chr(ord($char)\
    \ - 32);\n            }\n            if ($char =~ /[A-Z]/) {\n               \
    \ $encoded = chr(ord($char) + 32);\n            }\n            if ($char =~ /[aeiou]/i)\
    \ {\n                my $next = chr(ord($char) + 2);\n                if ($next\
    \ =~ /[aeiou]/i) {\n                    $next = chr(ord($next) + 2);\n       \
    \         }\n                $encoded = $next;\n            }\n            push\
    \ @encoded, $encoded;\n        } else {\n            push @encoded, $char;\n \
    \       }\n    }\n    return join '', @encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    for my $char (split //, $message) {\n        if ($char =~ /[a-z]/i) {\n \
    \           $char =~ tr/a-z/A-Z/;\n            for my $vowel (@vowels) {\n   \
    \             if ($char eq $vowel) {\n                    $char = chr(ord($char)\
    \ + 2);\n                }\n            }\n        }\n        $encoded .= $char;\n\
    \    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a'..'z', 'A'..'Z');\n    my\
    \ @vowels_encoded = ('c'..'z', 'c'..'z', 'C'..'Z', 'C'..'Z');\n    my %vowels_hash\
    \ = map { $vowels[$_] => $vowels_encoded[$_] } 0..$#vowels;\n    my @letters =\
    \ ('a'..'z', 'A'..'Z');\n    my @letters_encoded = ('A'..'Z', 'a'..'z');\n   \
    \ my %letters_hash = map { $letters[$_] => $letters_encoded[$_] } 0..$#letters;\n\
    \    for my $char (split //, $message) {\n        if (exists $vowels_hash{$char})\
    \ {\n            $encoded .= $vowels_hash{$char};\n        } elsif (exists $letters_hash{$char})\
    \ {\n            $encoded .= $letters_hash{$char};\n        } else {\n       \
    \     $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    my %vowel_hash = map {$_ => 1} split(//,\
    \ $vowels);\n    my %alphabet_hash = map {$_ => 1} split(//, $alphabet);\n   \
    \ for my $char (split(//, $message)) {\n        if (exists $vowel_hash{lc($char)})\
    \ {\n            my $index = index($alphabet, lc($char));\n            $index\
    \ = ($index + 2) % 26;\n            $encoded .= substr($alphabet, $index, 1);\n\
    \        }\n        elsif (exists $alphabet_hash{lc($char)}) {\n            $encoded\
    \ .= uc($char);\n        }\n        else {\n            $encoded .= $char;\n \
    \       }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $result = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 }\
    \ ('a'..'z');\n    my %encoded_alphabet = map { $_ => 1 } ('c'..'z', 'a', 'b');\n\
    \    my @encoded_alphabet = ('c'..'z', 'a', 'b');\n    my %encoded_vowels = map\
    \ { $_ => 1 } ('c', 'e', 'g', 'i', 'k');\n    my @encoded_vowels = ('c', 'e',\
    \ 'g', 'i', 'k');\n    my %encoded_vowels_index = map { $encoded_vowels[$_] =>\
    \ $_ } (0..$#encoded_vowels);\n    my %encoded_alphabet_index = map { $encoded_alphabet[$_]\
    \ => $_ } (0..$#encoded_alphabet);\n    for my $char (split //, $message) {\n\
    \        if ($alphabet{$char}) {\n            if ($vowels{$char}) {\n        \
    \        $result .= $encoded_vowels[$encoded_vowels_index{$char} + 2];\n     \
    \       } else {\n                $result .= $encoded_alphabet[$encoded_alphabet_index{$char}\
    \ + 2];\n            }\n        } else {\n            $result .= $char;\n    \
    \    }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n        'a'\
    \ => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' => 'f',\n   \
    \     'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n        'h' => 'j',\n\
    \        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n        'l' =>\
    \ 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' => 'q',\n      \
    \  'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n        's' => 'u',\n\
    \        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n        'w' =>\
    \ 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' => 'b',\n    );\n\
    \    for my $char (split //, $message) {\n        if ($vowels{$char}) {\n    \
    \        $encoded .= $alphabet{$char};\n        } else {\n            $encoded\
    \ .= $char;\n        }\n    }\n    return uc($encoded);\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split(//, $message);\n    my @encoded_message;\n  \
    \  my $vowels = \"aeiou\";\n    foreach my $letter (@message) {\n        if ($letter\
    \ =~ /[A-Z]/) {\n            $letter = lc($letter);\n        } elsif ($letter\
    \ =~ /[a-z]/) {\n            $letter = uc($letter);\n        }\n        if ($vowels\
    \ =~ /$letter/) {\n            my $index = index($vowels, $letter);\n        \
    \    $index = ($index + 2) % 5;\n            $letter = substr($vowels, $index,\
    \ 1);\n        }\n        push(@encoded_message, $letter);\n    }\n    return\
    \ join(\"\", @encoded_message);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    for my $char (split //, $message) {\n        if ($char =~ /[a-z]/i) {\n \
    \           my $new_char = $char;\n            if ($char =~ /[a-z]/) {\n     \
    \           $new_char = uc $char;\n            } else {\n                $new_char\
    \ = lc $char;\n            }\n            if (grep {$_ eq lc $char} @vowels) {\n\
    \                my $index = first_index {$_ eq lc $char} @vowels;\n         \
    \       $index = ($index + 2) % @vowels;\n                $new_char = $vowels[$index];\n\
    \            }\n            $encoded .= $new_char;\n        } else {\n       \
    \     $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t call method "first_index" without a package or object reference
    at /tmp/tmpxnfsx7jl.pl line 24.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_encoded\
    \ = 'cgjkr';\n    for my $char (split //, $message) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            $encoded .= uc $char;\n        } else {\n            $encoded\
    \ .= $char;\n        }\n    }\n    for my $char (split //, $encoded) {\n     \
    \   if ($char =~ /[a-z]/i) {\n            my $index = index($vowels, lc $char);\n\
    \            if ($index != -1) {\n                $encoded =~ s/$char/$vowels_encoded[$index]/;\n\
    \            }\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_encoded\
    \ = 'cgjkr';\n    for my $char (split //, $message) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n\
    \            }\n            else {\n                $char =~ tr/A-Z/a-z/;\n  \
    \          }\n            my $index = index($vowels, lc($char));\n           \
    \ if ($index >= 0) {\n                $char = substr($vowels_encoded, $index,\
    \ 1);\n            }\n        }\n        $encoded .= $char;\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_2 =\
    \ 'cgjkqsxyz';\n    for my $char (split //, $message) {\n        if ($char =~\
    \ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n                $char = uc\
    \ $char;\n            } else {\n                $char = lc $char;\n          \
    \  }\n            if ($vowels =~ /$char/) {\n                $char = substr($vowels_2,\
    \ index($vowels, $char), 1);\n            }\n        }\n        $encoded .= $char;\n\
    \    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %letters = map { $_ => 1 }\
    \ ('a'..'z');\n    my %letters_upper = map { $_ => 1 } ('A'..'Z');\n    my %letters_lower\
    \ = map { $_ => 1 } ('a'..'z');\n    my $i = 0;\n    while ($i < length($message))\
    \ {\n        my $char = substr($message, $i, 1);\n        if (exists $letters_upper{$char})\
    \ {\n            $char = lc($char);\n        }\n        if (exists $vowels{$char})\
    \ {\n            $char = substr($message, $i+2, 1);\n            if (exists $letters_lower{$char})\
    \ {\n                $char = uc($char);\n            }\n            $i += 2;\n\
    \        }\n        $encoded .= $char;\n        $i++;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = qw(a e i o u);\n    my %vowels\
    \ = map { $_ => 1 } @vowels;\n    my %vowels_map = (\n        'a' => 'c',\n  \
    \      'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n\
    \    );\n    for my $char (split //, $message) {\n        if ($vowels{lc $char})\
    \ {\n            $encoded .= $vowels_map{lc $char};\n        }\n        elsif\
    \ ($char =~ /[a-z]/) {\n            $encoded .= uc $char;\n        }\n       \
    \ elsif ($char =~ /[A-Z]/) {\n            $encoded .= lc $char;\n        }\n \
    \       else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %letters = map { $_ => 1 }\
    \ ('a'..'z');\n    my %letters_upper = map { $_ => 1 } ('A'..'Z');\n    my %letters_lower\
    \ = map { $_ => 1 } ('a'..'z');\n    my $i = 0;\n    while ($i < length($message))\
    \ {\n        my $char = substr($message, $i, 1);\n        if (exists $letters_upper{$char})\
    \ {\n            $char = lc($char);\n        }\n        if (exists $vowels{$char})\
    \ {\n            $char = substr($message, $i+2, 1);\n            if (exists $letters_lower{$char})\
    \ {\n                $char = uc($char);\n            }\n            $i += 2;\n\
    \        }\n        $encoded .= $char;\n        $i++;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a'..'z');\n    my %vowels =\
    \ map { $vowels[$_] => $vowels[($_ + 2) % 26] } (0..$#vowels);\n    for my $char\
    \ (split //, $message) {\n        if (exists $vowels{lc $char}) {\n          \
    \  $encoded .= uc $vowels{lc $char};\n        }\n        elsif (exists $vowels{uc\
    \ $char}) {\n            $encoded .= lc $vowels{uc $char};\n        }\n      \
    \  else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    $message =~ tr/a-zA-Z/A-Za-z/;\n    $message =~ tr/aeiou/cdfgh/;\n\
    \    return $message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_encoded\
    \ = 'cgjkr';\n    my %vowels_map = (\n        'a' => 'c',\n        'e' => 'g',\n\
    \        'i' => 'j',\n        'o' => 'k',\n        'u' => 'r',\n    );\n    for\
    \ my $char (split //, $message) {\n        if ($char =~ /[a-z]/i) {\n        \
    \    if ($char =~ /[a-z]/) {\n                $encoded .= uc $char;\n        \
    \    } else {\n                $encoded .= lc $char;\n            }\n        }\
    \ elsif ($char =~ /[$vowels]/i) {\n            if ($char =~ /[$vowels]/) {\n \
    \               $encoded .= uc $vowels_map{lc $char};\n            } else {\n\
    \                $encoded .= lc $vowels_map{uc $char};\n            }\n      \
    \  } else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a'..'z');\n    my %vowels =\
    \ map { $_ => 1 } @vowels;\n    my %vowels_map = map { $vowels[$_] => $vowels[($_\
    \ + 2) % scalar(@vowels)] } (0..$#vowels);\n    for my $char (split //, $message)\
    \ {\n        if ($vowels{lc($char)}) {\n            $encoded .= uc($vowels_map{lc($char)});\n\
    \        } else {\n            $encoded .= uc($char);\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my @vowels = split(//,\
    \ $vowels);\n    my $vowels_length = length($vowels);\n    my $vowel_index = 0;\n\
    \    my $char_index = 0;\n    my $char = '';\n    my $char_is_vowel = 0;\n   \
    \ my $char_is_upper = 0;\n    my $char_is_lower = 0;\n    my $char_is_alpha =\
    \ 0;\n    my $char_is_digit = 0;\n    my $char_is_space = 0;\n    my $char_is_punct\
    \ = 0;\n    my $char_is_other = 0;\n    my $char_is_vowel_index = 0;\n    my $char_is_vowel_index_plus_two\
    \ = 0;\n    my $char_is_vowel_index_plus_two_mod_vowels_length = 0;\n    my $char_is_vowel_index_plus_two_mod_vowels_length_char\
    \ = '';\n    my $char_is_vowel_index_plus_two_mod_vowels_length_char_is_upper\
    \ = 0;\n    my $char_is_vowel_index_plus_two_mod_vowels_length_char_is_lower =\
    \ 0;\n    my $char_is_vowel_index_plus_two_mod_vowels_length_char_is_alpha = 0;\n\
    \    my $char_is_vowel_index_plus_two_mod_vowels_length_char_is_digit = 0;\n \
    \   my $char_is_vowel_index_plus_two_mod_vowels_length_char_is_space = 0;\n  \
    \  my $char_is_vowel_index_plus_two_mod_vowels_length_char_is_punct = 0;\n   \
    \ my $char_is_vowel_index_plus_two_mod_vowels_length_char_is\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpuozrnyls.pl line 39, at end
    of line

    syntax error at /tmp/tmpuozrnyls.pl line 39, near "$char_is_vowel_index_plus_two_mod_vowels_length_char_is

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpuozrnyls.pl line 66, at end of
    line

    syntax error at /tmp/tmpuozrnyls.pl line 66, at EOF

    Execution of /tmp/tmpuozrnyls.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    for my $char (split //, $message) {\n    \
    \    if ($char =~ /[aeiou]/i) {\n            $encoded .= chr(ord($char) + 2);\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = qw(a e i o u);\n    my %vowels\
    \ = map { $_ => 1 } @vowels;\n    my %letters = map { $_ => 1 } ('a'..'z');\n\
    \    my %letters_upper = map { $_ => 1 } ('A'..'Z');\n    my $vowel_index = 0;\n\
    \    my $vowel_count = scalar @vowels;\n    my $letter_index = 0;\n    my $letter_count\
    \ = scalar keys %letters;\n    my $letter_upper_index = 0;\n    my $letter_upper_count\
    \ = scalar keys %letters_upper;\n    my $vowel_index_2 = 0;\n    my $letter_index_2\
    \ = 0;\n    my $letter_upper_index_2 = 0;\n    my $vowel_index_3 = 0;\n    my\
    \ $letter_index_3 = 0;\n    my $letter_upper_index_3 = 0;\n    my $vowel_index_4\
    \ = 0;\n    my $letter_index_4 = 0;\n    my $letter_upper_index_4 = 0;\n    my\
    \ $vowel_index_5 = 0;\n    my $letter_index_5 = 0;\n    my $letter_upper_index_5\
    \ = 0;\n    my $vowel_index_6 = 0;\n    my $letter_index_6 = 0;\n    my $letter_upper_index_6\
    \ = 0;\n    my $vowel_index_7 = 0;\n    my $letter_index_7 = 0;\n    my $letter_upper_index_7\
    \ = 0;\n    my $vowel_index_8 = 0;\n    my $letter_index_8 = 0;\n    my $letter_upper_index_8\
    \ = 0;\n    my $vowel_index_9 = 0;\n    my $letter_index_9 = 0;\n    my $letter_upper_index_9\
    \ = 0;\n    my $vowel_index_10 = 0;\n    my $letter_index_10 =\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmphj4g5_29.pl line 50, at end
    of line

    syntax error at /tmp/tmphj4g5_29.pl line 50, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmphj4g5_29.pl line 77, at end of
    line

    syntax error at /tmp/tmphj4g5_29.pl line 77, at EOF

    Execution of /tmp/tmphj4g5_29.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split //, $message;\n    my @encoded;\n    foreach\
    \ my $char (@message) {\n        if ($char =~ /[a-z]/i) {\n            if ($char\
    \ =~ /[a-z]/) {\n                push @encoded, uc($char);\n            } else\
    \ {\n                push @encoded, lc($char);\n            }\n        } elsif\
    \ ($char =~ /[aeiou]/i) {\n            my $next_char = next_char($char);\n   \
    \         push @encoded, $next_char;\n        } else {\n            push @encoded,\
    \ $char;\n        }\n    }\n    return join '', @encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %vowels_map = (\n \
    \       'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' =>\
    \ 'q',\n        'u' => 's',\n    );\n    for my $char (split //, $message) {\n\
    \        if ($vowels{lc $char}) {\n            $encoded_message .= $vowels_map{lc\
    \ $char};\n        }\n        elsif ($char =~ /[a-z]/) {\n            $encoded_message\
    \ .= chr(ord($char) + 2);\n        }\n        else {\n            $encoded_message\
    \ .= $char;\n        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = qw(a e i o u);\n    my %vowels\
    \ = map { $_ => 1 } @vowels;\n    my $vowel_index = 0;\n    my $vowel_count =\
    \ scalar @vowels;\n    my $vowel_offset = 2;\n    my $vowel_offset_index = 0;\n\
    \    my $vowel_offset_count = 0;\n    my $vowel_offset_char = '';\n    my $char\
    \ = '';\n    my $char_ord = 0;\n    my $char_ord_offset = 0;\n    my $char_ord_offset_char\
    \ = '';\n    my $char_ord_offset_char_ord = 0;\n    my $char_ord_offset_char_ord_offset\
    \ = 0;\n    my $char_ord_offset_char_ord_offset_char = '';\n    my $char_ord_offset_char_ord_offset_char_ord\
    \ = 0;\n    my $char_ord_offset_char_ord_offset_char_ord_offset = 0;\n    my $char_ord_offset_char_ord_offset_char_ord_offset_char\
    \ = '';\n    my $char_ord_offset_char_ord_offset_char_ord_offset_char_ord = 0;\n\
    \    my $char_ord_offset_char_ord_offset_char_ord_offset_char_ord_offset = 0;\n\
    \    my $char_ord_offset_char_ord_offset_char_ord_offset_char_ord_offset_char\
    \ = '';\n    my $char_ord_offset_char_ord_offset_char_ord_offset_char_ord_offset_char_ord\
    \ = 0;\n    my $char_ord_offset_char_ord_offset_char_ord_offset_char_ord_offset_char_ord_offset\
    \ = 0;\n    my $char_ord_offset_char_ord_offset_char_ord_offset_char_ord_offset_char_ord_offset_char\
    \ = '';\n    my $char_ord_offset_char_ord_offset_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpabdnqd17.pl line 39, at end
    of line

    syntax error at /tmp/tmpabdnqd17.pl line 39, near "$char_ord_offset_char_ord_offset_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpabdnqd17.pl line 66, at end of
    line

    syntax error at /tmp/tmpabdnqd17.pl line 66, at EOF

    Execution of /tmp/tmpabdnqd17.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split //, $message;\n    my @vowels = qw(a e i o u);\n\
    \    my @encoded_message;\n    for my $letter (@message) {\n        if (grep {$_\
    \ eq lc $letter} @vowels) {\n            my $index = first_index {$_ eq lc $letter}\
    \ @vowels;\n            my $new_index = ($index + 2) % scalar @vowels;\n     \
    \       push @encoded_message, uc $vowels[$new_index];\n        }\n        else\
    \ {\n            push @encoded_message, uc $letter;\n        }\n    }\n    return\
    \ join '', @encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t call method "first_index" without a package or object reference
    at /tmp/tmpnmqdhjs1.pl line 18.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels_map = (\n        'a' => 'c',\n        'e' => 'g',\n  \
    \      'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach\
    \ my $char (split //, $message) {\n        if (grep { $_ eq $char } @vowels) {\n\
    \            $encoded_message .= $vowels_map{$char};\n        } else {\n     \
    \       $encoded_message .= $char;\n        }\n    }\n    return uc($encoded_message);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message_array = split(//, $message);\n    my $encoded_message\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_array = split(//, $vowels);\n\
    \    my $vowels_array_length = scalar @vowels_array;\n    my $vowels_index = 0;\n\
    \    my $vowel_found = 0;\n    my $vowel_index = 0;\n    my $vowel_index_plus_two\
    \ = 0;\n    my $vowel_index_plus_two_mod = 0;\n    my $vowel_index_plus_two_mod_index\
    \ = 0;\n    my $vowel_index_plus_two_mod_index_plus_one = 0;\n    my $vowel_index_plus_two_mod_index_plus_one_char\
    \ = \"\";\n    my $vowel_index_plus_two_mod_index_plus_one_char_upper = \"\";\n\
    \    my $vowel_index_plus_two_mod_index_plus_one_char_lower = \"\";\n    my $vowel_index_plus_two_mod_index_plus_one_char_upper_or_lower\
    \ = \"\";\n    my $vowel_index_plus_two_mod_index_plus_one_char_upper_or_lower_upper\
    \ = \"\";\n    my $vowel_index_plus_two_mod_index_plus_one_char_upper_or_lower_lower\
    \ = \"\";\n    my $vowel_index_plus_two_mod_index_plus_one_char_upper_or_lower_upper_or_lower\
    \ = \"\";\n    my $vowel_index_plus_two_mod_index_plus_one_char_upper_or_lower_upper_or_lower_upper\
    \ = \"\";\n    my $vowel_index_plus_two_mod_index_plus_one_char_upper_or_lower_upper_or_lower_lower\
    \ = \"\";\n    my $vowel_index_plus_two_mod_index_plus\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp0vw6b8dw.pl line 35, at end
    of line

    syntax error at /tmp/tmp0vw6b8dw.pl line 35, near "$vowel_index_plus_two_mod_index_plus

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp0vw6b8dw.pl line 62, at end of
    line

    syntax error at /tmp/tmp0vw6b8dw.pl line 62, at EOF

    Execution of /tmp/tmp0vw6b8dw.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a'..'z');\n    my $vowel_index\
    \ = 0;\n    my $vowel_count = 0;\n    my $vowel_length = scalar @vowels;\n   \
    \ my $message_length = length $message;\n    for (my $i = 0; $i < $message_length;\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        if ($char =~ /[a-zA-Z]/)\
    \ {\n            if ($char =~ /[aeiou]/i) {\n                $vowel_index = 0;\n\
    \                $vowel_count = 0;\n                while ($vowel_count < $vowel_length)\
    \ {\n                    if ($char eq $vowels[$vowel_index]) {\n             \
    \           $char = $vowels[($vowel_index + 2) % $vowel_length];\n           \
    \             last;\n                    }\n                    $vowel_index++;\n\
    \                    $vowel_count++;\n                }\n            }\n     \
    \       $encoded .= uc $char;\n        }\n    }\n    return $encoded;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @chars = split(//, $message);\n    my $encoded = '';\n    foreach\
    \ my $char (@chars) {\n        if ($char =~ /[a-z]/i) {\n            if ($char\
    \ =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n            } else {\n\
    \                $char =~ tr/A-Z/a-z/;\n            }\n            if ($char =~\
    \ /[aeiou]/i) {\n                $char =~ tr/aeiou/EIOUA/;\n            }\n  \
    \      }\n        $encoded .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $result = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n \
    \   my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 }\
    \ ('a'..'z');\n    my %alphabet_upper = map { $_ => 1 } ('A'..'Z');\n    my %alphabet_lower\
    \ = map { $_ => 1 } ('a'..'z');\n    my $i = 0;\n    for my $char (split //, $message)\
    \ {\n        if ($alphabet_upper{$char}) {\n            $result .= lc($char);\n\
    \        } elsif ($alphabet_lower{$char}) {\n            $result .= uc($char);\n\
    \        } else {\n            $result .= $char;\n        }\n    }\n    $message\
    \ = $result;\n    $result = '';\n    for my $char (split //, $message) {\n   \
    \     if ($vowels{$char}) {\n            $i = 0;\n            for my $vowel (@vowels)\
    \ {\n                if ($char eq $vowels[$i]) {\n                    $result\
    \ .= $vowels[($i + 2) % 5];\n                }\n                $i++;\n      \
    \      }\n        } else {\n            $result .= $char;\n        }\n    }\n\
    \    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_encoded\
    \ = 'cgjkr';\n    my $vowels_encoded_hash = {};\n    my $i = 0;\n    for my $vowel\
    \ (split //, $vowels) {\n        $vowels_encoded_hash->{$vowel} = substr($vowels_encoded,\
    \ $i, 1);\n        $i++;\n    }\n    for my $char (split //, $message) {\n   \
    \     if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n        \
    \        $char = uc($char);\n            } else {\n                $char = lc($char);\n\
    \            }\n        }\n        if ($char =~ /[aeiou]/i) {\n            $char\
    \ = $vowels_encoded_hash->{lc($char)};\n        }\n        $encoded .= $char;\n\
    \    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded\
    \ = \"cgjln\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_encoded\
    \ = \"cdefghijklmnopqrstuvwxyzb\";\n    my $alphabet_encoded_upper = \"CDEFGHIJKLMNOPQRSTUVWXYZB\"\
    ;\n    my $i = 0;\n    while ($i < length($message)) {\n        my $char = substr($message,\
    \ $i, 1);\n        if (index($vowels, $char) != -1) {\n            $encoded .=\
    \ substr($vowels_encoded, index($vowels, $char), 1);\n        } elsif (index($alphabet,\
    \ $char) != -1) {\n            $encoded .= substr($alphabet_encoded, index($alphabet,\
    \ $char), 1);\n        } elsif (index($alphabet, lc($char)) != -1) {\n       \
    \     $encoded .= substr($alphabet_encoded_upper, index($alphabet, lc($char)),\
    \ 1);\n        } else {\n            $encoded .= $char;\n        }\n        $i++;\n\
    \    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_\
    \ => 1 } ('a'..'z');\n    my @alphabet = ('a'..'z');\n    my $alphabet_size =\
    \ scalar(@alphabet);\n    my %alphabet_map = map { $alphabet[$_] => $_ } (0..$alphabet_size-1);\n\
    \    my $alphabet_map_size = scalar(keys %alphabet_map);\n    my $i = 0;\n   \
    \ my $char = '';\n    my $char_index = 0;\n    my $char_index_plus_two = 0;\n\
    \    my $char_index_plus_two_mod = 0;\n    my $char_index_plus_two_mod_char =\
    \ '';\n    my $char_upper = '';\n    my $char_lower = '';\n    my $char_upper_index\
    \ = 0;\n    my $char_upper_index_plus_two = 0;\n    my $char_upper_index_plus_two_mod\
    \ = 0;\n    my $char_upper_index_plus_two_mod_char = '';\n    my $char_lower_index\
    \ = 0;\n    my $char_lower_index_plus_two = 0;\n    my $char_lower_index_plus_two_mod\
    \ = 0;\n    my $char_lower_index_plus_two_mod_char = '';\n    my $message_length\
    \ = length($message);\n    for ($i = 0; $i < $message_length; $i++) {\n      \
    \  $char = substr($message, $i, 1);\n        if (exists $alphabet{$char}) {\n\
    \            $char_index = $alphabet_map{$char};\n            $char_index_plus_two\
    \ = $char_index + 2;\n            $char_index_plus_two_mod = $char_index_plus_two\
    \ % $alphabet_map_size;\n            $char_index\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpri9_hu58.pl line 45, at end
    of line

    syntax error at /tmp/tmpri9_hu58.pl line 45, near "$char_index

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpri9_hu58.pl line 72, at end of
    line

    syntax error at /tmp/tmpri9_hu58.pl line 72, at EOF

    Execution of /tmp/tmpri9_hu58.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split //, $message;\n    my @encoded_message;\n   \
    \ my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n\
    \        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $letter (@message)\
    \ {\n        if ($letter =~ /[a-z]/) {\n            if ($letter =~ /[aeiou]/)\
    \ {\n                $letter = $vowels{$letter};\n            }\n            $letter\
    \ =~ tr/a-z/A-Z/;\n        }\n        push @encoded_message, $letter;\n    }\n\
    \    return join '', @encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alpha = map { $_ => 1 } ('a'..'z');\n\
    \    my %alpha_upper = map { $_ => 1 } ('A'..'Z');\n    my %alpha_lower = map\
    \ { $_ => 1 } ('a'..'z');\n    my %alpha_lower_vowels = map { $_ => 1 } ('a'..'z');\n\
    \    my %alpha_upper_vowels = map { $_ => 1 } ('A'..'Z');\n    my %alpha_lower_consonants\
    \ = map { $_ => 1 } ('a'..'z');\n    my %alpha_upper_consonants = map { $_ =>\
    \ 1 } ('A'..'Z');\n    my %alpha_lower_vowels_2 = map { $_ => 1 } ('a'..'z');\n\
    \    my %alpha_upper_vowels_2 = map { $_ => 1 } ('A'..'Z');\n    my %alpha_lower_consonants_2\
    \ = map { $_ => 1 } ('a'..'z');\n    my %alpha_upper_consonants_2 = map { $_ =>\
    \ 1 } ('A'..'Z');\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l =\
    \ 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q\
    \ = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my\
    \ $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n  \
    \  my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n\
    \    my $F = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmphy3iyxhj.pl line 78, at
    end of line

    syntax error at /tmp/tmphy3iyxhj.pl line 78, at EOF

    Execution of /tmp/tmphy3iyxhj.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a'..'z');\n    my $vowel_count\
    \ = 0;\n    my $vowel_index = 0;\n    my $vowel_index_plus_two = 0;\n    my $vowel_index_plus_two_mod\
    \ = 0;\n    my $vowel_index_plus_two_mod_plus_one = 0;\n    my $vowel_index_plus_two_mod_plus_one_mod\
    \ = 0;\n    my $vowel_index_plus_two_mod_plus_one_mod_plus_one = 0;\n    my $vowel_index_plus_two_mod_plus_one_mod_plus_one_mod\
    \ = 0;\n    my $vowel_index_plus_two_mod_plus_one_mod_plus_one_mod_plus_one =\
    \ 0;\n    my $vowel_index_plus_two_mod_plus_one_mod_plus_one_mod_plus_one_mod\
    \ = 0;\n    my $vowel_index_plus_two_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one\
    \ = 0;\n    my $vowel_index_plus_two_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod\
    \ = 0;\n    my $vowel_index_plus_two_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one\
    \ = 0;\n    my $vowel_index_plus_two_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod\
    \ = 0;\n    my $vowel_index_plus_two_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one\
    \ = 0;\n    my $vowel_index_plus_two_mod_plus_one_mod_plus_one_mod_\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpwhtud7gm.pl line 31, at end
    of line

    syntax error at /tmp/tmpwhtud7gm.pl line 31, near "$vowel_index_plus_two_mod_plus_one_mod_plus_one_mod_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpwhtud7gm.pl line 58, at end of
    line

    syntax error at /tmp/tmpwhtud7gm.pl line 58, at EOF

    Execution of /tmp/tmpwhtud7gm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = \"\";\n    my @chars = split(//, $message);\n\
    \    foreach my $char (@chars) {\n        if ($char =~ /[a-z]/i) {\n         \
    \   my $encoded_char = $char;\n            if ($char =~ /[a-z]/) {\n         \
    \       $encoded_char =~ tr/a-z/b-za/;\n            }\n            if ($char =~\
    \ /[A-Z]/) {\n                $encoded_char =~ tr/A-Z/B-ZA/;\n            }\n\
    \            if ($encoded_char =~ /[aeiou]/i) {\n                $encoded_char\
    \ =~ tr/aeiou/eioua/;\n            }\n            $encoded_message .= $encoded_char;\n\
    \        } else {\n            $encoded_message .= $char;\n        }\n    }\n\
    \    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my $vowels = 'aeiou';\n    my $vowels_2_ahead\
    \ = 'cgkmqsuwy';\n    my $vowels_hash = {};\n    my $i = 0;\n    foreach my $vowel\
    \ (split(//, $vowels)) {\n        $vowels_hash->{$vowel} = substr($vowels_2_ahead,\
    \ $i, 1);\n        $i++;\n    }\n    foreach my $char (split(//, $message)) {\n\
    \        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n     \
    \           $encoded_message .= uc($char);\n            } else {\n           \
    \     $encoded_message .= lc($char);\n            }\n        } elsif ($char =~\
    \ /[aeiou]/i) {\n            $encoded_message .= $vowels_hash->{lc($char)};\n\
    \        } else {\n            $encoded_message .= $char;\n        }\n    }\n\
    \    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_count_max =\
    \ scalar(@vowels);\n    my $vowel_index_max = $vowel_count_max - 1;\n    my $vowel_index_next\
    \ = 0;\n    my $vowel_index_next_next = 0;\n    my $vowel_index_next_next_next\
    \ = 0;\n    my $vowel_index_next_next_next_next = 0;\n    my $vowel_index_next_next_next_next_next\
    \ = 0;\n    my $vowel_index_next_next_next_next_next_next = 0;\n    my $vowel_index_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_index_next_next_next_next_next_next_next_next = 0;\n   \
    \ my $vowel_index_next_next_next_next_next_next_next_next_next = 0;\n    my $vowel_index_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_index_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_index_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_index_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_index_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_index_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp1gplcbb5.pl line 34, at end
    of line

    syntax error at /tmp/tmp1gplcbb5.pl line 34, near "$vowel_index_next_next_next_next_next_next_next_next_next_next_next_next_next

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp1gplcbb5.pl line 61, at end of
    line

    syntax error at /tmp/tmp1gplcbb5.pl line 61, at EOF

    Execution of /tmp/tmp1gplcbb5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @letters = split(//, $message);\n    my @encoded = ();\n    my\
    \ %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n\
    \        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $letter (@letters)\
    \ {\n        if ($letter =~ /[a-z]/i) {\n            if ($letter =~ /[a-z]/) {\n\
    \                $letter = uc($letter);\n            } else {\n              \
    \  $letter = lc($letter);\n            }\n            if ($letter =~ /[aeiou]/)\
    \ {\n                $letter = $vowels{$letter};\n            }\n        }\n \
    \       push(@encoded, $letter);\n    }\n    return join('', @encoded);\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split(//, $message);\n    my @encoded;\n    foreach\
    \ my $letter (@message) {\n        if ($letter =~ /[A-Z]/) {\n            $letter\
    \ = lc($letter);\n        } elsif ($letter =~ /[a-z]/) {\n            $letter\
    \ = uc($letter);\n        }\n        if ($letter =~ /[aeiou]/) {\n           \
    \ $letter =~ tr/aeiou/cegik/;\n        }\n        push(@encoded, $letter);\n \
    \   }\n    return join('', @encoded);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %letters = map { $_ => 1 }\
    \ ('a'..'z');\n    my %letters_upper = map { $_ => 1 } ('A'..'Z');\n    my %letters_lower\
    \ = map { $_ => 1 } ('a'..'z');\n    my %letters_lower_upper = map { $_ => 1 }\
    \ ('a'..'z', 'A'..'Z');\n    my %letters_lower_upper_numbers = map { $_ => 1 }\
    \ ('a'..'z', 'A'..'Z', '0'..'9');\n    my %letters_lower_upper_numbers_space =\
    \ map { $_ => 1 } ('a'..'z', 'A'..'Z', '0'..'9', ' ');\n    my %letters_lower_upper_numbers_space_punctuation\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z', '0'..'9', ' ', '.', ',', '!', '?', ';',\
    \ ':');\n    my %letters_lower_upper_numbers_space_punctuation_special = map {\
    \ $_ => 1 } ('a'..'z', 'A'..'Z', '0'..'9', ' ', '.', ',', '!', '?', ';', ':',\
    \ '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '+', '=', '{', '}', '[',\
    \ ']', '|', '\\\\', '\\'', '\"', '<', '>', '/', '~');\n    my %letters_lower_upper_numbers_space_punctuation_special_backslash\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z', '0'..'9', ' ', '.', ',', '!', '?', ';',\
    \ ':', '@', '#', '$', '\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t find string terminator "''" anywhere before EOF at /tmp/tmpvmbgniil.pl
    line 24.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @chars = split //, $message;\n    my @encoded_chars;\n    foreach\
    \ my $char (@chars) {\n        my $encoded_char = $char;\n        if ($char =~\
    \ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n                $encoded_char\
    \ = uc $char;\n            } else {\n                $encoded_char = lc $char;\n\
    \            }\n            if ($encoded_char =~ /[aeiou]/) {\n              \
    \  my $index = index(uc $encoded_char, $encoded_char);\n                $index\
    \ = ($index + 2) % 5;\n                $encoded_char = substr(uc $encoded_char,\
    \ $index, 1);\n            }\n        }\n        push @encoded_chars, $encoded_char;\n\
    \    }\n    return join '', @encoded_chars;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels_hash = map { $_ => 1 } @vowels;\n    my %alphabet_hash\
    \ = map { $_ => 1 } ('a'..'z');\n    my %alphabet_hash_upper = map { $_ => 1 }\
    \ ('A'..'Z');\n    my $alphabet_hash_size = scalar keys %alphabet_hash;\n    my\
    \ $alphabet_hash_upper_size = scalar keys %alphabet_hash_upper;\n    my $vowels_hash_size\
    \ = scalar keys %vowels_hash;\n    my $alphabet_hash_keys = join('', keys %alphabet_hash);\n\
    \    my $alphabet_hash_upper_keys = join('', keys %alphabet_hash_upper);\n   \
    \ my $vowels_hash_keys = join('', keys %vowels_hash);\n    my $alphabet_hash_keys_size\
    \ = length($alphabet_hash_keys);\n    my $alphabet_hash_upper_keys_size = length($alphabet_hash_upper_keys);\n\
    \    my $vowels_hash_keys_size = length($vowels_hash_keys);\n    my $message_size\
    \ = length($message);\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my\
    \ $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n  \
    \  my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n\
    \    my $F = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp3kko_4ep.pl line 79, at
    end of line

    syntax error at /tmp/tmp3kko_4ep.pl line 79, at EOF

    Execution of /tmp/tmp3kko_4ep.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_encoded\
    \ = 'cgjkr';\n    my $vowels_encoded_index = 0;\n    for my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n \
    \               $encoded .= uc $char;\n            } else {\n                $encoded\
    \ .= lc $char;\n            }\n        }\n        if ($char =~ /[$vowels]/i) {\n\
    \            if ($char =~ /[$vowels]/) {\n                $encoded .= uc substr($vowels_encoded,\
    \ $vowels_encoded_index, 1);\n            } else {\n                $encoded .=\
    \ lc substr($vowels_encoded, $vowels_encoded_index, 1);\n            }\n     \
    \       $vowels_encoded_index++;\n        }\n    }\n    return $encoded;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = qw(a e i o u);\n    my\
    \ @alphabet = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n    my\
    \ $vowel_index = 0;\n    my $alphabet_index = 0;\n    my $vowel_found = 0;\n \
    \   my $vowel_found_index = 0;\n    my $vowel_found_index_plus_two = 0;\n    my\
    \ $vowel_found_index_plus_two_letter = '';\n    my $vowel_found_index_plus_two_letter_upper\
    \ = '';\n    my $vowel_found_index_plus_two_letter_lower = '';\n    my $vowel_found_index_plus_two_letter_upper_or_lower\
    \ = '';\n    my $vowel_found_index_plus_two_letter_upper_or_lower_index = 0;\n\
    \    my $vowel_found_index_plus_two_letter_upper_or_lower_index_plus_two = 0;\n\
    \    my $vowel_found_index_plus_two_letter_upper_or_lower_index_plus_two_letter\
    \ = '';\n    my $vowel_found_index_plus_two_letter_upper_or_lower_index_plus_two_letter_upper\
    \ = '';\n    my $vowel_found_index_plus_two_letter_upper_or_lower_index_plus_two_letter_lower\
    \ = '';\n    my $vowel_found_index_plus_two_letter_upper_or_lower_index_plus_two_letter_upper_or_lower\
    \ = '';\n    my $vowel_found_index_plus_two_letter_upper_or_lower_index_plus_two_letter_upper_or_lower_index\
    \ = 0;\n    my $vowel_found_index_plus_two_letter_upper_or_lower_index_plus_two_letter_upper_or_lower_index_plus_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmphcp33h6_.pl line 33, at end
    of line

    syntax error at /tmp/tmphcp33h6_.pl line 33, near "$vowel_found_index_plus_two_letter_upper_or_lower_index_plus_two_letter_upper_or_lower_index_plus_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmphcp33h6_.pl line 60, at end of
    line

    syntax error at /tmp/tmphcp33h6_.pl line 60, at EOF

    Execution of /tmp/tmphcp33h6_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_shifted\
    \ = 'cgkosw';\n    for my $char (split //, $message) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            $encoded .= uc($char) eq $char ? lc($char) : uc($char);\n   \
    \     }\n        if ($char =~ /[$vowels]/i) {\n            my $index = index($vowels,\
    \ lc($char));\n            $encoded .= substr($vowels_shifted, $index, 1);\n \
    \       }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a'..'z');\n    my %vowels =\
    \ map { $vowels[$_] => $vowels[($_ + 2) % @vowels] } (0..$#vowels);\n    for my\
    \ $char (split //, $message) {\n        if ($char =~ /[a-z]/i) {\n           \
    \ $encoded .= $char =~ /[a-z]/ ? uc $char : lc $char;\n        } else {\n    \
    \        $encoded .= $vowels{lc $char} || $char;\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = qw(a e i o u);\n    my %vowels\
    \ = map { $_ => 1 } @vowels;\n    my %alphabet = (\n        a => 'c',\n      \
    \  b => 'd',\n        c => 'e',\n        d => 'f',\n        e => 'g',\n      \
    \  f => 'h',\n        g => 'i',\n        h => 'j',\n        i => 'k',\n      \
    \  j => 'l',\n        k => 'm',\n        l => 'n',\n        m => 'o',\n      \
    \  n => 'p',\n        o => 'q',\n        p => 'r',\n        q => 's',\n      \
    \  r => 't',\n        s => 'u',\n        t => 'v',\n        u => 'w',\n      \
    \  v => 'x',\n        w => 'y',\n        x => 'z',\n        y => 'a',\n      \
    \  z => 'b',\n    );\n    for my $char (split //, $message) {\n        if ($vowels{lc\
    \ $char}) {\n            $encoded .= $alphabet{lc $char};\n        }\n       \
    \ elsif ($char =~ /[A-Z]/) {\n            $encoded .= lc $char;\n        }\n \
    \       elsif ($char =~ /[a-z]/) {\n            $encoded .= uc $char;\n      \
    \  }\n        else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n        'a'\
    \ => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' => 'f',\n   \
    \     'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n        'h' => 'j',\n\
    \        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n        'l' =>\
    \ 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' => 'q',\n      \
    \  'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n        's' => 'u',\n\
    \        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n        'w' =>\
    \ 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' => 'b',\n    );\n\
    \    for my $char (split //, $message) {\n        if ($vowels{$char}) {\n    \
    \        $encoded .= $alphabet{$char};\n        }\n        elsif ($char =~ /[A-Z]/)\
    \ {\n            $encoded .= lc($char);\n        }\n        elsif ($char =~ /[a-z]/)\
    \ {\n            $encoded .= uc($char);\n        }\n        else {\n         \
    \   $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_next\
    \ = 'efghj';\n    my $vowels_next_next = 'ghjkl';\n    my $vowels_next_next_next\
    \ = 'hjklm';\n    my $vowels_next_next_next_next = 'jklmn';\n    my $vowels_next_next_next_next_next\
    \ = 'klmno';\n    my $vowels_next_next_next_next_next_next = 'lmnop';\n    my\
    \ $vowels_next_next_next_next_next_next_next = 'mnopq';\n    my $vowels_next_next_next_next_next_next_next_next\
    \ = 'nopqr';\n    my $vowels_next_next_next_next_next_next_next_next_next = 'opqrs';\n\
    \    my $vowels_next_next_next_next_next_next_next_next_next_next = 'pqrst';\n\
    \    my $vowels_next_next_next_next_next_next_next_next_next_next_next = 'qrstu';\n\
    \    my $vowels_next_next_next_next_next_next_next_next_next_next_next_next =\
    \ 'rstuv';\n    my $vowels_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 'stuvw';\n    my $vowels_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 'tuvwx';\n    my $vowels_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 'uvwxy';\n    my $vowels_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 'vwxyz';\n    my $v\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpsttepua6.pl line 32, at end
    of line

    syntax error at /tmp/tmpsttepua6.pl line 32, near "$v

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpsttepua6.pl line 59, at end of
    line

    syntax error at /tmp/tmpsttepua6.pl line 59, at EOF

    Execution of /tmp/tmpsttepua6.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @letters = split(//, $message);\n    my @vowels = ('a', 'e', 'i',\
    \ 'o', 'u');\n    my @encoded_letters = ();\n    foreach my $letter (@letters)\
    \ {\n        if (lc($letter) ~~ @vowels) {\n            my $index = first_index\
    \ { $_ eq lc($letter) } @vowels;\n            my $new_index = ($index + 2) % 5;\n\
    \            push(@encoded_letters, uc($vowels[$new_index]));\n        } else\
    \ {\n            push(@encoded_letters, uc($letter));\n        }\n    }\n    return\
    \ join('', @encoded_letters);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Smartmatch is experimental at /tmp/tmp10wan5bs.pl line 17.

    Can''t call method "first_index" without a package or object reference at /tmp/tmp10wan5bs.pl
    line 18.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 0
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @message_array = split(//, $message);\n\
    \    foreach my $letter (@message_array) {\n        if ($letter =~ /[a-z]/) {\n\
    \            $encoded_message .= chr(ord($letter) - 32);\n        } elsif ($letter\
    \ =~ /[A-Z]/) {\n            $encoded_message .= chr(ord($letter) + 32);\n   \
    \     } else {\n            $encoded_message .= $letter;\n        }\n    }\n \
    \   @message_array = split(//, $encoded_message);\n    $encoded_message = '';\n\
    \    foreach my $letter (@message_array) {\n        if ($letter =~ /[aeiou]/)\
    \ {\n            $encoded_message .= chr(ord($letter) + 2);\n        } elsif ($letter\
    \ =~ /[AEIOU]/) {\n            $encoded_message .= chr(ord($letter) + 2);\n  \
    \      } else {\n            $encoded_message .= $letter;\n        }\n    }\n\
    \    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split //, $message;\n    my @new_message;\n    my $vowels\
    \ = 'aeiouAEIOU';\n    my $vowels_hash = {\n        'a' => 'c',\n        'e' =>\
    \ 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n      \
    \  'A' => 'C',\n        'E' => 'G',\n        'I' => 'K',\n        'O' => 'Q',\n\
    \        'U' => 'Y',\n    };\n    foreach my $letter (@message) {\n        if\
    \ ($letter =~ /[a-zA-Z]/) {\n            if ($letter =~ /[a-z]/) {\n         \
    \       $letter = uc $letter;\n            } else {\n                $letter =\
    \ lc $letter;\n            }\n            if ($vowels =~ /$letter/) {\n      \
    \          $letter = $vowels_hash->{$letter};\n            }\n        }\n    \
    \    push @new_message, $letter;\n    }\n    return join '', @new_message;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my $vowels = 'aeiou';\n    my $vowels_2_ahead\
    \ = 'cgjkqsxz';\n    my $vowels_hash = {};\n    my $vowels_2_ahead_hash = {};\n\
    \    my @vowels_array = split(//, $vowels);\n    my @vowels_2_ahead_array = split(//,\
    \ $vowels_2_ahead);\n    for (my $i = 0; $i < scalar(@vowels_array); $i++) {\n\
    \        $vowels_hash->{$vowels_array[$i]} = $vowels_2_ahead_array[$i];\n    \
    \    $vowels_2_ahead_hash->{$vowels_2_ahead_array[$i]} = $vowels_array[$i];\n\
    \    }\n    my @message_array = split(//, $message);\n    for (my $i = 0; $i <\
    \ scalar(@message_array); $i++) {\n        if (exists($vowels_hash->{lc($message_array[$i])}))\
    \ {\n            $encoded_message .= $vowels_hash->{lc($message_array[$i])};\n\
    \        } elsif (exists($vowels_2_ahead_hash->{lc($message_array[$i])})) {\n\
    \            $encoded_message .= $vowels_2_ahead_hash->{lc($message_array[$i])};\n\
    \        } else {\n            $encoded_message .= $message_array[$i];\n     \
    \   }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n   \
    \     'a' => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' => 'f',\n\
    \        'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n        'h' =>\
    \ 'j',\n        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n      \
    \  'l' => 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' => 'q',\n\
    \        'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n        's' =>\
    \ 'u',\n        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n      \
    \  'w' => 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' => 'b',\n\
    \    );\n    for my $letter (split //, $message) {\n        if ($vowels{$letter})\
    \ {\n            $encoded_message .= $alphabet{$letter};\n        } else {\n \
    \           $encoded_message .= uc $letter;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a'..'z', 'A'..'Z');\n    my\
    \ %vowels = map { $_ => 1 } @vowels;\n    my $i = 0;\n    while ($i < length($message))\
    \ {\n        my $letter = substr($message, $i, 1);\n        if ($vowels{$letter})\
    \ {\n            my $new_letter = chr(ord($letter) + 2);\n            $encoded\
    \ .= $new_letter;\n        } else {\n            $encoded .= $letter;\n      \
    \  }\n        $i++;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 }\
    \ ('a'..'z');\n    my %alphabet_upper = map { $_ => 1 } ('A'..'Z');\n    my %alphabet_lower\
    \ = map { $_ => 1 } ('a'..'z');\n    my %alphabet_upper_lower = map { $_ => 1\
    \ } ('A'..'Z', 'a'..'z');\n    my %alphabet_lower_upper = map { $_ => 1 } ('a'..'z',\
    \ 'A'..'Z');\n    my %alphabet_lower_upper_lower = map { $_ => 1 } ('a'..'z',\
    \ 'A'..'Z', 'a'..'z');\n    my %alphabet_upper_lower_upper = map { $_ => 1 } ('A'..'Z',\
    \ 'a'..'z', 'A'..'Z');\n    my %alphabet_upper_lower_upper_lower = map { $_ =>\
    \ 1 } ('A'..'Z', 'a'..'z', 'A'..'Z', 'a'..'z');\n    my %alphabet_lower_upper_lower_upper\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z', 'a'..'z', 'A'..'Z');\n    my %alphabet_lower_upper_lower_upper_lower\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z', 'a'..'z', 'A'..'Z', 'a'..'z');\n    my\
    \ %alphabet_upper_lower_upper_lower_upper = map { $_ => 1 } ('A'..'Z', 'a'..'z',\
    \ 'A'..'Z', 'a'..'z', 'A'..'Z');\n    my %alphabet_upper_lower_upper_lower_upper_lower\
    \ = map { $_ => 1 } ('A'..'Z', 'a'..'z', 'A\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t find string terminator "''" anywhere before EOF at /tmp/tmpw3icpy96.pl
    line 27.

    '
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a'..'z');\n    my %vowels =\
    \ map {$vowels[$_] => $vowels[($_+2)%26]} (0..25);\n    for my $char (split //,\
    \ $message) {\n        if ($char =~ /[a-z]/i) {\n            $encoded .= $char\
    \ =~ /[a-z]/ ? uc $char : lc $char;\n        }\n        elsif ($char =~ /[aeiou]/i)\
    \ {\n            $encoded .= $char =~ /[a-z]/ ? uc $vowels{lc $char} : lc $vowels{uc\
    \ $char};\n        }\n        else {\n            $encoded .= $char;\n       \
    \ }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded\
    \ = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n    my @vowels_encoded_array\
    \ = split(//, $vowels_encoded);\n    my @vowels_array = split(//, $vowels);\n\
    \    for (my $i = 0; $i < scalar(@vowels_array); $i++) {\n        $vowels_encoded_hash->{$vowels_array[$i]}\
    \ = $vowels_encoded_array[$i];\n    }\n    my @message_array = split(//, $message);\n\
    \    for (my $i = 0; $i < scalar(@message_array); $i++) {\n        if ($vowels\
    \ =~ /$message_array[$i]/) {\n            $encoded .= $vowels_encoded_hash->{$message_array[$i]};\n\
    \        } else {\n            $encoded .= $message_array[$i];\n        }\n  \
    \  }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = qw(a e i o u);\n    my %vowels\
    \ = map { $_ => 1 } @vowels;\n    my %letters = map { $_ => 1 } ('a'..'z');\n\
    \    my $i = 0;\n    foreach my $char (split(//, $message)) {\n        if ($letters{$char})\
    \ {\n            if ($vowels{$char}) {\n                $i = 0;\n            \
    \    while ($i < 2) {\n                    $char++;\n                    $char\
    \ = 'a' if $char eq 'z' + 1;\n                    $i++;\n                }\n \
    \           }\n            $char = uc($char) if $char eq lc($char);\n        \
    \    $char = lc($char) if $char eq uc($char);\n        }\n        $encoded .=\
    \ $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a'..'z');\n    my $vowel_count\
    \ = 0;\n    for my $char (split //, $message) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            $encoded .= uc($char) eq $char ? lc($char) : uc($char);\n   \
    \     }\n        if ($char =~ /[aeiou]/i) {\n            $encoded .= $vowels[($vowel_count\
    \ + 2) % scalar(@vowels)];\n            $vowel_count++;\n        }\n    }\n  \
    \  return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a'..'z', 'A'..'Z');\n    my\
    \ %vowels = map { $_ => 1 } @vowels;\n    my %letters = map { $_ => 1 } ('a'..'z',\
    \ 'A'..'Z');\n    my %encoded_vowels = map { $vowels[$_] => $vowels[$_+2] } 0..$#vowels;\n\
    \    for my $letter (split //, $message) {\n        if ($letters{$letter}) {\n\
    \            $encoded .= $vowels{$letter} ? $encoded_vowels{$letter} : uc $letter;\n\
    \        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_trans\
    \ = 'cfilor';\n    my $vowels_trans_hash = {\n        'a' => 'c',\n        'e'\
    \ => 'f',\n        'i' => 'l',\n        'o' => 'r',\n        'u' => 'i',\n   \
    \ };\n    for my $char (split(//, $message)) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $encoded .= uc($char);\n\
    \            }\n            else {\n                $encoded .= lc($char);\n \
    \           }\n        }\n        else {\n            $encoded .= $char;\n   \
    \     }\n    }\n    for my $char (split(//, $encoded)) {\n        if ($char =~\
    \ /[$vowels]/i) {\n            my $index = index($vowels, lc($char));\n      \
    \      $encoded =~ s/$char/$vowels_trans_hash->{lc($char)}/;\n        }\n    }\n\
    \    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels_map = (\n        'a' => 'c',\n        'e' => 'g',\n  \
    \      'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for\
    \ my $char (split //, $message) {\n        if (grep { $_ eq $char } @vowels) {\n\
    \            $encoded_message .= $vowels_map{$char};\n        } else {\n     \
    \       $encoded_message .= uc $char;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_length\
    \ = scalar @vowels;\n    my $vowel_found = 0;\n    my $letter_index = 0;\n   \
    \ my $letter_count = 0;\n    my $letter_length = length $message;\n    my $letter\
    \ = '';\n    my $vowel = '';\n    my $encoded_letter = '';\n    my $encoded_vowel\
    \ = '';\n    my $encoded_vowel_index = 0;\n    my $encoded_vowel_count = 0;\n\
    \    my $encoded_vowel_length = 0;\n    my $encoded_vowel_found = 0;\n    my $encoded_letter_index\
    \ = 0;\n    my $encoded_letter_count = 0;\n    my $encoded_letter_length = 0;\n\
    \    my $encoded_letter = '';\n    my $encoded_vowel = '';\n    my $encoded_vowel_index\
    \ = 0;\n    my $encoded_vowel_count = 0;\n    my $encoded_vowel_length = 0;\n\
    \    my $encoded_vowel_found = 0;\n    my $encoded_letter_index = 0;\n    my $encoded_letter_count\
    \ = 0;\n    my $encoded_letter_length = 0;\n    my $encoded_letter = '';\n   \
    \ my $encoded_vowel = '';\n    my $encoded_vowel_index = 0;\n    my $encoded_vowel_count\
    \ = 0;\n    my $encoded_vowel_length = 0;\n    my $encoded_vowel_found = 0;\n\
    \    my $encoded_letter_index = 0;\n    my $encoded_letter_count = 0;\n    my\
    \ $encoded_letter_length = 0;\n    my $encoded\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp7pfgwwza.pl line 52, at end
    of line

    syntax error at /tmp/tmp7pfgwwza.pl line 52, near "$encoded

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp7pfgwwza.pl line 79, at end of
    line

    syntax error at /tmp/tmp7pfgwwza.pl line 79, at EOF

    Execution of /tmp/tmp7pfgwwza.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @letters = split(//, $message);\n    my $encoded = '';\n    my\
    \ $vowels = 'aeiou';\n    foreach my $letter (@letters) {\n        if ($letter\
    \ =~ /[a-z]/i) {\n            if ($letter =~ /[A-Z]/) {\n                $letter\
    \ = lc($letter);\n            } else {\n                $letter = uc($letter);\n\
    \            }\n            if ($vowels =~ /$letter/) {\n                my $index\
    \ = index($vowels, $letter);\n                $index = ($index + 2) % 5;\n   \
    \             $letter = substr($vowels, $index, 1);\n            }\n        }\n\
    \        $encoded .= $letter;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a'..'z');\n    my $vowel_count\
    \ = 0;\n    my $vowel_index = 0;\n    my $vowel_offset = 2;\n    my $vowel_length\
    \ = scalar(@vowels);\n    my $vowel_end = $vowel_length - 1;\n    my $vowel_next\
    \ = $vowel_end - $vowel_offset;\n    my $vowel_last = $vowel_end - $vowel_next;\n\
    \    my $vowel_last_index = $vowel_length - $vowel_last;\n    my $vowel_next_index\
    \ = $vowel_length - $vowel_next;\n    my $vowel_last_letter = $vowels[$vowel_last_index];\n\
    \    my $vowel_next_letter = $vowels[$vowel_next_index];\n    my $vowel_last_letter_upper\
    \ = uc($vowel_last_letter);\n    my $vowel_next_letter_upper = uc($vowel_next_letter);\n\
    \    my $vowel_last_letter_lower = lc($vowel_last_letter);\n    my $vowel_next_letter_lower\
    \ = lc($vowel_next_letter);\n    my $vowel_last_letter_upper_index = $vowel_length\
    \ - $vowel_last;\n    my $vowel_next_letter_upper_index = $vowel_length - $vowel_next;\n\
    \    my $vowel_last_letter_lower_index = $vowel_length - $vowel_last;\n    my\
    \ $vowel_next_letter_lower_index = $vowel_length - $vowel_next;\n    my $vowel_last_letter_upper_next\
    \ = $vowels[$vowel_last_letter_upper_index];\n    my $vowel_next\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpb_eexy_p.pl line 36, at end
    of line

    syntax error at /tmp/tmpb_eexy_p.pl line 36, near "$vowel_next

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpb_eexy_p.pl line 63, at end of
    line

    syntax error at /tmp/tmpb_eexy_p.pl line 63, at EOF

    Execution of /tmp/tmpb_eexy_p.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_length = scalar\
    \ @vowels;\n    my $message_length = length $message;\n    for(my $i = 0; $i <\
    \ $message_length; $i++) {\n        my $char = substr($message, $i, 1);\n    \
    \    if($char =~ /[a-zA-Z]/) {\n            if(lc($char) eq $vowels[$vowel_index])\
    \ {\n                $vowel_count++;\n                if($vowel_count == 2) {\n\
    \                    $vowel_index++;\n                    $vowel_count = 0;\n\
    \                    if($vowel_index == $vowel_length) {\n                   \
    \     $vowel_index = 0;\n                    }\n                }\n          \
    \      $char = $vowels[$vowel_index];\n            }\n            if($char =~\
    \ /[a-z]/) {\n                $char = uc($char);\n            } else {\n     \
    \           $char = lc($char);\n            }\n        }\n        $encoded .=\
    \ $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a'..'z');\n    my %vowels =\
    \ map { $_ => 1 } @vowels;\n    for my $char (split //, $message) {\n        if\
    \ ($vowels{lc $char}) {\n            my $index = first_index { $_ eq lc $char\
    \ } @vowels;\n            $index = ($index + 2) % scalar @vowels;\n          \
    \  $char = $vowels[$index];\n        }\n        $encoded .= uc $char;\n    }\n\
    \    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t call method "first_index" without a package or object reference
    at /tmp/tmp9naktj_4.pl line 18.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @chars = split //, $message;\n    my $encoded = '';\n    foreach\
    \ my $char (@chars) {\n        if ($char =~ /[a-z]/i) {\n            if ($char\
    \ =~ /[aeiou]/i) {\n                my $vowel = $char;\n                $vowel\
    \ =~ tr/[a-z]/[A-Z]/;\n                $vowel =~ tr/[A-Z]/[a-z]/;\n          \
    \      $vowel =~ tr/aeiou/bcdfgh/;\n                $encoded .= $vowel;\n    \
    \        } else {\n                $char =~ tr/[a-z]/[A-Z]/;\n               \
    \ $encoded .= $char;\n            }\n        } else {\n            $encoded .=\
    \ $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_encoded\
    \ = 'cgjkr';\n    for my $char (split //, $message) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            my $index = index($vowels, lc($char));\n            if ($index\
    \ >= 0) {\n                $char = substr($vowels_encoded, $index, 1);\n     \
    \       }\n            $char = uc($char) if ($char =~ /[a-z]/);\n        }\n \
    \       $encoded .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my $vowel_index = 0;\n    my $vowel_length = scalar @vowels;\n    my $vowel_found\
    \ = 0;\n    my $vowel_pos = 0;\n    my $vowel_next = 0;\n    my $vowel_next_next\
    \ = 0;\n    my $vowel_next_next_next = 0;\n    my $vowel_next_next_next_next =\
    \ 0;\n    my $vowel_next_next_next_next_next = 0;\n    my $vowel_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next = 0;\n    my $vowel_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next = 0;\n    my\
    \ $vowel_next_next_next_next_next_next_next_next_next_next = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp9cmpzpee.pl line 35, at end
    of line

    syntax error at /tmp/tmp9cmpzpee.pl line 35, near "$vowel_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp9cmpzpee.pl line 62, at end of
    line

    syntax error at /tmp/tmp9cmpzpee.pl line 62, at EOF

    Execution of /tmp/tmp9cmpzpee.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = qw(a e i o u);\n    my %vowels\
    \ = map { $_ => 1 } @vowels;\n    my $vowel_index = 0;\n    my $vowel_count =\
    \ scalar @vowels;\n    for my $char (split //, $message) {\n        if ($char\
    \ =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n                $char =\
    \ uc $char;\n            } else {\n                $char = lc $char;\n       \
    \     }\n            if ($vowels{lc $char}) {\n                $vowel_index =\
    \ ($vowel_index + 2) % $vowel_count;\n                $char = $vowels[$vowel_index];\n\
    \            }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %letters = map { $_ => 1 }\
    \ ('a'..'z');\n    my %letters_upper = map { $_ => 1 } ('A'..'Z');\n    my %letters_lower\
    \ = map { $_ => 1 } ('a'..'z');\n    my $vowel_index = 0;\n    my $vowel_index_upper\
    \ = 0;\n    my $vowel_index_lower = 0;\n    my $vowel_index_upper_2 = 0;\n   \
    \ my $vowel_index_lower_2 = 0;\n    my $vowel_index_upper_3 = 0;\n    my $vowel_index_lower_3\
    \ = 0;\n    my $vowel_index_upper_4 = 0;\n    my $vowel_index_lower_4 = 0;\n \
    \   my $vowel_index_upper_5 = 0;\n    my $vowel_index_lower_5 = 0;\n    my $vowel_index_upper_6\
    \ = 0;\n    my $vowel_index_lower_6 = 0;\n    my $vowel_index_upper_7 = 0;\n \
    \   my $vowel_index_lower_7 = 0;\n    my $vowel_index_upper_8 = 0;\n    my $vowel_index_lower_8\
    \ = 0;\n    my $vowel_index_upper_9 = 0;\n    my $vowel_index_lower_9 = 0;\n \
    \   my $vowel_index_upper_10 = 0;\n    my $vowel_index_lower_10 = 0;\n    my $vowel_index_upper_11\
    \ = 0;\n    my $vowel_index_lower_11 = 0;\n    my $vowel_index_upper_12 = 0;\n\
    \    my $vowel_index_lower_12 = 0;\n    my $vowel_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpc_n9hwiy.pl line 45, at end
    of line

    syntax error at /tmp/tmpc_n9hwiy.pl line 45, near "$vowel_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpc_n9hwiy.pl line 72, at end of
    line

    syntax error at /tmp/tmpc_n9hwiy.pl line 72, at EOF

    Execution of /tmp/tmpc_n9hwiy.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %letters = map { $_ => 1 }\
    \ ('a'..'z');\n    my %letters_upper = map { $_ => 1 } ('A'..'Z');\n    my %letters_lower\
    \ = map { $_ => 1 } ('a'..'z');\n    my %letters_lower_upper = map { $_ => 1 }\
    \ ('a'..'z', 'A'..'Z');\n    my %letters_lower_upper_numbers = map { $_ => 1 }\
    \ ('a'..'z', 'A'..'Z', '0'..'9');\n    my %letters_lower_upper_numbers_space =\
    \ map { $_ => 1 } ('a'..'z', 'A'..'Z', '0'..'9', ' ');\n    my %letters_lower_upper_numbers_space_punctuation\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z', '0'..'9', ' ', '.', ',', '!', '?', ':',\
    \ ';', '-', '_', '+', '=', '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']',\
    \ '{', '}', '|', '\\\\', '/', '<', '>');\n    my %letters_lower_upper_numbers_space_punctuation_apostrophe\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z', '0'..'9', ' ', '.', ',', '!', '?', ':',\
    \ ';', '-', '_', '+', '=', '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']',\
    \ '{', '}', '|', '\\\\', '/', '<', '>', \"'\");\n    my %letters_lower_upper_numbers_space_punctuation_apostrophe_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp742qe_wg.pl line 25, at end
    of line

    syntax error at /tmp/tmp742qe_wg.pl line 25, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp742qe_wg.pl line 52, at end of
    line

    syntax error at /tmp/tmp742qe_wg.pl line 52, at EOF

    Execution of /tmp/tmp742qe_wg.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %vowels_encoded = (\n     \
    \   'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n\
    \        'u' => 's',\n    );\n    my @message = split(//, $message);\n    foreach\
    \ my $letter (@message) {\n        if ($vowels{$letter}) {\n            $encoded\
    \ .= $vowels_encoded{$letter};\n        } elsif ($letter =~ /[A-Z]/) {\n     \
    \       $encoded .= lc($letter);\n        } elsif ($letter =~ /[a-z]/) {\n   \
    \         $encoded .= uc($letter);\n        } else {\n            $encoded .=\
    \ $letter;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_\
    \ => 1 } ('a'..'z');\n    my %alphabet_hash = map { $_ => 1 } ('a'..'z');\n  \
    \  my $alphabet_string = 'abcdefghijklmnopqrstuvwxyz';\n    my @alphabet_array\
    \ = split('', $alphabet_string);\n    my $alphabet_length = scalar @alphabet_array;\n\
    \    my %alphabet_hash_2 = map { $_ => 1 } ('a'..'z');\n    my $alphabet_string_2\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n    my @alphabet_array_2 = split('', $alphabet_string_2);\n\
    \    my $alphabet_length_2 = scalar @alphabet_array_2;\n    my $message_length\
    \ = length($message);\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my\
    \ $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n  \
    \  my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n\
    \    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'No such class use at /tmp/tmpd1t3pmi9.pl line 58, near "my

    use"

    syntax error at /tmp/tmpd1t3pmi9.pl line 58, near "my

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpd1t3pmi9.pl line 85, at end of
    line

    syntax error at /tmp/tmpd1t3pmi9.pl line 85, at EOF

    Execution of /tmp/tmpd1t3pmi9.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_2 =\
    \ 'cgjkqsxz';\n    my $vowels_3 = 'bdfhmnprtvw';\n    my $vowels_4 = 'l';\n  \
    \  my $vowels_5 = 'y';\n    my $vowels_6 = 'a';\n    my $vowels_7 = 'e';\n   \
    \ my $vowels_8 = 'i';\n    my $vowels_9 = 'o';\n    my $vowels_10 = 'u';\n   \
    \ my $vowels_11 = 'a';\n    my $vowels_12 = 'e';\n    my $vowels_13 = 'i';\n \
    \   my $vowels_14 = 'o';\n    my $vowels_15 = 'u';\n    my $vowels_16 = 'a';\n\
    \    my $vowels_17 = 'e';\n    my $vowels_18 = 'i';\n    my $vowels_19 = 'o';\n\
    \    my $vowels_20 = 'u';\n    my $vowels_21 = 'a';\n    my $vowels_22 = 'e';\n\
    \    my $vowels_23 = 'i';\n    my $vowels_24 = 'o';\n    my $vowels_25 = 'u';\n\
    \    my $vowels_26 = 'a';\n    my $vowels_27 = 'e';\n    my $vowels_28 = 'i';\n\
    \    my $vowels_29 = 'o';\n    my $vowels_30 = 'u';\n    my $vowels_31 = 'a';\n\
    \    my $vowels_32 = 'e';\n    my $vowels_33 = 'i';\n    my $vowels_34 = 'o';\n\
    \    my $vowels_35 = 'u';\n    my $vowels_36 = 'a';\n    my $vowels_37 = 'e';\n\
    \    my $vowels_38 =\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp69llu9sr.pl line 52, at end
    of line

    syntax error at /tmp/tmp69llu9sr.pl line 52, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp69llu9sr.pl line 79, at end of
    line

    syntax error at /tmp/tmp69llu9sr.pl line 79, at EOF

    Execution of /tmp/tmp69llu9sr.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_regex\
    \ = qr/[$vowels]/;\n    my $vowels_index = 0;\n    my $vowels_length = length($vowels);\n\
    \    my $vowels_next_index = 0;\n    my $vowels_next_char = '';\n    my $char\
    \ = '';\n    my $char_index = 0;\n    my $char_length = length($message);\n  \
    \  my $char_next_index = 0;\n    my $char_next_char = '';\n    my $char_next_char_upper\
    \ = '';\n    my $char_next_char_lower = '';\n    my $char_next_char_upper_index\
    \ = 0;\n    my $char_next_char_lower_index = 0;\n    my $char_next_char_upper_next_index\
    \ = 0;\n    my $char_next_char_lower_next_index = 0;\n    my $char_next_char_upper_next_char\
    \ = '';\n    my $char_next_char_lower_next_char = '';\n    my $char_next_char_upper_next_char_upper\
    \ = '';\n    my $char_next_char_lower_next_char_lower = '';\n    my $char_next_char_upper_next_char_upper_index\
    \ = 0;\n    my $char_next_char_lower_next_char_lower_index = 0;\n    my $char_next_char_upper_next_char_upper_next_index\
    \ = 0;\n    my $char_next_char_lower_next_char_lower_next_index = 0;\n    my $char_next_char_upper_next_char_upper_next_char\
    \ = '';\n    my $char_next_char_lower_next_char_lower_next_char = '';\n    my\
    \ $char_next_char_upper_next_char_upper_next_char_upper = '';\n    my $char_next_char_lower_next_char_lower_next_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpt6axq9m1.pl line 43, at end
    of line

    syntax error at /tmp/tmpt6axq9m1.pl line 43, near "$char_next_char_lower_next_char_lower_next_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpt6axq9m1.pl line 70, at end of
    line

    syntax error at /tmp/tmpt6axq9m1.pl line 70, at EOF

    Execution of /tmp/tmpt6axq9m1.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a'..'z');\n    my %vowels =\
    \ map { $vowels[$_] => $vowels[($_ + 2) % 26] } (0..25);\n    for my $char (split\
    \ //, $message) {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~\
    \ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n            } else {\n  \
    \              $char =~ tr/A-Z/a-z/;\n            }\n            if ($char =~\
    \ /[aeiou]/i) {\n                $char = $vowels{lc $char};\n            }\n \
    \       }\n        $encoded .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split //, $message;\n    my @encode;\n    my $i = 0;\n\
    \    foreach my $letter (@message) {\n        if ($letter =~ /[a-z]/) {\n    \
    \        $encode[$i] = chr(ord($letter) - 32);\n        } elsif ($letter =~ /[A-Z]/)\
    \ {\n            $encode[$i] = chr(ord($letter) + 32);\n        } else {\n   \
    \         $encode[$i] = $letter;\n        }\n        $i++;\n    }\n    my $encode\
    \ = join '', @encode;\n    $encode =~ s/[aeiou]/shift_vowel($&)/eg;\n    return\
    \ $encode;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::shift_vowel called at /tmp/tmpfzmk96vx.pl line
    27.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split //, $message;\n    my @encoded;\n    my %vowels\
    \ = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $letter (@message)\
    \ {\n        if ($letter =~ /[a-z]/) {\n            if ($letter =~ /[aeiou]/)\
    \ {\n                push @encoded, $vowels{$letter};\n            } else {\n\
    \                push @encoded, $letter;\n            }\n        } else {\n  \
    \          push @encoded, $letter;\n        }\n    }\n    return join '', @encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a'..'z');\n    my %vowels =\
    \ map { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 } ('a'..'z');\n \
    \   my $i = 0;\n    while ($i < length($message)) {\n        my $char = substr($message,\
    \ $i, 1);\n        if ($alphabet{$char}) {\n            if ($vowels{$char}) {\n\
    \                $char = $vowels[($vowels{$char} + 2) % @vowels];\n          \
    \  }\n            $char = uc($char) if $char eq lc($char);\n        }\n      \
    \  $encoded .= $char;\n        $i++;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"aeiou\";\n    my\
    \ $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my %vowel_map = (\n       \
    \ 'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n\
    \        'u' => 's',\n    );\n    for my $letter (split //, $message) {\n    \
    \    if ($letter =~ /[A-Z]/) {\n            $encoded_message .= lc($letter);\n\
    \        } elsif ($letter =~ /[a-z]/) {\n            $encoded_message .= uc($letter);\n\
    \        } else {\n            $encoded_message .= $letter;\n        }\n    }\n\
    \    for my $vowel (split //, $vowels) {\n        $encoded_message =~ s/$vowel/$vowel_map{$vowel}/g;\n\
    \    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a'..'z');\n    my %vowels =\
    \ map { $_ => 1 } @vowels;\n    my %vowels_map = map { $vowels[$_] => $vowels[($_\
    \ + 2) % scalar(@vowels)] } 0..$#vowels;\n    for my $char (split //, $message)\
    \ {\n        if ($vowels{lc $char}) {\n            $encoded .= uc $vowels_map{lc\
    \ $char};\n        } else {\n            $encoded .= uc $char;\n        }\n  \
    \  }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = qw(a e i o u);\n    my\
    \ %vowel_map = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n\
    \        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $char (split //,\
    \ $message) {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/)\
    \ {\n                $char = uc $char;\n            } else {\n               \
    \ $char = lc $char;\n            }\n            if (grep {$_ eq lc $char} @vowels)\
    \ {\n                $char = $vowel_map{lc $char};\n            }\n        }\n\
    \        $encoded_message .= $char;\n    }\n    return $encoded_message;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %encoding = (\n        'a'\
    \ => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n   \
    \     'u' => 's',\n    );\n    foreach my $char (split(//, $message)) {\n    \
    \    if ($vowels{lc($char)}) {\n            $encoded .= $encoding{lc($char)};\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = qw(a e i o u);\n    my\
    \ %vowel_hash = map { $_ => 1 } @vowels;\n    my %alpha_hash = map { $_ => 1 }\
    \ ('a'..'z');\n    my %alpha_hash_upper = map { $_ => 1 } ('A'..'Z');\n    my\
    \ $alpha_hash_size = scalar(keys %alpha_hash);\n    my $alpha_hash_upper_size\
    \ = scalar(keys %alpha_hash_upper);\n    my $vowel_hash_size = scalar(keys %vowel_hash);\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n\
    \    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n\
    \    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n\
    \    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n\
    \    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n\
    \    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n   \nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpy78jaju8.pl line 93, at
    end of line

    syntax error at /tmp/tmpy78jaju8.pl line 93, at EOF

    Execution of /tmp/tmpy78jaju8.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_\
    \ => 1 } ('a'..'z');\n    my %alphabet_index = map { $alphabet{$_} => $_ } keys\
    \ %alphabet;\n    my $alphabet_size = keys %alphabet;\n    for my $char (split\
    \ //, $message) {\n        if ($vowels{lc $char}) {\n            my $index = $alphabet{lc\
    \ $char};\n            $index += 2;\n            $index -= $alphabet_size if $index\
    \ > $alphabet_size;\n            $char = $alphabet_index{$index};\n        }\n\
    \        $encoded_message .= uc $char;\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = \"\";\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowel_map = (\n        'a' => 'c',\n        'e' => 'g',\n   \
    \     'i' => 'k',\n        'o' => 'q',\n        'u' => 's',\n    );\n    my @message_array\
    \ = split //, $message;\n    foreach my $letter (@message_array) {\n        if\
    \ (grep {$_ eq $letter} @vowels) {\n            $encoded_message .= $vowel_map{$letter};\n\
    \        } else {\n            $encoded_message .= $letter;\n        }\n    }\n\
    \    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n   \
    \     'a' => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' => 'f',\n\
    \        'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n        'h' =>\
    \ 'j',\n        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n      \
    \  'l' => 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' => 'q',\n\
    \        'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n        's' =>\
    \ 'u',\n        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n      \
    \  'w' => 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' => 'b',\n\
    \    );\n    for my $char (split //, $message) {\n        if (exists $vowels{$char})\
    \ {\n            $encoded_message .= $alphabet{$char};\n        } elsif ($char\
    \ =~ /[A-Z]/) {\n            $encoded_message .= lc($char);\n        } elsif ($char\
    \ =~ /[a-z]/) {\n            $encoded_message .= uc($char);\n        } else {\n\
    \            $encoded_message .= $char;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @vowels = qw(a e i o u);\n    my @vowels_2 = qw(c f i l o);\n\
    \    my %vowels_hash = map { $vowels[$_] => $vowels_2[$_] } 0..$#vowels;\n   \
    \ my @message_array = split //, $message;\n    my @encoded_message = map {\n \
    \       my $char = $_;\n        if (exists $vowels_hash{lc $char}) {\n       \
    \     $vowels_hash{lc $char};\n        } elsif ($char =~ /[a-z]/) {\n        \
    \    chr(ord($char) + 2);\n        } elsif ($char =~ /[A-Z]/) {\n            chr(ord($char)\
    \ + 2 - 26);\n        } else {\n            $char;\n        }\n    } @message_array;\n\
    \    return join '', @encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_encoded\
    \ = 'cgjkq';\n    for my $letter (split //, $message) {\n        if ($letter =~\
    \ /[a-z]/i) {\n            if ($letter =~ /[a-z]/) {\n                $letter\
    \ = uc $letter;\n            } else {\n                $letter = lc $letter;\n\
    \            }\n            my $index = index($vowels, lc $letter);\n        \
    \    if ($index >= 0) {\n                $letter = substr($vowels_encoded, $index,\
    \ 1);\n            }\n        }\n        $encoded .= $letter;\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my $vowel_index = 0;\n    my $vowel_count\
    \ = scalar @vowels;\n    my $vowel_offset = 2;\n    my $vowel_offset_index = 0;\n\
    \    my $vowel_offset_count = 0;\n    my $vowel_offset_char = \"\";\n    my $char\
    \ = \"\";\n    my $char_index = 0;\n    my $char_count = 0;\n    my $char_is_vowel\
    \ = 0;\n    my $char_is_upper = 0;\n    my $char_is_lower = 0;\n    my $char_is_letter\
    \ = 0;\n    my $char_is_not_letter = 0;\n    my $char_is_not_vowel = 0;\n    my\
    \ $char_is_not_upper = 0;\n    my $char_is_not_lower = 0;\n    my $char_is_not_alpha\
    \ = 0;\n    my $char_is_alpha = 0;\n    my $char_is_not_alpha_numeric = 0;\n \
    \   my $char_is_alpha_numeric = 0;\n    my $char_is_not_digit = 0;\n    my $char_is_digit\
    \ = 0;\n    my $char_is_not_space = 0;\n    my $char_is_space = 0;\n    my $char_is_not_blank\
    \ = 0;\n    my $char_is_blank = 0;\n    my $char_is_not_cntrl = 0;\n    my $char_is_cntrl\
    \ = 0;\n    my $char_is_not_graph = 0;\n    my $char_is_graph = 0;\n    my $char_is_not_print\
    \ = 0;\n    my $char_is_print = 0;\n    my $char_is_not_punct = 0;\n    my $char_is_p\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp_sskj__e.pl line 51, at end
    of line

    syntax error at /tmp/tmp_sskj__e.pl line 51, near "$char_is_p

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp_sskj__e.pl line 78, at end of
    line

    syntax error at /tmp/tmp_sskj__e.pl line 78, at EOF

    Execution of /tmp/tmp_sskj__e.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split //, $message;\n    my @encoded_message;\n   \
    \ my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n\
    \        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $letter (@message)\
    \ {\n        if ($letter =~ /[a-z]/) {\n            if ($letter =~ /[a-z]/) {\n\
    \                $letter = uc $letter;\n            } else {\n               \
    \ $letter = lc $letter;\n            }\n        }\n        if ($letter =~ /[aeiou]/)\
    \ {\n            $letter = $vowels{$letter};\n        }\n        push @encoded_message,\
    \ $letter;\n    }\n    return join '', @encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a'..'z');\n    my %vowels =\
    \ map { $vowels[$_] => $vowels[($_ + 2) % 26] } (0..$#vowels);\n    for my $char\
    \ (split //, $message) {\n        if (exists $vowels{lc $char}) {\n          \
    \  $encoded .= $vowels{lc $char};\n        }\n        elsif ($char =~ /[a-z]/)\
    \ {\n            $encoded .= uc $char;\n        }\n        else {\n          \
    \  $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $result = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n \
    \   my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n        'a' =>\
    \ 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' => 'f',\n      \
    \  'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n        'h' => 'j',\n\
    \        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n        'l' =>\
    \ 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' => 'q',\n      \
    \  'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n        's' => 'u',\n\
    \        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n        'w' =>\
    \ 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' => 'b',\n    );\n\
    \    for my $letter (split //, $message) {\n        if ($vowels{$letter}) {\n\
    \            $result .= $alphabet{$letter};\n        }\n        else {\n     \
    \       $result .= $letter;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n        'a'\
    \ => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' => 'f',\n   \
    \     'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n        'h' => 'j',\n\
    \        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n        'l' =>\
    \ 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' => 'q',\n      \
    \  'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n        's' => 'u',\n\
    \        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n        'w' =>\
    \ 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' => 'b',\n    );\n\
    \    for my $char (split //, $message) {\n        if ($vowels{$char}) {\n    \
    \        $encoded .= $alphabet{$char};\n        } else {\n            $encoded\
    \ .= $char;\n        }\n    }\n    return uc($encoded);\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_hash\
    \ = {\n        'a' => 'c',\n        'e' => 'i',\n        'i' => 'o',\n       \
    \ 'o' => 'q',\n        'u' => 'y',\n    };\n    foreach my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n \
    \               $encoded .= uc $char;\n            } else {\n                $encoded\
    \ .= lc $char;\n            }\n        }\n        if ($char =~ /[aeiou]/i) {\n\
    \            if ($char =~ /[aeiou]/) {\n                $encoded .= uc $vowels_hash->{lc\
    \ $char};\n            } else {\n                $encoded .= lc $vowels_hash->{uc\
    \ $char};\n            }\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    foreach my $char\
    \ (split //, $message) {\n        if ($char =~ /[a-z]/i) {\n            if ($char\
    \ =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n            } else {\n\
    \                $char =~ tr/A-Z/a-z/;\n            }\n            if ($vowels\
    \ =~ /$char/i) {\n                $char =~ tr/aeiou/eioua/;\n            }\n \
    \       }\n        $encoded .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %letters = map { $_ => 1 }\
    \ ('a'..'z');\n    for my $letter (split //, $message) {\n        if ($letters{$letter})\
    \ {\n            if ($vowels{$letter}) {\n                my $next = $letter;\n\
    \                for (1..2) {\n                    $next++;\n                \
    \    $next = 'a' if $next eq 'z';\n                }\n                $encoded\
    \ .= $next;\n            } else {\n                $encoded .= $letter;\n    \
    \        }\n        } else {\n            $encoded .= $letter;\n        }\n  \
    \  }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my $vowel_index = 0;\n    for (my $i = 0; $i < length($message); $i++) {\n\
    \        my $char = substr($message, $i, 1);\n        if ($char =~ /[a-z]/i) {\n\
    \            if ($char =~ /[a-z]/) {\n                $char = uc($char);\n   \
    \         } else {\n                $char = lc($char);\n            }\n      \
    \      if ($char =~ /[aeiou]/i) {\n                $vowel_index = index(lc($char),\
    \ $vowels[0]);\n                if ($vowel_index == 4) {\n                   \
    \ $vowel_index = -1;\n                }\n                $char = $vowels[$vowel_index\
    \ + 2];\n            }\n        }\n        $encoded .= $char;\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n        'a'\
    \ => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' => 'f',\n   \
    \     'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n        'h' => 'j',\n\
    \        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n        'l' =>\
    \ 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' => 'q',\n      \
    \  'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n        's' => 'u',\n\
    \        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n        'w' =>\
    \ 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' => 'b',\n    );\n\
    \    for my $char (split //, $message) {\n        if ($vowels{lc($char)}) {\n\
    \            $encoded .= $alphabet{lc($char)};\n        } else {\n           \
    \ $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012707
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_encoded\
    \ = 'cgjkr';\n    my %vowels_map = (\n        'a' => 'c',\n        'e' => 'g',\n\
    \        'i' => 'j',\n        'o' => 'k',\n        'u' => 'r',\n    );\n    for\
    \ my $char (split //, $message) {\n        if ($char =~ /[a-z]/i) {\n        \
    \    if ($char =~ /[$vowels]/i) {\n                $encoded .= $vowels_map{lc\
    \ $char};\n            } else {\n                $encoded .= uc $char;\n     \
    \       }\n        } else {\n            $encoded .= $char;\n        }\n    }\n\
    \    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @letters = split(//, $message);\n    my @encoded_letters;\n  \
    \  my $encoded_message;\n    foreach my $letter (@letters) {\n        if ($letter\
    \ =~ /[a-z]/) {\n            $letter =~ tr/a-z/b-za/;\n        } elsif ($letter\
    \ =~ /[A-Z]/) {\n            $letter =~ tr/A-Z/B-ZA/;\n        }\n        push(@encoded_letters,\
    \ $letter);\n    }\n    $encoded_message = join('', @encoded_letters);\n    return\
    \ $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split //, $message;\n    my @encoded_message;\n   \
    \ foreach my $letter (@message) {\n        if ($letter =~ /[a-z]/) {\n       \
    \     push @encoded_message, chr(ord($letter) - 32);\n        } elsif ($letter\
    \ =~ /[A-Z]/) {\n            push @encoded_message, chr(ord($letter) + 32);\n\
    \        } else {\n            push @encoded_message, $letter;\n        }\n  \
    \  }\n    my $encoded_message = join '', @encoded_message;\n    $encoded_message\
    \ =~ s/[aeiou]/chr(ord($&) + 2)/eg;\n    return $encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_2 =\
    \ 'cgjkqsxyz';\n    my $vowels_2_index = 0;\n    for my $letter (split //, $message)\
    \ {\n        if (index($vowels, lc($letter)) != -1) {\n            $encoded .=\
    \ substr($vowels_2, $vowels_2_index, 1);\n            $vowels_2_index = ($vowels_2_index\
    \ + 1) % length($vowels_2);\n        } else {\n            $encoded .= $letter;\n\
    \        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = \"\";\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_hash\
    \ = {};\n    my $vowel_hash_index = 0;\n    my $vowel_hash_key = \"\";\n    my\
    \ $vowel_hash_value = \"\";\n    my $vowel_hash_count = 0;\n    my $vowel_hash_key_count\
    \ = 0;\n    my $vowel_hash_value_count = 0;\n    my $vowel_hash_key_index = 0;\n\
    \    my $vowel_hash_value_index = 0;\n    my $vowel_hash_key_value = \"\";\n \
    \   my $vowel_hash_value_value = \"\";\n    my $vowel_hash_key_value_count = 0;\n\
    \    my $vowel_hash_value_value_count = 0;\n    my $vowel_hash_key_value_index\
    \ = 0;\n    my $vowel_hash_value_value_index = 0;\n    my $vowel_hash_key_value_value\
    \ = \"\";\n    my $vowel_hash_value_value_value = \"\";\n    my $vowel_hash_key_value_value_count\
    \ = 0;\n    my $vowel_hash_value_value_value_count = 0;\n    my $vowel_hash_key_value_value_index\
    \ = 0;\n    my $vowel_hash_value_value_value_index = 0;\n    my $vowel_hash_key_value_value_value\
    \ = \"\";\n    my $vowel_hash_value_value_value_value = \"\";\n    my $vowel_hash_key_value_value_value_count\
    \ = 0;\n    my $vowel_hash_value_value_value_value_count = 0;\n    my $vowel_hash_key_value_value_value_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp7z52rxfy.pl line 43, at end
    of line

    syntax error at /tmp/tmp7z52rxfy.pl line 43, near "$vowel_hash_key_value_value_value_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp7z52rxfy.pl line 70, at end of
    line

    syntax error at /tmp/tmp7z52rxfy.pl line 70, at EOF

    Execution of /tmp/tmp7z52rxfy.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n   \
    \     'a' => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' => 'f',\n\
    \        'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n        'h' =>\
    \ 'j',\n        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n      \
    \  'l' => 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' => 'q',\n\
    \        'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n        's' =>\
    \ 'u',\n        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n      \
    \  'w' => 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' => 'b',\n\
    \    );\n    for my $char (split //, $message) {\n        if ($vowels{$char})\
    \ {\n            $encoded_message .= $alphabet{$char};\n        }\n        elsif\
    \ ($char =~ /[A-Z]/) {\n            $encoded_message .= lc($char);\n        }\n\
    \        elsif ($char =~ /[a-z]/) {\n            $encoded_message .= uc($char);\n\
    \        }\n        else {\n            $encoded_message .= $char;\n        }\n\
    \    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a'..'z');\n    my %vowels =\
    \ map {$vowels[$_] => $vowels[($_+2)%26]} (0..$#vowels);\n    for my $char (split\
    \ //, $message) {\n        if ($char =~ /[a-z]/i) {\n            $encoded .= $char\
    \ =~ /[a-z]/ ? uc $char : lc $char;\n        }\n        else {\n            $encoded\
    \ .= $vowels{lc $char} || $char;\n        }\n    }\n    return $encoded;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_\
    \ => 1 } ('a'..'z');\n    my %alphabet_map = map { $_ => 1 } ('c'..'z', 'a'..'b');\n\
    \    for my $char (split //, $message) {\n        if ($alphabet{$char}) {\n  \
    \          if ($vowels{$char}) {\n                $encoded_message .= $alphabet_map{$char};\n\
    \            } else {\n                $encoded_message .= uc $char;\n       \
    \     }\n        } else {\n            $encoded_message .= $char;\n        }\n\
    \    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    for my $char (split //,\
    \ $message) {\n        if ($vowels{lc $char}) {\n            my $new_char = chr(ord($char)\
    \ + 2);\n            $encoded_message .= $new_char;\n        } else {\n      \
    \      $encoded_message .= $char;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels_hash = map { $_ => 1 } @vowels;\n    my $vowel_index =\
    \ 0;\n    my $vowel_count = scalar @vowels;\n    for my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-zA-Z]/) {\n            if ($char =~ /[a-z]/) {\n\
    \                $char = uc $char;\n            } else {\n                $char\
    \ = lc $char;\n            }\n            if (exists $vowels_hash{lc $char}) {\n\
    \                $vowel_index = ($vowel_index + 1) % $vowel_count;\n         \
    \       $char = $vowels[$vowel_index];\n            }\n        }\n        $encoded_message\
    \ .= $char;\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_\
    \ => 1 } ('a'..'z');\n    my @alphabet = ('a'..'z');\n    for my $letter (split\
    \ //, $message) {\n        if ($alphabet{$letter}) {\n            if ($vowels{$letter})\
    \ {\n                my $index = 0;\n                for my $i (0..$#alphabet)\
    \ {\n                    if ($alphabet[$i] eq $letter) {\n                   \
    \     $index = $i;\n                        last;\n                    }\n   \
    \             }\n                $encoded_message .= $alphabet[($index + 2) %\
    \ 26];\n            } else {\n                $encoded_message .= uc $letter;\n\
    \            }\n        } else {\n            $encoded_message .= lc $letter;\n\
    \        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %letters = map { $_ => 1 }\
    \ ('a'..'z');\n    my %letters_upper = map { $_ => 1 } ('A'..'Z');\n    my %letters_lower\
    \ = map { $_ => 1 } ('a'..'z');\n    my %letters_upper_lower = map { $_ => 1 }\
    \ ('A'..'Z', 'a'..'z');\n    my %letters_lower_upper = map { $_ => 1 } ('a'..'z',\
    \ 'A'..'Z');\n    my %letters_lower_upper_lower = map { $_ => 1 } ('a'..'z', 'A'..'Z',\
    \ 'a'..'z');\n    my %letters_upper_lower_upper = map { $_ => 1 } ('A'..'Z', 'a'..'z',\
    \ 'A'..'Z');\n    my %letters_upper_lower_upper_lower = map { $_ => 1 } ('A'..'Z',\
    \ 'a'..'z', 'A'..'Z', 'a'..'z');\n    my %letters_lower_upper_lower_upper = map\
    \ { $_ => 1 } ('a'..'z', 'A'..'Z', 'a'..'z', 'A'..'Z');\n    my %letters_lower_upper_lower_upper_lower\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z', 'a'..'z', 'A'..'Z', 'a'..'z');\n    my\
    \ %letters_upper_lower_upper_lower_upper = map { $_ => 1 } ('A'..'Z', 'a'..'z',\
    \ 'A'..'Z', 'a'..'z', 'A'..'Z');\n    my %letters_upper_lower_upper_lower_upper_lower\
    \ = map { $_ => 1 } ('A'..'Z', 'a'..'z', 'A'..'Z', 'a'..'z',\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpsif9yors.pl line 28, at end
    of line

    syntax error at /tmp/tmpsif9yors.pl line 28, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpsif9yors.pl line 55, at end of
    line

    syntax error at /tmp/tmpsif9yors.pl line 55, at EOF

    Execution of /tmp/tmpsif9yors.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my $vowels = 'aeiou';\n    my $vowels_hash\
    \ = {\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 'y',\n    };\n    for my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[A-Z]/) {\n \
    \               $encoded_message .= lc($char);\n            } else {\n       \
    \         $encoded_message .= uc($char);\n            }\n        } elsif ($char\
    \ =~ /[$vowels]/i) {\n            if ($char =~ /[A-Z]/) {\n                $encoded_message\
    \ .= uc($vowels_hash->{lc($char)});\n            } else {\n                $encoded_message\
    \ .= $vowels_hash->{$char};\n            }\n        } else {\n            $encoded_message\
    \ .= $char;\n        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_encoded\
    \ = 'cgjkr';\n    for my $char (split //, $message) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            $encoded .= uc($char) eq $char ? lc($char) : uc($char);\n   \
    \     }\n        if ($char =~ /[$vowels]/i) {\n            my $index = index($vowels,\
    \ lc($char));\n            $encoded .= substr($vowels_encoded, $index, 1);\n \
    \       }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = \"\";\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_found\
    \ = 0;\n    my $vowel_index_found = 0;\n    my $vowel_index_found_plus_two = 0;\n\
    \    my $vowel_index_found_plus_two_mod = 0;\n    my $vowel_index_found_plus_two_mod_plus_one\
    \ = 0;\n    my $vowel_index_found_plus_two_mod_plus_one_mod = 0;\n    my $vowel_index_found_plus_two_mod_plus_one_mod_plus_one\
    \ = 0;\n    my $vowel_index_found_plus_two_mod_plus_one_mod_plus_one_mod = 0;\n\
    \    my $vowel_index_found_plus_two_mod_plus_one_mod_plus_one_mod_plus_one = 0;\n\
    \    my $vowel_index_found_plus_two_mod_plus_one_mod_plus_one_mod_plus_one_mod\
    \ = 0;\n    my $vowel_index_found_plus_two_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one\
    \ = 0;\n    my $vowel_index_found_plus_two_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod\
    \ = 0;\n    my $vowel_index_found_plus_two_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one\
    \ = 0;\n    my $vowel_index_found_plus_two_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod\
    \ = 0;\n    my $vowel_index_found_plus_two_mod_plus_\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpo3enht1d.pl line 32, at end
    of line

    syntax error at /tmp/tmpo3enht1d.pl line 32, near "$vowel_index_found_plus_two_mod_plus_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpo3enht1d.pl line 59, at end of
    line

    syntax error at /tmp/tmpo3enht1d.pl line 59, at EOF

    Execution of /tmp/tmpo3enht1d.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %letters = map { $_ => 1 }\
    \ ('a'..'z');\n    my %letters_upper = map { $_ => 1 } ('A'..'Z');\n    my %letters_lower\
    \ = map { $_ => 1 } ('a'..'z');\n    my $vowel_index = 0;\n    my $vowel_count\
    \ = 0;\n    my $vowel_count_upper = 0;\n    my $vowel_count_lower = 0;\n    my\
    \ $vowel_count_upper_lower = 0;\n    my $vowel_count_lower_upper = 0;\n    my\
    \ $vowel_count_upper_upper = 0;\n    my $vowel_count_lower_lower = 0;\n    my\
    \ $vowel_count_upper_lower_upper = 0;\n    my $vowel_count_lower_upper_lower =\
    \ 0;\n    my $vowel_count_upper_upper_upper = 0;\n    my $vowel_count_lower_lower_lower\
    \ = 0;\n    my $vowel_count_upper_lower_upper_lower = 0;\n    my $vowel_count_lower_upper_lower_upper\
    \ = 0;\n    my $vowel_count_upper_upper_upper_upper = 0;\n    my $vowel_count_lower_lower_lower_lower\
    \ = 0;\n    my $vowel_count_upper_lower_upper_lower_upper = 0;\n    my $vowel_count_lower_upper_lower_upper_lower\
    \ = 0;\n    my $vowel_count_upper_upper_upper_upper_upper = 0;\n    my $vowel_count_lower_lower_lower_lower_lower\
    \ = 0;\n    my $vowel_count_upper_lower_upper_lower_upper_lower = 0;\n    my $vowel_count_lower_upper_lower_upper_lower_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp0oolkbhh.pl line 41, at end
    of line

    syntax error at /tmp/tmp0oolkbhh.pl line 41, near "$vowel_count_lower_upper_lower_upper_lower_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp0oolkbhh.pl line 68, at end of
    line

    syntax error at /tmp/tmp0oolkbhh.pl line 68, at EOF

    Execution of /tmp/tmp0oolkbhh.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split(//, $message);\n    my $encoded = '';\n    my\
    \ $vowels = 'aeiou';\n    my $vowels_upper = 'AEIOU';\n    foreach my $letter\
    \ (@message) {\n        if ($letter =~ /[a-z]/) {\n            $letter =~ tr/a-z/b-za/;\n\
    \            if ($letter =~ /[$vowels]/) {\n                $letter =~ tr/b-z/c-za/;\n\
    \            }\n        } elsif ($letter =~ /[A-Z]/) {\n            $letter =~\
    \ tr/A-Z/B-ZA/;\n            if ($letter =~ /[$vowels_upper]/) {\n           \
    \     $letter =~ tr/B-Z/C-ZA/;\n            }\n        }\n        $encoded .=\
    \ $letter;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_\
    \ => 1 } ('a'..'z');\n    my @alphabet = ('a'..'z');\n    my %alphabet_index =\
    \ map { $alphabet[$_] => $_ } (0..$#alphabet);\n    my %alphabet_index_2 = map\
    \ { $alphabet[$_] => $_ } (2..$#alphabet);\n    my %alphabet_index_2_plus = map\
    \ { $alphabet[$_] => $_ } (2..$#alphabet);\n    $alphabet_index_2_plus{$alphabet[0]}\
    \ = 2;\n    $alphabet_index_2_plus{$alphabet[1]} = 3;\n    foreach my $char (split\
    \ //, $message) {\n        if ($vowels{$char}) {\n            $encoded_message\
    \ .= $alphabet[$alphabet_index_2_plus{$char}];\n        } elsif ($alphabet{$char})\
    \ {\n            $encoded_message .= $alphabet[$alphabet_index_2{$char}];\n  \
    \      } else {\n            $encoded_message .= $char;\n        }\n    }\n  \
    \  return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_re =\
    \ '[aeiou]';\n    my $vowels_map = 'cdfghjklmnpqrstvwxyzab';\n    my $vowels_map_re\
    \ = '[cdfghjklmnpqrstvwxyzab]';\n    my $vowels_map_re_2 = '[cdfghjklmnpqrstvwxyzab]{2}';\n\
    \    my $vowels_map_re_3 = '[cdfghjklmnpqrstvwxyzab]{3}';\n    my $vowels_map_re_4\
    \ = '[cdfghjklmnpqrstvwxyzab]{4}';\n    my $vowels_map_re_5 = '[cdfghjklmnpqrstvwxyzab]{5}';\n\
    \    my $vowels_map_re_6 = '[cdfghjklmnpqrstvwxyzab]{6}';\n    my $vowels_map_re_7\
    \ = '[cdfghjklmnpqrstvwxyzab]{7}';\n    my $vowels_map_re_8 = '[cdfghjklmnpqrstvwxyzab]{8}';\n\
    \    my $vowels_map_re_9 = '[cdfghjklmnpqrstvwxyzab]{9}';\n    my $vowels_map_re_10\
    \ = '[cdfghjklmnpqrstvwxyzab]{10}';\n    my $vowels_map_re_11 = '[cdfghjklmnpqrstvwxyzab]{11}';\n\
    \    my $vowels_map_re_12 = '[cdfghjklmnpqrstvwxyzab]{12}';\n    my $vowels_map_re_13\
    \ = '[cdfghjklmnpqrstvwxyzab]{\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t find string terminator "''" anywhere before EOF at /tmp/tmp045jxd1x.pl
    line 29.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %letters = map { $_\
    \ => 1 } ('a'..'z');\n    my %letters_hash = map { $_ => 1 } ('a'..'z');\n   \
    \ my @letters = ('a'..'z');\n    for my $letter (split //, $message) {\n     \
    \   if ($letters{$letter}) {\n            if ($vowels{$letter}) {\n          \
    \      my $index = firstidx { $_ eq $letter } @letters;\n                $index\
    \ += 2;\n                $index = $index % 26;\n                $encoded_message\
    \ .= $letters[$index];\n            } else {\n                $encoded_message\
    \ .= uc $letter;\n            }\n        } else {\n            $encoded_message\
    \ .= $letter;\n        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n        'a'\
    \ => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' => 'f',\n   \
    \     'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n        'h' => 'j',\n\
    \        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n        'l' =>\
    \ 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' => 'q',\n      \
    \  'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n        's' => 'u',\n\
    \        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n        'w' =>\
    \ 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' => 'b',\n    );\n\
    \    for my $char (split //, $message) {\n        if ($vowels{$char}) {\n    \
    \        $encoded .= $alphabet{$char};\n        }\n        elsif ($char =~ /[A-Z]/)\
    \ {\n            $encoded .= lc($char);\n        }\n        elsif ($char =~ /[a-z]/)\
    \ {\n            $encoded .= uc($char);\n        }\n        else {\n         \
    \   $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my $vowel_index = 0;\n    my $vowel_count\
    \ = scalar @vowels;\n    my $vowel_offset = 2;\n    for my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n \
    \               $char = uc $char;\n            } else {\n                $char\
    \ = lc $char;\n            }\n            if ($vowels{lc $char}) {\n         \
    \       $vowel_index = ($vowel_index + $vowel_offset) % $vowel_count;\n      \
    \          $char = $vowels[$vowel_index];\n            }\n        }\n        $encoded\
    \ .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = qw(a e i o u);\n    my %vowels\
    \ = map { $_ => 1 } @vowels;\n    my %letters = map { $_ => 1 } ('a'..'z');\n\
    \    my %letters_upper = map { $_ => 1 } ('A'..'Z');\n    my %letters_lower =\
    \ map { $_ => 1 } ('a'..'z');\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n\
    \    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n\
    \    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n\
    \    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n\
    \    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n\
    \    my $Z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    my $g =\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmplhsf3ekw.pl line 70, at end
    of line

    syntax error at /tmp/tmplhsf3ekw.pl line 70, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmplhsf3ekw.pl line 97, at end of
    line

    syntax error at /tmp/tmplhsf3ekw.pl line 97, at EOF

    Execution of /tmp/tmplhsf3ekw.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a'..'z');\n    my %vowels =\
    \ map { $_ => 1 } @vowels;\n    my %vowels_map = map { $vowels[$_] => $vowels[($_\
    \ + 2) % 26] } (0..25);\n    for my $char (split //, $message) {\n        if ($vowels{lc\
    \ $char}) {\n            $encoded .= uc $vowels_map{lc $char};\n        } else\
    \ {\n            $encoded .= uc $char;\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_encoded\
    \ = 'cgjkr';\n    my %vowels_map = (\n        'a' => 'c',\n        'e' => 'g',\n\
    \        'i' => 'j',\n        'o' => 'k',\n        'u' => 'r',\n    );\n    my\
    \ $i = 0;\n    while ($i < length($message)) {\n        my $char = substr($message,\
    \ $i, 1);\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/)\
    \ {\n                $char = uc($char);\n            }\n            else {\n \
    \               $char = lc($char);\n            }\n            if ($char =~ /[$vowels]/)\
    \ {\n                $char = $vowels_map{$char};\n            }\n        }\n \
    \       $encoded .= $char;\n        $i++;\n    }\n    return $encoded;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels_hash = map { $_ => 1 } @vowels;\n    for my $char (split\
    \ //, $message) {\n        if ($vowels_hash{lc $char}) {\n            $encoded_message\
    \ .= $vowels[($vowels_hash{lc $char} + 1) % 5];\n        }\n        else {\n \
    \           $encoded_message .= $char;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_map\
    \ = 'cfilorux';\n    my $i = 0;\n    while ($i < length($message)) {\n       \
    \ my $c = substr($message, $i, 1);\n        if (index($vowels, $c) != -1) {\n\
    \            $encoded .= substr($vowels_map, index($vowels, $c), 1);\n       \
    \ } elsif ($c =~ /[a-z]/) {\n            $encoded .= uc($c);\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            $encoded .= lc($c);\n        } else {\n     \
    \       $encoded .= $c;\n        }\n        $i++;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    my $alphabet_lower = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $alphabet_upper_length = length($alphabet_upper);\n\
    \    my $alphabet_lower_length = length($alphabet_lower);\n    my $vowels_length\
    \ = length($vowels);\n    my $message_length = length($message);\n    my $message_char;\n\
    \    my $message_char_upper;\n    my $message_char_lower;\n    my $message_char_upper_index;\n\
    \    my $message_char_lower_index;\n    my $message_char_vowel_index;\n    my\
    \ $message_char_vowel_index_plus_two;\n    my $message_char_vowel_index_plus_two_char;\n\
    \    my $message_char_vowel_index_plus_two_char_upper;\n    my $message_char_vowel_index_plus_two_char_lower;\n\
    \    my $message_char_vowel_index_plus_two_char_upper_index;\n    my $message_char_vowel_index_plus_two_char_lower_index;\n\
    \    my $message_char_vowel_index_plus_two_char_upper_index_plus_two;\n    my\
    \ $message_char_vowel_index_plus_two_char_lower_index_plus_two;\n    my $message_char_vowel_index_plus_two_char_upper_index_plus_two_char;\n\
    \    my $message_char_vowel_index_plus_two_char_lower_index_plus_two_char;\n \
    \   my $i;\n    my $j;\n    my $k;\n    my $l;\n   \nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpygt130ia.pl line 71, at
    end of line

    syntax error at /tmp/tmpygt130ia.pl line 71, at EOF

    Execution of /tmp/tmpygt130ia.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_encoded\
    \ = 'cgjkr';\n    for my $char (split //, $message) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $char = uc $char;\n\
    \            }\n            else {\n                $char = lc $char;\n      \
    \      }\n            my $index = index($vowels, lc $char);\n            if ($index\
    \ >= 0) {\n                $char = substr($vowels_encoded, $index, 1);\n     \
    \       }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my $vowels = 'aeiou';\n    my $vowels_index\
    \ = 0;\n    my $vowel_index = 0;\n    my $vowel_position = 0;\n    my $vowel_position_in_message\
    \ = 0;\n    my $vowel_position_in_message_index = 0;\n    my $vowel_position_in_message_index_index\
    \ = 0;\n    my $vowel_position_in_message_index_index_index = 0;\n    my $vowel_position_in_message_index_index_index_index\
    \ = 0;\n    my $vowel_position_in_message_index_index_index_index_index = 0;\n\
    \    my $vowel_position_in_message_index_index_index_index_index_index = 0;\n\
    \    my $vowel_position_in_message_index_index_index_index_index_index_index =\
    \ 0;\n    my $vowel_position_in_message_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $vowel_position_in_message_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $vowel_position_in_message_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $vowel_position_in_message_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $vowel_position_in_message_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $vowel_position_in_message_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $vowel_position_in_message_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n   \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpgh5vb7x2.pl line 61, at
    end of line

    syntax error at /tmp/tmpgh5vb7x2.pl line 61, at EOF

    Execution of /tmp/tmpgh5vb7x2.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %vowels_map = (\n \
    \       'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' =>\
    \ 'q',\n        'u' => 'y',\n    );\n    for my $char (split //, $message) {\n\
    \        if ($vowels{lc $char}) {\n            $encoded_message .= $vowels_map{lc\
    \ $char};\n        } else {\n            $encoded_message .= $char;\n        }\n\
    \    }\n    return uc $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_ahead\
    \ = 'cgkmqsuwy';\n    my %vowels_hash = ();\n    for (my $i = 0; $i < length($vowels);\
    \ $i++) {\n        $vowels_hash{substr($vowels, $i, 1)} = substr($vowels_ahead,\
    \ $i, 1);\n    }\n    for (my $i = 0; $i < length($message); $i++) {\n       \
    \ my $char = substr($message, $i, 1);\n        if ($char =~ /[a-z]/i) {\n    \
    \        if ($char =~ /[a-z]/) {\n                $char = uc($char);\n       \
    \     } else {\n                $char = lc($char);\n            }\n          \
    \  if (exists $vowels_hash{$char}) {\n                $char = $vowels_hash{$char};\n\
    \            }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012708
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    foreach my $char (split //, $message) {\n        if (lc($char) ~~ @vowels)\
    \ {\n            my $index = first_index { $_ eq lc($char) } @vowels;\n      \
    \      $index = ($index + 2) % 5;\n            $encoded .= uc($vowels[$index]);\n\
    \        } else {\n            $encoded .= uc($char);\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Smartmatch is experimental at /tmp/tmpe50gg1zk.pl line 16.

    Can''t call method "first_index" without a package or object reference at /tmp/tmpe50gg1zk.pl
    line 17.

    '
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_ahead\
    \ = 'cgjkqsvwxz';\n    for my $char (split //, $message) {\n        if ($char\
    \ =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n                $char =\
    \ uc $char;\n            } else {\n                $char = lc $char;\n       \
    \     }\n            if ($vowels =~ /$char/i) {\n                $char =~ s/[aeiou]/$vowels_ahead/i;\n\
    \            }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split //, $message;\n    my @encoded_message;\n   \
    \ my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n\
    \        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $letter (@message)\
    \ {\n        if (exists $vowels{$letter}) {\n            push @encoded_message,\
    \ $vowels{$letter};\n        } elsif ($letter =~ /[A-Z]/) {\n            push\
    \ @encoded_message, lc $letter;\n        } elsif ($letter =~ /[a-z]/) {\n    \
    \        push @encoded_message, uc $letter;\n        } else {\n            push\
    \ @encoded_message, $letter;\n        }\n    }\n    return join '', @encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    for my $char (split //, $message) {\n        if ($char =~ /[a-z]/i) {\n \
    \           if ($char =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n \
    \           } else {\n                $char =~ tr/A-Z/a-z/;\n            }\n \
    \           if (grep {$_ eq lc($char)} @vowels) {\n                my $index =\
    \ 0;\n                for (my $i = 0; $i < @vowels; $i++) {\n                \
    \    if ($vowels[$i] eq lc($char)) {\n                        $index = $i;\n \
    \                       last;\n                    }\n                }\n    \
    \            $char = $vowels[($index + 2) % @vowels];\n            }\n       \
    \ }\n        $encoded .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    foreach my $char (split //, $message) {\n        if ($char =~ /[a-z]/i) {\n\
    \            $encoded .= $char =~ /[a-z]/ ? uc $char : lc $char;\n        }\n\
    \        elsif ($char =~ /[aeiou]/i) {\n            my $index = first_index {\
    \ $_ eq lc $char } @vowels;\n            $index = ($index + 2) % 5;\n        \
    \    $encoded .= $char =~ /[a-z]/ ? uc $vowels[$index] : lc $vowels[$index];\n\
    \        }\n        else {\n            $encoded .= $char;\n        }\n    }\n\
    \    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_\
    \ => 1 } ('a'..'z');\n    my %alphabet_pos = map { $alphabet{$_} => $_ } keys\
    \ %alphabet;\n    my $alphabet_size = scalar keys %alphabet;\n    for my $char\
    \ (split //, $message) {\n        if ($vowels{$char}) {\n            my $pos =\
    \ $alphabet{$char};\n            my $next_pos = $pos + 2;\n            if ($next_pos\
    \ > $alphabet_size) {\n                $next_pos = $next_pos - $alphabet_size;\n\
    \            }\n            $char = $alphabet_pos{$next_pos};\n        }\n   \
    \     $encoded_message .= uc $char;\n    }\n    return $encoded_message;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = \"\";\n    my @letters = split(//, $message);\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/) {\n    \
    \        $encoded_message .= chr(ord($letter) - 32);\n        } elsif ($letter\
    \ =~ /[A-Z]/) {\n            $encoded_message .= chr(ord($letter) + 32);\n   \
    \     } else {\n            $encoded_message .= $letter;\n        }\n    }\n \
    \   $encoded_message =~ s/[aeiou]/chr(ord($&) + 2)/eg;\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @message_array = split('', $message);\n\
    \    foreach my $char (@message_array) {\n        if ($char =~ /[a-z]/i) {\n \
    \           if ($char =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n \
    \           } else {\n                $char =~ tr/A-Z/a-z/;\n            }\n \
    \           if ($char =~ /[aeiou]/i) {\n                $char =~ tr/aeiou/EIOUA/;\n\
    \            }\n        }\n        $encoded_message .= $char;\n    }\n    return\
    \ $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n        'a'\
    \ => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' => 'f',\n   \
    \     'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n        'h' => 'j',\n\
    \        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n        'l' =>\
    \ 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' => 'q',\n      \
    \  'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n        's' => 'u',\n\
    \        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n        'w' =>\
    \ 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' => 'b',\n    );\n\
    \    for (my $i = 0; $i < length($message); $i++) {\n        my $char = substr($message,\
    \ $i, 1);\n        if ($vowels{$char}) {\n            $encoded .= $alphabet{$char};\n\
    \        } else {\n            $encoded .= uc($char);\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    my %alphabet = map { $_ => 1 } split //, $alphabet;\n    my %alphabet_map\
    \ = map { $alphabet[$_] => $alphabet[($_ + 2) % 26] } 0..25;\n    for my $letter\
    \ (split //, $message) {\n        if ($alphabet{$letter}) {\n            if ($vowels{$letter})\
    \ {\n                $encoded .= $alphabet_map{$letter};\n            } else {\n\
    \                $encoded .= uc $letter;\n            }\n        } else {\n  \
    \          $encoded .= lc $letter;\n        }\n    }\n    return $encoded;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = qw(a e i o u);\n    my %vowels\
    \ = map { $_ => 1 } @vowels;\n    my %vowels_map = (\n        a => 'c',\n    \
    \    e => 'g',\n        i => 'k',\n        o => 's',\n        u => 'y',\n    );\n\
    \    for my $char (split //, $message) {\n        if ($vowels{lc $char}) {\n \
    \           $encoded .= $vowels_map{lc $char};\n        }\n        elsif ($char\
    \ =~ /[a-z]/) {\n            $encoded .= uc $char;\n        }\n        elsif ($char\
    \ =~ /[A-Z]/) {\n            $encoded .= lc $char;\n        }\n        else {\n\
    \            $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded_message = '';\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n   \
    \     'a' => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' => 'f',\n\
    \        'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n        'h' =>\
    \ 'j',\n        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n      \
    \  'l' => 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' => 'q',\n\
    \        'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n        's' =>\
    \ 'u',\n        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n      \
    \  'w' => 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' => 'b',\n\
    \    );\n    for my $char (split //, $message) {\n        if ($vowels{$char})\
    \ {\n            $encoded_message .= $alphabet{$char};\n        }\n        elsif\
    \ ($char =~ /[A-Z]/) {\n            $encoded_message .= lc($char);\n        }\n\
    \        elsif ($char =~ /[a-z]/) {\n            $encoded_message .= uc($char);\n\
    \        }\n        else {\n            $encoded_message .= $char;\n        }\n\
    \    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my $encoded = '';\n    my @vowels = ('a'..'z', 'A'..'Z');\n    my\
    \ %vowels = map { $_ => 1 } @vowels;\n    my $vowel_count = scalar @vowels;\n\
    \    my $vowel_index = 0;\n    my $vowel_map = {};\n    for my $vowel (@vowels)\
    \ {\n        $vowel_map->{$vowel} = $vowels[$vowel_index + 2];\n        $vowel_index++;\n\
    \    }\n    for my $char (split //, $message) {\n        if ($vowels{$char}) {\n\
    \            $encoded .= $vowel_map->{$char};\n        } else {\n            $encoded\
    \ .= $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nsub encode {\n    my($message)\
    \ = @_;\n    my @message = split //, $message;\n    my @encoded;\n    my %vowels\
    \ = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 'y',\n    );\n    for my $letter (@message) {\n\
    \        if ($letter =~ /[a-z]/) {\n            if ($letter =~ /[aeiou]/) {\n\
    \                push @encoded, $vowels{$letter};\n            } else {\n    \
    \            push @encoded, $letter;\n            }\n        } else {\n      \
    \      push @encoded, uc $letter;\n        }\n    }\n    return join '', @encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012708
