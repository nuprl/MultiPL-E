name: HumanEval_126_is_sorted
language: humaneval_to_perl.py
prompt: "# Given a list of numbers, return whether or not they are sorted\n# in ascending\
  \ order. If list has more than 1 duplicate of the same\n# number, return False.\
  \ Assume no negative numbers and only integers.\n# Examples\n# is_sorted([5]) \u279E\
  \ True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1, 3, 2, 4, 5]) \u279E\
  \ False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1, 2, 3, 4, 5,\
  \ 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n# is_sorted([1,\
  \ 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nsub\
  \ is_sorted {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_sorted;\n\
  \        if(eq_deeply($candidate->([5]),1)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 3, 2, 4, 5]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 4, 5, 6, 7]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, 7]),\"\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
  \ 2, 1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([1, 2, 2, 2, 3, 4]),\"\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 3, 3, 4]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([1, 2, 2, 3, 3, 4]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: []
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
