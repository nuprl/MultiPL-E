name: HumanEval_65_circular_shift
language: humaneval_to_perl.py
prompt: "# Circular shift the digits of the integer x, shift the digits right by shift\n\
  # and return the result as a string.\n# If shift > number of digits, return digits\
  \ reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>> circular_shift(12, 2)\n\
  # \"12\"\nsub circular_shift {\n    my($x, $shift) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&circular_shift;\n\
  \        if(eq_deeply($candidate->(100, 2),\"001\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 2),\"12\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(97,\
  \ 8),\"79\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(12, 1),\"21\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(11, 101),\"11\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n\
    \    return substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n}",
  "    my $digits = length($x);\n    return $x if $shift == $digits;\n    return reverse($x)\
    \ if $shift > $digits;\n    my $left = substr($x, 0, $shift);\n    my $right =\
    \ substr($x, $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $first = substr($x, 0, $digits - $shift);\n    my $last = substr($x, $digits\
    \ - $shift);\n    return $last . $first;\n}", "    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    return substr($x, $shift, $digits\
    \ - $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    return\
    \ reverse($x) if $shift > $digits;\n    my $right = substr($x, $digits - $shift);\n\
    \    my $left = substr($x, 0, $digits - $shift);\n    return $right . $left;\n\
    }", "    my $digits = length($x);\n    if ($shift > $digits) {\n        return\
    \ reverse($x);\n    } else {\n        my $left = substr($x, 0, $digits - $shift);\n\
    \        my $right = substr($x, $digits - $shift);\n        return $right . $left;\n\
    \    }\n}", "    my $digits = length($x);\n    if ($shift > $digits) {\n     \
    \   return reverse($x);\n    }\n    my $y = $x % (10 ** $shift);\n    my $z =\
    \ $x / (10 ** $shift);\n    return $y . $z;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $first\
    \ = substr($x, 0, $digits - $shift);\n    my $last = substr($x, $digits - $shift);\n\
    \    return $last . $first;\n}", "    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return scalar reverse $x;\n    } else {\n        return\
    \ substr($x, $shift) . substr($x, 0, $shift);\n    }\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $right\
    \ = substr($x, $digits - $shift, $shift);\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    $shift %= $digits;\n    return scalar reverse $x if $shift == 0;\n    return\
    \ substr($x, $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return scalar reverse $x;\n    }\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my $n = length($x);\n    return reverse($x) if $shift\
    \ > $n;\n    my $y = $x % (10 ** $shift);\n    return $y . substr($x, 0, $n -\
    \ $shift);\n}", "    my $len = length($x);\n    my $ret = $x;\n    if ($shift\
    \ < $len) {\n        $ret = substr($x, $shift) . substr($x, 0, $shift);\n    }\
    \ else {\n        $ret = reverse($x);\n    }\n    return $ret;\n}", "    my $digits\
    \ = length($x);\n    return reverse($x) if $shift > $digits;\n    my $first_part\
    \ = substr($x, $digits - $shift, $shift);\n    my $second_part = substr($x, 0,\
    \ $digits - $shift);\n    return $first_part . $second_part;\n}", "    my $n =\
    \ length($x);\n    return reverse($x) if $shift > $n;\n    my $y = $x % 10**$shift;\n\
    \    return $y . substr($x, 0, $n - $shift);\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    my $result = $x;\n    if ($shift > $digits) {\n        $result = reverse($result);\n\
    \    } else {\n        $result = substr($result, $shift) . substr($result, 0,\
    \ $shift);\n    }\n    return $result;\n}", "    my $digits = length($x);\n  \
    \  if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left =\
    \ substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "    my $digits = length($x);\n    if ($shift\
    \ >= $digits) {\n        return reverse($x);\n    }\n    my $y = $x % (10 ** $shift);\n\
    \    my $z = $x / (10 ** $shift);\n    return $y . $z;\n}", "    my $digits =\
    \ length($x);\n    if ($shift > $digits) {\n        return scalar reverse $x;\n\
    \    }\n    return substr($x, $shift, $digits-$shift) . substr($x, 0, $shift);\n\
    }", "    my $str = \"$x\";\n    my $len = length($str);\n    if ($shift > $len)\
    \ {\n        return reverse($str);\n    }\n    my $left = substr($str, 0, $len\
    \ - $shift);\n    my $right = substr($str, $len - $shift);\n    return $right\
    \ . $left;\n}", "    my $digits = length($x);\n    if ($shift > $digits) {\n \
    \       return reverse($x);\n    }\n    my $first = substr($x, 0, $digits - $shift);\n\
    \    my $second = substr($x, $digits - $shift);\n    return $second . $first;\n\
    }", "    my $digits = length($x);\n    if ($shift > $digits) {\n        return\
    \ scalar reverse $x;\n    }\n    my $left = substr($x, 0, $digits - $shift);\n\
    \    my $right = substr($x, $digits - $shift);\n    return $right . $left;\n}",
  "    my $digits = length($x);\n    $shift = $digits if $shift > $digits;\n    return\
    \ reverse(substr(reverse($x), 0, $digits - $shift)) .\n        substr(reverse($x),\
    \ $digits - $shift, $shift);\n}", "    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return scalar reverse $x;\n    }\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return scalar reverse $x;\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $digits = length($x);\n    if ($shift > $digits) {\n \
    \       return reverse($x);\n    }\n    my $right = substr($x, 0, $digits - $shift);\n\
    \    my $left = substr($x, $digits - $shift);\n    return $left . $right;\n}",
  "    my $digits = length($x);\n    if ($shift > $digits) {\n        return scalar\
    \ reverse $x;\n    }\n    my $left = substr($x, 0, $digits - $shift);\n    my\
    \ $right = substr($x, $digits - $shift);\n    return $right . $left;\n}", "  \
    \  my $digits = length($x);\n    return scalar reverse $x if $shift > $digits;\n\
    \    return substr($x, $shift) . substr($x, 0, $shift);\n}", "    my $digits =\
    \ length($x);\n    if ($shift > $digits) {\n        return scalar reverse $x;\n\
    \    }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "    my $len = length($x);\n\
    \    $shift %= $len;\n    return reverse($x) if $shift > $len;\n    return substr($x,\
    \ $len - $shift) . substr($x, 0, $len - $shift);\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $right\
    \ = substr($x, $digits - $shift, $shift);\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $len = length($x);\n   \
    \ return reverse($x) if $shift > $len;\n    my $left = substr($x, 0, $len - $shift);\n\
    \    my $right = substr($x, $len - $shift);\n    return $right . $left;\n}", " \
    \   my $digits = length($x);\n    if ($shift > $digits) {\n        return scalar\
    \ reverse $x;\n    }\n    return substr($x, $shift, $digits-$shift) . substr($x,\
    \ 0, $shift);\n}", "    my $digits = length($x);\n    if ($shift >= $digits) {\n\
    \        return reverse($x);\n    }\n    my $first = substr($x, 0, $digits - $shift);\n\
    \    my $last = substr($x, $digits - $shift);\n    return $last . $first;\n}",
  "    my $digits = length($x);\n    if ($shift > $digits) {\n        return scalar\
    \ reverse $x;\n    }\n    my $left = substr($x, 0, $digits - $shift);\n    my\
    \ $right = substr($x, $digits - $shift);\n    return $right . $left;\n}", "  \
    \  my $digits = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n\
    \    }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        $shift = $digits;\n    }\n    my $y = $x\
    \ % 10**$shift;\n    my $z = $x / 10**$shift;\n    return $y . $z;\n}", "    my\
    \ $digits = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n\
    \    }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "    my $digits = length $x;\n    $shift %= $digits;\n\
    \    return scalar reverse $x if $shift == 0;\n    return substr($x, $shift) .\
    \ substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    if ($shift >\
    \ $digits) {\n        return reverse($x);\n    }\n    my $left = substr($x, 0,\
    \ $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my $x_str = \"$x\";\n    my $len = length($x_str);\n\
    \    if ($shift >= $len) {\n        return reverse($x_str);\n    }\n    return\
    \ substr($x_str, $shift, $len - $shift) . substr($x_str, 0, $shift);\n}", "  \
    \  my $digits = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n\
    \    }\n    my $right = substr($x, $digits - $shift, $shift);\n    my $left =\
    \ substr($x, 0, $digits - $shift);\n    return $right . $left;\n}", "    my $digits\
    \ = length($x);\n    $shift %= $digits;\n    return reverse($x) if $shift == 0;\n\
    \    return substr($x, $shift) . substr($x, 0, $shift);\n}", "    my $digits =\
    \ length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n    }\n\
    \    my $first = substr($x, 0, $digits - $shift);\n    my $last = substr($x, $digits\
    \ - $shift);\n    return $last . $first;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    } else {\n\
    \        return substr($x, $shift) . substr($x, 0, $shift);\n    }\n}", "    my\
    \ $digits = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n\
    \    }\n    my $right = substr($x, 0, $digits - $shift);\n    my $left = substr($x,\
    \ $digits - $shift);\n    return $left . $right;\n}", "    my $digits = length($x);\n\
    \    my $result = $x;\n    if ($shift > $digits) {\n        $result = reverse($result);\n\
    \    } else {\n        $result = substr($result, $shift) . substr($result, 0,\
    \ $shift);\n    }\n    return $result;\n}", "    my $digits = length($x);\n  \
    \  if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $first_part\
    \ = substr($x, $shift, $digits - $shift);\n    my $second_part = substr($x, 0,\
    \ $shift);\n    return $first_part . $second_part;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return reverse($x);\n    }\n    my $right = substr($x,\
    \ 0, $digits - $shift);\n    my $left = substr($x, $digits - $shift);\n    return\
    \ $left . $right;\n}", "    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return scalar reverse $x;\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $digits = length($x);\n    if ($shift > $digits) {\n \
    \       return reverse($x);\n    }\n    my $left = substr($x, 0, $digits - $shift);\n\
    \    my $right = substr($x, $digits - $shift);\n    return $right . $left;\n}",
  "    my $digits = length($x);\n    if ($shift > $digits) {\n        return scalar\
    \ reverse $x;\n    }\n    my $right_shift = $digits - $shift;\n    my $left_shift\
    \ = $shift;\n    my $left = substr($x, 0, $left_shift);\n    my $right = substr($x,\
    \ $left_shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "    my $digits = length($x);\n    return reverse($x)\
    \ if $shift > $digits;\n    my $y = $x % (10 ** $shift);\n    return $y . int($x\
    \ / (10 ** $shift));\n}", "    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return scalar reverse $x;\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $len = length($x);\n    return reverse($x) if $shift >\
    \ $len;\n    return substr($x, $len - $shift) . substr($x, 0, $len - $shift);\n\
    }", "    my $digits = length($x);\n    if ($shift >= $digits) {\n        return\
    \ reverse($x);\n    }\n    my $y = $x % (10 ** $shift);\n    my $z = $x / (10\
    \ ** $shift);\n    return $y . $z;\n}", "    my $digits = length($x);\n    if\
    \ ($shift > $digits) {\n        return reverse($x);\n    }\n    my $y = $x % (10\
    \ ** $shift);\n    $y *= 10 ** ($digits - $shift);\n    $y += $x / (10 ** $shift);\n\
    \    return $y;\n}", "    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return scalar reverse $x;\n    }\n    my $right = substr($x, $digits\
    \ - $shift);\n    my $left = substr($x, 0, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $digits = length($x);\n    if ($shift > $digits) {\n \
    \       return scalar reverse $x;\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $digits = length($x);\n    if ($shift > $digits) {\n \
    \       return scalar reverse $x;\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $str = \"$x\";\n    my $len = length($str);\n    if ($shift\
    \ > $len) {\n        return scalar reverse $str;\n    }\n    my $left = substr($str,\
    \ 0, $len - $shift);\n    my $right = substr($str, $len - $shift);\n    return\
    \ $right . $left;\n}", "    my $len = length($x);\n    if ($shift > $len) {\n\
    \        return reverse($x);\n    }\n    my $left = substr($x, 0, $len - $shift);\n\
    \    my $right = substr($x, $len - $shift);\n    return $right . $left;\n}", " \
    \   my $digits = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n\
    \    }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $right\
    \ = substr($x, $digits - $shift, $shift);\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse $x;\n    }\n    my $right\
    \ = substr($x, $digits - $shift);\n    my $left = substr($x, 0, $digits - $shift);\n\
    \    return $right . $left;\n}", "    my $digits = length($x);\n    if ($shift\
    \ >= $digits) {\n        return reverse($x);\n    }\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my $n = length($x);\n    if ($shift > $n) {\n    \
    \    return scalar reverse $x;\n    }\n    return substr($x, $shift, $n - $shift)\
    \ . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return scalar reverse $x;\n    }\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my @digits = split //, $x;\n    my $n = scalar @digits;\n\
    \    if ($shift > $n) {\n        return join '', reverse @digits;\n    }\n   \
    \ else {\n        return join '', @digits[$shift .. $n-1], @digits[0 .. $shift-1];\n\
    \    }\n}", "    my $digits = length($x);\n    if ($shift > $digits) {\n     \
    \   $shift = $digits;\n    }\n    my $shift_digits = substr($x, $digits - $shift,\
    \ $shift);\n    my $remaining_digits = substr($x, 0, $digits - $shift);\n    return\
    \ $shift_digits . $remaining_digits;\n}", "    my $digits = length($x);\n    my\
    \ $result = $x;\n    if ($shift > $digits) {\n        $result = reverse($result);\n\
    \    } else {\n        $result = substr($result, $shift) . substr($result, 0,\
    \ $shift);\n    }\n    return $result;\n}", "    my $digits = length($x);\n  \
    \  if ($shift > $digits) {\n        return reverse $x;\n    }\n    return substr($x,\
    \ $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    if\
    \ ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return scalar reverse $x;\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $digits = length($x);\n    my $result = $x;\n    if ($shift\
    \ > $digits) {\n        $result = reverse($result);\n    } else {\n        $result\
    \ = substr($result, $shift) . substr($result, 0, $shift);\n    }\n    return $result;\n\
    }", "    my $digits = length($x);\n    if ($shift > $digits) {\n        return\
    \ scalar reverse $x;\n    }\n    my $first = substr($x, 0, $digits - $shift);\n\
    \    my $last = substr($x, $digits - $shift);\n    return $last . $first;\n}",
  "    my @digits = split //, $x;\n    my $n = @digits;\n    if ($shift > $n) {\n\
    \        return join '', reverse @digits;\n    }\n    my @shifted = @digits[$shift\
    \ .. $n-1, 0 .. $shift-1];\n    return join '', @shifted;\n}", "    my $digits\
    \ = length($x);\n    return reverse($x) if $shift > $digits;\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my $digits = length($x);\n    my $result = $x;\n \
    \   if ($shift > $digits) {\n        $result = reverse($result);\n    } else {\n\
    \        $result = substr($result, $shift, $digits - $shift) .\n             \
    \     substr($result, 0, $shift);\n    }\n    return $result;\n}", "    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n  \
    \  }\n    my $right = substr($x, $digits - $shift, $shift);\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    my $first = substr($x, 0, $digits\
    \ - $shift);\n    my $last = substr($x, $digits - $shift);\n    return $last .\
    \ $first;\n}", "    my $digits = length($x);\n    if ($shift > $digits) {\n  \
    \      return scalar reverse $x;\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $digits = length($x);\n    if ($shift > $digits) {\n \
    \       return scalar reverse $x;\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $digits = length $x;\n    my $result = $x;\n    if ($shift\
    \ < $digits) {\n        $result = substr($x, $shift) . substr($x, 0, $shift);\n\
    \    } else {\n        $result = reverse $x;\n    }\n    return $result;\n}",
  "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n   \
    \ my $first = substr($x, 0, $digits - $shift);\n    my $last = substr($x, $digits\
    \ - $shift);\n    return $last . $first;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "    my @digits = split(//, $x);\n    my $len\
    \ = scalar @digits;\n    if ($shift > $len) {\n        return join('', reverse\
    \ @digits);\n    }\n    my @shifted = @digits[$shift .. $len-1, 0 .. $shift-1];\n\
    \    return join('', @shifted);\n}", "    my $str = \"$x\";\n    my $len = length($str);\n\
    \    if ($shift > $len) {\n        return reverse($str);\n    }\n    return substr($str,\
    \ $shift, $len - $shift) . substr($str, 0, $shift);\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "    my $digits = length($x);\n    return reverse($x)\
    \ if $shift > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my\
    \ $right = substr($x, $digits - $shift);\n    return $right . $left;\n}", "  \
    \  my $digits = length($x);\n    if ($shift > $digits) {\n        return scalar\
    \ reverse $x;\n    }\n    my $left = substr($x, 0, $digits - $shift);\n    my\
    \ $right = substr($x, $digits - $shift);\n    return $right . $left;\n}", "  \
    \  my $digits = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n\
    \    }\n    my $right = substr($x, 0, $digits - $shift);\n    my $left = substr($x,\
    \ $digits - $shift);\n    return $left . $right;\n}", "    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $digits = length($x);\n    return reverse($x) if $shift\
    \ > $digits;\n    my $shift_digits = substr($x, $digits - $shift);\n    my $remainder\
    \ = substr($x, 0, $digits - $shift);\n    return $shift_digits . $remainder;\n\
    }", "    my $digits = length($x);\n    if ($shift > $digits) {\n        return\
    \ scalar reverse $x;\n    }\n    my $left = substr($x, 0, $digits - $shift);\n\
    \    my $right = substr($x, $digits - $shift);\n    return $right . $left;\n}",
  "    my $digits = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n\
    \    }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "    my $len = length($x);\n\
    \    if ($shift > $len) {\n        return reverse($x);\n    }\n    my $left =\
    \ substr($x, 0, $len - $shift);\n    my $right = substr($x, $len - $shift);\n\
    \    return $right . $left;\n}", "    my $digits = length($x);\n    if ($shift\
    \ >= $digits) {\n        return reverse $x;\n    }\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return scalar reverse $x;\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $digits = length($x);\n    return reverse($x) if $shift\
    \ > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my $right =\
    \ substr($x, $digits - $shift);\n    return $right . $left;\n}", "    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n  \
    \  }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $first\
    \ = substr($x, 0, $digits - $shift);\n    my $last = substr($x, $digits - $shift);\n\
    \    return $last . $first;\n}", "    my $digits = length($x);\n    my $result\
    \ = $x;\n    if ($shift < $digits) {\n        $result = substr($x, $shift) . substr($x,\
    \ 0, $shift);\n    } else {\n        $result = reverse($x);\n    }\n    return\
    \ $result;\n}", "    my $n = length($x);\n    return reverse($x) if $shift > $n;\n\
    \    return substr($x, $n - $shift) . substr($x, 0, $n - $shift);\n}", "    my\
    \ $digits = length($x);\n    my $result = $x;\n    if ($shift < $digits) {\n \
    \       $result = substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n\
    \    }\n    else {\n        $result = reverse($x);\n    }\n    return $result;\n\
    }", "    my $digits = length($x);\n    if ($shift > $digits) {\n        return\
    \ reverse($x);\n    }\n    my $left = substr($x, 0, $digits - $shift);\n    my\
    \ $right = substr($x, $digits - $shift);\n    return $right . $left;\n}", "  \
    \  my $digits = length($x);\n    if ($shift > $digits) {\n        return scalar\
    \ reverse $x;\n    }\n    return substr($x, $shift) . substr($x, 0, $shift);\n\
    }", "    my $digits = length($x);\n    return scalar reverse $x if $shift > $digits;\n\
    \    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $n = length($x);\n    if\
    \ ($shift > $n) {\n        return scalar reverse $x;\n    }\n    else {\n    \
    \    return substr($x, $shift, $n - $shift) . substr($x, 0, $shift);\n    }\n}",
  "    my $len = length($x);\n    return reverse($x) if $shift > $len;\n    return\
    \ substr($x, $len - $shift) . substr($x, 0, $len - $shift);\n}", "    my $n =\
    \ length($x);\n    return reverse($x) if $shift > $n;\n    return substr($x, $n\
    \ - $shift) . substr($x, 0, $n - $shift);\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return reverse($x);\n    }\n    my $prefix = substr($x,\
    \ 0, $digits - $shift);\n    my $suffix = substr($x, $digits - $shift);\n    return\
    \ $suffix . $prefix;\n}", "    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse($x);\n    }\n    my $right = substr($x, $digits -\
    \ $shift, $shift);\n    my $left = substr($x, 0, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my $digits = length($x);\n    my $result = $x;\n \
    \   if ($shift > $digits) {\n        $result = reverse($result);\n    } else {\n\
    \        $result = substr($result, $shift) . substr($result, 0, $shift);\n   \
    \ }\n    return $result;\n}", "    my $digits = length($x);\n    if ($shift >\
    \ $digits) {\n        return scalar reverse $x;\n    }\n    my $right = substr($x,\
    \ $digits - $shift);\n    my $left = substr($x, 0, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse($x);\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $digits = length($x);\n    $shift = $digits if $shift\
    \ > $digits;\n    return reverse(substr(reverse($x), 0, $digits - $shift)) .\n\
    \           substr(reverse($x), $digits - $shift, $shift);\n}", "    my $digits\
    \ = length($x);\n    return reverse($x) if $shift > $digits;\n    return substr($x,\
    \ $shift, $digits - $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return reverse($x);\n    }\n    my $first = substr($x,\
    \ 0, $digits - $shift);\n    my $last = substr($x, $digits - $shift);\n    return\
    \ $last . $first;\n}", "    my $digits = length($x);\n    my $result = $x;\n \
    \   if ($shift > $digits) {\n        $result = reverse($result);\n    } else {\n\
    \        $result = substr($result, $shift) . substr($result, 0, $shift);\n   \
    \ }\n    return $result;\n}", "    my $digits = length($x);\n    return reverse($x)\
    \ if $shift > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my\
    \ $right = substr($x, $digits - $shift);\n    return $right . $left;\n}", "  \
    \  my $n = length($x);\n    return reverse($x) if $shift > $n;\n    my $y = $x\
    \ % 10**$shift;\n    return $y . ($x - $y) / 10**$shift;\n}", "    my $digits\
    \ = length($x);\n    my $result = $x;\n    if ($shift < $digits) {\n        $result\
    \ = substr($x, $shift) . substr($x, 0, $shift);\n    }\n    else {\n        $result\
    \ = reverse($x);\n    }\n    return $result;\n}", "    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $digits = length($x);\n    if ($shift > $digits) {\n \
    \       return reverse($x);\n    }\n    my $left = substr($x, 0, $digits - $shift);\n\
    \    my $right = substr($x, $digits - $shift);\n    return $right . $left;\n}",
  "    my $digits = length($x);\n    return scalar reverse $x if $shift > $digits;\n\
    \    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    my $result = $x;\n    if ($shift > $digits) {\n        $result = reverse($result);\n\
    \    } else {\n        $result = substr($result, $shift) . substr($result, 0,\
    \ $shift);\n    }\n    return $result;\n}", "    my $len = length($x);\n    return\
    \ reverse($x) if $shift > $len;\n    my $left = substr($x, 0, $len - $shift);\n\
    \    my $right = substr($x, $len - $shift);\n    return $right . $left;\n}", " \
    \   my $digits = length($x);\n    if ($shift > $digits) {\n        $shift = $digits;\n\
    \    }\n    my $right = substr($x, $digits - $shift, $shift);\n    my $left =\
    \ substr($x, 0, $digits - $shift);\n    return $right . $left;\n}", "    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return scalar reverse $x;\n\
    \    }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    $shift %= $digits;\n    return reverse($x) if $shift == 0;\n    return substr($x,\
    \ $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    if\
    \ ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "    my $digits = length($x);\n    my $result\
    \ = $x;\n    if ($shift > $digits) {\n        $result = reverse($result);\n  \
    \  } else {\n        $result = substr($result, $shift) . substr($result, 0, $shift);\n\
    \    }\n    return $result;\n}", "    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return reverse($x);\n    }\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse($x);\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $digits = length($x);\n    return reverse($x) if $shift\
    \ > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my $right =\
    \ substr($x, $digits - $shift);\n    return $right . $left;\n}", "    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        $shift = $digits;\n    }\n\
    \    my $right = substr($x, 0, $digits - $shift);\n    my $left = substr($x, $digits\
    \ - $shift);\n    return $left . $right;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return scalar reverse $x;\n    }\n    my $first = substr($x,\
    \ 0, $digits - $shift);\n    my $last = substr($x, $digits - $shift);\n    return\
    \ $last . $first;\n}", "    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return scalar reverse $x;\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $digits = length($x);\n    if ($shift >= $digits) {\n\
    \        return reverse($x);\n    }\n    my $left = substr($x, 0, $digits - $shift);\n\
    \    my $right = substr($x, $digits - $shift);\n    return $right . $left;\n}",
  "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n   \
    \ my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $first = substr($x, 0, $digits - $shift);\n    my $last = substr($x, $digits\
    \ - $shift);\n    return $last . $first;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    return substr($x,\
    \ $shift, $digits - $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $first\
    \ = substr($x, 0, $digits - $shift);\n    my $last = substr($x, $digits - $shift);\n\
    \    return $last . $first;\n}", "    my $digits = length($x);\n    $shift %=\
    \ $digits;\n    return reverse($x) if $shift > $digits;\n    return substr($x,\
    \ $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    if\
    \ ($shift >= $digits) {\n        return scalar reverse $x;\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "    my $digits = length($x);\n    if ($shift\
    \ >= $digits) {\n        return reverse($x);\n    }\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my $digits = length($x);\n    return reverse($x) if\
    \ $shift > $digits;\n    return substr($x, $shift, $digits - $shift) . substr($x,\
    \ 0, $shift);\n}", "    my $digits = length($x);\n    if ($shift > $digits) {\n\
    \        return scalar reverse $x;\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $digits = length($x);\n    return reverse($x) if $shift\
    \ > $digits;\n    my $first = substr($x, 0, $digits - $shift);\n    my $last =\
    \ substr($x, $digits - $shift);\n    return $last . $first;\n}", "    my $len\
    \ = length($x);\n    return $x if $shift == $len;\n    return reverse($x) if $shift\
    \ > $len;\n    my $left = substr($x, 0, $len - $shift);\n    my $right = substr($x,\
    \ $len - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return scalar reverse $x;\n    }\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my $digits = length($x);\n    if ($shift >= $digits)\
    \ {\n        return scalar reverse $x;\n    }\n    my $right = substr($x, $shift);\n\
    \    my $left = substr($x, 0, $shift);\n    return $right . $left;\n}", "    my\
    \ $digits = length($x);\n    if ($shift > $digits) {\n        return scalar reverse\
    \ $x;\n    }\n    return substr($x, $shift, $digits-$shift) . substr($x, 0, $shift);\n\
    }", "    my $digits = length($x);\n    if ($shift > $digits) {\n        return\
    \ scalar reverse $x;\n    }\n    my $right = substr($x, $digits - $shift);\n \
    \   my $left = substr($x, 0, $digits - $shift);\n    return $right . $left;\n}",
  "    my $digits = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n\
    \    }\n    return substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n\
    }", "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n\
    \    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "    my $digits = length($x);\n    return reverse($x)\
    \ if $shift > $digits;\n    return substr($x, $shift, $digits - $shift) . substr($x,\
    \ 0, $shift);\n}", "    my $digits = length($x);\n    if ($shift > $digits) {\n\
    \        return scalar reverse $x;\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $digits = length($x);\n    if ($shift > $digits) {\n \
    \       return scalar reverse $x;\n    }\n    my $first = substr($x, 0, $digits\
    \ - $shift);\n    my $last = substr($x, $digits - $shift);\n    return $last .\
    \ $first;\n}", "    my $digits = length($x);\n    if ($shift > $digits) {\n  \
    \      return reverse($x);\n    }\n    my $left = substr($x, 0, $digits - $shift);\n\
    \    my $right = substr($x, $digits - $shift);\n    return $right . $left;\n}",
  "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n   \
    \ my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return reverse($x);\n    }\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my $digits = length($x);\n    return scalar reverse\
    \ $x if $shift > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n \
    \   my $right = substr($x, $digits - $shift);\n    return $right . $left;\n}",
  "    my $digits = length($x);\n    my $result = $x;\n    if ($shift > $digits) {\n\
    \        $result = reverse($result);\n    } else {\n        $result = substr($result,\
    \ $shift) . substr($result, 0, $shift);\n    }\n    return $result;\n}", "   \
    \ my $digits = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n\
    \    }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift >= $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $first = substr($x, 0, $digits - $shift);\n    my $last = substr($x, $digits\
    \ - $shift);\n    return $last . $first;\n}", "    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $digits = length($x);\n    return reverse($x) if $shift\
    \ > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my $right =\
    \ substr($x, $digits - $shift);\n    return $right . $left;\n}", "    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n  \
    \  }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    return\
    \ substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n}", "    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n  \
    \  }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    $shift %= $digits;\n    return reverse($x) if $shift == 0;\n    return substr($x,\
    \ $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    if\
    \ ($shift > $digits) {\n        return reverse($x);\n    }\n    my $first = substr($x,\
    \ 0, $digits - $shift);\n    my $last = substr($x, $digits - $shift);\n    return\
    \ $last . $first;\n}", "    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse($x);\n    }\n    my $y = $x % 10**$shift;\n    my\
    \ $z = int($x / 10**$shift);\n    return $y . $z;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift >= $digits) {\n        return scalar reverse $x;\n    }\n    return\
    \ substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n}", "    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n  \
    \  }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    return substr($x,\
    \ $shift, $digits - $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $y =\
    \ $x % (10 ** $shift);\n    my $z = $x / (10 ** $shift);\n    return $y . $z;\n\
    }", "    my $digits = length($x);\n    if ($shift > $digits) {\n        return\
    \ scalar reverse $x;\n    }\n    return substr($x, $shift, $digits-$shift) . substr($x,\
    \ 0, $shift);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
