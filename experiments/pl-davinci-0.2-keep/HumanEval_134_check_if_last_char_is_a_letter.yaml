completions:
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\w\s$/ ? 1 : 0;

  }'
- '    return $txt =~ /\S\s$/;

  }'
- '    return $txt =~ /\w\s$/ ? 0 : 1;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- "    return 0 if $txt eq '';\n    my @words = split(/\\s+/, $txt);\n    my $last_word\
  \ = $words[-1];\n    my $last_char = substr($last_word, -1);\n    return $last_char\
  \ =~ /[a-zA-Z]/;\n}"
- '    return $txt =~ /\w\s$/ ? 0 : 1;

  }'
- '    return $txt =~ /[a-zA-Z]\s*$/ ? 1 : 0;

  }'
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /[a-zA-Z]/ && $last_char\
  \ !~ /\\w/;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /[a-zA-Z]/ && $last_char\
  \ !~ /\\w/;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /[a-z]\s$/i;

  }'
- "    return 0 if $txt eq '';\n    my @words = split(/\\s+/, $txt);\n    my $last_word\
  \ = $words[-1];\n    my $last_char = substr($last_word, -1);\n    return $last_char\
  \ =~ /[a-zA-Z]/;\n}"
- "    my @arr = split(' ', $txt);\n    my $last = $arr[-1];\n    my $last_char =\
  \ substr($last, -1);\n    if ($last_char =~ /[a-zA-Z]/ && $last_char !~ /[a-zA-Z]\\\
  w+/) {\n        return 1;\n    }\n    return 0;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\S\s$/;

  }'
- "    return 0 if $txt eq \"\";\n    my @chars = split(\"\", $txt);\n    my $last_char\
  \ = $chars[-1];\n    my $last_char_is_letter = $last_char =~ /[a-zA-Z]/;\n    my\
  \ $last_char_is_part_of_word = $txt =~ /\\b$last_char\\b/;\n    return $last_char_is_letter\
  \ && !$last_char_is_part_of_word;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\w\s$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- "    my $last = substr($txt, -1);\n    return $last =~ /\\w/ && $last !~ /\\s/;\n\
  }"
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\w\s$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /[a-zA-Z]/ && $last_char\
  \ !~ /\\s/;\n}"
- "    my $last_char = substr($txt, -1);\n    if ($last_char =~ /\\w/ && $last_char\
  \ !~ /\\s/) {\n        return 1;\n    }\n    return 0;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /[a-zA-Z]/ && $last_char\
  \ !~ /\\w/;\n}"
- '    return $txt =~ /\S\s$/;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /[a-zA-Z]/ && $last_char\
  \ !~ /\\w/;\n}"
- '    return $txt =~ /\S\s$/;

  }'
- '    return $txt =~ /\w\s$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /[a-zA-Z]/ && $last_char\
  \ !~ /\\w/;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /[a-zA-Z]/ && $last_char\
  \ !~ /\\w/;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- "    my $last = substr($txt, -1);\n    return $last =~ /[a-z]/i && $last !~ /\\\
  w/;\n}"
- '    return $txt =~ /\s[a-z]$/i;

  }'
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /[a-zA-Z]/ && $last_char\
  \ !~ /\\w/;\n}"
- '    return $txt =~ /\w\s$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- "    return 0 if $txt eq '';\n    my @chars = split //, $txt;\n    my $last_char\
  \ = $chars[-1];\n    return 1 if $last_char =~ /[a-zA-Z]/ && $last_char !~ /\\s/;\n\
  \    return 0;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\w\s$/ ? 1 : 0;

  }'
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /[a-zA-Z]/ && $last_char\
  \ !~ /\\w/;\n}"
- "    my @words = split(' ', $txt);\n    my $last_word = $words[-1];\n    my $last_char\
  \ = substr($last_word, -1);\n    return $last_char =~ /[a-zA-Z]/ && $last_char !~\
  \ /[a-zA-Z]/;\n}"
- "    my $last = substr($txt, -1);\n    return $last =~ /[a-z]/i && $last !~ /\\\
  w/;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- "    my $last_char = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/ && $last_char\
  \ !~ /\\w/) {\n        return 1;\n    }\n    return 0;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\w\s$/ ? 0 : 1;

  }'
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /[a-zA-Z]/ && $last_char\
  \ !~ /\\w/;\n}"
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /\\w/ && $last_char\
  \ !~ /\\s/;\n}"
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /\\w/ && $last_char\
  \ !~ /\\s/;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s\w$/ ? 1 : 0;

  }'
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /\\w/ && $last_char\
  \ !~ /\\s/;\n}"
- "    return 0 if $txt eq '';\n    my @chars = split //, $txt;\n    my $last_char\
  \ = $chars[-1];\n    return 1 if $last_char =~ /[a-zA-Z]/ && $last_char !~ /\\s/;\n\
  \    return 0;\n}"
- '    return $txt =~ /\w\s\z/ ? 1 : 0;

  }'
- "    $txt =~ s/\\s+$//;\n    return $txt =~ /[a-zA-Z]$/;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- "    $txt =~ s/\\s+$//;\n    return $txt =~ /\\w$/ ? 0 : 1;\n}"
- '    return $txt =~ /\s\w$/;

  }'
- '    return $txt =~ /\w\s$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- "    my $last_char = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/ && $last_char\
  \ !~ /\\s/) {\n        return 1;\n    }\n    return 0;\n}"
- "    return 0 if $txt eq '';\n    my @arr = split(/ /, $txt);\n    my $last = pop\
  \ @arr;\n    return 0 if $last eq '';\n    return 1 if $last =~ /^[a-zA-Z]$/;\n\
  \    return 0;\n}"
- "    my $last = substr($txt, -1);\n    return $last =~ /[a-z]/i && $last !~ /\\\
  w/;\n}"
- '    return $txt =~ /\s[a-z]$/i;

  }'
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /[a-zA-Z]/ && $last_char\
  \ !~ /\\w/;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\s\w$/ ? 1 : 0;

  }'
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /^[a-zA-Z]$/ &&\
  \ $last_char !~ /\\w/;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s\w$/ ? 1 : 0;

  }'
- '    return $txt =~ /\w\s$/ ? 1 : 0;

  }'
- "    return 0 if $txt eq \"\";\n    my @chars = split(\"\", $txt);\n    my $last_char\
  \ = $chars[-1];\n    return 1 if $last_char =~ /[a-zA-Z]/ && $last_char !~ /\\s/;\n\
  \    return 0;\n}"
- '    return $txt =~ /\s[a-z]$/i;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\s\w$/;

  }'
- '    return $txt =~ /\s\w$/;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\w$/ ? 0 : 1;

  }'
- "    my @chars = split(//, $txt);\n    my $last_char = $chars[-1];\n    return $last_char\
  \ =~ /[a-zA-Z]/ && $last_char !~ /\\s/;\n}"
- '    return $txt =~ /\S\s$/;

  }'
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /[a-zA-Z]/ && $last_char\
  \ !~ /\\w/;\n}"
- '    return $txt =~ /\w\s$/;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\w\s$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\s\w$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-z]$/i;

  }'
- "    my @words = split(/ /, $txt);\n    my $last_word = $words[-1];\n    return\
  \ $last_word =~ /^[a-zA-Z]$/;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return ($txt =~ /\w\s$/);

  }'
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /^[a-zA-Z]$/ &&\
  \ $txt !~ /\\b$last_char\\b/;\n}"
- '    return $txt =~ /\w\s$/ ? 1 : 0;

  }'
- "    my @chars = split(//, $txt);\n    my $last_char = $chars[-1];\n    return $last_char\
  \ =~ /[a-zA-Z]/ && $last_char !~ /\\s/;\n}"
- '    return $txt =~ /\s\w$/;

  }'
- "    return 0 if $txt eq \"\";\n    my @words = split / /, $txt;\n    my $last_word\
  \ = pop @words;\n    return 0 if length($last_word) == 1;\n    return 1 if $last_word\
  \ =~ /\\w\\s/;\n    return 0;\n}"
- "    return 0 if $txt eq \"\";\n    my @chars = split //, $txt;\n    my $last_char\
  \ = $chars[-1];\n    return 1 if $last_char =~ /[a-zA-Z]/ and $last_char !~ /[a-zA-Z]\\\
  s/;\n    return 0;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\w\s$/;

  }'
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /^[a-zA-Z]$/ &&\
  \ $last_char !~ /\\w/;\n}"
- '    return $txt =~ /\s[a-z]$/i;

  }'
- '    return $txt =~ /\b\w$/ ? 0 : 1;

  }'
- '    return $txt =~ /\w$/ ? 0 : 1;

  }'
- '    return $txt =~ /\w\s$/ ? 0 : 1;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\w\s$/ ? 0 : 1;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s\w$/;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /[a-zA-Z]/ && $last_char\
  \ !~ /\\w/;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\s[a-z]$/i;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\s[a-z]$/i;

  }'
- '    return $txt =~ /\w\s$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /[a-zA-Z]/ && $last_char\
  \ !~ /\\w/;\n}"
- '    return $txt =~ /\s\w$/;

  }'
- '    return $txt =~ /\S\s$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-z]$/i;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- "    my @words = split(/\\s+/, $txt);\n    my $last_word = pop @words;\n    return\
  \ $last_word =~ /^[a-zA-Z]$/;\n}"
- "    return 0 if $txt eq '';\n    my @chars = split(//, $txt);\n    my $last_char\
  \ = $chars[-1];\n    if ($last_char =~ /[a-zA-Z]/ && $last_char !~ /\\s/) {\n  \
  \      return 1;\n    }\n    return 0;\n}"
- "    my $last_char = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/ && $last_char\
  \ !~ /\\w/) {\n        return 1;\n    }\n    return 0;\n}"
- "    return 0 if $txt eq '';\n    my @words = split(' ', $txt);\n    my $last_word\
  \ = $words[-1];\n    my $last_char = substr($last_word, -1);\n    return $last_char\
  \ =~ /[a-zA-Z]/ ? 1 : 0;\n}"
- '    return $txt =~ /\b\w$/ ? 0 : 1;

  }'
- '    return $txt =~ /\s[a-z]$/i;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-z]$/i;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- "    my $last_char = substr $txt, -1;\n    return $last_char =~ /[a-zA-Z]/ && $last_char\
  \ !~ /\\w/;\n}"
- '    return $txt =~ /\w\s$/ ? 1 : 0;

  }'
- "    my @words = split(/\\s+/, $txt);\n    my $last_word = $words[-1];\n    my $last_char\
  \ = substr($last_word, -1);\n    return $last_char =~ /[a-zA-Z]/ && $last_char !~\
  \ /\\w/;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- "    if ($txt =~ /\\w$/) {\n        return 0;\n    }\n    return 1;\n}"
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /[a-zA-Z]/ && $last_char\
  \ !~ /\\w/;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /[a-zA-Z]/ && $last_char\
  \ !~ /\\w/;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\s[a-z]$/i;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- "    $txt =~ s/\\s+$//;\n    return $txt =~ /[a-zA-Z]$/;\n}"
- '    return $txt =~ /\s[a-z]$/i;

  }'
- '    return $txt =~ /\w\s$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- "    return 0 if $txt eq \"\";\n    my @chars = split(//, $txt);\n    my $last_char\
  \ = $chars[-1];\n    return $last_char =~ /[a-zA-Z]/ && $last_char !~ /\\s/;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\S\s$/;

  }'
- '    return $txt =~ /\s[a-z]$/i;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- "    my @words = split(/\\s+/, $txt);\n    my $last_word = $words[-1];\n    return\
  \ $last_word =~ /^[a-zA-Z]$/;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\w\s$/ ? 1 : 0;

  }'
- "    my $last_char = substr($txt, -1);\n    if (length($txt) == 0) {\n        return\
  \ 0;\n    }\n    elsif ($last_char =~ /\\w/) {\n        return 0;\n    }\n    else\
  \ {\n        return 1;\n    }\n}"
- '    return $txt =~ /\w\s$/ ? 1 : 0;

  }'
- '    return $txt =~ /\b\w$/ ? 0 : 1;

  }'
- "    my $last_char = substr($txt, -1);\n    return $last_char =~ /\\w/ && $last_char\
  \ !~ /\\s/;\n}"
- '    return $txt =~ /\s[a-zA-Z]$/ ? 1 : 0;

  }'
- '    return $txt =~ /\s[a-zA-Z]$/;

  }'
- '    return $txt =~ /\w\s$/;

  }'
- '    return $txt =~ /\w\s$/ ? 1 : 0;

  }'
- '    return $txt =~ /\w\s$/ ? 1 : 0;

  }'
- '    return $txt =~ /\w\s$/ ? 1 : 0;

  }'
language: pl
name: HumanEval_134_check_if_last_char_is_a_letter
prompt: "# Create a function that returns True if the last character\n# of a given\
  \ string is an alphabetical character and is not\n# a part of a word, and False\
  \ otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n\
  # check_if_last_char_is_a_letter(\"apple pie\") \u279E False\n# check_if_last_char_is_a_letter(\"\
  apple pi e\") \u279E True\n# check_if_last_char_is_a_letter(\"apple pi e \") \u279E\
  \ False\n# check_if_last_char_is_a_letter(\"\") \u279E False\nsub check_if_last_char_is_a_letter\
  \ {\n    my($txt) = @_;\n"
stop_tokens:
- '

  sub'
- '

  #'
- '


  '
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_if_last_char_is_a_letter;\n\
  \        if(eq_deeply($candidate->(\"apple\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pi e\"),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  eeeee\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"A\"),1)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pumpkin pie \"),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Pumpkin pie 1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee e \"),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  apple pie\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"apple pi e \"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
