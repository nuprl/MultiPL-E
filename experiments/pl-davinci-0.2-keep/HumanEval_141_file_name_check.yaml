name: HumanEval_141_file_name_check
language: humaneval_to_perl.py
prompt: "# Create a function which takes a string representing a file's name, and\
  \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  # A file's name is considered to be valid if and only if all the following conditions\
  \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n# the latin\
  \ alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one\
  \ of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
  ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
  \ with a latin alphapet letter)\nsub file_name_check {\n    my($file_name) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&file_name_check;\n\
  \        if(eq_deeply($candidate->(\"example.txt\"),\"Yes\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1example.dll\"\
  ),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"s1sdf3.asd\"),\"No\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"K.dll\"),\"Yes\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  MY16FILE3.exe\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->(\"His12FILE94.exe\"),\"No\")) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  _Y.txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"?aREYA.exe\"),\"No\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"/this_is_valid.dll\"\
  ),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"this_is_valid.wow\"),\"No\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"this_is_valid.txt\"\
  ),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(\"this_is_valid.txtexe\"),\"No\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  #this2_i4s_5valid.ten\"),\"No\")) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"@this1_is6_valid.exe\"),\"\
  No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  this_is_12valid.6exe4.txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"all.exe.txt\"),\"No\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  I563_No.exe\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->(\"Is3youfault.txt\"),\"Yes\")) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  no_one#knows.dll\"),\"Yes\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"1I563_Yes3.exe\"),\"No\")) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  I563_Yes3.txtt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->(\"final..txt\"),\"No\")) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  final132\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"_f4indsartal132.\"),\"No\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  .txt\"),\"No\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
  \       if(eq_deeply($candidate->(\"s.\"),\"No\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w+$/)\
    \ {\n        my @parts = split(/\\./, $file_name);\n        if ($parts[0] =~ /\\\
    d{4}/) {\n            $result = 'No';\n        } else {\n            if ($parts[1]\
    \ eq 'txt' || $parts[1] eq 'exe' || $parts[1] eq 'dll') {\n                $result\
    \ = 'Yes';\n            }\n        }\n    }\n    return $result;\n}", "    my\
    \ $result = 'No';\n    my $dot_count = () = $file_name =~ /\\./g;\n    my $digit_count\
    \ = () = $file_name =~ /[0-9]/g;\n    my @parts = split(/\\./, $file_name);\n\
    \    if ($dot_count == 1 && $digit_count <= 3 && $parts[0] =~ /^[a-zA-Z]/ && $parts[1]\
    \ =~ /^(txt|exe|dll)$/) {\n        $result = 'Yes';\n    }\n    return $result;\n\
    }", "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w+$/) {\n\
    \        my @parts = split(/\\./, $file_name);\n        if ($parts[0] =~ /\\d{1,3}/)\
    \ {\n            $result = 'No';\n        }\n        elsif ($parts[1] =~ /^(txt|exe|dll)$/)\
    \ {\n            $result = 'Yes';\n        }\n    }\n    return $result;\n}",
  "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w{3}$/) {\n  \
    \      my @parts = split(/\\./, $file_name);\n        if ($parts[0] =~ /\\d{1,3}/)\
    \ {\n            $result = 'No';\n        }\n        else {\n            if ($parts[1]\
    \ eq 'txt' || $parts[1] eq 'exe' || $parts[1] eq 'dll') {\n                $result\
    \ = 'Yes';\n            }\n        }\n    }\n    return $result;\n}", "    my\
    \ $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/)\
    \ {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result\
    \ = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n\
    \        $result = 'Yes';\n    }\n    return $result;\n}", "    # Write your code\
    \ here\n}", "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\\
    .(txt|exe|dll)$/) {\n        $result = 'Yes';\n    }\n    return $result;\n}",
  "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/)\
    \ {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result\
    \ = 'No';\n    my @parts = split /\\./, $file_name;\n    if (scalar @parts ==\
    \ 2) {\n        my $first_part = $parts[0];\n        my $second_part = $parts[1];\n\
    \        if ($first_part =~ /^[a-zA-Z]/ && $first_part =~ /\\d{1,3}$/ && $second_part\
    \ =~ /^(txt|exe|dll)$/) {\n            $result = 'Yes';\n        }\n    }\n  \
    \  return $result;\n}", "    my $result = 'No';\n    my $count = 0;\n    my $dot_count\
    \ = 0;\n    my $dot_index = 0;\n    my $extension = '';\n    my $valid_extensions\
    \ = ['txt', 'exe', 'dll'];\n    my $valid_extensions_count = scalar @$valid_extensions;\n\
    \    my $valid_extensions_index = 0;\n    my $valid_extension = 0;\n    my $valid_extension_count\
    \ = 0;\n    my $valid_extension_index = 0;\n    my $valid_extension_found = 0;\n\
    \    my $valid_extension_found_count = 0;\n    my $valid_extension_found_index\
    \ = 0;\n    my $valid_extension_found_found = 0;\n    my $valid_extension_found_found_count\
    \ = 0;\n    my $valid_extension_found_found_index = 0;\n    my $valid_extension_found_found_found\
    \ = 0;\n    my $valid_extension_found_found_found_count = 0;\n    my $valid_extension_found_found_found_index\
    \ = 0;\n    my $valid_extension_found_found_found_found = 0;\n    my $valid_extension_found_found_found_found_count\
    \ = 0;\n    my $valid_extension_found_found_found_found_index = 0;\n    my $valid_extension_found_found_found_found_found\
    \ = 0;\n    my $valid_extension_found_found_found_found_found_count = 0;\n   \
    \ my $valid_extension_found_found_found_found_found_index = 0;\n    my $valid_extension_found_found_found_found_found_found\
    \ = 0;\n    my $valid_extension_found_found_found_found_found_found_count = 0;\n\
    \    my $valid_extension_found_found_found_found_found_found_index = 0;\n    my\
    \ $valid_extension_found_found_found_found_found_found_found = 0;\n    my $",
  "    my $result = 'No';\n    my $count = 0;\n    my $dot_count = 0;\n    my $extension\
    \ = '';\n    my $name = '';\n    my $extension_valid = 0;\n    my $name_valid\
    \ = 0;\n    my $count_valid = 0;\n    my $dot_count_valid = 0;\n    my $valid_extensions\
    \ = ['txt', 'exe', 'dll'];\n    my $valid_chars = ['a'..'z', 'A'..'Z', '0'..'9'];\n\
    \    my $valid_chars_string = join('', @$valid_chars);\n    my $valid_extensions_string\
    \ = join('', @$valid_extensions);\n    my $valid_extensions_regex = qr/^($valid_extensions_string)$/;\n\
    \    my $valid_chars_regex = qr/^[$valid_chars_string]+$/;\n    my $valid_name_regex\
    \ = qr/^[a-zA-Z]+[$valid_chars_string]*$/;\n    my $valid_extension_regex = qr/^[$valid_chars_string]+\\\
    .($valid_extensions_string)$/;\n    my $valid_file_name_regex = qr/^[a-zA-Z]+[$valid_chars_string]*\\\
    .($valid_extensions_string)$/;\n    if ($file_name =~ $valid_file_name_regex)\
    \ {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result\
    \ = 'No';\n    my $count = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n\
    \    my $substring_after_dot = '';\n    my $substring_before_dot = '';\n    my\
    \ $substring_before_dot_first_char = '';\n    my $substring_before_dot_first_char_ascii\
    \ = 0;\n    my $substring_before_dot_first_char_is_valid = 0;\n    my $substring_before_dot_is_valid\
    \ = 0;\n    my $substring_after_dot_is_valid = 0;\n    my $substring_before_dot_length\
    \ = 0;\n    my $substring_after_dot_length = 0;\n    my $substring_before_dot_length_is_valid\
    \ = 0;\n    my $substring_after_dot_length_is_valid = 0;\n    my $substring_before_dot_contains_digit\
    \ = 0;\n    my $substring_before_dot_contains_digit_is_valid = 0;\n    my $substring_after_dot_contains_digit\
    \ = 0;\n    my $substring_after_dot_contains_digit_is_valid = 0;\n    my $substring_before_dot_contains_dot\
    \ = 0;\n    my $substring_before_dot_contains_dot_is_valid = 0;\n    my $substring_after_dot_contains_dot\
    \ = 0;\n    my $substring_after_dot_contains_dot_is_valid = 0;\n    my $substring_before_dot_contains_space\
    \ = 0;\n    my $substring_before_dot_contains_space_is_valid = 0;\n    my $substring_after_dot_contains_space\
    \ = 0;\n    my $substring_after_dot_contains_space_is_valid = 0;\n    my $substring_before_dot_contains_special_char\
    \ = 0;\n    my $substring_before_dot_contains_special_char_is_valid = 0;\n   \
    \ my $", "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w+$/)\
    \ {\n        my @parts = split(/\\./, $file_name);\n        my $ext = $parts[1];\n\
    \        if ($ext eq 'txt' || $ext eq 'exe' || $ext eq 'dll') {\n            my\
    \ $num_digits = $parts[0] =~ tr/0-9//;\n            if ($num_digits <= 3) {\n\
    \                $result = 'Yes';\n            }\n        }\n    }\n    return\
    \ $result;\n}", "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\\
    .(txt|exe|dll)$/) {\n        $result = 'Yes';\n    }\n    return $result;\n}",
  "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.(txt|exe|dll)$/)\
    \ {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result\
    \ = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w{3}$/) {\n        my $before_dot\
    \ = $`;\n        my $after_dot = $';\n        if ($before_dot =~ /\\d/g) {\n \
    \           my $count = () = $before_dot =~ /\\d/g;\n            if ($count <=\
    \ 3) {\n                if ($after_dot eq 'txt' || $after_dot eq 'exe' || $after_dot\
    \ eq 'dll') {\n                    $result = 'Yes';\n                }\n     \
    \       }\n        }\n    }\n    return $result;\n}", "    my $result = 'No';\n\
    \    my $dot_count = () = $file_name =~ /\\./g;\n    my $digit_count = () = $file_name\
    \ =~ /[0-9]/g;\n    my $file_name_without_extension = $file_name;\n    $file_name_without_extension\
    \ =~ s/\\.[^.]+$//;\n    if ($dot_count == 1 && $digit_count <= 3 && $file_name_without_extension\
    \ =~ /^[a-zA-Z]/) {\n        my $extension = $file_name;\n        $extension =~\
    \ s/^.*\\.//;\n        if ($extension eq 'txt' || $extension eq 'exe' || $extension\
    \ eq 'dll') {\n            $result = 'Yes';\n        }\n    }\n    return $result;\n\
    }", "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w{3}$/)\
    \ {\n        my $count = 0;\n        while ($file_name =~ /\\d/g) {\n        \
    \    $count++;\n        }\n        if ($count <= 3) {\n            $result = 'Yes';\n\
    \        }\n    }\n    return $result;\n}", "    my $result = 'No';\n    my $count\
    \ = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n    my $substring_after_dot\
    \ = '';\n    my $substring_before_dot = '';\n    my $substring_before_dot_length\
    \ = 0;\n    my $substring_before_dot_first_char = '';\n    my $substring_before_dot_first_char_ascii\
    \ = 0;\n    my $substring_before_dot_first_char_ascii_lower_bound = 0;\n    my\
    \ $substring_before_dot_first_char_ascii_upper_bound = 0;\n    my $substring_before_dot_first_char_is_valid\
    \ = 0;\n    my $substring_after_dot_is_valid = 0;\n    my $i = 0;\n    my $file_name_length\
    \ = length($file_name);\n    for ($i = 0; $i < $file_name_length; $i++) {\n  \
    \      my $char = substr($file_name, $i, 1);\n        if ($char eq '.') {\n  \
    \          $dot_count++;\n            $dot_index = $i;\n        }\n        if\
    \ ($char =~ /[0-9]/) {\n            $count++;\n        }\n    }\n    if ($dot_count\
    \ == 1 && $count <= 3) {\n        $substring_after_dot = substr($file_name, $dot_index\
    \ + 1);\n        $substring_before_dot = substr($file_name, 0, $dot_index);\n\
    \        $substring_before_dot_length = length($substring_before_dot);\n     \
    \   if ($substring_before_dot_length > 0) {\n            $substring_before_dot_first_char\
    \ = substr($substring_before_dot, 0, 1);\n            $substring_before_dot_first_char_ascii\
    \ = ord($substring_before_dot_first_char);\n            $substring_before_dot_first_char_ascii_lower_bound\
    \ = ord('a');\n            $substring_", "    # TODO: implement this function\n\
    \    my $count = 0;\n    my $dot = 0;\n    my $extension = 0;\n    my $valid =\
    \ 0;\n    my $first_letter = 0;\n    my $last_letter = 0;\n    my $first_letter_valid\
    \ = 0;\n    my $last_letter_valid = 0;\n    my $first_letter_valid_2 = 0;\n  \
    \  my $last_letter_valid_2 = 0;\n    my $first_letter_valid_3 = 0;\n    my $last_letter_valid_3\
    \ = 0;\n    my $first_letter_valid_4 = 0;\n    my $last_letter_valid_4 = 0;\n\
    \    my $first_letter_valid_5 = 0;\n    my $last_letter_valid_5 = 0;\n    my $first_letter_valid_6\
    \ = 0;\n    my $last_letter_valid_6 = 0;\n    my $first_letter_valid_7 = 0;\n\
    \    my $last_letter_valid_7 = 0;\n    my $first_letter_valid_8 = 0;\n    my $last_letter_valid_8\
    \ = 0;\n    my $first_letter_valid_9 = 0;\n    my $last_letter_valid_9 = 0;\n\
    \    my $first_letter_valid_10 = 0;\n    my $last_letter_valid_10 = 0;\n    my\
    \ $first_letter_valid_11 = 0;\n    my $last_letter_valid_11 = 0;\n    my $first_letter_valid_12\
    \ = 0;\n    my $last_letter_valid_12 = 0;\n    my $first_letter_valid_13 = 0;\n\
    \    my $last_letter_valid_13 = 0;\n    my $first_letter_valid_14 = 0;\n    my\
    \ $last_letter_valid_14 = 0;\n    my $first_letter_valid_15 = 0;\n    my $last_letter_valid_15\
    \ = 0;\n    my $first_letter_valid_16 = 0;\n    my $last_letter_valid_16 = 0;\n\
    \    my $first_", "    my $result = 'No';\n    my $dot_count = () = $file_name\
    \ =~ /\\./g;\n    my $digit_count = () = $file_name =~ /[0-9]/g;\n    if ($dot_count\
    \ == 1 && $digit_count <= 3) {\n        my ($before_dot, $after_dot) = split(/\\\
    ./, $file_name);\n        if ($before_dot =~ /^[a-zA-Z]/ && $after_dot =~ /^(txt|exe|dll)$/)\
    \ {\n            $result = 'Yes';\n        }\n    }\n    return $result;\n}",
  "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w{3}$/) {\n  \
    \      my $before_dot = $`;\n        my $after_dot = $';\n        if ($before_dot\
    \ =~ /\\d/ && $before_dot =~ /\\d{4}/) {\n            $result = 'No';\n      \
    \  }\n        elsif ($after_dot =~ /txt|exe|dll/) {\n            $result = 'Yes';\n\
    \        }\n    }\n    return $result;\n}", "    my $result = 'No';\n    if($file_name\
    \ =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/){\n        $result = 'Yes';\n  \
    \  }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name =~\
    \ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result = 'Yes';\n    }\n\
    \    return $result;\n}", "    my $result = 'No';\n    my $count = 0;\n    my\
    \ $dot_count = 0;\n    my $dot_index = 0;\n    my $extension = '';\n    my $substring\
    \ = '';\n    my $substring_count = 0;\n    my $substring_index = 0;\n    my $substring_length\
    \ = 0;\n    my $substring_start = 0;\n    my $substring_end = 0;\n    my $substring_valid\
    \ = 0;\n    my $extension_valid = 0;\n    my $valid_extensions = ['txt', 'exe',\
    \ 'dll'];\n    my $valid_extensions_count = scalar @$valid_extensions;\n    my\
    \ $valid_extensions_index = 0;\n    my $valid_extensions_length = 0;\n    my $valid_extensions_start\
    \ = 0;\n    my $valid_extensions_end = 0;\n    my $valid_extensions_substring\
    \ = '';\n    my $valid_extensions_substring_count = 0;\n    my $valid_extensions_substring_index\
    \ = 0;\n    my $valid_extensions_substring_length = 0;\n    my $valid_extensions_substring_start\
    \ = 0;\n    my $valid_extensions_substring_end = 0;\n    my $valid_extensions_substring_valid\
    \ = 0;\n    my $valid_extensions_substring_valid_count = 0;\n    my $valid_extensions_substring_valid_index\
    \ = 0;\n    my $valid_extensions_substring_valid_length = 0;\n    my $valid_extensions_substring_valid_start\
    \ = 0;\n    my $valid_extensions_substring_valid_end = 0;\n    my $valid_extensions_substring_valid_substring\
    \ = '';\n    my $valid_extensions_substring_valid_substring_count = 0;\n    my\
    \ $valid_extensions_substring_valid_substring_index = 0;\n    my $valid_extensions_substring_valid_substring_length\
    \ = 0;\n    my $valid_ext", "    my $result = 'No';\n    my $count = 0;\n    my\
    \ $dot_count = 0;\n    my $dot_index = 0;\n    my $extension = '';\n    my $valid_extensions\
    \ = ['txt', 'exe', 'dll'];\n    my $valid_extensions_count = scalar @$valid_extensions;\n\
    \    my $valid_extensions_index = 0;\n    my $valid_extension = 0;\n    my $valid_extension_found\
    \ = 0;\n    my $valid_extension_found_index = 0;\n    my $valid_extension_found_count\
    \ = 0;\n    my $valid_extension_found_count_index = 0;\n    my $valid_extension_found_count_index_value\
    \ = 0;\n    my $valid_extension_found_count_index_value_length = 0;\n    my $valid_extension_found_count_index_value_length_index\
    \ = 0;\n    my $valid_extension_found_count_index_value_length_index_value = 0;\n\
    \    my $valid_extension_found_count_index_value_length_index_value_ascii = 0;\n\
    \    my $valid_extension_found_count_index_value_length_index_value_ascii_value\
    \ = 0;\n    my $valid_extension_found_count_index_value_length_index_value_ascii_value_ascii_value\
    \ = 0;\n    my $valid_extension_found_count_index_value_length_index_value_ascii_value_ascii_value_value\
    \ = 0;\n    my $valid_extension_found_count_index_value_length_index_value_ascii_value_ascii_value_value_value\
    \ = 0;\n    my $valid_extension_found_count_index_value_length_index_value_ascii_value_ascii_value_value_value_value\
    \ = 0;\n    my $valid_extension_found_count_index_value_length_index_value_ascii_value_ascii_value_",
  "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/)\
    \ {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    # TODO: Implement\
    \ this function\n    # Hint: You can use the following functions:\n    # - substr($string,\
    \ $start, $length)\n    # - index($string, $substring)\n    # - rindex($string,\
    \ $substring)\n    # - length($string)\n    # - substr($string, $start)\n    #\
    \ - substr($string, $start, $length, $replacement)\n    # - substr($string, $start,\
    \ $replacement)\n    # - substr($string, $start, 0, $replacement)\n    # - substr($string,\
    \ $start, $length) = $replacement\n    # - substr($string, $start) = $replacement\n\
    \    # - substr($string, $start, 0) = $replacement\n    # - $string =~ s/$regex/$replacement/g\n\
    \    # - $string =~ s/$regex/$replacement/\n    # - $string =~ s/$regex/$replacement/g\n\
    \    # - $string =~ s/$regex/$replacement/\n    # - $string =~ s/$regex/$replacement/g\n\
    \    # - $string =~ s/$regex/$replacement/\n    # - $string =~ /$regex/\n    #\
    \ - $string =~ /$regex/g\n    # - $string =~ /$regex/\n    # - $string =~ /$regex/g\n\
    \    # - $string =~ /$regex/\n    # - $string =~ /$regex/g\n    # - $string =~\
    \ /$regex/\n    # - $string =~ /$regex/g\n    # - $string =~ /$regex/\n    # -\
    \ $string =~ /$regex/g\n    # - $string =~ /$regex/\n    # - $string =~ /$regex/g\n\
    \    # - $string =~ /$regex/\n    # - $string =~ /$regex/g\n    # - $string =~\
    \ /$regex/\n    # - $string =~ /$regex/g\n    # - $string =~ /$regex/\n    # -",
  "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z]+\\d{0,3}\\.txt$/ || $file_name\
    \ =~ /^[a-zA-Z]+\\d{0,3}\\.exe$/ || $file_name =~ /^[a-zA-Z]+\\d{0,3}\\.dll$/)\
    \ {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    return 'No'\
    \ if $file_name =~ /\\d{4}/;\n    return 'No' if $file_name !~ /^[a-zA-Z]/;\n\
    \    return 'No' if $file_name !~ /\\./;\n    return 'No' if $file_name !~ /\\\
    .txt|\\.exe|\\.dll$/;\n    return 'Yes';\n}", "    my $result = 'No';\n    if\
    \ ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result\
    \ = 'Yes';\n    }\n    return $result;\n}", "    my $valid = 'No';\n    if ($file_name\
    \ =~ /^[a-zA-Z]\\w*\\.\\w+$/) {\n        my @parts = split(/\\./, $file_name);\n\
    \        if ($parts[0] =~ /\\d{4}/) {\n            $valid = 'No';\n        }\n\
    \        else {\n            if ($parts[1] =~ /^(txt|exe|dll)$/) {\n         \
    \       $valid = 'Yes';\n            }\n        }\n    }\n    return $valid;\n\
    }", "    my $result = 'No';\n    my $count = 0;\n    my $dot_count = 0;\n    my\
    \ $dot_position = 0;\n    my $extension = '';\n    my $file_name_without_extension\
    \ = '';\n    my $file_name_length = length($file_name);\n    for(my $i = 0; $i\
    \ < $file_name_length; $i++) {\n        my $char = substr($file_name, $i, 1);\n\
    \        if($char =~ /[0-9]/) {\n            $count++;\n        }\n        if($char\
    \ eq '.') {\n            $dot_count++;\n            $dot_position = $i;\n    \
    \    }\n    }\n    if($count <= 3 && $dot_count == 1) {\n        $extension =\
    \ substr($file_name, $dot_position + 1);\n        $file_name_without_extension\
    \ = substr($file_name, 0, $dot_position);\n        if($file_name_without_extension\
    \ =~ /^[a-zA-Z]/ && $extension =~ /^(txt|exe|dll)$/) {\n            $result =\
    \ 'Yes';\n        }\n    }\n    return $result;\n}", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w+$/) {\n        my $substr = $file_name;\n\
    \        $substr =~ s/^[a-zA-Z]\\w*\\.//;\n        if ($substr =~ /^(txt|exe|dll)$/)\
    \ {\n            $result = 'Yes';\n        }\n    }\n    return $result;\n}",
  "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/)\
    \ {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result\
    \ = 'No';\n    my $count = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n\
    \    my $extension = '';\n    my $extension_valid = 0;\n    my $extension_list\
    \ = ['txt', 'exe', 'dll'];\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n \
    \   my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n\
    \    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n\
    \    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n\
    \    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n\
    \    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n\
    \    my $Z = 0;\n    my $zero = 0;\n    my $one = 0;\n    my $two = 0;\n    my\
    \ $three = 0;\n    my $four = 0;\n    my $five = 0;\n    my $six = 0;\n    my\
    \ $seven = 0;\n    my $eight = 0;\n    my $nine = 0;\n    my $", "    my $result\
    \ = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n\
    \        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result\
    \ = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name\
    \ =~ /^[a-zA-Z]\\w*\\.\\w{3}$/) {\n        my $before_dot = $`;\n        my $after_dot\
    \ = $';\n        if ($before_dot =~ /\\d/ || $after_dot =~ /\\d/) {\n        \
    \    $result = 'No';\n        }\n        else {\n            $result = 'Yes';\n\
    \        }\n    }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name\
    \ =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result = 'Yes';\n \
    \   }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name =~\
    \ /^[a-zA-Z]\\w*\\.\\w{3}$/) {\n        my @parts = split(/\\./, $file_name);\n\
    \        if ($parts[0] =~ /\\d{4}/) {\n            $result = 'No';\n        }\
    \ else {\n            $result = 'Yes';\n        }\n    }\n    return $result;\n\
    }", "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w+$/) {\n\
    \        my $substr = $file_name;\n        $substr =~ s/\\..*//;\n        if ($substr\
    \ =~ /\\d{4,}/) {\n            $result = 'No';\n        } else {\n           \
    \ $substr = $file_name;\n            $substr =~ s/.*\\.//;\n            if ($substr\
    \ =~ /^(txt|exe|dll)$/) {\n                $result = 'Yes';\n            }\n \
    \       }\n    }\n    return $result;\n}", "    return 'No' if $file_name =~ /\\\
    d{4}/;\n    return 'No' if $file_name !~ /^[a-zA-Z]+\\.txt|exe|dll$/;\n    return\
    \ 'Yes';\n}", "    my $result = 'No';\n    my $count = 0;\n    my $dot_count =\
    \ 0;\n    my $sub_string = '';\n    my $sub_string_after_dot = '';\n    my $sub_string_before_dot\
    \ = '';\n    my $sub_string_after_dot_count = 0;\n    my $sub_string_before_dot_count\
    \ = 0;\n    my $sub_string_before_dot_first_char = '';\n    my $sub_string_before_dot_first_char_count\
    \ = 0;\n    my $sub_string_after_dot_first_char = '';\n    my $sub_string_after_dot_first_char_count\
    \ = 0;\n    my $sub_string_after_dot_second_char = '';\n    my $sub_string_after_dot_second_char_count\
    \ = 0;\n    my $sub_string_after_dot_third_char = '';\n    my $sub_string_after_dot_third_char_count\
    \ = 0;\n    my $sub_string_after_dot_first_char_is_t = 0;\n    my $sub_string_after_dot_second_char_is_x\
    \ = 0;\n    my $sub_string_after_dot_third_char_is_e = 0;\n    my $sub_string_after_dot_first_char_is_d\
    \ = 0;\n    my $sub_string_after_dot_second_char_is_l = 0;\n    my $sub_string_after_dot_third_char_is_l\
    \ = 0;\n    my $sub_string_after_dot_is_txt = 0;\n    my $sub_string_after_dot_is_exe\
    \ = 0;\n    my $sub_string_after_dot_is_dll = 0;\n    my $sub_string_after_dot_is_valid\
    \ = 0;\n    my $sub_string_before_dot_is_valid = 0;\n    my $sub_string_before_dot_first_char_is_valid\
    \ = 0;\n    my $sub_string_after_dot_first_char_is_valid", "    my $result = 'No';\n\
    \    my $count = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n    my $substring_before_dot\
    \ = '';\n    my $substring_after_dot = '';\n    my $substring_after_dot_valid\
    \ = 0;\n    my $substring_before_dot_valid = 0;\n    my $substring_before_dot_first_letter\
    \ = '';\n    my $substring_before_dot_first_letter_valid = 0;\n    my $substring_before_dot_digit_count\
    \ = 0;\n    my $substring_before_dot_digit_count_valid = 0;\n    my $substring_before_dot_length\
    \ = 0;\n    my $substring_before_dot_length_valid = 0;\n    my $substring_after_dot_length\
    \ = 0;\n    my $substring_after_dot_length_valid = 0;\n    my $substring_after_dot_first_letter\
    \ = '';\n    my $substring_after_dot_first_letter_valid = 0;\n    my $substring_after_dot_second_letter\
    \ = '';\n    my $substring_after_dot_second_letter_valid = 0;\n    my $substring_after_dot_third_letter\
    \ = '';\n    my $substring_after_dot_third_letter_valid = 0;\n    my $substring_after_dot_fourth_letter\
    \ = '';\n    my $substring_after_dot_fourth_letter_valid = 0;\n    my $substring_after_dot_fifth_letter\
    \ = '';\n    my $substring_after_dot_fifth_letter_valid = 0;\n    my $substring_after_dot_sixth_letter\
    \ = '';\n    my $substring_after_dot_sixth_letter_valid = 0;\n    my $substring_after_dot_seventh_letter\
    \ = '';\n    my $substring_after_dot_seventh_letter_valid = 0;\n    my $substring_after_dot_eighth_letter\
    \ = '';\n    my $substring_after_", "    my $result = 'No';\n    if ($file_name\
    \ =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result = 'Yes';\n \
    \   }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name =~\
    \ /^[a-zA-Z]+\\d{0,3}\\.txt$/ || $file_name =~ /^[a-zA-Z]+\\d{0,3}\\.exe$/ ||\
    \ $file_name =~ /^[a-zA-Z]+\\d{0,3}\\.dll$/) {\n        $result = 'Yes';\n   \
    \ }\n    return $result;\n}", "    my $result = 'No';\n    my $count = 0;\n  \
    \  my $dot_count = 0;\n    my $dot_index = 0;\n    my $extension = '';\n    my\
    \ $valid_extensions = ['txt', 'exe', 'dll'];\n    my $valid_extensions_count =\
    \ scalar @$valid_extensions;\n    my $valid_extensions_index = 0;\n    my $valid_extension\
    \ = 0;\n    my $valid_extension_index = 0;\n    my $valid_extension_count = 0;\n\
    \    my $valid_extension_found = 0;\n    my $valid_extension_found_index = 0;\n\
    \    my $valid_extension_found_count = 0;\n    my $valid_extension_found_found\
    \ = 0;\n    my $valid_extension_found_found_index = 0;\n    my $valid_extension_found_found_count\
    \ = 0;\n    my $valid_extension_found_found_found = 0;\n    my $valid_extension_found_found_found_index\
    \ = 0;\n    my $valid_extension_found_found_found_count = 0;\n    my $valid_extension_found_found_found_found\
    \ = 0;\n    my $valid_extension_found_found_found_found_index = 0;\n    my $valid_extension_found_found_found_found_count\
    \ = 0;\n    my $valid_extension_found_found_found_found_found = 0;\n    my $valid_extension_found_found_found_found_found_index\
    \ = 0;\n    my $valid_extension_found_found_found_found_found_count = 0;\n   \
    \ my $valid_extension_found_found_found_found_found_found = 0;\n    my $valid_extension_found_found_found_found_found_found_index\
    \ = 0;\n    my $valid_extension_found_found_found_found_found_found_count = 0;\n\
    \    my $valid_extension_found_found_found_found_found_found_found = 0;\n    my\
    \ $", "    my $result = 'No';\n    my $dot_count = 0;\n    my $digit_count = 0;\n\
    \    my $substring_before_dot = '';\n    my $substring_after_dot = '';\n    my\
    \ $substring_after_dot_valid = 0;\n    my $substring_before_dot_valid = 0;\n \
    \   my $i = 0;\n    my $char = '';\n    my $char_code = 0;\n    my $substring_after_dot_valid_list\
    \ = ['txt', 'exe', 'dll'];\n    my $substring_after_dot_valid_list_length = scalar(@$substring_after_dot_valid_list);\n\
    \    my $substring_after_dot_valid_list_item = '';\n    my $substring_after_dot_valid_list_item_length\
    \ = 0;\n    my $substring_after_dot_valid_list_item_i = 0;\n    my $substring_after_dot_valid_list_item_char\
    \ = '';\n    my $substring_after_dot_valid_list_item_char_code = 0;\n    my $substring_after_dot_valid_list_item_char_code_lower\
    \ = 0;\n    my $substring_after_dot_valid_list_item_char_code_upper = 0;\n   \
    \ my $substring_after_dot_valid_list_item_char_code_lower_diff = 0;\n    my $substring_after_dot_valid_list_item_char_code_upper_diff\
    \ = 0;\n    my $substring_after_dot_valid_list_item_char_code_lower_diff_abs =\
    \ 0;\n    my $substring_after_dot_valid_list_item_char_code_upper_diff_abs = 0;\n\
    \    my $substring_after_dot_valid_list_item_char_code_lower_diff_abs_min = 0;\n\
    \    my $substring_after_dot_valid_list_item_char_code_upper_diff_abs_min = 0;\n\
    \    my $substring_after_dot_valid_list", "    my $result = 'No';\n    if ($file_name\
    \ =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result = 'Yes';\n \
    \   }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name =~\
    \ /^[a-zA-Z]\\w*\\.\\w+$/) {\n        my ($name, $ext) = split /\\./, $file_name;\n\
    \        if ($name =~ /\\d{4,}/) {\n            $result = 'No';\n        } elsif\
    \ ($ext eq 'txt' || $ext eq 'exe' || $ext eq 'dll') {\n            $result = 'Yes';\n\
    \        }\n    }\n    return $result;\n}", "    my $result = 'No';\n    my $count\
    \ = 0;\n    my $dot_count = 0;\n    my $dot_index = -1;\n    my $extension = '';\n\
    \    my $before_dot = '';\n    my $after_dot = '';\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my\
    \ $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n  \
    \  my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n\
    \    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n\
    \    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n\
    \    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n\
    \    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n\
    \    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $zero = 0;\n    my $one\
    \ = 0;\n    my $two = 0;\n    my $three = 0;\n    my $four = 0;\n    my $five\
    \ = 0;\n    my $six = 0;\n    my $seven = 0;\n    my $eight = 0;\n    my $nine\
    \ = 0;\n    my $dot = 0;\n    my $space", "    my $result = 'No';\n    my $count\
    \ = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n    my $substring_before_dot\
    \ = '';\n    my $substring_after_dot = '';\n    my @valid_extensions = ('txt',\
    \ 'exe', 'dll');\n    my $valid_extension = 0;\n    my $i = 0;\n    for ($i =\
    \ 0; $i < length($file_name); $i++) {\n        if (substr($file_name, $i, 1) =~\
    \ /[0-9]/) {\n            $count++;\n        }\n        if (substr($file_name,\
    \ $i, 1) eq '.') {\n            $dot_count++;\n            $dot_index = $i;\n\
    \        }\n    }\n    if ($count <= 3 && $dot_count == 1) {\n        $substring_before_dot\
    \ = substr($file_name, 0, $dot_index);\n        $substring_after_dot = substr($file_name,\
    \ $dot_index + 1);\n        if (length($substring_before_dot) > 0 && $substring_before_dot\
    \ =~ /^[a-zA-Z]/) {\n            for ($i = 0; $i < scalar(@valid_extensions);\
    \ $i++) {\n                if ($substring_after_dot eq $valid_extensions[$i])\
    \ {\n                    $valid_extension = 1;\n                }\n          \
    \  }\n            if ($valid_extension == 1) {\n                $result = 'Yes';\n\
    \            }\n        }\n    }\n    return $result;\n}", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result\
    \ = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n    # your\
    \ code here\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w+$/){\n        my @substrings\
    \ = split(/\\./, $file_name);\n        if ($substrings[0] =~ /^[a-zA-Z]\\w*$/){\n\
    \            if ($substrings[1] =~ /^(txt|exe|dll)$/){\n                $result\
    \ = 'Yes';\n            }\n        }\n    }\n    return $result;\n}", "    my\
    \ $result = 'No';\n    my $count = 0;\n    my $dot_count = 0;\n    my $dot_position\
    \ = 0;\n    my $extension = '';\n    my $file_name_without_extension = '';\n \
    \   my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n\
    \    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n\
    \    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n\
    \    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n\
    \    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n\
    \    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $zero\
    \ = 0;\n    my $one = 0;\n    my $two = 0;\n    my $three = 0;\n    my $four =\
    \ 0;\n    my $five = 0;\n    my $six = 0;\n    my $seven = 0;\n    my $eight =\
    \ 0;\n    my $nine = 0;\n    my $dot = 0;\n    my $txt = 0;\n    my", "    my\
    \ $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/)\
    \ {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    # Write your\
    \ code here\n    my $count = 0;\n    my $dot_count = 0;\n    my $extension = \"\
    \";\n    my $name = \"\";\n    my $is_valid = 0;\n    my $i = 0;\n    my $len\
    \ = length($file_name);\n    while($i < $len) {\n        my $c = substr($file_name,\
    \ $i, 1);\n        if($c =~ /[0-9]/) {\n            $count++;\n        }\n   \
    \     if($c eq '.') {\n            $dot_count++;\n        }\n        $i++;\n \
    \   }\n    if($dot_count == 1 && $count <= 3) {\n        my @arr = split(/\\./,\
    \ $file_name);\n        $name = $arr[0];\n        $extension = $arr[1];\n    \
    \    if($name =~ /^[a-zA-Z]/ && $extension =~ /^(txt|exe|dll)$/) {\n         \
    \   $is_valid = 1;\n        }\n    }\n    if($is_valid) {\n        return \"Yes\"\
    ;\n    }\n    else {\n        return \"No\";\n    }\n}", "    my $result = 'No';\n\
    \    my $dot_count = 0;\n    my $digit_count = 0;\n    my $substring_before_dot\
    \ = '';\n    my $substring_after_dot = '';\n    my $substring_after_dot_is_valid\
    \ = 0;\n    my $substring_before_dot_is_valid = 0;\n    my $substring_before_dot_starts_with_letter\
    \ = 0;\n    my $substring_before_dot_is_not_empty = 0;\n    my $substring_after_dot_is_not_empty\
    \ = 0;\n    my $substring_after_dot_is_one_of_these = 0;\n    my $substring_after_dot_is_txt\
    \ = 0;\n    my $substring_after_dot_is_exe = 0;\n    my $substring_after_dot_is_dll\
    \ = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my\
    \ $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n  \
    \  my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n\
    \    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n\
    \    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n\
    \    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n\
    \    my $Q = 0;\n    my $R = 0;\n    my $S", "    my $result = 'No';\n    if ($file_name\
    \ =~ /^[a-zA-Z]\\w*\\.\\w+$/) {\n        my $count = $file_name =~ tr/0-9//;\n\
    \        if ($count <= 3) {\n            my @parts = split(/\\./, $file_name);\n\
    \            if ($parts[1] =~ /^(txt|exe|dll)$/) {\n                $result =\
    \ 'Yes';\n            }\n        }\n    }\n    return $result;\n}", "    my $result\
    \ = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w{3}$/) {\n        my $count\
    \ = $file_name =~ s/\\d//g;\n        if ($count <= 3) {\n            $result =\
    \ 'Yes';\n        }\n    }\n    return $result;\n}", "    if ($file_name =~ /^[a-zA-Z]\\\
    w*\\.\\w{3}$/ && $file_name !~ /\\d{4}/) {\n        return 'Yes';\n    }\n   \
    \ return 'No';\n}", "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\\
    .(txt|exe|dll)$/) {\n        $result = 'Yes';\n    }\n    return $result;\n}",
  "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w+$/) {\n    \
    \    my @parts = split(/\\./, $file_name);\n        if ($parts[0] =~ /^\\D+$/\
    \ && $parts[1] =~ /^(txt|exe|dll)$/) {\n            $result = 'Yes';\n       \
    \ }\n    }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name\
    \ =~ /^[a-zA-Z]+[0-9]{0,3}\\.txt$/ || $file_name =~ /^[a-zA-Z]+[0-9]{0,3}\\.exe$/\
    \ || $file_name =~ /^[a-zA-Z]+[0-9]{0,3}\\.dll$/) {\n        $result = 'Yes';\n\
    \    }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name =~\
    \ /^[a-zA-Z]\\w*\\.\\w+$/) {\n        my @parts = split(/\\./, $file_name);\n\
    \        if ($parts[0] =~ /^[a-zA-Z]\\w*$/ && $parts[1] =~ /^(txt|exe|dll)$/)\
    \ {\n            $result = 'Yes';\n        }\n    }\n    return $result;\n}",
  "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w{3}$/) {\n  \
    \      my $digits_count = $file_name =~ tr/0-9//;\n        if ($digits_count <=\
    \ 3) {\n            my $extension = (split /\\./, $file_name)[1];\n          \
    \  if ($extension eq 'txt' || $extension eq 'exe' || $extension eq 'dll') {\n\
    \                $result = 'Yes';\n            }\n        }\n    }\n    return\
    \ $result;\n}", "    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w+$/ && $file_name !~\
    \ /\\d{4}/ && $file_name =~ /\\.txt|\\.exe|\\.dll$/) {\n        return 'Yes';\n\
    \    }\n    return 'No';\n}", "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\\
    .(txt|exe|dll)$/) {\n        $result = 'Yes';\n    }\n    return $result;\n}",
  "    my $result = 'No';\n    my $count = 0;\n    my $dot_count = 0;\n    my $dot_index\
    \ = 0;\n    my $extension = '';\n    my $name = '';\n    my $length = length($file_name);\n\
    \    for(my $i = 0; $i < $length; $i++) {\n        my $char = substr($file_name,\
    \ $i, 1);\n        if($char =~ /[0-9]/) {\n            $count++;\n        }\n\
    \        if($char eq '.') {\n            $dot_count++;\n            $dot_index\
    \ = $i;\n        }\n    }\n    if($count > 3) {\n        return $result;\n   \
    \ }\n    if($dot_count != 1) {\n        return $result;\n    }\n    $extension\
    \ = substr($file_name, $dot_index + 1);\n    if($extension ne 'txt' && $extension\
    \ ne 'exe' && $extension ne 'dll') {\n        return $result;\n    }\n    $name\
    \ = substr($file_name, 0, $dot_index);\n    if($name eq '') {\n        return\
    \ $result;\n    }\n    if($name !~ /^[a-zA-Z]/) {\n        return $result;\n \
    \   }\n    $result = 'Yes';\n    return $result;\n}", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result\
    \ = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name\
    \ =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result = 'Yes';\n \
    \   }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name =~\
    \ /^[a-zA-Z]\\w*\\.\\w{3}$/) {\n        my @parts = split(/\\./, $file_name);\n\
    \        if ($parts[0] =~ /^[a-zA-Z]\\w*$/ && $parts[1] =~ /^(txt|exe|dll)$/)\
    \ {\n            $result = 'Yes';\n        }\n    }\n    return $result;\n}",
  "    my $result = 'No';\n    my @parts = split(/\\./, $file_name);\n    if (scalar(@parts)\
    \ == 2) {\n        my $name = $parts[0];\n        my $ext = $parts[1];\n     \
    \   if ($name =~ /^[a-zA-Z][a-zA-Z0-9]*$/ && $ext =~ /^(txt|exe|dll)$/) {\n  \
    \          my $count = $name =~ tr/0-9//;\n            if ($count <= 3) {\n  \
    \              $result = 'Yes';\n            }\n        }\n    }\n    return $result;\n\
    }", "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w+$/) {\n\
    \        my @parts = split(/\\./, $file_name);\n        if ($parts[0] =~ /\\d/\
    \ && $parts[0] =~ tr/\\d// > 3) {\n            $result = 'No';\n        }\n  \
    \      elsif ($parts[1] =~ /^(txt|exe|dll)$/) {\n            $result = 'Yes';\n\
    \        }\n    }\n    return $result;\n}", "    my $result = 'No';\n    my $count\
    \ = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n    my $extension = '';\n\
    \    my $substring = '';\n    my $substring_count = 0;\n    my $substring_index\
    \ = 0;\n    my $substring_length = 0;\n    my $substring_valid = 0;\n    my $substring_valid_count\
    \ = 0;\n    my $substring_valid_index = 0;\n    my $substring_valid_length = 0;\n\
    \    my $substring_valid_start = 0;\n    my $substring_valid_end = 0;\n    my\
    \ $substring_valid_start_char = '';\n    my $substring_valid_end_char = '';\n\
    \    my $substring_valid_start_char_code = 0;\n    my $substring_valid_end_char_code\
    \ = 0;\n    my $substring_valid_start_char_code_valid = 0;\n    my $substring_valid_end_char_code_valid\
    \ = 0;\n    my $substring_valid_start_char_code_valid_count = 0;\n    my $substring_valid_end_char_code_valid_count\
    \ = 0;\n    my $substring_valid_start_char_code_valid_index = 0;\n    my $substring_valid_end_char_code_valid_index\
    \ = 0;\n    my $substring_valid_start_char_code_valid_length = 0;\n    my $substring_valid_end_char_code_valid_length\
    \ = 0;\n    my $substring_valid_start_char_code_valid_start = 0;\n    my $substring_valid_end_char_code_valid_start\
    \ = 0;\n    my $substring_valid_start_char_code_valid_end = 0;\n    my $substring_valid_end_char_code_valid_end\
    \ = 0;\n    my $substring_valid_start_char_code_valid_start_char = '';\n    my\
    \ $substring_valid_end_char_", "    my $result = 'No';\n    if ($file_name =~\
    \ /^[a-zA-Z]\\w*\\.\\w*$/) {\n        my $count = $file_name =~ tr/0-9//;\n  \
    \      if ($count <= 3) {\n            my @parts = split(/\\./, $file_name);\n\
    \            if ($parts[1] eq 'txt' || $parts[1] eq 'exe' || $parts[1] eq 'dll')\
    \ {\n                $result = 'Yes';\n            }\n        }\n    }\n    return\
    \ $result;\n}", "    my $result = 'No';\n    my $dot_count = 0;\n    my $digit_count\
    \ = 0;\n    my $substring_before_dot = '';\n    my $substring_after_dot = '';\n\
    \    my $substring_after_dot_valid = 0;\n    my $i = 0;\n    my $c = '';\n   \
    \ my $len = length($file_name);\n    while ($i < $len) {\n        $c = substr($file_name,\
    \ $i, 1);\n        if ($c eq '.') {\n            $dot_count++;\n            $substring_before_dot\
    \ = substr($file_name, 0, $i);\n            $substring_after_dot = substr($file_name,\
    \ $i + 1);\n            if ($substring_after_dot eq 'txt' || $substring_after_dot\
    \ eq 'exe' || $substring_after_dot eq 'dll') {\n                $substring_after_dot_valid\
    \ = 1;\n            }\n        }\n        if ($c =~ /[0-9]/) {\n            $digit_count++;\n\
    \        }\n        $i++;\n    }\n    if ($dot_count == 1 && $digit_count <= 3\
    \ && $substring_before_dot ne '' && $substring_before_dot =~ /^[a-zA-Z]/ && $substring_after_dot_valid\
    \ == 1) {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result\
    \ = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n\
    \        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w+$/) {\n        my @parts = split(/\\\
    ./, $file_name);\n        my $ext = $parts[1];\n        if ($ext eq 'txt' || $ext\
    \ eq 'exe' || $ext eq 'dll') {\n            my $num_digits = $parts[0] =~ tr/0-9//;\n\
    \            if ($num_digits <= 3) {\n                $result = 'Yes';\n     \
    \       }\n        }\n    }\n    return $result;\n}", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result\
    \ = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name\
    \ =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result = 'Yes';\n \
    \   }\n    return $result;\n}", "    my $valid = 'No';\n    if ($file_name =~\
    \ /^[a-zA-Z]\\w*\\.\\w+$/) {\n        my $before_dot = $`;\n        my $after_dot\
    \ = $';\n        if ($before_dot =~ /\\d{4,}/) {\n            $valid = 'No';\n\
    \        } elsif ($after_dot =~ /^(txt|exe|dll)$/) {\n            $valid = 'Yes';\n\
    \        }\n    }\n    return $valid;\n}", "    my $result = 'No';\n    if ($file_name\
    \ =~ /^([a-zA-Z]\\w*)\\.(txt|exe|dll)$/) {\n        my $before_dot = $1;\n   \
    \     my $after_dot = $2;\n        if ($before_dot =~ /\\d{4,}/) {\n         \
    \   $result = 'No';\n        } else {\n            $result = 'Yes';\n        }\n\
    \    }\n    return $result;\n}", "    my $result = 'No';\n    my $count = 0;\n\
    \    my $dot_count = 0;\n    my $dot_index = 0;\n    my $substring_before_dot\
    \ = '';\n    my $substring_after_dot = '';\n    my $substring_after_dot_valid\
    \ = 0;\n    my $substring_before_dot_valid = 0;\n    my $substring_before_dot_valid_count\
    \ = 0;\n    my $substring_after_dot_valid_count = 0;\n    my $substring_before_dot_valid_count_max\
    \ = 0;\n    my $substring_after_dot_valid_count_max = 0;\n    my $substring_before_dot_valid_count_min\
    \ = 0;\n    my $substring_after_dot_valid_count_min = 0;\n    my $substring_before_dot_valid_count_max_valid\
    \ = 0;\n    my $substring_after_dot_valid_count_max_valid = 0;\n    my $substring_before_dot_valid_count_min_valid\
    \ = 0;\n    my $substring_after_dot_valid_count_min_valid = 0;\n    my $substring_before_dot_valid_count_valid\
    \ = 0;\n    my $substring_after_dot_valid_count_valid = 0;\n    my $substring_before_dot_valid_count_valid_valid\
    \ = 0;\n    my $substring_after_dot_valid_count_valid_valid = 0;\n    my $substring_before_dot_valid_count_valid_valid_valid\
    \ = 0;\n    my $substring_after_dot_valid_count_valid_valid_valid = 0;\n    my\
    \ $substring_before_dot_valid_count_valid_valid_valid_valid = 0;\n    my $substring_after_dot_valid_count_valid_valid_valid_valid\
    \ = 0;\n    my $substring_before_dot_valid_count_valid_valid_valid_valid_valid\
    \ = 0;\n    my $substring_after_dot_valid_count_valid_valid_valid_valid", "  \
    \  my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/)\
    \ {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result\
    \ = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.txt$/ || $file_name =~ /^[a-zA-Z]\\\
    w*\\.exe$/ || $file_name =~ /^[a-zA-Z]\\w*\\.dll$/) {\n        $result = 'Yes';\n\
    \    }\n    return $result;\n}", "    my $result = 'No';\n    my $count = 0;\n\
    \    my $dot_count = 0;\n    my $dot_index = 0;\n    my $substr_before_dot = '';\n\
    \    my $substr_after_dot = '';\n    my $substr_after_dot_valid = 0;\n    my $substr_before_dot_valid\
    \ = 0;\n    my $substr_before_dot_valid_count = 0;\n    my $substr_before_dot_valid_count_max\
    \ = 0;\n    my $substr_before_dot_valid_count_min = 0;\n    my $substr_before_dot_valid_count_min_index\
    \ = 0;\n    my $substr_before_dot_valid_count_max_index = 0;\n    my $substr_before_dot_valid_count_max_index_temp\
    \ = 0;\n    my $substr_before_dot_valid_count_min_index_temp = 0;\n    my $substr_before_dot_valid_count_max_index_temp_temp\
    \ = 0;\n    my $substr_before_dot_valid_count_min_index_temp_temp = 0;\n    my\
    \ $substr_before_dot_valid_count_max_index_temp_temp_temp = 0;\n    my $substr_before_dot_valid_count_min_index_temp_temp_temp\
    \ = 0;\n    my $substr_before_dot_valid_count_max_index_temp_temp_temp_temp =\
    \ 0;\n    my $substr_before_dot_valid_count_min_index_temp_temp_temp_temp = 0;\n\
    \    my $substr_before_dot_valid_count_max_index_temp_temp_temp_temp_temp = 0;\n\
    \    my $substr_before_dot_valid_count_min_index_temp_temp_temp_temp_temp = 0;\n\
    \    my $substr_before_dot_valid_count_max_index_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    my $substr_before_dot_valid_count_min_index_", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z]+[0-9]{0,3}\\.txt$/ || $file_name =~ /^[a-zA-Z]+[0-9]{0,3}\\\
    .exe$/ || $file_name =~ /^[a-zA-Z]+[0-9]{0,3}\\.dll$/) {\n        $result = 'Yes';\n\
    \    }\n    return $result;\n}", "    my $result = 'No';\n    my $count = 0;\n\
    \    my $dot_count = 0;\n    my $extension = '';\n    my $file_name_without_extension\
    \ = '';\n    my $file_name_length = length($file_name);\n    my $i = 0;\n    while\
    \ ($i < $file_name_length) {\n        my $char = substr($file_name, $i, 1);\n\
    \        if ($char eq '.') {\n            $dot_count++;\n            $file_name_without_extension\
    \ = substr($file_name, 0, $i);\n            $extension = substr($file_name, $i\
    \ + 1);\n        }\n        if ($char =~ /[0-9]/) {\n            $count++;\n \
    \       }\n        $i++;\n    }\n    if ($count <= 3 && $dot_count == 1 && $file_name_without_extension\
    \ =~ /^[a-zA-Z]/ && $extension =~ /^(txt|exe|dll)$/) {\n        $result = 'Yes';\n\
    \    }\n    return $result;\n}", "    my $result = 'No';\n    my $count = 0;\n\
    \    my $dot_count = 0;\n    my $dot_index = 0;\n    my $extension = '';\n   \
    \ my $valid_extensions = ['txt', 'exe', 'dll'];\n    my $valid_extension = 0;\n\
    \    my $valid_name = 0;\n    my $valid_count = 0;\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my\
    \ $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n  \
    \  my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n\
    \    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n\
    \    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n\
    \    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n\
    \    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n\
    \    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $zero = 0;\n    my $one\
    \ = 0;\n    my $two = 0;\n    my $three = 0;\n    my $four = 0;\n    my $five\
    \ = 0;\n    my $six = 0;\n    my $seven = 0;", "    my $result = 'No';\n    if\
    \ ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result\
    \ = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name\
    \ =~ /^[a-zA-Z][\\w]*\\.(txt|exe|dll)$/) {\n        $result = 'Yes';\n    }\n\
    \    return $result;\n}", "    my $result = 'No';\n    my $count = 0;\n    my\
    \ $dot_count = 0;\n    my $dot_index = 0;\n    my $extension = '';\n    my $substring\
    \ = '';\n    my $substring_length = 0;\n    my @extensions = ('txt', 'exe', 'dll');\n\
    \    my $extensions_length = scalar @extensions;\n    my $i = 0;\n    my $j =\
    \ 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o\
    \ = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my\
    \ $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n  \
    \  my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n\
    \    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n\
    \    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n\
    \    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n\
    \    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n\
    \    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $zero = 0;\n    my $one\
    \ = 0;\n    my $two = 0;\n    my $three = 0;\n    my $four = 0;\n    my $five\
    \ = 0;\n    my $six = 0;\n    my $seven = 0", "    my $result = 'No';\n    my\
    \ $count = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n    my $substring_before_dot\
    \ = '';\n    my $substring_after_dot = '';\n    my $substring_after_dot_valid\
    \ = 0;\n    my $substring_before_dot_valid = 0;\n    my $substring_before_dot_first_char_valid\
    \ = 0;\n    my $substring_before_dot_first_char_index = 0;\n    my $substring_before_dot_first_char\
    \ = '';\n    my $substring_before_dot_first_char_ascii = 0;\n    my $substring_before_dot_first_char_ascii_valid\
    \ = 0;\n    my $substring_before_dot_first_char_ascii_valid_lower = 0;\n    my\
    \ $substring_before_dot_first_char_ascii_valid_upper = 0;\n    my $substring_before_dot_first_char_ascii_valid_lower_min\
    \ = 97;\n    my $substring_before_dot_first_char_ascii_valid_lower_max = 122;\n\
    \    my $substring_before_dot_first_char_ascii_valid_upper_min = 65;\n    my $substring_before_dot_first_char_ascii_valid_upper_max\
    \ = 90;\n    my $substring_before_dot_first_char_ascii_valid_lower_range = $substring_before_dot_first_char_ascii_valid_lower_max\
    \ - $substring_before_dot_first_char_ascii_valid_lower_min + 1;\n    my $substring_before_dot_first_char_ascii_valid_upper_range\
    \ = $substring_before_dot_first_char_ascii_valid_upper_max - $substring_before_dot_first_char_ascii_valid_upper_min\
    \ + 1;\n    my $substring_before_dot_first_char_ascii_valid", "    my $result\
    \ = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n\
    \        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n\
    \    my $count = 0;\n    my $dot_count = 0;\n    my $dot_index = -1;\n    my $substring_after_dot\
    \ = '';\n    my $substring_before_dot = '';\n    my $substring_before_dot_is_valid\
    \ = 0;\n    my $substring_after_dot_is_valid = 0;\n    my @valid_substrings_after_dot\
    \ = ('txt', 'exe', 'dll');\n    my $i = 0;\n    my $length = length($file_name);\n\
    \    for($i = 0; $i < $length; $i++) {\n        my $char = substr($file_name,\
    \ $i, 1);\n        if($char =~ /[0-9]/) {\n            $count++;\n        }\n\
    \        if($char eq '.') {\n            $dot_count++;\n            $dot_index\
    \ = $i;\n        }\n    }\n    if($dot_count == 1 && $count <= 3) {\n        $substring_after_dot\
    \ = substr($file_name, $dot_index + 1);\n        $substring_before_dot = substr($file_name,\
    \ 0, $dot_index);\n        if($substring_before_dot =~ /^[a-zA-Z]/) {\n      \
    \      $substring_before_dot_is_valid = 1;\n        }\n        foreach my $valid_substring\
    \ (@valid_substrings_after_dot) {\n            if($substring_after_dot eq $valid_substring)\
    \ {\n                $substring_after_dot_is_valid = 1;\n            }\n     \
    \   }\n        if($substring_before_dot_is_valid && $substring_after_dot_is_valid)\
    \ {\n            $result = 'Yes';\n        }\n    }\n    return $result;\n}",
  "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w{3}$/) {\n  \
    \      my $before_dot = $`;\n        my $after_dot = $';\n        if ($before_dot\
    \ =~ /\\d/g) {\n            my $count = () = $before_dot =~ /\\d/g;\n        \
    \    if ($count <= 3) {\n                if ($after_dot eq 'txt' || $after_dot\
    \ eq 'exe' || $after_dot eq 'dll') {\n                    $result = 'Yes';\n \
    \               }\n            }\n        }\n    }\n    return $result;\n}", " \
    \   # TODO: implement this function\n    return 'Yes';\n}", "    my $result =\
    \ 'No';\n    my $count = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n\
    \    my $extension = '';\n    my $extension_check = 0;\n    my $valid_extensions\
    \ = ['txt', 'exe', 'dll'];\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n \
    \   my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n\
    \    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n\
    \    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n\
    \    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n\
    \    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n\
    \    my $Z = 0;\n    my $zero = 0;\n    my $one = 0;\n    my $two = 0;\n    my\
    \ $three = 0;\n    my $four = 0;\n    my $five = 0;\n    my $six = 0;\n    my\
    \ $seven = 0;\n    my $eight = 0;\n    my $nine = 0;\n    my $", "    my $valid\
    \ = 'No';\n    my $count = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n\
    \    my $extension = '';\n    my $sub_string = '';\n    my $sub_string_count =\
    \ 0;\n    my $sub_string_valid = 'No';\n    my $extension_valid = 'No';\n    my\
    \ $valid_extensions = ['txt', 'exe', 'dll'];\n    my $valid_extensions_count =\
    \ scalar @$valid_extensions;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n\
    \    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n\
    \    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n\
    \    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n\
    \    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n\
    \    my $Z = 0;\n    my $zero = 0;\n    my $one = 0;\n    my $two = 0;\n    my\
    \ $", "    my $result = 'No';\n    if($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/){\n\
    \        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result\
    \ = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n    my $dot_count\
    \ = 0;\n    my $digit_count = 0;\n    my $extension = '';\n    my $file_name_without_extension\
    \ = '';\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my\
    \ $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n  \
    \  my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n\
    \    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n\
    \    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n\
    \    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n\
    \    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n\
    \    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n\
    \    my $dot = 0;\n    my $zero = 0;\n    my $one = 0;\n    my $two = 0;\n   \
    \ my $three = 0;\n    my $four = 0;\n    my $five = 0;\n    my $six = 0;\n   \
    \ my $seven = 0;\n    my $eight = 0;\n    my $nine = 0;\n    my $a = 0;\n    my\
    \ $b = 0;\n    my", "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\\
    w*\\.txt$/ || $file_name =~ /^[a-zA-Z]\\w*\\.exe$/ || $file_name =~ /^[a-zA-Z]\\\
    w*\\.dll$/) {\n        $result = 'Yes';\n    }\n    return $result;\n}", "   \
    \ my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/)\
    \ {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    my $ret =\
    \ 'No';\n    my $dot_count = 0;\n    my $digit_count = 0;\n    my $extension =\
    \ '';\n    my $file_name_without_extension = '';\n    my $file_name_length = length($file_name);\n\
    \    my $i = 0;\n    for ($i = 0; $i < $file_name_length; $i++) {\n        my\
    \ $char = substr($file_name, $i, 1);\n        if ($char eq '.') {\n          \
    \  $dot_count++;\n            if ($dot_count > 1) {\n                last;\n \
    \           }\n        }\n        elsif ($char =~ /[0-9]/) {\n            $digit_count++;\n\
    \            if ($digit_count > 3) {\n                last;\n            }\n \
    \       }\n        elsif ($dot_count == 0) {\n            $file_name_without_extension\
    \ .= $char;\n        }\n        elsif ($dot_count == 1) {\n            $extension\
    \ .= $char;\n        }\n    }\n    if ($dot_count == 1 && $digit_count <= 3 &&\
    \ $file_name_without_extension =~ /^[a-zA-Z]/ && $extension =~ /^(txt|exe|dll)$/)\
    \ {\n        $ret = 'Yes';\n    }\n    return $ret;\n}", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result\
    \ = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n    my $count\
    \ = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n    my $extension = '';\n\
    \    my $valid_extensions = ['txt', 'exe', 'dll'];\n    my $valid_extensions_count\
    \ = @$valid_extensions;\n    my $valid_extensions_index = 0;\n    my $valid_extension\
    \ = 'No';\n    my $valid_extension_count = 0;\n    my $valid_extension_index =\
    \ 0;\n    my $valid_extension_length = 0;\n    my $valid_extension_letter = '';\n\
    \    my $valid_extension_letter_count = 0;\n    my $valid_extension_letter_index\
    \ = 0;\n    my $valid_extension_letter_length = 0;\n    my $valid_extension_letter_match\
    \ = 'No';\n    my $valid_extension_letter_match_count = 0;\n    my $valid_extension_letter_match_index\
    \ = 0;\n    my $valid_extension_letter_match_length = 0;\n    my $valid_extension_letter_match_letter\
    \ = '';\n    my $valid_extension_letter_match_letter_count = 0;\n    my $valid_extension_letter_match_letter_index\
    \ = 0;\n    my $valid_extension_letter_match_letter_length = 0;\n    my $valid_extension_letter_match_letter_match\
    \ = 'No';\n    my $valid_extension_letter_match_letter_match_count = 0;\n    my\
    \ $valid_extension_letter_match_letter_match_index = 0;\n    my $valid_extension_letter_match_letter_match_length\
    \ = 0;\n    my $valid_extension_letter_match_letter_match_letter = '';\n    my\
    \ $valid_extension_letter_match_letter_match_letter_count = 0;\n    my $valid_extension_letter_match_letter_match_letter_index\
    \ = 0;\n    my $valid_extension_letter_match_letter_match", "    my $result =\
    \ 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n \
    \       $result = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result\
    \ = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name\
    \ =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result = 'Yes';\n \
    \   }\n    return $result;\n}", "    my $count = 0;\n    my $dot_count = 0;\n\
    \    my $extension = \"\";\n    my $name = \"\";\n    my $is_valid = 0;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n  \
    \  my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n\
    \    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n\
    \    my $h = 0;\n    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n\
    \    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n\
    \    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n\
    \    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n\
    \    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n\
    \    my $Y = 0;\n    my $Z = 0;\n    my $zero = 0;\n    my $one = 0;\n    my $two\
    \ = 0;\n    my $three = 0;\n    my $four = 0;\n    my $five = 0;\n    my", " \
    \   my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/)\
    \ {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result\
    \ = 'No';\n    my $count = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n\
    \    my $substring_before_dot = '';\n    my $substring_after_dot = '';\n    my\
    \ $substring_after_dot_valid = 0;\n    my $substring_before_dot_valid = 0;\n \
    \   for(my $i = 0; $i < length($file_name); $i++) {\n        my $char = substr($file_name,\
    \ $i, 1);\n        if($char =~ /[0-9]/) {\n            $count++;\n        }\n\
    \        if($char eq '.') {\n            $dot_count++;\n            $dot_index\
    \ = $i;\n        }\n    }\n    if($dot_count == 1 && $count <= 3) {\n        $substring_before_dot\
    \ = substr($file_name, 0, $dot_index);\n        $substring_after_dot = substr($file_name,\
    \ $dot_index + 1);\n        if($substring_before_dot =~ /^[a-zA-Z]/ && $substring_before_dot\
    \ ne '') {\n            $substring_before_dot_valid = 1;\n        }\n        if($substring_after_dot\
    \ eq 'txt' || $substring_after_dot eq 'exe' || $substring_after_dot eq 'dll')\
    \ {\n            $substring_after_dot_valid = 1;\n        }\n        if($substring_before_dot_valid\
    \ && $substring_after_dot_valid) {\n            $result = 'Yes';\n        }\n\
    \    }\n    return $result;\n}", "    my $result = 'No';\n    my $count = 0;\n\
    \    my $dot_count = 0;\n    my $dot_index = -1;\n    my $substring_before_dot\
    \ = '';\n    my $substring_after_dot = '';\n    my $i = 0;\n    my $j = 0;\n \
    \   my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n\
    \    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n\
    \    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n\
    \    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n\
    \    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n\
    \    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n\
    \    my $Y = 0;\n    my $Z = 0;\n    my $zero = 0;\n    my $one = 0;\n    my $two\
    \ = 0;\n    my $three = 0;\n    my $four = 0;\n    my $five = 0;\n    my $six\
    \ = 0;\n    my $seven = 0;\n    my $eight = 0;\n    my $nine = 0;\n    my $dot\
    \ = 0;\n    my $txt = 0;", "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\\
    .(txt|exe|dll)$/) {\n        $result = 'Yes';\n    }\n    return $result;\n}",
  "    my $result = 'No';\n    my $count = 0;\n    my $dot_count = 0;\n    my $dot_index\
    \ = 0;\n    my $substring_before_dot = '';\n    my $substring_after_dot = '';\n\
    \    my $substring_after_dot_valid = 0;\n    my $substring_before_dot_valid =\
    \ 0;\n    my $substring_before_dot_start_with_letter = 0;\n    my $substring_before_dot_start_with_letter_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count = 0;\n    my\
    \ $substring_before_dot_start_with_letter_valid_count_valid = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_valid_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_valid_valid_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_valid_valid_valid_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_valid_valid_valid_valid_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_valid_valid_valid_valid_valid_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_valid_valid_valid_valid_valid_valid_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w+$/) {\n        my @parts = split(/\\\
    ./, $file_name);\n        if ($parts[0] =~ /\\d{4}/) {\n            $result =\
    \ 'No';\n        }\n        else {\n            if ($parts[1] =~ /^(txt|exe|dll)$/)\
    \ {\n                $result = 'Yes';\n            }\n        }\n    }\n    return\
    \ $result;\n}", "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\\
    .\\w+$/) {\n        my @parts = split(/\\./, $file_name);\n        if ($parts[0]\
    \ =~ /\\d{1,3}/) {\n            $result = 'No';\n        } else {\n          \
    \  if ($parts[1] eq 'txt' || $parts[1] eq 'exe' || $parts[1] eq 'dll') {\n   \
    \             $result = 'Yes';\n            }\n        }\n    }\n    return $result;\n\
    }", "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/)\
    \ {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    my $count\
    \ = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n    my $substring_before_dot\
    \ = '';\n    my $substring_after_dot = '';\n    my $is_valid = 'Yes';\n    for\
    \ (my $i = 0; $i < length($file_name); $i++) {\n        my $char = substr($file_name,\
    \ $i, 1);\n        if ($char =~ /[0-9]/) {\n            $count++;\n        }\n\
    \        if ($char eq '.') {\n            $dot_count++;\n            $dot_index\
    \ = $i;\n        }\n    }\n    if ($count > 3) {\n        $is_valid = 'No';\n\
    \    }\n    if ($dot_count != 1) {\n        $is_valid = 'No';\n    }\n    $substring_before_dot\
    \ = substr($file_name, 0, $dot_index);\n    $substring_after_dot = substr($file_name,\
    \ $dot_index + 1);\n    if ($substring_before_dot eq '' || $substring_before_dot\
    \ !~ /^[a-zA-Z]/) {\n        $is_valid = 'No';\n    }\n    if ($substring_after_dot\
    \ ne 'txt' && $substring_after_dot ne 'exe' && $substring_after_dot ne 'dll')\
    \ {\n        $is_valid = 'No';\n    }\n    return $is_valid;\n}", "    my $result\
    \ = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n\
    \        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w+$/) {\n        my @parts = split(/\\\
    ./, $file_name);\n        if ($parts[0] =~ /^[a-zA-Z]+\\w*$/ && $parts[1] =~ /^(txt|exe|dll)$/)\
    \ {\n            $result = 'Yes';\n        }\n    }\n    return $result;\n}",
  "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w+$/) {\n    \
    \    my @parts = split(/\\./, $file_name);\n        if ($parts[0] =~ /\\d{4}/)\
    \ {\n            $result = 'No';\n        }\n        elsif ($parts[1] =~ /^(txt|exe|dll)$/)\
    \ {\n            $result = 'Yes';\n        }\n    }\n    return $result;\n}",
  "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/)\
    \ {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result\
    \ = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w{3}$/) {\n        my $count\
    \ = $file_name =~ s/\\d//g;\n        if ($count <= 3) {\n            $result =\
    \ 'Yes';\n        }\n    }\n    return $result;\n}", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w+$/) {\n        my @parts = split /\\\
    ./, $file_name;\n        if ($parts[0] =~ /\\d{4,}/) {\n            $result =\
    \ 'No';\n        }\n        elsif ($parts[1] =~ /^(txt|exe|dll)$/) {\n       \
    \     $result = 'Yes';\n        }\n    }\n    return $result;\n}", "    my $result\
    \ = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n\
    \        $result = 'Yes';\n    }\n    return $result;\n}", "    my $dot_count\
    \ = 0;\n    my $digit_count = 0;\n    my $first_char = substr($file_name, 0, 1);\n\
    \    my $last_char = substr($file_name, -1, 1);\n    my $last_three_chars = substr($file_name,\
    \ -3, 3);\n    my $first_dot_index = index($file_name, '.');\n    my $last_dot_index\
    \ = rindex($file_name, '.');\n    my $substring_before_dot = substr($file_name,\
    \ 0, $first_dot_index);\n    my $substring_after_dot = substr($file_name, $last_dot_index\
    \ + 1);\n    my $is_valid = 0;\n    my $i = 0;\n    my $len = length($file_name);\n\
    \    my $ch = '';\n    my $result = 'No';", "    my $result = 'No';\n    if ($file_name\
    \ =~ /^[a-zA-Z]\\w*\\.\\w+$/) {\n        my $substring_before_dot = $`;\n    \
    \    my $substring_after_dot = $';\n        if ($substring_before_dot =~ /\\d/)\
    \ {\n            my $count = () = $substring_before_dot =~ /\\d/g;\n         \
    \   if ($count <= 3) {\n                if ($substring_after_dot =~ /^(txt|exe|dll)$/)\
    \ {\n                    $result = 'Yes';\n                }\n            }\n\
    \        }\n    }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name\
    \ =~ /^[a-zA-Z]\\w*\\.\\w+$/) {\n        my @parts = split(/\\./, $file_name);\n\
    \        if ($parts[0] =~ /\\d{4}/) {\n            $result = 'No';\n        }\n\
    \        elsif ($parts[1] =~ /^(txt|exe|dll)$/) {\n            $result = 'Yes';\n\
    \        }\n    }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name\
    \ =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result = 'Yes';\n \
    \   }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name =~\
    \ /^[a-zA-Z]\\w*\\.\\w+$/) {\n        my $count = ($file_name =~ s/\\d//g);\n\
    \        if ($count <= 3) {\n            my $ext = $file_name;\n            $ext\
    \ =~ s/.*\\.//;\n            if ($ext eq 'txt' || $ext eq 'exe' || $ext eq 'dll')\
    \ {\n                $result = 'Yes';\n            }\n        }\n    }\n    return\
    \ $result;\n}", "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\\
    .(txt|exe|dll)$/) {\n        my $substr = $file_name;\n        $substr =~ s/\\\
    .(txt|exe|dll)$//;\n        if ($substr =~ /^[a-zA-Z][a-zA-Z0-9]*$/) {\n     \
    \       $result = 'Yes';\n        }\n    }\n    return $result;\n}", "    my $result\
    \ = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w+$/) {\n        my @parts\
    \ = split(/\\./, $file_name);\n        if ($parts[0] =~ /^[a-zA-Z]\\w*$/ && $parts[1]\
    \ =~ /^(txt|exe|dll)$/) {\n            $result = 'Yes';\n        }\n    }\n  \
    \  return $result;\n}", "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\\
    w*\\.\\w*$/) {\n        my ($name, $ext) = split(/\\./, $file_name);\n       \
    \ if ($name =~ /^[a-zA-Z]\\w*$/ && $ext =~ /^(txt|exe|dll)$/) {\n            $result\
    \ = 'Yes';\n        }\n    }\n    return $result;\n}", "    if($file_name =~ /^[a-zA-Z]+[0-9]{0,3}\\\
    .txt$|^[a-zA-Z]+[0-9]{0,3}\\.exe$|^[a-zA-Z]+[0-9]{0,3}\\.dll$/){\n        return\
    \ \"Yes\";\n    }\n    else{\n        return \"No\";\n    }\n}", "    my $result\
    \ = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w+$/) {\n        my $before_dot\
    \ = $`;\n        my $after_dot = $';\n        if ($before_dot =~ /\\d/ && $before_dot\
    \ =~ /\\d{3}/) {\n            $result = 'No';\n        }\n        elsif ($after_dot\
    \ =~ /^txt$|^exe$|^dll$/) {\n            $result = 'Yes';\n        }\n    }\n\
    \    return $result;\n}", "    my $result = 'No';\n    my $count = 0;\n    my\
    \ $dot_count = 0;\n    my $extension = '';\n    my $name = '';\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n\
    \    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n\
    \    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n\
    \    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n\
    \    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n\
    \    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $a = 0;\n    my $b = 0;\n\
    \    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n\
    \    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $", "    my $result = 'No';\n    if ($file_name\
    \ =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result = 'Yes';\n \
    \   }\n    return $result;\n}", "    my $result = 'No';\n    my $count = 0;\n\
    \    my $dot_count = 0;\n    my $dot_index = 0;\n    my $extension = '';\n   \
    \ my $valid_extensions = ['txt', 'exe', 'dll'];\n    my $valid_extension = 0;\n\
    \    my $valid_name = 0;\n    my $valid_digits = 0;\n    my $name = '';\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n  \
    \  my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n\
    \    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n\
    \    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n\
    \    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n\
    \    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n\
    \    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $zero\
    \ = 0;\n    my $one = 0;\n    my $two = 0;\n    my $three = 0;\n    my $four =\
    \ 0;\n    my $five = 0;\n    my $six = 0", "    my $result = 'No';\n    if ($file_name\
    \ =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result = 'Yes';\n \
    \   }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name =~\
    \ /^[a-zA-Z]\\w*\\.\\w+$/) {\n        my @parts = split /\\./, $file_name;\n \
    \       my $ext = $parts[1];\n        if ($ext eq 'txt' || $ext eq 'exe' || $ext\
    \ eq 'dll') {\n            my $name = $parts[0];\n            if ($name =~ /^[a-zA-Z]\\\
    w*$/) {\n                $result = 'Yes';\n            }\n        }\n    }\n \
    \   return $result;\n}", "    my($dot_index) = index($file_name, '.');\n    my($substring_before_dot)\
    \ = substr($file_name, 0, $dot_index);\n    my($substring_after_dot) = substr($file_name,\
    \ $dot_index + 1);\n    my($num_of_digits) = $file_name =~ tr/0-9//;\n    my($num_of_dots)\
    \ = $file_name =~ tr/.//;\n    if ($num_of_digits > 3 || $num_of_dots != 1 ||\
    \ $substring_before_dot !~ /^[a-zA-Z]/ ||\n        $substring_after_dot !~ /^(txt|exe|dll)$/)\
    \ {\n        return 'No';\n    }\n    return 'Yes';\n}", "    my $result = 'No';\n\
    \    my $count = 0;\n    my $dot_count = 0;\n    my $dot_index = -1;\n    my $extension\
    \ = '';\n    my $substring = '';\n    my $substring_length = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n\
    \    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n\
    \    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n\
    \    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n\
    \    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n\
    \    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $zero = 0;\n    my $one\
    \ = 0;\n    my $two = 0;\n    my $three = 0;\n    my $four = 0;\n    my $five\
    \ = 0;\n    my $six = 0;\n    my $seven = 0;\n    my $eight = 0;\n    my $nine\
    \ = 0;\n    my $dot = 0;\n    my $txt", "    my $result = 'No';\n    my $count\
    \ = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n    my $sub_string_after_dot\
    \ = '';\n    my $sub_string_before_dot = '';\n    my $sub_string_before_dot_first_char\
    \ = '';\n    my $sub_string_before_dot_first_char_ascii = 0;\n    my $sub_string_before_dot_first_char_ascii_lower\
    \ = 0;\n    my $sub_string_before_dot_first_char_ascii_upper = 0;\n    my $sub_string_before_dot_first_char_ascii_lower_range_start\
    \ = 97;\n    my $sub_string_before_dot_first_char_ascii_lower_range_end = 122;\n\
    \    my $sub_string_before_dot_first_char_ascii_upper_range_start = 65;\n    my\
    \ $sub_string_before_dot_first_char_ascii_upper_range_end = 90;\n    my $sub_string_before_dot_first_char_ascii_range_start\
    \ = 0;\n    my $sub_string_before_dot_first_char_ascii_range_end = 0;\n    my\
    \ $sub_string_before_dot_first_char_ascii_range_start_valid = 0;\n    my $sub_string_before_dot_first_char_ascii_range_end_valid\
    \ = 0;\n    my $sub_string_before_dot_first_char_ascii_range_start_valid_count\
    \ = 0;\n    my $sub_string_before_dot_first_char_ascii_range_end_valid_count =\
    \ 0;\n    my $sub_string_before_dot_first_char_ascii_range_start_valid_count_max\
    \ = 1;\n    my $sub_string_before_dot_first_char_ascii_range_end_valid_count_max\
    \ = 1;\n    my $sub_string_before_dot_first_char", "    # your code here\n}",
  "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/)\
    \ {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    if ($file_name\
    \ =~ /^[a-zA-Z]\\w*\\.\\w{3}$/ && $file_name !~ /\\d{4}/) {\n        return 'Yes';\n\
    \    }\n    return 'No';\n}", "    my $result = 'No';\n    my @parts = split(/\\\
    ./, $file_name);\n    if (scalar(@parts) == 2) {\n        my $first_part = $parts[0];\n\
    \        my $second_part = $parts[1];\n        if ($first_part =~ /^[a-zA-Z]+$/\
    \ && $second_part =~ /^(txt|exe|dll)$/) {\n            my $count = $first_part\
    \ =~ tr/0-9//;\n            if ($count <= 3) {\n                $result = 'Yes';\n\
    \            }\n        }\n    }\n    return $result;\n}", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z]\\w*\\.txt$/ || $file_name =~ /^[a-zA-Z]\\w*\\\
    .exe$/ || $file_name =~ /^[a-zA-Z]\\w*\\.dll$/) {\n        $result = 'Yes';\n\
    \    }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name =~\
    \ /^[a-zA-Z]\\w*\\.\\w*$/) {\n        my @parts = split(/\\./, $file_name);\n\
    \        if ($parts[0] =~ /^[a-zA-Z]\\w*$/ and $parts[1] =~ /^(txt|exe|dll)$/)\
    \ {\n            $result = 'Yes';\n        }\n    }\n    return $result;\n}",
  "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/)\
    \ {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result\
    \ = 'No';\n    my $count = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n\
    \    my $substring_before_dot = '';\n    my $substring_after_dot = '';\n    my\
    \ @valid_substrings_after_dot = ('txt', 'exe', 'dll');\n    my $valid_substring_after_dot\
    \ = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $valid_substring_after_dot_count\
    \ = 0;\n    my $valid_substring_after_dot_length = 0;\n    my $substring_after_dot_length\
    \ = 0;\n    my $substring_after_dot_char = '';\n    my $valid_substring_after_dot_char\
    \ = '';\n    my $valid_substring_after_dot_char_count = 0;\n    my $valid_substring_after_dot_char_count_max\
    \ = 0;\n    my $valid_substring_after_dot_char_count_max_index = 0;\n    my $valid_substring_after_dot_char_count_max_length\
    \ = 0;\n    my $valid_substring_after_dot_char_count_max_length_index = 0;\n \
    \   my $valid_substring_after_dot_char_count_max_length_index_length = 0;\n  \
    \  my $valid_substring_after_dot_char_count_max_length_index_length_index = 0;\n\
    \    my $valid_substring_after_dot_char_count_max_length_index_length_index_length\
    \ = 0;\n    my $valid_substring_after_dot_char_count_max_length_index_length_index_length_index\
    \ = 0;\n    my $valid_substring_after_dot_char_count_max_length_index_length_index_length_index_length\
    \ = 0;\n    my $valid_substring_after_dot_char_count_max_length_index_length_index_length_index_length_index\
    \ = 0;\n    my $", "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\\
    w*\\.\\w+$/) {\n        my $ext = $file_name;\n        $ext =~ s/.*\\.//;\n  \
    \      if ($ext =~ /^(txt|exe|dll)$/) {\n            my $name = $file_name;\n\
    \            $name =~ s/\\.\\w+$//;\n            if ($name =~ /^[a-zA-Z]\\w*$/)\
    \ {\n                $result = 'Yes';\n            }\n        }\n    }\n    return\
    \ $result;\n}", "    my $regex = qr/^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[txt|exe|dll]$/;\n\
    \    if ($file_name =~ $regex) {\n        return 'Yes';\n    }\n    return 'No';\n\
    }", "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/)\
    \ {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result\
    \ = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w+$/) {\n        my @parts\
    \ = split(/\\./, $file_name);\n        my $ext = $parts[1];\n        if ($ext\
    \ =~ /^(txt|exe|dll)$/) {\n            my $name = $parts[0];\n            if ($name\
    \ =~ /^[a-zA-Z]\\w*$/) {\n                $result = 'Yes';\n            }\n  \
    \      }\n    }\n    return $result;\n}", "    my $regex = qr/^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[txt|exe|dll]$/;\n    if ($file_name =~ $regex) {\n        return 'Yes';\n  \
    \  }\n    return 'No';\n}", "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\\
    w*\\.\\w{3}$/) {\n        my $before_dot = $`;\n        my $after_dot = $';\n\
    \        if ($before_dot =~ /\\d/ || $after_dot =~ /\\d/) {\n            $result\
    \ = 'No';\n        }\n        else {\n            $result = 'Yes';\n        }\n\
    \    }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name =~\
    \ /^[a-zA-Z]\\w*\\.txt$|^[a-zA-Z]\\w*\\.exe$|^[a-zA-Z]\\w*\\.dll$/) {\n      \
    \  $result = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n\
    \    my $count = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n    my $extension\
    \ = '';\n    my $substring = '';\n    my $substring_count = 0;\n    my $substring_index\
    \ = 0;\n    my $substring_length = 0;\n    my $substring_start = 0;\n    my $substring_end\
    \ = 0;\n    my $substring_valid = 0;\n    my $substring_valid_count = 0;\n   \
    \ my $substring_valid_index = 0;\n    my $substring_valid_length = 0;\n    my\
    \ $substring_valid_start = 0;\n    my $substring_valid_end = 0;\n    my $substring_valid_extension\
    \ = '';\n    my $substring_valid_extension_count = 0;\n    my $substring_valid_extension_index\
    \ = 0;\n    my $substring_valid_extension_length = 0;\n    my $substring_valid_extension_start\
    \ = 0;\n    my $substring_valid_extension_end = 0;\n    my $substring_valid_extension_valid\
    \ = 0;\n    my $substring_valid_extension_valid_count = 0;\n    my $substring_valid_extension_valid_index\
    \ = 0;\n    my $substring_valid_extension_valid_length = 0;\n    my $substring_valid_extension_valid_start\
    \ = 0;\n    my $substring_valid_extension_valid_end = 0;\n    my $substring_valid_extension_valid_valid\
    \ = 0;\n    my $substring_valid_extension_valid_valid_count = 0;\n    my $substring_valid_extension_valid_valid_index\
    \ = 0;\n    my $substring_valid_extension_valid_valid_length = 0;\n    my $substring_valid_extension_valid_valid_start\
    \ = 0;\n    my $substring_valid_extension_valid_valid_end = 0;\n    my $substring_valid",
  "    my $result = 'No';\n    my $count = 0;\n    my $dot_count = 0;\n    my $dot_index\
    \ = 0;\n    my $extension = '';\n    my $substring = '';\n    my $substring_count\
    \ = 0;\n    my $substring_count_before_dot = 0;\n    my $substring_count_after_dot\
    \ = 0;\n    my $substring_count_before_dot_valid = 0;\n    my $substring_count_after_dot_valid\
    \ = 0;\n    my $substring_count_before_dot_valid_count = 0;\n    my $substring_count_after_dot_valid_count\
    \ = 0;\n    my $substring_count_before_dot_valid_count_valid = 0;\n    my $substring_count_after_dot_valid_count_valid\
    \ = 0;\n    my $substring_count_before_dot_valid_count_valid_valid = 0;\n    my\
    \ $substring_count_after_dot_valid_count_valid_valid = 0;\n    my $substring_count_before_dot_valid_count_valid_valid_valid\
    \ = 0;\n    my $substring_count_after_dot_valid_count_valid_valid_valid = 0;\n\
    \    my $substring_count_before_dot_valid_count_valid_valid_valid_valid = 0;\n\
    \    my $substring_count_after_dot_valid_count_valid_valid_valid_valid = 0;\n\
    \    my $substring_count_before_dot_valid_count_valid_valid_valid_valid_valid\
    \ = 0;\n    my $substring_count_after_dot_valid_count_valid_valid_valid_valid_valid\
    \ = 0;\n    my $substring_count_before_dot_valid_count_valid_valid_valid_valid_valid_valid\
    \ = 0;\n    my $substring_count_after_dot_valid_count_valid_valid_valid_valid_valid_valid\
    \ = 0;\n    my $substring_count_before_dot_valid_count_valid_valid_valid_valid_valid_valid_valid\
    \ = 0", "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\\
    .(txt|exe|dll)$/) {\n        $result = 'Yes';\n    }\n    return $result;\n}",
  "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/)\
    \ {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result\
    \ = 'No';\n    my $count_digits = ($file_name =~ tr/0-9//);\n    my $count_dots\
    \ = ($file_name =~ tr/.//);\n    my @parts = split(/\\./, $file_name);\n    if\
    \ ($count_digits <= 3 && $count_dots == 1 && $parts[0] =~ /^[a-zA-Z]/ && $parts[1]\
    \ =~ /^(txt|exe|dll)$/) {\n        $result = 'Yes';\n    }\n    return $result;\n\
    }", "    my $result = 'No';\n    my $count = 0;\n    my $dot_count = 0;\n    my\
    \ $dot_index = -1;\n    my $substring_after_dot = '';\n    my $substring_before_dot\
    \ = '';\n    my $substring_before_dot_is_valid = 0;\n    my $substring_after_dot_is_valid\
    \ = 0;\n    my $substring_before_dot_is_empty = 1;\n    my $substring_after_dot_is_empty\
    \ = 1;\n    my @valid_substrings_after_dot = ('txt', 'exe', 'dll');\n    my $i\
    \ = 0;\n    my $j = 0;\n    for($i = 0; $i < length($file_name); $i++) {\n   \
    \     if(substr($file_name, $i, 1) =~ /[0-9]/) {\n            $count++;\n    \
    \    }\n        if(substr($file_name, $i, 1) eq '.') {\n            $dot_count++;\n\
    \            $dot_index = $i;\n        }\n    }\n    if($dot_count == 1 && $count\
    \ <= 3) {\n        $substring_before_dot = substr($file_name, 0, $dot_index);\n\
    \        $substring_after_dot = substr($file_name, $dot_index + 1);\n        if(length($substring_before_dot)\
    \ > 0) {\n            $substring_before_dot_is_empty = 0;\n        }\n       \
    \ if(length($substring_after_dot) > 0) {\n            $substring_after_dot_is_empty\
    \ = 0;\n        }\n        if(substr($substring_before_dot, 0, 1) =~ /[a-zA-Z]/)\
    \ {\n            $substring_before_dot_is_valid = 1;\n        }\n        for($j\
    \ = 0; $j < scalar(@valid_substrings_after_dot); $j++) {\n            if($substring_after_dot\
    \ eq $valid_substrings_after_dot[$j]) {\n                $substring_", "    my\
    \ $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/)\
    \ {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result\
    \ = 'No';\n    my $count = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n\
    \    my $extension = '';\n    my $extension_valid = 0;\n    my $extension_list\
    \ = ['txt', 'exe', 'dll'];\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n \
    \   my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n\
    \    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n\
    \    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n\
    \    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n\
    \    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n\
    \    my $Z = 0;\n    my $zero = 0;\n    my $one = 0;\n    my $two = 0;\n    my\
    \ $three = 0;\n    my $four = 0;\n    my $five = 0;\n    my $six = 0;\n    my\
    \ $seven = 0;\n    my $eight = 0;\n    my $nine = 0;\n    my $", "    my $result\
    \ = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w{3}$/) {\n        my $count\
    \ = $file_name =~ tr/0-9//;\n        if ($count <= 3) {\n            $result =\
    \ 'Yes';\n        }\n    }\n    return $result;\n}", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result\
    \ = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n    my $count\
    \ = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n    my $substring_before_dot\
    \ = '';\n    my $substring_after_dot = '';\n    my $substring_after_dot_valid\
    \ = 0;\n    my $substring_before_dot_valid = 0;\n    my $substring_before_dot_first_char_valid\
    \ = 0;\n    my $substring_before_dot_first_char_index = 0;\n    my $substring_before_dot_first_char\
    \ = '';\n    my $substring_before_dot_first_char_ascii = 0;\n    my $substring_before_dot_first_char_ascii_valid\
    \ = 0;\n    my $substring_before_dot_first_char_ascii_valid_lower = 0;\n    my\
    \ $substring_before_dot_first_char_ascii_valid_upper = 0;\n    my $substring_before_dot_first_char_ascii_valid_lower_min\
    \ = 97;\n    my $substring_before_dot_first_char_ascii_valid_lower_max = 122;\n\
    \    my $substring_before_dot_first_char_ascii_valid_upper_min = 65;\n    my $substring_before_dot_first_char_ascii_valid_upper_max\
    \ = 90;\n    my $substring_before_dot_first_char_ascii_valid_lower_min_ascii =\
    \ 'a';\n    my $substring_before_dot_first_char_ascii_valid_lower_max_ascii =\
    \ 'z';\n    my $substring_before_dot_first_char_ascii_valid_upper_min_ascii =\
    \ 'A';\n    my $substring_before_dot_first_char_ascii_valid_upper_max_ascii =\
    \ 'Z';\n    my $substring_before_dot_first_char_ascii_valid_lower_min_ascii_ord\
    \ = ord($sub", "    my $result = 'No';\n    my $count = 0;\n    my $dot_count\
    \ = 0;\n    my $extension = '';\n    my $name = '';\n    my @extensions = ('txt',\
    \ 'exe', 'dll');\n    for(my $i = 0; $i < length($file_name); $i++) {\n      \
    \  my $char = substr($file_name, $i, 1);\n        if($char =~ /[0-9]/) {\n   \
    \         $count++;\n        }\n        if($char eq '.') {\n            $dot_count++;\n\
    \        }\n    }\n    if($dot_count == 1 && $count <= 3) {\n        my @parts\
    \ = split('\\.', $file_name);\n        $name = $parts[0];\n        $extension\
    \ = $parts[1];\n        if($name =~ /^[a-zA-Z]/ && grep(/^$extension$/, @extensions))\
    \ {\n            $result = 'Yes';\n        }\n    }\n    return $result;\n}",
  "    my $result = 'No';\n    if($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/){\n\
    \        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result\
    \ = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n    my $count\
    \ = 0;\n    my $dot_count = 0;\n    my $substring_before_dot = '';\n    my $substring_after_dot\
    \ = '';\n    my $substring_after_dot_valid = 0;\n    my $substring_before_dot_valid\
    \ = 0;\n    my $substring_before_dot_first_char_valid = 0;\n    my $substring_before_dot_first_char\
    \ = '';\n    my $substring_before_dot_first_char_ascii = 0;\n    my $substring_before_dot_first_char_ascii_valid\
    \ = 0;\n    my $substring_before_dot_first_char_ascii_valid_lower = 0;\n    my\
    \ $substring_before_dot_first_char_ascii_valid_upper = 0;\n    my $substring_before_dot_first_char_ascii_valid_lower_min\
    \ = 97;\n    my $substring_before_dot_first_char_ascii_valid_lower_max = 122;\n\
    \    my $substring_before_dot_first_char_ascii_valid_upper_min = 65;\n    my $substring_before_dot_first_char_ascii_valid_upper_max\
    \ = 90;\n    my $substring_before_dot_first_char_ascii_valid_lower_min_ascii =\
    \ chr($substring_before_dot_first_char_ascii_valid_lower_min);\n    my $substring_before_dot_first_char_ascii_valid_lower_max_ascii\
    \ = chr($substring_before_dot_first_char_ascii_valid_lower_max);\n    my $substring_before_dot_first_char_ascii_valid_upper_min_ascii\
    \ = chr($substring_before_dot_first_char_ascii_valid_upper_min);\n    my $substring_before_dot_first_char_ascii_valid_upper_max_ascii\
    \ = chr($", "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\\
    .(txt|exe|dll)$/) {\n        $result = 'Yes';\n    }\n    return $result;\n}",
  "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/)\
    \ {\n        my $count = $file_name =~ tr/0-9//;\n        if ($count <= 3) {\n\
    \            $result = 'Yes';\n        }\n    }\n    return $result;\n}", "  \
    \  # TODO: Implement this function\n}", "    my $result = 'No';\n    my $count\
    \ = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n    my $extension = '';\n\
    \    my $valid_extensions = ['txt', 'exe', 'dll'];\n    my $valid_extensions_regex\
    \ = join('|', @$valid_extensions);\n    my $regex = qr/^[a-zA-Z]\\w*\\.$valid_extensions_regex$/;\n\
    \    if ($file_name =~ $regex) {\n        $result = 'Yes';\n    }\n    return\
    \ $result;\n}", "    my $result = 'No';\n    my $count = 0;\n    my $dot_count\
    \ = 0;\n    my $dot_index = 0;\n    my $substring_before_dot = '';\n    my $substring_after_dot\
    \ = '';\n    my $substring_after_dot_valid = 0;\n    my $substring_before_dot_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter = 0;\n    my $substring_before_dot_start_with_letter_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count = 0;\n    my\
    \ $substring_before_dot_start_with_letter_valid_count_valid = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_valid_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_valid_valid_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_valid_valid_valid_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_valid_valid_valid_valid_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_valid_valid_valid_valid_valid_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter_valid_count_valid_count_valid_valid_valid_valid_valid_valid_valid_valid\
    \ = 0;\n    my $substring_before_dot_start_with_letter", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w*$/) {\n        my @parts = split(/\\\
    ./, $file_name);\n        if ($parts[0] =~ /^[a-zA-Z]\\w*$/ && $parts[1] =~ /^(txt|exe|dll)$/)\
    \ {\n            $result = 'Yes';\n        }\n    }\n    return $result;\n}",
  "    my $valid = 'No';\n    my $count = 0;\n    my $dot_count = 0;\n    my $dot_index\
    \ = 0;\n    my $extension = '';\n    my $name = '';\n    if($file_name =~ /^[a-zA-Z]/){\n\
    \        for(my $i = 0; $i < length($file_name); $i++){\n            if(substr($file_name,\
    \ $i, 1) =~ /[0-9]/){\n                $count++;\n            }\n            if(substr($file_name,\
    \ $i, 1) eq '.'){\n                $dot_count++;\n                $dot_index =\
    \ $i;\n            }\n        }\n        if($count <= 3 && $dot_count == 1){\n\
    \            $extension = substr($file_name, $dot_index + 1);\n            $name\
    \ = substr($file_name, 0, $dot_index);\n            if($extension eq 'txt' ||\
    \ $extension eq 'exe' || $extension eq 'dll'){\n                $valid = 'Yes';\n\
    \            }\n        }\n    }\n    return $valid;\n}", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result\
    \ = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n    my $count\
    \ = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n    my $extension = '';\n\
    \    my $extension_list = ['txt', 'exe', 'dll'];\n    my $extension_list_length\
    \ = scalar @$extension_list;\n    my $i = 0;\n    my $file_name_length = length\
    \ $file_name;\n    my $is_valid = 0;\n    my $is_valid_extension = 0;\n    my\
    \ $is_valid_name = 0;\n    my $is_valid_number = 0;\n    my $is_valid_start =\
    \ 0;\n    my $name = '';\n    my $name_length = 0;\n    my $number_count = 0;\n\
    \    my $number_count_max = 3;\n    my $number_count_max_length = length $number_count_max;\n\
    \    my $number_count_max_string = '';\n    my $number_count_string = '';\n  \
    \  my $number_count_string_length = 0;\n    my $number_count_string_length_max\
    \ = 0;\n    my $number_count_string_length_max_length = 0;\n    my $number_count_string_length_max_string\
    \ = '';\n    my $number_count_string_length_string = '';\n    my $number_count_string_length_string_length\
    \ = 0;\n    my $number_count_string_length_string_length_max = 0;\n    my $number_count_string_length_string_length_max_length\
    \ = 0;\n    my $number_count_string_length_string_length_max_string = '';\n  \
    \  my $number_count_string_length_string_length_string = '';\n    my $number_count_string_length_string_length_string_length\
    \ = 0;\n    my $number_count_string_length_string_length_string_length_max = 0;\n\
    \    my $number_count_string_length_string_length_string_length_max_length = 0;\n\
    \   ", "    my $result = 'No';\n    my $count = 0;\n    my $dot_count = 0;\n \
    \   my $dot_index = 0;\n    my $substring_before_dot = '';\n    my $substring_after_dot\
    \ = '';\n    my @valid_substrings_after_dot = ('txt', 'exe', 'dll');\n    my $valid_substring_after_dot\
    \ = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my\
    \ $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n  \
    \  my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n\
    \    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n\
    \    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n\
    \    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n\
    \    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n\
    \    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n\
    \    my $zero = 0;\n    my $one = 0;\n    my $two = 0;\n    my $three = 0;\n \
    \   my $four = 0;\n    my $five = 0;\n    my $six = 0;\n    my $", "    my $result\
    \ = 'No';\n    my $count = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n\
    \    my $extension = '';\n    my $substring = '';\n    my $substring_count = 0;\n\
    \    my $substring_index = 0;\n    my $substring_length = 0;\n    my $substring_valid\
    \ = 0;\n    my $substring_valid_count = 0;\n    my $substring_valid_index = 0;\n\
    \    my $substring_valid_length = 0;\n    my $substring_valid_length_count = 0;\n\
    \    my $substring_valid_length_index = 0;\n    my $substring_valid_length_length\
    \ = 0;\n    my $substring_valid_length_length_count = 0;\n    my $substring_valid_length_length_index\
    \ = 0;\n    my $substring_valid_length_length_length = 0;\n    my $substring_valid_length_length_length_count\
    \ = 0;\n    my $substring_valid_length_length_length_index = 0;\n    my $substring_valid_length_length_length_length\
    \ = 0;\n    my $substring_valid_length_length_length_length_count = 0;\n    my\
    \ $substring_valid_length_length_length_length_index = 0;\n    my $substring_valid_length_length_length_length_length\
    \ = 0;\n    my $substring_valid_length_length_length_length_length_count = 0;\n\
    \    my $substring_valid_length_length_length_length_length_index = 0;\n    my\
    \ $substring_valid_length_length_length_length_length_length = 0;\n    my $substring_valid_length_length_length_length_length_length_count\
    \ = 0;\n    my $substring_valid_length_length_length_length_length_length_index\
    \ = 0;\n    my $substring_valid_length_length_length_length_length_length_length\
    \ = 0;\n    my $substring_valid_length_length_length", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z][\\w]*\\.(txt|exe|dll)$/) {\n        my $num_digits\
    \ = $file_name =~ tr/0-9//;\n        if ($num_digits <= 3) {\n            $result\
    \ = 'Yes';\n        }\n    }\n    return $result;\n}", "    my @parts = split\
    \ /\\./, $file_name;\n    if (scalar @parts != 2) {\n        return 'No';\n  \
    \  }\n    my $ext = $parts[1];\n    if ($ext ne 'txt' && $ext ne 'exe' && $ext\
    \ ne 'dll') {\n        return 'No';\n    }\n    my $name = $parts[0];\n    if\
    \ ($name =~ /\\d{4,}/) {\n        return 'No';\n    }\n    if ($name !~ /^[a-zA-Z]/)\
    \ {\n        return 'No';\n    }\n    return 'Yes';\n}", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result\
    \ = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name\
    \ =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result = 'Yes';\n \
    \   }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name =~\
    \ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result = 'Yes';\n    }\n\
    \    return $result;\n}", "    my $result = 'No';\n    my $count_digits = 0;\n\
    \    my $count_dots = 0;\n    my $dot_index = 0;\n    my $substring_before_dot\
    \ = '';\n    my $substring_after_dot = '';\n    my $i = 0;\n    my $len = length($file_name);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        my $ch = substr($file_name, $i,\
    \ 1);\n        if ($ch =~ /[0-9]/) {\n            $count_digits++;\n        }\n\
    \        if ($ch eq '.') {\n            $count_dots++;\n            $dot_index\
    \ = $i;\n        }\n    }\n    if ($count_digits <= 3 && $count_dots == 1) {\n\
    \        $substring_before_dot = substr($file_name, 0, $dot_index);\n        $substring_after_dot\
    \ = substr($file_name, $dot_index + 1);\n        if ($substring_before_dot =~\
    \ /^[a-zA-Z]/ && $substring_after_dot =~ /^(txt|exe|dll)$/) {\n            $result\
    \ = 'Yes';\n        }\n    }\n    return $result;\n}", "    my $result = 'No';\n\
    \    my $count = 0;\n    my $dot_count = 0;\n    my $dot_index = 0;\n    my $substring_before_dot\
    \ = '';\n    my $substring_after_dot = '';\n    my @substring_after_dot_array\
    \ = ('txt', 'exe', 'dll');\n    my $substring_after_dot_index = 0;\n    my $substring_after_dot_found\
    \ = 0;\n    my $substring_after_dot_found_index = 0;\n    my $substring_after_dot_found_count\
    \ = 0;\n    my $substring_after_dot_found_count_index = 0;\n    my $substring_after_dot_found_count_index_char\
    \ = '';\n    my $substring_after_dot_found_count_index_char_ascii = 0;\n    my\
    \ $substring_after_dot_found_count_index_char_ascii_is_digit = 0;\n    my $substring_after_dot_found_count_index_char_ascii_is_digit_count\
    \ = 0;\n    my $substring_after_dot_found_count_index_char_ascii_is_digit_count_index\
    \ = 0;\n    my $substring_after_dot_found_count_index_char_ascii_is_digit_count_index_char\
    \ = '';\n    my $substring_after_dot_found_count_index_char_ascii_is_digit_count_index_char_ascii\
    \ = 0;\n    my $substring_after_dot_found_count_index_char_ascii_is_digit_count_index_char_ascii_is_digit\
    \ = 0;\n    my $substring_after_dot_found_count_index_char_ascii_is_digit_count_index_char_ascii_is_digit_count\
    \ = 0;\n    my $substring_after_dot_found_count_index_char_ascii_is_digit_count_index_char_ascii_is_digit_count_",
  "    my $result = 'No';\n    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/)\
    \ {\n        $result = 'Yes';\n    }\n    return $result;\n}", "    my $result\
    \ = 'No';\n    if ($file_name =~ /^[a-zA-Z]\\w*\\.\\w+$/) {\n        my @parts\
    \ = split(/\\./, $file_name);\n        if ($parts[0] =~ /\\d{4}/) {\n        \
    \    $result = 'No';\n        } else {\n            if ($parts[1] eq 'txt' ||\
    \ $parts[1] eq 'exe' || $parts[1] eq 'dll') {\n                $result = 'Yes';\n\
    \            }\n        }\n    }\n    return $result;\n}", "    my $result = 'No';\n\
    \    if ($file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result\
    \ = 'Yes';\n    }\n    return $result;\n}", "    my $result = 'No';\n    if ($file_name\
    \ =~ /^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$/) {\n        $result = 'Yes';\n \
    \   }\n    return $result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
