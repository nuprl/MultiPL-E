language: pl
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        my $num = $arr->[$i];\n        if(scalar(@res) < $k)\
    \ {\n            push @res, $num;\n            next;\n        }\n        my $min\
    \ = $res[0];\n        if($num > $min) {\n            shift @res;\n           \
    \ push @res, $num;\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @res = ();\n    for (my $i = 0;\
    \ $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my $index = $i;\n \
    \       for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $index = $j;\n      \
    \      }\n        }\n        $res[$i] = $max;\n        $arr->[$index] = $arr->[$i];\n\
    \        $arr->[$i] = $max;\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    my $p = $n - $k;\n    while ($i < $j) {\n        my $m = partition($arr,\
    \ $i, $j);\n        if ($m == $p) {\n            last;\n        } elsif ($m <\
    \ $p) {\n            $i = $m + 1;\n        } else {\n            $j = $m - 1;\n\
    \        }\n    }\n    my @res = ();\n    for (my $i = $n - $k; $i < $n; $i++)\
    \ {\n        push @res, $arr->[$i];\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmp7g1dnqsi.pl line
    23.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    if ($len == 0) {\n\
    \        return @res;\n    }\n    if ($len <= $k) {\n        return sort {$b <=>\
    \ $a} @$arr;\n    }\n    my $i = 0;\n    while ($i < $k) {\n        $res[$i] =\
    \ $arr->[$i];\n        $i++;\n    }\n    @res = sort {$b <=> $a} @res;\n    while\
    \ ($i < $len) {\n        my $j = 0;\n        while ($j < $k) {\n            if\
    \ ($arr->[$i] > $res[$j]) {\n                my $tmp = $res[$j];\n           \
    \     $res[$j] = $arr->[$i];\n                $arr->[$i] = $tmp;\n           \
    \     last;\n            }\n            $j++;\n        }\n        $i++;\n    }\n\
    \    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: -1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $max = $arr->[0];\n    my $max_idx\
    \ = 0;\n    for(my $i = 1; $i < $n; $i++) {\n        if($arr->[$i] > $max) {\n\
    \            $max = $arr->[$i];\n            $max_idx = $i;\n        }\n    }\n\
    \    my $res = [$max];\n    my $res_idx = 1;\n    my $idx = $max_idx;\n    while($res_idx\
    \ < $k) {\n        $idx = ($idx + 1) % $n;\n        if($arr->[$idx] > $res->[$res_idx\
    \ - 1]) {\n            $res->[$res_idx] = $arr->[$idx];\n            $res_idx++;\n\
    \        }\n    }\n    return $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660012783
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while ($i < $j) {\n        my $p = partition($arr, $i, $j);\n        if ($p\
    \ == $k - 1) {\n            last;\n        } elsif ($p < $k - 1) {\n         \
    \   $i = $p + 1;\n        } else {\n            $j = $p - 1;\n        }\n    }\n\
    \    return [@$arr[0..$k-1]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5],\
    \ 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpyo6m063p.pl line
    22.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @result;\n    my $n = scalar(@$arr);\n    if ($k == 0) {\n\
    \        return @result;\n    }\n    if ($k == $n) {\n        return @$arr;\n\
    \    }\n    my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[$i];\n\
    \        my $max_index = $i;\n        for (my $j = $i + 1; $j < $n; $j++) {\n\
    \            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n  \
    \              $max_index = $j;\n            }\n        }\n        $result[$i]\
    \ = $max;\n        $arr->[$max_index] = $arr->[$i];\n        $i++;\n    }\n  \
    \  return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $len = scalar(@$arr);\n    my @res = ();\n    for(my $i =\
    \ 0; $i < $len; $i++) {\n        if(scalar(@res) < $k) {\n            push @res,\
    \ $arr->[$i];\n        } else {\n            my $min = $res[0];\n            my\
    \ $min_idx = 0;\n            for(my $j = 1; $j < $k; $j++) {\n               \
    \ if($res[$j] < $min) {\n                    $min = $res[$j];\n              \
    \      $min_idx = $j;\n                }\n            }\n            if($arr->[$i]\
    \ > $min) {\n                $res[$min_idx] = $arr->[$i];\n            }\n   \
    \     }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i+1..$#$arr) {\n            if\
    \ ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n                $max_idx\
    \ = $j;\n            }\n        }\n        $res[$i] = $max;\n        ($arr->[$i],\
    \ $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: -1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $len = scalar(@$arr);\n    my $i = 0;\n    while ($i < $len)\
    \ {\n        my $j = $i;\n        while ($j < $len && $arr->[$j] > $arr->[$i])\
    \ {\n            $j++;\n        }\n        if ($j - $i >= $k) {\n            return\
    \ [@$arr[$i..$i+$k-1]];\n        }\n        $i = $j;\n    }\n    return [@$arr[$len-$k..$len-1]];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660012783
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @res = ();\n    for (my $i = 0;\
    \ $i < $k; $i++) {\n        my $max = -1e9;\n        my $idx = -1;\n        for\
    \ (my $j = 0; $j < $n; $j++) {\n            if ($arr->[$j] > $max) {\n       \
    \         $max = $arr->[$j];\n                $idx = $j;\n            }\n    \
    \    }\n        push @res, $max;\n        $arr->[$idx] = -1e9;\n    }\n    return\
    \ @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i+1..$#$arr) {\n            if\
    \ ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n                $max_idx\
    \ = $j;\n            }\n        }\n        $res[$i] = $max;\n        ($arr->[$i],\
    \ $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @result;\n    my $len = scalar(@$arr);\n    for(my $i = 0;\
    \ $i < $len; $i++) {\n        my $num = $arr->[$i];\n        if($i < $k) {\n \
    \           push @result, $num;\n            if($i == $k - 1) {\n            \
    \    @result = sort {$b <=> $a} @result;\n            }\n        } else {\n  \
    \          if($num > $result[0]) {\n                shift @result;\n         \
    \       push @result, $num;\n                @result = sort {$b <=> $a} @result;\n\
    \            }\n        }\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while($i < $j) {\n        my $m = partition($arr, $i, $j);\n        if($m\
    \ == $k - 1) {\n            last;\n        }\n        elsif($m < $k - 1) {\n \
    \           $i = $m + 1;\n        }\n        else {\n            $j = $m - 1;\n\
    \        }\n    }\n    return [@$arr[0..$k-1]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmp5rqmyw_u.pl line
    22.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    my $m = $k - 1;\n    while ($i < $j) {\n        my $p = partition($arr, $i,\
    \ $j);\n        if ($p == $m) {\n            last;\n        } elsif ($p < $m)\
    \ {\n            $i = $p + 1;\n        } else {\n            $j = $p - 1;\n  \
    \      }\n    }\n    return [@$arr[0..$m]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpixdq9mpf.pl line
    23.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $len = scalar(@$arr);\n    my @res = ();\n    for(my $i =\
    \ 0; $i < $len; $i++) {\n        my $num = $arr->[$i];\n        if(scalar(@res)\
    \ < $k) {\n            push @res, $num;\n            next;\n        }\n      \
    \  my $min = $res[0];\n        my $min_index = 0;\n        for(my $j = 1; $j <\
    \ $k; $j++) {\n            if($res[$j] < $min) {\n                $min = $res[$j];\n\
    \                $min_index = $j;\n            }\n        }\n        if($num >\
    \ $min) {\n            $res[$min_index] = $num;\n        }\n    }\n    return\
    \ @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while ($i < $j) {\n        my $m = $i + int(($j - $i) / 2);\n        my $p\
    \ = partition($arr, $i, $j, $m);\n        if ($p == $k - 1) {\n            return\
    \ [@$arr[0..$p]];\n        } elsif ($p > $k - 1) {\n            $j = $p - 1;\n\
    \        } else {\n            $i = $p + 1;\n        }\n    }\n    return [@$arr[0..$i]];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmp9gecot_9.pl line
    23.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @max;\n    for my $i (0..$#$arr) {\n        if (@max < $k)\
    \ {\n            push @max, $arr->[$i];\n            next;\n        }\n      \
    \  my $j = 0;\n        while ($j < $k && $max[$j] > $arr->[$i]) {\n          \
    \  $j++;\n        }\n        if ($j < $k) {\n            splice @max, $j, 0, $arr->[$i];\n\
    \            pop @max;\n        }\n    }\n    return \\@max;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @heap = ();\n    for(my $i = 0;\
    \ $i < $k; $i++) {\n        push @heap, $arr->[$i];\n    }\n    heapify(\\@heap);\n\
    \    for(my $i = $k; $i < $n; $i++) {\n        if($arr->[$i] > $heap[0]) {\n \
    \           $heap[0] = $arr->[$i];\n            heapify(\\@heap);\n        }\n\
    \    }\n    return \\@heap;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5],\
    \ 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::heapify called at /tmp/tmpwx0f_uy8.pl line
    23.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    my $p = $n - $k;\n    while($i < $j) {\n        my $m = partition($arr, $i,\
    \ $j);\n        if($m < $p) {\n            $i = $m + 1;\n        } elsif($m >\
    \ $p) {\n            $j = $m - 1;\n        } else {\n            last;\n     \
    \   }\n    }\n    return [@$arr[$p..$n-1]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmp5nxjoipt.pl line
    23.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while ($i < $j) {\n        my $m = $i + int(($j - $i) / 2);\n        my $p\
    \ = partition($arr, $i, $j, $m);\n        if ($p == $k - 1) {\n            return\
    \ [@$arr[0..$p]];\n        } elsif ($p > $k - 1) {\n            $j = $p - 1;\n\
    \        } else {\n            $i = $p + 1;\n        }\n    }\n    return [@$arr[0..$i]];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmp9gecot_9.pl line
    23.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while ($i < $j) {\n        my $m = $i + int(($j - $i) / 2);\n        my $p\
    \ = partition($arr, $i, $j, $m);\n        if ($p == $k - 1) {\n            return\
    \ [@$arr[0..$p]];\n        } elsif ($p > $k - 1) {\n            $j = $p - 1;\n\
    \        } else {\n            $i = $p + 1;\n        }\n    }\n    return [@$arr[0..$i]];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmp9gecot_9.pl line
    23.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $len = scalar(@$arr);\n    my @res = ();\n    my $i = 0;\n\
    \    while($i < $k) {\n        my $max = $arr->[$i];\n        my $max_index =\
    \ $i;\n        for(my $j = $i + 1; $j < $len; $j++) {\n            if($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_index =\
    \ $j;\n            }\n        }\n        push @res, $max;\n        $arr->[$max_index]\
    \ = $arr->[$i];\n        $arr->[$i] = $max;\n        $i++;\n    }\n    return\
    \ \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    return [] if $len\
    \ == 0;\n    return $arr if $len == $k;\n    for(my $i = 0; $i < $k; $i++) {\n\
    \        my $max = $arr->[$i];\n        my $max_idx = $i;\n        for(my $j =\
    \ $i + 1; $j < $len; $j++) {\n            if($arr->[$j] > $max) {\n          \
    \      $max = $arr->[$j];\n                $max_idx = $j;\n            }\n   \
    \     }\n        $res[$i] = $max;\n        $arr->[$max_idx] = $arr->[$i];\n  \
    \  }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while ($i < $j) {\n        my $m = partition($arr, $i, $j);\n        if ($m\
    \ == $k - 1) {\n            last;\n        } elsif ($m < $k - 1) {\n         \
    \   $i = $m + 1;\n        } else {\n            $j = $m - 1;\n        }\n    }\n\
    \    return [@$arr[0..$k-1]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5],\
    \ 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmp5h048hbs.pl line
    22.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $len = scalar(@$arr);\n    my $i = 0;\n    my $j = $len -\
    \ 1;\n    while($i < $j) {\n        my $m = partition($arr, $i, $j);\n       \
    \ if($m == $k - 1) {\n            last;\n        } elsif($m > $k - 1) {\n    \
    \        $j = $m - 1;\n        } else {\n            $i = $m + 1;\n        }\n\
    \    }\n    return [@$arr[0..$k-1]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmp23ua22le.pl line
    22.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while ($i < $j) {\n        my $p = partition($arr, $i, $j);\n        if ($p\
    \ == $k - 1) {\n            return $arr;\n        } elsif ($p < $k - 1) {\n  \
    \          $i = $p + 1;\n        } else {\n            $j = $p - 1;\n        }\n\
    \    }\n    return $arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpd0b985em.pl line
    22.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    if ($len == 0) {\n\
    \        return @res;\n    }\n    if ($len <= $k) {\n        return @$arr;\n \
    \   }\n    my $i = 0;\n    while ($i < $k) {\n        push @res, $arr->[$i];\n\
    \        $i++;\n    }\n    my $j = $k - 1;\n    while ($j > 0) {\n        if ($res[$j]\
    \ < $res[$j - 1]) {\n            my $tmp = $res[$j];\n            $res[$j] = $res[$j\
    \ - 1];\n            $res[$j - 1] = $tmp;\n            $j--;\n        } else {\n\
    \            last;\n        }\n    }\n    while ($i < $len) {\n        if ($arr->[$i]\
    \ > $res[0]) {\n            $res[0] = $arr->[$i];\n            $j = 1;\n     \
    \       while ($j < $k) {\n                if ($res[$j] < $res[$j - 1]) {\n  \
    \                  my $tmp = $res[$j];\n                    $res[$j] = $res[$j\
    \ - 1];\n                    $res[$j - 1] = $tmp;\n                    $j++;\n\
    \                } else {\n                    last;\n                }\n    \
    \        }\n        }\n        $i++;\n    }\n    return @res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        my $num = $arr->[$i];\n        if(scalar(@res) < $k)\
    \ {\n            push @res, $num;\n            next;\n        }\n        my $min\
    \ = $res[0];\n        my $min_index = 0;\n        for(my $j = 1; $j < $k; $j++)\
    \ {\n            if($res[$j] < $min) {\n                $min = $res[$j];\n   \
    \             $min_index = $j;\n            }\n        }\n        if($num > $min)\
    \ {\n            $res[$min_index] = $num;\n        }\n    }\n    return \\@res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while ($i < $j) {\n        my $p = partition($arr, $i, $j);\n        if ($p\
    \ == $k - 1) {\n            return [@$arr[0..$p]];\n        } elsif ($p > $k -\
    \ 1) {\n            $j = $p - 1;\n        } else {\n            $i = $p + 1;\n\
    \        }\n    }\n    return [@$arr[0..$i]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpmcd71qhc.pl line
    22.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @max = ();\n    my $len = scalar(@$arr);\n    for (my $i =\
    \ 0; $i < $len; $i++) {\n        if (scalar(@max) < $k) {\n            push @max,\
    \ $arr->[$i];\n            if (scalar(@max) == $k) {\n                @max = sort\
    \ {$b <=> $a} @max;\n            }\n        } else {\n            if ($arr->[$i]\
    \ > $max[$k - 1]) {\n                $max[$k - 1] = $arr->[$i];\n            \
    \    @max = sort {$b <=> $a} @max;\n            }\n        }\n    }\n    return\
    \ @max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    for (my $i = 0; $i\
    \ < $n; $i++) {\n        if ($i < $k) {\n            push @res, $arr->[$i];\n\
    \            next;\n        }\n        my $j = $k - 1;\n        while ($j >= 0\
    \ && $res[$j] < $arr->[$i]) {\n            $j--;\n        }\n        if ($j <\
    \ $k - 1) {\n            splice @res, $j + 1, 0, $arr->[$i];\n            pop\
    \ @res;\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i+1..$#$arr) {\n            if\
    \ ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n                $max_idx\
    \ = $j;\n            }\n        }\n        $res[$i] = $max;\n        ($arr->[$i],\
    \ $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @max;\n    for my $i (0..$k-1) {\n        $max[$i] = $arr->[$i];\n\
    \    }\n    for my $i ($k..$#$arr) {\n        my $j = 0;\n        while ($j <\
    \ $k && $max[$j] > $arr->[$i]) {\n            $j++;\n        }\n        if ($j\
    \ < $k) {\n            splice(@max, $j, 0, $arr->[$i]);\n            pop @max;\n\
    \        }\n    }\n    return \\@max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        if(scalar(@res) < $k) {\n            push @res, $arr->[$i];\n\
    \        } else {\n            my $min = $res[0];\n            my $min_index =\
    \ 0;\n            for(my $j = 1; $j < $k; $j++) {\n                if($res[$j]\
    \ < $min) {\n                    $min = $res[$j];\n                    $min_index\
    \ = $j;\n                }\n            }\n            if($arr->[$i] > $min) {\n\
    \                $res[$min_index] = $arr->[$i];\n            }\n        }\n  \
    \  }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @result;\n    my $len = scalar(@$arr);\n    if($len == 0)\
    \ {\n        return @result;\n    }\n    if($len <= $k) {\n        return sort\
    \ {$b <=> $a} @$arr;\n    }\n    for(my $i = 0; $i < $k; $i++) {\n        $result[$i]\
    \ = $arr->[$i];\n    }\n    @result = sort {$b <=> $a} @result;\n    for(my $i\
    \ = $k; $i < $len; $i++) {\n        if($arr->[$i] > $result[$k - 1]) {\n     \
    \       $result[$k - 1] = $arr->[$i];\n            @result = sort {$b <=> $a}\
    \ @result;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $len = scalar(@$arr);\n    my @res = ();\n    for(my $i =\
    \ 0; $i < $len; $i++) {\n        my $num = $arr->[$i];\n        if(scalar(@res)\
    \ < $k) {\n            push @res, $num;\n            next;\n        }\n      \
    \  my $min = $res[0];\n        my $min_index = 0;\n        for(my $j = 1; $j <\
    \ $k; $j++) {\n            if($res[$j] < $min) {\n                $min = $res[$j];\n\
    \                $min_index = $j;\n            }\n        }\n        if($num >\
    \ $min) {\n            $res[$min_index] = $num;\n        }\n    }\n    return\
    \ \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i <\
    \ $n; $i++) {\n        if(scalar(@res) < $k) {\n            push @res, $arr->[$i];\n\
    \        } else {\n            my $j = 0;\n            while($j < $k && $res[$j]\
    \ > $arr->[$i]) {\n                $j++;\n            }\n            if($j < $k)\
    \ {\n                splice(@res, $j, 0, $arr->[$i]);\n                pop @res;\n\
    \            }\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @result;\n    my $n = scalar(@$arr);\n    for (my $i = 0;\
    \ $i < $n; $i++) {\n        my $j = scalar(@result) - 1;\n        while ($j >=\
    \ 0 && $arr->[$i] > $result[$j]) {\n            $j--;\n        }\n        splice(@result,\
    \ $j + 1, 0, $arr->[$i]);\n        if (scalar(@result) > $k) {\n            pop(@result);\n\
    \        }\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @max;\n    for my $i (0..$k-1) {\n        $max[$i] = $arr->[$i];\n\
    \    }\n    for my $i ($k..@$arr-1) {\n        my $j = 0;\n        while ($j <\
    \ $k && $max[$j] > $arr->[$i]) {\n            $j++;\n        }\n        if ($j\
    \ < $k) {\n            splice(@max, $j, 0, $arr->[$i]);\n            pop @max;\n\
    \        }\n    }\n    return \\@max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    for (my $i = 0; $i\
    \ < $n; $i++) {\n        if ($i < $k) {\n            push @res, $arr->[$i];\n\
    \            if ($i == $k - 1) {\n                @res = sort {$b <=> $a} @res;\n\
    \            }\n        } else {\n            my $j = $k - 1;\n            while\
    \ ($j >= 0 && $res[$j] < $arr->[$i]) {\n                $j--;\n            }\n\
    \            if ($j < $k - 1) {\n                splice @res, $j + 1, 0, $arr->[$i];\n\
    \                pop @res;\n            }\n        }\n    }\n    return \\@res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while($i < $j) {\n        my $p = partition($arr, $i, $j);\n        if($p\
    \ == $k - 1) {\n            last;\n        }\n        elsif($p < $k - 1) {\n \
    \           $i = $p + 1;\n        }\n        else {\n            $j = $p - 1;\n\
    \        }\n    }\n    return [@$arr[0..$k-1]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpj6x_gxn3.pl line
    22.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @result;\n    my $max = -1001;\n    for(my $i = 0; $i < $k;\
    \ $i++) {\n        for(my $j = 0; $j < @$arr; $j++) {\n            if($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n            }\n        }\n  \
    \      push @result, $max;\n        $max = -1001;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @res = ();\n    for(my $i = 0;\
    \ $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n\
    \        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        push(@res, $max);\n        my $tmp = $arr->[$i];\n\
    \        $arr->[$i] = $arr->[$max_idx];\n        $arr->[$max_idx] = $tmp;\n  \
    \  }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$#$arr) {\n        if (@res < $k)\
    \ {\n            push @res, $arr->[$i];\n            @res = sort {$b <=> $a} @res;\n\
    \        } else {\n            if ($arr->[$i] > $res[-1]) {\n                pop\
    \ @res;\n                push @res, $arr->[$i];\n                @res = sort {$b\
    \ <=> $a} @res;\n            }\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i <\
    \ $n; $i++) {\n        if(scalar(@res) < $k) {\n            push @res, $arr->[$i];\n\
    \        }\n        else {\n            my $j = 0;\n            while($j < $k\
    \ && $res[$j] > $arr->[$i]) {\n                $j++;\n            }\n        \
    \    if($j < $k) {\n                splice(@res, $j, 0, $arr->[$i]);\n       \
    \         pop @res;\n            }\n        }\n    }\n    return \\@res;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n  \
    \      if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i+1..$#$arr) {\n            if\
    \ ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n                $max_idx\
    \ = $j;\n            }\n        }\n        $res[$i] = $max;\n        ($arr->[$i],\
    \ $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @result;\n    my $size = scalar(@$arr);\n    if ($size ==\
    \ 0) {\n        return @result;\n    }\n    if ($k == 0) {\n        return @result;\n\
    \    }\n    if ($k == $size) {\n        return @$arr;\n    }\n    my $max_index\
    \ = $size - 1;\n    my $min_index = 0;\n    my $max_value = $arr->[$max_index];\n\
    \    my $min_value = $arr->[$min_index];\n    my $max_count = 0;\n    my $min_count\
    \ = 0;\n    my $max_count_index = $max_index;\n    my $min_count_index = $min_index;\n\
    \    while ($max_count < $k && $min_count < $k) {\n        if ($max_value > $min_value)\
    \ {\n            push @result, $max_value;\n            $max_count++;\n      \
    \      $max_index--;\n            if ($max_index >= 0) {\n                $max_value\
    \ = $arr->[$max_index];\n            }\n        } else {\n            push @result,\
    \ $min_value;\n            $min_count++;\n            $min_index++;\n        \
    \    if ($min_index < $size) {\n                $min_value = $arr->[$min_index];\n\
    \            }\n        }\n    }\n    if ($max_count < $k) {\n        while ($max_count\
    \ < $k) {\n            push @result, $max_value;\n            $max_count++;\n\
    \            $max_index--;\n            if ($max_index >= 0) {\n             \
    \   $max_value = $arr->[$max_index];\n            }\n        }\n    }\n    if\
    \ ($min_count < $k) {\n        while ($min_count < $k) {\n            push @result,\
    \ $min_value;\n            $min_count++;\n            $min_index++;\n        \
    \    if ($min_index < $size) {\n                $min_value = $arr->[$min_index];\n\
    \            }\n        }\n    }\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5],\
    \ 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpkzn__k14.pl line 126,
    at end of line

    syntax error at /tmp/tmpkzn__k14.pl line 126, at EOF

    Execution of /tmp/tmpkzn__k14.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = @$arr;\n    for(my $i = 0; $i < $n; $i++)\
    \ {\n        if($i < $k) {\n            push @res, $arr->[$i];\n            next;\n\
    \        }\n        my $j = 0;\n        while($j < $k && $res[$j] < $arr->[$i])\
    \ {\n            $j++;\n        }\n        if($j < $k) {\n            splice @res,\
    \ $j, 0, $arr->[$i];\n            pop @res;\n        }\n    }\n    return \\@res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    while($i\
    \ < $n) {\n        my $j = $i;\n        while($j < $n && scalar(@res) < $k) {\n\
    \            if(scalar(@res) == 0) {\n                push @res, $arr->[$j];\n\
    \            } else {\n                my $m = scalar(@res);\n               \
    \ my $p = $m - 1;\n                while($p >= 0 && $res[$p] < $arr->[$j]) {\n\
    \                    $p--;\n                }\n                if($p < $m - 1)\
    \ {\n                    splice @res, $p + 1, 0, $arr->[$j];\n               \
    \     pop @res;\n                } elsif($p == $m - 1) {\n                   \
    \ push @res, $arr->[$j];\n                }\n            }\n            $j++;\n\
    \        }\n        $i = $j;\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @res = ();\n    for(my $i = 0;\
    \ $i < $k; $i++) {\n        my $max = -1;\n        my $max_idx = -1;\n       \
    \ for(my $j = 0; $j < $n; $j++) {\n            if($arr->[$j] > $max) {\n     \
    \           $max = $arr->[$j];\n                $max_idx = $j;\n            }\n\
    \        }\n        push @res, $max;\n        $arr->[$max_idx] = -1;\n    }\n\
    \    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    if ($k == 0) {\n        return [];\n\
    \    }\n    if ($k == $n) {\n        return $arr;\n    }\n    my @res = ();\n\
    \    for (my $i = 0; $i < $k; $i++) {\n        push @res, $arr->[$i];\n    }\n\
    \    my $heap = new Heap(sub { $b <=> $a });\n    $heap->push(@res);\n    for\
    \ (my $i = $k; $i < $n; $i++) {\n        if ($arr->[$i] > $heap->top()) {\n  \
    \          $heap->pop();\n            $heap->push($arr->[$i]);\n        }\n  \
    \  }\n    @res = ();\n    while ($heap->size() > 0) {\n        push @res, $heap->pop();\n\
    \    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @res = ();\n    my $i = 0;\n \
    \   while($i < $k) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n\
    \        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        push @res, $max;\n        $arr->[$max_idx] = $arr->[$i];\n\
    \        $arr->[$i] = $max;\n        $i++;\n    }\n    return \\@res;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n    \
    \    if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @res = ();\n    for(my $i = 0;\
    \ $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n\
    \        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        $res[$i] = $max;\n        $arr->[$max_idx] = $arr->[$i];\n\
    \    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i+1..$#$arr) {\n            if\
    \ ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n                $max_idx\
    \ = $j;\n            }\n        }\n        $res[$i] = $max;\n        ($arr->[$i],\
    \ $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        if(scalar(@res) < $k) {\n            push @res, $arr->[$i];\n\
    \        } else {\n            my $min = $res[0];\n            my $min_idx = 0;\n\
    \            for(my $j = 1; $j < $k; $j++) {\n                if($res[$j] < $min)\
    \ {\n                    $min = $res[$j];\n                    $min_idx = $j;\n\
    \                }\n            }\n            if($arr->[$i] > $min) {\n     \
    \           $res[$min_idx] = $arr->[$i];\n            }\n        }\n    }\n  \
    \  return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @max;\n    for my $i (0..$k-1) {\n        $max[$i] = $arr->[$i];\n\
    \    }\n    for my $i ($k..@$arr-1) {\n        my $j = 0;\n        while ($j <\
    \ $k && $max[$j] >= $arr->[$i]) {\n            $j++;\n        }\n        if ($j\
    \ < $k) {\n            my $t = $arr->[$i];\n            for my $p ($j..$k-2) {\n\
    \                $max[$p] = $max[$p+1];\n            }\n            $max[$k-1]\
    \ = $t;\n        }\n    }\n    return @max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = $n - $k;\n    my $j = 0;\n\
    \    while ($i > 0) {\n        $j = partition($arr, $j, $n - 1);\n        if ($j\
    \ == $i) {\n            last;\n        } elsif ($j < $i) {\n            $i -=\
    \ $j + 1;\n            $j = 0;\n        } else {\n            $n = $j;\n     \
    \   }\n    }\n    return [@$arr[$j .. $n - 1]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        if(scalar(@res) < $k) {\n            push @res, $arr->[$i];\n\
    \        }\n        else {\n            my $j = 0;\n            while($j < $k\
    \ && $res[$j] > $arr->[$i]) {\n                $j++;\n            }\n        \
    \    if($j < $k) {\n                splice(@res, $j, 0, $arr->[$i]);\n       \
    \         pop @res;\n            }\n        }\n    }\n    return \\@res;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n  \
    \      if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i+1..@$arr-1) {\n            if\
    \ ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n                $max_idx\
    \ = $j;\n            }\n        }\n        $res[$i] = $max;\n        ($arr->[$i],\
    \ $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @ret;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i <\
    \ $n; $i++) {\n        my $num = $arr->[$i];\n        if(scalar(@ret) < $k) {\n\
    \            push @ret, $num;\n            next;\n        }\n        if($num >\
    \ $ret[0]) {\n            shift @ret;\n            push @ret, $num;\n        }\n\
    \    }\n    return \\@ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    for (my $i = 0; $i\
    \ < $n; $i++) {\n        my $num = $arr->[$i];\n        if (scalar(@res) < $k)\
    \ {\n            push @res, $num;\n            next;\n        }\n        my $min\
    \ = $res[0];\n        my $min_idx = 0;\n        for (my $j = 1; $j < $k; $j++)\
    \ {\n            if ($res[$j] < $min) {\n                $min = $res[$j];\n  \
    \              $min_idx = $j;\n            }\n        }\n        if ($num > $min)\
    \ {\n            $res[$min_idx] = $num;\n        }\n    }\n    return \\@res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    if($len == 0) {\n\
    \        return @res;\n    }\n    if($len == 1) {\n        return @$arr;\n   \
    \ }\n    my $i = 0;\n    while($i < $k) {\n        $res[$i] = $arr->[$i];\n  \
    \      $i++;\n    }\n    for(my $j = $k/2; $j >= 0; $j--) {\n        heapify(\\\
    @res, $j, $k);\n    }\n    for(my $j = $k; $j < $len; $j++) {\n        if($arr->[$j]\
    \ > $res[0]) {\n            $res[0] = $arr->[$j];\n            heapify(\\@res,\
    \ 0, $k);\n        }\n    }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::heapify called at /tmp/tmpy21th5t0.pl line
    31.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @result;\n    my $i = 0;\n    while($i < $k) {\n        my\
    \ $max = $arr->[$i];\n        my $max_index = $i;\n        for(my $j = $i + 1;\
    \ $j < @$arr; $j++) {\n            if($arr->[$j] > $max) {\n                $max\
    \ = $arr->[$j];\n                $max_index = $j;\n            }\n        }\n\
    \        $result[$i] = $max;\n        $arr->[$max_index] = $arr->[$i];\n     \
    \   $arr->[$i] = $max;\n        $i++;\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while ($i < $j) {\n        my $m = partition($arr, $i, $j);\n        if ($m\
    \ == $k - 1) {\n            last;\n        } elsif ($m < $k - 1) {\n         \
    \   $i = $m + 1;\n        } else {\n            $j = $m - 1;\n        }\n    }\n\
    \    return [@$arr[0..$k-1]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5],\
    \ 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmp5h048hbs.pl line
    22.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i <\
    \ $n; $i++) {\n        my $num = $arr->[$i];\n        if(scalar(@res) < $k) {\n\
    \            push @res, $num;\n            next;\n        }\n        my $min =\
    \ $res[0];\n        my $min_index = 0;\n        for(my $j = 1; $j < $k; $j++)\
    \ {\n            if($res[$j] < $min) {\n                $min = $res[$j];\n   \
    \             $min_index = $j;\n            }\n        }\n        if($num > $min)\
    \ {\n            $res[$min_index] = $num;\n        }\n    }\n    return \\@res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @result;\n    my $size = scalar(@$arr);\n    for(my $i = 0;\
    \ $i < $size; $i++) {\n        if(scalar(@result) < $k) {\n            push @result,\
    \ $arr->[$i];\n        } else {\n            my $min = $result[0];\n         \
    \   my $index = 0;\n            for(my $j = 1; $j < $k; $j++) {\n            \
    \    if($result[$j] < $min) {\n                    $min = $result[$j];\n     \
    \               $index = $j;\n                }\n            }\n            if($arr->[$i]\
    \ > $min) {\n                $result[$index] = $arr->[$i];\n            }\n  \
    \      }\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $left = 0;\n    my $right = $n\
    \ - 1;\n    my $index = partition($arr, $left, $right);\n    while ($index !=\
    \ $k - 1) {\n        if ($index > $k - 1) {\n            $right = $index - 1;\n\
    \            $index = partition($arr, $left, $right);\n        } else {\n    \
    \        $left = $index + 1;\n            $index = partition($arr, $left, $right);\n\
    \        }\n    }\n    return [@$arr[0..$k-1]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmph3lesd98.pl line
    21.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i <\
    \ $n; $i++) {\n        if($i < $k) {\n            push @res, $arr->[$i];\n   \
    \         if($i == $k - 1) {\n                @res = sort {$b <=> $a} @res;\n\
    \            }\n        } else {\n            if($arr->[$i] > $res[0]) {\n   \
    \             shift @res;\n                push @res, $arr->[$i];\n          \
    \      @res = sort {$b <=> $a} @res;\n            }\n        }\n    }\n    return\
    \ \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @heap = sort {$b <=> $a} @$arr[0..$k-1];\n    for my $i ($k..@$arr-1)\
    \ {\n        if ($arr->[$i] > $heap[0]) {\n            $heap[0] = $arr->[$i];\n\
    \            @heap = sort {$b <=> $a} @heap;\n        }\n    }\n    return \\\
    @heap;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $i = 0;\n    while($i < $k) {\n        my $max\
    \ = $arr->[$i];\n        my $max_idx = $i;\n        for(my $j = $i + 1; $j < @$arr;\
    \ $j++) {\n            if($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_idx = $j;\n            }\n        }\n        push @res,\
    \ $max;\n        $arr->[$max_idx] = $arr->[$i];\n        $arr->[$i] = $max;\n\
    \        $i++;\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    my $i = 0;\n    while($i\
    \ < $len) {\n        my $j = $i + 1;\n        while($j < $len && $arr->[$j] <\
    \ $arr->[$i]) {\n            $j++;\n        }\n        if($j - $i >= $k) {\n \
    \           splice(@$arr, $i, $j - $i - $k + 1);\n            $len -= $j - $i\
    \ - $k + 1;\n        }\n        $i++;\n    }\n    return $arr;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while ($i < $j) {\n        my $p = partition($arr, $i, $j);\n        if ($p\
    \ == $k - 1) {\n            return [@$arr[0..$p]];\n        } elsif ($p > $k -\
    \ 1) {\n            $j = $p - 1;\n        } else {\n            $i = $p + 1;\n\
    \        }\n    }\n    return [@$arr[0..$i]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpmcd71qhc.pl line
    22.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @result;\n    my $n = @$arr;\n    return @result if $k ==\
    \ 0;\n    for(my $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n   \
    \     my $max_index = $i;\n        for(my $j = $i + 1; $j < $n; $j++) {\n    \
    \        if($arr->[$j] > $max) {\n                $max = $arr->[$j];\n       \
    \         $max_index = $j;\n            }\n        }\n        $arr->[$max_index]\
    \ = $arr->[$i];\n        $arr->[$i] = $max;\n        push @result, $max;\n   \
    \ }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while ($i < $j) {\n        my $m = partition($arr, $i, $j);\n        if ($m\
    \ == $k - 1) {\n            last;\n        } elsif ($m < $k - 1) {\n         \
    \   $i = $m + 1;\n        } else {\n            $j = $m - 1;\n        }\n    }\n\
    \    return [@$arr[0..$k-1]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5],\
    \ 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmp5h048hbs.pl line
    22.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $len = scalar(@$arr);\n    my $i = 0;\n    my $j = $len -\
    \ 1;\n    while($i < $j) {\n        my $p = partition($arr, $i, $j);\n       \
    \ if($p == $k - 1) {\n            last;\n        }\n        elsif($p < $k - 1)\
    \ {\n            $i = $p + 1;\n        }\n        else {\n            $j = $p\
    \ - 1;\n        }\n    }\n    return [@$arr[0..$k-1]];\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpzuu31gqj.pl line
    22.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for (my $i = 0; $i\
    \ < $len; $i++) {\n        if ($i < $k) {\n            push @res, $arr->[$i];\n\
    \        } else {\n            my $min = $res[0];\n            my $min_index =\
    \ 0;\n            for (my $j = 1; $j < $k; $j++) {\n                if ($res[$j]\
    \ < $min) {\n                    $min = $res[$j];\n                    $min_index\
    \ = $j;\n                }\n            }\n            if ($arr->[$i] > $min)\
    \ {\n                $res[$min_index] = $arr->[$i];\n            }\n        }\n\
    \    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i+1..$#$arr) {\n            if\
    \ ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n                $max_idx\
    \ = $j;\n            }\n        }\n        $res[$i] = $max;\n        ($arr->[$i],\
    \ $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $max = $arr->[0];\n    for(my\
    \ $i = 1; $i < $n; $i++) {\n        $max = $arr->[$i] if $arr->[$i] > $max;\n\
    \    }\n    my $bucket = [];\n    for(my $i = 0; $i < $n; $i++) {\n        my\
    \ $index = int(($arr->[$i] + $max) / ($max + 1) * $k);\n        push @{$bucket->[$index]},\
    \ $arr->[$i];\n    }\n    my $result = [];\n    for(my $i = $k - 1; $i >= 0; $i--)\
    \ {\n        if(defined $bucket->[$i]) {\n            my $sub_arr = $bucket->[$i];\n\
    \            my $sub_n = scalar(@$sub_arr);\n            for(my $j = 0; $j < $sub_n;\
    \ $j++) {\n                push @$result, $sub_arr->[$j];\n                last\
    \ if scalar(@$result) == $k;\n            }\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    my $p = partition($arr, $i, $j);\n    while ($p != $k - 1) {\n        if\
    \ ($p > $k - 1) {\n            $j = $p - 1;\n            $p = partition($arr,\
    \ $i, $j);\n        } else {\n            $i = $p + 1;\n            $p = partition($arr,\
    \ $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpxk31ikcx.pl line
    21.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $num (@$arr) {\n        if (@res < $k) {\n\
    \            push @res, $num;\n            @res = sort {$b <=> $a} @res;\n   \
    \     } else {\n            if ($num > $res[-1]) {\n                pop @res;\n\
    \                push @res, $num;\n                @res = sort {$b <=> $a} @res;\n\
    \            }\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$#$arr) {\n        if (@res < $k)\
    \ {\n            push @res, $arr->[$i];\n            @res = sort {$b <=> $a} @res;\n\
    \        } else {\n            if ($arr->[$i] > $res[-1]) {\n                pop\
    \ @res;\n                push @res, $arr->[$i];\n                @res = sort {$b\
    \ <=> $a} @res;\n            }\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $len = scalar(@$arr);\n    my @res = ();\n    for(my $i =\
    \ 0; $i < $len; $i++) {\n        my $num = $arr->[$i];\n        if(scalar(@res)\
    \ < $k) {\n            push @res, $num;\n            @res = sort {$b <=> $a} @res;\n\
    \        } else {\n            if($num > $res[$k - 1]) {\n                $res[$k\
    \ - 1] = $num;\n                @res = sort {$b <=> $a} @res;\n            }\n\
    \        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    my $i = 0;\n    while\
    \ ($i < $len) {\n        if (scalar(@res) == 0) {\n            push @res, $arr->[$i];\n\
    \        } else {\n            my $j = scalar(@res) - 1;\n            while ($j\
    \ >= 0 && $arr->[$i] > $res[$j]) {\n                $j--;\n            }\n   \
    \         if ($j < $k - 1) {\n                splice @res, $j + 1, 0, $arr->[$i];\n\
    \                if (scalar(@res) > $k) {\n                    pop @res;\n   \
    \             }\n            }\n        }\n        $i++;\n    }\n    return \\\
    @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $heap = Heap->new(sub { $_[0]\
    \ < $_[1] });\n    for(my $i = 0; $i < $k; $i++) {\n        $heap->push($arr->[$i]);\n\
    \    }\n    for(my $i = $k; $i < $n; $i++) {\n        if($arr->[$i] > $heap->top())\
    \ {\n            $heap->pop();\n            $heap->push($arr->[$i]);\n       \
    \ }\n    }\n    my @ans;\n    while(!$heap->empty()) {\n        unshift(@ans,\
    \ $heap->pop());\n    }\n    return \\@ans;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t locate object method "new" via package "Heap" (perhaps you forgot
    to load "Heap"?) at /tmp/tmp98syc60g.pl line 19.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    for (my $i = 0; $i\
    \ < $n; $i++) {\n        my $num = $arr->[$i];\n        if ($i < $k) {\n     \
    \       push @res, $num;\n            if ($i == $k - 1) {\n                @res\
    \ = sort {$b <=> $a} @res;\n            }\n        } else {\n            if ($num\
    \ > $res[0]) {\n                shift @res;\n                push @res, $num;\n\
    \                @res = sort {$b <=> $a} @res;\n            }\n        }\n   \
    \ }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $heap = Heap::Simple->new(order\
    \ => '<', elements => 'Any');\n    for(my $i = 0; $i < $n; $i++) {\n        $heap->insert($arr->[$i]);\n\
    \        if($heap->size() > $k) {\n            $heap->extract_top();\n       \
    \ }\n    }\n    my @res = ();\n    while($heap->size() > 0) {\n        push @res,\
    \ $heap->extract_top();\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t locate object method "new" via package "Heap::Simple" (perhaps you
    forgot to load "Heap::Simple"?) at /tmp/tmpnt8vp14v.pl line 19.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @heap = ();\n    for my $i (0..$k-1) {\n        push @heap,\
    \ $arr->[$i];\n    }\n    heapify(\\@heap);\n    for my $i ($k..$#$arr) {\n  \
    \      if ($arr->[$i] > $heap[0]) {\n            $heap[0] = $arr->[$i];\n    \
    \        heapify(\\@heap);\n        }\n    }\n    return \\@heap;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::heapify called at /tmp/tmp1z_qdo60.pl line
    22.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $heap = Heap->new();\n    for(my\
    \ $i = 0; $i < $k; $i++) {\n        $heap->insert($arr->[$i]);\n    }\n    for(my\
    \ $i = $k; $i < $n; $i++) {\n        if($arr->[$i] > $heap->peek()) {\n      \
    \      $heap->extract();\n            $heap->insert($arr->[$i]);\n        }\n\
    \    }\n    my @res = ();\n    while($heap->size() > 0) {\n        push @res,\
    \ $heap->extract();\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t locate object method "new" via package "Heap" (perhaps you forgot
    to load "Heap"?) at /tmp/tmp6kwpkmw9.pl line 19.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    if ($len == 0) {\n\
    \        return @res;\n    }\n    if ($len <= $k) {\n        return sort {$b <=>\
    \ $a} @$arr;\n    }\n    for (my $i = 0; $i < $k; $i++) {\n        $res[$i] =\
    \ $arr->[$i];\n    }\n    @res = sort {$b <=> $a} @res;\n    for (my $i = $k;\
    \ $i < $len; $i++) {\n        if ($arr->[$i] > $res[$k - 1]) {\n            $res[$k\
    \ - 1] = $arr->[$i];\n            @res = sort {$b <=> $a} @res;\n        }\n \
    \   }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i+1..$#$arr) {\n            if\
    \ ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n                $max_idx\
    \ = $j;\n            }\n        }\n        $res[$i] = $max;\n        ($arr->[$i],\
    \ $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    if($k == 0) {\n   \
    \     return @res;\n    }\n    if($k == $n) {\n        return @$arr;\n    }\n\
    \    my $i = 0;\n    while($i < $k) {\n        my $j = $i;\n        while($j <\
    \ $n) {\n            if($res[$i] < $arr->[$j]) {\n                $res[$i] = $arr->[$j];\n\
    \                last;\n            }\n            $j++;\n        }\n        $i++;\n\
    \    }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i+1..$#$arr) {\n            if\
    \ ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n                $max_idx\
    \ = $j;\n            }\n        }\n        $res[$i] = $max;\n        ($arr->[$i],\
    \ $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    for (my $i = 0; $i\
    \ < $n; $i++) {\n        my $j = scalar(@res) - 1;\n        while ($j >= 0 &&\
    \ $res[$j] < $arr->[$i]) {\n            $j--;\n        }\n        if ($j < $k\
    \ - 1) {\n            splice(@res, $j + 1, 0, $arr->[$i]);\n            pop(@res)\
    \ if (scalar(@res) > $k);\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $res = [];\n    for(my $i = 0;\
    \ $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n\
    \        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        $res->[$i] = $max;\n        ($arr->[$i], $arr->[$max_idx])\
    \ = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return $res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        if($i < $k) {\n            push @res, $arr->[$i];\n\
    \        } else {\n            my $j = $k - 1;\n            while($j >= 0 && $res[$j]\
    \ < $arr->[$i]) {\n                $j--;\n            }\n            if($j < $k\
    \ - 1) {\n                splice @res, $j + 1, 0, $arr->[$i];\n              \
    \  pop @res;\n            }\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @ret = ();\n    for(my $i = 0;\
    \ $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n\
    \        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        $ret[$i] = $max;\n        $arr->[$max_idx] = $arr->[$i];\n\
    \    }\n    return \\@ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $len = scalar(@$arr);\n    my $res = [];\n    for(my $i =\
    \ 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n\
    \        for(my $j = $i + 1; $j < $len; $j++) {\n            if($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        $res->[$i] = $max;\n        $arr->[$max_idx] =\
    \ $arr->[$i];\n    }\n    return $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i <\
    \ $n; $i++) {\n        if(scalar(@res) < $k) {\n            push @res, $arr->[$i];\n\
    \        } else {\n            my $j = 0;\n            while($j < $k && $res[$j]\
    \ > $arr->[$i]) {\n                $j++;\n            }\n            if($j < $k)\
    \ {\n                splice(@res, $j, 0, $arr->[$i]);\n                pop @res;\n\
    \            }\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @res = ();\n    for (my $i = 0;\
    \ $i < $k; $i++) {\n        my $max = -1000;\n        my $max_idx = -1;\n    \
    \    for (my $j = 0; $j < $n; $j++) {\n            if ($arr->[$j] > $max) {\n\
    \                $max = $arr->[$j];\n                $max_idx = $j;\n        \
    \    }\n        }\n        push @res, $max;\n        $arr->[$max_idx] = -1001;\n\
    \    }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $len = scalar(@$arr);\n    if ($k >= $len) {\n        return\
    \ [sort {$b <=> $a} @$arr];\n    }\n    my $res = [];\n    for (my $i = 0; $i\
    \ < $k; $i++) {\n        $res->[$i] = $arr->[$i];\n    }\n    $res = [sort {$b\
    \ <=> $a} @$res];\n    for (my $i = $k; $i < $len; $i++) {\n        if ($arr->[$i]\
    \ > $res->[$k - 1]) {\n            $res->[$k - 1] = $arr->[$i];\n            $res\
    \ = [sort {$b <=> $a} @$res];\n        }\n    }\n    return $res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while ($i < $j) {\n        my $p = partition($arr, $i, $j);\n        if ($p\
    \ == $k - 1) {\n            last;\n        } elsif ($p < $k - 1) {\n         \
    \   $i = $p + 1;\n        } else {\n            $j = $p - 1;\n        }\n    }\n\
    \    return [@$arr[0..$k-1]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5],\
    \ 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpyo6m063p.pl line
    22.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @max;\n    for my $i (0..$#$arr) {\n        if (@max < $k)\
    \ {\n            push @max, $arr->[$i];\n            @max = sort {$b <=> $a} @max;\n\
    \        } else {\n            if ($arr->[$i] > $max[-1]) {\n                pop\
    \ @max;\n                push @max, $arr->[$i];\n                @max = sort {$b\
    \ <=> $a} @max;\n            }\n        }\n    }\n    return \\@max;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i <\
    \ $n; $i++) {\n        my $num = $arr->[$i];\n        if(scalar(@res) < $k) {\n\
    \            push @res, $num;\n            next;\n        }\n        my $min =\
    \ $res[0];\n        if($num > $min) {\n            shift @res;\n            push\
    \ @res, $num;\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for (my $i = 0; $i\
    \ < $len; $i++) {\n        if ($i < $k) {\n            push @res, $arr->[$i];\n\
    \        } else {\n            my $min = $res[0];\n            my $min_index =\
    \ 0;\n            for (my $j = 1; $j < $k; $j++) {\n                if ($res[$j]\
    \ < $min) {\n                    $min = $res[$j];\n                    $min_index\
    \ = $j;\n                }\n            }\n            if ($arr->[$i] > $min)\
    \ {\n                $res[$min_index] = $arr->[$i];\n            }\n        }\n\
    \    }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$#$arr) {\n        if (@res < $k)\
    \ {\n            push @res, $arr->[$i];\n            @res = sort {$b <=> $a} @res;\n\
    \        } else {\n            if ($arr->[$i] > $res[-1]) {\n                pop\
    \ @res;\n                push @res, $arr->[$i];\n                @res = sort {$b\
    \ <=> $a} @res;\n            }\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while ($i < $j) {\n        my $p = partition($arr, $i, $j);\n        if ($p\
    \ == $k - 1) {\n            last;\n        } elsif ($p < $k - 1) {\n         \
    \   $i = $p + 1;\n        } else {\n            $j = $p - 1;\n        }\n    }\n\
    \    return [@$arr[0..$k-1]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5],\
    \ 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpyo6m063p.pl line
    22.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $heap = new Heap::Binary(order\
    \ => '>', elements => $arr);\n    my @res;\n    for(my $i = 0; $i < $k; $i++)\
    \ {\n        push @res, $heap->extract_top;\n    }\n    return @res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t locate object method "new" via package "Heap::Binary" (perhaps you
    forgot to load "Heap::Binary"?) at /tmp/tmpfa8_sjq7.pl line 19.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    my $p = 0;\n    while (1) {\n        $p = partition($arr, $i, $j);\n    \
    \    if ($p == $k - 1) {\n            last;\n        } elsif ($p < $k - 1) {\n\
    \            $i = $p + 1;\n        } else {\n            $j = $p - 1;\n      \
    \  }\n    }\n    return [@$arr[0..$k-1]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpe4a5z9b5.pl line
    23.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    while($i\
    \ < $n) {\n        my $j = $i + 1;\n        while($j < $n && $arr->[$j] == $arr->[$i])\
    \ {\n            $j++;\n        }\n        if(scalar(@res) < $k) {\n         \
    \   push @res, $arr->[$i];\n        } else {\n            my $l = 0;\n       \
    \     my $r = scalar(@res) - 1;\n            while($l < $r) {\n              \
    \  my $m = int(($l + $r) / 2);\n                if($res[$m] > $arr->[$i]) {\n\
    \                    $l = $m + 1;\n                } else {\n                \
    \    $r = $m;\n                }\n            }\n            if($res[$l] > $arr->[$i])\
    \ {\n                $l++;\n            }\n            if($l < $k) {\n       \
    \         splice(@res, $l, 0, $arr->[$i]);\n                pop @res;\n      \
    \      }\n        }\n        $i = $j;\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        if(scalar(@res) < $k) {\n            push @res, $arr->[$i];\n\
    \        } else {\n            my $min = $res[0];\n            my $min_idx = 0;\n\
    \            for(my $j = 1; $j < $k; $j++) {\n                if($res[$j] < $min)\
    \ {\n                    $min = $res[$j];\n                    $min_idx = $j;\n\
    \                }\n            }\n            if($arr->[$i] > $min) {\n     \
    \           $res[$min_idx] = $arr->[$i];\n            }\n        }\n    }\n  \
    \  return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my @res;\n    while\
    \ ($i < $k) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n    \
    \    for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        $res[$i] = $max;\n        $arr->[$max_idx] = $arr->[$i];\n\
    \        $i++;\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @res = ();\n    for(my $i = 0;\
    \ $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n\
    \        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        $res[$i] = $max;\n        ($arr->[$i], $arr->[$max_idx])\
    \ = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i <\
    \ $n; $i++) {\n        if(scalar(@res) < $k) {\n            push @res, $arr->[$i];\n\
    \        }\n        else {\n            my $j = scalar(@res) - 1;\n          \
    \  while($j >= 0 && $res[$j] < $arr->[$i]) {\n                $j--;\n        \
    \    }\n            if($j < $k - 1) {\n                splice(@res, $j + 1, 0,\
    \ $arr->[$i]);\n                pop @res;\n            }\n        }\n    }\n \
    \   return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i+1..$#$arr) {\n            if\
    \ ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n                $max_idx\
    \ = $j;\n            }\n        }\n        $res[$i] = $max;\n        $arr->[$max_idx]\
    \ = $arr->[$i];\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    my $i = 0;\n    while($i\
    \ < $len) {\n        if(scalar(@res) < $k) {\n            push @res, $arr->[$i];\n\
    \            $i++;\n        } else {\n            my $j = 0;\n            while($j\
    \ < $k) {\n                if($arr->[$i] > $res[$j]) {\n                    splice(@res,\
    \ $j, 0, $arr->[$i]);\n                    pop @res;\n                    last;\n\
    \                }\n                $j++;\n            }\n            $i++;\n\
    \        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @res = ();\n    for (my $i = 0;\
    \ $i < $k; $i++) {\n        my $max = -1e9;\n        my $max_idx = -1;\n     \
    \   for (my $j = 0; $j < $n; $j++) {\n            if ($arr->[$j] > $max) {\n \
    \               $max = $arr->[$j];\n                $max_idx = $j;\n         \
    \   }\n        }\n        push @res, $max;\n        $arr->[$max_idx] = -1e9;\n\
    \    }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    while ($i < $n) {\n\
    \        my $j = $i;\n        while ($j < $n) {\n            if ($arr->[$j] >\
    \ $arr->[$i]) {\n                my $tmp = $arr->[$i];\n                $arr->[$i]\
    \ = $arr->[$j];\n                $arr->[$j] = $tmp;\n            }\n         \
    \   $j++;\n        }\n        $i++;\n    }\n    my @result = ();\n    for (my\
    \ $i = 0; $i < $k; $i++) {\n        push @result, $arr->[$i];\n    }\n    return\
    \ \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    for (my $i = 0; $i\
    \ < $n; $i++) {\n        while (@res && $res[-1] < $arr->[$i] && $i - $res[0]\
    \ >= $k) {\n            shift @res;\n        }\n        push @res, $i;\n    }\n\
    \    my @ret;\n    for (my $i = 0; $i < $k; $i++) {\n        push @ret, $arr->[$res[$i]];\n\
    \    }\n    return @ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @res = ();\n    for(my $i = 0;\
    \ $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n\
    \        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        $res[$i] = $max;\n        $arr->[$max_idx] = $arr->[$i];\n\
    \    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @result;\n    my @heap;\n    for my $i (0..$k-1) {\n     \
    \   push @heap, $arr->[$i];\n    }\n    build_max_heap(\\@heap);\n    for my $i\
    \ ($k..$#$arr) {\n        if ($arr->[$i] > $heap[0]) {\n            $heap[0] =\
    \ $arr->[$i];\n            max_heapify(\\@heap, 0);\n        }\n    }\n    for\
    \ my $i (0..$k-1) {\n        push @result, pop @heap;\n    }\n    return \\@result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::build_max_heap called at /tmp/tmp97baqj_u.pl
    line 23.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i+1..$#$arr) {\n            if\
    \ ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n                $max_idx\
    \ = $j;\n            }\n        }\n        $res[$i] = $max;\n        ($arr->[$i],\
    \ $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @result;\n    my $n = scalar(@$arr);\n    if ($k == 0) {\n\
    \        return @result;\n    }\n    if ($k == $n) {\n        return @$arr;\n\
    \    }\n    my $i = 0;\n    while ($i < $k) {\n        $result[$i] = $arr->[$i];\n\
    \        $i++;\n    }\n    my $j = $k >> 1;\n    while ($j >= 0) {\n        heapify(\\\
    @result, $j, $k);\n        $j--;\n    }\n    $i = $k;\n    while ($i < $n) {\n\
    \        if ($arr->[$i] > $result[0]) {\n            $result[0] = $arr->[$i];\n\
    \            heapify(\\@result, 0, $k);\n        }\n        $i++;\n    }\n   \
    \ return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $len = scalar(@$arr);\n    my $res = [];\n    for(my $i =\
    \ 0; $i < $k; $i++) {\n        my $max = -1001;\n        my $max_index = -1;\n\
    \        for(my $j = 0; $j < $len; $j++) {\n            if($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_index = $j;\n  \
    \          }\n        }\n        push @$res, $max;\n        $arr->[$max_index]\
    \ = -1001;\n    }\n    return $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        my $num = $arr->[$i];\n        if(scalar(@res) < $k)\
    \ {\n            push @res, $num;\n            @res = sort {$b <=> $a} @res;\n\
    \        } else {\n            if($num > $res[$k - 1]) {\n                $res[$k\
    \ - 1] = $num;\n                @res = sort {$b <=> $a} @res;\n            }\n\
    \        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $i = 0;\n    while($i < $k) {\n        my $max\
    \ = $arr->[$i];\n        my $max_idx = $i;\n        for(my $j = $i + 1; $j < @$arr;\
    \ $j++) {\n            if($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_idx = $j;\n            }\n        }\n        $res[$i] =\
    \ $max;\n        $arr->[$max_idx] = $arr->[$i];\n        $arr->[$i] = $max;\n\
    \        $i++;\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @result;\n    my $n = scalar(@$arr);\n    for (my $i = 0;\
    \ $i < $n; $i++) {\n        if ($i < $k) {\n            push @result, $arr->[$i];\n\
    \        } else {\n            my $j = $k - 1;\n            while ($j >= 0 &&\
    \ $result[$j] < $arr->[$i]) {\n                $j--;\n            }\n        \
    \    if ($j < $k - 1) {\n                splice @result, $j + 1, 0, $arr->[$i];\n\
    \                pop @result;\n            }\n        }\n    }\n    return \\\
    @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @result;\n    my $len = scalar(@$arr);\n    for(my $i = 0;\
    \ $i < $len; $i++) {\n        if($i < $k) {\n            push @result, $arr->[$i];\n\
    \        } else {\n            my $j = $k - 1;\n            while($j >= 0 && $result[$j]\
    \ < $arr->[$i]) {\n                $j--;\n            }\n            if($j < $k\
    \ - 1) {\n                splice @result, $j + 1, 0, $arr->[$i];\n           \
    \     pop @result;\n            }\n        }\n    }\n    return \\@result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n  \
    \      if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @res = ();\n    for(my $i = 0;\
    \ $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n\
    \        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        $res[$i] = $max;\n        ($arr->[$i], $arr->[$max_idx])\
    \ = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    my $p = partition($arr, $i, $j);\n    while ($p != $k - 1) {\n        if\
    \ ($p > $k - 1) {\n            $j = $p - 1;\n            $p = partition($arr,\
    \ $i, $j);\n        } else {\n            $i = $p + 1;\n            $p = partition($arr,\
    \ $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpxk31ikcx.pl line
    21.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    while ($i < $n) {\n\
    \        my $j = $i;\n        while ($j < $n) {\n            if ($arr->[$j] >\
    \ $arr->[$i]) {\n                my $tmp = $arr->[$i];\n                $arr->[$i]\
    \ = $arr->[$j];\n                $arr->[$j] = $tmp;\n            }\n         \
    \   $j++;\n        }\n        $i++;\n    }\n    my @res = ();\n    for (my $i\
    \ = 0; $i < $k; $i++) {\n        push @res, $arr->[$i];\n    }\n    return \\\
    @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @res = ();\n    for(my $i = 0;\
    \ $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n\
    \        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        $res[$i] = $max;\n        ($arr->[$i], $arr->[$max_idx])\
    \ = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$#{$arr}) {\n        if (@res < $k)\
    \ {\n            push @res, $arr->[$i];\n            next;\n        }\n      \
    \  my $j = $#res;\n        while ($j >= 0 && $res[$j] < $arr->[$i]) {\n      \
    \      $j--;\n        }\n        if ($j < $k - 1) {\n            splice @res,\
    \ $j + 1, 0, $arr->[$i];\n            pop @res;\n        }\n    }\n    return\
    \ \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @result;\n    my $size = scalar(@$arr);\n    if ($size ==\
    \ 0) {\n        return @result;\n    }\n    my $i = 0;\n    while ($i < $k) {\n\
    \        my $max = $arr->[$i];\n        my $max_index = $i;\n        for (my $j\
    \ = $i + 1; $j < $size; $j++) {\n            if ($arr->[$j] > $max) {\n      \
    \          $max = $arr->[$j];\n                $max_index = $j;\n            }\n\
    \        }\n        $result[$i] = $max;\n        $arr->[$max_index] = $arr->[$i];\n\
    \        $i++;\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $len = scalar(@$arr);\n    my $max = $len - $k;\n    my $i\
    \ = 0;\n    while ($i < $max) {\n        if ($arr->[$i] > $arr->[$i + 1]) {\n\
    \            splice(@$arr, $i, 1);\n            $max--;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    splice(@$arr, $max);\n    return $arr;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @res = ();\n    my $i = 0;\n \
    \   while($i < $k) {\n        my $max = $arr->[$i];\n        my $max_index = $i;\n\
    \        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_index = $j;\n  \
    \          }\n        }\n        push @res, $max;\n        $arr->[$max_index]\
    \ = $arr->[$i];\n        $arr->[$i] = $max;\n        $i++;\n    }\n    return\
    \ \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    my $p = $n - $k;\n    while($i < $j) {\n        my $t = partition($arr, $i,\
    \ $j);\n        if($t == $p) {\n            last;\n        } elsif($t < $p) {\n\
    \            $i = $t + 1;\n        } else {\n            $j = $t - 1;\n      \
    \  }\n    }\n    return [@$arr[$p..$n-1]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmp7d05p3mn.pl line
    23.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @res = ();\n    for(my $i = 0;\
    \ $i < $k; $i++) {\n        my $max = -1e9;\n        my $max_idx = -1;\n     \
    \   for(my $j = 0; $j < $n; $j++) {\n            if($arr->[$j] > $max) {\n   \
    \             $max = $arr->[$j];\n                $max_idx = $j;\n           \
    \ }\n        }\n        push @res, $max;\n        $arr->[$max_idx] = -1e9;\n \
    \   }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    if($len == 0) {\n\
    \        return @res;\n    }\n    if($len <= $k) {\n        return sort {$b <=>\
    \ $a} @$arr;\n    }\n    my $i = 0;\n    while($i < $k) {\n        $res[$i] =\
    \ $arr->[$i];\n        $i++;\n    }\n    @res = sort {$b <=> $a} @res;\n    while($i\
    \ < $len) {\n        my $j = 0;\n        while($j < $k) {\n            if($arr->[$i]\
    \ > $res[$j]) {\n                my $tmp = $res[$j];\n                $res[$j]\
    \ = $arr->[$i];\n                $arr->[$i] = $tmp;\n                last;\n \
    \           }\n            $j++;\n        }\n        $i++;\n    }\n    return\
    \ @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    return $arr if $k == $n;\n    my\
    \ @res = ();\n    for (my $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for (my $j = $i + 1; $j < $n; $j++) {\n  \
    \          if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n    \
    \            $max_idx = $j;\n            }\n        }\n        $res[$i] = $max;\n\
    \        ($arr->[$i], $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n  \
    \  }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $idx = $i;\n        for my $j ($i+1..$#$arr) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $idx = $j;\n\
    \            }\n        }\n        $res[$i] = $max;\n        $arr->[$idx] = $arr->[$i];\n\
    \        $arr->[$i] = $max;\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$#$arr) {\n        if (@res < $k)\
    \ {\n            push @res, $arr->[$i];\n            if (@res == $k) {\n     \
    \           @res = sort {$b <=> $a} @res;\n            }\n        } else {\n \
    \           if ($arr->[$i] > $res[-1]) {\n                $res[-1] = $arr->[$i];\n\
    \                @res = sort {$b <=> $a} @res;\n            }\n        }\n   \
    \ }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        if(scalar(@res) < $k) {\n            push @res, $arr->[$i];\n\
    \        } else {\n            my $min = $res[0];\n            my $min_idx = 0;\n\
    \            for(my $j = 1; $j < $k; $j++) {\n                if($res[$j] < $min)\
    \ {\n                    $min = $res[$j];\n                    $min_idx = $j;\n\
    \                }\n            }\n            if($arr->[$i] > $min) {\n     \
    \           $res[$min_idx] = $arr->[$i];\n            }\n        }\n    }\n  \
    \  return sort {$b <=> $a} @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5],\
    \ 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i <\
    \ $n; $i++) {\n        my $num = $arr->[$i];\n        if(scalar(@res) < $k) {\n\
    \            push @res, $num;\n            next;\n        }\n        my $min =\
    \ $res[0];\n        if($num > $min) {\n            shift @res;\n            push\
    \ @res, $num;\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        my $num = $arr->[$i];\n        if(scalar(@res) < $k)\
    \ {\n            push @res, $num;\n            if(scalar(@res) == $k) {\n    \
    \            @res = sort {$b <=> $a} @res;\n            }\n        } else {\n\
    \            if($num > $res[-1]) {\n                pop @res;\n              \
    \  push @res, $num;\n                @res = sort {$b <=> $a} @res;\n         \
    \   }\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @result;\n    my $n = @$arr;\n    for(my $i = 0; $i < $n;\
    \ $i++) {\n        if(@result < $k) {\n            push @result, $arr->[$i];\n\
    \            if(@result == $k) {\n                @result = sort {$b <=> $a} @result;\n\
    \            }\n        } else {\n            if($arr->[$i] > $result[$k - 1])\
    \ {\n                $result[$k - 1] = $arr->[$i];\n                @result =\
    \ sort {$b <=> $a} @result;\n            }\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i <\
    \ $n; $i++) {\n        my $num = $arr->[$i];\n        if($i < $k) {\n        \
    \    push @res, $num;\n            if($i == $k - 1) {\n                @res =\
    \ sort {$b <=> $a} @res;\n            }\n        } else {\n            if($num\
    \ > $res[0]) {\n                shift @res;\n                push @res, $num;\n\
    \                @res = sort {$b <=> $a} @res;\n            }\n        }\n   \
    \ }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        if(scalar(@res) < $k) {\n            push @res, $arr->[$i];\n\
    \        } else {\n            my $min = $res[0];\n            my $min_idx = 0;\n\
    \            for(my $j = 1; $j < $k; $j++) {\n                if($res[$j] < $min)\
    \ {\n                    $min = $res[$j];\n                    $min_idx = $j;\n\
    \                }\n            }\n            if($arr->[$i] > $min) {\n     \
    \           $res[$min_idx] = $arr->[$i];\n            }\n        }\n    }\n  \
    \  return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        my $num = $arr->[$i];\n        if(scalar(@res) < $k)\
    \ {\n            push @res, $num;\n            if(scalar(@res) == $k) {\n    \
    \            @res = sort {$b <=> $a} @res;\n            }\n        } else {\n\
    \            if($num > $res[-1]) {\n                pop @res;\n              \
    \  push @res, $num;\n                @res = sort {$b <=> $a} @res;\n         \
    \   }\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @res = ();\n    my $i = 0;\n \
    \   while ($i < $k) {\n        my $j = $i;\n        while ($j < $n) {\n      \
    \      if ($arr->[$j] > $arr->[$i]) {\n                my $tmp = $arr->[$i];\n\
    \                $arr->[$i] = $arr->[$j];\n                $arr->[$j] = $tmp;\n\
    \            }\n            $j += 1;\n        }\n        $res[$i] = $arr->[$i];\n\
    \        $i += 1;\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $result = [];\n    for (my $i\
    \ = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_index\
    \ = $i;\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_index =\
    \ $j;\n            }\n        }\n        $result->[$i] = $max;\n        ($arr->[$i],\
    \ $arr->[$max_index]) = ($arr->[$max_index], $arr->[$i]);\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        if(scalar(@res) < $k) {\n            push @res, $arr->[$i];\n\
    \        }\n        else {\n            my $j = $k - 1;\n            while($j\
    \ >= 0 && $res[$j] < $arr->[$i]) {\n                $j--;\n            }\n   \
    \         if($j < $k - 1) {\n                splice @res, $j + 1, 0, $arr->[$i];\n\
    \                pop @res;\n            }\n        }\n    }\n    return \\@res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $idx = $i;\n        for my $j ($i+1..$#$arr) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $idx = $j;\n\
    \            }\n        }\n        $res[$i] = $max;\n        ($arr->[$i], $arr->[$idx])\
    \ = ($arr->[$idx], $arr->[$i]);\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        if(scalar(@res) < $k) {\n            push @res, $arr->[$i];\n\
    \        } else {\n            my $min = $res[0];\n            my $min_idx = 0;\n\
    \            for(my $j = 1; $j < $k; $j++) {\n                if($res[$j] < $min)\
    \ {\n                    $min = $res[$j];\n                    $min_idx = $j;\n\
    \                }\n            }\n            if($arr->[$i] > $min) {\n     \
    \           $res[$min_idx] = $arr->[$i];\n            }\n        }\n    }\n  \
    \  return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while ($i < $j) {\n        my $p = partition($arr, $i, $j);\n        if ($p\
    \ == $k - 1) {\n            last;\n        } elsif ($p < $k - 1) {\n         \
    \   $i = $p + 1;\n        } else {\n            $j = $p - 1;\n        }\n    }\n\
    \    return [@$arr[0..$k-1]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5],\
    \ 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpyo6m063p.pl line
    22.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    for (my $i = 0; $i\
    \ < $n; $i++) {\n        if ($i < $k) {\n            push @res, $arr->[$i];\n\
    \            my $j = $i;\n            while ($j > 0 && $res[$j] > $res[$j - 1])\
    \ {\n                my $tmp = $res[$j];\n                $res[$j] = $res[$j -\
    \ 1];\n                $res[$j - 1] = $tmp;\n                $j--;\n         \
    \   }\n        } else {\n            if ($arr->[$i] > $res[0]) {\n           \
    \     $res[0] = $arr->[$i];\n                my $j = 0;\n                while\
    \ ($j < $k - 1 && $res[$j] > $res[$j + 1]) {\n                    my $tmp = $res[$j];\n\
    \                    $res[$j] = $res[$j + 1];\n                    $res[$j + 1]\
    \ = $tmp;\n                    $j++;\n                }\n            }\n     \
    \   }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5],\
    \ 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $num (@$arr) {\n        if (@res < $k) {\n\
    \            push @res, $num;\n            @res = sort {$b <=> $a} @res;\n   \
    \     } else {\n            if ($num > $res[-1]) {\n                pop @res;\n\
    \                push @res, $num;\n                @res = sort {$b <=> $a} @res;\n\
    \            }\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$#{$arr}) {\n        if (@res < $k)\
    \ {\n            push @res, $arr->[$i];\n            @res = sort {$b <=> $a} @res;\n\
    \        } else {\n            if ($arr->[$i] > $res[-1]) {\n                pop\
    \ @res;\n                push @res, $arr->[$i];\n                @res = sort {$b\
    \ <=> $a} @res;\n            }\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while ($i < $j) {\n        my $p = partition($arr, $i, $j);\n        if ($p\
    \ == $k - 1) {\n            last;\n        } elsif ($p < $k - 1) {\n         \
    \   $i = $p + 1;\n        } else {\n            $j = $p - 1;\n        }\n    }\n\
    \    return [@$arr[0..$k-1]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5],\
    \ 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpyo6m063p.pl line
    22.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: -1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    while ($i < $n) {\n\
    \        my $j = $i;\n        while ($j < $n && $arr->[$j] > $arr->[$i]) {\n \
    \           $j++;\n        }\n        if ($j - $i >= $k) {\n            return\
    \ [@$arr[$i..$i+$k-1]];\n        }\n        $i = $j;\n    }\n    return [@$arr[$n-$k..$n-1]];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660012783
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i <\
    \ $n; $i++) {\n        if($i < $k) {\n            push @res, $arr->[$i];\n   \
    \         if($i == $k - 1) {\n                @res = sort {$b <=> $a} @res;\n\
    \            }\n        } else {\n            if($arr->[$i] > $res[0]) {\n   \
    \             shift @res;\n                push @res, $arr->[$i];\n          \
    \      @res = sort {$b <=> $a} @res;\n            }\n        }\n    }\n    return\
    \ \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    my $m = $k - 1;\n    while ($i < $j) {\n        my $p = partition($arr, $i,\
    \ $j);\n        if ($p == $m) {\n            last;\n        } elsif ($p < $m)\
    \ {\n            $i = $p + 1;\n        } else {\n            $j = $p - 1;\n  \
    \      }\n    }\n    return [@$arr[0..$m]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpixdq9mpf.pl line
    23.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        if($i < $k) {\n            push @res, $arr->[$i];\n\
    \        } else {\n            my $j = 0;\n            while($j < $k && $res[$j]\
    \ > $arr->[$i]) {\n                $j++;\n            }\n            if($j < $k)\
    \ {\n                splice(@res, $j, 0, $arr->[$i]);\n                pop @res;\n\
    \            }\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @max;\n    for my $i (0..$#$arr) {\n        if (@max < $k)\
    \ {\n            push @max, $arr->[$i];\n            @max = sort {$b <=> $a} @max;\n\
    \        } else {\n            if ($arr->[$i] > $max[-1]) {\n                pop\
    \ @max;\n                push @max, $arr->[$i];\n                @max = sort {$b\
    \ <=> $a} @max;\n            }\n        }\n    }\n    return \\@max;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i+1..$#$arr) {\n            if\
    \ ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n                $max_idx\
    \ = $j;\n            }\n        }\n        ($arr->[$i], $arr->[$max_idx]) = ($arr->[$max_idx],\
    \ $arr->[$i]);\n        push @res, $arr->[$i];\n    }\n    return \\@res;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n  \
    \      if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    my $m = $k - 1;\n    while ($i < $j) {\n        my $p = partition($arr, $i,\
    \ $j);\n        if ($p == $m) {\n            last;\n        } elsif ($p < $m)\
    \ {\n            $i = $p + 1;\n        } else {\n            $j = $p - 1;\n  \
    \      }\n    }\n    return [@$arr[0..$m]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpixdq9mpf.pl line
    23.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $len = scalar(@$arr);\n    return [] if $len == 0;\n    my\
    \ $res = [];\n    my $i = 0;\n    while ($i < $k) {\n        my $j = $i;\n   \
    \     my $max = $arr->[$i];\n        for (my $m = $i + 1; $m < $len; $m++) {\n\
    \            if ($arr->[$m] > $max) {\n                $max = $arr->[$m];\n  \
    \              $j = $m;\n            }\n        }\n        $res->[$i] = $max;\n\
    \        $arr->[$j] = $arr->[$i];\n        $i++;\n    }\n    return $res;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n  \
    \      if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    while ($i < $n) {\n\
    \        my $j = $i;\n        while ($j < $n && $arr->[$j] >= $arr->[$i]) {\n\
    \            $j++;\n        }\n        if ($j - $i == $k) {\n            return\
    \ [@$arr[$i..$j-1]];\n        }\n        $i = $j;\n    }\n    return [];\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n  \
    \      if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i <\
    \ $n; $i++) {\n        if($i < $k) {\n            push @res, $arr->[$i];\n   \
    \         my $j = $i;\n            while($j > 0 && $res[$j] > $res[$j - 1]) {\n\
    \                ($res[$j], $res[$j - 1]) = ($res[$j - 1], $res[$j]);\n      \
    \          $j--;\n            }\n        } else {\n            if($arr->[$i] >\
    \ $res[0]) {\n                $res[0] = $arr->[$i];\n                my $j = 0;\n\
    \                while($j < $k - 1 && $res[$j] > $res[$j + 1]) {\n           \
    \         ($res[$j], $res[$j + 1]) = ($res[$j + 1], $res[$j]);\n             \
    \       $j++;\n                }\n            }\n        }\n    }\n    return\
    \ \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    while($i\
    \ < $n) {\n        my $j = $i + 1;\n        while($j < $n && $arr->[$j] < $arr->[$j\
    \ - 1]) {\n            $j++;\n        }\n        if($j - $i >= $k) {\n       \
    \     push @res, @$arr[$i .. $i + $k - 1];\n            return \\@res;\n     \
    \   }\n        push @res, @$arr[$i .. $j - 1];\n        $k -= $j - $i;\n     \
    \   $i = $j;\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while ($i < $j) {\n        my $p = partition($arr, $i, $j);\n        if ($p\
    \ == $k - 1) {\n            return [@$arr[0..$p]];\n        } elsif ($p < $k -\
    \ 1) {\n            $i = $p + 1;\n        } else {\n            $j = $p - 1;\n\
    \        }\n    }\n    return [@$arr[0..$i]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpnda41gdj.pl line
    22.

    '
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        if(scalar(@res) < $k) {\n            push @res, $arr->[$i];\n\
    \        } else {\n            my $min = $res[0];\n            my $index = 0;\n\
    \            for(my $j = 1; $j < $k; $j++) {\n                if($res[$j] < $min)\
    \ {\n                    $min = $res[$j];\n                    $index = $j;\n\
    \                }\n            }\n            if($arr->[$i] > $min) {\n     \
    \           $res[$index] = $arr->[$i];\n            }\n        }\n    }\n    return\
    \ @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    if ($k == 0) {\n  \
    \      return @res;\n    }\n    if ($k >= $n) {\n        return sort {$b <=> $a}\
    \ @$arr;\n    }\n    my $i = 0;\n    while ($i < $k) {\n        push @res, $arr->[$i];\n\
    \        $i++;\n    }\n    @res = sort {$b <=> $a} @res;\n    while ($i < $n)\
    \ {\n        if ($arr->[$i] > $res[$k - 1]) {\n            $res[$k - 1] = $arr->[$i];\n\
    \            @res = sort {$b <=> $a} @res;\n        }\n        $i++;\n    }\n\
    \    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    my $p = 0;\n    while ($i < $j) {\n        $p = partition($arr, $i, $j);\n\
    \        if ($p == $k - 1) {\n            last;\n        } elsif ($p < $k - 1)\
    \ {\n            $i = $p + 1;\n        } else {\n            $j = $p - 1;\n  \
    \      }\n    }\n    return [@$arr[0..$k-1]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpy8l49q8b.pl line
    23.

    '
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @ret;\n    my $len = scalar(@$arr);\n    return [] if $len\
    \ == 0;\n    return [$arr->[0]] if $len == 1;\n    my $i = 0;\n    while($i <\
    \ $k) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n        for(my\
    \ $j = $i + 1; $j < $len; $j++) {\n            if($arr->[$j] > $max) {\n     \
    \           $max = $arr->[$j];\n                $max_idx = $j;\n            }\n\
    \        }\n        $ret[$i] = $max;\n        $arr->[$max_idx] = $arr->[$i];\n\
    \        $arr->[$i] = $max;\n        $i++;\n    }\n    return \\@ret;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n    \
    \    if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        if(scalar(@res) < $k) {\n            push @res, $arr->[$i];\n\
    \        } else {\n            my $j = 0;\n            while($j < $k && $res[$j]\
    \ > $arr->[$i]) {\n                $j++;\n            }\n            if($j < $k)\
    \ {\n                splice(@res, $j, 0, $arr->[$i]);\n                pop @res;\n\
    \            }\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for(my $i = 0; $i < @$arr; $i++) {\n        if(@res\
    \ < $k) {\n            push @res, $arr->[$i];\n            @res = sort {$b <=>\
    \ $a} @res;\n        } else {\n            if($arr->[$i] > $res[$k - 1]) {\n \
    \               $res[$k - 1] = $arr->[$i];\n                @res = sort {$b <=>\
    \ $a} @res;\n            }\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $i = 0;\n    while ($i < @$arr && $i < $k) {\n\
    \        my $j = $i;\n        while ($j > 0 && $arr->[$j] > $arr->[$j - 1]) {\n\
    \            ($arr->[$j], $arr->[$j - 1]) = ($arr->[$j - 1], $arr->[$j]);\n  \
    \          $j--;\n        }\n        $res[$i] = $arr->[$j];\n        $i++;\n \
    \   }\n    while ($i < @$arr) {\n        my $j = $i;\n        while ($j > 0 &&\
    \ $arr->[$j] > $arr->[$j - 1]) {\n            ($arr->[$j], $arr->[$j - 1]) = ($arr->[$j\
    \ - 1], $arr->[$j]);\n            $j--;\n        }\n        if ($arr->[$j] > $res[$k\
    \ - 1]) {\n            $res[$k - 1] = $arr->[$j];\n            my $l = $k - 1;\n\
    \            while ($l > 0 && $res[$l] > $res[$l - 1]) {\n                ($res[$l],\
    \ $res[$l - 1]) = ($res[$l - 1], $res[$l]);\n                $l--;\n         \
    \   }\n        }\n        $i++;\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i+1..$#$arr) {\n            if\
    \ ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n                $max_idx\
    \ = $j;\n            }\n        }\n        $res[$i] = $max;\n        ($arr->[$i],\
    \ $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $heap = Heap->new();\n    for(my\
    \ $i = 0; $i < $k; $i++) {\n        $heap->insert($arr->[$i]);\n    }\n    for(my\
    \ $i = $k; $i < $n; $i++) {\n        if($arr->[$i] > $heap->top()) {\n       \
    \     $heap->pop();\n            $heap->insert($arr->[$i]);\n        }\n    }\n\
    \    my @res = ();\n    while($heap->size() > 0) {\n        push @res, $heap->pop();\n\
    \    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t locate object method "new" via package "Heap" (perhaps you forgot
    to load "Heap"?) at /tmp/tmpiuyh9p17.pl line 19.

    '
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @result;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $n; $i++) {\n        my $num = $arr->[$i];\n        if(scalar(@result) < $k)\
    \ {\n            push @result, $num;\n            @result = sort {$b <=> $a} @result;\n\
    \        } else {\n            if($num > $result[$k - 1]) {\n                $result[$k\
    \ - 1] = $num;\n                @result = sort {$b <=> $a} @result;\n        \
    \    }\n        }\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i <\
    \ $n; $i++) {\n        if(scalar(@res) < $k) {\n            push @res, $arr->[$i];\n\
    \        } else {\n            my $j = 0;\n            while($j < $k && $res[$j]\
    \ > $arr->[$i]) {\n                $j++;\n            }\n            if($j < $k)\
    \ {\n                splice(@res, $j, 0, $arr->[$i]);\n                pop @res;\n\
    \            }\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @max;\n    for(my $i = 0; $i < $k; $i++) {\n        push @max,\
    \ $arr->[$i];\n    }\n    @max = sort {$b <=> $a} @max;\n    for(my $i = $k; $i\
    \ < @$arr; $i++) {\n        if($arr->[$i] > $max[-1]) {\n            $max[-1]\
    \ = $arr->[$i];\n            @max = sort {$b <=> $a} @max;\n        }\n    }\n\
    \    return \\@max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        my $num = $arr->[$i];\n        if(scalar(@res) < $k)\
    \ {\n            push @res, $num;\n            if(scalar(@res) == $k) {\n    \
    \            @res = sort {$b <=> $a} @res;\n            }\n        } else {\n\
    \            if($num > $res[$k - 1]) {\n                $res[$k - 1] = $num;\n\
    \                @res = sort {$b <=> $a} @res;\n            }\n        }\n   \
    \ }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @result;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $n; $i++) {\n        my $num = $arr->[$i];\n        if(scalar(@result) < $k)\
    \ {\n            push @result, $num;\n            next;\n        }\n        my\
    \ $min = $result[0];\n        if($num > $min) {\n            shift @result;\n\
    \            push @result, $num;\n        }\n    }\n    return \\@result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n  \
    \      if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $i = 0;\n    while($i < $k) {\n        my $max\
    \ = $arr->[$i];\n        my $max_index = $i;\n        for my $j ($i+1..$#{$arr})\
    \ {\n            if($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_index = $j;\n            }\n        }\n        $res[$i]\
    \ = $max;\n        $arr->[$max_index] = $arr->[$i];\n        $arr->[$i] = $max;\n\
    \        $i++;\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @res = ();\n    for (my $i = 0;\
    \ $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n\
    \        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        $res[$i] = $max;\n        $arr->[$max_idx] = $arr->[$i];\n\
    \    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i <\
    \ $n; $i++) {\n        my $num = $arr->[$i];\n        if(scalar(@res) < $k) {\n\
    \            push @res, $num;\n            @res = sort {$b <=> $a} @res;\n   \
    \     } else {\n            if($num > $res[-1]) {\n                pop @res;\n\
    \                push @res, $num;\n                @res = sort {$b <=> $a} @res;\n\
    \            }\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while ($i < $j) {\n        my $p = partition($arr, $i, $j);\n        if ($p\
    \ == $k - 1) {\n            last;\n        } elsif ($p < $k - 1) {\n         \
    \   $i = $p + 1;\n        } else {\n            $j = $p - 1;\n        }\n    }\n\
    \    return [@$arr[0..$k-1]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5],\
    \ 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpyo6m063p.pl line
    22.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $i = 0;\n    while($i < $k) {\n        my $max\
    \ = $arr->[$i];\n        my $max_idx = $i;\n        for(my $j = $i + 1; $j < @$arr;\
    \ $j++) {\n            if($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_idx = $j;\n            }\n        }\n        push @res,\
    \ $max;\n        $arr->[$max_idx] = $arr->[$i];\n        $arr->[$i] = $max;\n\
    \        $i++;\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @result;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $n; $i++) {\n        my $num = $arr->[$i];\n        if(scalar(@result) < $k)\
    \ {\n            push @result, $num;\n            @result = sort {$b <=> $a} @result;\n\
    \        } else {\n            if($num > $result[-1]) {\n                pop @result;\n\
    \                push @result, $num;\n                @result = sort {$b <=> $a}\
    \ @result;\n            }\n        }\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_i = $i;\n        for my $j ($i+1..$#$arr) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_i = $j;\n\
    \            }\n        }\n        $res[$i] = $max;\n        ($arr->[$i], $arr->[$max_i])\
    \ = ($arr->[$max_i], $arr->[$i]);\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @res = ();\n    for(my $i = 0;\
    \ $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n\
    \        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        $res[$i] = $max;\n        ($arr->[$i], $arr->[$max_idx])\
    \ = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @result;\n    my $i = 0;\n    while ($i < $k) {\n        my\
    \ $max = $arr->[$i];\n        my $max_index = $i;\n        for (my $j = $i + 1;\
    \ $j < @$arr; $j++) {\n            if ($arr->[$j] > $max) {\n                $max\
    \ = $arr->[$j];\n                $max_index = $j;\n            }\n        }\n\
    \        push @result, $max;\n        $arr->[$max_index] = $arr->[$i];\n     \
    \   $arr->[$i] = $max;\n        $i++;\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while ($i < $j) {\n        my $p = partition($arr, $i, $j);\n        if ($p\
    \ == $k - 1) {\n            return [@$arr[0..$p]];\n        } elsif ($p > $k -\
    \ 1) {\n            $j = $p - 1;\n        } else {\n            $i = $p + 1;\n\
    \        }\n    }\n    return [@$arr[0..$i]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpmcd71qhc.pl line
    22.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $len = scalar(@$arr);\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        if(scalar(@res) < $k) {\n            push @res, $arr->[$i];\n\
    \        } else {\n            my $min = $res[0];\n            my $min_idx = 0;\n\
    \            for(my $j = 1; $j < $k; $j++) {\n                if($res[$j] < $min)\
    \ {\n                    $min = $res[$j];\n                    $min_idx = $j;\n\
    \                }\n            }\n            if($arr->[$i] > $min) {\n     \
    \           $res[$min_idx] = $arr->[$i];\n            }\n        }\n    }\n  \
    \  return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $n = scalar(@$arr);\n    if ($k == 0) {\n  \
    \      return @res;\n    }\n    if ($k == $n) {\n        return @$arr;\n    }\n\
    \    my $i = 0;\n    my $j = $k;\n    while ($j < $n) {\n        my $max = $arr->[$i];\n\
    \        my $max_index = $i;\n        for (my $m = $i + 1; $m <= $j; $m++) {\n\
    \            if ($arr->[$m] > $max) {\n                $max = $arr->[$m];\n  \
    \              $max_index = $m;\n            }\n        }\n        if ($max_index\
    \ != $i) {\n            my $temp = $arr->[$i];\n            $arr->[$i] = $arr->[$max_index];\n\
    \            $arr->[$max_index] = $temp;\n        }\n        $i++;\n        $j++;\n\
    \    }\n    for (my $m = 0; $m < $k; $m++) {\n        push @res, $arr->[$m];\n\
    \    }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    my $p = partition($arr, $i, $j);\n    while ($p != $k - 1) {\n        if\
    \ ($p > $k - 1) {\n            $j = $p - 1;\n            $p = partition($arr,\
    \ $i, $j);\n        } else {\n            $i = $p + 1;\n            $p = partition($arr,\
    \ $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpxk31ikcx.pl line
    21.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    my $p = partition($arr, $i, $j);\n    while ($p != $k - 1) {\n        if\
    \ ($p > $k - 1) {\n            $j = $p - 1;\n            $p = partition($arr,\
    \ $i, $j);\n        } else {\n            $i = $p + 1;\n            $p = partition($arr,\
    \ $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::partition called at /tmp/tmpxk31ikcx.pl line
    21.

    '
  stdout: ''
  timestamp: 1660012778
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $len = @$arr;\n    my $max = $arr->[0];\n    my $max_idx =\
    \ 0;\n    for my $i (1..$k-1) {\n        if ($arr->[$i] > $max) {\n          \
    \  $max = $arr->[$i];\n            $max_idx = $i;\n        }\n    }\n    for my\
    \ $i ($k..$len-1) {\n        if ($arr->[$i] > $max) {\n            $arr->[$max_idx]\
    \ = $arr->[$i];\n            $max = $arr->[$i];\n            $max_idx = $i;\n\
    \            for my $j (0..$k-1) {\n                if ($arr->[$j] > $max) {\n\
    \                    $max = $arr->[$j];\n                    $max_idx = $j;\n\
    \                }\n            }\n        }\n    }\n    return $arr;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n    \
    \    if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012779
