name: HumanEval_42_incr_list
language: rust
results:
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = vec![];\n    for elem in l {\n        result.push(elem +\
    \ 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().zip(l.iter().cloned().map(|&x| x + 1)).collect()\n}\n\n\
    fn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_xfbdct1.rs:7:50\n  |\n7 |\
    \     l.iter().cloned().zip(l.iter().cloned().map(|&x| x + 1)).collect()\n  |\
    \                                                  ^--\n  |                  \
    \                                ||\n  |                                     \
    \             |expected due to this\n  |                                     \
    \             expected `isize`, found reference\n  |                         \
    \                         help: did you mean `x`: `&isize`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0277]: a value of type\
    \ `Vec<isize>` cannot be built from an iterator over elements of type `(isize,\
    \ _)`\n    --> /tmp/tmp_xfbdct1.rs:7:62\n     |\n7    |     l.iter().cloned().zip(l.iter().cloned().map(|&x|\
    \ x + 1)).collect()\n     |                                                  \
    \            ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=(isize,\
    \ _)>`\n     |\n     = help: the trait `FromIterator<(isize, _)>` is not implemented\
    \ for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for\
    \ `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut i = 0;\n    let mut result = vec![];\n    for item in l {\n     \
    \   *result += item;\n        i += 1;\n        if i > 30 {\n            result.truncate(i);\n\
    \            i = 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `[_]`\n  --> /tmp/tmpw62e8but.rs:10:9\n   |\n10 |         *result += item;\n\
    \   |         -------^^^^^^^^\n   |         |\n   |         cannot use `+=` on\
    \ type `[_]`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.into_iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut acc = l.first().unwrap();\n    for x in l {\n        *acc+= 1;\n\
    \        acc = x;\n    }\n    acc\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvinepjnc.rs:10:15\n   |\n\
    7  |     let mut acc = l.first().unwrap();\n   |                   ------------------\
    \ expected due to this value\n...\n10 |         acc = x;\n   |               ^\n\
    \   |               |\n   |               expected `&isize`, found `isize`\n \
    \  |               help: consider borrowing here: `&x`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvinepjnc.rs:12:5\n   |\n6  | fn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                ---------- expected `Vec<isize>`\
    \ because of return type\n...\n12 |     acc\n   |     ^^^ expected struct `Vec`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ reference `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = l;\n    for v in result {\n        result += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<isize>`\n --> /tmp/tmpm12ifu7w.rs:9:9\n  |\n9 |         result += 1;\n\
    \  |         ------^^^^^\n  |         |\n  |         cannot use `+=` on type `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut r = l.clone();\n    let mut cnt = 0;\n    for v in r {\n        if\
    \ cnt > 0 {\n            cnt = 0;\n            r.push(cnt + v);\n        }\n \
    \       cnt += 1;\n    }\n    r\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `r`\n   --> /tmp/tmpyc60mgkz.rs:12:13\n\
    \    |\n7   |     let mut r = l.clone();\n    |         ----- move occurs because\
    \ `r` has type `Vec<isize>`, which does not implement the `Copy` trait\n8   |\
    \     let mut cnt = 0;\n9   |     for v in r {\n    |              - `r` moved\
    \ due to this implicit call to `.into_iter()`\n...\n12  |             r.push(cnt\
    \ + v);\n    |             ^^^^^^^^^^^^^^^ value borrowed here after move\n  \
    \  |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `r`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to\
    \ avoid moving into the `for` loop\n    |\n9   |     for v in &r {\n    |    \
    \          +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().zip(0..).map(|(_, x)| x + 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[4, 3, 2]`', /tmp/tmpcku_expl.rs:13:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut rev = l.len().reverse();\n    rev.iter().cloned().map(|x| *x += 1).collect::<Vec<_>>().reverse()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for type `usize` in the current\
    \ scope\n --> /tmp/tmple2fphdk.rs:7:27\n  |\n7 |     let mut rev = l.len().reverse();\n\
    \  |                           ^^^^^^^ help: there is an associated function with\
    \ a similar name: `reverse_bits`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut sum = 0;\n    for i in l {\n        sum += i;\n    }\n    l.iter().map(|&x|\
    \ x + 1).collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "warning: variable `sum` is assigned to, but never used\n --> /tmp/tmprwmq64h6.rs:7:13\n\
    \  |\n7 |     let mut sum = 0;\n  |             ^^^\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n  = note: consider using `_sum` instead\n\nerror[E0382]: borrow\
    \ of moved value: `l`\n   --> /tmp/tmprwmq64h6.rs:11:5\n    |\n6   | fn incr_list(l:\
    \ Vec<isize>) -> Vec<isize> {\n    |              - move occurs because `l` has\
    \ type `Vec<isize>`, which does not implement the `Copy` trait\n7   |     let\
    \ mut sum = 0;\n8   |     for i in l {\n    |              - `l` moved due to\
    \ this implicit call to `.into_iter()`\n...\n11  |     l.iter().map(|&x| x + 1).collect::<Vec<_>>()\n\
    \    |     ^^^^^^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `l`\n    = note: borrow\
    \ occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n8\
    \   |     for i in &l {\n    |              +\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().fold(Vec::new(), |mut acc, x| acc.push(x + 1))\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyo7raij_.rs:7:44\n  |\n6 |\
    \ fn incr_list(l: Vec<isize>) -> Vec<isize> {\n  |                           \
    \     ---------- expected `Vec<isize>` because of return type\n7 |     l.iter().fold(Vec::new(),\
    \ |mut acc, x| acc.push(x + 1))\n  |                                         \
    \   ^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n          found unit type `()`\nnote: method `push` modifies\
    \ its receiver in-place\n --> /tmp/tmpyo7raij_.rs:7:48\n  |\n7 |     l.iter().fold(Vec::new(),\
    \ |mut acc, x| acc.push(x + 1))\n  |                                         \
    \   --- ^^^^ this call modifies `acc` in-place\n  |                          \
    \                  |\n  |                                            you probably\
    \ want to use this value after calling the method...\n  = note: ...instead of\
    \ the `()` output of method `push`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = Vec::new();\n    l.iter().cloned().for_each(|x| {\n       \
    \ res.push(x + 1);\n    });\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut it = l.iter().cloned().count();\n\
    \    let mut c = 1;\n    let mut x = l.iter().cloned();\n    loop {\n        let\
    \ cur = it.next().unwrap();\n        let tmp = x;\n        x += vec![cur];\n \
    \       result.push(tmp.unwrap() + c);\n        c = 1;\n        if it.peek().is_some()\
    \ {\n            c += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `next` found for type `usize` in the current\
    \ scope\n  --> /tmp/tmpegevcepf.rs:12:22\n   |\n12 |         let cur = it.next().unwrap();\n\
    \   |                      ^^^^ method not found in `usize`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n  --> /tmp/tmpegevcepf.rs:14:9\n   |\n14 |         x += vec![cur];\n\
    \   |         -^^^^^^^^^^^^^\n   |         |\n   |         cannot use `+=` on\
    \ type `Cloned<std::slice::Iter<'_, isize>>`\n\nerror[E0599]: no method named\
    \ `unwrap` found for struct `Cloned` in the current scope\n  --> /tmp/tmpegevcepf.rs:15:25\n\
    \   |\n15 |         result.push(tmp.unwrap() + c);\n   |                     \
    \    ^^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror[E0599]:\
    \ no method named `peek` found for type `usize` in the current scope\n  --> /tmp/tmpegevcepf.rs:17:15\n\
    \   |\n17 |         if it.peek().is_some() {\n   |               ^^^^ method not\
    \ found in `usize`\n\nwarning: unreachable expression\n  --> /tmp/tmpegevcepf.rs:21:5\n\
    \   |\n11 | /     loop {\n12 | |         let cur = it.next().unwrap();\n13 | |\
    \         let tmp = x;\n14 | |         x += vec![cur];\n...  |\n19 | |       \
    \  }\n20 | |     }\n   | |_____- any code following this expression is unreachable\n\
    21 |       result\n   |       ^^^^^^ unreachable expression\n   |\n   = note:\
    \ `#[warn(unreachable_code)]` on by default\n\nerror: aborting due to 4 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0368,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.into_iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().zip(l.iter().cloned().skip(1)).map(|(v, w)| v + w)\n}\n\
    \nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1mhqug2.rs:7:5\n  |\n6 |\
    \ fn incr_list(l: Vec<isize>) -> Vec<isize> {\n  |                           \
    \     ---------- expected `Vec<isize>` because of return type\n7 |     l.iter().cloned().zip(l.iter().cloned().skip(1)).map(|(v,\
    \ w)| v + w)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Map`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \             found struct `Map<Zip<Cloned<std::slice::Iter<'_, isize>>, Skip<Cloned<std::slice::Iter<'_,\
    \ isize>>>>, [closure@/tmp/tmpc1mhqug2.rs:7:58: 7:72]>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut c = l.len() as isize;\n    l.iter_mut().for_each(|x| { c += x; });\n\
    \    c\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `&mut isize` to `isize`\n --> /tmp/tmp4_08kze9.rs:8:35\n\
    \  |\n8 |     l.iter_mut().for_each(|x| { c += x; });\n  |                   \
    \                ^^ no implementation for `isize += &mut isize`\n  |\n  = help:\
    \ the trait `AddAssign<&mut isize>` is not implemented for `isize`\n  = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n            <f32\
    \ as AddAssign<&f32>>\n            <f32 as AddAssign>\n            <f64 as AddAssign<&f64>>\n\
    \            <f64 as AddAssign>\n            <i128 as AddAssign<&i128>>\n    \
    \        <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n         \
    \   <i16 as AddAssign>\n          and 20 others\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp4_08kze9.rs:9:5\n  |\n6 | fn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |                                ---------- expected `Vec<isize>` because\
    \ of return type\n...\n9 |     c\n  |     ^ expected struct `Vec`, found `isize`\n\
    \  |\n  = note: expected struct `Vec<isize>`\n               found type `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut list = l;\n    let len = list.len();\n    for i in 0..len {\n   \
    \     list[i] = list[i] + 1;\n    }\n    return list;\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut i = 0;\n    let mut list = l.iter().cloned().collect::<Vec<isize>>();\n\
    \    for &n in list {\n        *n += i;\n        i += 1;\n    }\n    list\n}\n\
    \nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3_2thq81.rs:9:9\n  |\n9 |\
    \     for &n in list {\n  |         ^^    ---- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `n`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut s = Vec::new();\n    for x in l {\n        s.push(x);\n        s.push(x+1);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4, 2, 3, 1, 2]`,\n right: `[4, 3, 2]`', /tmp/tmpk137mds2.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut out = vec![];\n    for i in 0..l.len() {\n        out.push(l[i] +\
    \ 1);\n    }\n    out\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().zip(incr(l.len()).rev()).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `incr` in this scope\n --> /tmp/tmp4izqthax.rs:7:27\n\
    \  |\n7 |     l.iter().cloned().zip(incr(l.len()).rev()).collect()\n  |      \
    \                     ^^^^ not found in this scope\n\nerror[E0277]: a value of\
    \ type `Vec<isize>` cannot be built from an iterator over elements of type `(isize,\
    \ _)`\n    --> /tmp/tmp4izqthax.rs:7:48\n     |\n7    |     l.iter().cloned().zip(incr(l.len()).rev()).collect()\n\
    \     |                                                ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=(isize, _)>`\n     |\n     =\
    \ help: the trait `FromIterator<(isize, _)>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ret: Vec<isize> = vec![];\n    for i in l.iter() {\n        ret.push(i\
    \ + 1);\n    }\n    ret\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut x = l.iter().cloned().collect::<Vec<_>>();\n    x.iter().for_each(|x|\
    \ *x += 1);\n    x\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0594]: cannot assign to `*x`, which is behind a `&` reference\n\
    \ --> /tmp/tmprz_9o2wm.rs:8:27\n  |\n8 |     x.iter().for_each(|x| *x += 1);\n\
    \  |                        -  ^^^^^^^ `x` is a `&` reference, so the data it\
    \ refers to cannot be written\n  |                        |\n  |             \
    \           help: consider changing this to be a mutable reference: `&mut isize`\n\
    \nwarning: variable does not need to be mutable\n --> /tmp/tmprz_9o2wm.rs:7:9\n\
    \  |\n7 |     let mut x = l.iter().cloned().collect::<Vec<_>>();\n  |        \
    \ ----^\n  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror: aborting due to previous error; 1 warning emitted\n\n\
    For more information about this error, try `rustc --explain E0594`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.into_iter().zip(l.iter().cloned()).map(|(x, y)| x + y).collect()\n}\n\n\
    fn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpyvm23wlp.rs:7:23\n\
    \    |\n6   | fn incr_list(l: Vec<isize>) -> Vec<isize> {\n    |             \
    \ - move occurs because `l` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n7   |     l.into_iter().zip(l.iter().cloned()).map(|(x, y)| x\
    \ + y).collect()\n    |       -----------     ^^^^^^^^ value borrowed here after\
    \ move\n    |       |\n    |       `l` moved due to this method call\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `l`\n\
    \    = note: borrow occurs due to deref coercion to `[isize]`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut last_elem = -1;\n    for (i, elem)\
    \ in l.iter().enumerate() {\n        match elem {\n            None => (),\n \
    \           Some(val) => {\n                last_elem = Some(i);\n           \
    \     result.push(val + 1);\n            }\n        }\n    }\n    match last_elem\
    \ {\n        None => result,\n        Some(val) => {\n            result.push(val\
    \ + 1);\n            result\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptxtqfkfz.rs:11:13\n   |\n\
    10 |         match elem {\n   |               ---- this expression has type `&isize`\n\
    11 |             None => (),\n   |             ^^^^ expected `isize`, found enum\
    \ `Option`\n   |\n   = note: expected type `isize`\n              found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptxtqfkfz.rs:12:13\n   |\n10 |\
    \         match elem {\n   |               ---- this expression has type `&isize`\n\
    11 |             None => (),\n12 |             Some(val) => {\n   |          \
    \   ^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected\
    \ type `isize`\n              found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptxtqfkfz.rs:13:29\n   |\n8  |     let mut last_elem = -1;\n\
    \   |                         -- expected due to this value\n...\n13 |       \
    \          last_elem = Some(i);\n   |                             ^^^^^^^ expected\
    \ integer, found enum `Option`\n   |\n   = note: expected type `{integer}`\n \
    \             found enum `Option<usize>`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmptxtqfkfz.rs:19:9\n   |\n18 |     match last_elem {\n   |       \
    \    --------- this expression has type `{integer}`\n19 |         None => result,\n\
    \   |         ^^^^ expected integer, found enum `Option`\n   |\n   = note: expected\
    \ type `{integer}`\n              found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptxtqfkfz.rs:20:9\n   |\n18 |     match last_elem {\n  \
    \ |           --------- this expression has type `{integer}`\n19 |         None\
    \ => result,\n20 |         Some(val) => {\n   |         ^^^^^^^^^ expected integer,\
    \ found enum `Option`\n   |\n   = note: expected type `{integer}`\n          \
    \    found enum `Option<_>`\n\nerror: aborting due to 5 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let candidate =\
    \ incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut s = l;\n    for i in s.iter() {\n        s[i] = s[i] + 1;\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmpmj7h5l1h.rs:9:9\n\
    \  |\n9 |         s[i] = s[i] + 1;\n  |         ^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n  = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n  = note: required because of the requirements on the impl of `Index<&isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n\
    \ --> /tmp/tmpmj7h5l1h.rs:9:16\n  |\n9 |         s[i] = s[i] + 1;\n  |       \
    \         ^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n \
    \ = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n  =\
    \ help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().zip(inc_list(1, &mut l)).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `inc_list` in this scope\n --> /tmp/tmpv2gk7j53.rs:7:27\n\
    \  |\n7 |     l.iter().cloned().zip(inc_list(1, &mut l)).collect()\n  |      \
    \                     ^^^^^^^^ not found in this scope\n\nerror[E0277]: a value\
    \ of type `Vec<isize>` cannot be built from an iterator over elements of type\
    \ `(isize, _)`\n    --> /tmp/tmpv2gk7j53.rs:7:48\n     |\n7    |     l.iter().cloned().zip(inc_list(1,\
    \ &mut l)).collect()\n     |                                                ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=(isize,\
    \ _)>`\n     |\n     = help: the trait `FromIterator<(isize, _)>` is not implemented\
    \ for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for\
    \ `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v = Vec::new();\n    for e in l {\n        v.push(v.pop() + 1);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `{integer}` to `Option<_>`\n --> /tmp/tmpzlgjfv99.rs:9:24\n\
    \  |\n9 |         v.push(v.pop() + 1);\n  |                ------- ^ - {integer}\n\
    \  |                |\n  |                Option<_>\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ret: Vec<isize> = vec![];\n    for el in l.iter() {\n        ret.push(el\
    \ + 1);\n    }\n    ret\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut sum: isize = 0;\n    for i in l.iter().cloned() {\n        sum +=\
    \ i;\n    }\n    Vec::from_iter(l.iter().cloned().map(|x| sum + x).collect())\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `from_iter` found for\
    \ struct `Vec<_, _>` in the current scope\n  --> /tmp/tmp9plci3hu.rs:11:10\n \
    \  |\n11 |     Vec::from_iter(l.iter().cloned().map(|x| sum + x).collect())\n\
    \   |          ^^^^^^^^^ function or associated item not found in `Vec<_, _>`\n\
    \   |\n   = help: items from traits can only be used if the trait is in scope\n\
    help: the following trait is implemented but not in scope; perhaps add a `use`\
    \ for it:\n   |\n1  | use std::iter::FromIterator;\n   |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.into_iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpef7l4y6z.rs:7:24\n  |\n7 |\
    \     l.into_iter().map(|&x| x + 1).collect()\n  |                        ^--\n\
    \  |                        ||\n  |                        |expected due to this\n\
    \  |                        expected `isize`, found reference\n  |           \
    \             help: did you mean `x`: `&isize`\n  |\n  = note:   expected type\
    \ `isize`\n          found reference `&_`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    (0..l.len()).map(|i| l[i] + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = vec![];\n    for e in l.iter() {\n        res.push(e + 1);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.into_iter().map(|x| *x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmphq0_8pxv.rs:7:27\n\
    \  |\n7 |     l.into_iter().map(|x| *x + 1).collect()\n  |                   \
    \        ^^\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut new = Vec::new();\n    for (i, elt) in l.iter().enumerate() {\n \
    \       new.push(elt + 1);\n    }\n    new\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ret = l;\n    ret.into_iter().for_each(|x| ret += 1).collect();\n\
    \    ret\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<isize>`\n --> /tmp/tmptokp_90x.rs:8:34\n  |\n8 |     ret.into_iter().for_each(|x|\
    \ ret += 1).collect();\n  |                                  ---^^^^^\n  |   \
    \                               |\n  |                                  cannot\
    \ use `+=` on type `Vec<isize>`\n\nerror[E0599]: `()` is not an iterator\n -->\
    \ /tmp/tmptokp_90x.rs:8:44\n  |\n8 |     ret.into_iter().for_each(|x| ret += 1).collect();\n\
    \  |                                            ^^^^^^^ `()` is not an iterator\n\
    \  |\n  = note: the following trait bounds were not satisfied:\n          `():\
    \ Iterator`\n          which is required by `&mut (): Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0368, E0599.\n\
    For more information about an error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = l;\n    for i in 1..result.len() {\n        result[i] =\
    \ result[i] + 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 2]`,\n right: `[4, 3, 2]`', /tmp/tmpev76a9es.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result: Vec<isize> = Vec::new();\n    let mut prev = 0isize;\n  \
    \  for elt in l {\n        prev = prev + elt + 1;\n        result.push(prev);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 7, 9]`,\n right: `[4, 3, 2]`', /tmp/tmpkk3wm1ww.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut inc = vec![1isize];\n    inc.extend(inc.iter().cloned());\n    inc.iter_mut().cloned().for_each(|v|\
    \ v += 1);\n    inc.into_iter().cloned().collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::IterMut<'_, isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpi5tf2drd.rs:9:20\n     |\n9    |\
    \     inc.iter_mut().cloned().for_each(|v| v += 1);\n     |                  \
    \  ^^^^^^ types differ in mutability\n     |\n     = note:      expected reference\
    \ `&_`\n             found mutable reference `&mut isize`\nnote: required by a\
    \ bound in `cloned`\n\nerror[E0599]: the method `for_each` exists for struct `Cloned<std::slice::IterMut<'_,\
    \ isize>>`, but its trait bounds were not satisfied\n   --> /tmp/tmpi5tf2drd.rs:9:29\n\
    \    |\n9   |       inc.iter_mut().cloned().for_each(|v| v += 1);\n    |     \
    \                          ^^^^^^^^ method cannot be called on `Cloned<std::slice::IterMut<'_,\
    \ isize>>` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `<std::slice::IterMut<'_, isize> as\
    \ Iterator>::Item = &_`\n            which is required by `Cloned<std::slice::IterMut<'_,\
    \ isize>>: Iterator`\n            `Cloned<std::slice::IterMut<'_, isize>>: Iterator`\n\
    \            which is required by `&mut Cloned<std::slice::IterMut<'_, isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpi5tf2drd.rs:10:21\n     |\n10   |\
    \     inc.into_iter().cloned().collect()\n     |                     ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `collect` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpi5tf2drd.rs:10:30\n \
    \  |\n10 |       inc.into_iter().cloned().collect()\n   |                    \
    \            ^^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut incr = 1.0;\n    l.iter().cloned().for_each(|x| {\n        *x +=\
    \ *x;\n        *x += incr;\n        incr *= 2.0;\n    });\n    l\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpx9ffn7z3.rs:9:9\n\
    \  |\n9 |         *x += *x;\n  |         ^^\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n --> /tmp/tmpx9ffn7z3.rs:9:15\n  |\n9 |         *x += *x;\n\
    \  |               ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n \
    \ --> /tmp/tmpx9ffn7z3.rs:10:9\n   |\n10 |         *x += incr;\n   |         ^^\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = Vec::with_capacity(l.len());\n    for i in l {\n        res.push(i\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut acc = 1;\n    for &x in l {\n        *x *= acc;\n        *x += 1;\n\
    \        acc /= x;\n    }\n    l.iter().cloned().collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp67g70xiu.rs:8:9\n  |\n8 |\
    \     for &x in l {\n  |         ^^    - this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut r = l.into_iter().cloned().collect::<Vec<isize>>();\n    for idx\
    \ in 0..r.len() {\n        r[idx] += 1\n    }\n    r\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp7o9i817z.rs:7:31\n     |\n7    |     let mut r = l.into_iter().cloned().collect::<Vec<isize>>();\n\
    \     |                               ^^^^^^ expected reference, found `isize`\n\
    \     |\n     = note: expected reference `&_`\n                     found type\
    \ `isize`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method `collect`\
    \ exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmp7o9i817z.rs:7:40\n   |\n7  |       let mut\
    \ r = l.into_iter().cloned().collect::<Vec<isize>>();\n   |                  \
    \                        ^^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut l = l;\n    l.push(l.iter().cloned().next().unwrap() + 1);\n    l\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpg708i1hy.rs:8:37\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut cur = l.first();\n    let mut acc = 1;\n    loop {\n        cur =\
    \ if cur == l.last() {\n            acc\n        } else {\n            cur + 1\n\
    \        };\n        l.push(cur);\n        acc += 1;\n    }\n    l\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplbskev_4.rs:11:13\n   |\n\
    11 |             acc\n   |             ^^^ expected enum `Option`, found integer\n\
    \   |\n   = note: expected enum `Option<&isize>`\n              found type `{integer}`\n\
    \nerror[E0369]: cannot add `{integer}` to `Option<&isize>`\n  --> /tmp/tmplbskev_4.rs:13:17\n\
    \   |\n13 |             cur + 1\n   |             --- ^ - {integer}\n   |    \
    \         |\n   |             Option<&isize>\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmplbskev_4.rs:15:16\n   |\n15 |         l.push(cur);\n   |      \
    \          ^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected\
    \ type `isize`\n              found enum `Option<&isize>`\n\nwarning: unreachable\
    \ expression\n  --> /tmp/tmplbskev_4.rs:18:5\n   |\n9  | /     loop {\n10 | |\
    \         cur = if cur == l.last() {\n11 | |             acc\n12 | |         }\
    \ else {\n...  |\n16 | |         acc += 1;\n17 | |     }\n   | |_____- any code\
    \ following this expression is unreachable\n18 |       l\n   |       ^ unreachable\
    \ expression\n   |\n   = note: `#[warn(unreachable_code)]` on by default\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0308, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut s = l;\n    s.push(0);\n    while let Some(i) = s.pop() {\n     \
    \   s.push(i + 1);\n    }\n    s\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = vec![];\n    let mut i = 0;\n    for e in l {\n        res.push(i\
    \ + 1);\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[4, 3, 2]`', /tmp/tmpbmrgsxgq.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = vec![];\n    for i in l.iter().cloned() {\n        res.push(i\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v = Vec::new();\n    v.extend_from_slice(l);\n    v.reduce(|a, b|\
    \ {\n        if a > b {\n            a as isize\n        } else {\n          \
    \  b as isize\n        }\n    });\n    v\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph7e05dlm.rs:8:25\n  |\n8 |\
    \     v.extend_from_slice(l);\n  |                         ^\n  |            \
    \             |\n  |                         expected `&[_]`, found struct `Vec`\n\
    \  |                         help: consider borrowing here: `&l`\n  |\n  = note:\
    \ expected reference `&[_]`\n                found struct `Vec<isize>`\n\nerror[E0599]:\
    \ `Vec<_>` is not an iterator\n   --> /tmp/tmph7e05dlm.rs:9:7\n    |\n9   |  \
    \     v.reduce(|a, b| {\n    |         ^^^^^^ `Vec<_>` is not an iterator\n  \
    \  |\n    = note: the following trait bounds were not satisfied:\n           \
    \ `Vec<_>: Iterator`\n            which is required by `&mut Vec<_>: Iterator`\n\
    \            `[_]: Iterator`\n            which is required by `&mut [_]: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut i = l.iter().cloned().nth(l.len() - 1);\n    let mut j = l.iter().cloned().nth(l.len()\
    \ - 2);\n    j.iter().cloned().zip(&mut i).for_each(|(mut x, mut y)| {\n     \
    \   *x = *x + 1;\n        *y = *y + 1;\n    });\n    i -= 1;\n    i -= 1;\n  \
    \  i -= 1;\n    i\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpgtwkvvlp.rs:10:9\n\
    \   |\n10 |         *x = *x + 1;\n   |         ^^\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmpgtwkvvlp.rs:10:14\n   |\n10 |        \
    \ *x = *x + 1;\n   |              ^^\n\nerror[E0368]: binary assignment operation\
    \ `-=` cannot be applied to type `Option<isize>`\n  --> /tmp/tmpgtwkvvlp.rs:13:5\n\
    \   |\n13 |     i -= 1;\n   |     -^^^^^\n   |     |\n   |     cannot use `-=`\
    \ on type `Option<isize>`\n\nerror[E0368]: binary assignment operation `-=` cannot\
    \ be applied to type `Option<isize>`\n  --> /tmp/tmpgtwkvvlp.rs:14:5\n   |\n14\
    \ |     i -= 1;\n   |     -^^^^^\n   |     |\n   |     cannot use `-=` on type\
    \ `Option<isize>`\n\nerror[E0368]: binary assignment operation `-=` cannot be\
    \ applied to type `Option<isize>`\n  --> /tmp/tmpgtwkvvlp.rs:15:5\n   |\n15 |\
    \     i -= 1;\n   |     -^^^^^\n   |     |\n   |     cannot use `-=` on type `Option<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgtwkvvlp.rs:16:5\n   |\n6  | fn\
    \ incr_list(l: Vec<isize>) -> Vec<isize> {\n   |                             \
    \   ---------- expected `Vec<isize>` because of return type\n...\n16 |     i\n\
    \   |     ^ expected struct `Vec`, found enum `Option`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n                found enum `Option<isize>`\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0368,\
    \ E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().zip((l.iter().cloned().map(|x| *x + 1) as Vec<_>)).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around method argument\n --> /tmp/tmpbtrpz7th.rs:7:27\n\
    \  |\n7 |     l.iter().cloned().zip((l.iter().cloned().map(|x| *x + 1) as Vec<_>)).collect::<Vec<_>>()\n\
    \  |                           ^                                           ^\n\
    \  |\n  = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \  |\n7 -     l.iter().cloned().zip((l.iter().cloned().map(|x| *x + 1) as Vec<_>)).collect::<Vec<_>>()\n\
    7 +     l.iter().cloned().zip(l.iter().cloned().map(|x| *x + 1) as Vec<_>).collect::<Vec<_>>()\n\
    \  | \n\nerror[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpbtrpz7th.rs:7:54\n\
    \  |\n7 |     l.iter().cloned().zip((l.iter().cloned().map(|x| *x + 1) as Vec<_>)).collect::<Vec<_>>()\n\
    \  |                                                      ^^\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpbtrpz7th.rs:7:5\n  |\n6 | fn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n  |                                ---------- expected `Vec<isize>`\
    \ because of return type\n7 |     l.iter().cloned().zip((l.iter().cloned().map(|x|\
    \ *x + 1) as Vec<_>)).collect::<Vec<_>>()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected struct `Vec<isize>`\n\
    \             found struct `Vec<(isize, _)>`\n\nerror: aborting due to 2 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308,\
    \ E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    if l.len() <= 0 {\n        return l;\n    }\n    let mut acc = vec![0; l.len()];\n\
    \    for i in 0 .. l.len() - 1 {\n        acc[i] += 1;\n    }\n    for i in 0\
    \ .. acc.len() - 1 {\n        acc[i] += acc[i + 1];\n    }\n    for i in 0 ..\
    \ acc.len() - 1 {\n        acc[i] = acc[i] % acc[i + 1];\n    }\n    for i in\
    \ 0 .. l.len() - 1 {\n        acc[i] = acc[i] + l[i];\n    }\n    acc\n}\n\nfn\
    \ main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to calculate the remainder with a divisor\
    \ of zero', /tmp/tmpldxy2jb3.rs:18:18\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.resize((l.len() + 1).max(l.len() + 1), Default::default());\n    let mut\
    \ i = 0;\n    for el in l {\n        l[i] = el + 1;\n        i += 1;\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpvsk2_2zb.rs:7:5\n  |\n6 | fn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    7 |     l.resize((l.len() + 1).max(l.len() + 1), Default::default());\n  |   \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow\
    \ as mutable\n\nerror[E0596]: cannot borrow `l` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpvsk2_2zb.rs:10:9\n   |\n6  | fn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n   |              - help: consider changing this to be mutable:\
    \ `mut l`\n...\n10 |         l[i] = el + 1;\n   |         ^ cannot borrow as mutable\n\
    \nerror[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpvsk2_2zb.rs:10:9\n\
    \    |\n6   | fn incr_list(l: Vec<isize>) -> Vec<isize> {\n    |             \
    \ - move occurs because `l` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n9   |     for el in l {\n    |               - `l` moved\
    \ due to this implicit call to `.into_iter()`\n10  |         l[i] = el + 1;\n\
    \    |         ^ value borrowed here after move\n    |\nnote: this function takes\
    \ ownership of the receiver `self`, which moves `l`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n9   |     for el in &l {\n    |               +\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0382, E0596.\n\
    For more information about an error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = vec![0; l.len()];\n\n    for i in 0..(result.len() - 1)\
    \ {\n        result[i + 1] = result[i] + 1;\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpppodydxo.rs:9:17\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut new_list = l.into_iter().cloned().collect::<Vec<_>>();\n    new_list.sort();\n\
    \    new_list.sort_unstable();\n    new_list.iter_mut().enumerate().for_each(|(i,\
    \ _)| *i += 1);\n    new_list\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp4ry1wo35.rs:7:38\n     |\n7    |     let mut new_list\
    \ = l.into_iter().cloned().collect::<Vec<_>>();\n     |                      \
    \                ^^^^^^ expected reference, found `isize`\n     |\n     = note:\
    \ expected reference `&_`\n                     found type `isize`\nnote: required\
    \ by a bound in `cloned`\n\nerror[E0599]: the method `collect` exists for struct\
    \ `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmp4ry1wo35.rs:7:47\n   |\n7  |       let mut new_list = l.into_iter().cloned().collect::<Vec<_>>();\n\
    \   |                                                 ^^^^^^^ method cannot be\
    \ called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n      \
    \     which is required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().map(|x| *x).collect::<Vec<isize>>() + 1\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp99r__m_a.rs:7:31\n\
    \  |\n7 |     l.iter().cloned().map(|x| *x).collect::<Vec<isize>>() + 1\n  | \
    \                              ^^\n\nerror[E0369]: cannot add `{integer}` to `Vec<isize>`\n\
    \ --> /tmp/tmp99r__m_a.rs:7:59\n  |\n7 |     l.iter().cloned().map(|x| *x).collect::<Vec<isize>>()\
    \ + 1\n  |     ----------------------------------------------------- ^ - {integer}\n\
    \  |     |\n  |     Vec<isize>\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0369, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().enumerate().flat_map(|(i, el)| {\n        let mut it =\
    \ l;\n        it.skip(1).take(i + 1).collect::<Vec<_>>()\n            .iter().cloned().into_boxed_slice()\n\
    \    }).collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpmi_wn3we.rs:9:12\n\
    \    |\n9   |           it.skip(1).take(i + 1).collect::<Vec<_>>()\n    |    \
    \          ^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n     \
    \       which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().enumerate().map(|(i, _)| i + 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `usize`\n    --> /tmp/tmpsdgmcbyo.rs:7:55\n     |\n7 \
    \   |     l.iter().cloned().enumerate().map(|(i, _)| i + 1).collect()\n     |\
    \                                                       ^^^^^^^ value of type\
    \ `Vec<isize>` cannot be built from `std::iter::Iterator<Item=usize>`\n     |\n\
    \     = help: the trait `FromIterator<usize>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut new_list = l;\n    new_list.push(new_list.iter().cloned().next().unwrap());\n\
    \    new_list.push(new_list.iter().cloned().next().unwrap());\n    new_list\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpyda8job1.rs:8:51\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = Vec::with_capacity(l.len() * 2);\n    for i in l.iter() {\n\
    \        res.push(i + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().enumerate().filter(|(_, el)| el != l.len()).map(|(i, el)|\
    \ {\n        l.into_iter().skip(i + 1).next().unwrap() + el\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3n9bp7bz.rs:7:58\n  |\n7 |\
    \     l.iter().cloned().enumerate().filter(|(_, el)| el != l.len()).map(|(i, el)|\
    \ {\n  |                                                          ^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: can't compare `&isize` with `usize`\n\
    \ --> /tmp/tmp3n9bp7bz.rs:7:55\n  |\n7 |     l.iter().cloned().enumerate().filter(|(_,\
    \ el)| el != l.len()).map(|(i, el)| {\n  |                                   \
    \                    ^^ no implementation for `&isize == usize`\n  |\n  = help:\
    \ the trait `PartialEq<usize>` is not implemented for `&isize`\n  = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n            f32\n \
    \           f64\n            i128\n            i16\n            i32\n        \
    \    i64\n            i8\n            isize\n          and 6 others\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().into_iter().map(|e| *e + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpp51fid3g.rs:7:43\n\
    \  |\n7 |     l.iter().cloned().into_iter().map(|e| *e + 1).collect()\n  |   \
    \                                        ^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().enumerate().for_each(|(i, v)| (*v + 1));\n    l\n}\n\n\
    fn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpd70ewfix.rs:7:54\n\
    \  |\n7 |     l.iter().cloned().enumerate().for_each(|(i, v)| (*v + 1));\n  |\
    \                                                      ^^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    if l.len() <= 1 {\n        l\n    } else {\n        let mut rlist = l;\n\
    \        let mut i = 0;\n        rlist.push(0);\n        while i < rlist.len()\
    \ {\n            let j = i;\n            while j < rlist.len() {\n           \
    \     if rlist[j] < rlist[j+1] {\n                    rlist.swap(j, j+1);\n  \
    \              }\n                j += 1;\n            }\n            i += 1;\n\
    \        }\n        rlist\n    }\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmpvpqnn6fv.rs:19:17\n\
    \   |\n14 |             let j = i;\n   |                 -\n   |             \
    \    |\n   |                 first assignment to `j`\n   |                 help:\
    \ consider making this binding mutable: `mut j`\n...\n19 |                 j +=\
    \ 1;\n   |                 ^^^^^^ cannot assign twice to immutable variable\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut curr = l;\n    for _ in 0..l.len() {\n        curr = curr + 1;\n\
    \    }\n    curr\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `{integer}` to `Vec<isize>`\n --> /tmp/tmpxophh5ud.rs:9:21\n\
    \  |\n9 |         curr = curr + 1;\n  |                ---- ^ - {integer}\n  |\
    \                |\n  |                Vec<isize>\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut iter = l.iter().enumerate();\n\
    \    let mut cnt = 0;\n    for (n, v) in iter {\n        result.push(v + cnt);\n\
    \        cnt += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 3]`,\n right: `[4, 3, 2]`', /tmp/tmpgwhpy8re.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut counter = 0;\n    for n in l.iter() {\n        *n += counter;\n \
    \       counter += 1;\n    }\n    l\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0594]: cannot assign to `*n`, which is behind a `&` reference\n\
    \ --> /tmp/tmpkn787r4u.rs:9:9\n  |\n8 |     for n in l.iter() {\n  |         \
    \     -------- this iterator yields `&` references\n9 |         *n += counter;\n\
    \  |         ^^^^^^^^^^^^^ `n` is a `&` reference, so the data it refers to cannot\
    \ be written\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0594`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut i = l.iter().cloned().peekable();\n    loop {\n        let next =\
    \ (i.next() + 1).ok_or(format!(\"Cannot increment list: {}\", l))?;\n        match\
    \ i.peek() {\n            Some(0) => return l.clone(),\n            _ => l.push(next),\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `{integer}` to `Option<isize>`\n --> /tmp/tmpdrx8kfhj.rs:9:30\n\
    \  |\n9 |         let next = (i.next() + 1).ok_or(format!(\"Cannot increment list:\
    \ {}\", l))?;\n  |                     -------- ^ - {integer}\n  |           \
    \          |\n  |                     Option<isize>\n\nerror[E0277]: `Vec<isize>`\
    \ doesn't implement `std::fmt::Display`\n --> /tmp/tmpdrx8kfhj.rs:9:78\n  |\n\
    9 |         let next = (i.next() + 1).ok_or(format!(\"Cannot increment list: {}\"\
    , l))?;\n  |                                                                 \
    \             ^ `Vec<isize>` cannot be formatted with the default formatter\n\
    \  |\n  = help: the trait `std::fmt::Display` is not implemented for `Vec<isize>`\n\
    \  = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print)\
    \ instead\n  = note: this error originates in the macro `$crate::__export::format_args`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]:\
    \ the `?` operator can only be used in a function that returns `Result` or `Option`\
    \ (or another type that implements `FromResidual`)\n  --> /tmp/tmpdrx8kfhj.rs:9:81\n\
    \   |\n6  | / fn incr_list(l: Vec<isize>) -> Vec<isize> {\n7  | |     let mut\
    \ i = l.iter().cloned().peekable();\n8  | |     loop {\n9  | |         let next\
    \ = (i.next() + 1).ok_or(format!(\"Cannot increment list: {}\", l))?;\n   | |\
    \                                                                            \
    \     ^ cannot use the `?` operator in a function that returns `Vec<isize>`\n\
    ...  |\n14 | |     }\n15 | | }\n   | |_- this function should return `Result`\
    \ or `Option` to accept `?`\n   |\n   = help: the trait `FromResidual<_>` is not\
    \ implemented for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = l;\n    for i in l {\n        result = i + 1;\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzvb0_kn4.rs:9:18\n  |\n7 |\
    \     let mut result = l;\n  |                      - expected due to this value\n\
    8 |     for i in l {\n9 |         result = i + 1;\n  |                  ^^^^^\
    \ expected struct `Vec`, found `isize`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \               found type `isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = vec![];\n    let mut c = vec![0; l.len()];\n    for i in\
    \ l {\n        result[result.len()] += *i;\n        *i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpyk7faibb.rs:10:33\n\
    \   |\n10 |         result[result.len()] += *i;\n   |                        \
    \         ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpyk7faibb.rs:11:9\n\
    \   |\n11 |         *i += 1;\n   |         ^^\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().zip(l.iter().cloned()).fold(0, |x, _| {\n        x + 1;\n\
    \        x\n    })\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphrot2w7o.rs:7:51\n  |\n7 |\
    \     l.iter().cloned().zip(l.iter().cloned()).fold(0, |x, _| {\n  |         \
    \                                          ^ expected struct `Vec`, found integer\n\
    \  |\n  = note: expected struct `Vec<isize>`\n               found type `{integer}`\n\
    \nerror[E0369]: cannot add `{integer}` to `Vec<isize>`\n --> /tmp/tmphrot2w7o.rs:8:11\n\
    \  |\n8 |         x + 1;\n  |         - ^ - {integer}\n  |         |\n  |    \
    \     Vec<isize>\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0369.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.into_iter().rev().enumerate().map(|(idx, item)| item + 1).collect()\n}\n\
    \nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4]`,\n right: `[4, 3, 2]`', /tmp/tmp7h9w48d5.rs:13:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut it = l.iter();\n    let mut res = Vec::new();\n    let mut i = 1;\n\
    \    for (ele) in it {\n        res.push(*ele);\n        if *ele != *ele {\n \
    \           res.push_back(*ele + i);\n        }\n        *ele += i;\n        i\
    \ += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around pattern\n  --> /tmp/tmp3zco5okq.rs:10:9\n\
    \   |\n10 |     for (ele) in it {\n   |         ^   ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n10 -     for (ele) in it\
    \ {\n10 +     for ele in it {\n   | \n\nerror[E0599]: no method named `push_back`\
    \ found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp3zco5okq.rs:13:17\n\
    \   |\n13 |             res.push_back(*ele + i);\n   |                 ^^^^^^^^^\
    \ method not found in `Vec<isize>`\n\nerror: aborting due to previous error; 1\
    \ warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    if l.len() == 0 {\n        return l;\n    }\n    let mut res = l.clone();\n\
    \    res.into_iter().for_each(|x| x += 1).collect::<Vec<_>>();\n    res\n}\n\n\
    fn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n  --> /tmp/tmpglg7eww1.rs:11:42\n\
    \   |\n11 |     res.into_iter().for_each(|x| x += 1).collect::<Vec<_>>();\n  \
    \ |                                          ^^^^^^^ `()` is not an iterator\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `():\
    \ Iterator`\n           which is required by `&mut (): Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    if l.len() == 0 {\n        return l;\n    }\n\n    let mut out = l;\n   \
    \ let mut i = 0;\n    for el in out {\n        out[i] = el + 1;\n        i +=\
    \ 1;\n    }\n\n    out\n}\n\nfn main() {\n    let candidate = incr_list;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `out`\n   --> /tmp/tmp9owki3p_.rs:14:9\n\
    \    |\n11  |     let mut out = l;\n    |         ------- move occurs because\
    \ `out` has type `Vec<isize>`, which does not implement the `Copy` trait\n12 \
    \ |     let mut i = 0;\n13  |     for el in out {\n    |               --- `out`\
    \ moved due to this implicit call to `.into_iter()`\n14  |         out[i] = el\
    \ + 1;\n    |         ^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `out`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n13  |     for el in &out {\n    |               +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v: Vec<isize> = vec![];\n    for (i, v) in l.iter().zip(v.iter_mut().map(|&x|\
    \ x+1)) {\n        *v = *v;\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy_nfd7cj.rs:8:50\n  |\n8 |\
    \     for (i, v) in l.iter().zip(v.iter_mut().map(|&x| x+1)) {\n  |          \
    \                                        ^--\n  |                            \
    \                      ||\n  |                                               \
    \   |expected due to this\n  |                                               \
    \   types differ in mutability\n  |                                          \
    \        help: did you mean `x`: `&&mut isize`\n  |\n  = note: expected mutable\
    \ reference `&mut isize`\n                     found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().enumerate().rev().map(|(i, e)| {\n        if i == 0 {\n\
    \            e\n        } else {\n            e+1\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 3]`,\n right: `[4, 3, 2]`', /tmp/tmp815dfldz.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ret = vec![];\n    let mut i = 0;\n    while i < l.len() {\n    \
    \    let cur = l[i];\n        i += 1;\n        ret += vec![cur as usize, 1];\n\
    \    }\n    ret\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<_>`\n  --> /tmp/tmplol1bj7v.rs:12:9\n   |\n12 |         ret += vec![cur\
    \ as usize, 1];\n   |         ---^^^^^^^^^^^^^^^^^^^^^^^^^\n   |         |\n \
    \  |         cannot use `+=` on type `Vec<_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    for i in l.iter_mut() {\n        *i +=\
    \ 1;\n        result.push(*i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmphgyacm06.rs:8:14\n  |\n6 | fn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    7 |     let mut result = Vec::new();\n8 |     for i in l.iter_mut() {\n  |   \
    \           ^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().map(|&x| x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmmj6v3y2.rs:7:28\n  |\n7 |\
    \     l.iter().cloned().map(|&x| x + 1).collect()\n  |                       \
    \     ^--\n  |                            ||\n  |                            |expected\
    \ due to this\n  |                            expected `isize`, found reference\n\
    \  |                            help: did you mean `x`: `&isize`\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().enumerate().map(|(i, v)| v + 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut i = 0;\n    let mut list = Vec::new();\n    for element in l {\n\
    \        *list = element + 1;\n        i += 1;\n        list.push(element);\n\
    \    }\n    list\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiyo0n7_g.rs:10:17\n   |\n\
    10 |         *list = element + 1;\n   |         -----   ^^^^^^^^^^^ expected slice,\
    \ found `isize`\n   |         |\n   |         expected due to the type of this\
    \ binding\n   |\n   = note: expected slice `[_]`\n               found type `isize`\n\
    \nerror[E0277]: the size for values of type `[_]` cannot be known at compilation\
    \ time\n  --> /tmp/tmpiyo0n7_g.rs:10:9\n   |\n10 |         *list = element + 1;\n\
    \   |         ^^^^^ doesn't have a size known at compile-time\n   |\n   = help:\
    \ the trait `Sized` is not implemented for `[_]`\n   = note: the left-hand-side\
    \ of an assignment must have a statically known size\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().zip(0..).map(|(v, _)| v + 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = Vec::new();\n    l.iter().cloned().for_each(|x| res.push(x+1));\n\
    \    return res;\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut i = 0;\n    l.iter().cloned().map(|x| { i += x; x }).collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[4, 3, 2]`', /tmp/tmp9y51uj3j.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().enumerate().map(|(_, v)| v + 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().enumerate().map(|(i, e)| i + 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `usize`\n    --> /tmp/tmpefyyqz_v.rs:7:55\n     |\n7 \
    \   |     l.iter().cloned().enumerate().map(|(i, e)| i + 1).collect()\n     |\
    \                                                       ^^^^^^^ value of type\
    \ `Vec<isize>` cannot be built from `std::iter::Iterator<Item=usize>`\n     |\n\
    \     = help: the trait `FromIterator<usize>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut n = 0;\n    let mut s = l;\n    while s.len() > 0 {\n        n +=\
    \ 1;\n        s.sort();\n        s = s.to_owned();\n    }\n    s.insert(0, n);\n\
    \    s\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpdoc4m0lz.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().chain(l.iter().cloned().skip(1).cloned()).cloned()\n}\n\
    \nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n    --> /tmp/tmpkwjpvpxr.rs:7:55\n     |\n7    |  \
    \   l.iter().cloned().chain(l.iter().cloned().skip(1).cloned()).cloned()\n   \
    \  |                                                       ^^^^^^ expected reference,\
    \ found `isize`\n     |\n     = note: expected reference `&&_`\n             \
    \   found reference `&isize`\n     = note: required because of the requirements\
    \ on the impl of `Iterator` for `Cloned<std::slice::Iter<'_, isize>>`\nnote: required\
    \ by a bound in `cloned`\n\nerror[E0271]: type mismatch resolving `<std::slice::Iter<'_,\
    \ isize> as Iterator>::Item == &&isize`\n   --> /tmp/tmpkwjpvpxr.rs:7:29\n   \
    \ |\n7   |     l.iter().cloned().chain(l.iter().cloned().skip(1).cloned()).cloned()\n\
    \    |                       ----- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&isize`, found `isize`\n    |                       |\n    |              \
    \         required by a bound introduced by this call\n    |\n    = note: expected\
    \ reference `&&isize`\n               found reference `&isize`\n    = note: required\
    \ because of the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n    = note: 1 redundant requirement hidden\n    = note: required because\
    \ of the requirements on the impl of `Iterator` for `Cloned<Skip<Cloned<std::slice::Iter<'_,\
    \ isize>>>>`\nnote: required by a bound in `std::iter::Iterator::chain`\n\nerror[E0599]:\
    \ the method `cloned` exists for struct `std::iter::Chain<Cloned<std::slice::Iter<'_,\
    \ isize>>, Cloned<Skip<Cloned<std::slice::Iter<'_, isize>>>>>`, but its trait\
    \ bounds were not satisfied\n  --> /tmp/tmpkwjpvpxr.rs:7:65\n   |\n7  |      \
    \ l.iter().cloned().chain(l.iter().cloned().skip(1).cloned()).cloned()\n   | \
    \                                                                  ^^^^^^ method\
    \ cannot be called on `std::iter::Chain<Cloned<std::slice::Iter<'_, isize>>, Cloned<Skip<Cloned<std::slice::Iter<'_,\
    \ isize>>>>>` due to unsatisfied trait bounds\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n        "
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut acc = l[0];\n    for v in l {\n        acc += v;\n    }\n    vec![acc]\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpaygzk6r8.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().map(|x| *x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp13u6pz1k.rs:7:31\n\
    \  |\n7 |     l.iter().cloned().map(|x| *x + 1).collect()\n  |               \
    \                ^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.rev().into_iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp91e25hal.rs:7:7\n\
    \    |\n7   |       l.rev().into_iter().map(|x| x + 1).collect()\n    |      \
    \   ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `Vec<isize>: Iterator`\n           \
    \ which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n\
    \            which is required by `&mut [isize]: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    (1..l.len()).map(|i| l[i] + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2]`,\n right: `[4, 3, 2]`', /tmp/tmp6u_fxifm.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = Vec::new();\n    let mut cur = 0;\n    l.iter().for_each(|e|\
    \ {\n        res.push(e + cur);\n        cur += 1;\n    });\n    res\n}\n\nfn\
    \ main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 3]`,\n right: `[4, 3, 2]`', /tmp/tmpqtt9ok4s.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().zip(l.iter().cloned().skip(1)).map(|(a, b)| a + b).collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3]`,\n right: `[4, 3, 2]`', /tmp/tmpen_qvei1.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut l = l.iter().cloned().collect::<Vec<_>>();\n    l.push(*l.len() +\
    \ 1);\n    l\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `usize` cannot be dereferenced\n --> /tmp/tmp_4xleqdd.rs:8:12\n\
    \  |\n8 |     l.push(*l.len() + 1);\n  |            ^^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ret = l;\n    ret.into_iter().for_each(|&x| {\n        (*x) as *const\
    \ isize += 1;\n    });\n    ret\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbqgwxlr8.rs:8:31\n  |\n8 |\
    \     ret.into_iter().for_each(|&x| {\n  |                               ^--\n\
    \  |                               ||\n  |                               |expected\
    \ due to this\n  |                               expected `isize`, found reference\n\
    \  |                               help: did you mean `x`: `&isize`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0067]:\
    \ invalid left-hand side of assignment\n --> /tmp/tmpbqgwxlr8.rs:9:30\n  |\n9\
    \ |         (*x) as *const isize += 1;\n  |         -------------------- ^^\n\
    \  |         |\n  |         cannot assign to this expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0067, E0308.\n\
    For more information about an error, try `rustc --explain E0067`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = vec![];\n    l.iter().for_each(|&n| result.push(n + 1));\n\
    \    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = vec![];\n    let mut cur = -1;\n    for elt in l {\n      \
    \  cur += 1;\n        res.push(cur);\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 2]`,\n right: `[4, 3, 2]`', /tmp/tmpco32gs0i.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut cur = 0;\n    let mut i = 0;\n    for elt in l {\n        i += 1;\n\
    \        cur += elt;\n        l.push(cur);\n    }\n    l\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "warning: variable `i` is assigned to, but never used\n --> /tmp/tmpllzoov_7.rs:8:13\n\
    \  |\n8 |     let mut i = 0;\n  |             ^\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n  = note: consider using `_i` instead\n\nerror[E0596]: cannot\
    \ borrow `l` as mutable, as it is not declared as mutable\n  --> /tmp/tmpllzoov_7.rs:12:9\n\
    \   |\n6  | fn incr_list(l: Vec<isize>) -> Vec<isize> {\n   |              - help:\
    \ consider changing this to be mutable: `mut l`\n...\n12 |         l.push(cur);\n\
    \   |         ^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0382]: borrow of\
    \ moved value: `l`\n   --> /tmp/tmpllzoov_7.rs:12:9\n    |\n6   | fn incr_list(l:\
    \ Vec<isize>) -> Vec<isize> {\n    |              - move occurs because `l` has\
    \ type `Vec<isize>`, which does not implement the `Copy` trait\n...\n9   |   \
    \  for elt in l {\n    |                - `l` moved due to this implicit call\
    \ to `.into_iter()`\n...\n12  |         l.push(cur);\n    |         ^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `l`\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n9\
    \   |     for elt in &l {\n    |                +\n\nerror: aborting due to 2\
    \ previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0382, E0596.\nFor more information about an error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().zip(&mut vec![]).fold(0, |mut a, &b| {\n        a.push(*b\
    \ + 1);\n        a\n    })\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp46zg_b2n.rs:7:45\n  |\n7 |\
    \     l.iter().cloned().zip(&mut vec![]).fold(0, |mut a, &b| {\n  |          \
    \                                   ^ expected struct `Vec`, found integer\n \
    \ |\n  = note: expected struct `Vec<isize>`\n               found type `{integer}`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp46zg_b2n.rs:7:56\n  |\n7 |    \
    \ l.iter().cloned().zip(&mut vec![]).fold(0, |mut a, &b| {\n  |              \
    \                                          ^--\n  |                          \
    \                              ||\n  |                                       \
    \                 |expected due to this\n  |                                 \
    \                       expected tuple, found reference\n  |                 \
    \                                       help: did you mean `b`: `&(isize, &mut\
    \ _)`\n  |\n  = note:  expected tuple `(isize, &mut _)`\n          found reference\
    \ `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = l;\n    for i in 0..l.len() {\n        let el = &res[i];\n\
    \        res[i] = el + 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n --> /tmp/tmp3b7sfyq9.rs:8:17\n\
    \  |\n6 | fn incr_list(l: Vec<isize>) -> Vec<isize> {\n  |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n7 |     let mut res = l;\n  |                   - value moved here\n\
    8 |     for i in 0..l.len() {\n  |                 ^^^^^^^ value borrowed here\
    \ after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ret = l;\n    ret.push(0);\n    while ret.len() > 2 {\n        ret[ret.len()\
    \ - 2] = ret[ret.len() - 2] + 1;\n        ret.pop();\n    }\n    ret\n}\n\nfn\
    \ main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `ret` as immutable because it is also borrowed\
    \ as mutable\n  --> /tmp/tmp2jqaaxom.rs:10:13\n   |\n10 |         ret[ret.len()\
    \ - 2] = ret[ret.len() - 2] + 1;\n   |         ----^^^^^^^^^-----\n   |      \
    \   |   |\n   |         |   immutable borrow occurs here\n   |         mutable\
    \ borrow occurs here\n   |         mutable borrow later used here\n   |\nhelp:\
    \ try adding a local storing this...\n  --> /tmp/tmp2jqaaxom.rs:10:13\n   |\n\
    10 |         ret[ret.len() - 2] = ret[ret.len() - 2] + 1;\n   |             ^^^^^^^^^\n\
    help: ...and then using that local here\n  --> /tmp/tmp2jqaaxom.rs:10:9\n   |\n\
    10 |         ret[ret.len() - 2] = ret[ret.len() - 2] + 1;\n   |         ^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    if l.len() <= 1 {\n        l\n    } else {\n        let mut it = l.iter().cloned();\n\
    \        let mut last = it.next();\n        let mut i = 0;\n        loop {\n \
    \           if i == 0 {\n                it.next();\n                last = it.next();\n\
    \            }\n            if last == Some(i) {\n                i += 1;\n  \
    \          } else {\n                l.push(last.clone() + 1);\n             \
    \   break;\n            }\n        }\n        l\n    }\n}\n\nfn main() {\n   \
    \ let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `{integer}` to `Option<isize>`\n  --> /tmp/tmp5501qha6.rs:21:37\n\
    \   |\n21 |                 l.push(last.clone() + 1);\n   |                  \
    \      ------------ ^ - {integer}\n   |                        |\n   |       \
    \                 Option<isize>\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().zip(l + 1).flat_map(|(a, b)| {\n        b.iter().cloned().zip(b\
    \ + 1).map(|(c, n)| c + n).collect()\n    })\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `{integer}` to `Vec<isize>`\n --> /tmp/tmphf8tuz9x.rs:7:29\n\
    \  |\n7 |     l.iter().cloned().zip(l + 1).flat_map(|(a, b)| {\n  |          \
    \                 - ^ - {integer}\n  |                           |\n  |      \
    \                     Vec<isize>\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = l.clone();\n    for (i, val) in res.iter_mut().enumerate()\
    \ {\n        *val += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate =\
    \ incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut rv = l.clone();\n    rv.reserve(rv.len() + 1);\n    rv.iter().enumerate().for_each(|(i,\
    \ el)| {\n        let j = i + 1;\n        rv[i] = el + 1;\n        if j != rv.len()\
    \ {\n            rv[j] = el;\n        }\n    });\n    rv\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjckrbw20.rs:13:21\n   |\n\
    13 |             rv[j] = el;\n   |             -----   ^^ expected `isize`, found\
    \ `&isize`\n   |             |\n   |             expected due to the type of this\
    \ binding\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |         \
    \    rv[j] = *el;\n   |                     +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = l.to_vec();\n    res.iter().enumerate().for_each(|(i, x)| {\n\
    \        res.insert(i + 1, x + 1);\n    });\n    res.to_owned()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `res` as mutable because it is also borrowed\
    \ as immutable\n --> /tmp/tmp3dom08za.rs:8:37\n  |\n8 |     res.iter().enumerate().for_each(|(i,\
    \ x)| {\n  |     ----------             -------- ^^^^^^^^ mutable borrow occurs\
    \ here\n  |     |                      |\n  |     |                      immutable\
    \ borrow later used by call\n  |     immutable borrow occurs here\n9 |       \
    \  res.insert(i + 1, x + 1);\n  |         --- second borrow occurs due to use\
    \ of `res` in closure\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().zip(usize::one()).map(|(_, x)| x + 1).collect()\n}\n\n\
    fn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `one` found for type\
    \ `usize` in the current scope\n --> /tmp/tmpfiqetb1v.rs:7:34\n  |\n7 |     l.iter().cloned().zip(usize::one()).map(|(_,\
    \ x)| x + 1).collect()\n  |                                  ^^^ function or associated\
    \ item not found in `usize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    for i in l.iter() {\n        result .=\
    \ i + 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error: unexpected token: `=`\n --> /tmp/tmpx_lyso87.rs:9:17\n  |\n9 | \
    \        result .= i + 1;\n  |                 ^\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpx_lyso87.rs:9:19\n  |\n7 |     let mut result = Vec::new();\n  |\
    \                      ---------- expected due to this value\n8 |     for i in\
    \ l.iter() {\n9 |         result .= i + 1;\n  |                   ^^^^^ expected\
    \ struct `Vec`, found `isize`\n  |\n  = note: expected struct `Vec<_>`\n     \
    \          found type `isize`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    for e in l {\n        result.push(*e +\
    \ 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpbe9w959_.rs:9:21\n\
    \  |\n9 |         result.push(*e + 1);\n  |                     ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ret = l.to_vec();\n    let mut curr = ret.last().unwrap() + 1;\n\
    \    ret.extend(1..);\n    ret\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp1u22248d.rs:8:31\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.into_iter().fold(vec![], |mut acc, x| {\n        let new = acc.last().unwrap_or(0)\
    \ + x;\n        acc.push(new);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplxm8s0ix.rs:8:40\n  |\n8 |\
    \         let new = acc.last().unwrap_or(0) + x;\n  |                        \
    \                ^\n  |                                        |\n  |        \
    \                                expected `&isize`, found integer\n  |       \
    \                                 help: consider borrowing here: `&0`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.into_iter().map(|e| e + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut i = l.len();\n    while i > 0 {\n        i -= 1;\n        l[i] +=\
    \ 1\n    }\n    l\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpvd20_1eo.rs:10:9\n   |\n6  | fn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |              - help: consider changing this to be mutable: `mut l`\n\
    ...\n10 |         l[i] += 1\n   |         ^ cannot borrow as mutable\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut i = l.len();\n    loop {\n        if i >= l.len() {\n           \
    \ break;\n        }\n        l[i] = l[i] + 1;\n        i += 1;\n    }\n    l\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpavl2augy.rs:12:9\n   |\n6  | fn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |              - help: consider changing this to be mutable: `mut l`\n\
    ...\n12 |         l[i] = l[i] + 1;\n   |         ^ cannot borrow as mutable\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v = l.to_owned();\n    for i in v.iter_mut().rev() {\n        *i\
    \ += 1;\n    }\n    v\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut r: Vec<isize> = l;\n    for &x in r {\n        x += 1;\n    }\n \
    \   r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpswgr8yg_.rs:8:9\n  |\n8 |\
    \     for &x in r {\n  |         ^^    - this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut accum = vec![];\n    for i in l.iter() {\n        accum.append(i\
    \ + 1);\n    }\n    accum\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzhqs8ccp.rs:9:22\n  |\n9 |\
    \         accum.append(i + 1);\n  |                      ^^^^^ expected `&mut\
    \ Vec<_>`, found `isize`\n  |\n  = note: expected mutable reference `&mut Vec<_>`\n\
    \                          found type `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v = l;\n    v.iter().for_each(|&i| {\n        *i +=\n           \
    \ match *i {\n                0 => 1,\n                _ => 0,\n            };\n\
    \    });\n    v\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpe9qvwpj5.rs:9:9\n\
    \  |\n9 |         *i +=\n  |         ^^\n\nerror[E0614]: type `isize` cannot be\
    \ dereferenced\n  --> /tmp/tmpe9qvwpj5.rs:10:19\n   |\n10 |             match\
    \ *i {\n   |                   ^^\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut list = l;\n    for x in list.iter() {\n        *x += 1;\n    }\n\
    \    list\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpeu65dexf.rs:7:9\n\
    \  |\n7 |     let mut list = l;\n  |         ----^^^^\n  |         |\n  |    \
    \     help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0594]: cannot assign to `*x`, which is behind a `&` reference\n --> /tmp/tmpeu65dexf.rs:9:9\n\
    \  |\n8 |     for x in list.iter() {\n  |              ----------- this iterator\
    \ yields `&` references\n9 |         *x += 1;\n  |         ^^^^^^^ `x` is a `&`\
    \ reference, so the data it refers to cannot be written\n\nerror: aborting due\
    \ to previous error; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0594`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    incr_impl(l, |i| i + 1)\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `incr_impl` in this scope\n --> /tmp/tmpzamkioek.rs:7:5\n\
    \  |\n7 |     incr_impl(l, |i| i + 1)\n  |     ^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().flat_map(|x| vec![x + 1, x + 1]).collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 3, 3, 2, 2]`,\n right: `[4, 3, 2]`', /tmp/tmpaqa5vnmq.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    if l.len() == 0 {\n        return l;\n    }\n    let mut ret = Vec::with_capacity(l.len()\
    \ * 2);\n    for i in l.iter().rev() {\n        ret.push(i + 1);\n    }\n    ret\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4]`,\n right: `[4, 3, 2]`', /tmp/tmptp2u4_04.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut inc = 1;\n    l.iter().cloned().collect::<Vec<_>>().sort_unstable().for_each(|x|\
    \ *x += inc);\n    l\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmpywtk5oo0.rs:8:59\n\
    \  |\n8 |     l.iter().cloned().collect::<Vec<_>>().sort_unstable().for_each(|x|\
    \ *x += inc);\n  |                                                           ^^^^^^^^\
    \ `()` is not an iterator\n  |\n  = note: the following trait bounds were not\
    \ satisfied:\n          `(): Iterator`\n          which is required by `&mut ():\
    \ Iterator`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut r = l;\n    for v in &mut r {\n        r += 1;\n    }\n    r\n}\n\
    \nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<isize>`\n --> /tmp/tmpkupqms5c.rs:9:9\n  |\n9 |         r += 1;\n  |  \
    \       -^^^^^\n  |         |\n  |         cannot use `+=` on type `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ret: Vec<isize> = Vec::new();\n    let mut iter = l.iter();\n   \
    \ while let Some(item) = iter.next() {\n        ret.push(item + 1);\n    }\n \
    \   ret\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    (l + 1).into_iter()\n}\n\nfn main() {\n    let candidate = incr_list;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `{integer}` to `Vec<isize>`\n --> /tmp/tmp79u99dpg.rs:7:8\n\
    \  |\n7 |     (l + 1).into_iter()\n  |      - ^ - {integer}\n  |      |\n  | \
    \     Vec<isize>\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.into_iter().enumerate().map(|(i, x)| i + x).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc_gy5z0m.rs:7:48\n  |\n7 |\
    \     l.into_iter().enumerate().map(|(i, x)| i + x).collect()\n  |           \
    \                                     ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add `isize` to `usize`\n --> /tmp/tmpc_gy5z0m.rs:7:46\n  |\n7 |     l.into_iter().enumerate().map(|(i,\
    \ x)| i + x).collect()\n  |                                              ^ no\
    \ implementation for `usize + isize`\n  |\n  = help: the trait `Add<isize>` is\
    \ not implemented for `usize`\n  = help: the following other types implement trait\
    \ `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n\
    \            <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n    \
    \        <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n          \
    \  <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48\
    \ others\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from an\
    \ iterator over elements of type `usize`\n    --> /tmp/tmpc_gy5z0m.rs:7:51\n \
    \    |\n7    |     l.into_iter().enumerate().map(|(i, x)| i + x).collect()\n \
    \    |                                                   ^^^^^^^ value of type\
    \ `Vec<isize>` cannot be built from `std::iter::Iterator<Item=usize>`\n     |\n\
    \     = help: the trait `FromIterator<usize>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    for el in l {\n        result.push(el +\
    \ 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v = l.clone();\n    v.sort_unstable_by(|a, b| b.cmp(a));\n    for\
    \ (i, &v) in v.into_iter().enumerate() {\n        v[i] = v[i] + 1;\n    }\n  \
    \  v\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9u1qch_4.rs:9:13\n  |\n9 |\
    \     for (i, &v) in v.into_iter().enumerate() {\n  |             ^^     -------------------------\
    \ this expression has type `Option<(usize, isize)>`\n  |             |\n  |  \
    \           expected `isize`, found reference\n  |             help: you can probably\
    \ remove the explicit borrow: `v`\n  |\n  = note:   expected type `isize`\n  \
    \        found reference `&_`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().zip(0..).map(|(v, i)| (v + i)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 3]`,\n right: `[4, 3, 2]`', /tmp/tmpteeb4vyi.rs:13:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut i = l.iter().cloned().skip(1).take(l.len() - 1);\n    i.next()\n\
    \        .unwrap()\n        .unwrap()\n        .reduce((*mut i).add, 1)\n    \
    \    .unwrap()\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found keyword `mut`\n  --> /tmp/tmpp0rvkypg.rs:11:19\n\
    \   |\n11 |         .reduce((*mut i).add, 1)\n   |                   ^^^ expected\
    \ expression\n\nerror[E0599]: no method named `unwrap` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpp0rvkypg.rs:10:10\n   |\n10 |         .unwrap()\n\
    \   |          ^^^^^^ method not found in `isize`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ret = l;\n    for i in ret.iter().rev() {\n        ret.insert(i,\
    \ i + 1);\n    }\n    ret\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5n0yuce2.rs:9:20\n  |\n9 |\
    \         ret.insert(i, i + 1);\n  |                    ^ expected `usize`, found\
    \ `&isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut m = l.len();\n    for i in l.iter().rev() {\n        m += i;\n  \
    \      m.checked_add(i);\n    }\n    let mut b = m.clone();\n    b.checked_add(1);\n\
    \    b.into()\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp82onsiua.rs:9:14\n  |\n9 |\
    \         m += i;\n  |              ^ expected `usize`, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp82onsiua.rs:10:23\n   |\n10 |         m.checked_add(i);\n\
    \   |                       ^ expected `usize`, found `&isize`\n\nerror[E0277]:\
    \ cannot add-assign `&isize` to `usize`\n --> /tmp/tmp82onsiua.rs:9:11\n  |\n\
    9 |         m += i;\n  |           ^^ no implementation for `usize += &isize`\n\
    \  |\n  = help: the trait `AddAssign<&isize>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \       <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n           \
    \ <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: the\
    \ trait bound `Vec<isize>: From<usize>` is not satisfied\n  --> /tmp/tmp82onsiua.rs:14:7\n\
    \   |\n14 |     b.into()\n   |       ^^^^ the trait `From<usize>` is not implemented\
    \ for `Vec<isize>`\n   |\n   = help: the following other types implement trait\
    \ `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T,\
    \ A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n         \
    \    <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n\
    \             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T;\
    \ N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n   = note:\
    \ required because of the requirements on the impl of `Into<Vec<isize>>` for `usize`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().map(|n| n + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().zip(incr_values(l)).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `incr_values` in this scope\n --> /tmp/tmp4z7gvmip.rs:7:27\n\
    \  |\n7 |     l.iter().cloned().zip(incr_values(l)).collect()\n  |           \
    \                ^^^^^^^^^^^ not found in this scope\n\nerror[E0277]: a value\
    \ of type `Vec<isize>` cannot be built from an iterator over elements of type\
    \ `(isize, _)`\n    --> /tmp/tmp4z7gvmip.rs:7:43\n     |\n7    |     l.iter().cloned().zip(incr_values(l)).collect()\n\
    \     |                                           ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=(isize, _)>`\n     |\n     =\
    \ help: the trait `FromIterator<(isize, _)>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().enumerate().map(|(i, j)| (*j + 1)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpzs6s1k8t.rs:7:49\n\
    \  |\n7 |     l.iter().cloned().enumerate().map(|(i, j)| (*j + 1)).collect()\n\
    \  |                                                 ^^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().enumerate().map(|(idx, e)| {\n        idx += 1;\n        e\n   \
    \ }).collect()\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmp95pqq7ha.rs:10:8\n     |\n10\
    \   |     }).collect()\n     |        ^^^^^^^ value of type `Vec<isize>` cannot\
    \ be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait\
    \ `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().zip(l.iter().cloned().skip(1)).map(|(a, b)| a + b).collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3]`,\n right: `[4, 3, 2]`', /tmp/tmp4zh8vpt1.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = l;\n    result.into_iter().map(|x| x + 1).collect()\n}\n\
    \nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut l = l;\n    l.sort_unstable();\n    l.into_iter().rev().fold(vec![0],\
    \ |mut v, e| {\n        v.push(*e + 1);\n        v\n    })\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpifhschw0.rs:10:16\n\
    \   |\n10 |         v.push(*e + 1);\n   |                ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut iter = l.iter().cloned().chain(l.iter().cloned());\n    let mut sum\
    \ = 0;\n    loop {\n        let next = iter.next().unwrap();\n        sum += next;\n\
    \        if !iter.next().is_some() {\n            break;\n        }\n    }\n \
    \   Vec::from(l.iter().cloned().map(|next| (sum + next).clone()).collect())\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0283]: type annotations needed\n  --> /tmp/tmpjno6zvzn.rs:16:5\n\
    \   |\n16 |     Vec::from(l.iter().cloned().map(|next| (sum + next).clone()).collect())\n\
    \   |     ^^^^^^^^^ cannot infer type for type parameter `T` declared on the trait\
    \ `From`\n   |\n   = note: multiple `impl`s satisfying `Vec<isize>: From<_>` found\
    \ in the following crates: `alloc`, `core`:\n           - impl<'a, T> From<Cow<'a,\
    \ [T]>> for Vec<T>\n             where <[T] as ToOwned>::Owned == Vec<T>, [T]:\
    \ ToOwned;\n           - impl<T, A> From<Box<[T], A>> for Vec<T, A>\n        \
    \     where A: Allocator;\n           - impl<T, A> From<VecDeque<T, A>> for Vec<T,\
    \ A>\n             where A: Allocator;\n           - impl<T, N> From<[T; N]> for\
    \ Vec<T>;\n           and 4 more\nhelp: consider specifying the type argument\
    \ in the method call\n   |\n16 |     Vec::from(l.iter().cloned().map(|next| (sum\
    \ + next).clone()).collect::<B>())\n   |                                     \
    \                                    +++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0283`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut m = l;\n    m.resize(l.len() + 1, 0);\n    m\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n --> /tmp/tmpgcu4snj9.rs:8:14\n\
    \  |\n6 | fn incr_list(l: Vec<isize>) -> Vec<isize> {\n  |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n7 |     let mut m = l;\n  |                 - value moved here\n8 | \
    \    m.resize(l.len() + 1, 0);\n  |              ^^^^^^^ value borrowed here after\
    \ move\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut ret: Vec<isize> = l.iter().cloned().collect();\n    ret.sort_unstable();\n\
    \    for &i in ret.iter_mut() {\n        *i += 1;\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl3f20lxu.rs:9:9\n  |\n9 |\
    \     for &i in ret.iter_mut() {\n  |         ^^    -------------- this expression\
    \ has type `Option<&mut isize>`\n  |         |\n  |         types differ in mutability\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note: expected mutable reference `&mut isize`\n                     found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let candidate =\
    \ incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = vec![l.len() - 1];\n    for i in l.iter().rev() {\n       \
    \ let mut i = i;\n        res.insert(0, i + 1);\n    }\n    res.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjtt9lqzg.rs:10:23\n   |\n\
    10 |         res.insert(0, i + 1);\n   |                       ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |         res.insert(0,\
    \ (i + 1).try_into().unwrap());\n   |                       +     +++++++++++++++++++++\n\
    \nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `usize`\n    --> /tmp/tmpjtt9lqzg.rs:12:21\n     |\n12\
    \   |     res.into_iter().collect()\n     |                     ^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=usize>`\n\
    \     |\n     = help: the trait `FromIterator<usize>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = l.clone();\n    for (i, v) in res.iter_mut().enumerate() {\n\
    \        *v += 1;\n        if *v == 0 {\n            res.remove(i);\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0499]: cannot borrow `res` as mutable more than once at a time\n\
    \  --> /tmp/tmpic5sdnfd.rs:11:13\n   |\n8  |     for (i, v) in res.iter_mut().enumerate()\
    \ {\n   |                   --------------------------\n   |                 \
    \  |\n   |                   first mutable borrow occurs here\n   |          \
    \         first borrow later used here\n...\n11 |             res.remove(i);\n\
    \   |             ^^^^^^^^^^^^^ second mutable borrow occurs here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0499`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut new_list = l.to_owned();\n    new_list.push(new_list.len());\n  \
    \  new_list\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzvc996sh.rs:8:19\n  |\n8 |\
    \     new_list.push(new_list.len());\n  |                   ^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     new_list.push(new_list.len().try_into().unwrap());\n\
    \  |                                 ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().enumerate().filter(|&(_, x)| x > 0).map(|(_, x)| x + 1).collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 3, 6, 3, 4, 4, 10, 124]`,\n right: `[6, 3, 6, 3, 4, 4, 10, 1, 124]`', /tmp/tmpyeyb15ve.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = vec![];\n    for i in l {\n        result += vec![i as isize\
    \ + 1];\n    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<_>`\n --> /tmp/tmpky9gl7ow.rs:9:9\n  |\n9 |         result += vec![i as\
    \ isize + 1];\n  |         ------^^^^^^^^^^^^^^^^^^^^^^^^\n  |         |\n  |\
    \         cannot use `+=` on type `Vec<_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = l.to_vec();\n    let len = res.len();\n    let mut i = 0;\n\
    \    while i < len {\n        if res[i] == i {\n            res[i] += 1;\n   \
    \         i += 1;\n        } else {\n            i += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6m5gv2eu.rs:11:22\n   |\n\
    11 |         if res[i] == i {\n   |                      ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n11 |         if res[i] == i.try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().zip((l.len() + 1).rev().cloned().rev()).map(|(x, y)| x\
    \ + y).collect()\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `usize` is not an iterator\n --> /tmp/tmpqgsbuyp5.rs:7:41\n\
    \  |\n7 |     l.iter().cloned().zip((l.len() + 1).rev().cloned().rev()).map(|(x,\
    \ y)| x + y).collect()\n  |                                         ^^^ `usize`\
    \ is not an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `usize: Iterator`\n          which is required by `&mut usize: Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut counter = 0;\n    for i in l {\n        counter += 1;\n        l.push(counter);\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `i`\n --> /tmp/tmpt6v_7bii.rs:8:9\n  |\n8 | \
    \    for i in l {\n  |         ^ help: if this is intentional, prefix it with\
    \ an underscore: `_i`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\
    \nerror[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpt6v_7bii.rs:10:9\n   |\n6  | fn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |              - help: consider changing this to be mutable: `mut l`\n\
    ...\n10 |         l.push(counter);\n   |         ^^^^^^^^^^^^^^^ cannot borrow\
    \ as mutable\n\nerror[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpt6v_7bii.rs:10:9\n\
    \    |\n6   | fn incr_list(l: Vec<isize>) -> Vec<isize> {\n    |             \
    \ - move occurs because `l` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n7   |     let mut counter = 0;\n8   |     for i in l {\n    |\
    \              - `l` moved due to this implicit call to `.into_iter()`\n9   |\
    \         counter += 1;\n10  |         l.push(counter);\n    |         ^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `l`\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n8\
    \   |     for i in &l {\n    |              +\n\nerror: aborting due to 2 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0596.\nFor more information about an error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut rv = l.clone();\n    rv.into_iter().map(|&i| i + 1).collect()\n}\n\
    \nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1dpgtcjx.rs:8:25\n  |\n8 |\
    \     rv.into_iter().map(|&i| i + 1).collect()\n  |                         ^--\n\
    \  |                         ||\n  |                         |expected due to\
    \ this\n  |                         expected `isize`, found reference\n  |   \
    \                      help: did you mean `i`: `&isize`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().into_iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut l = l;\n    l.iter().for_each(|&x| {\n        *x += 1;\n    });\n\
    \    l\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpg_xb5rjs.rs:9:9\n\
    \  |\n9 |         *x += 1;\n  |         ^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().zip((l + 1).cloned()).cloned().collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `{integer}` to `Vec<isize>`\n --> /tmp/tmpt3_7u3rp.rs:7:30\n\
    \  |\n7 |     l.iter().cloned().zip((l + 1).cloned()).cloned().collect()\n  |\
    \                            - ^ - {integer}\n  |                            |\n\
    \  |                            Vec<isize>\n\nerror[E0271]: type mismatch resolving\
    \ `<Zip<Cloned<std::slice::Iter<'_, isize>>, _> as Iterator>::Item == &_`\n  \
    \  --> /tmp/tmpt3_7u3rp.rs:7:45\n     |\n7    |     l.iter().cloned().zip((l +\
    \ 1).cloned()).cloned().collect()\n     |                                    \
    \         ^^^^^^ expected reference, found tuple\n     |\n     = note: expected\
    \ reference `&_`\n                    found tuple `(_, _)`\nnote: required by\
    \ a bound in `cloned`\n\nerror[E0599]: the method `collect` exists for struct\
    \ `Cloned<Zip<Cloned<std::slice::Iter<'_, isize>>, _>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmpt3_7u3rp.rs:7:54\n   |\n7  |        l.iter().cloned().zip((l\
    \ + 1).cloned()).cloned().collect()\n   |                                    \
    \                     ^^^^^^^ method cannot be called on `Cloned<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, _>>` due to unsatisfied trait bounds\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, _> as Iterator>::Item = &_`\n           which is required by `Cloned<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, _>>: Iterator`\n           `Cloned<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, _>>: Iterator`\n           which is required by `&mut Cloned<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, _>>: Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0271, E0369, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut r: Vec<isize> = vec![];\n    for e in l.iter() {\n        *r = *r\
    \ + 1;\n        r.push(*r);\n    }\n    r\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `{integer}` to `[isize]`\n --> /tmp/tmp8y2bs8ia.rs:9:17\n\
    \  |\n9 |         *r = *r + 1;\n  |              -- ^ - {integer}\n  |       \
    \       |\n  |              [isize]\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8y2bs8ia.rs:10:16\n\
    \   |\n10 |         r.push(*r);\n   |                ^^ expected `isize`, found\
    \ slice `[isize]`\n\nerror[E0277]: the size for values of type `[isize]` cannot\
    \ be known at compilation time\n --> /tmp/tmp8y2bs8ia.rs:9:9\n  |\n9 |       \
    \  *r = *r + 1;\n  |         ^^ doesn't have a size known at compile-time\n  |\n\
    \  = help: the trait `Sized` is not implemented for `[isize]`\n  = note: the left-hand-side\
    \ of an assignment must have a statically known size\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut list = l;\n    for i in 0..list.len() {\n        list[i] += 1;\n\
    \    }\n    list\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = Vec::with_capacity(l.len());\n    for i in l {\n        res[i]\
    \ = i + 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[_]` cannot be indexed by `isize`\n --> /tmp/tmpbg8jj4iy.rs:9:9\n\
    \  |\n9 |         res[i] = i + 1;\n  |         ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[_]>` is\
    \ not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = vec![];\n    for i in l {\n        res.push(i + 1);\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().zip(0..).cloned().collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, RangeFrom<{integer}>> as Iterator>::Item == &_`\n    --> /tmp/tmp61mvlc0w.rs:7:32\n\
    \     |\n7    |     l.iter().cloned().zip(0..).cloned().collect()\n     |    \
    \                            ^^^^^^ expected reference, found tuple\n     |\n\
    \     = note: expected reference `&_`\n                    found tuple `(_, {integer})`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `collect` exists\
    \ for struct `Cloned<Zip<Cloned<std::slice::Iter<'_, isize>>, RangeFrom<{integer}>>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmp61mvlc0w.rs:7:41\n  \
    \ |\n7  |        l.iter().cloned().zip(0..).cloned().collect()\n   |         \
    \                                   ^^^^^^^ method cannot be called on `Cloned<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, RangeFrom<{integer}>>>` due to unsatisfied trait bounds\n   |\n   =\
    \ note: the following trait bounds were not satisfied:\n           `<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, RangeFrom<{integer}>> as Iterator>::Item = &_`\n           which is\
    \ required by `Cloned<Zip<Cloned<std::slice::Iter<'_, isize>>, RangeFrom<{integer}>>>:\
    \ Iterator`\n           `Cloned<Zip<Cloned<std::slice::Iter<'_, isize>>, RangeFrom<{integer}>>>:\
    \ Iterator`\n           which is required by `&mut Cloned<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, RangeFrom<{integer}>>>: Iterator`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0271, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut l = l;\n    let mut i = 0;\n    loop {\n        if i >= l.len() {\n\
    \            break;\n        }\n        i += 1;\n        l.push(i + 1);\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvzk2jn47.rs:14:16\n   |\n\
    14 |         l.push(i + 1);\n   |                ^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n14 |         l.push((i + 1).try_into().unwrap());\n\
    \   |                +     +++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = vec![];\n    for i in l {\n        i += 1;\n        res.push(i);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign twice to immutable variable `i`\n --> /tmp/tmpl9i8icli.rs:9:9\n\
    \  |\n8 |     for i in l {\n  |         -\n  |         |\n  |         first assignment\
    \ to `i`\n  |         help: consider making this binding mutable: `mut i`\n9 |\
    \         i += 1;\n  |         ^^^^^^ cannot assign twice to immutable variable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n    let candidate =\
    \ incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut acc = l.clone();\n    for element in acc {\n        *element += 1;\n\
    \    }\n    acc\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmptp780ldq.rs:9:9\n\
    \  |\n9 |         *element += 1;\n  |         ^^^^^^^^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut i = 0;\n    let mut result = Vec::new();\n    for e in l {\n    \
    \    result.push(i + 1);\n        i += e;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 6]`,\n right: `[4, 3, 2]`', /tmp/tmp81ax3pbu.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v = Vec::new();\n    v.extend_from_slice(l.iter().cloned());\n  \
    \  v.sort_unstable();\n    for (i, n) in v.into_iter().enumerate() {\n       \
    \ v[i + 1] += 1;\n    }\n    v\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp03pzy5g3.rs:8:25\n  |\n8 |\
    \     v.extend_from_slice(l.iter().cloned());\n  |                         ^^^^^^^^^^^^^^^^^\
    \ expected `&[_]`, found struct `Cloned`\n  |\n  = note: expected reference `&[_]`\n\
    \                found struct `Cloned<std::slice::Iter<'_, isize>>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut out = Vec::new();\n    out.extend(l);\n    out.iter().for_each(|&x|\
    \ { *x += 1; });\n    out\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp00e4bt87.rs:9:32\n\
    \  |\n9 |     out.iter().for_each(|&x| { *x += 1; });\n  |                   \
    \             ^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = l.to_vec();\n    res.iter_mut().for_each(|x| *x += 1).collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmpovijdyz1.rs:8:42\n\
    \  |\n8 |     res.iter_mut().for_each(|x| *x += 1).collect::<Vec<isize>>()\n \
    \ |                                          ^^^^^^^ `()` is not an iterator\n\
    \  |\n  = note: the following trait bounds were not satisfied:\n          `():\
    \ Iterator`\n          which is required by `&mut (): Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut i = l.len();\n    loop {\n        i -= 1;\n        if i >= 0 {\n\
    \            l[i] = l[i] + 1;\n        } else {\n            break;\n        }\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpnhk6hitd.rs:11:13\n   |\n6  | fn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |              - help: consider changing this to be mutable: `mut l`\n\
    ...\n11 |             l[i] = l[i] + 1;\n   |             ^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result: Vec<isize> = l;\n    result.push(0);\n    for &x in result\
    \ {\n        x += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp22jx7rrq.rs:9:9\n  |\n9 |\
    \     for &x in result {\n  |         ^^    ------ this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut curr = l.len();\n    let mut newlist = l;\n    for v in l.iter().rev()\
    \ {\n        curr = curr + 1;\n        newlist.set_len(curr);\n        newlist[curr\
    \ - 1] = v;\n    }\n    return newlist;\n}\n\nfn main() {\n    let candidate =\
    \ incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo7wg8nsu.rs:12:29\n   |\n\
    12 |         newlist[curr - 1] = v;\n   |         -----------------   ^ expected\
    \ `isize`, found `&isize`\n   |         |\n   |         expected due to the type\
    \ of this binding\n   |\nhelp: consider dereferencing the borrow\n   |\n12 | \
    \        newlist[curr - 1] = *v;\n   |                             +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut curr = l.len();\n    l.push(curr);\n    while curr != 1 {\n     \
    \   curr = curr * 2;\n        l.push(curr);\n    }\n    l\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5oiynbra.rs:8:12\n  |\n8 |\
    \     l.push(curr);\n  |            ^^^^ expected `isize`, found `usize`\n  |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n  |\n8 |     l.push(curr.try_into().unwrap());\n  |           \
    \     ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5oiynbra.rs:11:16\n\
    \   |\n11 |         l.push(curr);\n   |                ^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n11 |         l.push(curr.try_into().unwrap());\n\
    \   |                    ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut s = l.clone();\n    s.into_iter().for_each(|x| {\n        x += 1\n\
    \    });\n    s\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "warning: value assigned to `x` is never read\n --> /tmp/tmp26gpdukr.rs:9:9\n\
    \  |\n9 |         x += 1\n  |         ^\n  |\n  = note: `#[warn(unused_assignments)]`\
    \ on by default\n  = help: maybe it is overwritten before being read?\n\nwarning:\
    \ unused variable: `x`\n --> /tmp/tmp26gpdukr.rs:8:29\n  |\n8 |     s.into_iter().for_each(|x|\
    \ {\n  |                             ^ help: if this is intentional, prefix it\
    \ with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\
    \nerror[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmp26gpdukr.rs:9:9\n\
    \  |\n8 |     s.into_iter().for_each(|x| {\n  |                             -\
    \ help: consider making this binding mutable: `mut x`\n9 |         x += 1\n  |\
    \         ^^^^^^ cannot assign to immutable argument\n\nwarning: variable does\
    \ not need to be mutable\n --> /tmp/tmp26gpdukr.rs:7:9\n  |\n7 |     let mut s\
    \ = l.clone();\n  |         ----^\n  |         |\n  |         help: remove this\
    \ `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\nerror[E0382]: use\
    \ of moved value: `s`\n   --> /tmp/tmp26gpdukr.rs:11:5\n    |\n7   |     let mut\
    \ s = l.clone();\n    |         ----- move occurs because `s` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n8   |     s.into_iter().for_each(|x|\
    \ {\n    |       ----------- `s` moved due to this method call\n...\n11  |   \
    \  s\n    |     ^ value used here after move\n    |\nnote: this function takes\
    \ ownership of the receiver `self`, which moves `s`\n\nerror: aborting due to\
    \ 2 previous errors; 3 warnings emitted\n\nSome errors have detailed explanations:\
    \ E0382, E0384.\nFor more information about an error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    incr_by(l, |x| *x + 1)\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `incr_by` in this scope\n --> /tmp/tmp1sy8za1r.rs:7:5\n\
    \  |\n7 |     incr_by(l, |x| *x + 1)\n  |     ^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut it = l.iter();\n    it.skip(1);\n    let mut i = 1;\n    it.skip_while(|&x|\
    \ {\n        *x += i;\n        i += 1;\n        x != *it\n    })\n    .collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `std::slice::Iter<'_, isize>` cannot be dereferenced\n\
    \  --> /tmp/tmpiy4vnamo.rs:13:14\n   |\n13 |         x != *it\n   |          \
    \    ^^^\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from an\
    \ iterator over elements of type `&isize`\n    --> /tmp/tmpiy4vnamo.rs:15:6\n\
    \     |\n15   |     .collect()\n     |      ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut list = l.to_vec();\n    for i in list.iter().rev() {\n        list[i]\
    \ = list[i] + 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmp34tonisq.rs:9:9\n\
    \  |\n9 |         list[i] = list[i] + 1;\n  |         ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n  = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n  = note: required because of the requirements on the impl of `Index<&isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n\
    \ --> /tmp/tmp34tonisq.rs:9:19\n  |\n9 |         list[i] = list[i] + 1;\n  | \
    \                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut new_list = l;\n    let mut i = 0;\n\n    while i < new_list.len()\
    \ {\n        new_list[i] += 1;\n        i += 1;\n    }\n\n    new_list\n}\n\n\
    fn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut iter = l.iter();\n    let mut result = Vec::new();\n\n    for x in\
    \ iter {\n        match result.len() {\n            0 => {\n                result.push(x);\n\
    \            },\n            _ => result.append(x + 1),\n        }\n    }\n\n\
    \    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdnzatut5.rs:15:32\n   |\n\
    15 |             _ => result.append(x + 1),\n   |                            \
    \    ^^^^^ expected `&mut Vec<&isize>`, found `isize`\n   |\n   = note: expected\
    \ mutable reference `&mut Vec<&isize>`\n                           found type\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdnzatut5.rs:19:5\n\
    \   |\n6  | fn incr_list(l: Vec<isize>) -> Vec<isize> {\n   |                \
    \                ---------- expected `Vec<isize>` because of return type\n...\n\
    19 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.into_iter().fold(Vec::new(), |mut v, &x| {\n        v.push(*v + x);\n \
    \       v\n    })\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfh9sn9cv.rs:7:44\n  |\n7 |\
    \     l.into_iter().fold(Vec::new(), |mut v, &x| {\n  |                      \
    \                      ^--\n  |                                            ||\n\
    \  |                                            |expected due to this\n  |   \
    \                                         expected `isize`, found reference\n\
    \  |                                            help: did you mean `x`: `&isize`\n\
    \  |\n  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0369]:\
    \ cannot add `_` to `[isize]`\n --> /tmp/tmpfh9sn9cv.rs:8:19\n  |\n8 |       \
    \  v.push(*v + x);\n  |                -- ^ - _\n  |                |\n  |   \
    \             [isize]\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().cloned().into_iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = vec![0; l.len()];\n    for (n, &i) in l.iter().enumerate()\
    \ {\n        let mut c = n + 1;\n        for &mut i in &mut res {\n          \
    \  i += 1;\n        }\n        *i = c;\n    }\n    res\n}\n\nfn main() {\n   \
    \ let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpvyocw1y2.rs:13:9\n\
    \   |\n13 |         *i = c;\n   |         ^^\n   |\nhelp: parentheses are required\
    \ to parse this as an expression\n   |\n10 ~         (for &mut i in &mut res {\n\
    11 |             i += 1;\n12 ~         })\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res: Vec<isize> = Vec::new();\n    res.extend(l);\n    for v in l.iter_mut()\
    \ {\n        *v += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmplwo73me4.rs:9:14\n  |\n6 | fn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    ...\n9 |     for v in l.iter_mut() {\n  |              ^^^^^^^^^^^^ cannot borrow\
    \ as mutable\n\nerror[E0382]: borrow of moved value: `l`\n --> /tmp/tmplwo73me4.rs:9:14\n\
    \  |\n6 | fn incr_list(l: Vec<isize>) -> Vec<isize> {\n  |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n7 |     let mut res: Vec<isize> = Vec::new();\n8 |     res.extend(l);\n\
    \  |                - value moved here\n9 |     for v in l.iter_mut() {\n  | \
    \             ^^^^^^^^^^^^ value borrowed here after move\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0382, E0596.\n\
    For more information about an error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut l = l.clone();\n    l.iter().cloned().for_each(|el| { l.push(el +\
    \ 1); });\n    l\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `l` as mutable because it is also borrowed\
    \ as immutable\n --> /tmp/tmpxqwu8fhb.rs:8:32\n  |\n8 |     l.iter().cloned().for_each(|el|\
    \ { l.push(el + 1); });\n  |     --------          -------- ^^^^   - second borrow\
    \ occurs due to use of `l` in closure\n  |     |                 |        |\n\
    \  |     |                 |        mutable borrow occurs here\n  |     |    \
    \             immutable borrow later used by call\n  |     immutable borrow occurs\
    \ here\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.resize(l.iter().map(|&i| i + 1).sum::<usize>());\n    l\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Sum<isize>` is not satisfied\n  \
    \  --> /tmp/tmpizi5k_yc.rs:7:39\n     |\n7    |     l.resize(l.iter().map(|&i|\
    \ i + 1).sum::<usize>());\n     |                                       ^^^ the\
    \ trait `Sum<isize>` is not implemented for `usize`\n     |\n     = help: the\
    \ following other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a\
    \ f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n \
    \              <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n        \
    \       <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16\
    \ as Sum>\n             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpizi5k_yc.rs:7:7\n     |\n7    |     l.resize(l.iter().map(|&i|\
    \ i + 1).sum::<usize>());\n     |       ^^^^^^ ---------------------------------------\
    \ supplied 1 argument\n     |       |\n     |       expected 2 arguments\n   \
    \  |\nnote: associated function defined here\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut r = l.clone();\n    r.iter().for_each(|x| *x += 1).collect();\n \
    \   r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmpx03qyqyr.rs:8:36\n\
    \  |\n8 |     r.iter().for_each(|x| *x += 1).collect();\n  |                 \
    \                   ^^^^^^^ `()` is not an iterator\n  |\n  = note: the following\
    \ trait bounds were not satisfied:\n          `(): Iterator`\n          which\
    \ is required by `&mut (): Iterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    (0..l.len()).map(|i| {\n        l.iter().take(i + 1).cloned().collect::<Vec<_>>()[i]\
    \ + 1\n    }).collect()\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut result = Vec::with_capacity(l.len() + 1);\n    for v in l {\n   \
    \     result.push(*v + 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpl1c_w6fn.rs:9:21\n\
    \  |\n9 |         result.push(*v + 1);\n  |                     ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    l.iter().enumerate().map(|(idx, _)| {\n        if idx == l.len() - 1 {\n\
    \            idx\n        } else {\n            idx + 1\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `usize`\n    --> /tmp/tmpn1ibicf9.rs:13:8\n     |\n13\
    \   |     }).collect()\n     |        ^^^^^^^ value of type `Vec<isize>` cannot\
    \ be built from `std::iter::Iterator<Item=usize>`\n     |\n     = help: the trait\
    \ `FromIterator<usize>` is not implemented for `Vec<isize>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n\
    \    let mut m = l.len();\n    for v in l.iter_mut() {\n        *v += 1;\n   \
    \     if *v == 0 {\n            *v = 1;\n            m -= 1;\n        }\n    }\n\
    \    l.resize_with(m, || 0);\n    l\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpurof52c8.rs:8:14\n  |\n6 | fn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    7 |     let mut m = l.len();\n8 |     for v in l.iter_mut() {\n  |           \
    \   ^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `l` as\
    \ mutable, as it is not declared as mutable\n  --> /tmp/tmpurof52c8.rs:15:5\n\
    \   |\n6  | fn incr_list(l: Vec<isize>) -> Vec<isize> {\n   |              - help:\
    \ consider changing this to be mutable: `mut l`\n...\n15 |     l.resize_with(m,\
    \ || 0);\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
