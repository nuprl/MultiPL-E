name: HumanEval_133_sum_squares
language: rust
results:
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sumsq = 0;\n    for n in lst.iter() {\n        let sq\
    \ = n.powf(2.0);\n        if sq > 0.0 {\n            sumsq += sq;\n        }\n\
    \    }\n    sumsq.round() as isize\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpvmg6bd7i.rs:15:19\n\
    \   |\n15 |             sumsq += sq;\n   |                   ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{integer}`\n  --> /tmp/tmpvmg6bd7i.rs:18:11\n   |\n18 |     sumsq.round() as\
    \ isize\n   |           ^^^^^\n   |\nhelp: you must specify a type for this binding,\
    \ like `i32`\n   |\n11 |     let mut sumsq: i32 = 0;\n   |         ~~~~~~~~~~~~~~\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0689.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x <= 0.0 {\n\
    \            sum += 0.0;\n        } else {\n            sum += x.trunc();\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `{float}` to `{integer}`\n  --> /tmp/tmp1p77c95i.rs:14:17\n\
    \   |\n14 |             sum += 0.0;\n   |                 ^^ no implementation\
    \ for `{integer} += {float}`\n   |\n   = help: the trait `AddAssign<{float}>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp1p77c95i.rs:16:17\n   |\n16 |             sum += x.trunc();\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.;\n    for i in lst {\n        sum += i.ceil();\n\
    \    }\n    for i in lst {\n        sum -= i.floor() * i.floor();\n    }\n   \
    \ return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8y30w8ul.rs:18:12\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n18 |     return sum;\n\
    \   |            ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut s = 0.;\n\n    for n in lst.iter() {\n        s += n.round();\n\
    \    }\n\n    s\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpybta9653.rs:17:5\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n17 |     s\n   |\
    \     ^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.sort_unstable();\n    for i in lst.iter().map(|x| x.ceil()\
    \ as f64).rev() {\n        *i as isize + i\n    }\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpj4drkhst.rs:11:9\n\
    \     |\n11   |     lst.sort_unstable();\n     |         ^^^^^^^^^^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n     |\n     = help: the following other\
    \ types implement trait `Ord`:\n               i128\n               i16\n    \
    \           i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror[E0614]: type\
    \ `f64` cannot be dereferenced\n  --> /tmp/tmpj4drkhst.rs:13:9\n   |\n13 |   \
    \      *i as isize + i\n   |         ^^\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpj4drkhst.rs:12:5\n   |\n10 |   fn sum_squares(lst: Vec<f64>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n11 |       lst.sort_unstable();\n12 | /     for i in lst.iter().map(|x|\
    \ x.ceil() as f64).rev() {\n13 | |         *i as isize + i\n14 | |     }\n   |\
    \ |_____^ expected `isize`, found `()`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil()).fold(0, |acc, x| acc + x * x)\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `f64` to `isize`\n  --> /tmp/tmpqe3nw6gz.rs:11:55\n\
    \   |\n11 |     lst.iter().map(|x| x.ceil()).fold(0, |acc, x| acc + x * x)\n \
    \  |                                                       ^ no implementation\
    \ for `isize + f64`\n   |\n   = help: the trait `Add<f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as f64 * x).sum::<f64>()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf1ezexx4.rs:11:5\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n11 |     lst.iter().map(|x|\
    \ x.ceil() as f64 * x).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut total = 0;\n    for i in lst {\n        total += i *\
    \ i;\n    }\n    return total.ceil();\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpkiwnoq6b.rs:13:15\n\
    \   |\n13 |         total += i * i;\n   |               ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0689]: can't call method `ceil` on ambiguous numeric type\
    \ `{integer}`\n  --> /tmp/tmpkiwnoq6b.rs:15:18\n   |\n15 |     return total.ceil();\n\
    \   |                  ^^^^\n   |\nhelp: you must specify a type for this binding,\
    \ like `i32`\n   |\n11 |     let mut total: i32 = 0;\n   |         ~~~~~~~~~~~~~~\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0689.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|&x| x.ceil() as f64).sum::<isize>()\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmp55e9tblv.rs:11:42\n     |\n11   |     lst.iter().map(|&x| x.ceil() as\
    \ f64).sum::<isize>()\n     |                                          ^^^ the\
    \ trait `Sum<f64>` is not implemented for `isize`\n     |\n     = help: the following\
    \ other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n\
    \               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n         \
    \      <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128\
    \ as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n\
    \             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ sum: f64 = lst.iter().map(|x| *x).sum();\n    for i in lst {\n        if i <\
    \ 0 {\n            sum += i * (i-1);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwsue1byg.rs:17:16\n   |\n\
    17 |         if i < 0 {\n   |                ^\n   |                |\n   |  \
    \              expected `f64`, found integer\n   |                help: use a\
    \ float literal: `0.0`\n\nerror[E0277]: cannot subtract `{integer}` from `f64`\n\
    \  --> /tmp/tmpwsue1byg.rs:18:26\n   |\n18 |             sum += i * (i-1);\n \
    \  |                          ^ no implementation for `f64 - {integer}`\n   |\n\
    \   = help: the trait `Sub<{integer}>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\nhelp: consider using\
    \ a floating-point literal by writing it with `.0`\n   |\n18 |             sum\
    \ += i * (i-1.0);\n   |                            ++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwsue1byg.rs:21:5\n   |\n10 | fn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n   |                                  ----- expected `isize` because\
    \ of return type\n...\n21 |     sum\n   |     ^^^ expected `isize`, found `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        sum += x.ceil()\
    \ as f64 * x.ceil() as f64;\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpeikfo12l.rs:13:13\n\
    \   |\n13 |         sum += x.ceil() as f64 * x.ceil() as f64;\n   |          \
    \   ^^ no implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    // Write your code here.\n    lst.iter().map(|x| x * x).sum().round()\
    \ as isize\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpdyt1sc9e.rs:12:31\n\
    \   |\n12 |     lst.iter().map(|x| x * x).sum().round() as isize\n   |       \
    \                        ^^^ cannot infer type for type parameter `S` declared\
    \ on the associated function `sum`\n   |\n   = note: type must be known at this\
    \ point\nhelp: consider specifying the type argument in the method call\n   |\n\
    12 |     lst.iter().map(|x| x * x).sum::<S>().round() as isize\n   |         \
    \                         +++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut i = 0;\n    while i < lst.len() {\n        let f = lst.len()\
    \ - i;\n        let t = lst.len() - i;\n        let mut res = 0;\n        for\
    \ i in 0..f {\n            res += lst[i];\n        }\n        for j in 0..t {\n\
    \            let x = res - lst[j];\n            res += x;\n        }\n       \
    \ i += f;\n    }\n    res as isize\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `res` in this scope\n  --> /tmp/tmpej2l_0nc.rs:25:5\n\
    \   |\n25 |     res as isize\n   |     ^^^ not found in this scope\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpej2l_0nc.rs:17:17\n  \
    \ |\n17 |             res += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot subtract `f64` from `{integer}`\n  --> /tmp/tmpej2l_0nc.rs:20:25\n\
    \   |\n20 |             let x = res - lst[j];\n   |                         ^\
    \ no implementation for `{integer} - f64`\n   |\n   = help: the trait `Sub<f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|&x| x.ceil() as isize).sum::<isize>()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmpjbhymxwo.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut res = 0.0;\n\n    for elt in lst.iter() {\n        if\
    \ elt > 0.0 {\n            let rounded_elt = elt.ceil() as f64;\n            res\
    \ += rounded_elt * rounded_elt;\n        } else {\n            res += 0.0\n  \
    \      }\n    }\n\n    return res as isize\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb6mw0gkj.rs:14:18\n   |\n\
    14 |         if elt > 0.0 {\n   |                  ^^^\n   |                 \
    \ |\n   |                  expected `&f64`, found floating-point number\n   |\
    \                  help: consider borrowing here: `&0.0`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut result = 0.0;\n    for num in lst {\n        if num\
    \ > 0.0{\n            result = result.add(num * num);\n        }\n    }\n    return\
    \ result.round() as isize;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `add` on ambiguous numeric type `{float}`\n\
    \  --> /tmp/tmphmc4pw4h.rs:14:29\n   |\n14 |             result = result.add(num\
    \ * num);\n   |                             ^^^\n   |\nhelp: you must specify\
    \ a type for this binding, like `f32`\n   |\n11 |     let mut result: f32 = 0.0;\n\
    \   |         ~~~~~~~~~~~~~~~\n\nerror[E0689]: can't call method `round` on ambiguous\
    \ numeric type `{float}`\n  --> /tmp/tmphmc4pw4h.rs:17:19\n   |\n17 |     return\
    \ result.round() as isize;\n   |                   ^^^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `f32`\n   |\n11 |     let mut result:\
    \ f32 = 0.0;\n   |         ~~~~~~~~~~~~~~~\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut result = 0.;\n    for num in lst.iter() {\n        let\
    \ rounded = num.round();\n        result += rounded * rounded;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdl8boex0.rs:16:5\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n16 |     result\n\
    \   |     ^^^^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).sum::<isize>()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmp8m0s420h.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for element in lst {\n        sum += element.round()\
    \ as f64;\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpci8seqf9.rs:13:13\n\
    \   |\n13 |         sum += element.round() as f64;\n   |             ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| round(x * x).expect(\"all elements of lst\
    \ should be f64s\")).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpbqrvrwcp.rs:11:24\n\
    \   |\n11 |     lst.iter().map(|x| round(x * x).expect(\"all elements of lst should\
    \ be f64s\")).sum()\n   |                        ^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|v| v * v).sum::<f64>()\n}\n\nfn main() {\n \
    \   let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbb24uoj5.rs:11:5\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n11 |     lst.iter().map(|v|\
    \ v * v).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n\n    for i in lst.into_iter().map(|x| x.ceil())\
    \ {\n        sum += i * i;\n    }\n\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe0u3ytl2.rs:17:12\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n17 |     return sum;\n\
    \   |            ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter()\n        .map(|x| x.ceil())\n        .sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmprdwcdpl6.rs:13:10\n     |\n13   |         .sum()\n     |          ^^^\
    \ the trait `Sum<f64>` is not implemented for `isize`\n     |\n     = help: the\
    \ following other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a\
    \ f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n \
    \              <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n        \
    \       <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16\
    \ as Sum>\n             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: f64 = 0;\n    for n in lst {\n        sum += n.round()\
    \ as f64;\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6hn4sw4k.rs:11:24\n   |\n\
    11 |     let mut sum: f64 = 0;\n   |                  ---   ^\n   |          \
    \        |     |\n   |                  |     expected `f64`, found integer\n\
    \   |                  |     help: use a float literal: `0.0`\n   |          \
    \        expected due to this\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6hn4sw4k.rs:15:12\n\
    \   |\n10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                   \
    \               ----- expected `isize` because of return type\n...\n15 |     return\
    \ sum;\n   |            ^^^ expected `isize`, found `f64`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lnbrd(lst)\n        .iter()\n        .map(|v| v * v)\n     \
    \   .sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `lnbrd` in this scope\n  --> /tmp/tmp0plmexyy.rs:11:5\n\
    \   |\n11 |     lnbrd(lst)\n   |     ^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut res = 0.0; // We add them to the first value instead\
    \ of 0\n    for n in lst.iter().cloned() {\n        res = res.checked_add(n).unwrap();\n\
    \    }\n    res.floor().unwrap()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `checked_add` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmprwdbg74h.rs:13:19\n   |\n13 |         res = res.checked_add(n).unwrap();\n\
    \   |                   ^^^^^^^^^^^\n   |\nhelp: you must specify a type for this\
    \ binding, like `f32`\n   |\n11 |     let mut res: f32 = 0.0; // We add them to\
    \ the first value instead of 0\n   |         ~~~~~~~~~~~~\n\nerror[E0689]: can't\
    \ call method `floor` on ambiguous numeric type `{float}`\n  --> /tmp/tmprwdbg74h.rs:15:9\n\
    \   |\n15 |     res.floor().unwrap()\n   |         ^^^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `f32`\n   |\n11 |     let mut res: f32\
    \ = 0.0; // We add them to the first value instead of 0\n   |         ~~~~~~~~~~~~\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    let mut prev_x = std::f64::nan();\n  \
    \  for x in lst {\n        sum += (x * x);\n        if !prev_x.is_nan() {\n  \
    \          sum += (x * prev_x);\n        }\n        prev_x = x;\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `nan` in module `std::f64`\n   --> /tmp/tmpayzl59e1.rs:12:32\n\
    \    |\n12  |     let mut prev_x = std::f64::nan();\n    |                   \
    \             ^^^ help: a constant with a similar name exists: `NAN`\n\nwarning:\
    \ unnecessary parentheses around assigned value\n  --> /tmp/tmpayzl59e1.rs:14:16\n\
    \   |\n14 |         sum += (x * x);\n   |                ^     ^\n   |\n   = note:\
    \ `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n\
    14 -         sum += (x * x);\n14 +         sum += x * x;\n   | \n\nwarning: unnecessary\
    \ parentheses around assigned value\n  --> /tmp/tmpayzl59e1.rs:16:20\n   |\n16\
    \ |             sum += (x * prev_x);\n   |                    ^          ^\n \
    \  |\nhelp: remove these parentheses\n   |\n16 -             sum += (x * prev_x);\n\
    16 +             sum += x * prev_x;\n   | \n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n  --> /tmp/tmpayzl59e1.rs:14:13\n   |\n14 |         sum\
    \ += (x * x);\n   |             ^^ no implementation for `{integer} += f64`\n\
    \   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpayzl59e1.rs:16:17\n\
    \   |\n16 |             sum += (x * prev_x);\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddA"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.sort_unstable();\n    let mut sum = 0;\n    for i in lst.iter()\
    \ {\n        if i < 0. {\n            continue;\n        }\n        sum += i *\
    \ (i as f64);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpt4ggg9kt.rs:11:9\n\
    \     |\n11   |     lst.sort_unstable();\n     |         ^^^^^^^^^^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n     |\n     = help: the following other\
    \ types implement trait `Ord`:\n               i128\n               i16\n    \
    \           i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpt4ggg9kt.rs:14:16\n   |\n14 |         if i < 0. {\n   |\
    \                ^^\n   |                |\n   |                expected `&f64`,\
    \ found floating-point number\n   |                help: consider borrowing here:\
    \ `&0.`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpt4ggg9kt.rs:17:13\n\
    \   |\n17 |         sum += i * (i as f64);\n   |             ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0606]: casting `&f64` as `f64` is invalid\n  --> /tmp/tmpt4ggg9kt.rs:17:20\n\
    \   |\n17 |         sum += i * (i as f64);\n   |                    ^-^^^^^^^^\n\
    \   |                    ||\n   |                    |help: dereference the expression:\
    \ `*i`\n   |                    cannot cast `&f64` as `f64`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0606.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n\
    \        if i%2 == 1 {\n            x = ceil(x);\n        }\n        sum += x*x;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `ceil` in this scope\n  --> /tmp/tmpa7ny5k7p.rs:14:17\n\
    \   |\n14 |             x = ceil(x);\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpa7ny5k7p.rs:16:13\n\
    \   |\n16 |         sum += x*x;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: f64 = std::f64::MAX;\n    for i in lst {\n    \
    \    let v: isize = i as isize;\n        sum += v*v;\n    }\n    return (sum as\
    \ isize).round() as isize\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmpib35b5md.rs:14:13\n\
    \   |\n14 |         sum += v*v;\n   |             ^^ no implementation for `f64\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0599]: no method named `round` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpib35b5md.rs:16:27\n   |\n16 |     return (sum\
    \ as isize).round() as isize\n   |                           ^^^^^ method not\
    \ found in `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    lst.sort_unstable();\n    for i in lst\
    \ {\n        sum += i;\n    }\n    sum * sum\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpyeculf5f.rs:12:9\n\
    \     |\n12   |     lst.sort_unstable();\n     |         ^^^^^^^^^^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n     |\n     = help: the following other\
    \ types implement trait `Ord`:\n               i128\n               i16\n    \
    \           i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpyeculf5f.rs:14:13\n   |\n14 |\
    \         sum += i;\n   |             ^^ no implementation for `{integer} += f64`\n\
    \   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.;\n    for x in lst {\n        sum += x.sqrt();\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb8_k7_tt.rs:15:5\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n15 |     sum\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut res = 0.0;\n    for x in lst {\n        res = res +\
    \ x * x;\n    }\n    res.round();\n    res as isize\n}\n\nfn main() {\n    let\
    \ candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `19`,\n right: `29`', /tmp/tmpdfnxfzk2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n    let mut size = lst.len();\n    for i\
    \ in 0..size {\n        let x = lst.last().unwrap().round() as f64;\n        sum\
    \ += x * x;\n        lst.pop();\n    }\n    return sum;\n}\n\nfn main() {\n  \
    \  let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt8whge9e.rs:18:12\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n18 |     return sum;\n\
    \   |            ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut n = lst.len();\n    let mut sqr = 0.;\n    let mut i\
    \ = 0;\n    while i < n {\n        sqr = sqr + lst[i..].iter().map(|x| x.powi(2)).sum();\n\
    \        i += 1;\n    }\n    sqr\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc1biuj54.rs:18:5\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n18 |     sqr\n  \
    \ |     ^^^ expected `isize`, found floating-point number\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut total: f64 = 0.0;\n    for elt in lst {\n        let\
    \ y = ceil::<isize>(elt + 0.5);\n        total += y*(y + 1.0);\n    }\n    return\
    \ total.round();\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `ceil` in this scope\n  --> /tmp/tmpfnn259jz.rs:13:17\n\
    \   |\n13 |         let y = ceil::<isize>(elt + 0.5);\n   |                 ^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfnn259jz.rs:16:12\n\
    \   |\n10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                   \
    \               ----- expected `isize` because of return type\n...\n16 |     return\
    \ total.round();\n   |            ^^^^^^^^^^^^^ expected `isize`, found `f64`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut s = 0.0;\n    for i in lst.iter() {\n        s += i.floor().pow2();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `pow2` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpavgjn11f.rs:13:24\n   |\n13 |         s += i.floor().pow2();\n\
    \   |                        ^^^^ help: there is an associated function with a\
    \ similar name: `powf`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpavgjn11f.rs:15:5\n\
    \   |\n10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                   \
    \               ----- expected `isize` because of return type\n...\n15 |     s\n\
    \   |     ^ expected `isize`, found floating-point number\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        let res = i.ceil();\n\
    \        sum += res.powf(2).unwrap();\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg4jlej02.rs:14:25\n   |\n\
    14 |         sum += res.powf(2).unwrap();\n   |                         ^\n  \
    \ |                         |\n   |                         expected `f64`, found\
    \ integer\n   |                         help: use a float literal: `2.0`\n\nerror[E0599]:\
    \ no method named `unwrap` found for type `f64` in the current scope\n  --> /tmp/tmpg4jlej02.rs:14:28\n\
    \   |\n14 |         sum += res.powf(2).unwrap();\n   |                       \
    \     ^^^^^^ method not found in `f64`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ sum_of_squares = 0.0;\n\n    let first_element = lst[0];\n    let mut first_element_rounded\
    \ = first_element;\n\n    loop {\n        // round the element to integer ceil\n\
    \        let mut rounded_element = first_element_rounded / 2.0;\n\n        if\
    \ rounded_element == 0.0 {\n            break;\n        }\n\n        // sum the\
    \ squares and round\n        sum_of_squares += rounded_element * rounded_element;\n\
    \        first_element_rounded -= rounded_element;\n    }\n\n    sum_of_squares\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuud0lk_m.rs:33:5\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n33 |     sum_of_squares\n\
    \   |     ^^^^^^^^^^^^^^ expected `isize`, found `f64`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut res = 0.;\n    for ele in lst {\n        ele += ele;\n\
    \        res += ele;\n    }\n    res /= lst.len();\n    rounded_up(&res, ::std::f64::MAX)\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `rounded_up` in this scope\n  --> /tmp/tmpbjzxajrs.rs:17:5\n\
    \   |\n17 |     rounded_up(&res, ::std::f64::MAX)\n   |     ^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0277]: cannot divide-assign `f64` by `usize`\n  -->\
    \ /tmp/tmpbjzxajrs.rs:16:9\n   |\n16 |     res /= lst.len();\n   |         ^^\
    \ no implementation for `f64 /= usize`\n   |\n   = help: the trait `DivAssign<usize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `DivAssign<Rhs>`:\n             <f32 as DivAssign<&f32>>\n           \
    \  <f32 as DivAssign>\n             <f64 as DivAssign<&f64>>\n             <f64\
    \ as DivAssign>\n             <i128 as DivAssign<&i128>>\n             <i128 as\
    \ DivAssign>\n             <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n\
    \           and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize + x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&f64` to `isize`\n  --> /tmp/tmp9dfvhwa8.rs:11:42\n\
    \   |\n11 |     lst.iter().map(|x| x.ceil() as isize + x).sum()\n   |        \
    \                                  ^ no implementation for `isize + &f64`\n  \
    \ |\n   = help: the trait `Add<&f64>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as f64).sum()\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmpldwnuoog.rs:11:41\n     |\n11   |     lst.iter().map(|x| x.ceil() as\
    \ f64).sum()\n     |                                         ^^^ the trait `Sum<f64>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.sort_unstable_by(|a, b| b.partial_cmp(a));\n    lst.iter().map(|&i|\
    \ i.ceil()).fold(0, |sum, i| sum + i * i)\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjqn7vk7e.rs:11:33\n   |\n\
    11 |     lst.sort_unstable_by(|a, b| b.partial_cmp(a));\n   |                \
    \                 ^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`, found enum\
    \ `Option`\n   |\n   = note: expected enum `std::cmp::Ordering`\n            \
    \  found enum `Option<std::cmp::Ordering>`\n\nerror[E0277]: cannot add `f64` to\
    \ `isize`\n  --> /tmp/tmpjqn7vk7e.rs:12:56\n   |\n12 |     lst.iter().map(|&i|\
    \ i.ceil()).fold(0, |sum, i| sum + i * i)\n   |                              \
    \                          ^ no implementation for `isize + f64`\n   |\n   = help:\
    \ the trait `Add<f64>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n\
    \             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n  \
    \           <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n      \
    \       <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n            \
    \ <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x * x).sum::<isize>()\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmpdm2au09b.rs:11:31\n     |\n11   |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \     |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ nums = lst.iter().map(|x| x as isize).collect::<Vec<_>>();\n    nums.sort();\n\
    \n    let mut total_sum = 0;\n    for num in nums {\n        total_sum += num;\n\
    \    }\n    total_sum.ceil() as isize\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `ceil` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp_bhq10mx.rs:22:15\n   |\n22 |     total_sum.ceil() as isize\n\
    \   |               ^^^^ help: there is an associated function with a similar\
    \ name: `div_ceil`\n\nerror[E0606]: casting `&f64` as `isize` is invalid\n  -->\
    \ /tmp/tmp_bhq10mx.rs:15:39\n   |\n15 |     let mut nums = lst.iter().map(|x|\
    \ x as isize).collect::<Vec<_>>();\n   |                                     \
    \  -^^^^^^^^^\n   |                                       |\n   |            \
    \                           cannot cast `&f64` as `isize`\n   |              \
    \                         help: dereference the expression: `*x`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0606.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut total: isize = 0;\n\n    for ele in lst.iter().map(|el|\
    \ {\n        let num = el as f64;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        total += num * num;\n        return num;\n    }) {\n     \
    \   *ele = *ele as isize;\n    }\n    return total;\n}\n\nfn main() {\n    let\
    \ candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp349uj6i4.rs:15:18\n   |\n\
    15 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `isize`\n\
    \  --> /tmp/tmp349uj6i4.rs:18:15\n   |\n18 |         total += num * num;\n   |\
    \               ^^ no implementation for `isize += f64`\n   |\n   = help: the\
    \ trait `AddAssign<f64>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0614]: type `f64`\
    \ cannot be dereferenced\n  --> /tmp/tmp349uj6i4.rs:21:9\n   |\n21 |         *ele\
    \ = *ele as isize;\n   |         ^^^^\n\nerror[E0614]: type `f64` cannot be dereferenced\n\
    \  --> /tmp/tmp349uj6i4.rs:21:16\n   |\n21 |         *ele = *ele as isize;\n \
    \  |                ^^^^\n\nerror[E0606]: casting `&f64` as `f64` is invalid\n\
    \  --> /tmp/tmp349uj6i4.rs:14:19\n   |\n14 |         let num = el as f64;\n  \
    \ |                   --^^^^^^^\n   |                   |\n   |              \
    \     cannot cast `&f64` as `f64`\n   |                   help: dereference the\
    \ expression: `*el`\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308, E0606, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: isize = 0.0;\n    for num in lst.iter().map(|x|\
    \ x.ceil()) {\n        sum += num * num;\n    }\n    sum\n}\n\nfn main() {\n \
    \   let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1sd04kiq.rs:11:26\n   |\n\
    11 |     let mut sum: isize = 0.0;\n   |                  -----   ^^^ expected\
    \ `isize`, found floating-point number\n   |                  |\n   |        \
    \          expected due to this\n\nerror[E0277]: cannot add-assign `f64` to `isize`\n\
    \  --> /tmp/tmp1sd04kiq.rs:13:13\n   |\n13 |         sum += num * num;\n   | \
    \            ^^ no implementation for `isize += f64`\n   |\n   = help: the trait\
    \ `AddAssign<f64>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        sum += x.powi(2);\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmppulpg091.rs:13:13\n\
    \   |\n13 |         sum += x.powi(2);\n   |             ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    // Write your code here\n    \n    let mut sum = 0.0;\n    let\
    \ mut sum_sqrs = 0.0;\n    let mut num_lst = lst.len();\n    for n in lst {\n\
    \        sum += *n;\n        sum_sqrs += *n * n;\n    }\n    for n in lst {\n\
    \        *n = round(*n);\n    }\n    let mut remain = sum - num_lst * sum_sqrs;\n\
    \    while remain > 0.1 {\n        sum_sqrs += 1;\n        remain -= 0.1;\n  \
    \  }\n    sum_sqrs\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpv6uiro1m.rs:21:14\n\
    \   |\n21 |         *n = round(*n);\n   |              ^^^^^ not found in this\
    \ scope\n\nerror[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmpv6uiro1m.rs:17:16\n\
    \   |\n17 |         sum += *n;\n   |                ^^\n\nerror[E0614]: type `f64`\
    \ cannot be dereferenced\n  --> /tmp/tmpv6uiro1m.rs:18:21\n   |\n18 |        \
    \ sum_sqrs += *n * n;\n   |                     ^^\n\nerror[E0614]: type `f64`\
    \ cannot be dereferenced\n  --> /tmp/tmpv6uiro1m.rs:21:9\n   |\n21 |         *n\
    \ = round(*n);\n   |         ^^\n\nerror[E0614]: type `f64` cannot be dereferenced\n\
    \  --> /tmp/tmpv6uiro1m.rs:21:20\n   |\n21 |         *n = round(*n);\n   |   \
    \                 ^^\n\nerror[E0277]: cannot multiply `usize` by `{float}`\n \
    \ --> /tmp/tmpv6uiro1m.rs:23:36\n   |\n23 |     let mut remain = sum - num_lst\
    \ * sum_sqrs;\n   |                                    ^ no implementation for\
    \ `usize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot add-assign `{integer}` to `{float}`\n  -->\
    \ /tmp/tmpv6uiro1m.rs:25:18\n   |\n25 |         sum_sqrs += 1;\n   |         \
    \         ^^ no implementation for `{float} += {integer}`\n   |\n   = help: the\
    \ trait `AddAssign<{integer}>` is not implemented for `{float}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\ne"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    let mut result = 0.0;\n\n    for i in\
    \ lst.iter() {\n        sum += i;\n        result = result + i * (i + 1.0) as\
    \ f64;\n    }\n\n    (result as isize).ceil() as isize\n}\n\nfn main() {\n   \
    \ let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `&f64` to `{integer}`\n  --> /tmp/tmp0n0kpmzi.rs:15:13\n\
    \   |\n15 |         sum += i;\n   |             ^^ no implementation for `{integer}\
    \ += &f64`\n   |\n   = help: the trait `AddAssign<&f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0599]: no method named `ceil` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmp0n0kpmzi.rs:19:23\n   |\n19 |     (result as\
    \ isize).ceil() as isize\n   |                       ^^^^ help: there is an associated\
    \ function with a similar name: `div_ceil`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut total_sum: f64 = 0.;\n    let mut counter: isize = 0;\n\
    \    for elem in lst.iter() {\n        total_sum += elem * elem;\n        counter\
    \ += 1;\n    }\n    total_sum.round();\n    counter.round();\n    counter * total_sum\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `round` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpbvm5nn6n.rs:18:13\n   |\n18 |     counter.round();\n  \
    \ |             ^^^^^ method not found in `isize`\n\nerror[E0277]: cannot multiply\
    \ `isize` by `f64`\n  --> /tmp/tmpbvm5nn6n.rs:19:13\n   |\n19 |     counter *\
    \ total_sum\n   |             ^ no implementation for `isize * f64`\n   |\n  \
    \ = help: the trait `Mul<f64>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Mul<Rhs>`:\n             <&'a f32 as\
    \ Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n\
    \             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n    \
    \         <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n          \
    \   <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n\n    for x in lst {\n        let x = x.ceil();\n\
    \        sum += x * x;\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpzqo8janw.rs:15:13\n\
    \   |\n15 |         sum += x * x;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum_squares = 0;\n    for i in lst {\n        let rounded_i\
    \ = i.round() as isize;\n        sum_squares += rounded_i * rounded_i;\n    }\n\
    \    sum_squares\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `29`', /tmp/tmp5ivqiyty.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|e| e * e).sum::<isize>()\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmpzuwp9r1q.rs:11:31\n     |\n11   |     lst.iter().map(|e| e * e).sum::<isize>()\n\
    \     |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    use std::cmp::min;\n\n    let mut sum = 0;\n    for i in lst.iter()\
    \ {\n        if *i < 0.0 {\n            *i = 0.0;\n        }\n        sum += (*i)\
    \ * (*i);\n    }\n    round!(sum, 64).unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error: cannot find macro `round` in this scope\n  --> /tmp/tmpnax2edeb.rs:20:5\n\
    \   |\n20 |     round!(sum, 64).unwrap()\n   |     ^^^^^\n\nwarning: unused import:\
    \ `std::cmp::min`\n  --> /tmp/tmpnax2edeb.rs:11:9\n   |\n11 |     use std::cmp::min;\n\
    \   |         ^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]` on by\
    \ default\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpnax2edeb.rs:18:13\n\
    \   |\n18 |         sum += (*i) * (*i);\n   |             ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).sum();\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzh1c993j.rs:10:34\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |    -----------           \
    \        ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n11 |     lst.iter().map(|x|\
    \ x.ceil() as isize).sum();\n   |                                            \
    \    - help: remove this semicolon\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut s = 0;\n    for n in lst {\n        s = s.checked_add(n.ceil()).unwrap();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `checked_add` on ambiguous numeric type\
    \ `{integer}`\n  --> /tmp/tmpqfxl0ki9.rs:13:15\n   |\n13 |         s = s.checked_add(n.ceil()).unwrap();\n\
    \   |               ^^^^^^^^^^^\n   |\nhelp: you must specify a type for this\
    \ binding, like `i32`\n   |\n11 |     let mut s: i32 = 0;\n   |         ~~~~~~~~~~\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    let mut square = 0;\n    for num in lst\
    \ {\n        let num: isize = num.ceil();\n        sum += num * num;\n       \
    \ square += num;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz7imy5r7.rs:14:26\n   |\n\
    14 |         let num: isize = num.ceil();\n   |                  -----   ^^^^^^^^^^\
    \ expected `isize`, found `f64`\n   |                  |\n   |               \
    \   expected due to this\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut result = 0.0;\n    for num in lst.iter().cloned() {\n\
    \        result = num + num;\n    }\n    result = result.round();\n    result\
    \ = result.ceil();\n    result.to_i()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_i` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpns6qfuep.rs:17:12\n   |\n17 |     result.to_i()\n   | \
    \           ^^^^ help: there is an associated function with a similar name: `to_bits`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x * x).sum::<isize>().unwrap()\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmpkd_3debz.rs:11:31\n     |\n11   |     lst.iter().map(|x| x * x).sum::<isize>().unwrap()\n\
    \     |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror[E0599]: no method\
    \ named `unwrap` found for type `isize` in the current scope\n  --> /tmp/tmpkd_3debz.rs:11:46\n\
    \   |\n11 |     lst.iter().map(|x| x * x).sum::<isize>().unwrap()\n   |      \
    \                                        ^^^^^^ method not found in `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x * x).sum().round() as isize\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpt95bj998.rs:11:31\n\
    \   |\n11 |     lst.iter().map(|x| x * x).sum().round() as isize\n   |       \
    \                        ^^^ cannot infer type for type parameter `S` declared\
    \ on the associated function `sum`\n   |\n   = note: type must be known at this\
    \ point\nhelp: consider specifying the type argument in the method call\n   |\n\
    11 |     lst.iter().map(|x| x * x).sum::<S>().round() as isize\n   |         \
    \                         +++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst\n        .iter()\n        .map(|x| {\n            // x =\
    \ x.floor() as i64 will round down the value to int.\n            let y = x.floor()\
    \ as i64;\n            y * y\n        })\n        .sum()\n}\n\nfn main() {\n \
    \   let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<i64>` is not satisfied\n    -->\
    \ /tmp/tmprm53gxds.rs:18:10\n     |\n18   |         .sum()\n     |          ^^^\
    \ the trait `Sum<i64>` is not implemented for `isize`\n     |\n     = help: the\
    \ following other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a\
    \ f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n \
    \              <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n        \
    \       <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16\
    \ as Sum>\n             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: isize = 0;\n    for x in lst {\n        sum +=\
    \ x * x;\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `isize`\n  --> /tmp/tmpqwkwwgft.rs:13:13\n\
    \   |\n13 |         sum += x * x;\n   |             ^^ no implementation for `isize\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter()\n        .map(|num| num.ceil() as isize)\n      \
    \  .sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmp2nqlzw16.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst\n        .iter()\n        .map(|x| x.round() as f64)\n \
    \       .map(|x| x * x)\n        .sum()\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmplf6k8i2b.rs:15:10\n     |\n15   |         .sum()\n     |          ^^^\
    \ the trait `Sum<f64>` is not implemented for `isize`\n     |\n     = help: the\
    \ following other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a\
    \ f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n \
    \              <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n        \
    \       <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16\
    \ as Sum>\n             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).fold(0, |a, b| a + b)\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmp3h63wmbo.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut num_sum = 0;\n    for i in lst {\n        num_sum +=\
    \ i.sqrt();\n    }\n    num_sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpto1wcyva.rs:13:17\n\
    \   |\n13 |         num_sum += i.sqrt();\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut num_sum = 0;\n    for x in lst.iter() {\n        let\
    \ n = x.ceil();\n        num_sum += x.pow(n);\n    }\n    num_sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `pow` found for reference `&f64` in the current\
    \ scope\n  --> /tmp/tmp6py8uos0.rs:14:22\n   |\n14 |         num_sum += x.pow(n);\n\
    \   |                      ^^^ help: there is an associated function with a similar\
    \ name: `powf`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n    for num in lst.iter() {\n        sum\
    \ += num * num;\n    }\n    sum.round() as isize\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `20`,\n right: `29`', /tmp/tmp7ahsw3ka.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x * x).sum::<f64>()\n}\n\nfn main() {\n \
    \   let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj9po4g3n.rs:11:5\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n11 |     lst.iter().map(|x|\
    \ x * x).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: f64 = std::f64::INFINITY;\n    for x in lst.iter()\
    \ {\n        sum += x;\n    }\n    sum.ceil() as isize\n}\n\nfn main() {\n   \
    \ let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9223372036854775807`,\n right: `14`', /tmp/tmppfuzaorp.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter()\n        .map(|x| x.ceil() as isize)\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmpnxja4kfx.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut accum = vec![0.0; lst.len()];\n    for i in lst.iter()\
    \ {\n        accum[i] = accum[i] + (i * i);\n    }\n    for i in 0..lst.len()\
    \ {\n        accum[i] = f64::ceil(accum[i]) as f64;\n    }\n    for i in 0..lst.len()\
    \ {\n        accum[i] = accum[i] * accum[i];\n    }\n    accum.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{float}]` cannot be indexed by `&f64`\n  --> /tmp/tmpmpmop4dh.rs:13:9\n\
    \   |\n13 |         accum[i] = accum[i] + (i * i);\n   |         ^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{float}]>` is not implemented for `&f64`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<&f64>` for `Vec<{float}>`\n\nerror[E0277]:\
    \ the type `[{float}]` cannot be indexed by `&f64`\n  --> /tmp/tmpmpmop4dh.rs:13:20\n\
    \   |\n13 |         accum[i] = accum[i] + (i * i);\n   |                    ^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{float}]>` is not implemented for `&f64`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<&f64>` for `Vec<{float}>`\n\nerror[E0277]:\
    \ the trait bound `isize: Sum<&f64>` is not satisfied\n    --> /tmp/tmpmpmop4dh.rs:21:18\n\
    \     |\n21   |     accum.iter().sum::<isize>()\n     |                  ^^^ the\
    \ trait `Sum<&f64>` is not implemented for `isize`\n     |\n     = help: the following\
    \ other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n\
    \               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n         \
    \      <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128\
    \ as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n\
    \             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|n| n.ceil() as f64).sum::<f64>()\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpezg22rul.rs:11:5\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n11 |     lst.iter().map(|n|\
    \ n.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x * x).sum().round() as isize\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpb4w29lgt.rs:11:31\n\
    \   |\n11 |     lst.iter().map(|x| x * x).sum().round() as isize\n   |       \
    \                        ^^^ cannot infer type for type parameter `S` declared\
    \ on the associated function `sum`\n   |\n   = note: type must be known at this\
    \ point\nhelp: consider specifying the type argument in the method call\n   |\n\
    11 |     lst.iter().map(|x| x * x).sum::<S>().round() as isize\n   |         \
    \                         +++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|&x| x as f64).collect::<Vec<f64>>().iter().map(|x|\
    \ x).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu0hhev6d.rs:11:5\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n11 |     lst.iter().map(|&x|\
    \ x as f64).collect::<Vec<f64>>().iter().map(|x| x).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).sum().unwrap()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpu_f05hed.rs:11:43\n\
    \   |\n11 |     lst.iter().map(|x| x.ceil() as isize).sum().unwrap()\n   |   \
    \                                        ^^^ cannot infer type for type parameter\
    \ `S` declared on the associated function `sum`\n   |\n   = note: type must be\
    \ known at this point\nhelp: consider specifying the type argument in the method\
    \ call\n   |\n11 |     lst.iter().map(|x| x.ceil() as isize).sum::<S>().unwrap()\n\
    \   |                                              +++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter()\n        .map(|&x| x.ceil() as isize)\n        .fold(0,\
    \ |sum, x| sum + x)\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmp2tkdbsqz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut total = 0;\n    for i in lst.iter() {\n        total\
    \ += i ** 2;\n    }\n    let mut i = 0;\n    while i < lst.len() {\n        total\
    \ += lst.len() - i; //rounding up\n        i += 1;\n    }\n    total\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmp25edyyvk.rs:13:21\n\
    \   |\n13 |         total += i ** 2;\n   |                     ^^^\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp25edyyvk.rs:13:15\n  \
    \ |\n13 |         total += i ** 2;\n   |               ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp25edyyvk.rs:20:5\n\
    \   |\n10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                   \
    \               ----- expected `isize` because of return type\n...\n20 |     total\n\
    \   |     ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a\
    \ `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n20\
    \ |     total.try_into().unwrap()\n   |          ++++++++++++++++++++\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0614.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut result = 0;\n    for num in lst.iter() {\n        result\
    \ = result + num * num;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `f64` to `{integer}`\n  --> /tmp/tmprap1qwb1.rs:13:25\n\
    \   |\n13 |         result = result + num * num;\n   |                       \
    \  ^ no implementation for `{integer} + f64`\n   |\n   = help: the trait `Add<f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sqr = 0.0;\n    for v in lst {\n        let x = v.ceil()\
    \ as f64;\n        sqr += v * x;\n    }\n    sqr\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp3oko0q4.rs:16:5\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n16 |     sqr\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += i*i;\n\
    \    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpnojpi8mz.rs:13:13\n\
    \   |\n13 |         sum += i*i;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: isize = 0;\n\n    lst.iter().for_each(|x| {\n \
    \       sum = sum + x.round() as isize;\n    });\n\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmpn_u0q0ra.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        sum += x.ceil();\n\
    \    }\n    sum * sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpm_j94_wf.rs:13:13\n\
    \   |\n13 |         sum += x.ceil();\n   |             ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x * x).sum().round() as isize\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpfod94px5.rs:11:31\n\
    \   |\n11 |     lst.iter().map(|x| x * x).sum().round() as isize\n   |       \
    \                        ^^^ cannot infer type for type parameter `S` declared\
    \ on the associated function `sum`\n   |\n   = note: type must be known at this\
    \ point\nhelp: consider specifying the type argument in the method call\n   |\n\
    11 |     lst.iter().map(|x| x * x).sum::<S>().round() as isize\n   |         \
    \                         +++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        sum += n * n;\n\
    \    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpf19los6g.rs:13:13\n\
    \   |\n13 |         sum += n * n;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += i.sqrt();\n\
    \    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp7v7i002j.rs:13:13\n\
    \   |\n13 |         sum += i.sqrt();\n   |             ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    use std::mem::transmute;\n    let mut s = 0.0_;\n    for v in\
    \ lst.iter() {\n        s = s + v * v;\n    }\n    (s + transmute::<isize, _>(s))\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around block return value\n  --> /tmp/tmptmfgdht2.rs:16:5\n\
    \   |\n16 |     (s + transmute::<isize, _>(s))\n   |     ^                   \
    \         ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove\
    \ these parentheses\n   |\n16 -     (s + transmute::<isize, _>(s))\n16 +     s\
    \ + transmute::<isize, _>(s)\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmptmfgdht2.rs:16:32\n\
    \   |\n16 |     (s + transmute::<isize, _>(s))\n   |                         \
    \       ^ expected `isize`, found `f64`\n\nerror: aborting due to previous error;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter()\n        .map(|&x| x.ceil() as isize)\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmps40rw5be.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut total_sum = 0;\n    for num in lst.iter() {\n      \
    \  total_sum += num * num;\n    }\n    return total_sum;\n}\n\nfn main() {\n \
    \   let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp_a2h_t8c.rs:13:19\n\
    \   |\n13 |         total_sum += num * num;\n   |                   ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as f64).sum::<f64>()\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo1a3znel.rs:11:5\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n11 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n\n    for num in lst.iter() {\n        sum\
    \ += num.powi(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpcey_gc5e.rs:14:13\n\
    \   |\n14 |         sum += num.powi(2);\n   |             ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        sum += n.powi(2);\n\
    \    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp0vl77eud.rs:13:13\n\
    \   |\n13 |         sum += n.powi(2);\n   |             ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter()\n        .map(|x| x * x)\n        .sum()\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmpc7uid5c9.rs:13:10\n     |\n13   |         .sum()\n     |          ^^^\
    \ the trait `Sum<f64>` is not implemented for `isize`\n     |\n     = help: the\
    \ following other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a\
    \ f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n \
    \              <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n        \
    \       <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16\
    \ as Sum>\n             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut res = 0.0;\n    for i in lst {\n        res += i * i;\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6nkca4e_.rs:15:5\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n15 |     res\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst.iter() {\n        sum +=\
    \ num * num;\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpdfgxqvsq.rs:13:13\n\
    \   |\n13 |         sum += num * num;\n   |             ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    if lst.len() == 0 {\n        return 0\n    }\n\n    let mut\
    \ total = 0;\n    for i in lst {\n        total += i * i;\n    }\n\n    if total\
    \ == 0 {\n        return 0\n    }\n\n    ceil(total).ceil().min(total)\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `ceil` in this scope\n  --> /tmp/tmpofc8oclj.rs:24:5\n\
    \   |\n24 |     ceil(total).ceil().min(total)\n   |     ^^^^ not found in this\
    \ scope\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpofc8oclj.rs:17:15\n\
    \   |\n17 |         total += i * i;\n   |               ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut total_squares = 0.0;\n    let mut n = lst.len();\n \
    \   for i in lst.iter().rev() {\n        total_squares += i * i;\n        n -=\
    \ 1;\n    }\n    total_squares.round();\n    total_squares\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqma91xbu.rs:18:5\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n18 |     total_squares\n\
    \   |     ^^^^^^^^^^^^^ expected `isize`, found `f64`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).sum::<isize>()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmppbiifwd9.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|&x| x.ceil() as f64 * x).sum() as isize\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpymod9wfl.rs:11:46\n\
    \   |\n11 |     lst.iter().map(|&x| x.ceil() as f64 * x).sum() as isize\n   |\
    \                                              ^^^ cannot infer type for type\
    \ parameter `S` declared on the associated function `sum`\n   |\n   = note: type\
    \ must be known at this point\nhelp: consider specifying the type argument in\
    \ the method call\n   |\n11 |     lst.iter().map(|&x| x.ceil() as f64 * x).sum::<S>()\
    \ as isize\n   |                                                 +++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.round() as isize).sum::<isize>()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmpfez0qi_n.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut res = 0.0;\n    for x in lst {\n        res += x * x;\n\
    \    }\n    res.round().ceil() as isize\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `20`,\n right: `29`', /tmp/tmp_31b6mpd.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut total = 0;\n    let mut i = 1;\n    while i < lst.len()\
    \ {\n        total += ((lst[i] - i) as f64) * (lst[i] - i);\n        i += 1;\n\
    \    }\n    total\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot subtract `usize` from `f64`\n  --> /tmp/tmp8np7f9zd.rs:14:27\n\
    \   |\n14 |         total += ((lst[i] - i) as f64) * (lst[i] - i);\n   |     \
    \                      ^ no implementation for `f64 - usize`\n   |\n   = help:\
    \ the trait `Sub<usize>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: cannot\
    \ subtract `usize` from `f64`\n  --> /tmp/tmp8np7f9zd.rs:14:50\n   |\n14 |   \
    \      total += ((lst[i] - i) as f64) * (lst[i] - i);\n   |                  \
    \                                ^ no implementation for `f64 - usize`\n   |\n\
    \   = help: the trait `Sub<usize>` is not implemented for `f64`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: isize = 0;\n    let mut max: f64 = lst[0];\n  \
    \  for num in lst {\n        if num > max {\n            sum += num * num;\n \
    \       } else {\n            sum += num;\n        }\n        max = std::f64::ceil(max);\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `ceil` in module `std::f64`\n  --> /tmp/tmp6uqzycwd.rs:19:25\n\
    \   |\n19 |         max = std::f64::ceil(max);\n   |                         ^^^^\
    \ not found in `std::f64`\n\nerror[E0277]: cannot add-assign `f64` to `isize`\n\
    \  --> /tmp/tmp6uqzycwd.rs:15:17\n   |\n15 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `isize += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `isize`\n  --> /tmp/tmp6uqzycwd.rs:17:17\n   |\n17 |             sum\
    \ += num;\n   |                 ^^ no implementation for `isize += f64`\n   |\n\
    \   = help: the trait `AddAssign<f64>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for ele in lst.into_iter() {\n       \
    \ sum += ele.ceil() as f64 * ele.ceil();\n    }\n    sum\n}\n\nfn main() {\n \
    \   let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmppamendal.rs:13:13\n\
    \   |\n13 |         sum += ele.ceil() as f64 * ele.ceil();\n   |             ^^\
    \ no implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| {\n        let x = x.round();\n        x\
    \ * x\n    }).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmpujx734m6.rs:14:8\n     |\n14   |     }).sum()\n     |        ^^^ the\
    \ trait `Sum<f64>` is not implemented for `isize`\n     |\n     = help: the following\
    \ other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n\
    \               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n         \
    \      <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128\
    \ as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n\
    \             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as f64).sum::<isize>()\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmp1zl5w1gb.rs:11:41\n     |\n11   |     lst.iter().map(|x| x.ceil() as\
    \ f64).sum::<isize>()\n     |                                         ^^^ the\
    \ trait `Sum<f64>` is not implemented for `isize`\n     |\n     = help: the following\
    \ other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n\
    \               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n         \
    \      <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128\
    \ as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n\
    \             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst.iter() {\n        let rounded_num\
    \ = num.ceil();\n        sum += rounded_num * rounded_num;\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpxgknhifw.rs:14:13\n\
    \   |\n14 |         sum += rounded_num * rounded_num;\n   |             ^^ no\
    \ implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil()).map(|x| x * x).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmp1dmkhvf5.rs:11:49\n     |\n11   |     lst.iter().map(|x| x.ceil()).map(|x|\
    \ x * x).sum::<isize>()\n     |                                              \
    \   ^^^ the trait `Sum<f64>` is not implemented for `isize`\n     |\n     = help:\
    \ the following other types implement trait `Sum<A>`:\n               <f32 as\
    \ Sum<&'a f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n\
    \               <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n       \
    \        <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16\
    \ as Sum>\n             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|num| num * num).sum()\n}\n\nfn main() {\n  \
    \  let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmpnuc15thk.rs:11:37\n     |\n11   |     lst.iter().map(|num| num * num).sum()\n\
    \     |                                     ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n\n    for x in lst {\n        let y = x.ceil();\n\
    \        sum += x * x;\n        sum += y;\n    }\n\n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt0522_8r.rs:19:12\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n19 |     return sum;\n\
    \   |            ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    if lst.len() <= 0 {\n        return 0;\n    }\n\n    let mut\
    \ sum_nums = 0;\n\n    for &i in &lst {\n        if *i < 0 {\n            *i =\
    \ 0.;\n        }\n        sum_nums += *i;\n    }\n\n    sum_nums = round_up(sum_nums);\n\
    \n    let mut sum_sqr_nums = 0.;\n    for i in &lst {\n        sum_sqr_nums +=\
    \ i *i;\n    }\n\n    return round_down(sum_sqr_nums);\n}\n\nfn main() {\n   \
    \ let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `round_up` in this scope\n  --> /tmp/tmp8nhwnmqv.rs:24:16\n\
    \   |\n24 |     sum_nums = round_up(sum_nums);\n   |                ^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `round_down` in this\
    \ scope\n  --> /tmp/tmp8nhwnmqv.rs:31:12\n   |\n31 |     return round_down(sum_sqr_nums);\n\
    \   |            ^^^^^^^^^^ not found in this scope\n\nerror[E0614]: type `f64`\
    \ cannot be dereferenced\n  --> /tmp/tmp8nhwnmqv.rs:18:12\n   |\n18 |        \
    \ if *i < 0 {\n   |            ^^\n\nerror[E0614]: type `f64` cannot be dereferenced\n\
    \  --> /tmp/tmp8nhwnmqv.rs:19:13\n   |\n19 |             *i = 0.;\n   |      \
    \       ^^\n\nerror[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmp8nhwnmqv.rs:21:21\n\
    \   |\n21 |         sum_nums += *i;\n   |                     ^^\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0614.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += i;\n  \
    \  }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp9urd3veo.rs:13:13\n\
    \   |\n13 |         sum += i;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: isize = 0;\n    for x in lst {\n        sum +=\
    \ std::f64::ceil(x);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `ceil` in module `std::f64`\n  --> /tmp/tmp05qkulkq.rs:13:26\n\
    \   |\n13 |         sum += std::f64::ceil(x);\n   |                          ^^^^\
    \ not found in `std::f64`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut result: isize = 0;\n    for num in lst {\n        result\
    \ = result + num * num;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `f64` to `isize`\n  --> /tmp/tmp4ka90097.rs:13:25\n\
    \   |\n13 |         result = result + num * num;\n   |                       \
    \  ^ no implementation for `isize + f64`\n   |\n   = help: the trait `Add<f64>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut s = 0isize;\n    for x in lst.iter().map(|x| x as f64).map(|x|\
    \ {\n        if x <= 0 {\n            0isize\n        } else {\n            s.saturating_add(x.powf(f64::from(2.0)))\n\
    \        }\n    }) {\n        s.saturating_add(x.powf(f64::from(2.0)))\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptmbvu_in.rs:13:17\n   |\n\
    13 |         if x <= 0 {\n   |                 ^\n   |                 |\n   |\
    \                 expected `f64`, found integer\n   |                 help: use\
    \ a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptmbvu_in.rs:16:30\n\
    \   |\n16 |             s.saturating_add(x.powf(f64::from(2.0)))\n   |       \
    \                       ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `f64`\n\
    \nerror[E0599]: no method named `powf` found for type `isize` in the current scope\n\
    \  --> /tmp/tmptmbvu_in.rs:19:28\n   |\n19 |         s.saturating_add(x.powf(f64::from(2.0)))\n\
    \   |                            ^^^^ help: there is an associated function with\
    \ a similar name: `pow`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptmbvu_in.rs:19:9\n\
    \   |\n19 |         s.saturating_add(x.powf(f64::from(2.0)))\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `()`, found `isize`\n   |\nhelp: consider using a semicolon here\n\
    \   |\n19 |         s.saturating_add(x.powf(f64::from(2.0)));\n   |          \
    \                                       +\nhelp: you might have meant to return\
    \ this value\n   |\n19 |         return s.saturating_add(x.powf(f64::from(2.0)));\n\
    \   |         ++++++                                         +\n\nerror[E0606]:\
    \ casting `&f64` as `f64` is invalid\n  --> /tmp/tmptmbvu_in.rs:12:33\n   |\n\
    12 |     for x in lst.iter().map(|x| x as f64).map(|x| {\n   |               \
    \                  -^^^^^^^\n   |                                 |\n   |    \
    \                             cannot cast `&f64` as `f64`\n   |              \
    \                   help: dereference the expression: `*x`\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599,\
    \ E0606.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sumsq = 0.0;\n\n    for &num in lst {\n        let num\
    \ = num.ceil();\n        sumsq += num * num;\n    }\n\n    return sumsq;\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoensdbir.rs:13:9\n   |\n\
    13 |     for &num in lst {\n   |         ^^^^    --- this expression has type\
    \ `Option<f64>`\n   |         |\n   |         expected `f64`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `num`\n   |\n\
    \   = note:   expected type `f64`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpoensdbir.rs:18:12\n   |\n10 | fn sum_squares(lst:\
    \ Vec<f64>) -> isize {\n   |                                  ----- expected `isize`\
    \ because of return type\n...\n18 |     return sumsq;\n   |            ^^^^^ expected\
    \ `isize`, found floating-point number\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut total_sum = 0;\n    for num in lst.iter() {\n      \
    \  let n = num as isize;\n        let num = num.ceil();\n        total_sum +=\
    \ num * num;\n    }\n    total_sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpz3mfezv0.rs:15:19\n\
    \   |\n15 |         total_sum += num * num;\n   |                   ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0606]: casting `&f64` as `isize` is invalid\n  --> /tmp/tmpz3mfezv0.rs:13:17\n\
    \   |\n13 |         let n = num as isize;\n   |                 ---^^^^^^^^^\n\
    \   |                 |\n   |                 cannot cast `&f64` as `isize`\n\
    \   |                 help: dereference the expression: `*num`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0606.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut s = 0;\n    for i in lst.into_iter() {\n        s +=\
    \ i ** 2;\n    }\n    s\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmp71qgj4y5.rs:13:17\n\
    \   |\n13 |         s += i ** 2;\n   |                 ^^^\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmp71qgj4y5.rs:13:11\n   |\n13 |\
    \         s += i ** 2;\n   |           ^^ no implementation for `{integer} +=\
    \ f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: f64 = 0.0;\n\n    for x in lst.iter() {\n     \
    \   sum += x * x;\n    }\n\n    ceil(sum as f64) as isize\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `ceil` in this scope\n  --> /tmp/tmp491f43pz.rs:17:5\n\
    \   |\n17 |     ceil(sum as f64) as isize\n   |     ^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum_sq = lst.iter().fold(0.f64, 0.) + 1.0;\n    sum_sq\
    \ = sum_sq.round() as isize;\n    return sum_sq;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0610]: `{integer}` is a primitive type and therefore doesn't have\
    \ fields\n  --> /tmp/tmpn2wf7iiy.rs:11:40\n   |\n11 |     let mut sum_sq = lst.iter().fold(0.f64,\
    \ 0.) + 1.0;\n   |                                        ^^^\n\nerror[E0277]:\
    \ expected a `FnMut<(_, &f64)>` closure, found `{float}`\n    --> /tmp/tmpn2wf7iiy.rs:11:45\n\
    \     |\n11   |     let mut sum_sq = lst.iter().fold(0.f64, 0.) + 1.0;\n     |\
    \                                 ----        ^^ expected an `FnMut<(_, &f64)>`\
    \ closure, found `{float}`\n     |                                 |\n     | \
    \                                required by a bound introduced by this call\n\
    \     |\n     = help: the trait `FnMut<(_, &f64)>` is not implemented for `{float}`\n\
    note: required by a bound in `fold`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0610.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as f64).sum()\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmp8nzppyve.rs:11:41\n     |\n11   |     lst.iter().map(|x| x.ceil() as\
    \ f64).sum()\n     |                                         ^^^ the trait `Sum<f64>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: isize = 0;\n    for i in lst.iter().map(|x| x.ceil()\
    \ as isize) {\n        sum += i * (i * i);\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `36`,\n right: `14`', /tmp/tmp9jclrhy9.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.;\n    for n in lst {\n        sum += n * n;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpahthkjv8.rs:15:5\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n15 |     sum\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).sum::<isize>()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmpek0cgwf2.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as f64 * x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmpfw7bcd0_.rs:11:45\n     |\n11   |     lst.iter().map(|x| x.ceil() as\
    \ f64 * x).sum()\n     |                                             ^^^ the trait\
    \ `Sum<f64>` is not implemented for `isize`\n     |\n     = help: the following\
    \ other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n\
    \               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n         \
    \      <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128\
    \ as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n\
    \             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0isize;\n    for x in lst {\n        sum += x.ceil()\
    \ * x;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `isize`\n  --> /tmp/tmpfy7u4ssb.rs:13:13\n\
    \   |\n13 |         sum += x.ceil() * x;\n   |             ^^ no implementation\
    \ for `isize += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut num_squares = 0.0;\n    for el in lst {\n        num_squares\
    \ += el.pow(2.0);\n    }\n    num_squares.round() as isize\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `pow` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpkpin_z82.rs:13:27\n   |\n13 |         num_squares += el.pow(2.0);\n\
    \   |                           ^^^ help: there is an associated function with\
    \ a similar name: `powf`\n\nerror[E0689]: can't call method `round` on ambiguous\
    \ numeric type `{float}`\n  --> /tmp/tmpkpin_z82.rs:15:17\n   |\n15 |     num_squares.round()\
    \ as isize\n   |                 ^^^^^\n   |\nhelp: you must specify a type for\
    \ this binding, like `f32`\n   |\n11 |     let mut num_squares: f32 = 0.0;\n \
    \  |         ~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0599, E0689.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst\n        .into_iter()\n        .map(|x| x.ceil() as isize)\n\
    \        .sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmpsj6kligv.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| round(x, CEILING)).sum::<isize>()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpvx0vc5qi.rs:11:24\n\
    \   |\n11 |     lst.iter().map(|x| round(x, CEILING)).sum::<isize>()\n   |   \
    \                     ^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `CEILING` in this scope\n  --> /tmp/tmpvx0vc5qi.rs:11:33\n   |\n11 | \
    \    lst.iter().map(|x| round(x, CEILING)).sum::<isize>()\n   |              \
    \                   ^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: f64 = 0.0;\n\n    for x in lst {\n        let y\
    \ = x.ceil();\n        sum += x*x;\n        sum += y*y;\n    }\n\n    return sum\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpth5sxrt6.rs:19:12\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n19 |     return sum\n\
    \   |            ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|&x| x.ceil() as f64).sum()\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmpt0mwlj9j.rs:11:42\n     |\n11   |     lst.iter().map(|&x| x.ceil() as\
    \ f64).sum()\n     |                                          ^^^ the trait `Sum<f64>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|e| e*e).sum()\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmpfqsfxtbp.rs:11:29\n     |\n11   |     lst.iter().map(|e| e*e).sum()\n\
    \     |                             ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: f64 = 0;\n    for value in lst {\n        let rounded_value:\
    \ f64 = value.ceil();\n        sum += rounded_value * rounded_value;\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu7ce8szf.rs:11:24\n   |\n\
    11 |     let mut sum: f64 = 0;\n   |                  ---   ^\n   |          \
    \        |     |\n   |                  |     expected `f64`, found integer\n\
    \   |                  |     help: use a float literal: `0.0`\n   |          \
    \        expected due to this\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu7ce8szf.rs:16:5\n\
    \   |\n10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                   \
    \               ----- expected `isize` because of return type\n...\n16 |     sum\n\
    \   |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut squared_sum: f64 = 0.;\n    let mut idx: usize = 0;\n\
    \n    for n in lst.iter() {\n        if idx % 2 == 1 {\n            squared_sum\
    \ += n.round() as f64;\n        }\n        idx += 1;\n    }\n\n    if idx % 2\
    \ == 1 {\n        squared_sum += lst.last().round() as f64;\n    }\n\n    squared_sum\
    \ as isize\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `round` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpvoi9vb8k.rs:22:35\n   |\n22 |         squared_sum += lst.last().round()\
    \ as f64;\n   |                                   ^^^^^ method not found in `Option<&f64>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    let mut square = 0;\n    for (i, &x) in\
    \ lst.iter().enumerate() {\n        sum += x;\n        square += *x;\n       \
    \ if i <= 0 {\n            continue;\n        }\n        if *x != 0.0 {\n    \
    \        if let Some(x2) = x.ceil() {\n                sum += *x2 * x2;\n    \
    \            square += *x2 * x2;\n            }\n        }\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp7ul2ht3z.rs:14:13\n\
    \   |\n14 |         sum += x;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmp7ul2ht3z.rs:15:19\n\
    \   |\n15 |         square += *x;\n   |                   ^^\n\nerror[E0614]:\
    \ type `f64` cannot be dereferenced\n  --> /tmp/tmp7ul2ht3z.rs:19:12\n   |\n19\
    \ |         if *x != 0.0 {\n   |            ^^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7ul2ht3z.rs:20:20\n   |\n20 |             if let Some(x2) = x.ceil()\
    \ {\n   |                    ^^^^^^^^   -------- this expression has type `f64`\n\
    \   |                    |\n   |                    expected `f64`, found enum\
    \ `Option`\n   |\n   = note: expected type `f64`\n              found enum `Option<_>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0614.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    lst.iter().for_each(|x| {\n        sum\
    \ += x;\n    });\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `&f64` to `{integer}`\n  --> /tmp/tmpaip844zp.rs:13:13\n\
    \   |\n13 |         sum += x;\n   |             ^^ no implementation for `{integer}\
    \ += &f64`\n   |\n   = help: the trait `AddAssign<&f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0\n    }\n    \n    let\
    \ mut result = lst.iter().map(|x| x.ceil()).sum();\n    for i in 1..lst.len()\
    \ {\n        result += result.pow(2.0).unwrap() * lst[i];\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp7mtegorc.rs:17:19\n\
    \   |\n15 |     let mut result = lst.iter().map(|x| x.ceil()).sum();\n   |   \
    \      ---------- consider giving `result` a type\n16 |     for i in 1..lst.len()\
    \ {\n17 |         result += result.pow(2.0).unwrap() * lst[i];\n   |         \
    \          ^^^^^^ cannot infer type\n   |\n   = note: type must be known at this\
    \ point\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut total: f64 = 0.0;\n    for num in lst.iter() {\n   \
    \     total = num * num;\n    }\n    return total as isize;\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `14`', /tmp/tmpvrp86lv5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter()\n        .map(|x| x.ceil() as isize)\n        .fold(0,\
    \ |sum, x| sum + x)\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmp2whgfnwt.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    let mut squared_sum = 0.0;\n    for n\
    \ in lst {\n        sum += n.ceil() as isize;\n        squared_sum += n * n;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmprdsqkc1t.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0\n    }\n    let mut res\
    \ = 0;\n    for i in lst.iter().map(|&x| x.ceil() as isize).rev() {\n        res\
    \ += i ** 2\n    }\n    res\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmppe2vc9iq.rs:16:19\n\
    \   |\n16 |         res += i ** 2\n   |                   ^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil()).fold(0, |sum, item| sum + item\
    \ * item)\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `f64` to `isize`\n  --> /tmp/tmpy9_jnkp2.rs:11:58\n\
    \   |\n11 |     lst.iter().map(|x| x.ceil()).fold(0, |sum, item| sum + item *\
    \ item)\n   |                                                          ^ no implementation\
    \ for `isize + f64`\n   |\n   = help: the trait `Add<f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ sum = 0;\n\n    for v in lst.iter() {\n        sum += std::f64::ceil(v) * std::f64::ceil(v);\n\
    \    }\n\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `ceil` in module `std::f64`\n  --> /tmp/tmpznh256db.rs:18:26\n\
    \   |\n18 |         sum += std::f64::ceil(v) * std::f64::ceil(v);\n   |      \
    \                    ^^^^ not found in `std::f64`\n\nerror[E0425]: cannot find\
    \ function `ceil` in module `std::f64`\n  --> /tmp/tmpznh256db.rs:18:46\n   |\n\
    18 |         sum += std::f64::ceil(v) * std::f64::ceil(v);\n   |             \
    \                                 ^^^^ not found in `std::f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut res = 0.0;\n    for num in lst {\n        res += num\
    \ * num;\n    }\n    res.round() as isize\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `20`,\n right: `29`', /tmp/tmph5a0us0h.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: f64 = 0.0;\n    for num in lst.iter() {\n     \
    \   let round = num.ceil();\n        sum += num * num;\n        sum += round;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdciw5t_3.rs:17:5\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n17 |     sum\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut acc = 0;\n    for num in lst {\n        acc += num *\
    \ num;\n    }\n    acc\n}\n\nfn main() {\n    let candidate = sum_squares;\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp0v6m0w6b.rs:13:13\n\
    \   |\n13 |         acc += num * num;\n   |             ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    if lst.len() == 0 {\n        return 0\n    }\n    let mut res\
    \ = 0.0;\n    for i in lst {\n        if i < -FLT_MAX || i > FLT_MAX {\n     \
    \       i += FLT_MAX;\n        }\n        res += i * i;\n    }\n    return res.round()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `FLT_MAX` in this scope\n  --> /tmp/tmpji20atob.rs:16:17\n\
    \   |\n16 |         if i < -FLT_MAX || i > FLT_MAX {\n   |                 ^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `FLT_MAX` in this\
    \ scope\n  --> /tmp/tmpji20atob.rs:16:32\n   |\n16 |         if i < -FLT_MAX ||\
    \ i > FLT_MAX {\n   |                                ^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `FLT_MAX` in this scope\n  --> /tmp/tmpji20atob.rs:17:18\n\
    \   |\n17 |             i += FLT_MAX;\n   |                  ^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: isize = 0;\n\n    for n in lst {\n        sum +=\
    \ n * n;\n    }\n\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `isize`\n  --> /tmp/tmpsh5z556e.rs:14:13\n\
    \   |\n14 |         sum += n * n;\n   |             ^^ no implementation for `isize\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    // sort the list to get smallest to largest\n    lst.sort_unstable();\n\
    \    // round up each element in the list\n    for n in lst {\n        *n = std::f64::ceil(*n)\
    \ as f64;\n    }\n    // compute the sum\n    let mut sum = 0.0;\n    for n in\
    \ lst {\n        sum += *n * n;\n    }\n    // return it\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `ceil` in module `std::f64`\n  --> /tmp/tmpmuomp_dm.rs:15:24\n\
    \   |\n15 |         *n = std::f64::ceil(*n) as f64;\n   |                    \
    \    ^^^^ not found in `std::f64`\n\nerror[E0277]: the trait bound `f64: Ord`\
    \ is not satisfied\n    --> /tmp/tmpmuomp_dm.rs:12:9\n     |\n12   |     lst.sort_unstable();\n\
    \     |         ^^^^^^^^^^^^^ the trait `Ord` is not implemented for `f64`\n \
    \    |\n     = help: the following other types implement trait `Ord`:\n      \
    \         i128\n               i16\n               i32\n               i64\n \
    \              i8\n               isize\n               u128\n               u16\n\
    \             and 4 others\nnote: required by a bound in `core::slice::<impl [T]>::sort_unstable`\n\
    \nerror[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmpmuomp_dm.rs:15:9\n\
    \   |\n15 |         *n = std::f64::ceil(*n) as f64;\n   |         ^^\n\nerror[E0614]:\
    \ type `f64` cannot be dereferenced\n  --> /tmp/tmpmuomp_dm.rs:15:29\n   |\n15\
    \ |         *n = std::f64::ceil(*n) as f64;\n   |                            \
    \ ^^\n\nerror[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmpmuomp_dm.rs:20:16\n\
    \   |\n20 |         sum += *n * n;\n   |                ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmuomp_dm.rs:23:5\n   |\n10 | fn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n   |                                  ----- expected `isize` because\
    \ of return type\n...\n23 |     sum\n   |     ^^^ expected `isize`, found floating-point\
    \ number\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0425, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|&x| x.ceil() as f64).sum::<isize>()\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmpf4789uw8.rs:11:42\n     |\n11   |     lst.iter().map(|&x| x.ceil() as\
    \ f64).sum::<isize>()\n     |                                          ^^^ the\
    \ trait `Sum<f64>` is not implemented for `isize`\n     |\n     = help: the following\
    \ other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n\
    \               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n         \
    \      <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128\
    \ as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n\
    \             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut total = 0.0;\n\n    for n in lst.iter() {\n        total\
    \ += n.ceil() as isize;\n    }\n\n    total\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp5ef9zi45.rs:14:15\n\
    \   |\n14 |         total += n.ceil() as isize;\n   |               ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5ef9zi45.rs:17:5\n\
    \   |\n10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                   \
    \               ----- expected `isize` because of return type\n...\n17 |     total\n\
    \   |     ^^^^^ expected `isize`, found floating-point number\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    List.iter::<f64, _>(|x| x.ceil())\n        .enumerate()\n  \
    \      .filter(|(i, x)| x.is_positive())\n        .map(|(i, x)| i * (x.powf(i)))\n\
    \        .sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `List` in this scope\n  --> /tmp/tmphtwi9_5k.rs:11:5\n\
    \   |\n11 |     List.iter::<f64, _>(|x| x.ceil())\n   |     ^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|num| num.round() as isize).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmpu4s5_t75.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    // Solution is based on: http://www.geeksforgeeks.org/sum-of-square-numbers-set-2/\n\
    \    let mut sum = 0.;\n    let mut i = 0;\n\n    while i < lst.len() {\n    \
    \    let elem = lst[i];\n        sum += elem.powi(2);\n        i += 1;\n    }\n\
    \    return sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuk8gwfr.rs:20:12\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n20 |     return sum\n\
    \   |            ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut s = 0.0;\n    for i in lst {\n        s = s.checked_add(i).unwrap();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `checked_add` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmp2r0g3rb8.rs:13:15\n   |\n13 |         s = s.checked_add(i).unwrap();\n\
    \   |               ^^^^^^^^^^^\n   |\nhelp: you must specify a type for this\
    \ binding, like `f32`\n   |\n11 |     let mut s: f32 = 0.0;\n   |         ~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2r0g3rb8.rs:15:5\n   |\n10 | fn\
    \ sum_squares(lst: Vec<f64>) -> isize {\n   |                                \
    \  ----- expected `isize` because of return type\n...\n15 |     s\n   |     ^\
    \ expected `isize`, found floating-point number\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0689.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    // Add up all the numbers in the list\n    let mut sum: f64\
    \ = 0.0;\n    for num in lst {\n        sum += num;\n    }\n    // Round each\
    \ number to the nearest integer\n    for num in lst {\n        sum += num.ceil()\
    \ as f64;\n    }\n    return sum * sum;\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpco9oercb.rs:20:12\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n20 |     return sum\
    \ * sum;\n   |            ^^^^^^^^^ expected `isize`, found `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut s = 0.0;\n    for x in lst {\n        s = s + x.ln();\n\
    \    }\n    s.round();\n    s\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1z3hfy7i.rs:16:5\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n16 |     s\n   |\
    \     ^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.sort_unstable();\n    let mut s = 0.;\n    for i in lst\
    \ {\n        s += i;\n    }\n    s.round();\n    s * (s as f64)\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp9r6tgvf8.rs:11:9\n\
    \     |\n11   |     lst.sort_unstable();\n     |         ^^^^^^^^^^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n     |\n     = help: the following other\
    \ types implement trait `Ord`:\n               i128\n               i16\n    \
    \           i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9r6tgvf8.rs:17:5\n   |\n10 | fn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n   |                                  ----- expected `isize` because\
    \ of return type\n...\n17 |     s * (s as f64)\n   |     ^^^^^^^^^^^^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| {\n        if x < 0 {\n            x / 2\
    \ + std::ceil(x / 2)\n        } else {\n            std::ceil(x / 2)\n       \
    \ }\n    }).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `ceil` in crate `std`\n  --> /tmp/tmp0tpu2jwy.rs:13:26\n\
    \   |\n13 |             x / 2 + std::ceil(x / 2)\n   |                       \
    \   ^^^^ not found in `std`\n\nerror[E0425]: cannot find function `ceil` in crate\
    \ `std`\n  --> /tmp/tmp0tpu2jwy.rs:15:18\n   |\n15 |             std::ceil(x /\
    \ 2)\n   |                  ^^^^ not found in `std`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0tpu2jwy.rs:12:16\n   |\n12 |         if x < 0 {\n   |\
    \                ^ expected `&f64`, found integer\n\nerror[E0277]: cannot divide\
    \ `&f64` by `{integer}`\n  --> /tmp/tmp0tpu2jwy.rs:13:15\n   |\n13 |         \
    \    x / 2 + std::ceil(x / 2)\n   |               ^ no implementation for `&f64\
    \ / {integer}`\n   |\n   = help: the trait `Div<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `&f64` by `{integer}`\n  --> /tmp/tmp0tpu2jwy.rs:13:33\n\
    \   |\n13 |             x / 2 + std::ceil(x / 2)\n   |                       \
    \          ^ no implementation for `&f64 / {integer}`\n   |\n   = help: the trait\
    \ `Div<{integer}>` is not implemented for `&f64`\n   = help: the following other\
    \ types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n    \
    \         <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n      \
    \       <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n          \
    \   <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a\
    \ isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot divide\
    \ `&f64` by `{integer}`\n  --> /tmp/tmp0tpu2jwy.rs:15:25\n   |\n15 |         \
    \    std::ceil(x / 2)\n   |                         ^ no implementation for `&f64\
    \ / {integer}`\n   |\n   = help: the trait `Div<{integer}>` is n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for &f in lst {\n        sum += f.ceil()\
    \ as isize + f.floor() as isize;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxwyu5qak.rs:12:9\n   |\n\
    12 |     for &f in lst {\n   |         ^^    --- this expression has type `Option<f64>`\n\
    \   |         |\n   |         expected `f64`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `f`\n   |\n   = note:   expected\
    \ type `f64`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut total: isize = 0;\n    for x in lst {\n        let y:\
    \ f64 = x.ceil();\n        total += y * y;\n    }\n    total\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `isize`\n  --> /tmp/tmpkubyh2ro.rs:14:15\n\
    \   |\n14 |         total += y * y;\n   |               ^^ no implementation for\
    \ `isize += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x > 0.0 {\n\
    \            sum += x;\n        } else {\n            sum -= x;\n        }\n \
    \   }\n    sum * sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpxecsko4f.rs:14:17\n\
    \   |\n14 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot subtract-assign `f64` from `{integer}`\n \
    \ --> /tmp/tmpxecsko4f.rs:16:17\n   |\n16 |             sum -= x;\n   |      \
    \           ^^ no implementation for `{integer} -= f64`\n   |\n   = help: the\
    \ trait `SubAssign<f64>` is not implemented for `{integer}`\n   = help: the following\
    \ other types implement trait `SubAssign<Rhs>`:\n             <f32 as SubAssign<&f32>>\n\
    \             <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n    \
    \         <f64 as SubAssign>\n             <i128 as SubAssign<&i128>>\n      \
    \       <i128 as SubAssign>\n             <i16 as SubAssign<&i16>>\n         \
    \    <i16 as SubAssign>\n           and 20 others\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst\n        .iter()\n        .map(|x| f64::ceil(x.sqrt()) as\
    \ f64)\n        .sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmpu6siqi6j.rs:14:10\n     |\n14   |         .sum()\n     |          ^^^\
    \ the trait `Sum<f64>` is not implemented for `isize`\n     |\n     = help: the\
    \ following other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a\
    \ f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n \
    \              <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n        \
    \       <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16\
    \ as Sum>\n             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = lst[0];\n    for v in lst.iter().skip(1) {\n \
    \       sum += v*v;\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv1_c3e12.rs:15:12\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n15 |     return sum;\n\
    \   |            ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    let mut n = lst.len();\n    while n >\
    \ 0 {\n        sum += lst.last().sqrt();\n        n--;\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmp3w62vnbd.rs:15:12\n\
    \   |\n15 |         n--;\n   |            ^ expected expression\n\nerror[E0599]:\
    \ no method named `sqrt` found for enum `Option` in the current scope\n  --> /tmp/tmp3w62vnbd.rs:14:27\n\
    \   |\n14 |         sum += lst.last().sqrt();\n   |                          \
    \ ^^^^ method not found in `Option<&f64>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst\n        .iter()\n        .map(|x| x.ceil() as isize)\n\
    \        .sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmpf3h46hjn.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut result = 0.0;\n    for i in lst.iter() {\n        let\
    \ x = i.floor();\n        result += x.pow(2.0).unwrap();\n    }\n    return result;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `pow` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmp2hsi193a.rs:14:21\n   |\n14 |         result += x.pow(2.0).unwrap();\n\
    \   |                     ^^^ help: there is an associated function with a similar\
    \ name: `powf`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2hsi193a.rs:16:12\n\
    \   |\n10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                   \
    \               ----- expected `isize` because of return type\n...\n16 |     return\
    \ result;\n   |            ^^^^^^ expected `isize`, found floating-point number\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n    let mut accum:\
    \ f64 = lst[0].powi(2);\n    for &x in lst {\n        accum += x.powi(2);\n  \
    \  }\n    accum.floor() as isize\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdwugto32.rs:15:9\n   |\n\
    15 |     for &x in lst {\n   |         ^^    --- this expression has type `Option<f64>`\n\
    \   |         |\n   |         expected `f64`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `f64`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n\n    for elem in lst {\n        sum += elem.ceil()\
    \ as isize;\n    }\n\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmpompx90o0.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as i64).sum::<isize>()\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<i64>` is not satisfied\n    -->\
    \ /tmp/tmp2luj70yu.rs:11:41\n     |\n11   |     lst.iter().map(|x| x.ceil() as\
    \ i64).sum::<isize>()\n     |                                         ^^^ the\
    \ trait `Sum<i64>` is not implemented for `isize`\n     |\n     = help: the following\
    \ other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n\
    \               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n         \
    \      <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128\
    \ as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n\
    \             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n\n    for x in lst {\n        sum += x.ceil()\
    \ as isize * x;\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `isize` by `f64`\n  --> /tmp/tmp3ggcxtro.rs:14:34\n\
    \   |\n14 |         sum += x.ceil() as isize * x;\n   |                      \
    \            ^ no implementation for `isize * f64`\n   |\n   = help: the trait\
    \ `Mul<f64>` is not implemented for `isize`\n   = help: the following other types\
    \ implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n          \
    \   <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n            \
    \ <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a\
    \ i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a isize\
    \ as Mul<isize>>\n           and 49 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3ggcxtro.rs:17:5\n   |\n10 | fn sum_squares(lst: Vec<f64>) -> isize\
    \ {\n   |                                  ----- expected `isize` because of return\
    \ type\n...\n17 |     sum\n   |     ^^^ expected `isize`, found floating-point\
    \ number\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut res = 0;\n    for n in lst {\n        let s = n.round()\
    \ as isize;\n        res += s;\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmp53sgwbcp.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum_squares = 0;\n    for num in lst.iter() {\n    \
    \    sum_squares += num * num;\n    }\n    sum_squares\n}\n\nfn main() {\n   \
    \ let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpjgo50cq5.rs:13:21\n\
    \   |\n13 |         sum_squares += num * num;\n   |                     ^^ no\
    \ implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n    for v in lst.iter() {\n        sum +=\
    \ v.to_f64() * v.to_f64();\n    }\n    sum.ceil() as isize\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_f64` found for reference `&f64` in the\
    \ current scope\n  --> /tmp/tmpt77kxg55.rs:13:18\n   |\n13 |         sum += v.to_f64()\
    \ * v.to_f64();\n   |                  ^^^^^^ method not found in `&f64`\n\nerror[E0599]:\
    \ no method named `to_f64` found for reference `&f64` in the current scope\n \
    \ --> /tmp/tmpt77kxg55.rs:13:31\n   |\n13 |         sum += v.to_f64() * v.to_f64();\n\
    \   |                               ^^^^^^ method not found in `&f64`\n\nerror[E0689]:\
    \ can't call method `ceil` on ambiguous numeric type `{float}`\n  --> /tmp/tmpt77kxg55.rs:15:9\n\
    \   |\n15 |     sum.ceil() as isize\n   |         ^^^^\n   |\nhelp: you must specify\
    \ a type for this binding, like `f32`\n   |\n11 |     let mut sum: f32 = 0.0;\n\
    \   |         ~~~~~~~~~~~~\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0599, E0689.\nFor more information about\
    \ an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut acc = f64::neg_infinity();\n    for x in lst.iter()\
    \ {\n        acc += x * x;\n    }\n    acc.round() as isize\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `neg_infinity` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpcjzm8l7p.rs:11:24\n   |\n\
    11 |     let mut acc = f64::neg_infinity();\n   |                        ^^^^^^^^^^^^\n\
    \   |                        |\n   |                        function or associated\
    \ item not found in `f64`\n   |                        help: there is an associated\
    \ function with a similar name: `is_infinite`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut res = 0.0;\n    lst.iter().for_each(|x| res += x.powf(2.0f64));\n\
    \    res.round();\n    res as isize\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `19`,\n right: `29`', /tmp/tmpqvobcvv2.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|&x| x.ceil() as isize)\n        .fold(0, |x,\
    \ y| x + y)\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmp9pydt54k.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|&x| x.ceil() as isize)\n        .sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmpp_iqjv2d.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|&x| x.round() as f64).collect::<Vec<_>>().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmpg6f8fq9z.rs:11:63\n\
    \    |\n11  |       lst.iter().map(|&x| x.round() as f64).collect::<Vec<_>>().sum::<isize>()\n\
    \    |                                                                 ^^^ `Vec<f64>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<f64>: Iterator`\n            which is required by `&mut Vec<f64>:\
    \ Iterator`\n            `[f64]: Iterator`\n            which is required by `&mut\
    \ [f64]: Iterator`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in lst {\n        sum += x.pow(2.0);\n\
    \    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `pow` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpjm9uv83e.rs:13:18\n   |\n13 |         sum += x.pow(2.0);\n\
    \   |                  ^^^ help: there is an associated function with a similar\
    \ name: `powf`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut res = 0.;\n    for elem in lst {\n        let n = elem.ceil();\n\
    \        res += n ** 2;\n    }\n    res\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmp9ifdig0t.rs:14:19\n\
    \   |\n14 |         res += n ** 2;\n   |                   ^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9ifdig0t.rs:16:5\n   |\n10 | fn sum_squares(lst:\
    \ Vec<f64>) -> isize {\n   |                                  ----- expected `isize`\
    \ because of return type\n...\n16 |     res\n   |     ^^^ expected `isize`, found\
    \ `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0614.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n    let mut sum:\
    \ isize = 0.0;\n    let mut i = 0; // iterator to traverse the list\n    for x\
    \ in lst {\n        let xi = x.ceil() as f64;\n        sum += xi * xi;\n     \
    \   i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_15tx8gd.rs:14:26\n   |\n\
    14 |     let mut sum: isize = 0.0;\n   |                  -----   ^^^ expected\
    \ `isize`, found floating-point number\n   |                  |\n   |        \
    \          expected due to this\n\nerror[E0277]: cannot add-assign `f64` to `isize`\n\
    \  --> /tmp/tmp_15tx8gd.rs:18:13\n   |\n18 |         sum += xi * xi;\n   |   \
    \          ^^ no implementation for `isize += f64`\n   |\n   = help: the trait\
    \ `AddAssign<f64>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0f64;\n    let mut index = 0;\n\n    while index\
    \ < lst.len() {\n        sum += lst[index] * lst[index];\n        index += 1;\n\
    \    }\n\n    if sum < 0.0 {\n        sum += 1.0f64;\n    }\n\n    sum.round()\
    \ as isize\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `20`,\n right: `29`', /tmp/tmp6xhzwwuy.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|v| v * v).sum::<isize>()\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmpyffnaskd.rs:11:31\n     |\n11   |     lst.iter().map(|v| v * v).sum::<isize>()\n\
    \     |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut s = 0.0_f64;\n    for f in lst.iter() {\n        s =\
    \ s + f;\n    }\n    s / 2.0\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplfg_79uu.rs:15:5\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n15 |     s / 2.0\n\
    \   |     ^^^^^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for element in lst {\n        sum += element.ceil()\
    \ as isize;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmps_1mculq.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.;\n    lst.iter().for_each(|x| sum += x.powi(2));\n\
    \    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwsv_0myl.rs:13:5\n   |\n\
    10 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n13 |     sum\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0.0;\n    for element in lst {\n        sum +=\
    \ element;\n    }\n    sum.ceil() as isize\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmp8e87o4xw.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as f64).sum()\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmpbc37601m.rs:11:41\n     |\n11   |     lst.iter().map(|x| x.ceil() as\
    \ f64).sum()\n     |                                         ^^^ the trait `Sum<f64>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: isize = 0;\n    for n in lst {\n        sum +=\
    \ n.powi(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `isize`\n  --> /tmp/tmpf__pvl7n.rs:13:13\n\
    \   |\n13 |         sum += n.powi(2);\n   |             ^^ no implementation for\
    \ `isize += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|e| round(e)).sum()\n}\n\nfn main() {\n    let\
    \ candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmptdlzrn1n.rs:11:24\n\
    \   |\n11 |     lst.iter().map(|e| round(e)).sum()\n   |                     \
    \   ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst\n        .iter()\n        .map(|x| x.ceil() as f64)\n  \
    \      .sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6x6_lg9r.rs:11:5\n   |\n\
    10 |   fn sum_squares(lst: Vec<f64>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n11 | /     lst\n12\
    \ | |         .iter()\n13 | |         .map(|x| x.ceil() as f64)\n14 | |      \
    \   .sum::<f64>()\n   | |_____________________^ expected `isize`, found `f64`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst\n        .iter()\n        .map(|x| x.ceil() as isize)\n\
    \        .sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmpzu375azr.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for v in lst {\n        sum += v * v;\n\
    \    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpqeqx1bjq.rs:13:13\n\
    \   |\n13 |         sum += v * v;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut n = 0;\n    for &x in lst {\n        n = n + x.ceil()\
    \ as isize;\n    }\n    n\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg_gm3a6y.rs:12:9\n   |\n\
    12 |     for &x in lst {\n   |         ^^    --- this expression has type `Option<f64>`\n\
    \   |         |\n   |         expected `f64`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `f64`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x * x).sum::<isize>()\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmpyzsh6lm5.rs:11:31\n     |\n11   |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \     |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for n in lst {\n        sum += n * n;\n\
    \    }\n    return sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n \
    \   assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpout6etoz.rs:13:13\n\
    \   |\n13 |         sum += n * n;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst\n        .iter()\n        .map(|x| x.ceil() as f64)\n  \
    \      .map(|x| x * x)\n        .sum()\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmpj3onkjea.rs:15:10\n     |\n15   |         .sum()\n     |          ^^^\
    \ the trait `Sum<f64>` is not implemented for `isize`\n     |\n     = help: the\
    \ following other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a\
    \ f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n \
    \              <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n        \
    \       <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16\
    \ as Sum>\n             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x as f64).collect::<Vec<f64>>()\n       \
    \ .iter()\n        .map(|x| if x.is_nan() {\n            0.0\n        } else {\n\
    \            x.ceil() as f64\n        })\n        .sum::<f64>()\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1sa2fxng.rs:11:5\n   |\n\
    10 |   fn sum_squares(lst: Vec<f64>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n11 | /     lst.iter().map(|x|\
    \ x as f64).collect::<Vec<f64>>()\n12 | |         .iter()\n13 | |         .map(|x|\
    \ if x.is_nan() {\n14 | |             0.0\n...  |\n17 | |         })\n18 | | \
    \        .sum::<f64>()\n   | |_____________________^ expected `isize`, found `f64`\n\
    \nerror[E0606]: casting `&f64` as `f64` is invalid\n  --> /tmp/tmp1sa2fxng.rs:11:24\n\
    \   |\n11 |     lst.iter().map(|x| x as f64).collect::<Vec<f64>>()\n   |     \
    \                   -^^^^^^^\n   |                        |\n   |            \
    \            cannot cast `&f64` as `f64`\n   |                        help: dereference\
    \ the expression: `*x`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0606.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
