name: HumanEval_71_triangle_area
language: rust
prompt: "/// Given the lengths of the three sides of a triangle. Return the area of\n\
  /// the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n/// Otherwise return -1\n/// Three sides make a valid triangle when the sum\
  \ of any two sides is greater \n/// than the third side.\n/// Example:\n/// triangle_area(3,\
  \ 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a: isize, b:\
  \ isize, c: isize) -> f64 {\n"
tests: "}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
  \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
  \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
  \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
  \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
  \ 2, 10), -1.0);\n}\n"
completions: ["    (a, b, c)\n        .iter()\n        .fold(0.0, |tri, (a, b, c)\
    \ => (a + b, a + c, b + c))\n        .0", "    let is_valid_triangle =\n     \
    \   a * b + c * c >= a * c;\n    if is_valid_triangle { a / b + c / b }\n    else\
    \ { -1.0 }", "    if a + b > c {\n        a\n    } else {\n        b\n    }",
  "    let area = sqrt((a*a) + (b*b) - (c*c))\n    if area > 0 {\n        area / 2.0\n\
    \    } else {\n        -1\n    }", "    let a = (a * (b - c)) as f64;\n    let\
    \ b = (b * (c - a)) as f64;\n    let c = (a * (b + c)) as f64;\n    (a + b + c)\
    \ / ((a * b).recip() as f64)", "    if a + b > c || (b + c) > a || (c + a) > b\
    \ {\n        -1\n    } else {\n        ((b * b) - ((3 * b) * c) - ((a * a) - ((3\
    \ * a) * b))) / 2.0\n    }", "    // a <= b and b <= c\n    if a <= b {\n    \
    \    if b <= c {\n            1.0\n        } else {\n            -1.0\n      \
    \  }\n    } else {\n        if c <= a {\n            -1.0\n        } else {\n\
    \            1.0\n        }\n    }", "    let mut a: f64 = f64::MIN;\n    let\
    \ mut b: f64 = f64::MIN;\n    let mut c: f64 = f64::MIN;\n    if a > b {\n   \
    \     a = b; b = c; c = a; \n    }\n    if c > b {\n        c = b; b = a; a =\
    \ c;\n    }\n    if a + b > c {\n        if b + c > a {\n            return a\
    \ + b + c;\n        } else {\n            return a + c;\n        }\n    } else\
    \ {\n        if a + c > b {\n            return a + b + c;\n        } else {\n\
    \            return a + c;\n        }\n    }", "    if a + b > c || a + c > b\
    \ || b + c > a {\n        -1\n    } else {\n        (a * b) - ((a * c) - (b *\
    \ a))\n    }", '    a + b + c as f64', "    if a > b + c || b > a + c || c > a\
    \ + b {\n        return -1;\n    }\n    if a > b {\n        return b * b - 4 *\
    \ c * a;\n    }\n    if b > c {\n        return c * c - 4 * a * b\n    }\n   \
    \ return a * a - 4 * b * b + 4 * c * c;", "    match a + b + c {\n        l if\
    \ l > c => 0.,\n        l if l > b => 0.,\n        l if l > a => 0.,\n       \
    \ l => l / 2.,\n    }", "    let area: isize = a + b + c; // total area of the\
    \ triangle\n    let area_round: f64 = area.round(); // round to the nearest whole\
    \ number\n    if area_round >= c {\n        area_round - c\n    } else {\n   \
    \     -1\n    }", "    let area = (a + b + c) * (a + b + c) / 2.0;\n    \n   \
    \ // Test for triangle form\n    if area == 0.0 {\n        return 0.0;\n    }\n\
    \    if a + b > c {\n        return area;\n    }\n    if a + c > b {\n       \
    \ return area;\n    }\n    if b + c > a {\n        return area;\n    }\n    return\
    \ 0.0;", "    if a == 0 && b == 0 && c == 0 { return 0; }\n    if a + b > c {\
    \ \n        return -1.0\n    }\n    \n    match a + b + c {\n        0 => 0.0,\n\
    \        _ => a + b + c\n    } / 2.0", "    if a + b > c && a + c > b && b + c\
    \ > a {\n        std::f64::consts::PI * a / std::f64::consts::sqrt((a * b + c)\
    \ * (a + b + c))\n    } else {\n        -1.\n    }", "    // Three sides make\
    \ a valid triangle when the sum of any two sides is greater\n    // than the third\
    \ side\n    if a + b > c || a + c > b || b + c > a {\n        return -1.0;\n \
    \   }\n    \n    let area = a + (b - c) * (a / b).pow((c / a).sqrt());\n    return\
    \ area as f64;", "    let mut triangle_area = 0.0;\n    if a + b > c {\n     \
    \   triangle_area += c - b;\n    }\n    if a + c > b {\n        triangle_area\
    \ += b - a;\n    }\n    if b + c > a {\n        triangle_area += a - b;\n    }\n\
    \    return triangle_area;", "    \n    match {\n        \n        a > 0 && b\
    \ > 0 && c > 0 => {\n            \n            \n            match (a, b) {\n\
    \                (s, e) => (a + s, b + e),\n                (_, 0) => (a + b,\
    \ b + c),\n                (s, _) => (a + s, b + c),\n            }\n        }\n\
    \        _ => -1.0,\n    }", "    // return if triangle is invalid and prints\
    \ error\n    if a + b + c <= 0 {\n        println!(\"Invalid triangle side lengths.\"\
    );\n        -1\n    } else {\n        // add up all sides\n        let sides =\
    \ a + b + c;\n        // return the area rounded up to 2 digits\n        let area\
    \ = sides / 2.0\n        return area as f64;\n    }", "    if a + b + c > b +\
    \ c { \n        -1\n    } else {\n        ((b * b) - (a * c)) / (2.0 * a)\n  \
    \  }", "    let mut total: f64 = 0.0;\n    for &s in &[a, b, c] {\n        if\
    \ s > 0 {\n            total += s;\n        }\n    }\n    if total < a || total\
    \ < b {\n        return -1.0;\n    }\n    total", "    // return -1 if sum of\
    \ three sides is greater than the third side\n    if a + b > c {\n        return\
    \ -1.0;\n    }\n\n    // else return area of the triangle \n    return (a * b\
    \ * c) / (a + b + c);", "    if a + b > c && a + c > b && b + c > a {\n      \
    \  let mut s = (a + b) * 2.0 + c;\n        let mut u = a + (a + c) / 2.0;\n  \
    \      let mut v = (b + c) / 2.0;\n        let mut w = (b + a) / 2.0;\n      \
    \  while u > v && u > w {\n            s = s + u * u;\n            u = u - v;\n\
    \            v = v - w;\n            w = w - u;\n        }\n        if u > v {\n\
    \            s = s + u * v;\n            w = w + v - u;\n        } else {\n  \
    \          s = s + v * w;\n            v = v - w;\n        }\n        if s > 0.0\
    \ && s < 1.0 {\n            return s * 100.0;\n        }\n        return -1.0;\n\
    \    }\n    -1.0;", "    match triangle_check(a, b, c){\n        Ok(_) => a /\
    \ b * c / b,\n        Err(_) => -1.0,\n    }", "    // Return 0 if all sides are\
    \ equal\n    // Return 0 if all sides are zero\n    // Return 1 if all sides are\
    \ greater than the third side\n    \n    match a > 0 && b > 0 && c > 0 { \n  \
    \      true => \n            match b > c {\n                true => \n       \
    \             match a > c {\n                        true => c * c + (b + a) *\
    \ b + (a + c) * a,\n                        false => 0\n                    },\n\
    \                false => 0\n            },\n        false => 0\n    }", "   \
    \ if a + b > c {\n        0.0\n    } else {\n        let d = b - c;\n        d\
    \ * (d - a) * (c - b)\n    }", "    let mut sum = a * a + b * b + c * c;\n   \
    \ if sum > c * c {\n        return -1.0;\n    }\n    else if sum < a * a || sum\
    \ < b * b {\n        return 0.0;\n    }\n    return sqrt {sum / 2.0};", "    let\
    \ mut s = a + b + c;\n    if s < 0 {\n        return -1;\n    }\n    s / 4", " \
    \   if a + b + c < 3 {\n        return -1.0;\n    }\n    let area = (a * b + c)\
    \ / 2.0;\n    area", "    // Validate the sums of the sides are valid\n    if\
    \ a + b > c || a + c > b || b + c > a {\n        return -1;\n    }\n\n    // Return\
    \ the area of the triangle (rounding to 2 decimal points)\n    (a + b + c) * 0.5",
  "    let mut s = 0.0;\n    if a + b > c {\n        s = s + triangle_area(a, b, c);\n\
    \    }\n    if a + c > b {\n        s = s + triangle_area(a, c, b);\n    }\n \
    \   if b + c > a {\n        s = s + triangle_area(b, c,  a);\n    }\n    s", " \
    \   match b - a {\n        0 | a => 1.0 * (a + b + c) / 4.0,\n        _ => 0.0,\n\
    \    }", "    if a + b > c {\n        triangle_area(b, c, a)\n    } else {\n \
    \       if a + c > b {\n            triangle_area(c, a, b)\n        } else {\n\
    \            (b * b) - ((a * a) + (c * c))\n        }\n    }", "    if a + b >\
    \ c { \n        (a * b).round()\n    } else {\n        ((c * a) + b).round()\n\
    \    }", "    match a > c && b > c && a > b {\n        true => a + b + c,\n  \
    \      false => -1.0,\n    }", "    let side1 = b - a;\n    let side2 = c - a;\n\
    \    let side3 = side1 + side2;\n    if side1 == 0 || side2 == 0 || side3 == 0\
    \ {\n        return -1;\n    }\n    let mut area: f64 = 0.0;\n    let mut area2\
    \ = 0.0;\n    let mut area3 = 0.0;\n    for side in 0..3 {\n        let side =\
    \ side as isize;\n        let square = (side*side) + a*side;\n        area +=\
    \ square;\n        area2 += square;\n        area3 += square;\n    }\n    if area3\
    \ >= side3 * side3 && area2 > side2 * side2 {\n        area = round(sqrt(area\
    \ / side3));\n    }\n    return area;", "    let mut area: f64 = 0.0;\n    for\
    \ i in 0..2 {\n        for j in 0..2 {\n            for k in 0..2 {\n        \
    \        let side = a * (i + j + k);\n                if side > b * c {\n    \
    \                break;\n                }\n                if side < b * c {\n\
    \                    continue;\n                }\n                let mut tri\
    \ = 0.0;\n                for m in 0..2 {\n                    let side = c *\
    \ i + m * (j + k);\n                    if side > b * c {\n                  \
    \      break;\n                    }\n                    tri += side * side;\n\
    \                    if side < b * c {\n                        continue;\n  \
    \                  }\n                    break;\n                }\n        \
    \        area += tri / 4.0;\n                if area > 0.0 {\n               \
    \     area = f64::ceil(2.0 / 3.0).powf(area as f64);\n                }\n    \
    \            break;\n            }\n        }\n    }\n    area", "    let mut\
    \ a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\n    loop {\n \
    \       match a + b + c {\n            3 => return a + b + c,\n            _ =>\
    \ return -1, // one of the sides doesn't fit the triangle\n        }\n\n     \
    \   match a - b - c {\n            3 => return a + b + c,\n            _ => return\
    \ -1, // one of the sides doesn't fit the triangle\n        }\n\n        match\
    \ a - b + c {\n            3 => return a + b + c,\n            _ => return -1,\
    \ // one of the sides doesn't fit the triangle\n        }\n\n        match a +\
    \ b - c {\n            3 => return a + b + c,\n            _ => return -1, //\
    \ one of the sides doesn't fit the triangle\n        }\n\n        match a + b\
    \ + c {\n            3 => return a + b + c,\n            _ => return -1, // one\
    \ of the sides doesn't fit the triangle\n        }\n\n        match a - b - c\
    \ {\n            3 => return a + b + c,\n            _ => return -1, // one of\
    \ the sides doesn't fit the triangle\n        }\n\n        a = a / 2;\n      \
    \  b = b / 2;\n        c = c / 2;\n    }", "    let side_sum = (a * b) + c * c;\n\
    \    if side_sum == 0 {\n        return 0.0;\n    }\n    let area = side_sum /\
    \ 2.0;\n    let rounded_area = round(area);\n    if rounded_area < area {\n  \
    \      rounded_area\n    } else {\n        -1\n    }", "    use std::f64;\n\n\
    \    fn clamp<T>(x: T) -> T { std::cmp::min(std::cmp::max(x,0), std::numeric_limits<T>::max())\
    \ as T }\n\n    let a = clamp(a);\n    let b = clamp(b);\n    let c = clamp(c);\n\
    \    let s = (a + b + c).sqrt();\n\n    if a == 0 || b == 0 || c == 0 || (s >\
    \ a && s > b && s > c) { return -1; }\n    else { return (s * s).ceil() as f64\
    \ }", "    let mut area: f64 = 0.0;\n    if a + b > c { area = -1.0 }\n    else\
    \ {\n        area = (a * b) / c;\n    }\n    area = area.round() as f64", "  if\
    \ a <= 0 || b <= 0 || c <= 0 {\n    return -1;\n  }\n  if a + b > c || a + c >\
    \ b || b + c > a {\n    return -1;\n  }\n  let a: f64 = a / c;\n  let b: f64 =\
    \ b / c;\n  let c: f64 = c / c;\n  let s1: f64 = a + b + c;\n  let s2: f64 = a\
    \ - b - c;\n  let s3: f64 = a - b + c;\n  if s1 < s2 == s3 {\n    return s1;\n\
    \  }\n  else if s2 < s1 == s3 {\n    return s2;\n  }\n  else {\n    return s3;\n\
    \  }", "    match a > b {\n        true => b - a,\n        false => c - a,\n \
    \   }\n    match b > c {\n        true => c - b,\n        false => a - b,\n  \
    \  }\n    match c > a {\n        true => a - c,\n        false => b - c,\n   \
    \ }", "    let sum = a + b + c;\n    if sum < c {\n        sum\n    } else {\n\
    \        c - (sum % c)\n    }", "    let mut sum = f64::INFINITY;\n    for i in\
    \ 0..3 {\n        if b > i {\n            sum += (a * b) / ((b - i) * (b - i));\n\
    \        }\n        if c > i {\n            sum += (a * c) / ((c - i) * (c - i));\n\
    \        }\n    }\n    if sum > a * b {\n        sum = a * b;\n    }\n    sum.round()\
    \ as f64", "    let mut area: f64 = 0.0;\n    let mut area_sum = 0.0;\n    \n\
    \    // calculate the area of the triangle\n    area = ((b * b) - (4 * a * c))\n\
    \    \n    // if the area is positive \n    if area >= 0.0 {\n        // get the\
    \ sum of each side\n        area_sum = (a + b + c); \n        // if the sum of\
    \ each side is greater than the area of the triangle \n        if area_sum > area\
    \ {\n            area = area_sum;\n        }\n    }\n    return area;", "    if\
    \ a + b > c && a + c > b && b + c > a {\n        std::mem::uninitialized().unwrap().f64()\n\
    \    } else {\n        -1\n    }", "    let area = (b * b) - 4.0 * a * (c + a);\n\
    \    if area >= 0.0 {\n        return area/2;\n    } else {\n        return -1.0;\n\
    \    }", "    // TODO: use mathematical formula\n    \n    let ab = a * b\n  \
    \  let bc = b * c\n    let ac = a * c\n    \n    if ab > bc || ab > ac {\n   \
    \     return -1.0;\n    } else {\n        return ab + bc + ac\n    }", "    let\
    \ a = a / 2.0; \n    let b = b / 2.0; \n    let c = c / 2.0; \n    if a + b >\
    \ c {\n        return -1\n    } else {\n        let d = (b * b) - (4 * a * c);\n\
    \        if d < 0.0 {\n            return -1.0\n        } else {\n           \
    \ return std::sqrt(d) \n        }\n    }", "    if a <= 0 || b <= 0 || c <= 0\
    \ || b == c {\n        return -1;\n    }\n    \n    (a * a + b * b + c * c - a\
    \ * b - 2 * b * c) / (2.0 * a * b)", "    if a + b + c < 3 {\n        return -1;\n\
    \    }\n    let mut area: f64 = 0.0;\n\n    for _ in 0..3 {\n        let x: f64\
    \ = (a + (b * 1.0))/(c * 1.0);\n        let y: f64 = (b + (c * 1.0))/(a * 1.0);\n\
    \        area += x * y;\n        \n        if area > 1.0 {\n            return\
    \ -1.0;\n        }\n    }\n\n    area", '    (a * b + c) / 2.0', "    let mut\
    \ area_sum = f64::ZERO;\n    for a in 0..a {\n        for b in 0..b {\n      \
    \      for c in 0..c {\n                if a + b > c {\n                    break;\n\
    \                }\n                area_sum += pow((pow(b, 2) - pow(a, 2) + pow(c,\
    \ 2) - 1), 0.5);\n            }\n        }\n    }\n    area_sum / pow(a * c, 0.5)",
  '    (a * b + c).abs() / (a * a + b * b).sqrt()', "    if a == 0 || b == 0 || c\
    \ == 0 {\n        return -1.0;\n    }\n    let mut tri_area = 0.0;\n    for i\
    \ in 0..3 {\n        tri_area += pow(a, (i - 0.5)) * pow(b, i);\n    }\n    tri_area\
    \ += pow(c, 0.5);\n    tri_area = f64::from(tri_area);\n    tri_area < 0 ? -1.0\
    \ : tri_area", "    if a + b > c {\n        -1\n    } else if a + c > b {\n  \
    \      -1\n    } else {\n        ((a + b) as f64) / ((a + c) as f64) as f64\n\
    \    }", "    let mut area: f64 = 0.0;\n\n    if a >= c && b >= c {\n        //\
    \ all three sides are greater than or equal to each other\n        let mut sum:\
    \ f64 = 0.0;\n        sum += a;\n        sum += b;\n        sum += c;\n      \
    \  // check if triangle area is valid\n        if sum >= 6.0 {\n            area\
    \ = sum.pow(1.0 / 3.0);\n        } else {\n            area = -1.0;\n        }\n\
    \    } else {\n        let mut sum: f64 = 0.0;\n        sum += a;\n        sum\
    \ += b;\n        sum += c;\n        // check if triangle area is valid\n     \
    \   if sum >= 6.0 {\n            area = sum.pow(1.0 / 3.0);\n        } else {\n\
    \            area = -1.0;\n        }\n    }\n\n    if area < -1.0 {\n        area\
    \ = -1.0;\n    }\n\n    if area > 1.0 {\n        area = 1.0;\n    }\n\n    area",
  "    if a + b > c && a + c > b && b + c > a { \n        return (a * b * c) / (a\
    \ * b + c * a + b * c);\n    } else {\n        return -1;\n    }", "    if a +\
    \ b > c || a + c > b || b + c > a {\n        -1.0;\n    } else {\n        ((a\
    \ + b + c) * 0.25).round() as f64\n    }", "    let mut area = 0;\n    if a +\
    \ b > c {\n        if b > c {\n            area += (b + c) / 2;\n            area\
    \ += a / 2;\n            area += c / 2;\n        } else {\n            area +=\
    \ (a + b) / 2;\n            area += a / 2;\n            area += b / 2;\n     \
    \   }\n    } else {\n        if b > c {\n            area += (a + c) / 2;\n  \
    \          area += a / 2;\n            area += c / 2;\n        } else {\n    \
    \        area += a / 2;\n            area += b / 2;\n            area += c / 2;\n\
    \        }\n    }\n    area /= 2", "    let sum = a + b + c;\n\n    if sum < 4\
    \ {\n        -1\n    } else {\n        (sum - a + b - c) / (2.0 * a)\n    }",
  "    if a + b > c {\n        return -1.;\n    }\n    let mut a2 = 0.;\n    let mut\
    \ b2 = 0.;\n    let mut c2 = 0.;\n    let mut s = 0.;\n    for i in 0..a {\n \
    \       a2 += i;\n    }\n    for i in 0..b {\n        b2 += i;\n    }\n    for\
    \ i in 0..c {\n        c2 += i;\n    }\n    s = a2 * b2 + c2 * a2 + b2 * c2;\n\
    \    if s > 0. {\n        return s / sqrt(a * c + b * b);\n    }\n    return -1.;",
  "    // if a>b+c then a,b,c are colinear\n    if a+b+c < a {\n        return -1;\n\
    \    }\n\n    // if a<b+c then a,b,c are colinear\n    if a+b+c > b {\n      \
    \  return -1;\n    }\n\n    // if b<a+c then a,b,c are colinear\n    if a+b+c\
    \ < b+c {\n        return -1;\n    }\n\n    // if a<b+c and b<a+c then a,b,c are\
    \ colinear\n    if a+b+c < b+c {\n        return -1;\n    }\n\n    // if a>b+c\
    \ and b<a+c then a,b,c are colinear\n    if a+b+c > b+c {\n        return -1;\n\
    \    }\n\n    let area = (a * b + c * a * b) / (4.0 * std::sqrt(a * b + c * a\
    \ * b));\n    if area < 0 {\n        return -1;\n    }\n    return area", "  \
    \  let side1 = b * 2 - c;\n    let side2 = a * 2 - b;\n    let side3 = a * 2 -\
    \ c;\n    if side1 + side2 > side3 {\n        // Valid triangle\n        let area\
    \ = side1 / (side1 + side2);\n        \n        if area > 1 {\n            area.round()\
    \ as f64\n        } else {\n            -1.0 as f64\n        }\n    } else {\n\
    \        -1.0 as f64\n    }", "    let side1: f64 = a + b + c;\n    if side1 <\
    \ 3 {\n        return -1.0;\n    }\n\n    let side2: f64 = a - b - c;\n    if\
    \ side2 < 3 {\n        return -1.0;\n    }\n\n    let side3: f64 = a - b + c;\n\
    \    if side3 < 3 {\n        return -1.0;\n    }\n\n    let area = (a * b * c)\
    \ / (side1 * side2 * side3);\n    // rounding up to the 2 decimal points if area\
    \ is greater than 1.0\n    area.round();\n    area", '    (a + b + c).abs() /
    3.0', "  use std::cmp::Ordering;\n\n  if a + b > c {\n    if a + c > b {\n   \
    \   return (a * b) / c;\n    }\n    if c + b > a { \n      return (c + a) / b;\n\
    \    }\n  }\n  if a + c > b {\n    if b + c > a { \n      return (b + a) / c;\n\
    \    }\n    if a + b > c { \n      return (b + c) / a;\n    }\n  }\n  if b + c\
    \ > a {\n    if a + c > b { \n      return (a + b) / c;\n    }\n    if b + a >\
    \ c { \n      return (a + c) / b;\n    }\n  }\n  if c + a > b {\n    if a + b\
    \ > c { \n      return (a + b) / c;\n    }\n    if c + b > a { \n      return\
    \ (c + a) / b;\n    }\n  }\n  if a + b > c && b + c > a && c + a > b && a + c\
    \ > b {\n    (a + b) * (b + c) * (c + a) as f64\n  }\n  else {\n    -1\n  }",
  "    match triangle_condition(a, b, c) {\n        true => 1.0,\n        false =>\
    \ -1.0,\n    }", "    match (a, b ,c) {\n        (0 .. 2) => (a + b + c) / 2,\n\
    \        (2 .. 3) => (a + b + c) / 2,\n        _ => -1\n    }", "    let mut a\
    \ = a < b + c ? a : b + c;\n    let mut b = a < c + b ? a : c + b;\n    let mut\
    \ c = b < a + c ? b : a + c;\n    a + b + c", "    let mut area_sum: f64 = a +\
    \ b + c;\n    if area_sum > c {\n        area_sum -= c;\n    }\n    area_sum",
  "    let mut a = a.round();\n    let mut b = b.round();\n    let mut c = c.round();\n\
    \    \n    if a + b > c {\n        if a + c > b {\n            a += c;\n     \
    \       c += b;\n            b += a;\n        } else {\n            a += b;\n\
    \            b += c;\n            c += a;\n        }\n    }\n    \n    a /= 2;\n\
    \    b /= 2;\n    c /= 2;\n    \n    if a + b > c {\n        a + b + c\n    }\
    \ else {\n        -1\n    }", "    match a + b + c {\n        c if a < b || b\
    \ < a || c < a => {\n            std::f64::EPSILON * std::f64::from((a + b + c)\
    \ / 2.0).sqrt()\n        }\n        _ => -1.0\n    }", "    assert!(a + b + c\
    \ > 0);\n    if a + b > c { a + b - c } else { c - a + b }", "  if a + b > c ||\
    \ a + c > b || b + c > a {\n    return -1.0;\n  }\n  \n  a*a + b*b + c*c ", " \
    \   if a + b > c {\n        1.0\n    } else if b + c > a {\n        1.0\n    }\
    \ else if c + a > b {\n        1.0\n    } else {\n        (b * b) - (a * c)\n\
    \    }", "    let ab = a + b;\n    let ac = a + c;\n    let bc = b + c;\n    let\
    \ min = ab < ac && bc < ac ? ab : bc;\n    let max = ab > bc ? ab : bc;\n    min\
    \ / (max - min) as f64", "    if a + b > c {\n        return -1;\n    } else if\
    \ a + c > b {\n        return -1;\n    } else if b + c > a {\n        return -1;\n\
    \    } else {\n        return triangle_perimeter(a, b, c) / 2.0;\n    }", "  \
    \  let mut area_sum = 0;\n\n    // Calculate the area\n    if a + b > c {\n  \
    \      area_sum += (a * b) / (c * c) as f64;\n    } else if a + c > b {\n    \
    \    area_sum += (a + c) * (b - a) / (c * c) as f64;\n    } else {\n        area_sum\
    \ += (a + b) * (c + b - a) / (c * c) as f64;\n    }\n\n    // Round the area to\
    \ 2 decimal places\n    area_sum.round()", "    // Calculate the area of the triangle\
    \ when two sides are equal\n    let area_equal = a + b + c == 0;\n\n    if area_equal\
    \ {\n        // Calculate the area of the triangle when one side is equal\n  \
    \      let area_one = (a + b) * (b + c) * (a + c) == 0;\n\n        // Calculate\
    \ the area of the triangle when all sides are equal\n        let area_all = (a\
    \ * b) * (b * c) * (c * a) == 0;\n\n        // Calculate the area of the triangle\
    \ when all sides are equal\n        let area_all_rounded = (a * b * c) / (f64::from(a\
    \ + b + c));\n\n        area_equal || area_one || area_all || area_all_rounded\n\
    \    } else { \n        // Calculate the area of the triangle when all sides are\
    \ equal\n        let area_all = (a * b) * (b * c) * (a * c) == 0;\n\n        //\
    \ Calculate the area of the triangle when all sides are equal\n        let area_all_rounded\
    \ = (a * b * c) / (f64::from(a + b + c));\n\n        area_all || area_all_rounded\n\
    \    }", "    let area = (a * b) - (a * c);\n    if area < 0 {\n        return\
    \ -1.0;\n    } else {\n        return std::f64::from(sqrt(area));\n    }", " \
    \   use std::f64;\n    if a + b > c {\n        return -1.0;\n    }\n    else if\
    \ a > b {\n        return (a * b) / c\n    }\n    else {\n        return (a +\
    \ (b - c) * a) / c\n    }", "    let mut a = a; // local variable a to be more\
    \ readable.\n    let mut b = b; // local variable b to be more readable.\n   \
    \ let mut c = c; // local variable c to be more readable.\n    if a + b > c {\n\
    \        if a + c > b {\n            return c / 2 * (a + b);\n        }\n    \
    \    return -c/2 * (a - b);\n    }\n    if a + c > b {\n        return b /2 *\
    \ (a + c);\n    }\n    return -a/2 * (b - c);", "    use std::f64;\n\n    // Check\
    \ for valid triangle \n    if a + b > c || a + c > b || b + c > a {\n        return\
    \ -1.0;\n    }\n\n    // Calculate the area of the triangle\n    let area = ((a\
    \ + b) * (c - a) * (b - c));\n\n    // Round the result to two decimal places\
    \ if needed\n    if area < 1.0 {\n        return area * 1000.0;\n    }\n\n   \
    \ area", '    a.powi(2) + b.powi(2) + c.powi(2) - a.powi(2) - b.powi(2) - c.powi()',
  "    match a + b + c {\n        0 => 0.0, // Triangle is degenerate\n        a if\
    \ b > c => 1.0,\n        a if c > b => 0.5,\n        b => 0.0,\n        c => 0.0,\n\
    \    }", "    if a + b > c {\n        return -1\n    }\n    return ((a * b) -\
    \ ((a * c) - (b * c))) / 2.0", "    let mut s = a + b + c;\n    if s > 0 {\n \
    \       let mut area_sum = s + s + s;\n        area_sum /= 2.0;\n        return\
    \ area_sum;\n    } else {\n        return -1.0;\n    }", '    (a + b + c) as f64
    / 3', "    // check input values\n    if a <= 0 || b <= 0 || c <= 0 ||\n     \
    \   a + b < c || b + c < a || c + a < b {\n        return -1.0;\n    }\n    let\
    \ d = (a + b + c) / 2.0f;\n    \n    let mut s: f64 = 0.0;\n    if a < b {\n \
    \       s += (a * d) / 2.0;\n    }\n    if b < c {\n        s += (b * d) / 2.0;\n\
    \    }\n    if c < a {\n        s += (c * d) / 2.0;\n    }\n    if a + b + c >\
    \ d {\n        s += (d * (a + b - c)) / 2.0;\n    }\n    if b + c + a > d {\n\
    \        s += (d * (b + c - a)) / 2.0;\n    }\n    if c + a + b > d {\n      \
    \  s += (d * (c + a - b)) / 2.0;\n    }\n    if a + b + c < d {\n        s +=\
    \ (d * (a - b + c)) / 2.0;\n    }\n    if b + c + a < d {\n        s += (d * (b\
    \ - c + a)) / 2.0;\n    }\n    if c + a + b < d {\n        s += (d * (c - a +\
    \ b)) / 2.0;\n    }\n    return s;", "    // Check base case\n    if a + b > c\
    \ || b + c > a || c + a > b {\n        return -1.0;\n    }\n    // If this point\
    \ is on one of the two sides of the triangle, return its area\n    if a + b >\
    \ c {\n        let a = a - c;\n        let b = b - c;\n        let c = c - a;\n\
    \        return ((a + b + c) / 2);\n    }\n    if b + c > a {\n        let a =\
    \ a - b;\n        let b = b - c;\n        let c = c - a;\n        return ((a +\
    \ b + c) / 2);\n    }\n    let a = a - b;\n    let b = b - c;\n    let c = c -\
    \ a;\n    return (a + b + c) / 2;", "    if a + b > c {\n        -1\n    } else\
    \ if b + c > a {\n        -1\n    } else if a + c > b {\n        -1\n    } else\
    \ {\n        (b * b) - ((a * a) - (b * b))\n    }", '    (a * b) - (c * b)', " \
    \   if a + b > c {\n        return -1;\n    }\n    if b + c > a {\n        return\
    \ -1;\n    }\n    if c + a > b {\n        return -1;\n    }\n    let mut area\
    \ = 0.;\n    area = area + (b * b);\n    area = area + (c * c);\n    area = area\
    \ + (a * a);\n    area = area / (a * b * c);\n    return area;", "    if a + b\
    \ > c && a + c > b && b + c > a {\n        (a * b * c) / (a + b + c)\n    } else\
    \ {\n        -1\n    }", '    a + b > c && a + c > b && b + c > a ? b * b + c
    * c - (a + b + c) * a / 3 : -1.0', "    let ac = a * c;\n    let bc = b * c;\n\
    \    let ac_bc = ac + bc;\n    let ab = a * b\n    let ab_bc = ab + bc;\n    if\
    \ ac_bc >= ab_bc {\n        ac_bc / ab_bc\n    } else {\n        -1\n    }", " \
    \   use std::sqrt;\n    \n    // Check for invalid triangle\n    if a < 0 || b\
    \ < 0 || c < 0 {\n        return -1.0;\n    }\n    \n    // Check for triangles\n\
    \    if a + b > c || a + c > b || b + c > a {\n        return -1.0;\n    }\n \
    \   \n    // Find possible area with double precision numbers\n    let area =\
    \ 0.5 * f64::sqrt(f64::pow(a as f64, 2) + f64::pow(b as f64, 2));\n    \n    //\
    \ Round if possible\n    if area < std::f64::EPSILON {\n        area = area.round();\n\
    \    }\n    \n    area", "    if a + b > c {\n        return -1\n    }\n    \n\
    \    if a + c > b {\n        return -1\n    }\n\n    if b + c > a {\n        return\
    \ -1\n    }\n\n    a * b * c", "    if a + b > c {\n        if b > c {\n     \
    \       return triangle_area(b, c, a)\n        } else {\n            return triangle_area(a,\
    \ c, b)\n        }\n    } else {\n        if c > b {\n            return triangle_area(a,\
    \ c, b)\n        } else {\n            return sqrt(a * a + b * b + c * c) / 2.0\n\
    \        }\n    }", "    // The sum of the sides is greater than the third side,\
    \ so the triangle is invalid\n    if a + b > c {\n        return -1;\n    }\n\n\
    \    // Calculate area of triangle\n    let area = (a + b + c) / 2\n    \n   \
    \ // Round to 2 decimal points\n    let rounded = area.round()\n    \n    // Return\
    \ result\n    rounded", "    if a + b > c || b + c > a || c + a > b {\n      \
    \  return -1.0;\n    }\n    a + b + c", "    if a + b > c {\n        -1\n    }\
    \ else {\n        a + b + c\n    }", "    match a, b, c {\n        0 => 0.0,\n\
    \        1 => 1.0,\n        _ => match a + b + c {\n            4 => a,\n    \
    \        5 => b,\n            6 => c,\n            _ => return -1.0,\n       \
    \ }\n    }", "    if a + b > c {\n        a + b - c\n    } else {\n        if\
    \ b > c {\n            b - c\n        } else {\n            0.0\n        }\n \
    \   }", "    match a + b + c {\n        a > b && a > c && b > c => a + b + c,\n\
    \        _ => -1.0,\n    }", "    if a + b > c {\n        0.0\n    } else {\n\
    \        0.5 * (a + b - c)\n    }", "    if a + b > c && a + c > b && b + c >\
    \ a && a + b + c != 0 {\n        (b * b - a * a) / 2.0 as f64\n    } else {\n\
    \        -1\n    }", "    if a + b > c {\n        -1 \n    } else {\n        a\
    \ + b + c\n    }", "    let mut area = 0.0;\n\n    area = if a + b > c {\n   \
    \     a + b + c\n    } else if a + c > b {\n        a + c + b\n    } else {\n\
    \        a + b + c\n    };\n\n    if area > 0.0 {\n        return area.round(2);\n\
    \    } else {\n        return -1.0;\n    }", "    if a + b > c {\n        -1\n\
    \    } else {\n        let area_a = a * b\n        let area_b = (b * c) - area_a\n\
    \        let area_c = (a * c) - area_a\n        area_a\n            + (area_a\
    \ / 2)\n            + area_b\n            - (area_b / 2)\n            - (area_c\
    \ / 2)\n    }", '    a + b + c > c ? (a + b + c) - c : -1', "    \n    let mut\
    \ area_sum = 0.0; // sum of all 3 sides\n    \n    // if sum of any two sides\
    \ are greater than 3rd side then triangle is invalid\n    if a + b > c {\n   \
    \     return -1.0;\n    }\n    if a + c > b {\n        return -1.0;\n    }\n \
    \   if b + c > a {\n        return -1.0;\n    }\n\n    // if sum of all 3 sides\
    \ are equal to each other then triangle is valid\n    area_sum += a;\n    area_sum\
    \ += b;\n    area_sum += c;\n    \n    if area_sum == c {\n        return area_sum;\n\
    \    }\n\n    // otherwise triangle is invalid\n    return -1.0;", "    let mut\
    \ s = a + b + c;\n    if s <= 0 {\n        return -1.0;\n    }\n    let mut s\
    \ = s / 2;\n    s = s * (s - a) * (s - b) * (s - c);\n    if s < 0.0 {\n     \
    \   s = 0.0;\n    } else {\n        s = s / 3.0;\n    }\n    s * 0.5", "    let\
    \ mut triangle_area = 0.;\n    if a + b > c {\n        triangle_area = b * b -\
    \ 4 * a * c;\n    }\n    if b > c {\n        triangle_area = b * b - 4 * a * c;\n\
    \    }\n    if c > a {\n        triangle_area = b * b - 4 * a * c;\n    }\n  \
    \  triangle_area /= 2.0;\n    if triangle_area > 0. {\n        triangle_area =\
    \ f64::from(triangle_area);\n    }\n    triangle_area", "    let mut area = f64::MAX;\n\
    \    let mut side1 = a + b;\n    let mut side2 = b + c;\n    let mut side3 = c\
    \ + a;\n    if side1 > side2 && side1 > side3 {\n        area = side1.sqrt();\n\
    \    } else if side2 > side3 {\n        area = side2.sqrt();\n    } else {\n \
    \       area = side3.sqrt();\n    }\n    area = area.round();\n    area = area.round()\
    \ / 3.;\n    if area < 0.0 {\n        return -1.;\n    }\n    area", "    // check\
    \ for invalid inputs\n    if a + b > c || a + c > b || b + c > a {\n        return\
    \ -1.0;\n    }\n    // calculate area of triangle with two sides lengths a, b\
    \ and c\n    let mut area, a, b, c =\n        (a * b * c) as f64, b - a, c - b,\
    \ a - c;\n    // check for a possible overflow\n    if a > c {\n        a = c;\n\
    \        area += b * c;\n    }\n    if b > c {\n        b = c;\n        area +=\
    \ a * c;\n    }\n    if c > a {\n        c = a;\n        area += b * c;\n    }\n\
    \    // return the result\n    area / f64::sqrt((a * b + c * a + b * c + a * b)\
    \ / (a * b + c * a + b * c))", '    (a+b+c).is_greatest() ? ((a+b+c).sqrt()).round()
    as f64 : -1.0 ', "  if a + b > c {\n    -1\n  } else if a + c > b {\n    -1\n\
    \  } else {\n    a * b * c / sqrt((a * b).round() as f64)\n  }", "    let mut\
    \ s = 0.0;\n    if a + b > c {\n        s = c * a * 0.5;\n    } else {\n     \
    \   if a + c > b {\n            s = b * c;\n        } else {\n            s =\
    \ a * c * 0.5;\n        }\n    }\n    if s > 0.0 {\n        return s.ceil() as\
    \ f64;\n    }\n    return -1.0;", "    a + b + c > c ? c + b + a \n\t: a + c +\
    \ b \n\t: -1", "    let area = (a * b) / (c * c);\n    if area > 0.0 {\n     \
    \   let rounded = round(area as f64 * 100);\n        if rounded > 100.0 {\n  \
    \          return -1;\n        }\n        return rounded as f64;\n    }\n    return\
    \ -1.0;", "    match a + b + c {\n        (a, b, c) => a + b + c <= a + c ? a\
    \ / b + c / b : -1.0\n    }", "    if a + b > c && a + c > b && b + c > a {\n\
    \        (b * b) - (a * c)\n    } else {\n        -1\n    }", "    let area_1\
    \ = if a + b > c { a } else { b };\n    let area_2 = if a + c > b { a } else {\
    \ c };\n    let area_3 = if b + c > a { b } else { c };\n    area_1 + area_2 +\
    \ area_3 / (a + b + c)", "    let mut area_sum = 0.0;\n\n    if a > b {\n    \
    \    let mut min_a = a;\n        min_a = min_a.min(&b).min(&c).unwrap_or(-1);\n\
    \        area_sum += min_a * min_a;\n    }\n\n    if b > c {\n        let mut\
    \ min_b = b;\n        min_b = min_b.min(&c).min(&a).unwrap_or(-1);\n        area_sum\
    \ += min_b * min_b;\n    }\n\n    if c > a {\n        let mut min_c = c;\n   \
    \     min_c = min_c.min(&a).min(&b).unwrap_or(-1);\n        area_sum += min_c\
    \ * min_c;\n    }\n\n    area_sum", "    let mut s = (a + b + c) / 2.0; \n   \
    \ if s >= a {\n        if b > c {\n            s -= 1;\n        }\n    } else\
    \ {\n        if b > c {\n            s += 1;\n        }\n    }\n    if s > c {\n\
    \        s -= 1;\n    }\n    s * s", '    (a * a + b * b + c * c) /2.0', "   \
    \ // if any of a, b and c is negative, then we know that they are not all positive\n\
    \    // so it's sufficient to just return -1 to indicate that the triangle isn't\
    \ valid\n    if a < 0 || b < 0 || c < 0 {\n        return -1.0;\n    }\n    let\
    \ sides = a + b + c;\n    // if sides is zero, they don't form a triangle\n  \
    \  if sides == 0 {\n        return -1.0;\n    }\n    // if all sides are positive,\
    \ we know that they form a triangle\n    if sides > 0 {\n        let area_1 =\
    \ (a + b) / sides;\n        let area_2 = ((a + c) / sides) - (area_1 * area_1);\n\
    \        let area_3 = ((b + c) / sides) - (area_1 * area_2);\n        // area\
    \ of triangle formed is sides times area of hypotenuse times area of right triangle\n\
    \        // so return area_1 * area_2 * area_3\n        return area_1 * area_2\
    \ * area_3;\n    }\n    // if all sides are negative, then we have an invalid\
    \ triangle\n    return -1.0;", "    assert!(a + b > c && a + c > b && b + c >\
    \ a);\n    assert!(a + b > c && a + c > b && b + c > a);\n    \n    match a +\
    \ b + c {\n        c => c,\n        b => b,\n        c => c,\n        a => a,\n\
    \        b => b\n    }", '    (a + b + c) as f64 / 3.0 ', "    \n    if a + b\
    \ > c || a + c > b || b + c > a || a + b + c < 3 {\n        return -1.0;\n   \
    \ }\n    \n    let mut a = a as f64;\n    let mut b = b as f64;\n    let mut c\
    \ = c as f64;\n    \n    if a + b > c {\n        a -= (b - c);\n        b -= a;\n\
    \        c -= (a);\n    }\n    \n    if a + c > b {\n        b -= (c - b);\n \
    \       c -= (b);\n    }\n    \n    if b + c > a {\n        a -= (c - a);\n  \
    \      c -= (a);\n    }\n    \n    let mut square_of_a_b = std::pow(a, 2.0) +\
    \ std::pow(b, 2.0) as f64;\n    let mut square_of_c_a = std::pow(c, 2.0) + std::pow(a,\
    \ 2.0) as f64;\n    \n    if square_of_a_b >= square_of_c_a {\n        square_of_a_b\
    \ -= square_of_c_a;\n        square_of_c_a -= square_of_a_b;\n    }\n    \n  \
    \  let mut square_of_a_b = std::pow(a, 2.0) + std::pow(b, 2.0) as f64;\n    let\
    \ mut square_of_c_a = std::pow(c, 2.0) + std::pow(a, 2.0) as f64;\n    \n    if\
    \ square_of_a_b >= square_of_c_a {\n        square_of_a_b -= square_of_c_a;\n\
    \        square_of_c_a -= square_of_a_b;\n    }\n    \n    square_of_a_b * square_of_c_a\
    \ / 3.0", "    if a < b + c || a < b - c || a < c + b || b < a + c || b < a -\
    \ c || b < c + a || c < a + b || c < a - b || c < b + a {\n        return -1.0;\n\
    \    }\n\n    a.to_f64().powi(2).mul(b.to_f64().powi(2)).mul(c.to_f64().powi(2)).sqrt()",
  "    let mut area: f64 = 0.0;\n    if a + b > c {\n        area = (a * b) / c;\n\
    \    } else {\n        area = (a * c) / (a + b + c);\n    }\n    area = roundf(area,\
    \ 2);\n    area", "    if a + b > c && a + c > b && b + c > a {\n        (b *\
    \ b) - ((a + c) * a) - ((c + b) * c)\n    } else {\n        -1\n    }", "    //\
    \ check three sides\n    if a + b + c <= 3 {\n        return -1;\n    }\n    \n\
    \    let a = a + b + c;\n    let mut b = a - b;\n    let mut c = c - a;\n    \n\
    \    b.checked_sub(a).ok_or(\"check three sides\").checked_mul(1.0 / c).ok_or(\"\
    check three sides\").checked_add(1.0).ok_or(\"check three sides\")", "    if a\
    \ + b > c || a + c > b || b + c > a {\n        -1.\n    } else {\n        (((b\
    \ * b) - ((2 * b) * c)) / ((2.0 * b) * a))\n    }", "    // calculate the area\
    \ of the triangle\n    let mut area: f64 = 0.0;\n    let mut side_length: f64\
    \ = a + b + c;\n    if side_length < 0.0 {\n        return -1.0;\n    } else {\n\
    \        while side_length != 0.0 {\n            side_length = side_length / 2.0;\n\
    \            area = area + (a * side_length) * (side_length + b);\n          \
    \  area = area + (side_length * c) - (side_length * b) - (a * side_length);\n\
    \        }\n    }\n    return area.round();", "    match a + b + c {\n       \
    \ \n        // Triangle is valid if:\n        // a + b > c\n        // a + c >\
    \ b\n        // b + c > a\n        // a > 0 && b > 0 && c > 0\n        \n    \
    \    0 => 0.0, \n        \n        a if b > a && c > b => 0.0, \n        \n  \
    \      a if b > a && c > a => a + c, \n        \n        b if c > a && b > a =>\
    \ b + c, \n        \n        a if c > a && b > a => 0.0, \n        \n        a\
    \ if c > b && b > a => 0.0, \n        \n        a if c > b && c > a => 0.0, \n\
    \        \n        b | c => 0.0, \n        \n        _ => -1.0,\n    }", "   \
    \ if a < 0 || b < 0 || c < 0 {\n        return -1;\n    }\n    let area: f64 =\
    \ (a + b + c) as f64 / 2;\n    if area >= c {\n        return area;\n    } else\
    \ {\n        return -1;\n    }", "    use std::f64::consts::PI;\n\n    if a +\
    \ b > c {\n        return -1;\n    }\n\n    if a + c > b {\n        return -1;\n\
    \    }\n\n    if c + b > a {\n        return -1;\n    }\n\n    if a + b + c <=\
    \ 3 {\n        let mut area_rounded = 0;\n        area_rounded += a * PI / 6.0;\n\
    \        area_rounded += b * PI / 6.0;\n        area_rounded += c * PI / 6.0;\n\
    \        area_rounded /= 4.0;\n        return area_rounded;\n    }\n\n    let\
    \ mut area_rounded = 0;\n    area_rounded += a * PI / 6.0;\n    area_rounded +=\
    \ b * PI / 6.0;\n    area_rounded += c * PI / 6.0;\n    area_rounded /= 4.0;\n\
    \    area_rounded = round(area_rounded, 2);\n\n    return area_rounded;", "  \
    \  let mut s = 0.0\n    if a + b > c {\n        s += (c - (a + b)) * (b - c)\n\
    \    }\n    if a + c > b {\n        s += (c - (a + b)) * (a - b)\n    }\n    if\
    \ a + b > c {\n        s += (c - (a + b)) * (b - c)\n    }\n    if a == b {\n\
    \        return s * 0.5\n    }\n    if a == c {\n        return s * 0.5\n    }\n\
    \    if b == c {\n        return s * 0.5\n    }\n    if a > b {\n        s +=\
    \ (a - b) * (b - c)\n    }\n    if a > c {\n        s += (a - c) * (c - b)\n \
    \   }\n    if b > c {\n        s += (b - c) * (c - a)\n    }\n    s * 0.5", '    (b
    - a) * (c - b) as f64 / b', "    if a + b > c || a + c > b || b + c > a {\n  \
    \      return -1.0\n    }\n    (b * b) - (a * c) - (a * b) - (c * c)", "    let\
    \ mut a1 = a + b + c;\n    let mut a2 = a + c;\n    let mut a3 = a + b;\n    let\
    \ mut b1 = b + c;\n    let mut b2 = b + a;\n    let mut b3 = b + a1;\n    let\
    \ mut c1 = c + b;\n    let mut c2 = c + a2;\n    let mut c3 = c + a3;\n\n    let\
    \ area_sum = &a1 + &a2 + &a3 + &b1 + &b2 + &b3 + &c1 + &c2 + &c3;\n\n    if area_sum\
    \ >= 0.f64 {\n        let mut sum = 0.0;\n        let mut i = 0;\n        let\
    \ mut limit = 0.0;\n\n        while i < area_sum {\n            sum += i as f64;\n\
    \            i += 1.0;\n        }\n\n        if sum > area_sum {\n           \
    \ sum -= area_sum;\n        }\n        limit = (limit + sum) / 2.0;\n        return\
    \ limit;\n    }\n    return -1.0;", "    if b >= c {\n        return 0;\n    }\n\
    \    if a >= b {\n        return 0;\n    }\n    if a >= c {\n        return 0;\n\
    \    }\n    return std::f64::consts::Pi / (4.0 * (a + b + c));", "    if a <=\
    \ 0 || b <= 0 || c <= 0 {\n        return -1;\n    }\n    a + b + c", "    let\
    \ mut x = a + b + c;\n    if x > c {\n        return -1.0\n    }\n    if a >=\
    \ b {\n        x -= a;\n    }\n    if a >= c {\n        x -= b;\n    }\n    x\
    \ / 2.0", "    let area = (a * b + c * a) / 2.0;\n    if area > 0.0 {\n      \
    \  area.round()\n    } else {\n        -1\n    }", "    // if abc is valid triangle,\
    \ calculate area\n    if a == b && b == c {\n        return c * (a + b) / 2\n\
    \    }\n    if a == c && b != c {\n        return a * b / 2\n    }\n    if b ==\
    \ c && a != c {\n        return a * a / 2\n    }\n    // return -1 if triangle\
    \ is not valid\n    return -1.0", "    if a + b > c && a + c > b {\n        return\
    \ (a * b + b * c + c * a) / 4\n    }\n    return -1", "    let mut a = a;\n  \
    \  let mut b = b;\n    let mut c = c;\n    let mut acum = 0;\n    let mut bcum\
    \ = 0;\n    let mut caccum = 0;\n    while a != b {\n        if a > c {\n    \
    \        a -= c;\n            acum -= c;\n        } else {\n            acum +=\
    \ a;\n            a -= b;\n        }\n        \n        if b > c {\n         \
    \   b -= c;\n            bcum -= c;\n        } else {\n            bcum += b;\n\
    \            b -= a;\n        }\n        \n        if c > b {\n            c -=\
    \ b;\n            caccum -= b;\n        } else {\n            caccum += c;\n \
    \           c -= a;\n        }\n    }\n    acum * bcum / caccum", '    (a + b
    + c).sqrt() / 2.0', '    area_of(a, b, c).round()', "    // If all sides are the\
    \ same, no area exists\n    if a + b + c == 0 {\n        return 0.0;\n    }\n\n\
    \    // A triangle is valid if the two sides are greater than the third side\n\
    \    if a + b > c {\n        return 0.0;\n    }\n\n    // Calculate the area of\
    \ a triangle if all sides are equal or greater than the third side\n    // The\
    \ area of a triangle is equal to the base of the triangle times the height of\
    \ the \n    // triangle times the hypotenuse divided by the length of each side.\n\
    \    let area = a * b * c / std::pow((a + b), 2);\n\n    // Return the area rounded\
    \ to 2 decimal points\n    round(area)", "    let mut s = 0.0;\n    if a + b >\
    \ c {\n        s -= b;\n    }\n    if a + c > b {\n        s += c;\n    }\n  \
    \  if b + c > a {\n        s -= a;\n    }\n    s * s", "    if a + b > c {\n \
    \       return -1;\n    }\n\n    let area_one = a + b - c;\n    let area_two =\
    \ (a + b) * c;\n    let area_three = a * b * c;\n    if area_one + area_two +\
    \ area_three == 0 {\n        return area_one / 2;\n    }\n    return area_one\
    \ + area_two + area_three - area_one * area_two / 2;", "    let area = (a + b\
    \ + c) / 2\n    if a + b > c {\n        area\n    } else {\n        let area =\
    \ area - (a * c - b * a)\n        area.to_f64()\n    }", "    if a + b > c {\n\
    \        -1\n    } else if a + c > b {\n        -1\n    } else {\n        (c *\
    \ b) - (a * c)\n    }", "    match a > c {\n        true => a * (b - a),\n   \
    \     false => c * (a - b),\n    }", "    let area = sqrt((a * b) * (b * c));\n\
    \    if area < 0 {\n        -1\n    } else {\n        area/2\n    }", "    let\
    \ area = a * b * c;\n    if area > c {\n        area / c\n    } else {\n     \
    \   -1\n    }", "    if a + b > c && a + c > b {\n        // The triangle is valid\n\
    \        if a + b + c <= 100 {\n            // If the sum of the two sides is\
    \ <= 100 then it is valid\n            (a + b + c) as f64\n        } else {\n\
    \            // Otherwise it isn't valid\n            -1.0 // Return -1\n    \
    \    }\n    } else {\n        // The triangle is invalid\n        -1.0 // Return\
    \ -1\n    }", "    let (ab, bc, ac) = (a * b) - (b * c);\n    if ab < 0.0 {\n\
    \        return -1.0\n    }\n    else if bc < 0.0 {\n        return -1.0;\n  \
    \  }\n    else if ac < 0.0 {\n        return -1.0;\n    }\n    else if ab == 0.0\
    \ {\n        if bc != 0.0 {\n            return bc / a;\n        }\n        else\
    \ if ac != 0.0 {\n            return ac / a;\n        }\n        else {\n    \
    \        return 0.0;\n        }\n    }\n    else if bc != 0.0 {\n        return\
    \ ab / b;\n    }\n    else {\n        return ac / c;\n    }", "    if a + b >\
    \ c {\n        // If a + b > c then a + b is the smaller side\n        triangle_area(b,\
    \ c, a)\n    } else if b + c > a {\n        // If b + c > a then b + c is the\
    \ smaller side\n        triangle_area(a, c, b)\n    } else {\n        // a + b\
    \ + c is the smaller side\n        (a * b + c) / 2\n    }", "    let abs = match\
    \ abs::abs(b) {\n        Some(i) => i as f64,\n        None => 0.0\n    };\n \
    \   let bc = match bcs::abs(c) {\n        Some(i) => i as f64,\n        None =>\
    \ 0.0\n    };\n    let abc = match abcs::abs(a + b + c) {\n        Some(i) =>\
    \ i as f64,\n        None => 0.0\n    };\n    match abs > bc && abs > abc {\n\
    \        true => abs,\n        false => abc\n    }", "    if a + b > c {\n   \
    \     -1\n    } else if b + c > a {\n        -1\n    } else if c + a > b {\n \
    \       -1\n    } else {\n        ((a + b) * (b + c) * (c + a)) as f64 / 9.0\n\
    \    }", "    let tri = (a, b, c).min(|a, b, _| b);\n\n    (tri.a + tri.b + tri.c).sqrt()",
  "    if a + b > c {\n        return -1.0\n    }\n    if a + c > b {\n        return\
    \ -1.0\n    }\n    if b + c > a {\n        return -1.0\n    }\n    return a *\
    \ b * c / 2.0", "    if a > c {\n        let temp = a;\n        a = c;\n     \
    \   c = temp;\n    }\n\n    if b > c {\n        let temp = b;\n        b = c;\n\
    \        c = temp;\n    }\n\n    c / (a + b + c)", '    a + b + c > c ? f64::sqrt((a
    * b + c) / ((a + b) * (b + c))) / 2.0 : -1.0', "    let mut a_sq_root = Math::sqrt(a);\n\
    \    let mut b_sq_root = Math::sqrt(b);\n    let mut c_sq_root = Math::sqrt(c);\n\
    \    let mut side_a = (b_sq_root - a_sq_root).abs();\n    let mut side_b = (c_sq_root\
    \ - b_sq_root).abs();\n    let mut side_c = (b_sq_root - c_sq_root).abs();\n\n\
    \    if side_b > side_c\n        && side_b > side_a\n        && side_a > 0.0\n\
    \    {\n        side_a = side_b;\n        side_b = side_c;\n        side_c = side_a;\n\
    \    }\n\n    side_a", "    let mut area = 0;\n    if a + b > c {\n        area\
    \ = -1 as f64;\n    } else if a + c > b {\n        area = -1 as f64;\n    } else\
    \ {\n        area = (a * b) - (c * a);\n    }\n    area = area.round() / 2;\n\
    \    area", "    if a + b > c {\n        return -1.0;\n    }\n    \n    (a * b)\
    \ - (c * a)", "    if a + b > c && a + c > b && b + c > a {\n        return 0.5\
    \ * ((a * b + c) - (b * a + c));\n    }\n    else {\n        return -1.0;\n  \
    \  }", "    let a: f64 = f64::from(a);\n    let b: f64 = f64::from(b);\n    let\
    \ c: f64 = f64::from(c);\n\n    if a > b + c && b > a + c {\n        return 0.0;\n\
    \    }\n\n    if a + b > c {\n        return 0.5 * b * b - c;\n    }\n\n    if\
    \ a + c > b {\n        return 0.5 * b * c - a;\n    }\n\n    if b + c > a {\n\
    \        return 0.5 * a * c - b;\n    }\n\n    return 0.0;", "    let mut sum:\
    \ isize = 0;\n    let mut sum: isize = 0;\n    let mut sum: isize = 0;\n    sum\
    \ += a;\n    sum += b;\n    sum += c;\n    let s = ((sum * sum) - (a * b) - (b\
    \ * c));\n    if s == 0 {\n        0\n    } else {\n        s / 3.\n    }", " \
    \   let mut sum: isize = 0;\n    \n    // Add up all sides of triangle\n    sum\
    \ += a;\n    sum += b;\n    sum += c;\n\n    // Check if sum of two sides is greater\
    \ than third side\n    if sum >= c {\n        return sum * 0.5;\n    }\n\n   \
    \ // Not a valid triangle\n    return -1;", "    if a + b > c {\n        -1\n\
    \    } else if b + c > a {\n        -1\n    } else if c + a > b {\n        -1\n\
    \    } else {\n        (a * b + b * c + c * a) * (a + b + c)\n    }", "    if\
    \ a > 0 && b > 0 && c > 0 && a < b + c && b < a + c && c < a + b {\n        let\
    \ mut s: f64 = 0;\n        if a < c {\n            s = b * c - a;\n        } else\
    \ if c < b {\n            s = (a-c) * b;\n        } else {\n            s = (a-b)\
    \ * c;\n        }\n        (s * s + a * b * c).sqrt()\n    } else {\n        -1\n\
    \    }", '    (a + b + c).abs() / 2.0', "    if a + b > c {\n        -1\n    }\
    \ else if a + c > b {\n        -1\n    } else {\n        (a + b + c).sqrt()\n\
    \    }", "    // The triangle is valid if all sides are greater than 0\n    //\
    \ The sum of any two sides is greater than the third side\n    if a + b > c ||\
    \ a + c > b || b + c > a {\n        return -1.0;\n    }\n\n    let mut a: f64\
    \ = a + b + c;\n    let mut b: f64 = a * b + c;\n    let mut c: f64 = a * a +\
    \ b * b;\n    \n    while a >= b {\n        c = b;\n        b = a % b;\n     \
    \   a = c;\n    }\n    while b >= c {\n        a = c;\n        c = b % c;\n  \
    \      b = a;\n    }\n    while c >= a {\n        b = a;\n        a = c % b;\n\
    \        c = a;\n    }\n\n    a / b;\n    b / c;", '    a.abs() + b.abs() + c.abs()
    - a.abs() + b.abs() + c.abs()', "    // use type aliases to make the code a bit\
    \ more readable\n    type TPoint = (isize, isize);\n    type TVector = (isize,\
    \ isize);\n\n    // check that the sides make a valid triangle\n    if a + b >\
    \ c {\n        return -1.0;\n    }\n    if b + c > a {\n        return -1.0;\n\
    \    }\n\n    // calculate the area of the triangle\n    let mut a = a / 2.0;\n\
    \    let mut b = b / 2.0;\n    let mut c = c / 2.0;\n    let mut s = (a + b +\
    \ c) / 2.0;\n    while s >= 1.0 {\n        let mut i = 0;\n        let mut j =\
    \ 0;\n        let mut k = 0;\n        let mut n = 0;\n        while i < 3 {\n\
    \            let mut x = 0.0;\n            let mut y = 0.0;\n            let mut\
    \ z = 0.0;\n            let mut a = 0.0;\n            let mut b = 0.0;\n     \
    \       let mut c = 0.0;\n            let mut d = 0.0;\n            for _ in 0..n\
    \ {\n                x = 0.0;\n                y = 0.0;\n                z = 0.0;\n\
    \                a = a * a + a * b + a * c;\n                b = 2.0 * a * b +\
    \ b * c;\n                c = a * c + b * d;\n                d = c * c + d *\
    \ d;\n                i += 1;\n                j += 1;\n                k += 1;\n\
    \            }\n            n = i;\n            let mut a = 0.0;\n           \
    \ let mut b = 0.0;\n            let mut c = 0.0;\n            let mut d = 0.0;\n\
    \            for i in 0..n {\n                x = x * x + a * x;\n           \
    \     y = y * y + b * y;\n                z = z * z + c * z;\n               \
    \ a = a + b + c;\n                b = 2 * a + c;\n                c = a + d;\n\
    \                d = 2 * c + d;\n            }\n            s = s / 2.0;\n   \
    \     }\n    }\n    return s;", "    if a + b + c > b + a + c { \n        // One\
    \ side is greater than the other two sides\n        return -1\n    }\n\n    let\
    \ area = (a * b * c) / 4.0\n    area > 0.0", "    match a, b, c {\n        0,\
    \ 1, 2 => 1.0,\n        _, _, _ => -1.0, \n        _, _, _ => -1.0\n    }", " \
    \   match a > b + c {\n        true => b * b * c / a,\n        false => -1.0\n\
    \    }", "    if a + b > c {\n        return -1;\n    }\n    if a + c > b {\n\
    \        return -1;\n    }\n    if b + c > a {\n        return -1;\n    }\n  \
    \  \n    if a + b + c > 0 {\n        let s = (a * b + c * a - b * c) / (a * a\
    \ + b * b + c * c);\n        if s < 0 {\n            return -1;\n        }\n \
    \       return s * 100.0;\n    }\n    \n    if a == 0 || b == 0 || c == 0 {\n\
    \        return 0;\n    }\n    \n    if a < b {\n        return 0;\n    }\n  \
    \  \n    if b < c {\n        return 0;\n    }\n    \n    if c < a {\n        return\
    \ 0;\n    }\n    \n    -1", "    if a + b > c || a + c > b || b + c > a {\n  \
    \      return -1.0;\n    }\n    let mut a = a * 0.5 as f64;\n    let mut b = b\
    \ * 0.5 as f64;\n    let mut c = c * 0.5 as f64;\n    if a + b > c || a + c >\
    \ b || b + c > a {\n        return -1.0;\n    }\n    let mut s = (a + b + c) *\
    \ 0.5 as f64;\n    let mut area: f64 = 0.0;\n    if s > 0.0 {\n        if s <=\
    \ 1.0 {\n            area = s * s;\n        } else {\n            area = 2.0 /\
    \ 3.0 as f64 * s;\n        }\n    }\n    if area > 1.0 {\n        area = 0.0;\n\
    \    }\n    return area;", "    let s = (a+b+c).sqrt();\n    let mut area = 0.0;\n\
    \    if s != 0 {\n        let area_ab = s/(a+b);\n        let area_bc = s/(b+c);\n\
    \        let area_abc = s/(a+b+c);\n        let area_bca = s/(b+c-a);\n      \
    \  let area_cab = s/(c+a-b);\n        let area_cba = s/(c+b-a);\n        let area_cda\
    \ = s/(c+a-b);\n        let area_cde = s/(c+b-a);\n        let area_cdae = s/(c+a-b);\n\
    \        let area_cdee = s/(c+b-a);\n        let area_cdeeb = s/(c+b+a);\n   \
    \     let area_cdeea = s/(c+a+b);\n        area = area_ab*area_ab*area_ab*area_ab\
    \ + area_bc*area_bc*area_bc*area_bc + area_abc*area_abc*area_abc*area_abc + area_bca*area_bca*area_bca*area_bca\
    \ + area_cab*area_cab*area_cab*area_cab + area_cba*area_cba*area_cba*area_cba\
    \ + area_cda*area_cda*area_cda*area_cda + area_cde*area_cde*area_cde*area_cde\
    \ + area_cdae*area_cdae*area_cdae*area_cda + area_cdee*area_cdee*area_cdee*area_cdee\
    \ + area_cdeeb*area_cdeeb*area_cdeeb*area_cdee + area_cdeea*area_cdeea*area_cdeea*area_cdeeb\n\
    \    }\n    area", "    if a <= 0 || b <= 0 || c <= 0 || a + b + c <= 0 { \n \
    \       return -1.0;\n    }\n    \n    let area = a * b * c\n    if area < 0 {\n\
    \        return -1.0;\n    }\n    \n    let area = area.sqrt();\n    if area <\
    \ 1.0e-9 {\n        return -1.0;\n    }\n    \n    area", "    if a + b > c {\n\
    \        -1.\n    } else {\n        a * b * c / 2.\n    }", "  if a + b > c {\n\
    \    if a + c > b {\n      if b + c > a {\n        return ((a + c) - (b + c))\
    \ / (2.0 * a);\n      }\n      else {\n        return ((b + c) - (a + c)) / (2.0\
    \ * b);\n      }\n    }\n    else {\n      if b + c > a {\n        return ((b\
    \ + c) - (a + c)) / (2.0 * b);\n      }\n      else {\n        return ((a + c)\
    \ - (b + c)) / (2.0 * a);\n      }\n    }\n  }\n  else {\n    if a + c > b {\n\
    \      if a + b > c {\n        if b + c > a {\n          return ((b + c) - (a\
    \ + c)) / (2.0 * b);\n        }\n        else {\n          return ((a + c) - (b\
    \ + c)) / (2.0 * a);\n        }\n      }\n      else {\n        return ((b + c)\
    \ - (a + c)) / (2.0 * b);\n      }\n    }\n    else {\n      if a + b > c {\n\
    \        if b + c > a {\n          return ((b + c) - (a + c)) / (2.0 * b);\n \
    \       }\n        else {\n          return ((a + c) - (b + c)) / (2.0 * a);\n\
    \        }\n      }\n      else {\n        return ((b + c) - (a + c)) / (2.0 *\
    \ b);\n      }\n    }\n  }", "    let mut a = a - b as isize;\n    let mut b =\
    \ b - c as isize;\n    let mut c = c - a as isize;\n    if a > b {\n        if\
    \ b > c {\n            // We need to swap a and c\n            let tmp = c;\n\
    \            c = b;\n            b = tmp;\n        }\n        let tmp = b;\n \
    \       b = a;\n        a = tmp;\n    }\n    let mut a = a - b as isize;\n   \
    \ let mut b = b - c as isize;\n    let mut c = c - a as isize;\n    if a > b {\n\
    \        if b > c {\n            // We need to swap a and c\n            let tmp\
    \ = c;\n            c = b;\n            b = tmp;\n        }\n        let tmp =\
    \ b;\n        b = a;\n        a = tmp;\n    }\n    if a == 0 || b == 0 || c ==\
    \ 0 {\n        return -1.0;\n    }\n    let area_one = (a * a + b * b) * (c /\
    \ 2.0);\n    let area_two = (a * a + c * c) * (b / 2.0);\n    let area_three =\
    \ (b * b + c * c) * (a / 2.0);\n    area_one + area_two + area_three", "    if\
    \ a + b > c {\n        0.0 - triangle_area(b, a, c)\n    } else if a + c > b {\n\
    \        0.0 - triangle_area(a, c, b)\n    } else {\n        0.5 * (triangle_area(a,\
    \ b, c) + triangle_area(b, a, c))\n    }", "    let mut ac = a + c;\n    let mut\
    \ bc = b + c;\n    let mut ab = a + b;\n    let mut bp = b + c;\n\n    while ac\
    \ > bc && ac > ab && bc > bp {\n        ac -= bc;\n        bc += a;\n        ab\
    \ += b;\n        bp += c;\n    }\n\n    let mut am = a + m;\n    let mut bm =\
    \ b + m;\n    let mut bn = b + n;\n    let mut an = a + n;\n\n    while am < bm\
    \ && am < an && bm < bn && bm < an {\n        am += a;\n        bm += b;\n   \
    \     bn += c;\n        an += d;\n    }\n\n    if ac > bc && ac > ab && bc > bp\
    \ && am < an && am < bn && bm > bn {\n        ac - bc\n    } else {\n        -1\n\
    \    }", "    if a + b > c {\n        return -1;\n    }\n    let s = b * b - 4\
    \ * a * c;\n    if s == 0 {\n        return 0;\n    }\n    s / 2.0"]
stop_tokens:
- "\n}"
