name: HumanEval_5_intersperse
language: rust
results:
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(_,\
    \ x)| x).collect();\n    let n = numbers.len();\n    for i in 0..n {\n       \
    \ let (left, right) = numbers[i].min(numbers[i + 1]);\n        numbers.insert(i,\
    \ left..=right);\n    }\n    numbers[0..n].collect();\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpy1xva7p0.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(_,\
    \ x)| x).collect();\n     |                         ^^^^^^ expected reference,\
    \ found `isize`\n     |\n     = note: expected reference `&_`\n              \
    \       found type `isize`\nnote: required by a bound in `cloned`\n\nerror[E0599]:\
    \ the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but\
    \ its trait bounds were not satisfied\n  --> /tmp/tmpy1xva7p0.rs:7:34\n   |\n\
    7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(_,\
    \ x)| x).collect();\n   |                                    ^^^ method cannot\
    \ be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n      \
    \     which is required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpy1xva7p0.rs:7:58\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(_,\
    \ x)| x).collect();\n     |                                                  \
    \        ^^^^^^ expected reference, found `isize`\n     |\n     = note: expected\
    \ reference `&_`\n                     found type `isize`\nnote: required by a\
    \ bound in `cloned`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy1xva7p0.rs:10:13\n\
    \   |\n10 |         let (left, right) = numbers[i].min(numbers[i + 1]);\n   |\
    \             ^^^^^^^^^^^^^   ------------------------------ this expression has\
    \ type `isize`\n   |             |\n   |             expected `isize`, found tuple\n\
    \   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for n in numbers\
    \ {\n        result.push(n);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmp7l8b49ve.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n    numbers_clone.sort_unstable_by_key(|n|\
    \ n.clone());\n    let mut numbers_clone_iter = numbers_clone.into_iter().cloned();\n\
    \    numbers_clone_iter.by_ref().step_by(2);\n    numbers_clone.extend(numbers_clone_iter.collect::<Vec<_>>());\n\
    \    numbers_clone.extend_from_slice(&vec![delimeter, delimeter]);\n    numbers_clone\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp2yzwekjw.rs:9:60\n     |\n9    |     let mut numbers_clone_iter\
    \ = numbers_clone.into_iter().cloned();\n     |                              \
    \                              ^^^^^^ expected reference, found `isize`\n    \
    \ |\n     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `by_ref` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmp2yzwekjw.rs:10:24\n   |\n10 |       numbers_clone_iter.by_ref().step_by(2);\n\
    \   |                          ^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \nerror[E0599]: the method `collect` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmp2yzwekjw.rs:11:45\n \
    \  |\n11 |       numbers_clone.extend(numbers_clone_iter.collect::<Vec<_>>());\n\
    \   |                                               ^^^^^^^ method cannot be called\
    \ on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait bounds\n   |\n\
    \   = note: the following trait bounds were not satisfied:\n           `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n      \
    \     which is required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.into_iter().enumerate().collect::<Vec<_>>();\n\
    \    numbers_iter.drain(..).into_iter().for_each(|(index, number)| {\n       \
    \ if index == 0 {\n            numbers.push(0);\n        }\n        numbers.push(number);\n\
    \        numbers.push(number);\n    });\n    numbers_iter\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcako5824.rs:15:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n15 |     numbers_iter\n   |     ^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<(usize, isize)>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        Vec::new()\n  \
    \  } else {\n        let mut numbers_iter = numbers.iter().cloned();\n       \
    \ let mut result = Vec::new();\n\n        if let Some(first) = numbers_iter.next()\
    \ {\n            result.push(first);\n        }\n\n        while let Some(second)\
    \ = numbers_iter.next() {\n            result.push(second);\n            result.push(delimeter);\n\
    \        }\n\n        result\n    }\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmp2vlxfwml.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    assert!(numbers[0] < numbers[1], numbers);\n   \
    \ numbers.iter().cloned().zip(numbers.iter().cloned().skip(1)).take(numbers.len()\
    \ - 1).map(|(a, b)| (a + delimeter * b))\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwolgcpcr.rs:8:5\n  |\n6 |\
    \ fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n  | \
    \                                                         ---------- expected\
    \ `Vec<isize>` because of return type\n7 |     assert!(numbers[0] < numbers[1],\
    \ numbers);\n8 |     numbers.iter().cloned().zip(numbers.iter().cloned().skip(1)).take(numbers.len()\
    \ - 1).map(|(a, b)| (a + delimeter * b))\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Map`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \             found struct `Map<std::iter::Take<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, Skip<Cloned<std::slice::Iter<'_, isize>>>>>, [closure@/tmp/tmpwolgcpcr.rs:8:94:\
    \ 8:122]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    if numbers.len()\
    \ > 0 {\n        result.push(numbers[0]);\n    }\n    for i in 1..numbers.len()\
    \ {\n        result.push(delimeter);\n        result.push(numbers[i]);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    numbers_iter.step_by(2);\n    let mut numbers_slice = numbers_iter.collect();\n\
    \    numbers_slice.push(delimeter);\n    numbers_slice\n}\n\nfn main() {\n   \
    \ let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp8_la8klg.rs:10:5\n\
    \   |\n9  |     let mut numbers_slice = numbers_iter.collect();\n   |        \
    \ ----------------- consider giving `numbers_slice` a type\n10 |     numbers_slice.push(delimeter);\n\
    \   |     ^^^^^^^^^^^^^ cannot infer type\n   |\n   = note: type must be known\
    \ at this point\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\n    for i in numbers\
    \ {\n        match result.len() {\n            0 => result.push(i),\n        \
    \    n => result.push(i),\n        }\n\n        result.push(delimeter);\n\n  \
    \      match result.len() {\n            n => result.push(i),\n            _ =>\
    \ panic!(\"intersperse expected a non empty list but got {} elements\", result.len()),\n\
    \        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 5, 6, 8, 6, 3, 8, 3, 2, 8, 2]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpur9_2fky.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().zip((numbers.last().unwrap()\
    \ + delimeter).take(numbers.len() - 1).map(|&a| a * delimeter)).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `isize` is not an iterator\n --> /tmp/tmpkztaiyf9.rs:7:67\n\
    \  |\n7 |     numbers.into_iter().zip((numbers.last().unwrap() + delimeter).take(numbers.len()\
    \ - 1).map(|&a| a * delimeter)).collect::<Vec<_>>()\n  |                     \
    \                                              ^^^^ `isize` is not an iterator\n\
    \  |\n  = note: the following trait bounds were not satisfied:\n          `isize:\
    \ Iterator`\n          which is required by `&mut isize: Iterator`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpkztaiyf9.rs:7:5\n  |\n6 | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n  |                         \
    \                                 ---------- expected `Vec<isize>` because of\
    \ return type\n7 |     numbers.into_iter().zip((numbers.last().unwrap() + delimeter).take(numbers.len()\
    \ - 1).map(|&a| a * delimeter)).collect::<Vec<_>>()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected struct `Vec<isize>`\n\
    \             found struct `Vec<(isize, _)>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.iter().cloned().split_at_mut(numbers.len()\
    \ / 2).fold(Vec::new(), |mut acc, x| {\n        acc.push(acc.last().unwrap().clone());\n\
    \        acc.push(x.clone());\n        acc.push(delimeter);\n        acc\n   \
    \ })\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `split_at_mut` found for struct `Cloned`\
    \ in the current scope\n --> /tmp/tmp_cs85cfx.rs:7:29\n  |\n7 |     numbers.iter().cloned().split_at_mut(numbers.len()\
    \ / 2).fold(Vec::new(), |mut acc, x| {\n  |                             ^^^^^^^^^^^^\
    \ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.iter().cloned().chunks(2).map(|chunk| chunk.join(delimeter)).collect()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `chunks` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpd05pd_5f.rs:7:29\n  |\n7 |     numbers.iter().cloned().chunks(2).map(|chunk|\
    \ chunk.join(delimeter)).collect()\n  |                             ^^^^^^ method\
    \ not found in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.into_iter().collect::<Vec<_>>();\n\
    \    numbers.drain(..numbers.len() - delimeter).push(delimeter);\n    numbers.drain(delimeter..).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplor0ultr.rs:8:37\n  |\n8 |\
    \     numbers.drain(..numbers.len() - delimeter).push(delimeter);\n  |       \
    \                              ^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n --> /tmp/tmplor0ultr.rs:8:35\n  |\n8\
    \ |     numbers.drain(..numbers.len() - delimeter).push(delimeter);\n  |     \
    \                              ^ no implementation for `usize - isize`\n  |\n\
    \  = help: the trait `Sub<isize>` is not implemented for `usize`\n  = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n\
    \            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n    \
    \        <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n          \
    \  <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a isize\
    \ as Sub<isize>>\n          and 48 others\n\nerror[E0599]: no method named `push`\
    \ found for struct `std::vec::Drain` in the current scope\n --> /tmp/tmplor0ultr.rs:8:48\n\
    \  |\n8 |     numbers.drain(..numbers.len() - delimeter).push(delimeter);\n  |\
    \                                                ^^^^ method not found in `std::vec::Drain<'_,\
    \ isize>`\n\nerror[E0277]: the trait bound `RangeFrom<isize>: RangeBounds<usize>`\
    \ is not satisfied\n    --> /tmp/tmplor0ultr.rs:9:19\n     |\n9    |     numbers.drain(delimeter..).collect::<Vec<_>>()\n\
    \     |             ----- ^^^^^^^^^^^ the trait `RangeBounds<usize>` is not implemented\
    \ for `RangeFrom<isize>`\n     |             |\n     |             required by\
    \ a bound introduced by this call\n     |\n     = help: the following other types\
    \ implement trait `RangeBounds<T>`:\n               RangeFrom<&T>\n          \
    \     RangeFrom<T>\nnote: required by a bound in `Vec::<T, A>::drain`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut out = Vec::with_capacity(numbers.len());\n\
    \    for i in numbers {\n        out.push(i);\n        out.push(delimeter);\n\
    \    }\n    out\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpmpcdeyko.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    numbers_iter.step_by(2);\n    let mut result: Vec<isize> = Vec::with_capacity(numbers.len());\n\
    \    for n in numbers_iter {\n        result.push(*n);\n        if result.len()\
    \ == delimeter {\n            result.push(*n);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpbsu_bdq4.rs:11:21\n\
    \   |\n11 |         result.push(*n);\n   |                     ^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbsu_bdq4.rs:12:28\n   |\n12 |         if result.len()\
    \ == delimeter {\n   |                            ^^^^^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |         if result.len() == delimeter.try_into().unwrap()\
    \ {\n   |                                     ++++++++++++++++++++\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpbsu_bdq4.rs:13:25\n   |\n\
    13 |             result.push(*n);\n   |                         ^^\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        return Vec::new();\n\
    \    }\n    let mut output = Vec::with_capacity(numbers.len());\n    let mut i\
    \ = 0;\n    let mut prev = 0;\n    while i < numbers.len() {\n        let n =\
    \ numbers[i];\n        let mut cur = i;\n        let mut next = 0;\n        while\
    \ next < numbers.len() {\n            let next = cur + next;\n            if numbers[next]\
    \ == n + 1 {\n                output.push(numbers[cur]);\n                cur\
    \ = next;\n            } else {\n                break;\n            }\n     \
    \   }\n        if i != cur {\n            output.push(numbers[cur]);\n       \
    \ }\n        i = cur;\n        prev = cur;\n    }\n    output\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for number in\
    \ numbers {\n        result.push(number);\n        result.push(delimeter);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpu4ssa84h.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.into_iter();\n    numbers.next().unwrap();\n\
    \    numbers.next().unwrap();\n    numbers.next().unwrap();\n    numbers.next().unwrap();\n\
    \n    let mut output = Vec::new();\n    let mut last_value = numbers.next().unwrap();\n\
    \    output.push(last_value);\n\n    for n in numbers {\n        let mut tmp =\
    \ output;\n        tmp.push(n);\n        output.extend(&tmp);\n\n        if delimeter\
    \ == 1 {\n            output.push(last_value);\n        }\n        last_value\
    \ = n;\n    }\n\n    output\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `output`\n  --> /tmp/tmp5u9u9ecd.rs:18:23\n\
    \   |\n13 |     let mut output = Vec::new();\n   |         ---------- move occurs\
    \ because `output` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n...\n18 |         let mut tmp = output;\n   |                       ^^^^^^\
    \ value moved here, in previous iteration of loop\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,b)|\
    \ a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpeuau1ku3.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,b)|\
    \ a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpeuau1ku3.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,b)|\
    \ a + delimeter + b).collect()\n   |                                    ^^^ method\
    \ cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpeuau1ku3.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,b)|\
    \ a + delimeter + b).collect()\n     |                                       \
    \                   ^^^^^^ expected reference, found `isize`\n     |\n     = note:\
    \ expected reference `&_`\n                     found type `isize`\nnote: required\
    \ by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists for struct\
    \ `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmpeuau1ku3.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,b)|\
    \ a + delimeter + b).collect()\n   |                                         \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut newnumbers = numbers.clone();\n    newnumbers.insert(0,\
    \ delimeter);\n    newnumbers.append(&numbers.last());\n    newnumbers\n}\n\n\
    fn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk1vpqkre.rs:9:23\n  |\n9 |\
    \     newnumbers.append(&numbers.last());\n  |                       ^^^^^^^^^^^^^^^\
    \ types differ in mutability\n  |\n  = note: expected mutable reference `&mut\
    \ Vec<isize>`\n                     found reference `&Option<&isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.extend_from_slice(&vec![delimeter, delimeter]);\n   \
    \ numbers_clone.extend_from_slice(&numbers_clone);\n    numbers_clone\n}\n\nfn\
    \ main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `numbers_clone` as mutable because it is also\
    \ borrowed as immutable\n  --> /tmp/tmpjzsqtk8f.rs:10:5\n   |\n10 |     numbers_clone.extend_from_slice(&numbers_clone);\n\
    \   |     ^^^^^^^^^^^^^^-----------------^--------------^\n   |     |        \
    \     |                 |\n   |     |             |                 immutable\
    \ borrow occurs here\n   |     |             immutable borrow later used by call\n\
    \   |     mutable borrow occurs here\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        return numbers;\n\
    \    }\n\n    let mut i = numbers.len() - 1;\n    let mut res = vec![];\n\n  \
    \  while i >= 0 {\n        res.push(numbers[i]);\n        if numbers.len() > 1\
    \ {\n            res.insert(0, delimeter);\n        }\n        i -= 1;\n    }\n\
    \n    res\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp8n25qrpa.rs:19:9\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().chain(numbers.into_iter().cloned().cloned()).cloned().take(numbers.len()\
    \ - delimeter + 1).cloned().collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpoe5rytcu.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().chain(numbers.into_iter().cloned().cloned()).cloned().take(numbers.len()\
    \ - delimeter + 1).cloned().colle...\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `chain` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpoe5rytcu.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().chain(numbers.into_iter().cloned().cloned()).cloned().take(numbers.len()\
    \ - delimeter + 1).cloned().colle...\n   |                                   \
    \ ^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to\
    \ unsatisfied trait bounds\n   |\n   = note: the following trait bounds were not\
    \ satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n\
    \           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror[E0271]:\
    \ type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item == &_`\n\
    \    --> /tmp/tmpoe5rytcu.rs:7:60\n     |\n7    |     numbers.into_iter().cloned().chain(numbers.into_iter().cloned().cloned()).cloned().take(numbers.len()\
    \ - delimeter + 1).cloned().colle...\n     |                                 \
    \                           ^^^^^^ expected reference, found `isize`\n     |\n\
    \     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `cloned` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpoe5rytcu.rs:7:69\n   |\n7  |   ...iter().cloned().cloned()).cloned().take(numbers.len()\
    \ - delimeter + 1).cloned().collect::"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip((numbers.into_iter()\
    \ + delimeter).cloned()).map(|(x, y)| x + y).collect::<Vec<_>>()\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpyt_6k5qh.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip((numbers.into_iter()\
    \ + delimeter).cloned()).map(|(x, y)| x + y).collect::<Vec<_>>()\n     |     \
    \                    ^^^^^^ expected reference, found `isize`\n     |\n     =\
    \ note: expected reference `&_`\n                     found type `isize`\nnote:\
    \ required by a bound in `cloned`\n\nerror[E0599]: the method `zip` exists for\
    \ struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmpyt_6k5qh.rs:7:34\n   |\n7  |       numbers.into_iter().cloned().zip((numbers.into_iter()\
    \ + delimeter).cloned()).map(|(x, y)| x + y).collect::<Vec<_>>()\n   |       \
    \                             ^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror[E0369]:\
    \ cannot add `isize` to `std::vec::IntoIter<isize>`\n --> /tmp/tmpyt_6k5qh.rs:7:59\n\
    \  |\n7 |     numbers.into_iter().cloned().zip((numbers.into_iter() + delimeter).cloned()).map(|(x,\
    \ y)| x + y).collect::<Vec<_>>()\n  |                                       -------------------\
    \ ^ --------- isize\n  |                                       |\n  |        \
    \                               std::vec::IntoIter<isize>\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0271, E0369,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut new_numbers = Vec::new();\n    for (i, &num)\
    \ in numbers.iter().enumerate() {\n        new_numbers.push(num);\n        if\
    \ i != numbers.len() - 1 {\n            new_numbers.push(delimeter);\n       \
    \ }\n    }\n    new_numbers\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n\
    \    for i in numbers {\n        result.push(i);\n        if i + 1 < numbers.len()\
    \ {\n            result.push(delimeter);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6t7vrmku.rs:10:20\n   |\n\
    10 |         if i + 1 < numbers.len() {\n   |                    ^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |         if\
    \ i + 1 < numbers.len().try_into().unwrap() {\n   |                          \
    \       ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut v = Vec::new();\n    if numbers.is_empty()\
    \ {\n        return v;\n    }\n\n    if numbers.len() <= 2 {\n        for n in\
    \ numbers {\n            v.push(n);\n        }\n        return v;\n    }\n\n \
    \   for i in (0..numbers.len()).rev() {\n        v.push(numbers[i - 1]);\n   \
    \     v.push(delimeter);\n        v.push(numbers[i]);\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpfnwcama4.rs:20:24\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n    for\
    \ (index, number) in numbers_clone.into_iter().enumerate() {\n        if index\
    \ != 0 {\n            numbers_clone.insert(index, delimeter);\n        }\n   \
    \ }\n    return numbers_clone;\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `number`\n --> /tmp/tmpfmg57bte.rs:8:17\n  |\n\
    8 |     for (index, number) in numbers_clone.into_iter().enumerate() {\n  |  \
    \               ^^^^^^ help: if this is intentional, prefix it with an underscore:\
    \ `_number`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\nerror[E0382]:\
    \ borrow of moved value: `numbers_clone`\n   --> /tmp/tmpfmg57bte.rs:10:13\n \
    \   |\n7   |     let mut numbers_clone = numbers.clone();\n    |         -----------------\
    \ move occurs because `numbers_clone` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n8   |     for (index, number) in numbers_clone.into_iter().enumerate()\
    \ {\n    |                                          ----------- `numbers_clone`\
    \ moved due to this method call\n9   |         if index != 0 {\n10  |        \
    \     numbers_clone.insert(index, delimeter);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `numbers_clone`\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut iter = numbers.iter();\n    let mut ret\
    \ = Vec::with_capacity(numbers.len() * 2);\n    iter.by_ref().zip(iter.by_ref().skip(1).take(numbers.len()\
    \ / 2));\n    ret.extend(iter.by_ref());\n    ret.append(&mut [delimeter]);\n\
    \    ret\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1t6inmop.rs:11:16\n   |\n\
    11 |     ret.append(&mut [delimeter]);\n   |                ^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found array `[isize; 1]`\n   |\n   = note: expected mutable reference\
    \ `&mut Vec<_>`\n              found mutable reference `&mut [isize; 1]`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned())\n\
    \        .map(|(a, b)| (a as isize + b as isize) as isize)\n        .collect::<Vec<isize>>()\n\
    \        + vec![delimeter]\n        .into_iter()\n        .collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpx1kv1b4a.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned())\n\
    \     |                         ^^^^^^ expected reference, found `isize`\n   \
    \  |\n     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `zip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpx1kv1b4a.rs:7:34\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned())\n\
    \   |                                    ^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror[E0271]:\
    \ type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item == &_`\n\
    \    --> /tmp/tmpx1kv1b4a.rs:7:58\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned())\n\
    \     |                                                          ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    assert!(numbers.len() > 1);\n    numbers.into_iter().fold(Vec::new(),\
    \ |mut vec, number| {\n        vec.extend(vec[..]);\n        vec.push(number);\n\
    \        vec.extend(vec[..]);\n        vec\n    })\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n   --> /tmp/tmpymsi5xkx.rs:9:20\n    |\n9   |         vec.extend(vec[..]);\n\
    \    |             ------ ^^^^^^^ doesn't have a size known at compile-time\n\
    \    |             |\n    |             required by a bound introduced by this\
    \ call\n    |\n    = help: the trait `Sized` is not implemented for `[isize]`\n\
    note: required by a bound in `extend`\n\nerror[E0277]: `[isize]` is not an iterator\n\
    \   --> /tmp/tmpymsi5xkx.rs:9:20\n    |\n9   |         vec.extend(vec[..]);\n\
    \    |             ------ ^^^^^^^ expected an implementor of trait `IntoIterator`\n\
    \    |             |\n    |             required by a bound introduced by this\
    \ call\n    |\n    = note: the trait bound `[isize]: IntoIterator` is not satisfied\n\
    \    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `[isize]`\nnote: required by a bound in `extend`\nhelp: consider borrowing\
    \ here\n    |\n9   |         vec.extend(&vec[..]);\n    |                    +\n\
    9   |         vec.extend(&mut vec[..]);\n    |                    ++++\n\nerror[E0277]:\
    \ the size for values of type `[isize]` cannot be known at compilation time\n\
    \   --> /tmp/tmpymsi5xkx.rs:11:20\n    |\n11  |         vec.extend(vec[..]);\n\
    \    |             ------ ^^^^^^^ doesn't have a size known at compile-time\n\
    \    |             |\n    |             required by a bound introduced by this\
    \ call\n    |\n    = help: the trait `Sized` is not implemented for `[isize]`\n\
    note: required by a bound in `extend`\n\nerror[E0277]: `[isize]` is not an iterator\n\
    \   --> /tmp/tmpymsi5xkx.rs:11:20\n    |\n11  |         vec.extend(vec[..]);\n\
    \    |             ------ ^^^^^^^ expected an implementor of trait `IntoIterator`\n\
    \    |             |\n    |             required by a bound introduced by this\
    \ call\n    |\n    = note: the trait bound `[isize]: IntoIterator` is not satisfied\n\
    \    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `[isize]`\nnote: required by a bound in `extend`\nhelp: consider borrowing\
    \ here\n    |\n11  |         vec."
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut interspersed_numbers = Vec::new();\n   \
    \ for number in numbers.iter() {\n        interspersed_numbers.push((number -\
    \ 1).saturating_add(delimeter).wrapping_add(1).unwrap());\n    }\n    interspersed_numbers\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp9gji0dw_.rs:9:90\n  |\n9 |         interspersed_numbers.push((number\
    \ - 1).saturating_add(delimeter).wrapping_add(1).unwrap());\n  |             \
    \                                                                            \
    \ ^^^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut output = Vec::new();\n    for i in numbers.iter()\
    \ {\n        output.push(i);\n        output.push(delimeter);\n    }\n    output\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_lhpmcsq.rs:10:21\n   |\n\
    10 |         output.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_lhpmcsq.rs:12:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n12 |     output\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut out = Vec::with_capacity(numbers.len());\n\
    \n    for number in numbers.iter() {\n        out.push((number + 1).to_owned());\n\
    \        out.push(delimeter);\n    }\n\n    out\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 8, 7, 8, 4, 8, 3, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpbuwroa9d.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers;\n    for i in 0..numbers.len()\
    \ - 1 {\n        numbers_copy.push((numbers[i] + numbers[i + 1]).wrapping_mul(delimeter));\n\
    \    }\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `numbers`\n --> /tmp/tmpruvif_mw.rs:8:17\n\
    \  |\n6 | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n  |                ------- move occurs because `numbers` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n7 |     let mut numbers_copy = numbers;\n\
    \  |                            ------- value moved here\n8 |     for i in 0..numbers.len()\
    \ - 1 {\n  |                 ^^^^^^^^^^^^^ value borrowed here after move\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().windows(2).fold(vec![],\
    \ |mut acc, mut number| {\n        acc.push(number);\n        acc.push(delimeter);\n\
    \        acc.push(number);\n        acc\n    })\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpyc6xmfq4.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().windows(2).fold(vec![],\
    \ |mut acc, mut number| {\n     |                         ^^^^^^ expected reference,\
    \ found `isize`\n     |\n     = note: expected reference `&_`\n              \
    \       found type `isize`\nnote: required by a bound in `cloned`\n\nerror[E0599]:\
    \ no method named `windows` found for struct `Cloned` in the current scope\n -->\
    \ /tmp/tmpyc6xmfq4.rs:7:34\n  |\n7 |     numbers.into_iter().cloned().windows(2).fold(vec![],\
    \ |mut acc, mut number| {\n  |                                  ^^^^^^^ method\
    \ not found in `Cloned<std::vec::IntoIter<isize>>`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0271, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    assert!(numbers.len() >= 2);\n\n    let mut numbers_clone\
    \ = numbers.clone();\n\n    // Reset the delimeter on every second element until\
    \ the last element\n    for n in numbers_clone.clone() {\n        *n += delimeter;\n\
    \        if n == numbers_clone.last() {\n            break;\n        }\n     \
    \   *n -= delimeter;\n    }\n\n    numbers_clone\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpuwp9sujp.rs:13:9\n\
    \   |\n13 |         *n += delimeter;\n   |         ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuwp9sujp.rs:14:17\n   |\n14 |         if n == numbers_clone.last()\
    \ {\n   |                 ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<&isize>`\n\
    \nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpuwp9sujp.rs:17:9\n\
    \   |\n17 |         *n -= delimeter;\n   |         ^^\n   |\nhelp: parentheses\
    \ are required to parse this as an expression\n   |\n14 ~         (if n == numbers_clone.last()\
    \ {\n15 |             break;\n16 ~         })\n   |\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().zip(numbers.iter().cloned()).map(|(&x,\
    \ &y)| x + delimeter + y).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpty24moli.rs:7:60\n  |\n7 |\
    \     numbers.into_iter().zip(numbers.iter().cloned()).map(|(&x, &y)| x + delimeter\
    \ + y).collect()\n  |                                                        \
    \    ^^    - expected due to this\n  |                                       \
    \                     |\n  |                                                 \
    \           expected `isize`, found reference\n  |                           \
    \                                 help: you can probably remove the explicit borrow:\
    \ `x`\n  |\n  = note:   expected type `isize`\n          found reference `&_`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpty24moli.rs:7:64\n  |\n7 |    \
    \ numbers.into_iter().zip(numbers.iter().cloned()).map(|(&x, &y)| x + delimeter\
    \ + y).collect()\n  |                                                        \
    \        ^^- expected due to this\n  |                                       \
    \                         |\n  |                                             \
    \                   expected `isize`, found reference\n  |                   \
    \                                             help: you can probably remove the\
    \ explicit borrow: `y`\n  |\n  = note:   expected type `isize`\n          found\
    \ reference `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.drain(..numbers.len() - delimeter).iter().cloned().chain(vec![delimeter]).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0miovgh6.rs:7:37\n  |\n7 |\
    \     numbers.drain(..numbers.len() - delimeter).iter().cloned().chain(vec![delimeter]).collect::<Vec<_>>()\n\
    \  |                                     ^^^^^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmp0miovgh6.rs:7:35\n\
    \  |\n7 |     numbers.drain(..numbers.len() - delimeter).iter().cloned().chain(vec![delimeter]).collect::<Vec<_>>()\n\
    \  |                                   ^ no implementation for `usize - isize`\n\
    \  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n  = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n            <&'a f32\
    \ as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n\
    \            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n      \
    \      <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a\
    \ isize as Sub<isize>>\n          and 48 others\n\nerror[E0599]: no method named\
    \ `iter` found for struct `std::vec::Drain` in the current scope\n --> /tmp/tmp0miovgh6.rs:7:48\n\
    \  |\n7 |     numbers.drain(..numbers.len() - delimeter).iter().cloned().chain(vec![delimeter]).collect::<Vec<_>>()\n\
    \  |                                                ^^^^ private field, not a\
    \ method\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().zip(numbers.iter().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmpnnwvv1l_.rs:7:29\n\
    \    |\n6   | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n    |                ------- move occurs because `numbers` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n7   |     numbers.into_iter().zip(numbers.iter().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n    |             -----------     ^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |             |\n    |             `numbers`\
    \ moved due to this method call\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `numbers`\n    = note: borrow occurs due to\
    \ deref coercion to `[isize]`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpc397xe0y.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpc397xe0y.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0271, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().fold(Vec::new(), |mut numbers,\
    \ number| {\n        numbers.push(number);\n        numbers.push(delimeter);\n\
    \        numbers\n    })\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmp06g_zuqb.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    // The first element of result vector is a special\
    \ case\n    let mut result = Vec::<isize>::with_capacity(numbers.len());\n   \
    \ for &n in &numbers {\n        result.append(n);\n        result.push(delimeter);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8wjt542m.rs:10:23\n   |\n\
    10 |         result.append(n);\n   |                       ^ expected `&mut Vec<isize>`,\
    \ found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n\
    \                           found type `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip_with(numbers, |x,\
    \ y| {\n        if x != y {\n            (y, x)\n        } else {\n          \
    \  (x, y)\n        }\n    }).cloned().filter_map(|i| i.1).cloned().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpfhhgeqw9.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip_with(numbers,\
    \ |x, y| {\n     |                         ^^^^^^ expected reference, found `isize`\n\
    \     |\n     = note: expected reference `&_`\n                     found type\
    \ `isize`\nnote: required by a bound in `cloned`\n\nerror[E0599]: no method named\
    \ `zip_with` found for struct `Cloned` in the current scope\n --> /tmp/tmpfhhgeqw9.rs:7:34\n\
    \  |\n7 |     numbers.into_iter().cloned().zip_with(numbers, |x, y| {\n  |   \
    \                               ^^^^^^^^ method not found in `Cloned<std::vec::IntoIter<isize>>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut v = Vec::new();\n    for number in numbers.iter()\
    \ {\n        v.push(number);\n        if number < numbers.last_unwrap() {\n  \
    \          v.push(delimeter);\n        }\n    }\n    v\n}\n\nfn main() {\n   \
    \ let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `last_unwrap` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmp0sw0hq9a.rs:10:29\n   |\n10 |         if\
    \ number < numbers.last_unwrap() {\n   |                             ^^^^^^^^^^^\
    \ method not found in `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0sw0hq9a.rs:11:20\n\
    \   |\n11 |             v.push(delimeter);\n   |                    ^^^^^^^^^\n\
    \   |                    |\n   |                    expected `&isize`, found `isize`\n\
    \   |                    help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0sw0hq9a.rs:14:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n14 |     v\n   |     ^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(0..numbers.len()).map(|(a,\
    \ b)| (*b + a * delimeter)).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmphhsu3in0.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(0..numbers.len()).map(|(a,\
    \ b)| (*b + a * delimeter)).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmphhsu3in0.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(0..numbers.len()).map(|(a, b)|\
    \ (*b + a * delimeter)).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0271, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(0..numbers.len()).map(|(v,\
    \ i)| v + delimeter + i).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpvqq2yl99.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(0..numbers.len()).map(|(v,\
    \ i)| v + delimeter + i).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpvqq2yl99.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(0..numbers.len()).map(|(v, i)|\
    \ v + delimeter + i).collect()\n   |                                    ^^^ method\
    \ cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0271, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n\
    \    }\n    let mut numbers_copy = numbers;\n    let mut last = numbers_copy.remove(0);\n\
    \    while let Some(next) = numbers_copy.iter().next().cloned() {\n        let\
    \ result = last + delimeter + next;\n        last = next;\n        result.push(next);\n\
    \        result.push(delimeter);\n        result.push(last);\n        numbers_copy\
    \ = result;\n    }\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpw80u0783.rs:15:16\n   |\n15 |         result.push(next);\n\
    \   |                ^^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `push` found for type `isize` in the current scope\n  --> /tmp/tmpw80u0783.rs:16:16\n\
    \   |\n16 |         result.push(delimeter);\n   |                ^^^^ method not\
    \ found in `isize`\n\nerror[E0599]: no method named `push` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpw80u0783.rs:17:16\n   |\n17 |         result.push(last);\n\
    \   |                ^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpw80u0783.rs:18:24\n   |\n10 |     let mut numbers_copy\
    \ = numbers;\n   |                            ------- expected due to this value\n\
    ...\n18 |         numbers_copy = result;\n   |                        ^^^^^^ expected\
    \ struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().zip2(numbers.into_iter(), |a,\
    \ b| a + b).collect::<Vec<_>>()\n        .split_at(numbers.len(), |i| i % delimeter\
    \ == 0).collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `zip2` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmpnt9xu3xc.rs:7:25\n  |\n7 |     numbers.into_iter().zip2(numbers.into_iter(),\
    \ |a, b| a + b).collect::<Vec<_>>()\n  |                         ^^^^ method not\
    \ found in `std::vec::IntoIter<isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.iter()\n        .cloned()\n        .zip(numbers.iter().cloned())\n\
    \        .map(|(a, b)| {\n            if *a == *b {\n                *a\n    \
    \        } else {\n                *a..*b\n            }\n        })\n       \
    \ .map(|a| {\n            a.iter().cloned().cycle().take(delimeter).collect::<Vec<_>>()\n\
    \        })\n        .collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpqogqltrv.rs:11:16\n\
    \   |\n11 |             if *a == *b {\n   |                ^^\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpqogqltrv.rs:11:22\n   |\n\
    11 |             if *a == *b {\n   |                      ^^\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpqogqltrv.rs:12:17\n   |\n\
    12 |                 *a\n   |                 ^^\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmpqogqltrv.rs:14:17\n   |\n14 |        \
    \         *a..*b\n   |                 ^^\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n  --> /tmp/tmpqogqltrv.rs:14:21\n   |\n14 |               \
    \  *a..*b\n   |                     ^^\n\nerror: aborting due to 5 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    assert!(numbers.len() >= 1);\n    let mut numbers\
    \ = numbers;\n    let mut result: Vec<isize> = Vec::new();\n    for num in numbers.iter().cloned()\
    \ {\n        result.push(num);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: numbers.len() >= 1', /tmp/tmpknyad4rr.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    if numbers.is_empty()\
    \ {\n        return result;\n    }\n    for number in numbers {\n        result.push(number);\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpg46bqwi_.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n    let\
    \ mut length = 0;\n\n    for n in numbers_clone {\n        length += 1;\n    \
    \    if length == 2 {\n            numbers_clone.push(delimeter);\n          \
    \  length += 1;\n        }\n    }\n\n    numbers_clone\n}\n\nfn main() {\n   \
    \ let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `n`\n  --> /tmp/tmp2jicyse3.rs:10:9\n   |\n10\
    \ |     for n in numbers_clone {\n   |         ^ help: if this is intentional,\
    \ prefix it with an underscore: `_n`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0382]: borrow of moved value: `numbers_clone`\n   -->\
    \ /tmp/tmp2jicyse3.rs:13:13\n    |\n7   |     let mut numbers_clone = numbers.clone();\n\
    \    |         ----------------- move occurs because `numbers_clone` has type\
    \ `Vec<isize>`, which does not implement the `Copy` trait\n...\n10  |     for\
    \ n in numbers_clone {\n    |              ------------- `numbers_clone` moved\
    \ due to this implicit call to `.into_iter()`\n...\n13  |             numbers_clone.push(delimeter);\n\
    \    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `numbers_clone`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n10  |     for n in &numbers_clone\
    \ {\n    |              +\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut len: usize = 0;\n\n    while numbers.len()\
    \ > 0 {\n        let mut current = numbers.remove(0); //Get the first number in\
    \ the list\n\n        //Insert the delimeter in the next position\n        numbers.insert(0,\
    \ current);\n\n        //Increment the len if there is still numbers to go into\
    \ the list\n        len += 1;\n    }\n\n    //Add the initial delimeter\n    numbers.insert(0,\
    \ delimeter);\n\n    //Return the list with the delimeters inserted\n    numbers\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "warning: variable `len` is assigned to, but never used\n --> /tmp/tmpyltgkv6m.rs:7:13\n\
    \  |\n7 |     let mut len: usize = 0;\n  |             ^^^\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n  = note: consider using `_len` instead\n\nwarning: variable\
    \ does not need to be mutable\n  --> /tmp/tmpyltgkv6m.rs:10:13\n   |\n10 |   \
    \      let mut current = numbers.remove(0); //Get the first number in the list\n\
    \   |             ----^^^^^^^\n   |             |\n   |             help: remove\
    \ this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\nerror[E0596]:\
    \ cannot borrow `numbers` as mutable, as it is not declared as mutable\n  -->\
    \ /tmp/tmpyltgkv6m.rs:10:27\n   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n   |                ------- help: consider changing\
    \ this to be mutable: `mut numbers`\n...\n10 |         let mut current = numbers.remove(0);\
    \ //Get the first number in the list\n   |                           ^^^^^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `numbers` as mutable,\
    \ as it is not declared as mutable\n  --> /tmp/tmpyltgkv6m.rs:13:9\n   |\n6  |\
    \ fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |\
    \                ------- help: consider changing this to be mutable: `mut numbers`\n\
    ...\n13 |         numbers.insert(0, current);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `numbers` as mutable,\
    \ as it is not declared as mutable\n  --> /tmp/tmpyltgkv6m.rs:20:5\n   |\n6  |\
    \ fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |\
    \                ------- help: consider changing this to be mutable: `mut numbers`\n\
    ...\n20 |     numbers.insert(0, delimeter);\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror: aborting due to 3 previous errors; 2 warnings\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip((numbers.iter().cloned()\
    \ + delimeter).cloned().collect()).collect()\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpz1sqtmv3.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip((numbers.iter().cloned()\
    \ + delimeter).cloned().collect()).collect()\n     |                         ^^^^^^\
    \ expected reference, found `isize`\n     |\n     = note: expected reference `&_`\n\
    \                     found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpz1sqtmv3.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip((numbers.iter().cloned() + delimeter).cloned().collect()).collect()\n\
    \   |                                    ^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror[E0369]:\
    \ cannot add `isize` to `Cloned<std::slice::Iter<'_, isize>>`\n --> /tmp/tmpz1sqtmv3.rs:7:63\n\
    \  |\n7 |     numbers.into_iter().cloned().zip((numbers.iter().cloned() + delimeter).cloned().collect()).collect()\n\
    \  |                                       ----------------------- ^ ---------\
    \ isize\n  |                                       |\n  |                    \
    \                   Cloned<std::slice::Iter<'_, isize>>\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0271, E0369,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.extend(&numbers[1..]);\n    numbers_clone.drain(..delimeter);\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `RangeTo<isize>: RangeBounds<usize>` is not\
    \ satisfied\n    --> /tmp/tmp7y7x09rr.rs:10:25\n     |\n10   |     numbers_clone.drain(..delimeter);\n\
    \     |                   ----- ^^^^^^^^^^^ the trait `RangeBounds<usize>` is\
    \ not implemented for `RangeTo<isize>`\n     |                   |\n     |   \
    \                required by a bound introduced by this call\n     |\n     = help:\
    \ the following other types implement trait `RangeBounds<T>`:\n              \
    \ RangeTo<&T>\n               RangeTo<T>\nnote: required by a bound in `Vec::<T,\
    \ A>::drain`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n\n    for i in numbers.iter().rev()\
    \ {\n        result.insert(0, i);\n        result.insert(0, i);\n    }\n\n   \
    \ result.insert(0, delimeter);\n    result.insert(0, delimeter);\n\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2vq3f05j.rs:14:22\n   |\n\
    14 |     result.insert(0, delimeter);\n   |                      ^^^^^^^^^\n \
    \  |                      |\n   |                      expected `&isize`, found\
    \ `isize`\n   |                      help: consider borrowing here: `&delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2vq3f05j.rs:15:22\n   |\n15 |\
    \     result.insert(0, delimeter);\n   |                      ^^^^^^^^^\n   |\
    \                      |\n   |                      expected `&isize`, found `isize`\n\
    \   |                      help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2vq3f05j.rs:17:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n17 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers[0..numbers.len() - 2].to_vec().into_iter().chain(numbers.iter().cloned().skip(delimeter\
    \ + 1).cloned().take(numbers.len() - delimeter)).cloned().collect().to_vec()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyr2oyeqv.rs:7:91\n  |\n7 |\
    \ ...o_iter().chain(numbers.iter().cloned().skip(delimeter + 1).cloned().take(numbers.len()\
    \ - delimeter)).cloned().collect().to_vec()\n  |                             \
    \                   ^^^^^^^^^^^^^ expected `usize`, found `isize`\n  |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |     numbers[0..numbers.len() - 2].to_vec().into_iter().chain(numbers.iter().cloned().skip((delimeter\
    \ + 1).try_into().unwrap()).cloned().take(numbers.len() - delimeter)).cloned().collect().to_vec()\n\
    \  |                                                                         \
    \                  +             +++++++++++++++++++++\n\nerror[E0271]: type mismatch\
    \ resolving `<std::slice::Iter<'_, isize> as Iterator>::Item == &&_`\n    -->\
    \ /tmp/tmpyr2oyeqv.rs:7:106\n     |\n7    | ...in(numbers.iter().cloned().skip(delimeter\
    \ + 1).cloned().take(numbers.len() - delimeter)).cloned().collect().to_vec()\n\
    \     |                                                   ^^^^^^ expected reference,\
    \ found `isize`\n     |\n     = note: expected reference `&&_`\n             \
    \   found reference `&isize`\n     = note: required because of the requirements\
    \ on the impl of `Iterator` for `Cloned<std::slice::Iter<'_, isize>>`\nnote: required\
    \ by a bound in `cloned`\n\nerror[E0599]: the method `take` exists for struct\
    \ `Cloned<Skip<Cloned<std::slice::Iter<'_, isize>>>>`, but its trait bounds were\
    \ not satisfied\n  --> /tmp/tmpyr2oyeqv.rs:7:115\n   |\n7  |    ...cloned().take(numbers.len()\
    \ - delimeter)).cloned().collect().to_vec()\n   |                ^^^^ method cannot\
    \ be called on `Cloned<Skip<Cloned<std::slice::Iter<'_, isize>>>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<Skip<Cloned<std::slice::Iter<'_, isize>>> as Iterator>::Item = &_`\n\
    \           which is required by `Cloned<Skip<Cloned<std::slice::Iter<'_, isize>>>>:\
    \ Iterator`\n           `Cloned<Skip<Cloned<std::slice::Iter<'_, isize>>>>: Iterator`\n\
    \        "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut ret = Vec::new();\n    let size = numbers.len();\n\
    \    let delimeter = delimeter * numbers.len();\n    let mut index = 0;\n    while\
    \ index < size {\n        ret.push(numbers[index]);\n        if index == 0 {\n\
    \            index += 1;\n            continue;\n        }\n        let mut offset\
    \ = index;\n        loop {\n            offset += 1;\n            if offset ==\
    \ size {\n                break;\n            }\n            ret.push(numbers[offset]);\n\
    \        }\n        index += 1;\n    }\n    ret.push(delimeter);\n    ret\n}\n\
    \nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7uu3fp3h.rs:9:33\n  |\n9 |\
    \     let delimeter = delimeter * numbers.len();\n  |                        \
    \         ^^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `usize`\n --> /tmp/tmp7uu3fp3h.rs:9:31\n  |\n9 |     let\
    \ delimeter = delimeter * numbers.len();\n  |                               ^\
    \ no implementation for `isize * usize`\n  |\n  = help: the trait `Mul<usize>`\
    \ is not implemented for `isize`\n  = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n            <&'a f32 as Mul<f32>>\n            <&'a f64 as\
    \ Mul<f64>>\n            <&'a i128 as Mul<i128>>\n            <&'a i16 as Mul<i16>>\n\
    \            <&'a i32 as Mul<i32>>\n            <&'a i64 as Mul<i64>>\n      \
    \      <&'a i8 as Mul<i8>>\n            <&'a isize as Mul<isize>>\n          and\
    \ 49 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().collect::<Vec<_>>().into_iter().cloned().enumerate()\n\
    \        .filter_map(|(i, value)| if i % 2 == 0 {\n            Some(numbers[i\
    \ / 2].clone() + delimeter)\n        } else {\n            None\n        }).collect::<Vec<_>>().collect()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpwdugrh4y.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().collect::<Vec<_>>().into_iter().cloned().enumerate()\n\
    \     |                         ^^^^^^ expected reference, found `isize`\n   \
    \  |\n     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `collect` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpwdugrh4y.rs:7:34\n   |\n7  |       numbers.into_iter().cloned().collect::<Vec<_>>().into_iter().cloned().enumerate()\n\
    \   |                                    ^^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = numbers.clone();\n    result.extend_from_slice(&[delimeter;\
    \ result.len()]);\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmp7pqkf9px.rs:8:43\n\
    \  |\n7 |     let mut result = numbers.clone();\n  |     -------------- help:\
    \ consider using `const` instead of `let`: `const result`\n8 |     result.extend_from_slice(&[delimeter;\
    \ result.len()]);\n  |                                           ^^^^^^ non-constant\
    \ value\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0435`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = numbers;\n    for number in result.iter_mut()\
    \ {\n        *number = number;\n    }\n    for number in numbers.iter_mut() {\n\
    \        *number += delimeter;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1cite8sx.rs:9:19\n  |\n9 |\
    \         *number = number;\n  |         -------   ^^^^^^ expected `isize`, found\
    \ `&mut isize`\n  |         |\n  |         expected due to the type of this binding\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |         *number = *number;\n\
    \  |                   +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.into_iter().cloned().collect();\n\
    \    for i in 0..numbers.len()-1 {\n        numbers.insert(i, delimeter);\n  \
    \  }\n    numbers\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpdyve_4ap.rs:7:43\n     |\n7    |     let mut numbers\
    \ = numbers.into_iter().cloned().collect();\n     |                          \
    \                 ^^^^^^ expected reference, found `isize`\n     |\n     = note:\
    \ expected reference `&_`\n                     found type `isize`\nnote: required\
    \ by a bound in `cloned`\n\nerror[E0599]: the method `collect` exists for struct\
    \ `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmpdyve_4ap.rs:7:52\n   |\n7  |       let mut numbers = numbers.into_iter().cloned().collect();\n\
    \   |                                                      ^^^^^^^ method cannot\
    \ be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n      \
    \     which is required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.cloned().skip(1))\n\
    \        .map(|(s, e)| s + delimeter + e)\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp9xekds7h.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.cloned().skip(1))\n\
    \     |                         ^^^^^^ expected reference, found `isize`\n   \
    \  |\n     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `zip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmp9xekds7h.rs:7:34\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.cloned().skip(1))\n\
    \   |                                    ^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror[E0599]:\
    \ `Vec<isize>` is not an iterator\n   --> /tmp/tmp9xekds7h.rs:7:46\n    |\n7 \
    \  |       numbers.into_iter().cloned().zip(numbers.cloned().skip(1))\n    | \
    \                                               ^^^^^^ `Vec<isize>` is not an\
    \ iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0271, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.clone();\n    numbers.insert(0,\
    \ delimeter);\n    numbers.extend(numbers.chunks(2));\n    numbers\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `Vec<isize>: Extend<&[isize]>` is not satisfied\n\
    \ --> /tmp/tmpnha5bu82.rs:9:13\n  |\n9 |     numbers.extend(numbers.chunks(2));\n\
    \  |             ^^^^^^ the trait `Extend<&[isize]>` is not implemented for `Vec<isize>`\n\
    \  |\n  = help: the following other types implement trait `Extend<A>`:\n     \
    \       <Vec<T, A> as Extend<&'a T>>\n            <Vec<T, A> as Extend<T>>\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for x in numbers.iter().rev()\
    \ {\n        result.push(x + delimeter);\n        result.push(x);\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1loux1aq.rs:10:21\n   |\n\
    10 |         result.push(x);\n   |                     ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |        \
    \ result.push(*x);\n   |                     +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.windows(2).flat_map(|x| vec![\n        x[..1],\n\
    \        delimeter,\n        x[1..],\n    ]).collect()\n}\n\nfn main() {\n   \
    \ let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi1y63ald.rs:9:9\n  |\n9 |\
    \         delimeter,\n  |         ^^^^^^^^^ expected slice `[isize]`, found `isize`\n\
    \nerror[E0277]: the size for values of type `[isize]` cannot be known at compilation\
    \ time\n   --> /tmp/tmpi1y63ald.rs:7:37\n    |\n7   |       numbers.windows(2).flat_map(|x|\
    \ vec![\n    |  _____________________________________^\n8   | |         x[..1],\n\
    9   | |         delimeter,\n10  | |         x[1..],\n11  | |     ]).collect()\n\
    \    | |_____^ doesn't have a size known at compile-time\n    |\n    = help: the\
    \ trait `Sized` is not implemented for `[isize]`\nnote: required by a bound in\
    \ `slice::<impl [T]>::into_vec`\n    = note: this error originates in the macro\
    \ `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]:\
    \ the size for values of type `[isize]` cannot be known at compilation time\n\
    \  --> /tmp/tmpi1y63ald.rs:7:37\n   |\n7  |       numbers.windows(2).flat_map(|x|\
    \ vec![\n   |  _____________________________________^\n8  | |         x[..1],\n\
    9  | |         delimeter,\n10 | |         x[1..],\n11 | |     ]).collect()\n \
    \  | |_____^ doesn't have a size known at compile-time\n   |\n   = help: the trait\
    \ `Sized` is not implemented for `[isize]`\n   = note: slice and array elements\
    \ must have `Sized` type\n   = note: this error originates in the macro `vec`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]:\
    \ the size for values of type `[isize]` cannot be known at compilation time\n\
    \   --> /tmp/tmpi1y63ald.rs:7:37\n    |\n7   |       numbers.windows(2).flat_map(|x|\
    \ vec![\n    |  _____________________________________^\n8   | |         x[..1],\n\
    9   | |         delimeter,\n10  | |         x[1..],\n11  | |     ]).collect()\n\
    \    | |_____^ doesn't have a size known at compile-time\n    |\n    = help: the\
    \ trait `Sized` is not implemented for `[isize]`\nnote: required by a bound in\
    \ `Vec`\n    = note: this error originates in the macro `vec` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror[E0277]: the trait bound\
    \ `Vec<[isize], _>: IntoIterator` is "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers;\n    if numbers.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut result = Vec::new();\n    for\
    \ i in 1..numbers.len() {\n        result.push(numbers[i - 1] + delimeter);\n\
    \        result.push(numbers[i]);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[13, 6, 14, 3, 11, 2]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpmygccfo7.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().zip(numbers.into_iter().skip(1)).map(|(left,\
    \ right)| left + delimeter + right).collect()\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpg2xlglii.rs:7:29\n\
    \    |\n6   | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n    |                ------- move occurs because `numbers` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n7   |     numbers.into_iter().zip(numbers.into_iter().skip(1)).map(|(left,\
    \ right)| left + delimeter + right).collect()\n    |             ----------- \
    \    ^^^^^^^ value used here after move\n    |             |\n    |          \
    \   `numbers` moved due to this method call\n    |\nnote: this function takes\
    \ ownership of the receiver `self`, which moves `numbers`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.len() <= 1 {\n        return numbers;\n\
    \    }\n    let mut res = Vec::new();\n    for (idx, &v) in numbers.iter().enumerate()\
    \ {\n        res.extend(v.chunks(delimeter));\n        res.extend(intersperse(v[..idx],\
    \ delimeter));\n    }\n    res\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `chunks` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp6cuilusz.rs:12:22\n   |\n12 |         res.extend(v.chunks(delimeter));\n\
    \   |                      ^^^^^^ method not found in `isize`\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmp6cuilusz.rs:13:32\n\
    \   |\n13 |         res.extend(intersperse(v[..idx], delimeter));\n   |      \
    \                          ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0599, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.into_iter();\n  \
    \  let mut out: Vec<isize> = Vec::new();\n    let mut last_num = numbers_iter.next();\n\
    \    for num in numbers_iter {\n        out.push(last_num);\n        out.push(num);\n\
    \        last_num = num;\n    }\n    out\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6fnfuohy.rs:11:18\n   |\n\
    11 |         out.push(last_num);\n   |                  ^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6fnfuohy.rs:13:20\n\
    \   |\n9  |     let mut last_num = numbers_iter.next();\n   |                \
    \        ------------------- expected due to this value\n...\n13 |         last_num\
    \ = num;\n   |                    ^^^ expected enum `Option`, found `isize`\n\
    \   |\n   = note: expected enum `Option<isize>`\n              found type `isize`\n\
    help: try wrapping the expression in `Some`\n   |\n13 |         last_num = Some(num);\n\
    \   |                    +++++   +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().zip(numbers.skip(delimeter)).collect()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp1__phqfv.rs:7:37\n\
    \    |\n7   |       numbers.into_iter().zip(numbers.skip(delimeter)).collect()\n\
    \    |                                       ^^^^ `Vec<isize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror[E0277]: a value of type `Vec<isize>` cannot\
    \ be built from an iterator over elements of type `(isize, _)`\n    --> /tmp/tmp1__phqfv.rs:7:54\n\
    \     |\n7    |     numbers.into_iter().zip(numbers.skip(delimeter)).collect()\n\
    \     |                                                      ^^^^^^^ value of\
    \ type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=(isize, _)>`\n\
    \     |\n     = help: the trait `FromIterator<(isize, _)>` is not implemented\
    \ for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for\
    \ `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    numbers_iter.skip_while(|n| n == delimeter);\n    numbers_iter.step_by(2);\n\
    \    numbers_iter.map(|n| n + delimeter).collect()\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n --> /tmp/tmpan22yycd.rs:8:35\n\
    \  |\n8 |     numbers_iter.skip_while(|n| n == delimeter);\n  |              \
    \                     ^^ no implementation for `&isize == isize`\n  |\n  = help:\
    \ the trait `PartialEq<isize>` is not implemented for `&isize`\n  = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n            f32\n \
    \           f64\n            i128\n            i16\n            i32\n        \
    \    i64\n            i8\n            isize\n          and 6 others\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n    numbers_clone.extend(vec![delimeter,\
    \ delimeter]);\n    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 7]`,\n right: `[]`', /tmp/tmpeww0g7i8.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.len() < 2 {\n        return numbers;\n\
    \    }\n    if delimeter == 1 {\n        return numbers.iter().cloned().collect();\n\
    \    }\n    numbers.iter().cloned().zip(0..numbers.len() - 1).map(|(v, i)| {\n\
    \        if i == 0 {\n            Some(v)\n        } else {\n            Some(delimeter).into_iter().chain(vec![v])\n\
    \        }\n    }).flatten().collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmpjvfifhl_.rs:17:13\n\
    \   |\n14 | /         if i == 0 {\n15 | |             Some(v)\n   | |        \
    \     ------- expected because of this\n16 | |         } else {\n17 | |      \
    \       Some(delimeter).into_iter().chain(vec![v])\n   | |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found struct `std::iter::Chain`\n18 | |         }\n\
    \   | |_________- `if` and `else` have incompatible types\n   |\n   = note: expected\
    \ enum `Option<isize>`\n            found struct `std::iter::Chain<std::option::IntoIter<isize>,\
    \ std::vec::IntoIter<isize>>`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for n in numbers\
    \ {\n        result.push(n as isize);\n        result.push(delimeter);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmp1vdo3v6c.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    assert_eq!(numbers.length(), delimeter);\n    let\
    \ mut numbers_iter = numbers.iter();\n    let mut result = vec![0; numbers.len()\
    \ + 1];\n    for num in &mut numbers_iter {\n        result.push(num);\n     \
    \   result.push(delimeter);\n    }\n    result.truncate(numbers.len());\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `length` found for struct `Vec<isize>` in\
    \ the current scope\n --> /tmp/tmp8jx8vrau.rs:7:24\n  |\n7 |     assert_eq!(numbers.length(),\
    \ delimeter);\n  |                        ^^^^^^ help: there is an associated\
    \ function with a similar name: `len`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp8jx8vrau.rs:11:21\n   |\n11 |         result.push(num);\n   |      \
    \               ^^^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n11 |         result.push(*num);\n   |                    \
    \ +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut delimter = delimeter;\n    let mut numbers = Vec::new();\n    let mut last_elem\
    \ = numbers_iter.next();\n    while let Some(elem) = last_elem {\n        numbers.push(elem);\n\
    \        let next_elem = numbers_iter.next();\n        if let Some(elem) = next_elem\
    \ {\n            numbers.push(delimter);\n        }\n        last_elem = next_elem;\n\
    \    }\n    numbers\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbtq0g7e7.rs:15:26\n   |\n\
    15 |             numbers.push(delimter);\n   |                          ^^^^^^^^\n\
    \   |                          |\n   |                          expected `&isize`,\
    \ found `isize`\n   |                          help: consider borrowing here:\
    \ `&delimter`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbtq0g7e7.rs:19:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n19 |     numbers\n   |  \
    \   ^^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n\
    \n    for i in numbers.iter().rev().skip(numbers.len() - delimeter + 1) {\n  \
    \      result.push(i, delimeter);\n    }\n\n    result\n}\n\nfn main() {\n   \
    \ let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpv1o2uw42.rs:9:56\n  |\n9 |\
    \     for i in numbers.iter().rev().skip(numbers.len() - delimeter + 1) {\n  |\
    \                                                        ^^^^^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmpv1o2uw42.rs:9:54\n\
    \  |\n9 |     for i in numbers.iter().rev().skip(numbers.len() - delimeter + 1)\
    \ {\n  |                                                      ^ no implementation\
    \ for `usize - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Sub<Rhs>`:\n\
    \            <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n      \
    \      <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n          \
    \  <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a\
    \ i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\
    \nerror[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpv1o2uw42.rs:10:16\n     |\n10   |         result.push(i, delimeter);\n\
    \     |                ^^^^ -  --------- supplied 2 arguments\n     |        \
    \        |\n     |                expected 1 argument\n     |\nnote: associated\
    \ function defined here\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut out = Vec::new();\n    numbers.iter().cloned().for_each(|x|\
    \ {\n        let mut i = x;\n        while i < out.len() {\n            out[out.len()\
    \ - 1] += delimeter;\n            i += 1;\n        }\n        out.push(x);\n \
    \   });\n    out\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpagjdjpmg.rs:10:19\n   |\n\
    10 |         while i < out.len() {\n   |                   ^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |         while i < out.len().try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpuexvmzzx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpuexvmzzx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpuexvmzzx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpuexvmzzx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers;\n    numbers_copy.truncate(numbers_copy.len()\
    \ - delimeter);\n    numbers_copy.push(delimeter);\n    numbers_copy\n}\n\nfn\
    \ main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpaqsj0i0s.rs:8:48\n  |\n8 |\
    \     numbers_copy.truncate(numbers_copy.len() - delimeter);\n  |            \
    \                                    ^^^^^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmpaqsj0i0s.rs:8:46\n\
    \  |\n8 |     numbers_copy.truncate(numbers_copy.len() - delimeter);\n  |    \
    \                                          ^ no implementation for `usize - isize`\n\
    \  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n  = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n            <&'a f32\
    \ as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n\
    \            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n      \
    \      <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a\
    \ isize as Sub<isize>>\n          and 48 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = numbers_iter.collect::<Vec<_>>();\n    while !numbers_iter.next().is_some()\
    \ {\n        result.push(delimeter);\n    }\n    result.append(numbers_iter)\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp64hqg2o_.rs:12:19\n   |\n\
    12 |     result.append(numbers_iter)\n   |                   ^^^^^^^^^^^^ expected\
    \ `&mut Vec<isize>`, found struct `Cloned`\n   |\n   = note: expected mutable\
    \ reference `&mut Vec<isize>`\n                         found struct `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp64hqg2o_.rs:12:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n12 |     result.append(numbers_iter)\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n           found unit type `()`\nnote:\
    \ method `append` modifies its receiver in-place\n  --> /tmp/tmp64hqg2o_.rs:12:12\n\
    \   |\n12 |     result.append(numbers_iter)\n   |     ------ ^^^^^^ this call\
    \ modifies `result` in-place\n   |     |\n   |     you probably want to use this\
    \ value after calling the method...\n   = note: ...instead of the `()` output\
    \ of method `append`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.into_iter().collect::<Vec<_>>();\n\
    \    let len = numbers.len();\n    numbers.iter_mut().for_each(|&x| {\n      \
    \  *x += delimeter;\n    });\n    numbers\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2km1d_go.rs:9:34\n  |\n9 |\
    \     numbers.iter_mut().for_each(|&x| {\n  |                                \
    \  ^--\n  |                                  ||\n  |                         \
    \         |expected due to this\n  |                                  types differ\
    \ in mutability\n  |                                  help: did you mean `x`:\
    \ `&&mut isize`\n  |\n  = note: expected mutable reference `&mut isize`\n    \
    \                 found reference `&_`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.to_vec();\n    for (index,\
    \ &num) in numbers.iter().enumerate() {\n        if index != 0 {\n           \
    \ numbers.insert(index + delimeter, num);\n        }\n    }\n    numbers\n}\n\n\
    fn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr7irjvmt.rs:10:36\n   |\n\
    10 |             numbers.insert(index + delimeter, num);\n   |               \
    \                     ^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add `isize` to `usize`\n  --> /tmp/tmpr7irjvmt.rs:10:34\n   |\n10 | \
    \            numbers.insert(index + delimeter, num);\n   |                   \
    \               ^ no implementation for `usize + isize`\n   |\n   = help: the\
    \ trait `Add<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n\
    \             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n  \
    \           <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n      \
    \       <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n            \
    \ <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.windows(2)\n        .map(|window| window.join(delimeter).unwrap())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `join` exists for reference `&[isize]`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmp3wm8ooln.rs:8:30\n  |\n8 |   \
    \      .map(|window| window.join(delimeter).unwrap())\n  |                   \
    \           ^^^^ method cannot be called on `&[isize]` due to unsatisfied trait\
    \ bounds\n  |\n  = note: the following trait bounds were not satisfied:\n    \
    \      `[isize]: Join<_>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter()\n        .zip(0..numbers.len()\
    \ as isize)\n        .map(|(index, num)| {\n            if index == 0 {\n    \
    \            num\n            } else {\n                let start = num - delimeter;\n\
    \                let end = if index == numbers.len() - 1 {\n                 \
    \   num\n                } else {\n                    num + delimeter\n     \
    \           };\n\n                numbers[start..end]\n            }\n       \
    \ })\n        .collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zc1oyfn.rs:14:39\n   |\n\
    14 |                 let end = if index == numbers.len() - 1 {\n   |         \
    \                              ^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n14 |                 let end = if index == (numbers.len()\
    \ - 1).try_into().unwrap() {\n   |                                       +   \
    \              +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `std::ops::Range<isize>`\n  --> /tmp/tmp4zc1oyfn.rs:20:17\n  \
    \ |\n20 |                 numbers[start..end]\n   |                 ^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `std::ops::Range<isize>`\n\
    \   = help: the following other types implement trait `SliceIndex<T>`:\n     \
    \        <std::ops::Range<usize> as SliceIndex<[T]>>\n             <std::ops::Range<usize>\
    \ as SliceIndex<str>>\n   = note: required because of the requirements on the\
    \ impl of `Index<std::ops::Range<isize>>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter()\n        .zip(numbers.into_iter().skip(1))\n\
    \        .map(|(a, b)| a + delimeter + b)\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp6erhmgrt.rs:8:14\n\
    \    |\n6   | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n    |                ------- move occurs because `numbers` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n7   |     numbers.into_iter()\n \
    \   |             ----------- `numbers` moved due to this method call\n8   | \
    \        .zip(numbers.into_iter().skip(1))\n    |              ^^^^^^^ value used\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `numbers`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        return Vec::new();\n\
    \    }\n\n    let mut numbers_slice = numbers.to_vec();\n    numbers_slice.reserve(numbers_slice.len()\
    \ + delimeter);\n\n    numbers_slice.append(&delimeter);\n    let mut current\
    \ = &numbers_slice.last().unwrap();\n    let mut current_ptr = &mut current;\n\
    \    for i in 0..numbers.len() {\n        numbers_slice.insert(current_ptr, numbers[i]);\n\
    \        current_ptr = &mut numbers_slice[numbers_slice.len() - 1];\n    }\n\n\
    \    numbers_slice\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2ju4h3g_.rs:12:49\n   |\n\
    12 |     numbers_slice.reserve(numbers_slice.len() + delimeter);\n   |       \
    \                                          ^^^^^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmp2ju4h3g_.rs:12:47\n\
    \   |\n12 |     numbers_slice.reserve(numbers_slice.len() + delimeter);\n   |\
    \                                               ^ no implementation for `usize\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2ju4h3g_.rs:14:26\n   |\n14 |     numbers_slice.append(&delimeter);\n\
    \   |                          ^^^^^^^^^^ types differ in mutability\n   |\n \
    \  = note: expected mutable reference `&mut Vec<isize>`\n                    \
    \  found reference `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2ju4h3g_.rs:18:30\n\
    \   |\n18 |         numbers_slice.insert(current_ptr, numbers[i]);\n   |     \
    \                         ^^^^^^^^^^^ expected `usize`, found `&mut &&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2ju4h3g_.rs:19:23\n   |\n16 |\
    \     let mut current_ptr = &mut current;\n   |                           ------------\
    \ expected due to this value\n...\n19 |         current_ptr = &mut numbers_slice[numbers_slice.len()\
    \ - 1];\n   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&&isize`, found `isize`\n   |\n   = note: expected mutable reference\
    \ `&mut &&isize`\n              found mutable reference `&mut isize`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.to_vec();\n    numbers.resize((numbers.get()\
    \ + numbers.get() + numbers.get()) / 2, numbers.get());\n    for number in numbers\
    \ {\n        numbers.insert(0, number);\n    }\n    numbers.insert(0, delimeter);\n\
    \    numbers\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpbposs8jf.rs:8:29\n    |\n8   |     numbers.resize((numbers.get()\
    \ + numbers.get() + numbers.get()) / 2, numbers.get());\n    |               \
    \              ^^^- supplied 0 arguments\n    |                             |\n\
    \    |                             expected 1 argument\n    |\nnote: associated\
    \ function defined here\n\nerror[E0061]: this function takes 1 argument but 0\
    \ arguments were supplied\n   --> /tmp/tmpbposs8jf.rs:8:45\n    |\n8   |     numbers.resize((numbers.get()\
    \ + numbers.get() + numbers.get()) / 2, numbers.get());\n    |               \
    \                              ^^^- supplied 0 arguments\n    |              \
    \                               |\n    |                                     \
    \        expected 1 argument\n    |\nnote: associated function defined here\n\n\
    error[E0369]: cannot add `Option<&_>` to `Option<&_>`\n --> /tmp/tmpbposs8jf.rs:8:35\n\
    \  |\n8 |     numbers.resize((numbers.get() + numbers.get() + numbers.get()) /\
    \ 2, numbers.get());\n  |                     ------------- ^ ------------- Option<&_>\n\
    \  |                     |\n  |                     Option<&_>\n\nerror[E0061]:\
    \ this function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmpbposs8jf.rs:8:61\n\
    \    |\n8   |     numbers.resize((numbers.get() + numbers.get() + numbers.get())\
    \ / 2, numbers.get());\n    |                                                \
    \             ^^^- supplied 0 arguments\n    |                               \
    \                              |\n    |                                      \
    \                       expected 1 argument\n    |\nnote: associated function\
    \ defined here\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpbposs8jf.rs:8:81\n    |\n8   |     numbers.resize((numbers.get()\
    \ + numbers.get() + numbers.get()) / 2, numbers.get());\n    |               \
    \                                                                  ^^^- supplied\
    \ 0 arguments\n    |                                                         \
    \       "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        return numbers;\n\
    \    }\n\n    if numbers.len() <= 1 {\n        return vec![numbers[0], numbers[0]];\n\
    \    }\n\n    let mut numbers_slice = numbers.to_vec();\n    numbers_slice.insert(0,\
    \ 0);\n    numbers_slice.insert(0, delimeter);\n    numbers_slice.extend(numbers_slice.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_slice\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `numbers_slice` as mutable because it is also\
    \ borrowed as immutable\n  --> /tmp/tmppma4uy8s.rs:18:5\n   |\n18 |     numbers_slice.extend(numbers_slice.iter().skip(1).collect::<Vec<_>>());\n\
    \   |     ^^^^^^^^^^^^^^------^--------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |     |             |      |\n   |     |             |      immutable borrow\
    \ occurs here\n   |     |             immutable borrow later used by call\n  \
    \ |     mutable borrow occurs here\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.len() == 0 {\n        return vec![];\n\
    \    }\n    if numbers.len() <= 1 {\n        return numbers;\n    }\n    let mut\
    \ out = Vec::new();\n    for number in numbers {\n        out.push(number);\n\
    \        out.push(delimeter);\n    }\n    out.pop();\n    out\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_slice = numbers.to_vec();\n    numbers_slice.insert(0,\
    \ 0);\n    numbers_slice[numbers_slice.len() - 1] = numbers_slice.len() - 1;\n\
    \    let mut res = Vec::with_capacity(numbers_slice.len() * 2);\n    numbers.iter().for_each(|n|\
    \ {\n        res.extend(&mut [n as isize..(n - 1)]);\n        res.extend(&mut\
    \ [n + delimeter as isize..(numbers_slice[n - 1] as isize)].iter().cloned());\n\
    \    });\n    res\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnxvgxryo.rs:9:46\n  |\n9 |\
    \     numbers_slice[numbers_slice.len() - 1] = numbers_slice.len() - 1;\n  | \
    \    --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n  |     |\n  |     expected due to the type of this\
    \ binding\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n \
    \ --> /tmp/tmpnxvgxryo.rs:13:51\n   |\n13 |         res.extend(&mut [n + delimeter\
    \ as isize..(numbers_slice[n - 1] as isize)].iter().cloned());\n   |         \
    \                                          ^^^^^^^^^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0271]: type mismatch resolving `<std::slice::Iter<'_,\
    \ std::ops::Range<isize>> as Iterator>::Item == &&mut std::ops::Range<isize>`\n\
    \   --> /tmp/tmpnxvgxryo.rs:13:20\n    |\n13  |         res.extend(&mut [n + delimeter\
    \ as isize..(numbers_slice[n - 1] as isize)].iter().cloned());\n    |        \
    \     ------ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected mutable reference, found struct `std::ops::Range`\n    |          \
    \   |\n    |             required by a bound introduced by this call\n    |\n\
    \    = note: expected reference `&&mut std::ops::Range<isize>`\n             \
    \  found reference `&std::ops::Range<isize>`\n    = note: required because of\
    \ the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ std::ops::Range<isize>>>`\nnote: required by a bound in `extend`\n\nerror[E0277]:\
    \ the trait bound `Cloned<std::slice::Iter<'_, std::ops::Range<isize>>>: Iterator`\
    \ is not satisfied\n   --> /tmp/tmpnxvgxryo.rs:13:20\n    |\n13  |         res.extend(&mut\
    \ [n + delimeter as isize..(numbers_slice[n - 1] as isize)].iter().cloned());\n\
    \    |             ------ -^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    assert!((numbers.len() % delimeter) == 0, \"input\
    \ vector should have a number of elements divisible by the delimeter.\");\n  \
    \  let mut numbers_slice = numbers.split_at_mut(numbers.len());\n    for (_, number)\
    \ in numbers_slice.clone().into_iter().enumerate() {\n        number.push(delimeter);\n\
    \    }\n    numbers_slice\n        .into_iter()\n        .cloned()\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb5ns1kyn.rs:7:30\n  |\n7 |\
    \     assert!((numbers.len() % delimeter) == 0, \"input vector should have a number\
    \ of elements divisible by the delimeter.\");\n  |                           \
    \   ^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot mod `usize`\
    \ by `isize`\n --> /tmp/tmpb5ns1kyn.rs:7:28\n  |\n7 |     assert!((numbers.len()\
    \ % delimeter) == 0, \"input vector should have a number of elements divisible\
    \ by the delimeter.\");\n  |                            ^ no implementation for\
    \ `usize % isize`\n  |\n  = help: the trait `Rem<isize>` is not implemented for\
    \ `usize`\n  = help: the following other types implement trait `Rem<Rhs>`:\n \
    \           <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n       \
    \     <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n           \
    \ <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8\
    \ as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    \nerror[E0599]: the method `clone` exists for tuple `(&mut [isize], &mut [isize])`,\
    \ but its trait bounds were not satisfied\n --> /tmp/tmpb5ns1kyn.rs:9:38\n  |\n\
    9 |     for (_, number) in numbers_slice.clone().into_iter().enumerate() {\n \
    \ |                                      ^^^^^ method cannot be called on `(&mut\
    \ [isize], &mut [isize])` due to unsatisfied trait bounds\n  |\n  = note: the\
    \ following trait bounds were not satisfied:\n          `&mut [isize]: Clone`\n\
    \          which is required by `(&mut [isize], &mut [isize]): Clone`\n\nerror[E0599]:\
    \ the method `into_iter` exists for tuple `(&mut [isize], &mut [isize])`, but\
    \ its trait bounds were not satisfied\n  --> /tmp/tmpb5ns1kyn.rs:13:10\n   |\n\
    13 |         .into_iter()\n   |          ^^^^^^^^^ method cannot be called on\
    \ `(&mut [isize], &mut [isize])` due to unsatisfied trait bounds\n   |\n   = note:\
    \ the following trait bounds were not satisfied:\n           `(&mut [isize], &mut\
    \ [isize]): Iterator`\n           which is required by `(&mut [isize], &mut [isize]):\
    \ IntoIterator`\n           `&(&mut [isize], &mut [isize]): "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        return Vec::new();\n\
    \    }\n\n    let mut numbers_copy = numbers;\n    numbers_copy.insert(0, 0);\n\
    \n    let mut delims_copy = numbers_copy.clone();\n    delims_copy.insert(numbers_copy.len()\
    \ - 1, delimeter);\n\n    let mut current_delimeter = 0;\n    let mut current\
    \ = numbers_copy[0];\n    let mut delims = delims_copy;\n    let mut output =\
    \ Vec::new();\n\n    while current != 0 {\n        let mut output_copy = output.clone();\n\
    \        output_copy.push((current % 10) as isize);\n\n        if !delims.is_empty()\
    \ {\n            let next_delim = delims.pop().unwrap();\n            let remainder\
    \ = current / 10;\n            output_copy.push((remainder + next_delim / 2) as\
    \ isize);\n            current_delimeter = next_delim % 2;\n        }\n\n    \
    \    current = numbers_copy.pop();\n        delims = delims_copy;\n        output\
    \ = output_copy;\n    }\n\n    output\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4owy5ng9.rs:33:19\n   |\n\
    18 |     let mut current = numbers_copy[0];\n   |                       ---------------\
    \ expected due to this value\n...\n33 |         current = numbers_copy.pop();\n\
    \   |                   ^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n\
    \    }\n    numbers.chunks_exact(2).flat_map(|x| {\n        x.into_iter().fold(vec![],\
    \ |mut acc: Vec<isize>, num| {\n            acc.push((num + delimeter) as isize);\n\
    \            acc\n        })\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[13, 14, 11, 10]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpdjbbpr0_.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    if numbers.is_empty()\
    \ {\n        return result;\n    }\n    let mut iter = numbers.iter();\n    for\
    \ x in iter.next() {\n        result.push(x);\n        if numbers.len() > 1 {\n\
    \            result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuwqzfobc.rs:13:21\n   |\n\
    13 |         result.push(x);\n   |                     ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |        \
    \ result.push(*x);\n   |                     +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers;\n\n    for n in\
    \ numbers_copy.clone() {\n        numbers_copy.insert(numbers.iter().position(|&x|\
    \ x == n).unwrap_or(numbers.len()), delimeter);\n    }\n\n    numbers_copy\n}\n\
    \nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `numbers`\n  --> /tmp/tmpu3enob90.rs:10:29\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                ------- move occurs because `numbers` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n7  |     let mut numbers_copy = numbers;\n\
    \   |                            ------- value moved here\n...\n10 |         numbers_copy.insert(numbers.iter().position(|&x|\
    \ x == n).unwrap_or(numbers.len()), delimeter);\n   |                        \
    \     ^^^^^^^^^^^^^^ value borrowed here after move\n   |\n   = note: borrow occurs\
    \ due to deref coercion to `[isize]`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    if\
    \ numbers_copy.len() % 2 == 1 {\n        numbers_copy.push(delimeter);\n    }\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 6, 3, 2]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpkaha0mjf.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut res = Vec::with_capacity(numbers.len());\n\
    \    for num in numbers {\n        res.push(num);\n        res.push(delimeter);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmp3mwb6o5d.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut it = numbers.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut len = 0;\n    let mut i = 0;\n    while i < it.len() {\n        it.insert(i,\
    \ delimeter);\n        i += 1;\n        len += 1;\n    }\n    it\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().chunks_exact(2).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmph3q31it_.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().chunks_exact(2).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: no method named `chunks_exact` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmph3q31it_.rs:7:34\n  |\n7 |     numbers.into_iter().cloned().chunks_exact(2).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                  ^^^^^^^^^^^^\
    \ method not found in `Cloned<std::vec::IntoIter<isize>>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().zip(numbers.into_iter().cloned()).flat_map(|(a,b)|\
    \ {\n        vec![a, delimeter, b, delimeter]\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp16zhnfkq.rs:7:49\n     |\n7    |     numbers.into_iter().zip(numbers.into_iter().cloned()).flat_map(|(a,b)|\
    \ {\n     |                                                 ^^^^^^ expected reference,\
    \ found `isize`\n     |\n     = note: expected reference `&_`\n              \
    \       found type `isize`\nnote: required by a bound in `cloned`\n\nerror[E0271]:\
    \ type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item == &_`\n\
    \ --> /tmp/tmp16zhnfkq.rs:7:29\n  |\n7 |     numbers.into_iter().zip(numbers.into_iter().cloned()).flat_map(|(a,b)|\
    \ {\n  |                         --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found reference\n  |                         |\n  |                        \
    \ required by a bound introduced by this call\n  |\n  = note:   expected type\
    \ `isize`\n          found reference `&_`\n  = note: required because of the requirements\
    \ on the impl of `Iterator` for `Cloned<std::vec::IntoIter<isize>>`\n  = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `Cloned<std::vec::IntoIter<isize>>`\n\
    \nerror[E0599]: `Zip<std::vec::IntoIter<isize>, Cloned<std::vec::IntoIter<isize>>>`\
    \ is not an iterator\n  --> /tmp/tmp16zhnfkq.rs:7:59\n   |\n7  |        numbers.into_iter().zip(numbers.into_iter().cloned()).flat_map(|(a,b)|\
    \ {\n   |                                                              ^^^^^^^^\
    \ `Zip<std::vec::IntoIter<isize>, Cloned<std::vec::IntoIter<isize>>>` is not an\
    \ iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `Zip<std::vec::IntoIter<isize>, Cloned<std::vec::IntoIter<isize>>>:\
    \ Iterator`\n           `Zip<std::vec::IntoIter<isize>, Cloned<std::vec::IntoIter<isize>>>:\
    \ Iterator`\n           which is required by `&mut Zip<std::vec::IntoIter<isize>,\
    \ Cloned<std::vec::IntoIter<isize>>>: Iterator`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0271, E"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        return Vec::new();\n\
    \    }\n\n    let mut buffer = Vec::new();\n\n    for i in numbers.iter().cloned().rev()\
    \ {\n        buffer.push(i);\n\n        if buffer.len() >= delimeter {\n     \
    \       buffer.push(delimter);\n        }\n    }\n\n    buffer\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `delimter` in this scope\n  --> /tmp/tmpbh75orla.rs:17:25\n\
    \   |\n17 |             buffer.push(delimter);\n   |                         ^^^^^^^^\
    \ help: a local variable with a similar name exists: `delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbh75orla.rs:16:28\n   |\n16 |         if buffer.len()\
    \ >= delimeter {\n   |                            ^^^^^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |         if buffer.len() >= delimeter.try_into().unwrap()\
    \ {\n   |                                     ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = numbers.clone();\n    for i in\
    \ 1..numbers.len() {\n        result[i - 1] = result[i - 1] + delimeter;\n   \
    \     result.insert(i, delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[13, 16, 16, 8, 6, 3, 2]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpyfpppvwa.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers;\n    numbers.into_iter().cloned().intersperse(delimeter).cloned().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp7xpzi3ox.rs:8:25\n     |\n8    |     numbers.into_iter().cloned().intersperse(delimeter).cloned().collect::<Vec<isize>>()\n\
    \     |                         ^^^^^^ expected reference, found `isize`\n   \
    \  |\n     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `intersperse`\
    \ exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmp7xpzi3ox.rs:8:34\n   |\n8  |       numbers.into_iter().cloned().intersperse(delimeter).cloned().collect::<Vec<isize>>()\n\
    \   |                                    ^^^^^^^^^^^ method cannot be called on\
    \ `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait bounds\n   |\n\
    \   = note: the following trait bounds were not satisfied:\n           `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n      \
    \     which is required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut numbers_iterator = numbers.iter().cloned();\n    let mut index =\
    \ numbers_iterator.next();\n    let mut result = vec![];\n    while let Some(i)\
    \ = index {\n        result.push(*i);\n        if numbers_iterator.peek().is_none()\
    \ {\n            result.push(delimeter);\n        }\n        index = numbers_iterator.next();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpsg7t1dxe.rs:7:43\n     |\n7    |     let mut numbers\
    \ = numbers.into_iter().cloned().collect::<Vec<_>>();\n     |                \
    \                           ^^^^^^ expected reference, found `isize`\n     |\n\
    \     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `collect` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpsg7t1dxe.rs:7:52\n   |\n7  |       let mut numbers\
    \ = numbers.into_iter().cloned().collect::<Vec<_>>();\n   |                  \
    \                                    ^^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    assert!(\n        numbers.len() > 1,\n        \"\
    Input list should not be empty: please provide at least one element.\"\n    );\n\
    \n    let mut output: Vec<isize> = vec![];\n    let mut last_number: isize = numbers[0];\n\
    \    for number in numbers.iter().skip(1) {\n        output.push(last_number);\n\
    \        last_number = number;\n    }\n    output.push(last_number);\n    output\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmkob8fa_.rs:16:23\n   |\n\
    13 |     let mut last_number: isize = numbers[0];\n   |                      \
    \    ----- expected due to this type\n...\n16 |         last_number = number;\n\
    \   |                       ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n16 |         last_number = *number;\n\
    \   |                       +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_vec = Vec::new();\n    for number\
    \ in numbers {\n        numbers_vec.push(number);\n    }\n    for i in numbers_vec.iter().cloned().rev()\
    \ {\n        numbers_vec.insert(numbers_vec.len() - i - 1, delimeter);\n    }\n\
    \    return numbers_vec;\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6ybfy1g2.rs:12:48\n   |\n\
    12 |         numbers_vec.insert(numbers_vec.len() - i - 1, delimeter);\n   | \
    \                                               ^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp6ybfy1g2.rs:12:46\n\
    \   |\n12 |         numbers_vec.insert(numbers_vec.len() - i - 1, delimeter);\n\
    \   |                                              ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().zip(numbers.iter().cloned()).map(|(a,\
    \ b)| a + delimeter * b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmpy26qrvbd.rs:7:29\n\
    \    |\n6   | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n    |                ------- move occurs because `numbers` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n7   |     numbers.into_iter().zip(numbers.iter().cloned()).map(|(a,\
    \ b)| a + delimeter * b).collect()\n    |             -----------     ^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |             |\n    |             `numbers`\
    \ moved due to this method call\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `numbers`\n    = note: borrow occurs due to\
    \ deref coercion to `[isize]`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers: Vec<_> = numbers.into_iter().cloned().collect();\n\
    \    numbers.insert(numbers.len() - 1, delimeter);\n    numbers.insert(0, delimeter);\n\
    \    numbers.into_iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmplnsqbb7i.rs:7:51\n     |\n7    |     let mut numbers:\
    \ Vec<_> = numbers.into_iter().cloned().collect();\n     |                   \
    \                                ^^^^^^ expected reference, found `isize`\n  \
    \   |\n     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `collect` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmplnsqbb7i.rs:7:60\n   |\n7  |       let mut numbers:\
    \ Vec<_> = numbers.into_iter().cloned().collect();\n   |                     \
    \                                         ^^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror[E0271]:\
    \ type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item == &_`\n\
    \    --> /tmp/tmplnsqbb7i.rs:10:25\n     |\n10   |     numbers.into_iter().cloned().collect()\n\
    \     |                         ^^^^^^ expected reference, found `isize`\n   \
    \  |\n     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `collect` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmplnsqbb7i.rs:10:34\n   |\n10 |       numbers.into_iter().cloned().collect()\n\
    \   |                                    ^^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ ="
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().zip(numbers.into_iter().skip(1)).map(|(x,\
    \ y)| x + delimeter + y).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpaxl3_g_g.rs:7:29\n\
    \    |\n6   | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n    |                ------- move occurs because `numbers` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n7   |     numbers.into_iter().zip(numbers.into_iter().skip(1)).map(|(x,\
    \ y)| x + delimeter + y).collect()\n    |             -----------     ^^^^^^^\
    \ value used here after move\n    |             |\n    |             `numbers`\
    \ moved due to this method call\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.len() <= 1 {\n        return vec![numbers[0]];\n\
    \    }\n\n    let mut numbers_slice = numbers.to_vec();\n    let mut num_len =\
    \ numbers_slice.len();\n    let mut offset = 0;\n    while num_len > 1 {\n   \
    \     let first_num = numbers_slice.get_mut(0);\n        let last_num = numbers_slice.get_mut(num_len\
    \ - 1);\n        let num_len = num_len - 1;\n        numbers_slice.insert(0, first_num\
    \ + offset);\n        numbers_slice.set_len(num_len + 1);\n        numbers_slice[num_len]\
    \ = last_num + offset;\n        offset = delimeter;\n    }\n    numbers_slice\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `{integer}` to `Option<&mut isize>`\n  --> /tmp/tmptxxovtx8.rs:18:43\n\
    \   |\n18 |         numbers_slice.insert(0, first_num + offset);\n   |       \
    \                          --------- ^ ------ {integer}\n   |                \
    \                 |\n   |                                 Option<&mut isize>\n\
    \nerror[E0369]: cannot add `{integer}` to `Option<&mut isize>`\n  --> /tmp/tmptxxovtx8.rs:20:43\n\
    \   |\n20 |         numbers_slice[num_len] = last_num + offset;\n   |        \
    \                          -------- ^ ------ {integer}\n   |                 \
    \                 |\n   |                                  Option<&mut isize>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for\
    \ i in 1..=numbers.len() {\n        result.push(numbers[i - 1]);\n        result.push(i);\n\
    \        result.push(numbers[i]);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpso4mt_st.rs:10:21\n   |\n\
    10 |         result.push(i);\n   |                     ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n10 |         result.push(i.try_into().unwrap());\n\
    \   |                      ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().zip((numbers.iter().skip(1)).take(numbers.len()\
    \ - 1).collect()).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `(isize, _)`\n    --> /tmp/tmpuba84bf1.rs:7:89\n     |\n\
    7    |     numbers.into_iter().zip((numbers.iter().skip(1)).take(numbers.len()\
    \ - 1).collect()).collect()\n     |                                          \
    \                                               ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=(isize, _)>`\n     |\n     =\
    \ help: the trait `FromIterator<(isize, _)>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut output: Vec<isize> = vec![];\n    for n\
    \ in numbers {\n        output.push(n);\n        if output.len() % delimeter ==\
    \ 0 {\n            output.push(delimeter);\n        }\n    }\n    output\n}\n\n\
    fn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8d9k__sx.rs:10:27\n   |\n\
    10 |         if output.len() % delimeter == 0 {\n   |                        \
    \   ^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot mod `usize`\
    \ by `isize`\n  --> /tmp/tmp8d9k__sx.rs:10:25\n   |\n10 |         if output.len()\
    \ % delimeter == 0 {\n   |                         ^ no implementation for `usize\
    \ % isize`\n   |\n   = help: the trait `Rem<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Rem<Rhs>`:\n          \
    \   <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a\
    \ i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32\
    \ as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n\
    \             <&'a isize as Rem<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for &n in numbers\
    \ {\n        result.push(n);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8uy7hwki.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.iter().cloned().zip(numbers.iter().cloned()).filter_map(|(a,\
    \ b)| {\n        if a != delimeter {\n            Some(b + 1)\n        } else\
    \ {\n            None\n        }\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 7, 4, 3]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpu34stj02.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_cloned = numbers.clone();\n    let\
    \ mut numbers_cloned_iter = numbers_cloned.iter().cloned().chain(numbers.iter().cloned());\n\
    \    let mut num_cloned = delimeter.clone();\n    let mut num_cloned_iter = num_cloned.iter().cloned();\n\
    \n    let mut output = vec![0; numbers_cloned.len()];\n\n    loop {\n        if\
    \ numbers_cloned_iter.next().is_some() {\n            numbers_cloned_iter = numbers_cloned_iter.chain(numbers.iter().cloned());\n\
    \            output.push(num_cloned_iter.next());\n        } else {\n        \
    \    break;\n        }\n\n        if num_cloned_iter.next().is_some() {\n    \
    \        num_cloned_iter = num_cloned_iter.chain(delimeter.iter().cloned());\n\
    \            output.push(numbers_cloned_iter.next());\n        } else {\n    \
    \        break;\n        }\n    }\n\n    output\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp3hty4se4.rs:10:42\n   |\n10 |     let mut num_cloned_iter\
    \ = num_cloned.iter().cloned();\n   |                                        \
    \  ^^^^ method not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3hty4se4.rs:16:35\n\
    \   |\n8  |     let mut numbers_cloned_iter = numbers_cloned.iter().cloned().chain(numbers.iter().cloned());\n\
    \   |                                   -------------------------------------------------------------\
    \ expected due to this value\n...\n16 |             numbers_cloned_iter = numbers_cloned_iter.chain(numbers.iter().cloned());\n\
    \   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Cloned`, found struct `std::iter::Chain`\n   |\n   = note:\
    \ expected struct `std::iter::Chain<Cloned<std::slice::Iter<'_, _>>, Cloned<std::slice::Iter<'_,\
    \ _>>>`\n              found struct `std::iter::Chain<std::iter::Chain<Cloned<std::slice::Iter<'_,\
    \ _>>, Cloned<std::slice::Iter<'_, isize>>>, Cloned<std::slice::Iter<'_, _>>>`\n\
    \nerror[E0599]: no method named `iter` found for type `isize` in the current scope\n\
    \  --> /tmp/tmp3hty4se4.rs:23:63\n   |\n23 |             num_cloned_iter = num_cloned_iter.chain(delimeter.iter().cloned());\n\
    \   |                                                               ^^^^ method\
    \ not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3hty4se4.rs:24:25\n\
    \   |\n24 |             output.push(numbers_cloned_iter.next());\n   |       \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected integer, found enum `Option`\n\
    \   |\n   = note: expected type `{integer}`\n              found enum `Option<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    if numbers.len()\
    \ <= 0 {\n        result.push(delimeter);\n    } else {\n        let mut last\
    \ = numbers[0];\n        let mut current = delimeter;\n        for i in 1..numbers.len()\
    \ {\n            if current == delimeter {\n                result.push(last);\n\
    \                last = numbers[i];\n                current = delimeter;\n  \
    \          } else {\n                last = current;\n                result.push(numbers[i]);\n\
    \                current = numbers[i];\n            }\n        }\n        result.push(last);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpgk9euef1.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().enumerate().flat_map(|(i, number)|\
    \ {\n        if i > 0 {\n            vec![i, *number].iter().cloned().chain(vec![delimeter])\n\
    \        } else {\n            vec![*number]\n        }\n    }).collect()\n}\n\
    \nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpzzklrxg0.rs:9:21\n\
    \  |\n9 |             vec![i, *number].iter().cloned().chain(vec![delimeter])\n\
    \  |                     ^^^^^^^\n\nerror[E0271]: type mismatch resolving `<Vec<isize>\
    \ as IntoIterator>::Item == usize`\n   --> /tmp/tmpzzklrxg0.rs:9:46\n    |\n9\
    \   |             vec![i, *number].iter().cloned().chain(vec![delimeter])\n  \
    \  |                                              ^^^^^ expected `usize`, found\
    \ `isize`\n    |\nnote: required by a bound in `std::iter::Iterator::chain`\n\n\
    error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpzzklrxg0.rs:11:18\n\
    \   |\n11 |             vec![*number]\n   |                  ^^^^^^^\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0614.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n\
    \    }\n\n    let mut index = numbers.iter().skip(1).next().unwrap();\n    let\
    \ mut result = vec![numbers[0]];\n\n    for value in numbers {\n        result.insert(index,\
    \ value);\n        index += delimeter;\n    }\n\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzxbr9b4q.rs:15:23\n   |\n\
    15 |         result.insert(index, value);\n   |                       ^^^^^ expected\
    \ `usize`, found `&isize`\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `&isize`\n  --> /tmp/tmpzxbr9b4q.rs:16:9\n   |\n16 |    \
    \     index += delimeter;\n   |         -----^^^^^^^^^^^^^\n   |         |\n \
    \  |         cannot use `+=` on type `&isize`\n   |\nhelp: `+=` can be used on\
    \ `isize`, you can dereference `index`\n   |\n16 |         *index += delimeter;\n\
    \   |         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0368.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.iter()\n        .cloned()\n        .zip(0..numbers.len())\n\
    \        .map(|(v1, v2)| (*v1 + delimeter, *v2))\n        .collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpl6b2offt.rs:10:26\n\
    \   |\n10 |         .map(|(v1, v2)| (*v1 + delimeter, *v2))\n   |            \
    \              ^^^\n\nerror[E0614]: type `usize` cannot be dereferenced\n  -->\
    \ /tmp/tmpl6b2offt.rs:10:43\n   |\n10 |         .map(|(v1, v2)| (*v1 + delimeter,\
    \ *v2))\n   |                                           ^^^\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        return numbers;\n\
    \    }\n    let mut numbers_copy = numbers.to_owned();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<isize>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[8, 5, 6, 3, 2, 5, 6, 3, 2]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpn3z79blc.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut len = 0;\n    for &n in numbers {\n    \
    \    if len > 0 {\n            numbers[len - 1] += delimeter;\n        }\n   \
    \     len += 1;\n    }\n    numbers\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuc077p5a.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_vec = numbers.to_vec();\n    numbers_vec.resize((numbers_vec.len()\
    \ + 1) / 2, 0);\n    for i in 0..numbers_vec.len() {\n        numbers_vec[i *\
    \ 2 + 1] = delimeter;\n    }\n    numbers_vec\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 2 but the index\
    \ is 3', /tmp/tmpm0an11th.rs:10:9\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers[..numbers.len() - delimeter + 2].into_iter().cloned()\n\
    \        .chain(numbers.into_iter().skip(delimeter))\n        .cloned()\n    \
    \    .collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyrt43bpo.rs:7:31\n  |\n7 |\
    \     numbers[..numbers.len() - delimeter + 2].into_iter().cloned()\n  |     \
    \                          ^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n --> /tmp/tmpyrt43bpo.rs:7:29\n  |\n7\
    \ |     numbers[..numbers.len() - delimeter + 2].into_iter().cloned()\n  |   \
    \                          ^ no implementation for `usize - isize`\n  |\n  = help:\
    \ the trait `Sub<isize>` is not implemented for `usize`\n  = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n\
    \            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n    \
    \        <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n          \
    \  <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a isize\
    \ as Sub<isize>>\n          and 48 others\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpyrt43bpo.rs:8:41\n  |\n8 |         .chain(numbers.into_iter().skip(delimeter))\n\
    \  |                                         ^^^^^^^^^ expected `usize`, found\
    \ `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n  |\n8 |         .chain(numbers.into_iter().skip(delimeter.try_into().unwrap()))\n\
    \  |                                                  ++++++++++++++++++++\n\n\
    error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as Iterator>::Item\
    \ == &&_`\n --> /tmp/tmpyrt43bpo.rs:9:10\n  |\n9 |         .cloned()\n  |    \
    \      ^^^^^^ expected reference, found `isize`\n  |\n  = note: expected reference\
    \ `&&_`\n             found reference `&isize`\n  = note: required because of\
    \ the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n  = note: 1 redundant requirement hidden\n  = note: required because\
    \ of the requirements on the impl of `Iterator` for `std::iter::Chain<Cloned<std::slice::Iter<'_,\
    \ isize>>, Skip<std::vec::IntoIter<isize>>>`\n\nerror[E0271]: type mismatch resolving\
    \ `<Skip<std::vec::IntoIter<isize>> as Iterator>::Item == &_`\n --> /tmp/tmpyrt"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        return numbers;\n\
    \    }\n    if numbers.len() == 0 {\n        return vec![];\n    }\n\n    let\
    \ mut output: Vec<isize> = vec![];\n    let mut current: isize = 1;\n    for n\
    \ in numbers {\n        current..= delimeter;\n        output.push(current);\n\
    \        current..= n;\n        output.push(current);\n        current = n;\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 5, 5, 6, 6, 3, 3]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmp78hmliqt.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip((numbers.into_iter()\
    \ + delimeter).cloned()).map(|(a, b)| a + b).collect()\n}\n\nfn main() {\n   \
    \ let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpflxszpq6.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip((numbers.into_iter()\
    \ + delimeter).cloned()).map(|(a, b)| a + b).collect()\n     |               \
    \          ^^^^^^ expected reference, found `isize`\n     |\n     = note: expected\
    \ reference `&_`\n                     found type `isize`\nnote: required by a\
    \ bound in `cloned`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpflxszpq6.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip((numbers.into_iter() + delimeter).cloned()).map(|(a,\
    \ b)| a + b).collect()\n   |                                    ^^^ method cannot\
    \ be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n      \
    \     which is required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \nerror[E0369]: cannot add `isize` to `std::vec::IntoIter<isize>`\n --> /tmp/tmpflxszpq6.rs:7:59\n\
    \  |\n7 |     numbers.into_iter().cloned().zip((numbers.into_iter() + delimeter).cloned()).map(|(a,\
    \ b)| a + b).collect()\n  |                                       -------------------\
    \ ^ --------- isize\n  |                                       |\n  |        \
    \                               std::vec::IntoIter<isize>\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0271, E0369,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.windows(2).flat_map(|win| win.into_iter().take_while(|&x|\
    \ x < delimeter).collect()).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8vj4foi7.rs:7:75\n  |\n7 |\
    \     numbers.windows(2).flat_map(|win| win.into_iter().take_while(|&x| x < delimeter).collect()).collect()\n\
    \  |                                                                         \
    \  ^^^^^^^^^\n  |                                                            \
    \               |\n  |                                                       \
    \                    expected `&isize`, found `isize`\n  |                   \
    \                                                        help: consider borrowing\
    \ here: `&delimeter`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.clone();\n    let mut\
    \ interspersed_numbers = Vec::new();\n    for n in numbers {\n        interspersed_numbers.push(delimeter\
    \ + n);\n    }\n    interspersed_numbers\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[13, 14, 11, 10]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpds4586w6.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers;\n    numbers.into_iter().zip(numbers.iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpudmrcj7m.rs:7:9\n\
    \  |\n7 |     let mut numbers = numbers;\n  |         ----^^^^^^^\n  |       \
    \  |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmpudmrcj7m.rs:8:29\n\
    \    |\n7   |     let mut numbers = numbers;\n    |         ----------- move occurs\
    \ because `numbers` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n8   |     numbers.into_iter().zip(numbers.iter().cloned()).map(|(a, b)|\
    \ a + delimeter + b).collect()\n    |             -----------     ^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |             |\n    |             `numbers`\
    \ moved due to this method call\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `numbers`\n    = note: borrow occurs due to\
    \ deref coercion to `[isize]`\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().enumerate().fold(Vec::new(),\
    \ |mut vec, (index, item)| {\n        vec.extend_from_slice(&[item]);\n      \
    \  if index == 0 {\n            vec.extend_from_slice(&[delimeter]);\n       \
    \ }\n        vec.extend_from_slice(&numbers[index + 1].clone());\n        vec\n\
    \    })\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpwebkxhzj.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().enumerate().fold(Vec::new(),\
    \ |mut vec, (index, item)| {\n     |                         ^^^^^^ expected reference,\
    \ found `isize`\n     |\n     = note: expected reference `&_`\n              \
    \       found type `isize`\nnote: required by a bound in `cloned`\n\nerror[E0599]:\
    \ the method `enumerate` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwebkxhzj.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().enumerate().fold(Vec::new(), |mut\
    \ vec, (index, item)| {\n   |                                    ^^^^^^^^^ method\
    \ cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0271, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.to_owned();\n    for i\
    \ in numbers.first().cloned(..numbers.len() - 1) {\n        numbers.push(i, delimeter);\n\
    \    }\n    numbers\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpiejfhzr5.rs:8:30\n     |\n8    |     for i in numbers.first().cloned(..numbers.len()\
    \ - 1) {\n     |                              ^^^^^^ ------------------- supplied\
    \ 1 argument\n     |                              |\n     |                  \
    \            expected 0 arguments\n     |\nnote: associated function defined here\n\
    \nerror[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpiejfhzr5.rs:9:17\n     |\n9    |         numbers.push(i, delimeter);\n\
    \     |                 ^^^^ -  --------- supplied 2 arguments\n     |       \
    \          |\n     |                 expected 1 argument\n     |\nnote: associated\
    \ function defined here\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_mut_copy = numbers;\n    for number\
    \ in numbers_mut_copy {\n        if number == 0 {\n            break;\n      \
    \  }\n        numbers_mut_copy.push(number);\n    }\n\n    let mut numbers_mut_copy_iter\
    \ = numbers_mut_copy.iter();\n    let mut result = Vec::new();\n    for number\
    \ in numbers_mut_copy_iter {\n        result.push(number);\n        if number\
    \ == 0 {\n            break;\n        }\n        result.push(delimeter);\n   \
    \ }\n\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp7ojx76vd.rs:19:19\n\
    \   |\n19 |         if number == 0 {\n   |                   ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp7ojx76vd.rs:22:21\n   |\n22 |         result.push(delimeter);\n   |\
    \                     ^^^^^^^^^\n   |                     |\n   |            \
    \         expected `&isize`, found `isize`\n   |                     help: consider\
    \ borrowing here: `&delimeter`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ojx76vd.rs:25:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n25 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut ret: Vec<isize> = Vec::new();\n    let mut\
    \ i = 0;\n    while i < numbers.len() {\n        ret.push(numbers[i as usize]);\n\
    \        let num = numbers[i as usize];\n        if i + 1 < numbers.len() {\n\
    \            ret.push(delimeter);\n        } else {\n            ret.push(num);\n\
    \        }\n        i += 1;\n    }\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 2]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmp6af49xhy.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = numbers;\n    let mut delim: Vec<_>\
    \ = vec![delimeter; numbers.len()];\n    for (i, &n) in numbers.iter().enumerate()\
    \ {\n        result[i] += delim.iter().position(|&d| n == d).unwrap_or(0);\n \
    \       delim.iter().position(|&d| n == d).unwrap_or(0) += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp39l126os.rs:10:22\n   |\n\
    10 |         result[i] += delim.iter().position(|&d| n == d).unwrap_or(0);\n \
    \  |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot add-assign `usize` to `isize`\n\
    \  --> /tmp/tmp39l126os.rs:10:19\n   |\n10 |         result[i] += delim.iter().position(|&d|\
    \ n == d).unwrap_or(0);\n   |                   ^^ no implementation for `isize\
    \ += usize`\n   |\n   = help: the trait `AddAssign<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0067]: invalid left-hand side of assignment\n  --> /tmp/tmp39l126os.rs:11:57\n\
    \   |\n11 |         delim.iter().position(|&d| n == d).unwrap_or(0) += 1;\n  \
    \ |         ----------------------------------------------- ^^\n   |         |\n\
    \   |         cannot assign to this expression\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0067, E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0067`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.windows(2)\n        .flat_map(|x| x.iter().cloned().collect())\n\
    \        .iter()\n        .cloned()\n        .zip(numbers.iter().cloned().collect())\n\
    \        .map(|(a, b)| (*a as i32).wrapping_add(*b as isize))\n        .cloned()\n\
    \        .collect::<Vec<isize>>()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for struct `FlatMap` in the\
    \ current scope\n --> /tmp/tmpvmph01lm.rs:9:10\n  |\n9 |         .iter()\n  |\
    \          ^^^^ method not found in `FlatMap<Windows<'_, isize>, _, [closure@/tmp/tmpvmph01lm.rs:8:19:\
    \ 8:50]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().step_by(2).map(|x|\
    \ delimeter + x).collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp64woieeq.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().step_by(2).map(|x|\
    \ delimeter + x).collect::<Vec<_>>()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `step_by` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmp64woieeq.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().step_by(2).map(|x| delimeter + x).collect::<Vec<_>>()\n\
    \   |                                    ^^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.windows(2).flat_map(|(a, b)| a + delimeter\
    \ + b)\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnqdlnhhd.rs:7:34\n  |\n7 |\
    \     numbers.windows(2).flat_map(|(a, b)| a + delimeter + b)\n  |           \
    \                       ^^^^^-\n  |                                  |    |\n\
    \  |                                  |    expected due to this\n  |         \
    \                         expected slice `[isize]`, found tuple\n  |\n  = note:\
    \ expected slice `[isize]`\n             found tuple `(_, _)`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut last =\
    \ 0;\n    for &n in numbers {\n        if n != last {\n            result.push(*last);\n\
    \        }\n        last = n;\n        result.push(*n);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp_eaw5ik.rs:9:9\n  |\n9 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0614]:\
    \ type `{integer}` cannot be dereferenced\n  --> /tmp/tmpp_eaw5ik.rs:11:25\n \
    \  |\n11 |             result.push(*last);\n   |                         ^^^^^\n\
    \nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpp_eaw5ik.rs:14:21\n\
    \   |\n14 |         result.push(*n);\n   |                     ^^\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.len() % 2 == 0 {\n        numbers.split_last().map(|x|\
    \ x.unwrap() + delimeter + x).collect()\n    } else {\n        numbers.chunks_exact(2).flat_map(|x|\
    \ x.map(|y| y.unwrap() + delimeter + y).collect())\n    }\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for tuple `(&isize, &[isize])`\
    \ in the current scope\n --> /tmp/tmpin7wm1k7.rs:8:40\n  |\n8 |         numbers.split_last().map(|x|\
    \ x.unwrap() + delimeter + x).collect()\n  |                                 \
    \       ^^^^^^ method not found in `(&isize, &[isize])`\n\nerror[E0599]: `&[isize]`\
    \ is not an iterator\n  --> /tmp/tmpin7wm1k7.rs:10:48\n   |\n10 |         numbers.chunks_exact(2).flat_map(|x|\
    \ x.map(|y| y.unwrap() + delimeter + y).collect())\n   |                     \
    \                           ^^^ `&[isize]` is not an iterator; try calling `.iter()`\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `&[isize]:\
    \ Iterator`\n           which is required by `&mut &[isize]: Iterator`\n     \
    \      `[isize]: Iterator`\n           which is required by `&mut [isize]: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    // Find the length of the vector\n    let mut len\
    \ = 0;\n    for (i, item) in numbers.into_iter().enumerate() {\n        if i !=\
    \ 0 {\n            len += delimeter;\n        }\n        len += item;\n    }\n\
    \n    let mut result = Vec::with_capacity(len);\n    for (i, item) in numbers.into_iter().enumerate()\
    \ {\n        if i != 0 {\n            result.push(delimeter);\n        }\n   \
    \     result.push(item);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvi6stedz.rs:16:41\n   |\n\
    16 |     let mut result = Vec::with_capacity(len);\n   |                     \
    \                    ^^^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n16 |     let mut result = Vec::with_capacity(len.try_into().unwrap());\n\
    \   |                                            ++++++++++++++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        numbers\n    }\
    \ else {\n        let mut numbers: Vec<isize> = numbers.to_vec();\n        let\
    \ mut len: usize = 0;\n        let mut i = 0;\n        while i < numbers.len()\
    \ {\n            len = numbers.len() - i;\n            if len > 2 {\n        \
    \        numbers.insert(i, delimeter);\n                i += 2;\n            }\
    \ else {\n                i += 1;\n            }\n        }\n        numbers\n\
    \    }\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[8, 5, 8, 6, 3, 2]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpulij6d7d.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        return Vec::new();\n\
    \    }\n    let mut interspersed_numbers = Vec::new();\n    let mut numbers_iter\
    \ = numbers.iter();\n    for number in numbers_iter {\n        interspersed_numbers.push(number);\n\
    \        if interspersed_numbers.len() >= delimeter + 1 {\n            interspersed_numbers.drain(..);\n\
    \            interspersed_numbers.push(delimeter);\n        }\n    }\n    interspersed_numbers\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpib2febyg.rs:14:42\n   |\n\
    14 |         if interspersed_numbers.len() >= delimeter + 1 {\n   |          \
    \                                ^^^^^^^^^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n14 |         if interspersed_numbers.len() >= (delimeter\
    \ + 1).try_into().unwrap() {\n   |                                          +\
    \             +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpib2febyg.rs:16:39\n\
    \   |\n16 |             interspersed_numbers.push(delimeter);\n   |          \
    \                             ^^^^^^^^^\n   |                                \
    \       |\n   |                                       expected `&isize`, found\
    \ `isize`\n   |                                       help: consider borrowing\
    \ here: `&delimeter`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpib2febyg.rs:19:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n19 |     interspersed_numbers\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.iter().cloned().zip(numbers.iter().cloned().skip(1))\n\
    \        .map(|(&x, &y)| (x * delimeter + y)).collect()\n}\n\nfn main() {\n  \
    \  let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_mn8_ar8.rs:8:16\n  |\n8 |\
    \         .map(|(&x, &y)| (x * delimeter + y)).collect()\n  |                ^^\
    \    - expected due to this\n  |                |\n  |                expected\
    \ `isize`, found reference\n  |                help: you can probably remove the\
    \ explicit borrow: `x`\n  |\n  = note:   expected type `isize`\n          found\
    \ reference `&_`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_mn8_ar8.rs:8:20\n\
    \  |\n8 |         .map(|(&x, &y)| (x * delimeter + y)).collect()\n  |        \
    \            ^^- expected due to this\n  |                    |\n  |         \
    \           expected `isize`, found reference\n  |                    help: you\
    \ can probably remove the explicit borrow: `y`\n  |\n  = note:   expected type\
    \ `isize`\n          found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        numbers\n    }\
    \ else {\n        let mut numbers_cloned = numbers;\n        numbers_cloned.insert(0,\
    \ numbers_cloned.pop());\n        let mut new_numbers = Vec::new();\n        for\
    \ num in numbers_cloned {\n            new_numbers.push(num);\n            new_numbers.push(delimeter);\n\
    \        }\n        new_numbers\n    }\n}\n\nfn main() {\n    let candidate =\
    \ intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiq6rfi4q.rs:11:34\n   |\n\
    11 |         numbers_cloned.insert(0, numbers_cloned.pop());\n   |           \
    \                       ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for number in\
    \ numbers {\n        result.push(number);\n        result.push(delimeter);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpvfouho8e.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    for number in numbers_iter {\n        result.push(number);\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5p202jt_.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5p202jt_.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    // We could use interleave, but that would require\
    \ iterating the input multiple times.\n    let mut output = Vec::new();\n    for\
    \ number in numbers {\n        output.push(*number);\n        output.push(delimeter);\n\
    \        output.push(*number);\n    }\n    output\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpskx8usze.rs:10:21\n\
    \   |\n10 |         output.push(*number);\n   |                     ^^^^^^^\n\n\
    error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpskx8usze.rs:12:21\n\
    \   |\n12 |         output.push(*number);\n   |                     ^^^^^^^\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers: Vec<_> = numbers.into_iter().collect();\n\
    \    let mut out = Vec::new();\n    for n in numbers.iter() {\n        out.push(delimeter);\n\
    \        out.push(n);\n    }\n    out.push(delimeter);\n    out\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplao7eujb.rs:11:18\n   |\n\
    11 |         out.push(n);\n   |                  ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |         out.push(*n);\n\
    \   |                  +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().chain(numbers.clone().windows(2).cloned())\n\
    \        .filter(|number| number != delimeter).cloned().collect()\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpa23ixkwb.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().chain(numbers.clone().windows(2).cloned())\n\
    \     |                         ^^^^^^ expected reference, found `isize`\n   \
    \  |\n     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `chain` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpa23ixkwb.rs:7:34\n   |\n7  |       numbers.into_iter().cloned().chain(numbers.clone().windows(2).cloned())\n\
    \   |                                    ^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror[E0277]:\
    \ the trait bound `[isize]: Clone` is not satisfied\n    --> /tmp/tmpa23ixkwb.rs:7:67\n\
    \     |\n7    |     numbers.into_iter().cloned().chain(numbers.clone().windows(2).cloned())\n\
    \     |                                                                   ^^^^^^\
    \ the trait `Clone` is not implemented for `[isize]`\n     |\n     = help: the\
    \ trait `Clone` is implemented for `[T; N]`\nnote: required by a bound in `cloned`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0277, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.to_vec();\n    numbers_copy.insert(0,\
    \ 0);\n    numbers_copy.extend(numbers_copy.iter().cloned());\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned());\n    numbers_copy\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmp181i0rjv.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().cloned());\n\
    \  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^\n  |     |        \
    \    |      |\n  |     |            |      immutable borrow occurs here\n  | \
    \    |            immutable borrow later used by call\n  |     mutable borrow\
    \ occurs here\n\nerror[E0502]: cannot borrow `numbers_copy` as mutable because\
    \ it is also borrowed as immutable\n  --> /tmp/tmp181i0rjv.rs:11:5\n   |\n11 |\
    \     numbers_copy.extend(numbers_copy.iter().cloned());\n   |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^\n\
    \   |     |            |      |\n   |     |            |      immutable borrow\
    \ occurs here\n   |     |            immutable borrow later used by call\n   |\
    \     mutable borrow occurs here\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.size());\n\
    \    for &i in numbers.into_iter().rev() {\n        result.push(i);\n        if\
    \ i + 1 == numbers.len() {\n            result.push(delimeter);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `size` found for struct `Vec<isize>` in the\
    \ current scope\n --> /tmp/tmp89xkk6ht.rs:7:49\n  |\n7 |     let mut result =\
    \ Vec::with_capacity(numbers.size());\n  |                                   \
    \              ^^^^ help: there is an associated function with a similar name:\
    \ `resize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp89xkk6ht.rs:8:9\n \
    \ |\n8 |     for &i in numbers.into_iter().rev() {\n  |         ^^    -------------------------\
    \ this expression has type `Option<isize>`\n  |         |\n  |         expected\
    \ `isize`, found reference\n  |         help: you can probably remove the explicit\
    \ borrow: `i`\n  |\n  = note:   expected type `isize`\n          found reference\
    \ `&_`\n\nerror[E0277]: can't compare `isize` with `usize`\n  --> /tmp/tmp89xkk6ht.rs:10:18\n\
    \   |\n10 |         if i + 1 == numbers.len() {\n   |                  ^^ no implementation\
    \ for `isize == usize`\n   |\n   = help: the trait `PartialEq<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().enumerate().flat_map(|(i,\
    \ number)| {\n        if i > 0 {\n            vec![number, delimeter.into(), number]\n\
    \        } else {\n            vec![number]\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmph6nu1sqd.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().enumerate().flat_map(|(i,\
    \ number)| {\n     |                         ^^^^^^ expected reference, found\
    \ `isize`\n     |\n     = note: expected reference `&_`\n                    \
    \ found type `isize`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the\
    \ method `enumerate` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but\
    \ its trait bounds were not satisfied\n  --> /tmp/tmph6nu1sqd.rs:7:34\n   |\n\
    7  |       numbers.into_iter().cloned().enumerate().flat_map(|(i, number)| {\n\
    \   |                                    ^^^^^^^^^ method cannot be called on\
    \ `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait bounds\n   |\n\
    \   = note: the following trait bounds were not satisfied:\n           `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n      \
    \     which is required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().zip(0..).map(|(&a, &b)| a +\
    \ delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjtv36mgz.rs:7:40\n  |\n7 |\
    \     numbers.into_iter().zip(0..).map(|(&a, &b)| a + delimeter + b).collect()\n\
    \  |                                        ^^    - expected due to this\n  |\
    \                                        |\n  |                              \
    \          expected `isize`, found reference\n  |                            \
    \            help: you can probably remove the explicit borrow: `a`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpjtv36mgz.rs:7:44\n  |\n7 |     numbers.into_iter().zip(0..).map(|(&a,\
    \ &b)| a + delimeter + b).collect()\n  |                                     \
    \       ^^- expected due to this\n  |                                        \
    \    |\n  |                                            expected integer, found\
    \ reference\n  |                                            help: you can probably\
    \ remove the explicit borrow: `b`\n  |\n  = note:   expected type `{integer}`\n\
    \          found reference `&_`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.chunks_exact(2)\n        .flat_map(|x| x.iter().cloned().collect::<Vec<_>>())\n\
    \        .map(|x| x.iter().cloned().collect::<Vec<_>>())\n        .flatten()\n\
    \        .cloned()\n        .push(delimeter)\n        .flatten()\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpcswyvmxt.rs:9:20\n  |\n9 |         .map(|x| x.iter().cloned().collect::<Vec<_>>())\n\
    \  |                    ^^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `push` found for struct `Cloned` in the current scope\n  --> /tmp/tmpcswyvmxt.rs:12:10\n\
    \   |\n12 |         .push(delimeter)\n   |          ^^^^ method not found in `Cloned<Flatten<Map<FlatMap<ChunksExact<'_,\
    \ isize>, Vec<isize>, [closure@/tmp/tmpcswyvmxt.rs:8:19: 8:60]>, _>>>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.into_iter().cloned();\n\
    \    numbers.next().unwrap();\n    let mut result = Vec::new();\n    for n in\
    \ numbers {\n        result.push(n);\n        result.push(delimeter);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpl3lh_bt4.rs:7:43\n     |\n7    |     let mut numbers\
    \ = numbers.into_iter().cloned();\n     |                                    \
    \       ^^^^^^ expected reference, found `isize`\n     |\n     = note: expected\
    \ reference `&_`\n                     found type `isize`\nnote: required by a\
    \ bound in `cloned`\n\nerror[E0599]: the method `next` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpl3lh_bt4.rs:8:13\n  \
    \ |\n8  |       numbers.next().unwrap();\n   |               ^^^^ method cannot\
    \ be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n  --> /tmp/tmpl3lh_bt4.rs:10:14\n   |\n10 |     for\
    \ n in numbers {\n   |              ^^^^^^^ expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n \
    \  = note: required because of the requirements on the impl of `Iterator` for\
    \ `Cloned<std::vec::IntoIter<isize>>`\n   = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `Cloned<std::vec::IntoIter<isize>>`\n\nerror[E0271]:\
    \ type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item == &_`\n\
    \  --> /tmp/tmpl3lh_bt4.rs:10:14\n   |\n10 |     for n in numbers {\n   |    \
    \          ^^^^^^^ expected `isize`, found reference\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n   = note: required because of\
    \ the requirements on the impl of `Iterator` for `Cloned<std::vec::IntoIter<isize>>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    // If list is empty, return an empty list\n    if\
    \ numbers.is_empty() {\n        return Vec::new();\n    }\n\n    // Create a reference\
    \ variable to store interspersed result and set it to empty vector\n    let mut\
    \ interspersed_list = Vec::new();\n\n    // Loop through all the elements in the\
    \ numbers list and append the elements to interspersed_list\n    for i in numbers\
    \ {\n        interspersed_list.push(i + delimeter);\n    }\n\n    // Return the\
    \ interspersed result reference\n    return interspersed_list;\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[13, 14, 11, 10]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpnvyp6vc8.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().fold(Vec::new(), |mut vec, val|\
    \ {\n        vec.push(*val);\n        vec.push(delimeter);\n        vec\n    })\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmplqbqktw5.rs:8:18\n\
    \  |\n8 |         vec.push(*val);\n  |                  ^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    numbers_iter.next_back();\n    numbers_iter.next_back();\n\n    numbers_iter\n\
    \        .enumerate()\n        .filter_map(|(i, number)| if i < numbers.len()\
    \ - 1 {\n            Some((i, number))\n        } else {\n            None\n \
    \       })\n        .collect::<Vec<_>>()\n        .into_iter()\n        .map(|(n,\
    \ number)| number + n)\n        .collect::<Vec<_>>()\n        .into_iter()\n \
    \       .reduce(delimeter + delimeter)\n        .collect::<Vec<_>>()\n}\n\nfn\
    \ main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4_qr853k.rs:20:37\n   |\n\
    20 |         .map(|(n, number)| number + n)\n   |                            \
    \         ^ expected `isize`, found `usize`\n\nerror[E0277]: cannot add `usize`\
    \ to `isize`\n  --> /tmp/tmp4_qr853k.rs:20:35\n   |\n20 |         .map(|(n, number)|\
    \ number + n)\n   |                                   ^ no implementation for\
    \ `isize + usize`\n   |\n   = help: the trait `Add<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: expected a `FnMut<(isize, isize)>` closure, found\
    \ `isize`\n    --> /tmp/tmp4_qr853k.rs:23:17\n     |\n23   |         .reduce(delimeter\
    \ + delimeter)\n     |          ------ ^^^^^^^^^^^^^^^^^^^^^ expected an `FnMut<(isize,\
    \ isize)>` closure, found `isize`\n     |          |\n     |          required\
    \ by a bound introduced by this call\n     |\n     = help: the trait `FnMut<(isize,\
    \ isize)>` is not implemented for `isize`\nnote: required by a bound in `reduce`\n\
    \nerror[E0599]: `Option<isize>` is not an iterator\n   --> /tmp/tmp4_qr853k.rs:24:10\n\
    \    |\n24  |           .collect::<Vec<_>>()\n    |            ^^^^^^^ `Option<isize>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<isize>: Iterator`\n            which is required by `&mut\
    \ Option<isize>: Iterator`\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut cur_num\
    \ = 0;\n    let mut prev = 0;\n    for n in numbers {\n        if n != prev {\n\
    \            result.push((cur_num, delimeter));\n            cur_num = n;\n  \
    \      }\n        prev = n;\n    }\n    result.push((cur_num, delimeter));\n \
    \   result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpldfwmxja.rs:18:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n18 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found tuple\n   |\n   = note: expected struct `Vec<isize>`\n      \
    \        found struct `Vec<(isize, isize)>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut res = Vec::with_capacity(numbers.len());\n\
    \    for i in 0..numbers.len() - 1 {\n        res.push((numbers[i] + delimeter)\
    \ as isize);\n        res.push((numbers[i + 1] + delimeter) as isize);\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp21rkfvg5.rs:8:17\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers[1..]).collect::<Vec<_>>()\n\
    \        .into_iter().cloned().chain(numbers).collect::<Vec<_>>()\n        .into_iter().cloned().chain(vec![delimeter]).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp5kzyykzl.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers[1..]).collect::<Vec<_>>()\n\
    \     |                         ^^^^^^ expected reference, found `isize`\n   \
    \  |\n     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `zip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmp5kzyykzl.rs:7:34\n   |\n7  |       numbers.into_iter().cloned().zip(numbers[1..]).collect::<Vec<_>>()\n\
    \   |                                    ^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().windows(2).map(|n|\
    \ n.join(delimeter)).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp8dg8ws7b.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().windows(2).map(|n|\
    \ n.join(delimeter)).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: no method named `windows` found for struct `Cloned` in the current\
    \ scope\n --> /tmp/tmp8dg8ws7b.rs:7:34\n  |\n7 |     numbers.into_iter().cloned().windows(2).map(|n|\
    \ n.join(delimeter)).collect()\n  |                                  ^^^^^^^ method\
    \ not found in `Cloned<std::vec::IntoIter<isize>>`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0271, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_vec: Vec<isize> = numbers;\n   \
    \ numbers_vec.insert(0, 0);\n    numbers_vec.insert(0, delimeter);\n    numbers_vec\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 0]`,\n right: `[]`', /tmp/tmp16qc65ch.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut list = Vec::with_capacity(numbers.len());\n\
    \    for i in numbers.iter() {\n        list.push(i);\n        list.push(delimeter);\n\
    \    }\n    list\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgperdra4.rs:10:19\n   |\n\
    10 |         list.push(delimeter);\n   |                   ^^^^^^^^^\n   |   \
    \                |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgperdra4.rs:12:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n12 |     list\n   |     ^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut out = Vec::with_capacity(numbers.size());\n\
    \    for i in numbers.iter() {\n        out.push(i);\n        out.push(delimeter);\n\
    \        out.push(i);\n    }\n    out\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `size` found for struct `Vec<isize>` in the\
    \ current scope\n --> /tmp/tmp31dfo4ka.rs:7:46\n  |\n7 |     let mut out = Vec::with_capacity(numbers.size());\n\
    \  |                                              ^^^^ help: there is an associated\
    \ function with a similar name: `resize`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp31dfo4ka.rs:10:18\n   |\n10 |         out.push(delimeter);\n   |\
    \                  ^^^^^^^^^\n   |                  |\n   |                  expected\
    \ `&isize`, found `isize`\n   |                  help: consider borrowing here:\
    \ `&delimeter`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp31dfo4ka.rs:13:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n13 |     out\n   |     ^^^\
    \ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        return Vec::new();\n\
    \    }\n\n    let mut list = Vec::new();\n    list.extend_from_slice(&numbers.iter().cloned());\n\
    \    list.insert(list.len() - 1, delimeter);\n\n    list\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpakv1ycfi.rs:12:28\n   |\n\
    12 |     list.extend_from_slice(&numbers.iter().cloned());\n   |             \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^ expected slice, found struct `Cloned`\n\
    \   |\n   = note: expected reference `&[_]`\n              found reference `&Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1))\n\
    \        .map(|(a, b)| a + delimeter + b)\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpjuwyjvej.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1))\n\
    \     |                         ^^^^^^ expected reference, found `isize`\n   \
    \  |\n     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `zip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpjuwyjvej.rs:7:34\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1))\n\
    \   |                                    ^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror[E0271]:\
    \ type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item == &_`\n\
    \    --> /tmp/tmpjuwyjvej.rs:7:58\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1))\n\
    \     |                                                          ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpjuwyjvej.rs:7:67\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1))\n\
    \   |                                                                     ^^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were no"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers[0..numbers.len() - 2].into_iter().chain(numbers[1..].into_iter()).cloned().zip(numbers[2..].into_iter()).map(|(i,\
    \ j)| i * delimeter + j).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpjz82kd4e.rs:7:16\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_mut =  numbers.into_iter().collect::<Vec<_>>();\n\
    \    for number in numbers_mut.clone() {\n        for i in 0..(numbers_mut as\
    \ usize)-2 {\n            numbers_mut[i] = numbers_mut[i+1] + delimeter;\n   \
    \     }\n    }\n    numbers_mut\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0605]: non-primitive cast: `Vec<isize>` as `usize`\n --> /tmp/tmp2baqu07w.rs:9:21\n\
    \  |\n9 |         for i in 0..(numbers_mut as usize)-2 {\n  |                \
    \     ^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between\
    \ primitive types or to coerce to a specific trait object\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0605`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().collect();\n    let mut numbers\
    \ = numbers;\n    numbers.extend((numbers[..numbers.size() - 1] + delimeter +\
    \ numbers[numbers.size() - 1]).chunks(2));\n    numbers\n}\n\nfn main() {\n  \
    \  let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `size` found for struct `Vec<isize>` in the\
    \ current scope\n --> /tmp/tmp33t64xme.rs:9:39\n  |\n9 |     numbers.extend((numbers[..numbers.size()\
    \ - 1] + delimeter + numbers[numbers.size() - 1]).chunks(2));\n  |           \
    \                            ^^^^ help: there is an associated function with a\
    \ similar name: `resize`\n\nerror[E0369]: cannot add `isize` to `[isize]`\n -->\
    \ /tmp/tmp33t64xme.rs:9:51\n  |\n9 |     numbers.extend((numbers[..numbers.size()\
    \ - 1] + delimeter + numbers[numbers.size() - 1]).chunks(2));\n  |           \
    \          ----------------------------- ^ --------- isize\n  |              \
    \       |\n  |                     [isize]\n\nerror[E0599]: no method named `size`\
    \ found for struct `Vec<isize>` in the current scope\n --> /tmp/tmp33t64xme.rs:9:81\n\
    \  |\n9 |     numbers.extend((numbers[..numbers.size() - 1] + delimeter + numbers[numbers.size()\
    \ - 1]).chunks(2));\n  |                                                     \
    \                            ^^^^ help: there is an associated function with a\
    \ similar name: `resize`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0369, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    numbers.iter().for_each(|n|\
    \ {\n        output.push(*n);\n        output.push(delimeter);\n    });\n    output\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpdfxkg0ob.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmprj33b8z_.rs:7:49\n     |\n7    |     numbers.into_iter().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \              ^^^^^^ expected reference, found `isize`\n     |\n     = note:\
    \ expected reference `&_`\n                     found type `isize`\nnote: required\
    \ by a bound in `cloned`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmprj33b8z_.rs:7:29\n  |\n7 |     numbers.into_iter().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found reference\n  |                         |\n  |      \
    \                   required by a bound introduced by this call\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n  = note: required\
    \ because of the requirements on the impl of `Iterator` for `Cloned<std::vec::IntoIter<isize>>`\n\
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `Cloned<std::vec::IntoIter<isize>>`\n\nerror[E0599]: `Zip<std::vec::IntoIter<isize>,\
    \ Cloned<std::vec::IntoIter<isize>>>` is not an iterator\n  --> /tmp/tmprj33b8z_.rs:7:59\n\
    \   |\n7  |        numbers.into_iter().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                         ^^^ `Zip<std::vec::IntoIter<isize>, Cloned<std::vec::IntoIter<isize>>>`\
    \ is not an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `Zip<std::vec::IntoIter<isize>, Cloned<std::vec::IntoIter<isize>>>:\
    \ Iterator`\n           `Zip<std::vec::IntoIter<isize>, Cloned<std::vec::IntoIter<isize>>>:\
    \ Iterator`\n           which is required by `&mut Zip<std::vec::IntoIter<isize>,\
    \ Cloned<std::vec::IntoIter<isize>>>: Iterator`\n\nerror: aborting due to 3 p"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n\
    \    }\n    let mut numbers = numbers;\n    numbers.reserve(numbers.len());\n\
    \    while numbers.len() > 0 {\n        numbers.insert(0, *numbers.pop() + delimeter);\n\
    \    }\n    numbers\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `Option<isize>` cannot be dereferenced\n  --> /tmp/tmpd9h07t1p.rs:13:27\n\
    \   |\n13 |         numbers.insert(0, *numbers.pop() + delimeter);\n   |     \
    \                      ^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned())\n\
    \        .map(|(a, b)| *a + *b + delimeter)\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpi9bkt9_a.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned())\n\
    \     |                         ^^^^^^ expected reference, found `isize`\n   \
    \  |\n     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `zip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpi9bkt9_a.rs:7:34\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned())\n\
    \   |                                    ^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror[E0271]:\
    \ type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item == &_`\n\
    \    --> /tmp/tmpi9bkt9_a.rs:7:58\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned())\n\
    \     |                                                          ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    numbers_iter.by_ref().take_while(|x|\
    \ x.is_some()).skip(delimeter).fold(numbers_iter, |mut iter1, &x| {\n        iter1.insert(delimeter,\
    \ x);\n        iter1\n    });\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_some` found for reference `&&isize` in\
    \ the current scope\n --> /tmp/tmp77jro6sv.rs:8:44\n  |\n8 |     numbers_iter.by_ref().take_while(|x|\
    \ x.is_some()).skip(delimeter).fold(numbers_iter, |mut iter1, &x| {\n  |     \
    \                                       ^^^^^^^ method not found in `&&isize`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp77jro6sv.rs:8:60\n  |\n8 |    \
    \ numbers_iter.by_ref().take_while(|x| x.is_some()).skip(delimeter).fold(numbers_iter,\
    \ |mut iter1, &x| {\n  |                                                     \
    \       ^^^^^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n  |\n\
    8 |     numbers_iter.by_ref().take_while(|x| x.is_some()).skip(delimeter.try_into().unwrap()).fold(numbers_iter,\
    \ |mut iter1, &x| {\n  |                                                     \
    \                ++++++++++++++++++++\n\nerror[E0599]: no method named `insert`\
    \ found for struct `std::slice::Iter` in the current scope\n --> /tmp/tmp77jro6sv.rs:9:15\n\
    \  |\n9 |         iter1.insert(delimeter, x);\n  |               ^^^^^^ method\
    \ not found in `std::slice::Iter<'_, isize>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp77jro6sv.rs:6:58\n  |\n6 | fn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n  |    -----------                                 \
    \          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for number in\
    \ numbers.iter() {\n        result.push(number);\n        result.push(delimeter);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr86ersqa.rs:10:21\n   |\n\
    10 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr86ersqa.rs:12:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n12 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ - 1 {\n        result.push(numbers[i]);\n        result.push(delimeter);\n \
    \       result.push(numbers[i + 1]);\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpvs73vbpk.rs:8:17\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut output = Vec::with_capacity(numbers.len());\n\
    \    for i in 0..numbers.len() {\n        if i > 0 {\n            output.push(numbers[i]);\n\
    \        }\n        if i + 1 != numbers.len() {\n            output.push(delimeter);\n\
    \        }\n    }\n    output\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[8, 6, 8, 3, 8, 2]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpt84in6ov.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    let\
    \ mut interspersed_numbers = Vec::new();\n    for (i, n) in numbers_copy.iter().enumerate()\
    \ {\n        if i != 0 {\n            interspersed_numbers.push(delimeter);\n\
    \        }\n        interspersed_numbers.push(n);\n    }\n    interspersed_numbers\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4607tz_1.rs:13:35\n   |\n\
    13 |         interspersed_numbers.push(n);\n   |                             \
    \      ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n13 |         interspersed_numbers.push(*n);\n   |        \
    \                           +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().collect::<Vec<_>>().into_iter()\n\
    \        .zip(numbers.iter().cloned().collect::<Vec<_>>().iter().cloned())\n \
    \       .cloned()\n        .flat_map(|(left, right)| (left as usize + delimeter)\
    \ as usize + (right as usize) as usize)\n        .cloned()\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp52swuzed.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().collect::<Vec<_>>().into_iter()\n\
    \     |                         ^^^^^^ expected reference, found `isize`\n   \
    \  |\n     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `collect` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmp52swuzed.rs:7:34\n   |\n7  |       numbers.into_iter().cloned().collect::<Vec<_>>().into_iter()\n\
    \   |                                    ^^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp52swuzed.rs:10:52\n   |\n10 |         .flat_map(|(left,\
    \ right)| (left as usize + delimeter) as usize + (right as usize) as usize)\n\
    \   |                                                    ^^^^^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmp52swuzed.rs:10:50\n\
    \   |\n10 |         .flat_map(|(left, right)| (left as usize + delimeter) as usize\
    \ + (right as usize) as usize)\n   |                                         \
    \         ^ no implementation for `usize + isize`\n   |\n   = help: the trait\
    \ `Add<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n    \
    \         <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n      \
    \       <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n          \
    \   <&'a i64 as Add<i64>>\n             <&'a i8 as"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        numbers\n    }\
    \ else {\n        let mut first_number = numbers[0];\n        let mut last_number\
    \ = numbers[0];\n\n        let mut last_position = 0;\n\n        for number in\
    \ numbers.iter().cloned() {\n            last_position = last_position + delimeter;\n\
    \            last_number = number;\n            first_number = last_number;\n\
    \            last_position += delimeter;\n        }\n\n        vec![first_number,\
    \ last_number, last_position]\n    }\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 64]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpqwtwr9m9.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        return Vec::new();\n\
    \    }\n\n    let mut it = numbers.iter().cloned();\n    let mut ret = Vec::new();\n\
    \    let mut current_value = it.next();\n    for value in current_value {\n  \
    \      ret.push(value);\n        it.next();\n    }\n\n    while let Some(value)\
    \ = it.next() {\n        ret.push(delimeter);\n        ret.push(value);\n    }\n\
    \n    ret\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 3, 8, 2]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpdm3ctbcc.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.into_iter().collect::<Vec<_>>();\n\
    \    let mut out: Vec<isize> = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        out.push(number);\n        if let Some(next_number) = numbers_iter.next()\
    \ {\n            out.push(delimeter);\n        }\n    }\n    out\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `next` found for struct `Vec<isize>` in the\
    \ current scope\n --> /tmp/tmplqiwrg0b.rs:9:43\n  |\n9 |     while let Some(number)\
    \ = numbers_iter.next() {\n  |                                           ^^^^\
    \ method not found in `Vec<isize>`\n\nerror[E0599]: no method named `next` found\
    \ for struct `Vec<isize>` in the current scope\n  --> /tmp/tmplqiwrg0b.rs:11:49\n\
    \   |\n11 |         if let Some(next_number) = numbers_iter.next() {\n   |   \
    \                                              ^^^^ method not found in `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers: Vec<_> = numbers.iter().cloned().collect();\n\
    \n    numbers.insert(\n        0, &numbers[0][..delimeter].to_string()[..delimeter\
    \ + 1].into(),\n    );\n\n    numbers.extend(numbers.windows(2).map(|x| x[..delimeter].to_string()));\n\
    \n    numbers\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmplqbxh6ql.rs:10:13\n\
    \   |\n10 |         0, &numbers[0][..delimeter].to_string()[..delimeter + 1].into(),\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmplqbxh6ql.rs:13:47\n   |\n\
    13 |     numbers.extend(numbers.windows(2).map(|x| x[..delimeter].to_string()));\n\
    \   |                                               ^^^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `RangeTo<isize>`\n   = help: the following other types\
    \ implement trait `SliceIndex<T>`:\n             <RangeTo<usize> as SliceIndex<[T]>>\n\
    \             <RangeTo<usize> as SliceIndex<str>>\n   = note: required because\
    \ of the requirements on the impl of `Index<RangeTo<isize>>` for `[isize]`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0608.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    // No need to check if `delimeter` > 0 since that\
    \ case has been handled by the `vec` itself\n    let mut numbers_slice = numbers.into_iter().collect::<Vec<_>>();\n\
    \    let mut new_numbers_slice = vec![];\n    for num in numbers_slice {\n   \
    \     new_numbers_slice.push(num);\n        if num != delimeter {\n          \
    \  new_numbers_slice.push(delimeter);\n        }\n    }\n    new_numbers_slice\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmp0o7t430m.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().zip(numbers.skip(1)).cloned().collect::<Vec<_>>()\n\
    \        .chunks(2).map(|a| a[0] + delimeter as isize + a[1] as isize).collect()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpiozj4x16.rs:7:37\n\
    \    |\n7   |       numbers.into_iter().zip(numbers.skip(1)).cloned().collect::<Vec<_>>()\n\
    \    |                                       ^^^^ `Vec<isize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror[E0271]: type mismatch resolving `<Zip<std::vec::IntoIter<isize>,\
    \ _> as Iterator>::Item == &_`\n    --> /tmp/tmpiozj4x16.rs:7:46\n     |\n7  \
    \  |     numbers.into_iter().zip(numbers.skip(1)).cloned().collect::<Vec<_>>()\n\
    \     |                                              ^^^^^^ expected reference,\
    \ found tuple\n     |\n     = note: expected reference `&_`\n                \
    \    found tuple `(isize, _)`\nnote: required by a bound in `cloned`\n\nerror[E0599]:\
    \ the method `collect` exists for struct `Cloned<Zip<std::vec::IntoIter<isize>,\
    \ _>>`, but its trait bounds were not satisfied\n  --> /tmp/tmpiozj4x16.rs:7:55\n\
    \   |\n7  |        numbers.into_iter().zip(numbers.skip(1)).cloned().collect::<Vec<_>>()\n\
    \   |                                                          ^^^^^^^ method\
    \ cannot be called on `Cloned<Zip<std::vec::IntoIter<isize>, _>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<Zip<std::vec::IntoIter<isize>, _> as Iterator>::Item = &_`\n   \
    \        which is required by `Cloned<Zip<std::vec::IntoIter<isize>, _>>: Iterator`\n\
    \           `Cloned<Zip<std::vec::IntoIter<isize>, _>>: Iterator`\n          \
    \ which is required by `&mut Cloned<Zip<std::vec::IntoIter<isize>, _>>: Iterator`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    assert!(numbers.len() > 0);\n    assert!(delimeter\
    \ > 0);\n    numbers.into_iter().cloned().zip(numbers.into_iter()).map(|(x, y)|\
    \ {\n        if x % delimeter == 0 && y % delimeter == 0 {\n            (x, y)\n\
    \        } else {\n            (x, y)\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpud6u5u5e.rs:9:25\n     |\n9    |     numbers.into_iter().cloned().zip(numbers.into_iter()).map(|(x,\
    \ y)| {\n     |                         ^^^^^^ expected reference, found `isize`\n\
    \     |\n     = note: expected reference `&_`\n                     found type\
    \ `isize`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method `zip`\
    \ exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmpud6u5u5e.rs:9:34\n   |\n9  |       numbers.into_iter().cloned().zip(numbers.into_iter()).map(|(x,\
    \ y)| {\n   |                                    ^^^ method cannot be called on\
    \ `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait bounds\n   |\n\
    \   = note: the following trait bounds were not satisfied:\n           `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n      \
    \     which is required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    for\
    \ number in &numbers_copy {\n        numbers_copy.push(number);\n        if numbers_copy.len()\
    \ % delimeter == 0 {\n            numbers_copy.push(delimeter);\n        }\n \
    \   }\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvz3j0dnz.rs:9:27\n  |\n9 |\
    \         numbers_copy.push(number);\n  |                           ^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |         numbers_copy.push(*number);\n  |                           +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvz3j0dnz.rs:10:33\n   |\n10 |         if numbers_copy.len()\
    \ % delimeter == 0 {\n   |                                 ^^^^^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot mod `usize` by `isize`\n  -->\
    \ /tmp/tmpvz3j0dnz.rs:10:31\n   |\n10 |         if numbers_copy.len() % delimeter\
    \ == 0 {\n   |                               ^ no implementation for `usize %\
    \ isize`\n   |\n   = help: the trait `Rem<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Rem<Rhs>`:\n          \
    \   <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a\
    \ i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32\
    \ as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n\
    \             <&'a isize as Rem<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.to_owned();\n    numbers.insert(numbers.len()\
    \ - 1, delimeter);\n    numbers.insert(numbers.len() - 1, delimeter);\n    numbers\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpd19yzjga.rs:8:20\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n\
    \    }\n\n    let mut numbers_copy = numbers;\n    numbers_copy.drain(numbers_copy.len()\
    \ - delimeter + 1);\n\n    let mut result = vec![];\n    while numbers_copy.len()\
    \ > 0 {\n        result.push(*numbers_copy.remove(0));\n        result.push(*delimeter);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfdsg2qaw.rs:12:45\n   |\n\
    12 |     numbers_copy.drain(numbers_copy.len() - delimeter + 1);\n   |       \
    \                                      ^^^^^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpfdsg2qaw.rs:12:43\n\
    \   |\n12 |     numbers_copy.drain(numbers_copy.len() - delimeter + 1);\n   |\
    \                                           ^ no implementation for `usize - isize`\n\
    \   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   =\
    \ help: the following other types implement trait `Sub<Rhs>`:\n             <&'a\
    \ f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128\
    \ as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as\
    \ Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the trait bound `usize: RangeBounds<usize>` is not satisfied\n    --> /tmp/tmpfdsg2qaw.rs:12:24\n\
    \     |\n12   |     numbers_copy.drain(numbers_copy.len() - delimeter + 1);\n\
    \     |                  ----- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `RangeBounds<usize>`\
    \ is not implemented for `usize`\n     |                  |\n     |          \
    \        required by a bound introduced by this call\n     |\n     = help: the\
    \ following other types implement trait `RangeBounds<T>`:\n               (Bound<&'a\
    \ T>, Bound<&'a T>)\n               (Bound<T>, Bound<T>)\n               RangeFrom<&T>\n\
    \               RangeFrom<T>\n               RangeFull\n               RangeInclusive<&T>\n\
    \               RangeInclusive<T>\n               RangeTo<&T>\n             and\
    \ 5 others\nnote: required by a bound in `Vec::<T, A>::drain`\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpfdsg2qaw.rs:16:21\n   |\n\
    16 |         result.push(*numbers_copy.remove(0));\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpfdsg2qaw.rs:17:21\n\
    \   |\n17 |         result.push(*delimeter);\n   |    "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpfnhgvrk0.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).collect::<Vec<_>>()\n\
    \     |                         ^^^^^^ expected reference, found `isize`\n   \
    \  |\n     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `zip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpfnhgvrk0.rs:7:34\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).collect::<Vec<_>>()\n\
    \   |                                    ^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror[E0271]:\
    \ type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item == &_`\n\
    \    --> /tmp/tmpfnhgvrk0.rs:7:58\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).collect::<Vec<_>>()\n\
    \     |                                                          ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpfnhgvrk0.rs:7:67\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).collect::<Vec<_>>()\n\
    \   |                                                                     ^^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` du"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers;\n    numbers.insert(0,\
    \ delimeter);\n    numbers.insert(0, delimeter);\n    numbers\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 7]`,\n right: `[]`', /tmp/tmpuup_v52e.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.to_vec();\n    let mut\
    \ len: usize = 0;\n    let mut last: Option<isize> = None;\n    for (index, number)\
    \ in numbers.into_iter().enumerate() {\n        if index == 0 {\n            len\
    \ += 1;\n        } else {\n            len += 1;\n            numbers.insert(0,\
    \ delimeter);\n        }\n        if index == numbers.len() - 1 {\n          \
    \  numbers.insert(index, number);\n            last = Some(number);\n        }\
    \ else {\n            numbers.insert(index + 1, number);\n            last = Some(number);\n\
    \        }\n    }\n    numbers\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "warning: variable `len` is assigned to, but never used\n --> /tmp/tmpfmcurnht.rs:8:13\n\
    \  |\n8 |     let mut len: usize = 0;\n  |             ^^^\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n  = note: consider using `_len` instead\n\nwarning: variable\
    \ `last` is assigned to, but never used\n --> /tmp/tmpfmcurnht.rs:9:13\n  |\n\
    9 |     let mut last: Option<isize> = None;\n  |             ^^^^\n  |\n  = note:\
    \ consider using `_last` instead\n\nwarning: value assigned to `last` is never\
    \ read\n  --> /tmp/tmpfmcurnht.rs:19:13\n   |\n19 |             last = Some(number);\n\
    \   |             ^^^^\n   |\n   = note: `#[warn(unused_assignments)]` on by default\n\
    \   = help: maybe it is overwritten before being read?\n\nwarning: value assigned\
    \ to `last` is never read\n  --> /tmp/tmpfmcurnht.rs:22:13\n   |\n22 |       \
    \      last = Some(number);\n   |             ^^^^\n   |\n   = help: maybe it\
    \ is overwritten before being read?\n\nerror[E0382]: borrow of moved value: `numbers`\n\
    \   --> /tmp/tmpfmcurnht.rs:15:13\n    |\n7   |     let mut numbers = numbers.to_vec();\n\
    \    |         ----------- move occurs because `numbers` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n...\n10  |     for (index, number)\
    \ in numbers.into_iter().enumerate() {\n    |                                \
    \    ----------- `numbers` moved due to this method call\n...\n15  |         \
    \    numbers.insert(0, delimeter);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error; 4 warnings emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers;\n    numbers.retain(|n|\
    \ n != 0);\n    numbers.clone() + &delimeter * (numbers.size() as isize)\n}\n\n\
    fn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n --> /tmp/tmpfxufgdr5.rs:8:26\n\
    \  |\n8 |     numbers.retain(|n| n != 0);\n  |                          ^^ no\
    \ implementation for `&isize == {integer}`\n  |\n  = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n  = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n            f32\n            f64\n            i128\n\
    \            i16\n            i32\n            i64\n            i8\n         \
    \   isize\n          and 6 others\n\nerror[E0599]: no method named `size` found\
    \ for struct `Vec<isize>` in the current scope\n --> /tmp/tmpfxufgdr5.rs:9:45\n\
    \  |\n9 |     numbers.clone() + &delimeter * (numbers.size() as isize)\n  |  \
    \                                           ^^^^ help: there is an associated\
    \ function with a similar name: `resize`\n\nerror[E0369]: cannot add `isize` to\
    \ `Vec<isize>`\n --> /tmp/tmpfxufgdr5.rs:9:21\n  |\n9 |     numbers.clone() +\
    \ &delimeter * (numbers.size() as isize)\n  |     --------------- ^ --------------------------------------\
    \ isize\n  |     |\n  |     Vec<isize>\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0369, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers;\n    if numbers.is_empty()\
    \ {\n        numbers.push(0);\n    }\n    let mut result = Vec::new();\n    for\
    \ i in 0..numbers.len() {\n        match numbers.len() - i {\n            0 =>\
    \ result.push(numbers[0]),\n            1 => result.push(numbers[0]),\n      \
    \      2 => result.push(numbers[0]),\n            _ => {\n                for\
    \ n in numbers.iter_mut() {\n                    *n = (*n + delimeter + n) % 10;\n\
    \                }\n                result.push(numbers[0]);\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&mut isize` to `isize`\n  --> /tmp/tmp1aj5a66z.rs:19:42\n\
    \   |\n19 |                     *n = (*n + delimeter + n) % 10;\n   |        \
    \                                  ^ no implementation for `isize + &mut isize`\n\
    \   |\n   = help: the trait `Add<&mut isize>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.iter().cloned().chunks(2).flat_map(|chunk|\
    \ chunk.iter().cloned().map(|i| i.0 * delimeter + i.1).collect()).collect()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `chunks` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpbltrqb38.rs:7:29\n  |\n7 |     numbers.iter().cloned().chunks(2).flat_map(|chunk|\
    \ chunk.iter().cloned().map(|i| i.0 * delimeter + i.1).collect()).collect()\n\
    \  |                             ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut iter = numbers.iter().cloned().collect::<Vec<isize>>();\n\
    \    let mut first = true;\n    while let Some(item) = iter.next().cloned() {\n\
    \        if first {\n            first = false;\n        } else {\n          \
    \  iter.next_back();\n            iter.next_back();\n        }\n        iter.push(item);\n\
    \        iter.next_back();\n    }\n    iter\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `next` found for struct `Vec<isize>` in the\
    \ current scope\n --> /tmp/tmp90n13yen.rs:9:33\n  |\n9 |     while let Some(item)\
    \ = iter.next().cloned() {\n  |                                 ^^^^ method not\
    \ found in `Vec<isize>`\n\nerror[E0599]: no method named `next_back` found for\
    \ struct `Vec<isize>` in the current scope\n  --> /tmp/tmp90n13yen.rs:13:18\n\
    \   |\n13 |             iter.next_back();\n   |                  ^^^^^^^^^ method\
    \ not found in `Vec<isize>`\n\nerror[E0599]: no method named `next_back` found\
    \ for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp90n13yen.rs:14:18\n\
    \   |\n14 |             iter.next_back();\n   |                  ^^^^^^^^^ method\
    \ not found in `Vec<isize>`\n\nerror[E0599]: no method named `next_back` found\
    \ for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp90n13yen.rs:17:14\n\
    \   |\n17 |         iter.next_back();\n   |              ^^^^^^^^^ method not\
    \ found in `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
