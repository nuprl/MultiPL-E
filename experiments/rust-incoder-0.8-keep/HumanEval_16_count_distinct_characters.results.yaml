name: HumanEval_16_count_distinct_characters
language: rust
results:
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c >= 'a' && c <= 'z').count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptv_osi21.rs:7:36\n  |\n7 |\
    \     string.chars().filter(|c| c >= 'a' && c <= 'z').count()\n  |           \
    \                         ^^^\n  |                                    |\n  | \
    \                                   expected `&char`, found `char`\n  |      \
    \                              help: consider borrowing here: `&'a'`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmptv_osi21.rs:7:48\n  |\n7 |     string.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count()\n  |                                         \
    \       ^^^\n  |                                                |\n  |       \
    \                                         expected `&char`, found `char`\n  |\
    \                                                help: consider borrowing here:\
    \ `&'z'`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptv_osi21.rs:7:5\n  |\n\
    6 | fn count_distinct_characters(string: String) -> isize {\n  |             \
    \                                    ----- expected `isize` because of return\
    \ type\n7 |     string.chars().filter(|c| c >= 'a' && c <= 'z').count()\n  | \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c| c\
    \ >= 'a' && c <= 'z').count().try_into().unwrap()\n  |                       \
    \                                     ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9fkcuuzm.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| *c != c.to_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyoho0isw.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| *c != c.to_ascii_lowercase()).count()\n  | \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and\
    \ panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ *c != c.to_ascii_lowercase()).count().try_into().unwrap()\n  |             \
    \                                                       ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c != '\\0').count()\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n --> /tmp/tmpmvs6l4ik.rs:7:33\n\
    \  |\n7 |     string.chars().filter(|c| c != '\\0').count()\n  |             \
    \                    ^^ no implementation for `&char == char`\n  |\n  = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n  = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpmvs6l4ik.rs:7:5\n  |\n6 | fn count_distinct_characters(string: String)\
    \ -> isize {\n  |                                                 ----- expected\
    \ `isize` because of return type\n7 |     string.chars().filter(|c| c != '\\0').count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n  |\n7 |     string.chars().filter(|c| c != '\\\
    0').count().try_into().unwrap()\n  |                                         \
    \        ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut counter = 0;\n    for c in string.chars() {\n\
    \        counter += c.chars().distinct().count();\n    }\n    counter\n}\n\nfn\
    \ main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `chars` found for type `char` in the current\
    \ scope\n --> /tmp/tmpya634hij.rs:9:22\n  |\n9 |         counter += c.chars().distinct().count();\n\
    \  |                      ^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.len().saturating_sub(1).iter().map(|c| string.chars().filter(|c|\
    \ *c == c).count()).sum()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for type `usize` in the current\
    \ scope\n --> /tmp/tmpcjz2ebn6.rs:7:36\n  |\n7 |     string.len().saturating_sub(1).iter().map(|c|\
    \ string.chars().filter(|c| *c == c).count()).sum()\n  |                     \
    \               ^^^^ method not found in `usize`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpcjz2ebn6.rs:7:83\n  |\n7 |     string.len().saturating_sub(1).iter().map(|c|\
    \ string.chars().filter(|c| *c == c).count()).sum()\n  |                     \
    \                                                              ^ expected `char`,\
    \ found `&char`\n  |\nhelp: consider dereferencing the borrow\n  |\n7 |     string.len().saturating_sub(1).iter().map(|c|\
    \ string.chars().filter(|c| *c == *c).count()).sum()\n  |                    \
    \                                                               +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| *c >= 'A' && *c <= 'Z').count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpv81zdy0k.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| *c >= 'A' && *c <= 'Z').count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').count().try_into().unwrap()\n  |                   \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct_characters = HashMap::new();\n    for\
    \ character in string.chars() {\n        distinct_characters.insert(character.to_lowercase(),\
    \ 1);\n        distinct_characters.insert(character.to_uppercase(), 1);\n    }\n\
    \    distinct_characters.values().count()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp4qczz5k7.rs:7:35\n  |\n7 |     let mut distinct_characters = HashMap::new();\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_uppercase() &&\
    \ !c.is_ascii_lowercase()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprb3mzkc6.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_uppercase() && !c.is_ascii_lowercase()).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_uppercase() && !c.is_ascii_lowercase()).count().try_into().unwrap()\n\
    \  |                                                                         \
    \                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut counter: isize = 0;\n    let mut char_map: [(usize,\
    \ usize)] = Default::default();\n    for (i, char) in string.chars().enumerate()\
    \ {\n        counter = i + (char_map.entry(char).or_insert(0) + (char == 'z' as\
    \ usize));\n    }\n    counter\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[(usize, usize)]` cannot be\
    \ known at compilation time\n --> /tmp/tmpy6nd0w0p.rs:8:9\n  |\n8 |     let mut\
    \ char_map: [(usize, usize)] = Default::default();\n  |         ^^^^^^^^^^^^ doesn't\
    \ have a size known at compile-time\n  |\n  = help: the trait `Sized` is not implemented\
    \ for `[(usize, usize)]`\n  = note: all local variables must have a statically\
    \ known size\n  = help: unsized locals are gated as an unstable feature\n\nerror[E0277]:\
    \ the trait bound `[(usize, usize)]: Default` is not satisfied\n --> /tmp/tmpy6nd0w0p.rs:8:42\n\
    \  |\n8 |     let mut char_map: [(usize, usize)] = Default::default();\n  |  \
    \                                        ^^^^^^^^^^^^^^^^ the trait `Default`\
    \ is not implemented for `[(usize, usize)]`\n  |\n  = help: the following other\
    \ types implement trait `Default`:\n            &[T]\n            &mut [T]\n \
    \           [T; 0]\n            [T; 10]\n            [T; 11]\n            [T;\
    \ 12]\n            [T; 13]\n            [T; 14]\n          and 27 others\n\nerror[E0599]:\
    \ no method named `entry` found for slice `[(usize, usize)]` in the current scope\n\
    \  --> /tmp/tmpy6nd0w0p.rs:10:33\n   |\n10 |         counter = i + (char_map.entry(char).or_insert(0)\
    \ + (char == 'z' as usize));\n   |                                 ^^^^^ method\
    \ not found in `[(usize, usize)]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy6nd0w0p.rs:10:69\n\
    \   |\n10 |         counter = i + (char_map.entry(char).or_insert(0) + (char ==\
    \ 'z' as usize));\n   |                                                      \
    \               ^^^^^^^^^^^^ expected `char`, found `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpy6nd0w0p.rs:10:19\n   |\n7  |     let mut counter: isize\
    \ = 0;\n   |                      ----- expected due to this type\n...\n10 | \
    \        counter = i + (char_map.entry(char).or_insert(0) + (char == 'z' as usize));\n\
    \   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpn8zn8un0.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii()).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmps9d5ljzy.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii()).count().try_into().unwrap()\n  |                             \
    \                       ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).filter(|c|\
    \ !c.is_ascii_uppercase()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpljhjh7iw.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).filter(|c| !c.is_ascii_uppercase()).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).filter(|c| !c.is_ascii_uppercase()).count().try_into().unwrap()\n\
    \  |                                                                         \
    \                          ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut total = 0;\n    for c in string.chars() {\n\
    \        total += c.chars().filter(|c| !c.is_whitespace()).count();\n    }\n \
    \   total\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `chars` found for type `char` in the current\
    \ scope\n --> /tmp/tmp5vw_0x14.rs:9:20\n  |\n9 |         total += c.chars().filter(|c|\
    \ !c.is_whitespace()).count();\n  |                    ^^^^^ method not found\
    \ in `char`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut freqs = HashMap::<char, usize>::new();\n   \
    \ for character in string.chars() {\n        match freqs.entry(character.clone())\
    \ {\n            Err(mut e) => e.insert(1),\n            Ok(_) => (),\n      \
    \  }\n    }\n\n    freqs.iter().map(|e| e.key).count() + freqs.iter().map(|e|\
    \ e.value).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmptrtg1kxk.rs:7:21\n  |\n7 |     let mut freqs = HashMap::<char, usize>::new();\n\
    \  |                     ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| *c < 'a' && *c > 'z' || *c\
    \ < 'A' && *c > 'Z').count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvu9qmfvn.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| *c < 'a' && *c > 'z' || *c < 'A' && *c > 'Z').count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ *c < 'a' && *c > 'z' || *c < 'A' && *c > 'Z').count().try_into().unwrap()\n\
    \  |                                                                         \
    \           ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii()).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpez0pb4si.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii()).count().try_into().unwrap()\n  |                             \
    \                       ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii()).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpaxkhexio.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii()).count().try_into().unwrap()\n  |                             \
    \                       ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut cnt = 0;\n    let mut len = string.get_len();\n\
    \    while let Some(c) = string.chars().next() {\n        cnt += (c == string[0]);\n\
    \        len -= 1;\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpyp48yi0x.rs:10:16\n\
    \   |\n10 |         cnt += (c == string[0]);\n   |                ^          \
    \    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove\
    \ these parentheses\n   |\n10 -         cnt += (c == string[0]);\n10 +       \
    \  cnt += c == string[0];\n   | \n\nerror[E0599]: no method named `get_len` found\
    \ for struct `String` in the current scope\n --> /tmp/tmpyp48yi0x.rs:8:26\n  |\n\
    8 |     let mut len = string.get_len();\n  |                          ^^^^^^^\
    \ method not found in `String`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `{integer}`\n  --> /tmp/tmpyp48yi0x.rs:10:22\n   |\n10 |         cnt += (c\
    \ == string[0]);\n   |                      ^^^^^^^^^ `String` cannot be indexed\
    \ by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpyp48yi0x.rs:10:13\n\
    \   |\n10 |         cnt += (c == string[0]);\n   |             ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to 3 previous errors; 1 warning\
    \ emitted\n\nSome errors have detailed explanations: E0277, E0599.\nFor more informatio"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Filter` in the\
    \ current scope\n --> /tmp/tmpi5btwtzp.rs:7:51\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).distinct().count()\n  |                                \
    \                   ^^^^^^^^ method not found in `Filter<Chars<'_>, [closure@/tmp/tmpi5btwtzp.rs:7:27:\
    \ 7:49]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase).count()\
    \ + 1\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `is_ascii_lowercase` on\
    \ type `&char`\n --> /tmp/tmpj6g69w4_.rs:7:34\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase).count() + 1\n  |                                  ^^^^^^^^^^^^^^^^^^\
    \ method, not a field\n  |\nhelp: use parentheses to call the method\n  |\n7 |\
    \     string.chars().filter(|c| !c.is_ascii_lowercase()).count() + 1\n  |    \
    \                                                ++\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpj6g69w4_.rs:7:5\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |                                                 -----\
    \ expected `isize` because of return type\n7 |     string.chars().filter(|c| !c.is_ascii_lowercase).count()\
    \ + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and\
    \ panic if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|c|\
    \ !c.is_ascii_lowercase).count() + 1).try_into().unwrap()\n  |     +         \
    \                                                   +++++++++++++++++++++\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0615.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| *c != c).count()\n}\n\nfn\
    \ main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpst6akork.rs:7:37\n  |\n7 |\
    \     string.chars().filter(|c| *c != c).count()\n  |                        \
    \             ^ expected `char`, found `&char`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n7 |     string.chars().filter(|c| *c != *c).count()\n  |  \
    \                                   +\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpst6akork.rs:7:5\n  |\n6 | fn count_distinct_characters(string: String)\
    \ -> isize {\n  |                                                 ----- expected\
    \ `isize` because of return type\n7 |     string.chars().filter(|c| *c != c).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \  |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n7 |     string.chars().filter(|c| *c != c).count().try_into().unwrap()\n\
    \  |                                               ++++++++++++++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpqttdmk6p.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string\n        .chars()\n        .filter(|c| *c !=\
    \ 'A' && *c != 'B' && *c != 'C' && *c != 'D' && *c != 'E' && *c != 'F' && *c !=\
    \ 'G' && *c != 'H' && *c != 'I' && *c != 'J' && *c != 'K' && *c != 'L' && *c !=\
    \ 'M' && *c != 'N' && *c != 'O' && *c != 'P' && *c != 'Q' && *c != 'R' && *c !=\
    \ 'S' && *c != 'T' && *c != 'U' && *c != 'V' && *c != 'W' && *c != 'X' && *c !=\
    \ 'Y' && *c != 'Z')\n        .count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6akc_pz0.rs:7:5\n   |\n6\
    \  |   fn count_distinct_characters(string: String) -> isize {\n   |         \
    \                                          ----- expected `isize` because of return\
    \ type\n7  | /     string\n8  | |         .chars()\n9  | |         .filter(|c|\
    \ *c != 'A' && *c != 'B' && *c != 'C' && *c != 'D' && *c != 'E' && *c != 'F' &&\
    \ *c != 'G' && *c != 'H' && *c != 'I' && ...\n10 | |         .count()\n   | |________________^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |         .count().try_into().unwrap()\n\
    \   |                 ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|&c| *c != ' ').count()\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmpfv8igisb.rs:7:32\n\
    \  |\n7 |     string.chars().filter(|&c| *c != ' ').count()\n  |             \
    \                   ^^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfv8igisb.rs:7:5\n\
    \  |\n6 | fn count_distinct_characters(string: String) -> isize {\n  |       \
    \                                          ----- expected `isize` because of return\
    \ type\n7 |     string.chars().filter(|&c| *c != ' ').count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|&c|\
    \ *c != ' ').count().try_into().unwrap()\n  |                                \
    \                  ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut result = HashSet::new();\n    for c in string.chars()\
    \ {\n        if !result.contains(&c) && c.is_uppercase() {\n            result.insert(c);\n\
    \        }\n    }\n    result.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpn33exuf9.rs:7:22\n  |\n7 |     let mut result = HashSet::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpu0y9icvz.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = 0\n    let mut prev_char = char::AsciiZero\
    \ as char;\n    for (i, c) in string.chars().enumerate() {\n        prev_char\
    \ = c;\n        if c == prev_char {\n            count += 1;\n        } else {\n\
    \            count = 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `let`\n --> /tmp/tmpglk4wkct.rs:7:22\n\
    \  |\n7 |     let mut count = 0\n  |                      ^ help: add `;` here\n\
    8 |     let mut prev_char = char::AsciiZero as char;\n  |     --- unexpected token\n\
    \nerror[E0599]: no associated item named `AsciiZero` found for type `char` in\
    \ the current scope\n --> /tmp/tmpglk4wkct.rs:8:31\n  |\n8 |     let mut prev_char\
    \ = char::AsciiZero as char;\n  |                               ^^^^^^^^^ associated\
    \ item not found in `char`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_digit()).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpy5m13dzc.rs:7:34\n    |\n7   |     string.chars().filter(|c| !c.is_digit()).count()\n\
    \    |                                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                                  |\n    |                                  expected\
    \ 1 argument\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpy5m13dzc.rs:7:5\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |                                                 -----\
    \ expected `isize` because of return type\n7 |     string.chars().filter(|c| !c.is_digit()).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n  |\n7 |     string.chars().filter(|c| !c.is_digit()).count().try_into().unwrap()\n\
    \  |                                                     ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| *c != '\\0').count();\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj4c1fz9o.rs:6:49\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |    -------------------------\
    \                    ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp7eocuzr1.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().count();\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqiy8hixt.rs:6:49\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |    -------------------------\
    \                    ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_alphabetic()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvdi_kudf.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_alphabetic()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_alphabetic()).count().try_into().unwrap()\n  |                        \
    \                                 ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut result = HashSet::new();\n    for ch in string.chars()\
    \ {\n        if !result.insert(ch).is_ok() {\n            return result.len();\n\
    \        }\n    }\n    result.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpmp6vhumk.rs:7:22\n  |\n7 |     let mut result = HashSet::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| *c > 32 && c < 128).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvucinm57.rs:7:36\n  |\n7 |\
    \     string.chars().filter(|c| *c > 32 && c < 128).count()\n  |             \
    \                       ^^ expected `char`, found `u8`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpvucinm57.rs:7:46\n  |\n7 |     string.chars().filter(|c|\
    \ *c > 32 && c < 128).count()\n  |                                           \
    \   ^^^ expected `&char`, found integer\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpvucinm57.rs:7:5\n  |\n6 | fn count_distinct_characters(string: String)\
    \ -> isize {\n  |                                                 ----- expected\
    \ `isize` because of return type\n7 |     string.chars().filter(|c| *c > 32 &&\
    \ c < 128).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ *c > 32 && c < 128).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = 0;\n    let mut ascii_set = HashSet::new();\n\
    \n    for ch in string.chars() {\n        let mut current_ascii = ascii_set.insert(ch).unwrap();\n\
    \        count = (count + 1) - current_ascii;\n    }\n\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp9b9yptxl.rs:8:25\n  |\n8 |     let mut ascii_set = HashSet::new();\n\
    \  |                         ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut char_set: HashSet<char> = HashSet::new();\n\
    \    for c in string.chars() {\n        char_set.insert(c);\n    }\n    char_set.len()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpjo2l22q6.rs:7:23\n\
    \  |\n7 |     let mut char_set: HashSet<char> = HashSet::new();\n  |         \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpjo2l22q6.rs:7:39\n\
    \  |\n7 |     let mut char_set: HashSet<char> = HashSet::new();\n  |         \
    \                              ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count().min(string.len())\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqrbs44gz.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count().min(string.len())\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().min(string.len()).try_into().unwrap()\n  |     \
    \                                                                       ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = 1usize;\n\n    for c in string.chars()\
    \ {\n        count += c as isize;\n    }\n\n    count\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp411elgn6.rs:10:18\n   |\n\
    10 |         count += c as isize;\n   |                  ^^^^^^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add-assign `isize` to `usize`\n  --> /tmp/tmp411elgn6.rs:10:15\n\
    \   |\n10 |         count += c as isize;\n   |               ^^ no implementation\
    \ for `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp411elgn6.rs:13:5\n\
    \   |\n6  | fn count_distinct_characters(string: String) -> isize {\n   |    \
    \                                             ----- expected `isize` because of\
    \ return type\n...\n13 |     count\n   |     ^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |     count.try_into().unwrap()\n   |          ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // Count every character in the string\n    let mut\
    \ count: HashMap<u8, usize> = HashMap::new();\n    string.chars().for_each(|c|\
    \ {\n        let c = match c {\n            Some(c) => c,\n            None =>\
    \ return,\n        };\n        if let Some(c) = count.entry(c).or_insert(0) {\n\
    \            count.entry(c).value += 1;\n        } else {\n            count.entry(c).value\
    \ = 1;\n        }\n    });\n    let mut c: usize = 0;\n    for (key, value) in\
    \ count {\n        c += value;\n    }\n    c\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpdf4xjbym.rs:8:20\n\
    \  |\n8 |     let mut count: HashMap<u8, usize> = HashMap::new();\n  |       \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpdf4xjbym.rs:8:41\n\
    \  |\n8 |     let mut count: HashMap<u8, usize> = HashMap::new();\n  |       \
    \                                  ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdf4xjbym.rs:11:13\n   |\n10 |\
    \         let c = match c {\n   |                       - this expression has\
    \ type `char`\n11 |             Some(c) => c,\n   |             ^^^^^^^ expected\
    \ `char`, found enum `Option`\n   |\n   = note: expected type `char`\n       \
    \       found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdf4xjbym.rs:12:13\n\
    \   |\n10 |         let c = match c {\n   |                       - this expression\
    \ has type `char`\n11 |             Some(c) => c,\n12 |             None => return,\n\
    \   |             ^^^^ expected `char`, found enum `Option`\n   |\n   = note:\
    \ expected type `char`\n              found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdf4xjbym.rs:24:5\n   |\n6  | fn count_distinct_characters(string:\
    \ String) -> isize {\n   |                                                 -----\
    \ expected `isize` because of return type\n...\n24 |     c\n   |     ^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n24 |     c.try_into().unwrap()\n\
    \   |      ++++++++++++++++++++\n\nerror: aborting due to 5 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqzuv46n_.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                   \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut cnt = 0;\n    for c in string.chars() {\n  \
    \      cnt += 1;\n        cnt += !is_unique_char(c);\n    }\n    cnt\n}\n\nfn\
    \ main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_unique_char` in this scope\n  -->\
    \ /tmp/tmplv18_5ns.rs:10:17\n   |\n10 |         cnt += !is_unique_char(c);\n \
    \  |                 ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpik6keouo.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string\n        .chars()\n        .cloned()\n      \
    \  .chain(string.chars())\n        .filter(|c| *c >= 'a' && *c <= 'z')\n     \
    \   .filter(|c| *c >= 'A' && *c <= 'Z')\n        .filter(|c| *c >= '0' && *c <=\
    \ '9')\n        .count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<Chars<'_> as Iterator>::Item ==\
    \ &_`\n    --> /tmp/tmpxlkfi0f4.rs:9:10\n     |\n9    |         .cloned()\n  \
    \   |          ^^^^^^ expected reference, found `char`\n     |\n     = note: expected\
    \ reference `&_`\n                     found type `char`\nnote: required by a\
    \ bound in `cloned`\n\nerror[E0599]: the method `chain` exists for struct `Cloned<Chars<'_>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpxlkfi0f4.rs:10:10\n \
    \  |\n10 |           .chain(string.chars())\n   |            ^^^^^ method cannot\
    \ be called on `Cloned<Chars<'_>>` due to unsatisfied trait bounds\n   |\n   =\
    \ note: the following trait bounds were not satisfied:\n           `<Chars<'_>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<Chars<'_>>:\
    \ Iterator`\n           `Cloned<Chars<'_>>: Iterator`\n           which is required\
    \ by `&mut Cloned<Chars<'_>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0271, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| *c != ' ').count()\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpum68rviv.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| *c != ' ').count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ *c != ' ').count().try_into().unwrap()\n  |                                \
    \                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string\n        .chars()\n        .flat_map(|c| c.to_ascii_lowercase().chars().collect::<Vec<_>>())\n\
    \        .distinct_by_key(|x| x)\n        .count()\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `chars` found for type `char` in the current\
    \ scope\n --> /tmp/tmpn8grbi9k.rs:9:46\n  |\n9 |         .flat_map(|c| c.to_ascii_lowercase().chars().collect::<Vec<_>>())\n\
    \  |                                              ^^^^^ method not found in `char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii()).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwsps7ldu.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii()).count().try_into().unwrap()\n  |                             \
    \                       ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmplujurnch.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_alphanumeric()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp1rnfytl.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_alphanumeric()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_alphanumeric()).count().try_into().unwrap()\n  |                     \
    \                                       ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string\n        .chars()\n        .map(|c| c.to_ascii_lowercase())\n\
    \        .filter(|c| c.is_ascii())\n        .filter(|c| c.is_ascii())\n      \
    \  .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .count();\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmp3fqsr6dg.rs:15:24\n   |\n15 |         .filter(|c|\
    \ !c.is_ascii_letter())\n   |                        ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp3fqsr6dg.rs:6:49\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |    -------------------------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_alphabetic()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8s1878mp.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_alphabetic()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_alphabetic()).count().try_into().unwrap()\n  |                        \
    \                                 ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|&c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp97qzysac.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|&c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|&c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                    ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().map(|c| c.to_lowercase()).filter(|c|\
    \ *c != '\\0').count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0369]: binary operation `!=` cannot be applied to type `ToLowercase`\n\
    \ --> /tmp/tmp4vkeot_6.rs:7:60\n  |\n7 |     string.chars().map(|c| c.to_lowercase()).filter(|c|\
    \ *c != '\\0').count()\n  |                                                  \
    \       -- ^^ ---- char\n  |                                                 \
    \        |\n  |                                                         ToLowercase\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp4vkeot_6.rs:7:5\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |                                                 -----\
    \ expected `isize` because of return type\n7 |     string.chars().map(|c| c.to_lowercase()).filter(|c|\
    \ *c != '\\0').count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().map(|c|\
    \ c.to_lowercase()).filter(|c| *c != '\\0').count().try_into().unwrap()\n  | \
    \                                                                           ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = 0;\n    for c in string.chars() {\n\
    \        if !c.is_upper() && c.is_lower() {\n            count += 1;\n       \
    \ }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n --> /tmp/tmp06ojxqm3.rs:9:15\n  |\n9 |         if !c.is_upper() && c.is_lower()\
    \ {\n  |               ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0599]: no method named `is_lower` found for type\
    \ `char` in the current scope\n --> /tmp/tmp06ojxqm3.rs:9:31\n  |\n9 |       \
    \  if !c.is_upper() && c.is_lower() {\n  |                               ^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_lowercase`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_lowercase()).count();\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0irgqkm5.rs:6:49\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |    -------------------------\
    \                    ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpvq8k4eg1.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().map(|c| c as usize).distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmppa3kw5z1.rs:7:40\n  |\n7 |     string.chars().map(|c|\
    \ c as usize).distinct().count()\n  |                                        ^^^^^^^^\
    \ method not found in `Map<Chars<'_>, [closure@/tmp/tmppa3kw5z1.rs:7:24: 7:38]>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase().is_none()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_none` found for type `bool` in the current\
    \ scope\n --> /tmp/tmp6j68yq1z.rs:7:55\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase().is_none()).count()\n  |                            \
    \                           ^^^^^^^ method not found in `bool`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp6j68yq1z.rs:7:5\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |                                                 -----\
    \ expected `isize` because of return type\n7 |     string.chars().filter(|c| !c.is_ascii_lowercase().is_none()).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase().is_none()).count().try_into().unwrap()\n  |        \
    \                                                                 ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string\n        .chars()\n        .filter(|c| !c.is_ascii_uppercase()\
    \ && !c.is_ascii_lowercase())\n        .distinct()\n        .count()\n}\n\nfn\
    \ main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Filter` in the\
    \ current scope\n  --> /tmp/tmpa2flzewz.rs:10:10\n   |\n10 |         .distinct()\n\
    \   |          ^^^^^^^^ method not found in `Filter<Chars<'_>, [closure@/tmp/tmpa2flzewz.rs:9:17:\
    \ 9:71]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter_map(|c| c.to_ascii_lowercase()).distinct().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpahj1tr7a.rs:7:35\n  |\n7 |\
    \     string.chars().filter_map(|c| c.to_ascii_lowercase()).distinct().count()\n\
    \  |                                   ^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`,\
    \ found `char`\n  |\n  = note: expected enum `Option<_>`\n             found type\
    \ `char`\nhelp: try wrapping the expression in `Some`\n  |\n7 |     string.chars().filter_map(|c|\
    \ Some(c.to_ascii_lowercase())).distinct().count()\n  |                      \
    \             +++++                      +\n\nerror[E0599]: no method named `distinct`\
    \ found for struct `FilterMap` in the current scope\n --> /tmp/tmpahj1tr7a.rs:7:59\n\
    \  |\n7 |     string.chars().filter_map(|c| c.to_ascii_lowercase()).distinct().count()\n\
    \  |                                                           ^^^^^^^^ method\
    \ not found in `FilterMap<Chars<'_>, [closure@/tmp/tmpahj1tr7a.rs:7:31: 7:57]>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars = HashMap::new();\n    for character in\
    \ string.chars() {\n        if chars.contains_key(&character) {\n            chars.insert(character,\
    \ chars.get(&character) + 1);\n        } else {\n            chars.insert(character,\
    \ 1);\n        }\n    }\n    chars.iter().filter(|(_, count)| count > 1).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpakq9n2q4.rs:7:21\n  |\n7 |     let mut chars = HashMap::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1snhyadb.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars()\n        .map(|c| c.to_lowercase().chars().count())\n\
    \        .sum()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `chars` found for struct `ToLowercase` in\
    \ the current scope\n --> /tmp/tmp42f3opvh.rs:8:35\n  |\n8 |         .map(|c|\
    \ c.to_lowercase().chars().count())\n  |                                   ^^^^^\
    \ method not found in `ToLowercase`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii()).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqcvcu11t.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii()).count().try_into().unwrap()\n  |                            \
    \                         ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut set = HashSet::new();\n    string.chars().filter_map(|c|\
    \ {\n        set.insert(c).ok().unwrap_or_else(|| {\n            format!(\"{:?}\
    \ is not a valid character\", c)\n        })\n    }).count();\n    return set.len();\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpfb3g6fes.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = 0;\n    for c in string.chars() {\n\
    \        count = count + 1;\n        if c.to_ascii_lowercase().is_ascii() {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `5`', /tmp/tmp4wlygcr7.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| *c >= 'A' && *c <= 'Z').count()\
    \ +\n        string.chars().filter(|c| *c >= 'a' && *c <= 'z').count()\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1_r_4l1t.rs:7:5\n  |\n6 |\
    \   fn count_distinct_characters(string: String) -> isize {\n  |             \
    \                                      ----- expected `isize` because of return\
    \ type\n7 | /     string.chars().filter(|c| *c >= 'A' && *c <= 'Z').count() +\n\
    8 | |         string.chars().filter(|c| *c >= 'a' && *c <= 'z').count()\n  | |_________________________________________________________________^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 ~     (string.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').count() +\n8 ~         string.chars().filter(|c| *c\
    \ >= 'a' && *c <= 'z').count()).try_into().unwrap()\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    if string.len() == 0 {\n        0\n    } else {\n  \
    \      let mut char_counter: isize = 0;\n        let mut prev_char: &char = &string[0];\n\
    \        let mut current_char: &char = &string[0];\n        for char in string.iter()\
    \ {\n            if char == prev_char {\n                char_counter = char_counter\
    \ + 1;\n            } else {\n                if char_counter > 0 {\n        \
    \            return char_counter;\n                } else {\n                \
    \    char_counter = 1;\n                }\n            }\n            prev_char\
    \ = current_char;\n            current_char = char;\n        }\n    }\n    0\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2wxvrg6c.rs:8:9\n   |\n7\
    \  | /     if string.len() == 0 {\n8  | |         0\n   | |         ^ expected\
    \ `()`, found integer\n9  | |     } else {\n10 | |         let mut char_counter:\
    \ isize = 0;\n...  |\n25 | |         }\n26 | |     }\n   | |_____- expected this\
    \ to be `()`\n   |\nhelp: you might have meant to return this value\n   |\n8 \
    \ |         return 0;\n   |         ++++++  +\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `{integer}`\n  --> /tmp/tmp2wxvrg6c.rs:11:37\n   |\n11\
    \ |         let mut prev_char: &char = &string[0];\n   |                     \
    \                ^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n \
    \  = help: the trait `Index<{integer}>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n\
    \  --> /tmp/tmp2wxvrg6c.rs:12:40\n   |\n12 |         let mut current_char: &char\
    \ = &string[0];\n   |                                        ^^^^^^^^^ `String`\
    \ cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `iter` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp2wxvrg6c.rs:13:28\n   |\n13 |         for\
    \ char in string.iter() {\n   |             "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().fold(1, |n, c| n + count_distinct_chars(&c))\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_distinct_chars` in this scope\n\
    \ --> /tmp/tmp3a3igtc4.rs:7:39\n  |\n7 |     string.chars().fold(1, |n, c| n +\
    \ count_distinct_chars(&c))\n  |                                       ^^^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = HashMap::new();\n    string.chars().for_each(|c|\
    \ {\n        let key = char::to_ascii_lowercase(c.to_owned());\n        match\
    \ count.entry(key) {\n            Occupied::Vacant(occupied) => occupied.insert(1),\n\
    \            Occupied::Occupied(occupied) => occupied.get_mut().inc(),\n     \
    \   }\n    });\n    count.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Occupied`\n  -->\
    \ /tmp/tmp4centjru.rs:11:13\n   |\n11 |             Occupied::Vacant(occupied)\
    \ => occupied.insert(1),\n   |             ^^^^^^^^ use of undeclared type `Occupied`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Occupied`\n  --> /tmp/tmp4centjru.rs:12:13\n\
    \   |\n12 |             Occupied::Occupied(occupied) => occupied.get_mut().inc(),\n\
    \   |             ^^^^^^^^ use of undeclared type `Occupied`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp4centjru.rs:7:21\n\
    \  |\n7 |     let mut count = HashMap::new();\n  |                     ^^^^^^^\
    \ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 |\
    \ use std::collections::HashMap;\n  |\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp4centjru.rs:9:44\n  |\n9 |         let key = char::to_ascii_lowercase(c.to_owned());\n\
    \  |                                            ^^^^^^^^^^^^\n  |            \
    \                                |\n  |                                      \
    \      expected `&char`, found `char`\n  |                                   \
    \         help: consider borrowing here: `&c.to_owned()`\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpyvh853hq.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmprgps971z.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| *c != c).count()\n}\n\nfn\
    \ main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzu8_hsdy.rs:7:37\n  |\n7 |\
    \     string.chars().filter(|c| *c != c).count()\n  |                        \
    \             ^ expected `char`, found `&char`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n7 |     string.chars().filter(|c| *c != *c).count()\n  |  \
    \                                   +\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpzu8_hsdy.rs:7:5\n  |\n6 | fn count_distinct_characters(string: String)\
    \ -> isize {\n  |                                                 ----- expected\
    \ `isize` because of return type\n7 |     string.chars().filter(|c| *c != c).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \  |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n7 |     string.chars().filter(|c| *c != c).count().try_into().unwrap()\n\
    \  |                                               ++++++++++++++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut counter = 0;\n    for c in string.chars() {\n\
    \        if !c.is_alphabetic() {\n            counter = counter + 1;\n       \
    \ }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp7_1d78se.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii_lower()).count()\
    \ + string.chars().filter(|c| c.is_ascii_upper()).count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_lower` found for reference `&char`\
    \ in the current scope\n --> /tmp/tmpojq1f8w8.rs:7:33\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii_lower()).count() + string.chars().filter(|c| c.is_ascii_upper()).count()\n\
    \  |                                 ^^^^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_upper`\
    \ found for reference `&char` in the current scope\n --> /tmp/tmpojq1f8w8.rs:7:89\n\
    \  |\n7 |     string.chars().filter(|c| c.is_ascii_lower()).count() + string.chars().filter(|c|\
    \ c.is_ascii_upper()).count()\n  |                                           \
    \                                              ^^^^^^^^^^^^^^ help: there is an\
    \ associated function with a similar name: `is_ascii`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpojq1f8w8.rs:7:5\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |                                                 -----\
    \ expected `isize` because of return type\n7 |     string.chars().filter(|c| c.is_ascii_lower()).count()\
    \ + string.chars().filter(|c| c.is_ascii_upper()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|c|\
    \ c.is_ascii_lower()).count() + string.chars().filter(|c| c.is_ascii_upper()).count()).try_into().unwrap()\n\
    \  |     +                                                                   \
    \                                          +++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string\n        .chars()\n        .filter(|&c| c > 'z'\
    \ && c < 'Z')\n        .filter(|&c| c > 'z')\n        .filter(|&c| c < 'Z')\n\
    \        .distinct()\n        .count()\n}\n\nfn main() {\n    let candidate =\
    \ count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Filter` in the\
    \ current scope\n  --> /tmp/tmpsv4vm83g.rs:12:10\n   |\n12 |         .distinct()\n\
    \   |          ^^^^^^^^ method not found in `Filter<Filter<Filter<Chars<'_>, [closure@/tmp/tmpsv4vm83g.rs:9:17:\
    \ 9:40]>, [closure@/tmp/tmpsv4vm83g.rs:10:17: 10:29]>, [closure@/tmp/tmpsv4vm83g.rs:11:17:\
    \ 11:29]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpe667f70d.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // Get a lowercase version of the string.\n    let mut\
    \ lowercase = string.to_lowercase();\n\n    // Iterate through the string and\
    \ count the number of distinct characters.\n    let mut count = 0;\n    for (i,\
    \ c) in lowercase\n        .char_indices()\n        .flat_map(|(i: usize, c: char)|\
    \ {\n            // If we've already seen this character, skip it.\n         \
    \   if i > 0 && lowercase[i - 1] == c {\n                None\n            } else\
    \ {\n                Some((i, c))\n            }\n        })\n    {\n        count\
    \ += 1;\n    }\n\n    count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `@`, or `|`, found `:`\n  --> /tmp/tmpwhnd1kc_.rs:14:22\n\
    \   |\n14 |         .flat_map(|(i: usize, c: char)| {\n   |                  \
    \    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: expected one of `!`, `(`,\
    \ `+`, `::`, `<`, or `|`, found `)`\n  --> /tmp/tmpwhnd1kc_.rs:14:38\n   |\n14\
    \ |         .flat_map(|(i: usize, c: char)| {\n   |                          \
    \            ^ expected one of `!`, `(`, `+`, `::`, `<`, or `|`\n\nerror: aborting\
    \ due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut counter = 0;\n    let mut previous_char = '\\\
    0';\n    for ch in string.chars() {\n        let char_case = ch.to_ascii_lowercase();\n\
    \        if previous_char != char_case {\n            counter += 1;\n        }\n\
    \        previous_char = char_case;\n    }\n    counter\n}\n\nfn main() {\n  \
    \  let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `5`', /tmp/tmp8n3r6ph8.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    if string.len() == 0 {\n        0\n    } else {\n  \
    \      let mut counter = HashMap::new();\n        for char in string {\n     \
    \       let char_hash = char.chars().fold(0, |mut acc, _| acc.checked_add(1));\n\
    \            counter.insert(char, char_hash);\n        }\n        counter.len()\n\
    \    }\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpkfri1t3h.rs:10:27\n   |\n10 |         let mut counter = HashMap::new();\n\
    \   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0277]:\
    \ `String` is not an iterator\n  --> /tmp/tmpkfri1t3h.rs:11:21\n   |\n11 |   \
    \      for char in string {\n   |                     ^^^^^^ `String` is not an\
    \ iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator`\
    \ is not implemented for `String`\n   = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp_xxxbpc.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| *c != '\\0').count()\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpucl3qo87.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| *c != '\\0').count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ *c != '\\0').count().try_into().unwrap()\n  |                              \
    \                    ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // Add all chars.\n    let mut counts = String::new();\n\
    \    for ch in string.chars() {\n        counts += ch;\n    }\n    // Sort and\
    \ subtract the first char.\n    counts.sort_by(|a, b| a.cmp(b));\n    counts.len()\
    \ - counts[0].cmp(&mut counts[1])\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbupsl0mo.rs:10:19\n   |\n\
    10 |         counts += ch;\n   |                   ^^ expected `&str`, found `char`\n\
    \nerror[E0599]: no method named `sort_by` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpbupsl0mo.rs:13:12\n   |\n13 |     counts.sort_by(|a, b|\
    \ a.cmp(b));\n   |            ^^^^^^^ method not found in `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpbupsl0mo.rs:14:20\n\
    \   |\n14 |     counts.len() - counts[0].cmp(&mut counts[1])\n   |           \
    \         ^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help:\
    \ the trait `Index<{integer}>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpbupsl0mo.rs:14:39\n\
    \   |\n14 |     counts.len() - counts[0].cmp(&mut counts[1])\n   |           \
    \                            ^^^^^^^^^ `String` cannot be indexed by `{integer}`\n\
    \   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbupsl0mo.rs:14:5\n\
    \   |\n6  | fn count_distinct_characters(string: String) -> isize {\n   |    \
    \                                             ----- expected `isize` because of\
    \ return type\n...\n14 |"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string\n        .chars()\n        .map(|c| c.to_ascii_lowercase())\n\
    \        .chain()\n        .flat_map(|c| c.chars().filter(|x| !x.is_ascii_lowercase()).cloned())\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_digit())\n        .count()\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmp0915kefr.rs:10:10\n    |\n10  |         .chain()\n    |      \
    \    ^^^^^- supplied 0 arguments\n    |          |\n    |          expected 1\
    \ argument\n    |\nnote: associated function defined here\n\nerror[E0599]: no\
    \ method named `chars` found for type `char` in the current scope\n  --> /tmp/tmp0915kefr.rs:11:25\n\
    \   |\n11 |         .flat_map(|c| c.chars().filter(|x| !x.is_ascii_lowercase()).cloned())\n\
    \   |                         ^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_letter()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n --> /tmp/tmpvyfv44ax.rs:7:34\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_letter()).count()\n  |                                  ^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpvyfv44ax.rs:7:5\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |                                                 -----\
    \ expected `isize` because of return type\n7 |     string.chars().filter(|c| !c.is_ascii_letter()).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c| !c.is_ascii_letter()).count().try_into().unwrap()\n\
    \  |                                                            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_alphabetic()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjl9l0e9x.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_alphabetic()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_alphabetic()).count().try_into().unwrap()\n  |                        \
    \                                 ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut counter = 0;\n    for c in string.chars() {\n\
    \        if c.is_ascii_lowercase() || c.is_ascii_uppercase() {\n            counter\
    \ += 1;\n        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate =\
    \ count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `5`', /tmp/tmpuzlc9my7.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut seen: HashSet<String> = HashSet::new();\n  \
    \  for c in string.chars() {\n        if !seen.insert(*c).is_ok() {\n        \
    \    return 0;\n        }\n    }\n    string.chars().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpd2zzoseb.rs:7:19\n\
    \  |\n7 |     let mut seen: HashSet<String> = HashSet::new();\n  |           \
    \        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpd2zzoseb.rs:7:37\n  |\n7 |  \
    \   let mut seen: HashSet<String> = HashSet::new();\n  |                     \
    \                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0614]: type\
    \ `char` cannot be dereferenced\n --> /tmp/tmpd2zzoseb.rs:9:25\n  |\n9 |     \
    \    if !seen.insert(*c).is_ok() {\n  |                         ^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd2zzoseb.rs:13:5\n   |\n6  | fn count_distinct_characters(string:\
    \ String) -> isize {\n   |                                                 -----\
    \ expected `isize` because of return type\n...\n13 |     string.chars().count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n13 |     string.chars().count().try_into().unwrap()\n   |       \
    \                    ++++++++++++++++++++\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0412, E0433, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct = 0;\n    for (i, char) in string.chars().enumerate()\
    \ {\n        if string.chars().skip(i).any(|c| c != char) {\n            distinct\
    \ += 1;\n        }\n    }\n    distinct\n}\n\nfn main() {\n    let candidate =\
    \ count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `5`', /tmp/tmpr5h9ru2c.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c >= 'a' && c <= 'z').filter(|c|\
    \ c >= 'A' && c <= 'Z').count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp39xg9jhz.rs:7:36\n  |\n7 |\
    \     string.chars().filter(|c| c >= 'a' && c <= 'z').filter(|c| c >= 'A' && c\
    \ <= 'Z').count()\n  |                                    ^^^\n  |           \
    \                         |\n  |                                    expected `&char`,\
    \ found `char`\n  |                                    help: consider borrowing\
    \ here: `&'a'`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp39xg9jhz.rs:7:48\n\
    \  |\n7 |     string.chars().filter(|c| c >= 'a' && c <= 'z').filter(|c| c >=\
    \ 'A' && c <= 'Z').count()\n  |                                              \
    \  ^^^\n  |                                                |\n  |            \
    \                                    expected `&char`, found `char`\n  |     \
    \                                           help: consider borrowing here: `&'z'`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp39xg9jhz.rs:7:69\n  |\n7 |    \
    \ string.chars().filter(|c| c >= 'a' && c <= 'z').filter(|c| c >= 'A' && c <=\
    \ 'Z').count()\n  |                                                          \
    \           ^^^\n  |                                                         \
    \            |\n  |                                                          \
    \           expected `&char`, found `char`\n  |                              \
    \                                       help: consider borrowing here: `&'A'`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp39xg9jhz.rs:7:81\n  |\n7 |    \
    \ string.chars().filter(|c| c >= 'a' && c <= 'z').filter(|c| c >= 'A' && c <=\
    \ 'Z').count()\n  |                                                          \
    \                       ^^^\n  |                                             \
    \                                    |\n  |                                  \
    \                                               expected `&char`, found `char`\n\
    \  |                                                                         \
    \        help: consider borrowing here: `&'Z'`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp39xg9jhz.rs:7:5\n  |\n6 | fn count_distinct_characters(string: String)"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp4tpt0b37.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii()).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpamad53qf.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii()).count().try_into().unwrap()\n  |                             \
    \                       ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut counter: isize = 0;\n    for ch in string.chars()\
    \ {\n        counter = if !ch.is_upper() {\n            counter + 1\n        }\
    \ else {\n            if counter == 0 {\n                1\n            } else\
    \ {\n                counter - 1\n            }\n        };\n    }\n    counter\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n --> /tmp/tmpxkq2l1do.rs:9:26\n  |\n9 |         counter = if !ch.is_upper()\
    \ {\n  |                          ^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_uppercase`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string\n        .chars()\n        .cloned()\n      \
    \  .filter(|&c| !c.is_ascii_lowercase())\n        .filter(|&c| !c.is_ascii_uppercase())\n\
    \        .filter(|&c| !c.is_ascii_digit())\n        .filter(|&c| !c.is_ascii_letter())\n\
    \        .count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<Chars<'_> as Iterator>::Item ==\
    \ &_`\n    --> /tmp/tmpe63rbb8w.rs:9:10\n     |\n9    |         .cloned()\n  \
    \   |          ^^^^^^ expected reference, found `char`\n     |\n     = note: expected\
    \ reference `&_`\n                     found type `char`\nnote: required by a\
    \ bound in `cloned`\n\nerror[E0599]: the method `filter` exists for struct `Cloned<Chars<'_>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpe63rbb8w.rs:10:10\n \
    \  |\n10 |           .filter(|&c| !c.is_ascii_lowercase())\n   |            ^^^^^^\
    \ method cannot be called on `Cloned<Chars<'_>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `<Chars<'_>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<Chars<'_>>:\
    \ Iterator`\n           `Cloned<Chars<'_>>: Iterator`\n           which is required\
    \ by `&mut Cloned<Chars<'_>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0271, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii()).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn__e103z.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii()).count().try_into().unwrap()\n  |                            \
    \                         ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut i = 0;\n    for ch in string.chars() {\n   \
    \     i += ch.chars().filter(|c| !c.is_whitespace()).count() + 1;\n    }\n   \
    \ i\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `chars` found for type `char` in the current\
    \ scope\n --> /tmp/tmpmz5n8m73.rs:9:17\n  |\n9 |         i += ch.chars().filter(|c|\
    \ !c.is_whitespace()).count() + 1;\n  |                 ^^^^^ method not found\
    \ in `char`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = HashSet::new();\n    string.chars().for_each(|c|\
    \ *count.insert(c));\n    count.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpg_ktrt_e.rs:7:21\n  |\n7 |     let mut count = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut i = 0;\n    let mut current_char = false;\n\
    \    while i < string.len() {\n        current_char = string.chars().any(|c| {\n\
    \            (*c) != string[i..i + 1]\n        });\n        if current_char {\n\
    \            i += 1;\n        } else {\n            i += 1;\n            i +=\
    \ 1;\n        }\n    }\n    i\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp7pz7lquu.rs:11:13\n\
    \   |\n11 |             (*c) != string[i..i + 1]\n   |             ^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7pz7lquu.rs:20:5\n   |\n6  | fn count_distinct_characters(string:\
    \ String) -> isize {\n   |                                                 -----\
    \ expected `isize` because of return type\n...\n20 |     i\n   |     ^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n20 |     i.try_into().unwrap()\n\
    \   |      ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut seen: HashSet<String> = HashSet::new();\n  \
    \  string.chars().for_each(|c| {\n        let _ = seen.insert(c.to_lowercase());\n\
    \        seen.insert(c.to_uppercase());\n    });\n    seen.len()\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp4krl3vu1.rs:7:19\n\
    \  |\n7 |     let mut seen: HashSet<String> = HashSet::new();\n  |           \
    \        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp4krl3vu1.rs:7:37\n  |\n7 |  \
    \   let mut seen: HashSet<String> = HashSet::new();\n  |                     \
    \                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string\n        .chars()\n        .filter(|c| *c >=\
    \ 'A' && *c <= 'Z' || *c >= 'a' && *c <= 'z')\n        .count()\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5xrynu4q.rs:7:5\n   |\n6\
    \  |   fn count_distinct_characters(string: String) -> isize {\n   |         \
    \                                          ----- expected `isize` because of return\
    \ type\n7  | /     string\n8  | |         .chars()\n9  | |         .filter(|c|\
    \ *c >= 'A' && *c <= 'Z' || *c >= 'a' && *c <= 'z')\n10 | |         .count()\n\
    \   | |________________^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n10 |         .count().try_into().unwrap()\n   |                 ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = 0;\n    for c in string.chars() {\n\
    \        if !string.chars().any(|other| *other == c) {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmpvcwaah24.rs:9:40\n\
    \  |\n9 |         if !string.chars().any(|other| *other == c) {\n  |         \
    \                               ^^^^^^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // TODO: Replace with HashMap when we can use Rust >=\
    \ 1.15\n    let mut counts = HashMap::new();\n    for c in string.chars() {\n\
    \        if !counts.contains_key(c) {\n            counts.insert(c, 1);\n    \
    \    } else {\n            counts.entry(*c).or_insert(0) += 1;\n        }\n  \
    \  }\n    counts.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp3tzu9kex.rs:8:22\n  |\n8 |     let mut counts = HashMap::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0614]: type\
    \ `char` cannot be dereferenced\n  --> /tmp/tmp3tzu9kex.rs:13:26\n   |\n13 | \
    \            counts.entry(*c).or_insert(0) += 1;\n   |                       \
    \   ^^\n\nerror[E0067]: invalid left-hand side of assignment\n  --> /tmp/tmp3tzu9kex.rs:13:43\n\
    \   |\n13 |             counts.entry(*c).or_insert(0) += 1;\n   |            \
    \ ----------------------------- ^^\n   |             |\n   |             cannot\
    \ assign to this expression\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0067, E0433, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0067`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars = HashSet::new();\n    for char in string.chars()\
    \ {\n        chars.insert(char);\n    }\n    chars.len()\n}\n\nfn main() {\n \
    \   let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpyk5qnbp5.rs:7:21\n  |\n7 |     let mut chars = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    if string.is_empty() {\n        return 0;\n    }\n \
    \   string.chars().distinct().count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n  --> /tmp/tmpg4tapo8z.rs:10:20\n   |\n10 |     string.chars().distinct().count()\n\
    \   |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars()\n        .map(|c| c as isize)\n     \
    \   .count();\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfq7lbjzb.rs:6:49\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |    -------------------------\
    \                    ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().map(|c| c).distinct(|&x| x).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmpmwvt_lbq.rs:7:31\n  |\n7 |     string.chars().map(|c|\
    \ c).distinct(|&x| x).count()\n  |                               ^^^^^^^^ method\
    \ not found in `Map<Chars<'_>, [closure@/tmp/tmpmwvt_lbq.rs:7:24: 7:29]>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut freqs = vec![0; 26];\n    for ch in string.chars()\
    \ {\n        *freqs = if ch == ('A' as char) {\n            *freqs + 1\n     \
    \   } else {\n            *freqs\n        };\n    }\n    *freqs\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `{integer}` to `[{integer}]`\n  --> /tmp/tmpzvd6zlci.rs:10:20\n\
    \   |\n10 |             *freqs + 1\n   |             ------ ^ - {integer}\n  \
    \ |             |\n   |             [{integer}]\n\nerror[E0277]: the size for\
    \ values of type `[{integer}]` cannot be known at compilation time\n --> /tmp/tmpzvd6zlci.rs:9:9\n\
    \  |\n9 |         *freqs = if ch == ('A' as char) {\n  |         ^^^^^^ doesn't\
    \ have a size known at compile-time\n  |\n  = help: the trait `Sized` is not implemented\
    \ for `[{integer}]`\n  = note: the left-hand-side of an assignment must have a\
    \ statically known size\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzvd6zlci.rs:15:5\n\
    \   |\n6  | fn count_distinct_characters(string: String) -> isize {\n   |    \
    \                                             ----- expected `isize` because of\
    \ return type\n...\n15 |     *freqs\n   |     ^^^^^^ expected `isize`, found slice\
    \ `[{integer}]`\n   |\nhelp: parentheses are required to parse this as an expression\n\
    \   |\n8  ~     (for ch in string.chars() {\n9  |         *freqs = if ch == ('A'\
    \ as char) {\n10 |             *freqs + 1\n11 |         } else {\n12 |       \
    \      *freqs\n13 |         };\n ...\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count();\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpauooe055.rs:7:20\n  |\n7 |     string.chars().distinct().count();\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpauooe055.rs:6:49\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |    -------------------------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count() + 1\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpbjvhhrsw.rs:7:20\n  |\n7 |     string.chars().distinct().count()\
    \ + 1\n  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // count the characters in string in case-insensitive\
    \ mode\n    let mut counter: usize = 0;\n    for c in string.chars() {\n     \
    \   counter = std::cmp::min(counter, c.len_utf8());\n    }\n    counter\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptid9w5e2.rs:12:5\n   |\n\
    6  | fn count_distinct_characters(string: String) -> isize {\n   |           \
    \                                      ----- expected `isize` because of return\
    \ type\n...\n12 |     counter\n   |     ^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n12 |     counter.try_into().unwrap()\n   |        \
    \    ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string\n        .chars()\n        .filter(|c| c.is_ascii_lowercase())\n\
    \        .count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvef5h1wz.rs:7:5\n   |\n6\
    \  |   fn count_distinct_characters(string: String) -> isize {\n   |         \
    \                                          ----- expected `isize` because of return\
    \ type\n7  | /     string\n8  | |         .chars()\n9  | |         .filter(|c|\
    \ c.is_ascii_lowercase())\n10 | |         .count()\n   | |________________^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |         .count().try_into().unwrap()\n\
    \   |                 ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    if string.is_empty() {\n        return 0;\n    }\n \
    \   let mut char_count = String::new();\n    let mut is_distinct_char = false;\n\
    \    for c in string.chars() {\n        if char_count.contains(&c.to_lowercase())\
    \ {\n            char_count.replace(&c.to_lowercase(), 1, &c.to_lowercase());\n\
    \        } else {\n            char_count.push(c.to_lowercase());\n        }\n\
    \        is_distinct_char = char_count == string;\n    }\n    if is_distinct_char\
    \ {\n        char_count.len()\n    } else {\n        0\n    }\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: expected a `Fn<(char,)>` closure, found `ToLowercase`\n \
    \   --> /tmp/tmpeq5dmab3.rs:13:32\n     |\n13   |         if char_count.contains(&c.to_lowercase())\
    \ {\n     |                       -------- ^^^^^^^^^^^^^^^^^ expected an `Fn<(char,)>`\
    \ closure, found `ToLowercase`\n     |                       |\n     |       \
    \                required by a bound introduced by this call\n     |\n     = help:\
    \ the trait `Fn<(char,)>` is not implemented for `ToLowercase`\n     = help: the\
    \ following other types implement trait `Pattern<'a>`:\n               &'b String\n\
    \               &'b [char; N]\n               &'b [char]\n               &'b str\n\
    \               &'c &'b str\n               [char; N]\n               char\n \
    \              pattern::MultiCharEqPattern<C>\n     = note: required because of\
    \ the requirements on the impl of `FnOnce<(char,)>` for `&ToLowercase`\n     =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `&ToLowercase`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    \nerror[E0061]: this function takes 2 arguments but 3 arguments were supplied\n\
    \   --> /tmp/tmpeq5dmab3.rs:14:24\n    |\n14  |             char_count.replace(&c.to_lowercase(),\
    \ 1, &c.to_lowercase());\n    |                        ^^^^^^^ -----------------\
    \  -  ----------------- supplied 3 arguments\n    |                        |\n\
    \    |                        expected 2 arguments\n    |\nnote: associated function\
    \ defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeq5dmab3.rs:16:29\n\
    \   |\n16 |             char_count.push(c.to_lowercase());\n   |             \
    \                ^^^^^^^^^^^^^^^^ expected `char`, found struct `ToLowercase`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpeq5dmab3.rs:21:9\n   |\n6  | fn\
    \ count_distinct_characters(string: String) -> isize {\n   |                 \
    \                                ----- expected `isize` because of return type\n\
    ...\n21 |         char_count.len()\n   |         ^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the con"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut counts = HashMap::new();\n\n    for c in string.chars()\
    \ {\n        counts.entry(c).or_insert(0) += 1;\n    }\n\n    counts.len()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp40474xjr.rs:7:22\n  |\n7 |     let mut counts = HashMap::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0067]: invalid\
    \ left-hand side of assignment\n  --> /tmp/tmp40474xjr.rs:10:38\n   |\n10 |  \
    \       counts.entry(c).or_insert(0) += 1;\n   |         ----------------------------\
    \ ^^\n   |         |\n   |         cannot assign to this expression\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0067, E0433.\nFor more information about an error, try `rustc --explain E0067`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut result = 1;\n    let mut current_char = 'A';\n\
    \n    for c in string.chars() {\n        if c == current_char {\n            result++;\n\
    \        } else {\n            current_char = c;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmptc3_nbh8.rs:12:19\n\
    \   |\n12 |             result++;\n   |                   ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n12 |             { let tmp =\
    \ result; result += 1; tmp };\n   |             +++++++++++       ~~~~~~~~~~~~~~~~~~~~\n\
    12 -             result++;\n12 +             result += 1;\n   | \n\nerror: aborting\
    \ due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c != '\\0').count()\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n --> /tmp/tmprnmit50b.rs:7:33\n\
    \  |\n7 |     string.chars().filter(|c| c != '\\0').count()\n  |             \
    \                    ^^ no implementation for `&char == char`\n  |\n  = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n  = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmprnmit50b.rs:7:5\n  |\n6 | fn count_distinct_characters(string: String)\
    \ -> isize {\n  |                                                 ----- expected\
    \ `isize` because of return type\n7 |     string.chars().filter(|c| c != '\\0').count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n  |\n7 |     string.chars().filter(|c| c != '\\\
    0').count().try_into().unwrap()\n  |                                         \
    \        ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string\n        .chars()\n        .flat_map(|c| c.to_lowercase())\n\
    \        .filter(|c| c != ' ') // do not count space\n        .distinct()\n  \
    \      .count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpg57m8f5r.rs:10:23\n\
    \   |\n10 |         .filter(|c| c != ' ') // do not count space\n   |        \
    \               ^^ no implementation for `&char == char`\n   |\n   = help: the\
    \ trait `PartialEq<char>` is not implemented for `&char`\n   = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror[E0599]: no method named `distinct`\
    \ found for struct `Filter` in the current scope\n  --> /tmp/tmpg57m8f5r.rs:11:10\n\
    \   |\n11 |         .distinct()\n   |          ^^^^^^^^ method not found in `Filter<FlatMap<Chars<'_>,\
    \ ToLowercase, [closure@/tmp/tmpg57m8f5r.rs:9:19: 9:39]>, [closure@/tmp/tmpg57m8f5r.rs:10:17:\
    \ 10:29]>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_alphanumeric()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjfiz3sez.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_alphanumeric()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_alphanumeric()).count().try_into().unwrap()\n  |                     \
    \                                       ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii()).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwfpi5ny4.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii()).count().try_into().unwrap()\n  |                             \
    \                       ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = HashMap::new();\n    for c in string.chars()\
    \ {\n        if !count.contains_key(&c) {\n            count.insert(c, 1);\n \
    \       } else {\n            count.entry(c).or_insert(0) as isize += 1;\n   \
    \     }\n    }\n    count.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp1er2lcd3.rs:7:21\n  |\n7 |     let mut count = HashMap::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0067]: invalid\
    \ left-hand side of assignment\n  --> /tmp/tmp1er2lcd3.rs:12:50\n   |\n12 |  \
    \           count.entry(c).or_insert(0) as isize += 1;\n   |             ------------------------------------\
    \ ^^\n   |             |\n   |             cannot assign to this expression\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0067, E0433.\nFor more information about an error, try `rustc --explain E0067`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut set = HashSet::new();\n    for ch in string.chars()\
    \ {\n        set.insert(ch);\n    }\n    set.len()\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp54p23q_x.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().map(|c| c.to_ascii_lowercase()).filter(|c|\
    \ !c.is_ascii()).count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn9l2ir1m.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().map(|c| c.to_ascii_lowercase()).filter(|c| !c.is_ascii()).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().map(|c|\
    \ c.to_ascii_lowercase()).filter(|c| !c.is_ascii()).count().try_into().unwrap()\n\
    \  |                                                                         \
    \            ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpd4nql20c.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = 1usize;\n    for c in string.chars()\
    \ {\n        count = counted_characters(count, c);\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `counted_characters` in this scope\n\
    \ --> /tmp/tmpu3pk8dk9.rs:9:17\n  |\n9 |         count = counted_characters(count,\
    \ c);\n  |                 ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu3pk8dk9.rs:11:5\n   |\n6  | fn count_distinct_characters(string:\
    \ String) -> isize {\n   |                                                 -----\
    \ expected `isize` because of return type\n...\n11 |     count\n   |     ^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n11 |     count.try_into().unwrap()\n\
    \   |          ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    if string.len() == 0 {\n        return 0;\n    }\n \
    \   let mut counter = 0;\n    let mut prev_char: char;\n    for char in string.chars()\
    \ {\n        if char != prev_char {\n            prev_char = char;\n         \
    \   counter += 1;\n        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0381]: use of possibly-uninitialized variable: `prev_char`\n  -->\
    \ /tmp/tmpm7ibwoo2.rs:13:20\n   |\n13 |         if char != prev_char {\n   | \
    \                   ^^^^^^^^^ use of possibly-uninitialized `prev_char`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0381`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    if string.is_empty() {\n        return 0;\n    }\n\n\
    \    let mut counter = 1;\n    let mut has_first_char = false;\n    let mut char_found\
    \ = false;\n    let mut last_char = '\\0';\n\n    for (i, char) in string.chars().enumerate()\
    \ {\n        if char_found {\n            last_char = char;\n        } else {\n\
    \            char_found = true;\n        }\n        if char != last_char {\n \
    \           has_first_char = true;\n            counter = 1;\n        }\n    \
    \    counter += 1;\n    }\n\n    if has_first_char {\n        counter - 1;\n \
    \   }\n\n    counter\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `5`', /tmp/tmp7cuv0efn.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars()\n        .filter(|c| c.is_alphabetic())\n\
    \        .count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgwfl73ae.rs:7:5\n  |\n6 |\
    \   fn count_distinct_characters(string: String) -> isize {\n  |             \
    \                                      ----- expected `isize` because of return\
    \ type\n7 | /     string.chars()\n8 | |         .filter(|c| c.is_alphabetic())\n\
    9 | |         .count()\n  | |________________^ expected `isize`, found `usize`\n\
    \  |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n9 |         .count().try_into().unwrap()\n  |      \
    \           ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut seen: HashSet<_> = HashSet::new();\n    for\
    \ c in string.chars() {\n        if seen.contains(&c) {\n            continue;\n\
    \        }\n        seen.insert(c);\n        seen.insert(c.to_lowercase());\n\
    \        seen.insert(c.to_uppercase());\n    }\n    seen.len()\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp1yv_j7pi.rs:7:19\n\
    \  |\n7 |     let mut seen: HashSet<_> = HashSet::new();\n  |                \
    \   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp1yv_j7pi.rs:7:32\n  |\n7 |  \
    \   let mut seen: HashSet<_> = HashSet::new();\n  |                          \
    \      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3u53cwv6.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut counts = String::new();\n    for c in string.chars()\
    \ {\n        *counts.entry(c).or_insert(0) += 1;\n    }\n    counts.chars().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `entry` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpl8dycxft.rs:9:17\n  |\n9 |         *counts.entry(c).or_insert(0)\
    \ += 1;\n  |                 ^^^^^ method not found in `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl8dycxft.rs:11:5\n   |\n6  | fn count_distinct_characters(string:\
    \ String) -> isize {\n   |                                                 -----\
    \ expected `isize` because of return type\n...\n11 |     counts.chars().count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     counts.chars().count().try_into().unwrap()\n   |       \
    \                    ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    count_distinct_characters_impl(string.chars().cloned().collect())\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_distinct_characters_impl` in\
    \ this scope\n --> /tmp/tmpsw10w046.rs:7:5\n  |\n7 |     count_distinct_characters_impl(string.chars().cloned().collect())\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0271]:\
    \ type mismatch resolving `<Chars<'_> as Iterator>::Item == &_`\n    --> /tmp/tmpsw10w046.rs:7:51\n\
    \     |\n7    |     count_distinct_characters_impl(string.chars().cloned().collect())\n\
    \     |                                                   ^^^^^^ expected reference,\
    \ found `char`\n     |\n     = note: expected reference `&_`\n               \
    \      found type `char`\nnote: required by a bound in `cloned`\n\nerror[E0599]:\
    \ the method `collect` exists for struct `Cloned<Chars<'_>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmpsw10w046.rs:7:60\n   |\n7  |       count_distinct_characters_impl(string.chars().cloned().collect())\n\
    \   |                                                              ^^^^^^^ method\
    \ cannot be called on `Cloned<Chars<'_>>` due to unsatisfied trait bounds\n  \
    \ |\n   = note: the following trait bounds were not satisfied:\n           `<Chars<'_>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<Chars<'_>>:\
    \ Iterator`\n           `Cloned<Chars<'_>>: Iterator`\n           which is required\
    \ by `&mut Cloned<Chars<'_>>: Iterator`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0271, E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| *c != c).count()\n}\n\nfn\
    \ main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgv3sy8o9.rs:7:37\n  |\n7 |\
    \     string.chars().filter(|c| *c != c).count()\n  |                        \
    \             ^ expected `char`, found `&char`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n7 |     string.chars().filter(|c| *c != *c).count()\n  |  \
    \                                   +\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpgv3sy8o9.rs:7:5\n  |\n6 | fn count_distinct_characters(string: String)\
    \ -> isize {\n  |                                                 ----- expected\
    \ `isize` because of return type\n7 |     string.chars().filter(|c| *c != c).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \  |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n7 |     string.chars().filter(|c| *c != c).count().try_into().unwrap()\n\
    \  |                                               ++++++++++++++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| *c != ' ').count()\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcv8rj5g5.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| *c != ' ').count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ *c != ' ').count().try_into().unwrap()\n  |                                \
    \                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars()\n        .flat_map(|c| c.to_ascii_lowercase().as_bytes())\n\
    \        .group_by(|&b| b)\n        .keys()\n        .count().unwrap_or(0)\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `as_bytes` found for type `char` in the current\
    \ scope\n --> /tmp/tmpa08ncuqw.rs:8:46\n  |\n8 |         .flat_map(|c| c.to_ascii_lowercase().as_bytes())\n\
    \  |                                              ^^^^^^^^ method not found in\
    \ `char`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // This function is equivalent to the following code\
    \ but optimized by GodBolt\n    // `let mut counters = Default::default();\n \
    \   // for c in string.chars() {\n    //     if let Some(&count) = counters.entry(c.to_ascii_lowercase()).or_insert(0)\
    \ {\n    //         counters.entry(c.to_ascii_lowercase()).and_modify(|x| x +\
    \ (c - 'a'))\n    //     } else {\n    //         counters.entry(c.to_ascii_lowercase()).and_modify(|x|\
    \ x + (c - 'a' as i32))\n    //     }\n    // }`\n    // The above code has O(n^2)\
    \ runtime but `string.chars()` has O(n) runtime and therefore\n    // this code\
    \ has O(n) runtime.\n    let mut counters = Default::default();\n    for c in\
    \ string.chars() {\n        if let Some(count) = counters.entry(c.to_ascii_lowercase()).or_insert(0)\
    \ {\n            counters.entry(c.to_ascii_lowercase()).and_modify(|x| x + (c\
    \ - 'a' as i32))\n        } else {\n            counters.entry(c.to_ascii_lowercase()).and_modify(|x|\
    \ x + (c - 'a' as i32))\n        }\n    }\n    counters.value()\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmprgwf6nm9.rs:20:30\n\
    \   |\n18 |     let mut counters = Default::default();\n   |         ------------\
    \ consider giving `counters` a type\n19 |     for c in string.chars() {\n20 |\
    \         if let Some(count) = counters.entry(c.to_ascii_lowercase()).or_insert(0)\
    \ {\n   |                              ^^^^^^^^ cannot infer type\n   |\n   =\
    \ note: type must be known at this point\n\nerror[E0369]: cannot subtract `i32`\
    \ from `char`\n  --> /tmp/tmprgwf6nm9.rs:21:74\n   |\n21 |             counters.entry(c.to_ascii_lowercase()).and_modify(|x|\
    \ x + (c - 'a' as i32))\n   |                                                \
    \                        - ^ ---------- i32\n   |                            \
    \                                            |\n   |                         \
    \                                               char\n\nerror[E0369]: cannot subtract\
    \ `i32` from `char`\n  --> /tmp/tmprgwf6nm9.rs:23:74\n   |\n23 |             counters.entry(c.to_ascii_lowercase()).and_modify(|x|\
    \ x + (c - 'a' as i32))\n   |                                                \
    \                        - ^ ---------- i32\n   |                            \
    \                                            |\n   |                         \
    \                                               char\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0282, E0369.\n\
    For more information about an error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmppzp4c48_.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii()).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp67rtw8kt.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii()).count().try_into().unwrap()\n  |                            \
    \                         ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_alphanumeric()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5e5q3ubh.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_alphanumeric()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_alphanumeric()).count().try_into().unwrap()\n  |                     \
    \                                       ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|&c| !c.is_ascii_lowercase()).count()\
    \ + 1\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppjp42wxo.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|&c| !c.is_ascii_lowercase()).count() + 1\n  | \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and\
    \ panic if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|&c|\
    \ !c.is_ascii_lowercase()).count() + 1).try_into().unwrap()\n  |     +       \
    \                                                        +++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| *c >= 'A'..'Z').filter(|c|\
    \ *c <= 'Z'..'z').count() + 1\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwmk4s95m.rs:7:42\n  |\n7 |\
    \     string.chars().filter(|c| *c >= 'A'..'Z').filter(|c| *c <= 'Z'..'z').count()\
    \ + 1\n  |                                          ^^^ expected `bool`, found\
    \ `char`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpwmk4s95m.rs:7:31\n  |\n\
    7 |     string.chars().filter(|c| *c >= 'A'..'Z').filter(|c| *c <= 'Z'..'z').count()\
    \ + 1\n  |                               ^^^^^^^^^^^^^^ expected `bool`, found\
    \ struct `std::ops::Range`\n  |\n  = note: expected type `bool`\n           found\
    \ struct `std::ops::Range<bool>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpwmk4s95m.rs:7:69\n\
    \  |\n7 |     string.chars().filter(|c| *c >= 'A'..'Z').filter(|c| *c <= 'Z'..'z').count()\
    \ + 1\n  |                                                                   \
    \  ^^^ expected `bool`, found `char`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpwmk4s95m.rs:7:58\n\
    \  |\n7 |     string.chars().filter(|c| *c >= 'A'..'Z').filter(|c| *c <= 'Z'..'z').count()\
    \ + 1\n  |                                                          ^^^^^^^^^^^^^^\
    \ expected `bool`, found struct `std::ops::Range`\n  |\n  = note: expected type\
    \ `bool`\n           found struct `std::ops::Range<bool>`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpwmk4s95m.rs:7:5\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |                                                 -----\
    \ expected `isize` because of return type\n7 |     string.chars().filter(|c| *c\
    \ >= 'A'..'Z').filter(|c| *c <= 'Z'..'z').count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|c|\
    \ *c >= 'A'..'Z').filter(|c| *c <= 'Z'..'z').count() + 1).try_into().unwrap()\n\
    \  |     +                                                                   \
    \             +++++++++++++++++++++\n\nerror: aborting due to 5 previous errors\n\
    \nFor more information about this error, try `rustc --explain "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string\n        .chars()\n        .filter(|c| !is_ascii(c.unwrap()))\n\
    \        .count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_ascii` in this scope\n --> /tmp/tmpw2yzd_1_.rs:9:22\n\
    \  |\n9 |         .filter(|c| !is_ascii(c.unwrap()))\n  |                    \
    \  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `unwrap`\
    \ found for reference `&char` in the current scope\n --> /tmp/tmpw2yzd_1_.rs:9:33\n\
    \  |\n9 |         .filter(|c| !is_ascii(c.unwrap()))\n  |                    \
    \             ^^^^^^ method not found in `&char`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpw2yzd_1_.rs:7:5\n   |\n6  |   fn count_distinct_characters(string:\
    \ String) -> isize {\n   |                                                   -----\
    \ expected `isize` because of return type\n7  | /     string\n8  | |         .chars()\n\
    9  | |         .filter(|c| !is_ascii(c.unwrap()))\n10 | |         .count()\n \
    \  | |________________^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    10 |         .count().try_into().unwrap()\n   |                 ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count().expect(\"string doesn't\
    \ contain any characters\")\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp4fd39nvd.rs:7:20\n  |\n7 |     string.chars().distinct().count().expect(\"\
    string doesn't contain any characters\")\n  |                    ^^^^^^^^ method\
    \ not found in `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c != '\\0' && !c.is_whitespace()).count()\
    \ + 1\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n --> /tmp/tmp54jkj2vp.rs:7:33\n\
    \  |\n7 |     string.chars().filter(|c| c != '\\0' && !c.is_whitespace()).count()\
    \ + 1\n  |                                 ^^ no implementation for `&char ==\
    \ char`\n  |\n  = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp54jkj2vp.rs:7:5\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |                                                 -----\
    \ expected `isize` because of return type\n7 |     string.chars().filter(|c| c\
    \ != '\\0' && !c.is_whitespace()).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|c|\
    \ c != '\\0' && !c.is_whitespace()).count() + 1).try_into().unwrap()\n  |    \
    \ +                                                                      +++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // Find out how many characters are there\n    let len\
    \ = string.len();\n    // Scan the entire string to count distinct characters\n\
    \    let mut chars_seen = String::new();\n    for i in 0..len {\n        if chars_seen.contains(&string[i])\
    \ {\n            chars_seen.insert(string[i]);\n        } else {\n           \
    \ chars_seen.push(string[i]);\n        }\n    }\n    // Count the number of distinct\
    \ characters\n    return chars_seen.len();\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpobw7umjv.rs:12:33\n\
    \   |\n12 |         if chars_seen.contains(&string[i]) {\n   |               \
    \                  ^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpobw7umjv.rs:13:31\n\
    \   |\n13 |             chars_seen.insert(string[i]);\n   |                  \
    \             ^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0061]: this function takes 2 arguments but 1 argument was\
    \ supplied\n    --> /tmp/tmpobw7umjv.rs:13:24\n     |\n13   |             chars_seen.insert(string[i]);\n\
    \     |                        ^^^^^^ --------- supplied 1 argument\n     |  \
    \                      |\n     |                        expected 2 arguments\n\
    \     |\nnote: associated function defined here\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmpobw7umjv.rs:15:29\n   |\n15 |  \
    \           chars_seen.push(string[i]);\n   |                             ^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not impl"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string\n        .chars()\n        .map(|c| match c {\n\
    \            c if c.is_uppercase() | c.is_lowercase() => 1,\n            _ =>\
    \ 0,\n        })\n        .sum()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `5`', /tmp/tmp19755mge.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| *c <= 'z' && *c >= 'a').count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2kpa5wcp.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| *c <= 'z' && *c >= 'a').count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ *c <= 'z' && *c >= 'a').count().try_into().unwrap()\n  |                   \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    if string.len() == 0 {\n        return 0;\n    }\n \
    \   let mut set = String::new();\n    for char in string.chars() {\n        if\
    \ char.ascii_lowercase() != char.ascii_uppercase() {\n            set.insert(char.clone());\n\
    \        }\n    }\n    set.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `ascii_lowercase` found for type `char` in\
    \ the current scope\n  --> /tmp/tmprbz228uv.rs:12:17\n   |\n12 |         if char.ascii_lowercase()\
    \ != char.ascii_uppercase() {\n   |                 ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii_lowercase`\n\nerror[E0599]:\
    \ no method named `ascii_uppercase` found for type `char` in the current scope\n\
    \  --> /tmp/tmprbz228uv.rs:12:43\n   |\n12 |         if char.ascii_lowercase()\
    \ != char.ascii_uppercase() {\n   |                                          \
    \ ^^^^^^^^^^^^^^^ help: there is an associated function with a similar name: `is_ascii_uppercase`\n\
    \nerror[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmprbz228uv.rs:13:17\n     |\n13   |             set.insert(char.clone());\n\
    \     |                 ^^^^^^ ------------ supplied 1 argument\n     |      \
    \           |\n     |                 expected 2 arguments\n     |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprbz228uv.rs:16:5\n\
    \   |\n6  | fn count_distinct_characters(string: String) -> isize {\n   |    \
    \                                             ----- expected `isize` because of\
    \ return type\n...\n16 |     set.len()\n   |     ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n16 |     set.len().try_into().unwrap()\n\
    \   |              ++++++++++++++++++++\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut i = 0;\n    let mut prev_c = 0;\n\n    for c\
    \ in string.chars() {\n        if c == prev_c {\n            i += 1;\n       \
    \ } else {\n            i = 1;\n        }\n        prev_c = c;\n    }\n\n    i\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvba49vbf.rs:11:17\n   |\n\
    11 |         if c == prev_c {\n   |                 ^^^^^^ expected `char`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvba49vbf.rs:16:18\n\
    \   |\n8  |     let mut prev_c = 0;\n   |                      - expected due\
    \ to this value\n...\n16 |         prev_c = c;\n   |                  ^ expected\
    \ integer, found `char`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars = HashSet::new();\n    for (i, char) in\
    \ string.chars().enumerate() {\n        chars.insert(char.clone());\n        for\
    \ _ in 0..chars.len() - 1 {\n            chars.insert(chars.pop());\n        }\n\
    \    }\n    chars.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpfcgf3na3.rs:7:21\n  |\n7 |     let mut chars = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct_characters: Vec<Char> = vec![Char::new('z')];\n\
    \    for c in string.chars() {\n        distinct_characters.push(c.clone());\n\
    \    }\n    let mut char_count_map = HashMap::new();\n    for &c in distinct_characters\
    \ {\n        if !char_count_map.contains_key(&c) {\n            char_count_map.insert(c.clone(),\
    \ 1);\n        } else {\n            char_count_map.entry(c).and_modify(|count|\
    \ *count += 1).or_insert(1);\n        }\n    }\n    char_count_map.iter().cloned().count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Char`\n --> /tmp/tmpwg7l95ko.rs:7:51\n\
    \  |\n7 |     let mut distinct_characters: Vec<Char> = vec![Char::new('z')];\n\
    \  |                                                   ^^^^ use of undeclared\
    \ type `Char`\n\nerror[E0412]: cannot find type `Char` in this scope\n --> /tmp/tmpwg7l95ko.rs:7:38\n\
    \  |\n7 |     let mut distinct_characters: Vec<Char> = vec![Char::new('z')];\n\
    \  |                                      ^^^^\n  |\nhelp: a builtin type with\
    \ a similar name exists\n  |\n7 |     let mut distinct_characters: Vec<char> =\
    \ vec![Char::new('z')];\n  |                                      ~~~~\nhelp:\
    \ you might be missing a type parameter\n  |\n6 | fn count_distinct_characters<Char>(string:\
    \ String) -> isize {\n  |                             ++++++\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashMap`\n  --> /tmp/tmpwg7l95ko.rs:11:30\n\
    \   |\n11 |     let mut char_count_map = HashMap::new();\n   |               \
    \               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut n = 0;\n    for c in string.chars() {\n    \
    \    match c {\n            c if ascii_uppercase_ascii(c) => {\n             \
    \   n += 1;\n            }\n            c if ascii_lowercase(c) => {\n       \
    \         n += 1;\n            }\n            c => {\n                n += 1;\n\
    \            }\n        }\n    }\n    n\n}\n\nfn main() {\n    let candidate =\
    \ count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `ascii_uppercase_ascii` in this scope\n\
    \  --> /tmp/tmpyfloy22q.rs:10:18\n   |\n10 |             c if ascii_uppercase_ascii(c)\
    \ => {\n   |                  ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `ascii_lowercase` in this scope\n  --> /tmp/tmpyfloy22q.rs:13:18\n\
    \   |\n13 |             c if ascii_lowercase(c) => {\n   |                  ^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars: Vec<usize> = string.chars().collect();\n\
    \    let mut chars_count: usize = 0;\n\n    for char in chars.clone() {\n    \
    \    let index = chars.iter().position(|&c| c == char).unwrap();\n        chars_count\
    \ += 1;\n        if index != usize::MAX {\n            chars.remove(index);\n\
    \        }\n    }\n\n    chars_count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<usize>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmp5tpcquna.rs:7:48\n     |\n7  \
    \  |     let mut chars: Vec<usize> = string.chars().collect();\n     |       \
    \                                         ^^^^^^^ value of type `Vec<usize>` cannot\
    \ be built from `std::iter::Iterator<Item=char>`\n     |\n     = help: the trait\
    \ `FromIterator<char>` is not implemented for `Vec<usize>`\n     = help: the trait\
    \ `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound in\
    \ `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5tpcquna.rs:18:5\n\
    \   |\n6  | fn count_distinct_characters(string: String) -> isize {\n   |    \
    \                                             ----- expected `isize` because of\
    \ return type\n...\n18 |     chars_count\n   |     ^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n18 |     chars_count.try_into().unwrap()\n\
    \   |                ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| *c != 'X').count()\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw_xvl91b.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| *c != 'X').count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ *c != 'X').count().try_into().unwrap()\n  |                                \
    \                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut counter = 1;\n    for c in string.chars() {\n\
    \        if !c.is_alpha() {\n            counter = counter + 1;\n        }\n \
    \   }\n    counter\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_alpha` found for type `char` in the current\
    \ scope\n --> /tmp/tmpcdlncpdv.rs:9:15\n  |\n9 |         if !c.is_alpha() {\n\
    \  |               ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_alphabetic`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmppalt73rc.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars()\n        .filter_map(|c| c.to_ascii_lowercase())\n\
    \        .filter(|c| *c != c)\n        .map(|c| *c).count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptbky9li7.rs:8:25\n  |\n8 |\
    \         .filter_map(|c| c.to_ascii_lowercase())\n  |                       \
    \  ^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found `char`\n  |\n  = note:\
    \ expected enum `Option<_>`\n             found type `char`\nhelp: try wrapping\
    \ the expression in `Some`\n  |\n8 |         .filter_map(|c| Some(c.to_ascii_lowercase()))\n\
    \  |                         +++++                      +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut counter = 1;\n    let mut i = 0;\n    for j\
    \ in string.chars() {\n        while i < string.len() && string[i] == string[j]\
    \ {\n            i += 1;\n            counter += 1;\n        }\n    }\n    counter\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmptgee3mm1.rs:10:35\n\
    \   |\n10 |         while i < string.len() && string[i] == string[j] {\n   | \
    \                                  ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `char`\n \
    \ --> /tmp/tmptgee3mm1.rs:10:48\n   |\n10 |         while i < string.len() &&\
    \ string[i] == string[j] {\n   |                                             \
    \   ^^^^^^^^^ `String` cannot be indexed by `char`\n   |\n   = help: the trait\
    \ `Index<char>` is not implemented for `String`\n   = help: the following other\
    \ types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct_chars = HashSet::new();\n    for c\
    \ in string.chars() {\n        distinct_chars.insert(*c.to_lowercase());\n   \
    \ }\n    distinct_chars.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpm32kq9br.rs:7:30\n  |\n7 |     let mut distinct_chars = HashSet::new();\n\
    \  |                              ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror[E0614]: type `ToLowercase` cannot be dereferenced\n --> /tmp/tmpm32kq9br.rs:9:31\n\
    \  |\n9 |         distinct_chars.insert(*c.to_lowercase());\n  |             \
    \                  ^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0433, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().map(|c| c.to_ascii_lowercase().count()).sum()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: `char` is not an iterator\n --> /tmp/tmppf6e771s.rs:7:51\n\
    \  |\n7 |     string.chars().map(|c| c.to_ascii_lowercase().count()).sum()\n \
    \ |                                                   ^^^^^ `char` is not an iterator\n\
    \  |\n  = note: the following trait bounds were not satisfied:\n          `char:\
    \ Iterator`\n          which is required by `&mut char: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string\n        .chars()\n        .filter(|c| !c.is_whitespace())\n\
    \        .collect()\n        .len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpgbrtfvuh.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ cannot infer type for type\
    \ parameter `B` declared on the associated function `collect`\n   |\n   = note:\
    \ type must be known at this point\nhelp: consider specifying the type argument\
    \ in the method call\n   |\n10 |         .collect::<B>()\n   |               \
    \  +++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| *c >= 'A' && *c <= 'Z').count()\
    \ + 1\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxx1ro0qa.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| *c >= 'A' && *c <= 'Z').count() + 1\n  |   \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').count() + 1).try_into().unwrap()\n  |     +        \
    \                                                     +++++++++++++++++++++\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_uppercase()).count()\
    \ + 1\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph_9hnybm.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_uppercase()).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|c|\
    \ c.is_uppercase()).count() + 1).try_into().unwrap()\n  |     +              \
    \                                         +++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string\n        .chars()\n        .map(|c| c.to_ascii_lowercase().len_utf8())\n\
    \        .distinct()\n        .count()\n}\n\nfn main() {\n    let candidate =\
    \ count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmp7i01fs49.rs:10:10\n   |\n10 |         .distinct()\n\
    \   |          ^^^^^^^^ method not found in `Map<Chars<'_>, [closure@/tmp/tmp7i01fs49.rs:9:14:\
    \ 9:51]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpcuppgsjn.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().fold(0, |mut x, c| {\n        if x ==\
    \ c {\n            x += 1\n        } else {\n            x = 1\n        }\n  \
    \      x\n    })\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm1_ehkp8.rs:8:17\n  |\n8 |\
    \         if x == c {\n  |                 ^ expected `isize`, found `char`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = usize::MAX;\n    for ch in string.chars()\
    \ {\n        count = if count <= ch {\n            count + 1\n        } else {\n\
    \            count\n        };\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgrmvw68h.rs:9:29\n  |\n9 |\
    \         count = if count <= ch {\n  |                             ^^ expected\
    \ `usize`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgrmvw68h.rs:15:5\n\
    \   |\n6  | fn count_distinct_characters(string: String) -> isize {\n   |    \
    \                                             ----- expected `isize` because of\
    \ return type\n...\n15 |     count\n   |     ^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n15 |     count.try_into().unwrap()\n   |          ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c >= 'A' && c <= 'Z').count()\
    \ + string.chars().filter(|c| c >= 'a' && c <= 'z').count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpug2lieao.rs:7:36\n  |\n7 |\
    \     string.chars().filter(|c| c >= 'A' && c <= 'Z').count() + string.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count()\n  |                                    ^^^\n\
    \  |                                    |\n  |                               \
    \     expected `&char`, found `char`\n  |                                    help:\
    \ consider borrowing here: `&'A'`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpug2lieao.rs:7:48\n\
    \  |\n7 |     string.chars().filter(|c| c >= 'A' && c <= 'Z').count() + string.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count()\n  |                                         \
    \       ^^^\n  |                                                |\n  |       \
    \                                         expected `&char`, found `char`\n  |\
    \                                                help: consider borrowing here:\
    \ `&'Z'`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpug2lieao.rs:7:94\n  |\n\
    7 |     string.chars().filter(|c| c >= 'A' && c <= 'Z').count() + string.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count()\n  |                                         \
    \                                                     ^^^\n  |               \
    \                                                                            \
    \   |\n  |                                                                   \
    \                           expected `&char`, found `char`\n  |              \
    \                                                                            \
    \    help: consider borrowing here: `&'a'`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpug2lieao.rs:7:106\n  |\n7 |     string.chars().filter(|c| c >= 'A'\
    \ && c <= 'Z').count() + string.chars().filter(|c| c >= 'a' && c <= 'z').count()\n\
    \  |                                                                         \
    \                                 ^^^\n  |                                   \
    \                                                                       |\n  |\
    \                                                                            \
    \                    "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpo_b7cgpq.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmphfk3m1u8.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string\n        .chars()\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .count()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n --> /tmp/tmpti5xomeg.rs:9:24\n  |\n9 |         .filter(|c|\
    \ !c.is_ascii_letter())\n  |                        ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpti5xomeg.rs:7:5\n   |\n6  |   fn count_distinct_characters(string:\
    \ String) -> isize {\n   |                                                   -----\
    \ expected `isize` because of return type\n7  | /     string\n8  | |         .chars()\n\
    9  | |         .filter(|c| !c.is_ascii_letter())\n10 | |         .count()\n  \
    \ | |________________^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    10 |         .count().try_into().unwrap()\n   |                 ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii()).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphuboifho.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii()).count().try_into().unwrap()\n  |                             \
    \                       ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprd4zkk7m.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct_characters: usize = 0;\n    for character\
    \ in string.chars() {\n        distinct_characters += 1;\n        if distinct_characters\
    \ > 1 {\n            break;\n        }\n    }\n    distinct_characters\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplcg5i6n4.rs:14:5\n   |\n\
    6  | fn count_distinct_characters(string: String) -> isize {\n   |           \
    \                                      ----- expected `isize` because of return\
    \ type\n...\n14 |     distinct_characters\n   |     ^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n14 |     distinct_characters.try_into().unwrap()\n\
    \   |                        ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|&c| !c.is_numeric()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6q0xwiiy.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|&c| !c.is_numeric()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|&c|\
    \ !c.is_numeric()).count().try_into().unwrap()\n  |                          \
    \                              ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars()\n        .flat_map(|c| c.to_ascii_lowercase())\n\
    \        .distinct(|c| c)\n        .count()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `char` is not an iterator\n    --> /tmp/tmpis4d613y.rs:8:19\n\
    \     |\n8    |         .flat_map(|c| c.to_ascii_lowercase())\n     |        \
    \  -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^ `char` is not an iterator\n     |     \
    \     |\n     |          required by a bound introduced by this call\n     |\n\
    \     = help: the trait `Iterator` is not implemented for `char`\n     = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `char`\n\
    note: required by a bound in `flat_map`\n\nerror[E0599]: no method named `distinct`\
    \ found for struct `FlatMap` in the current scope\n --> /tmp/tmpis4d613y.rs:9:10\n\
    \  |\n9 |         .distinct(|c| c)\n  |          ^^^^^^^^ method not found in\
    \ `FlatMap<Chars<'_>, char, [closure@/tmp/tmpis4d613y.rs:8:19: 8:45]>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp39t3gim4.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c != '\\0').count()\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n --> /tmp/tmphv4qmbkg.rs:7:33\n\
    \  |\n7 |     string.chars().filter(|c| c != '\\0').count()\n  |             \
    \                    ^^ no implementation for `&char == char`\n  |\n  = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n  = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmphv4qmbkg.rs:7:5\n  |\n6 | fn count_distinct_characters(string: String)\
    \ -> isize {\n  |                                                 ----- expected\
    \ `isize` because of return type\n7 |     string.chars().filter(|c| c != '\\0').count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n  |\n7 |     string.chars().filter(|c| c != '\\\
    0').count().try_into().unwrap()\n  |                                         \
    \        ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count().min()\
    \ + 1\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmp5ksueqim.rs:7:64\n    |\n7   |     string.chars().filter(|c| !c.is_ascii_lowercase()).count().min()\
    \ + 1\n    |                                                                ^^^-\
    \ supplied 0 arguments\n    |                                                \
    \                |\n    |                                                    \
    \            expected 1 argument\n    |\nnote: associated function defined here\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp5ksueqim.rs:7:5\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |                                                 -----\
    \ expected `isize` because of return type\n7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count().min()\
    \ + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().min() + 1).try_into().unwrap()\n  |     + \
    \                                                                   +++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpr9igb7uy.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string\n        .chars()\n        .filter(|c| !c.is_whitespace())\n\
    \        .filter(|c| c.is_ascii_alphabetic())\n        .filter(|c| c.is_ascii_numeric())\n\
    \        .filter(|c| c.is_ascii_lowercase())\n        .filter(|c| c.is_ascii_uppercase())\n\
    \        .distinct()\n        .count()\n}\n\nfn main() {\n    let candidate =\
    \ count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_numeric` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmp0wlkgxmq.rs:11:23\n   |\n11 |         .filter(|c|\
    \ c.is_ascii_numeric())\n   |                       ^^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0599]: no\
    \ method named `distinct` found for struct `Filter` in the current scope\n  -->\
    \ /tmp/tmp0wlkgxmq.rs:14:10\n   |\n14 |         .distinct()\n   |          ^^^^^^^^\
    \ method not found in `Filter<Filter<Filter<Filter<Filter<Chars<'_>, [closure@/tmp/tmp0wlkgxmq.rs:9:17:\
    \ 9:39]>, [closure@/tmp/tmp0wlkgxmq.rs:10:17: 10:44]>, [closure@/tmp/tmp0wlkgxmq.rs:11:17:\
    \ 11:41]>, [closure@/tmp/tmp0wlkgxmq.rs:12:17: 12:43]>, [closure@/tmp/tmp0wlkgxmq.rs:13:17:\
    \ 13:43]>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = 1;\n\n    for c in string.chars() {\n\
    \        // Ignore the case of the character\n        if c != c.to_lowercase()\
    \ {\n            count += 1;\n        }\n    }\n\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj0ivhrjv.rs:11:17\n   |\n\
    11 |         if c != c.to_lowercase() {\n   |                 ^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `ToLowercase`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| *c >= 'A' && *c <= 'Z').count()\
    \ + 1\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg_auseya.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| *c >= 'A' && *c <= 'Z').count() + 1\n  |   \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').count() + 1).try_into().unwrap()\n  |     +        \
    \                                                     +++++++++++++++++++++\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    if string.is_empty() {\n        return 0;\n    }\n\n\
    \    let mut current: CharCode = string.as_bytes()[0];\n    let mut counter: isize\
    \ = 1;\n    for &c in &string[1..] {\n        if c.is_uppercase() {\n        \
    \    current += CharCode::UPPERCASE;\n        } else if c.is_lowercase() {\n \
    \           current += CharCode::LOWERCASE;\n        } else if c.is_numeric()\
    \ {\n            current += CharCode::DIGIT;\n        } else if c.is_whitespace()\
    \ {\n            current += CharCode::WHITESPACE;\n        } else if c.is_control()\
    \ {\n            current += CharCode::CONTROL;\n        } else if c.is_punct()\
    \ {\n            current += CharCode::PUNCT;\n        } else if c.is_graph() {\n\
    \            current += CharCode::GRAPH;\n        } else if c.is_printable() {\n\
    \            current += CharCode::PRINTABLE;\n        } else {\n            return\
    \ counter;\n        }\n\n        if current == c.to_ascii_lowercase() {\n    \
    \        counter += 1;\n        }\n    }\n\n    counter\n}\n\nfn main() {\n  \
    \  let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `CharCode`\n  -->\
    \ /tmp/tmp_31b3pm0.rs:15:24\n   |\n15 |             current += CharCode::UPPERCASE;\n\
    \   |                        ^^^^^^^^ use of undeclared type `CharCode`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `CharCode`\n  --> /tmp/tmp_31b3pm0.rs:17:24\n\
    \   |\n17 |             current += CharCode::LOWERCASE;\n   |                \
    \        ^^^^^^^^ use of undeclared type `CharCode`\n\nerror[E0433]: failed to\
    \ resolve: use of undeclared type `CharCode`\n  --> /tmp/tmp_31b3pm0.rs:19:24\n\
    \   |\n19 |             current += CharCode::DIGIT;\n   |                    \
    \    ^^^^^^^^ use of undeclared type `CharCode`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `CharCode`\n  --> /tmp/tmp_31b3pm0.rs:21:24\n   |\n21\
    \ |             current += CharCode::WHITESPACE;\n   |                       \
    \ ^^^^^^^^ use of undeclared type `CharCode`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `CharCode`\n  --> /tmp/tmp_31b3pm0.rs:23:24\n   |\n23\
    \ |             current += CharCode::CONTROL;\n   |                        ^^^^^^^^\
    \ use of undeclared type `CharCode`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `CharCode`\n  --> /tmp/tmp_31b3pm0.rs:25:24\n   |\n25 |    \
    \         current += CharCode::PUNCT;\n   |                        ^^^^^^^^ use\
    \ of undeclared type `CharCode`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `CharCode`\n  --> /tmp/tmp_31b3pm0.rs:27:24\n   |\n27 |             current\
    \ += CharCode::GRAPH;\n   |                        ^^^^^^^^ use of undeclared\
    \ type `CharCode`\n\nerror[E0433]: failed to resolve: use of undeclared type `CharCode`\n\
    \  --> /tmp/tmp_31b3pm0.rs:29:24\n   |\n29 |             current += CharCode::PRINTABLE;\n\
    \   |                        ^^^^^^^^ use of undeclared type `CharCode`\n\nerror[E0412]:\
    \ cannot find type `CharCode` in this scope\n  --> /tmp/tmp_31b3pm0.rs:11:22\n\
    \   |\n11 |     let mut current: CharCode = string.as_bytes()[0];\n   |      \
    \                ^^^^^^^^ not found in this scope\n\nerror[E0277]: `&str` is not\
    \ an iterator\n  --> /tm"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = 1;\n    for character in string.chars()\
    \ {\n        if string.chars().any(|c| c.to_lowercase().unwrap() == character.to_lowercase())\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for struct `ToLowercase` in\
    \ the current scope\n --> /tmp/tmpulatak65.rs:9:52\n  |\n9 |         if string.chars().any(|c|\
    \ c.to_lowercase().unwrap() == character.to_lowercase()) {\n  |              \
    \                                      ^^^^^^ method not found in `ToLowercase`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // Since we have `case` enabled, we can just use `.count`\n\
    \    string.chars().count().map(|x| char::from(x)).unwrap_or(0)\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: `usize` is not an iterator\n --> /tmp/tmp0nwpdhvg.rs:8:28\n\
    \  |\n8 |     string.chars().count().map(|x| char::from(x)).unwrap_or(0)\n  |\
    \                            ^^^ `usize` is not an iterator\n  |\n  = note: the\
    \ following trait bounds were not satisfied:\n          `usize: Iterator`\n  \
    \        which is required by `&mut usize: Iterator`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars()\n        .map(|c| c.to_ascii_lowercase().to_string())\n\
    \        .fold(String::new(), |acc, c| acc.push_str(c));\n    string.chars().map(|c|\
    \ c.to_ascii_uppercase().to_string()).fold(\n        String::new(),\n        |acc,\
    \ c| acc.push_str(c),\n    )\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwhhkb2bi.rs:9:52\n  |\n9 |\
    \         .fold(String::new(), |acc, c| acc.push_str(c));\n  |               \
    \                                     ^\n  |                                 \
    \                   |\n  |                                                   \
    \ expected `&str`, found struct `String`\n  |                                \
    \                    help: consider borrowing here: `&c`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpwhhkb2bi.rs:9:39\n  |\n9 |         .fold(String::new(),\
    \ |acc, c| acc.push_str(c));\n  |                                       ^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `()`\n  |\nnote: method `push_str` modifies\
    \ its receiver in-place\n --> /tmp/tmpwhhkb2bi.rs:9:43\n  |\n9 |         .fold(String::new(),\
    \ |acc, c| acc.push_str(c));\n  |                                       --- ^^^^^^^^\
    \ this call modifies `acc` in-place\n  |                                     \
    \  |\n  |                                       you probably want to use this\
    \ value after calling the method...\n  = note: ...instead of the `()` output of\
    \ method `push_str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwhhkb2bi.rs:11:9\n\
    \   |\n11 |         String::new(),\n   |         ^^^^^^^^^^^^^ expected `isize`,\
    \ found struct `String`\n\nerror[E0599]: no method named `push_str` found for\
    \ type `isize` in the current scope\n  --> /tmp/tmpwhhkb2bi.rs:12:22\n   |\n12\
    \ |         |acc, c| acc.push_str(c),\n   |                      ^^^^^^^^ method\
    \ not found in `isize`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    if string.is_empty() {\n        return 0;\n    }\n\n\
    \    let mut result = 1;\n\n    for c in string.chars() {\n        if let Some(c)\
    \ = c.to_ascii_lowercase() {\n            result++;\n        }\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp27mkhm5x.rs:15:19\n\
    \   |\n15 |             result++;\n   |                   ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n15 |             { let tmp =\
    \ result; result += 1; tmp };\n   |             +++++++++++       ~~~~~~~~~~~~~~~~~~~~\n\
    15 -             result++;\n15 +             result += 1;\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp27mkhm5x.rs:14:16\n   |\n14 |         if let\
    \ Some(c) = c.to_ascii_lowercase() {\n   |                ^^^^^^^   ----------------------\
    \ this expression has type `char`\n   |                |\n   |               \
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<_>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmplgq0x7v5.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut char_map = HashMap::new();\n    for c in string.chars()\
    \ {\n        if let Some(count) = char_map.get(&c) {\n            char_map.insert(c,\
    \ count + 1);\n        } else {\n            char_map.insert(c, 1);\n        }\n\
    \    }\n    char_map.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpntpyn_zx.rs:7:24\n  |\n7 |     let mut char_map = HashMap::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpuy7abg4t.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpqmaa3wg9.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpg7r6662b.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // The regex below splits on any number of non-letters\
    \ followed by a single letter.\n    // This means that we get one character per\
    \ letter, which is what we want.\n    // However, this also means that we don't\
    \ match 'Jerry'. Because this isn't a word boundary, it doesn't match at all\n\
    \    // So we add a word boundary to ensure that all strings are matched regardless\
    \ of case.\n    string.chars().filter(|c|\n        !c.is_ascii_letter()\n    \
    \        && !c.is_ascii_digit()\n            && !c.is_ascii_punctuation()\n  \
    \          && !c.is_ascii_space()\n            && !c.is_ascii_underscore()\n \
    \           && !c.is_ascii_nonalphanumeric()\n    ).count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpfy87dv_v.rs:12:12\n   |\n12 |         !c.is_ascii_letter()\n\
    \   |            ^^^^^^^^^^^^^^^ help: there is an associated function with a\
    \ similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_space` found\
    \ for reference `&char` in the current scope\n  --> /tmp/tmpfy87dv_v.rs:15:19\n\
    \   |\n15 |             && !c.is_ascii_space()\n   |                   ^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii`\n\nerror[E0599]:\
    \ no method named `is_ascii_underscore` found for reference `&char` in the current\
    \ scope\n  --> /tmp/tmpfy87dv_v.rs:16:19\n   |\n16 |             && !c.is_ascii_underscore()\n\
    \   |                   ^^^^^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii_uppercase`\n\nerror[E0599]: no method named `is_ascii_nonalphanumeric`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpfy87dv_v.rs:17:19\n\
    \   |\n17 |             && !c.is_ascii_nonalphanumeric()\n   |               \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_alphanumeric`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfy87dv_v.rs:11:5\n\
    \   |\n6  |   fn count_distinct_characters(string: String) -> isize {\n   |  \
    \                                                 ----- expected `isize` because\
    \ of return type\n...\n11 | /     string.chars().filter(|c|\n12 | |         !c.is_ascii_letter()\n\
    13 | |             && !c.is_ascii_digit()\n14 | |             && !c.is_ascii_punctuation()\n\
    ...  |\n17 | |             && !c.is_ascii_nonalphanumeric()\n18 | |     ).count()\n\
    \   | |_____________^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    18 |     ).count().try_into().unwrap()\n   |              ++++++++++++++++++++\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E030"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut set = String::new();\n    let mut i = 0;\n \
    \   for c in string.chars() {\n        set.push(c);\n        if i > 0 {\n    \
    \        i += c.cmp(&set[i - 1]).unwrap();\n        }\n        i = 1;\n    }\n\
    \    set\n        .iter()\n        .fold(1, |mut acc, c| acc + (c.to_ascii_lowercase().len_utf8()\
    \ as usize))\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmprheh17yo.rs:12:25\n   |\n12 |             i += c.cmp(&set[i - 1]).unwrap();\n\
    \   |                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n\
    \   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `unwrap` found for enum `std::cmp::Ordering`\
    \ in the current scope\n  --> /tmp/tmprheh17yo.rs:12:37\n   |\n12 |          \
    \   i += c.cmp(&set[i - 1]).unwrap();\n   |                                  \
    \   ^^^^^^ method not found in `std::cmp::Ordering`\n\nerror[E0599]: no method\
    \ named `iter` found for struct `String` in the current scope\n  --> /tmp/tmprheh17yo.rs:17:10\n\
    \   |\n17 |         .iter()\n   |          ^^^^ method not found in `String`\n\
    \   |\nhelp: because of the in-memory representation of `&str`, to obtain an `Iterator`\
    \ over each of its codepoint use method `chars`\n   |\n17 |         .chars()\n\
    \   |          ~~~~~\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_uppercase()).count()\
    \ + 1\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp86fy25v2.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_uppercase()).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     (string.chars().filter(|c|\
    \ !c.is_uppercase()).count() + 1).try_into().unwrap()\n  |     +             \
    \                                           +++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut occurrences = HashMap::new();\n    for char\
    \ in string.chars() {\n        let count = occurrences.entry(char).or_insert(0);\n\
    \        *count += 1;\n    }\n    occurrences.len()\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpu773r83f.rs:7:27\n  |\n7 |     let mut occurrences = HashMap::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| *c != CHAR_UNASSIGNED).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `CHAR_UNASSIGNED` in this scope\n --> /tmp/tmpdrs_d7b1.rs:7:37\n\
    \  |\n7 |     string.chars().filter(|c| *c != CHAR_UNASSIGNED).count()\n  |  \
    \                                   ^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpdrs_d7b1.rs:7:5\n  |\n6 | fn count_distinct_characters(string:\
    \ String) -> isize {\n  |                                                 -----\
    \ expected `isize` because of return type\n7 |     string.chars().filter(|c| *c\
    \ != CHAR_UNASSIGNED).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ *c != CHAR_UNASSIGNED).count().try_into().unwrap()\n  |                    \
    \                                         ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_alphanumeric()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp86nb0g0_.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_alphanumeric()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_alphanumeric()).count().try_into().unwrap()\n  |                     \
    \                                       ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp5vm93trr.rs:7:20\n  |\n7 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase(&c)).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpybf896a9.rs:7:34\n     |\n7    |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase(&c)).count()\n     |                                 \
    \ ^^^^^^^^^^^^^^^^^^ -- supplied 1 argument\n     |                          \
    \        |\n     |                                  expected 0 arguments\n   \
    \  |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpybf896a9.rs:7:5\n  |\n6 | fn count_distinct_characters(string: String)\
    \ -> isize {\n  |                                                 ----- expected\
    \ `isize` because of return type\n7 |     string.chars().filter(|c| !c.is_ascii_lowercase(&c)).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and\
    \ panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase(&c)).count().try_into().unwrap()\n  |                \
    \                                                 ++++++++++++++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = HashMap::new();\n    for c in string.chars()\
    \ {\n        if let Some(i) = get_index(count, &c) {\n            *i += 1\n  \
    \      } else {\n            count.entry(c).or_insert(1).clone()\n        }\n\
    \    }\n    count.values()\n        .iter()\n        .map(|c| c.clone())\n   \
    \     .sum()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp2uiz9zvf.rs:7:21\n  |\n7 |     let mut count = HashMap::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot\
    \ find function `get_index` in this scope\n --> /tmp/tmp2uiz9zvf.rs:9:26\n  |\n\
    9 |         if let Some(i) = get_index(count, &c) {\n  |                     \
    \     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0425, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
