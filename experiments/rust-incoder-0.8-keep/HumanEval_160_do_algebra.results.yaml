name: HumanEval_160_do_algebra
language: rust
results:
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operand.len() == operator.len() - 1\
    \ {\n        match operator {\n            vec![Operator::Addition, Operator::Subtraction,\
    \ Operator::Multiplication, Operator::Floor division, Operator::Exponentiation]\
    \ => {\n                let mut result: isize = 0;\n                for i in 0..operand.len()\
    \ {\n                    let mut operand1: isize = operand[i];\n             \
    \       let mut operand2: isize = operand[1 + i];\n                    let mut\
    \ operator = vec![Operator::Addition, Operator::Subtraction, Operator::Multiplication,\
    \ Operator::Floor division, Operator::Exponentiation];\n                    let\
    \ mut operator = match operator {\n                        vec![Operator::Addition,\
    \ Operator::Subtraction, Operator::Multiplication, Operator::Floor division, Operator::Exponentiation]\
    \ => vec![Operator::Addition, Operator::Subtraction, Operator::Multiplication,\
    \ Operator::Floor division, Operator::Exponentiation]\n                      \
    \  _ => vec![Operator::Addition, Operator::Subtraction, Operator::Multiplication,\
    \ Operator::Floor division]\n                    };\n                    match\
    \ operator {\n                        vec![Operator::Addition, Operator::Subtraction,\
    \ Operator::Multiplication, Operator::Floor division, Operator::Exponentiation]\
    \ => \n                            result = result + operand1 + operand2;\n  \
    \                      _ => break\n                    }\n                }\n\
    \                result\n            }\n            vec![Operator::Addition, Operator::Subtraction,\
    \ Operator::Multiplication, Operator::Floor division] => return operand[0]\n \
    \           vec![Operator::Addition, Operator::Subtraction, Operator::Multiplication]\
    \ => return operand[0] + operand[1]\n            _ => panic!(\"Invalid Operator\"\
    )\n        }\n    } else {\n        panic!(\"Invalid Operator\")\n    }\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found reserved\
    \ identifier `_`\n  --> /tmp/tmpupyhv8p7.rs:30:25\n   |\n29 | ...   vec![Operator::Addition,\
    \ Operator::Subtraction, Operator::Multiplication, Operator::Floor division, Operator::Exponentiation]\
    \ => vec![Operator::Addition, Operator::Subtraction, Operator::Multiplication,\
    \ Operator::Floor division, Operator::Exponentiation]\n   |                  \
    \                                                                            \
    \                                       -- while parsing the `match` arm starting\
    \ here                                                                       \
    \           - expected one of `,`, `.`, `?`, `}`, or an operator\n30 | ...   _\
    \ => vec![Operator::Addition, Operator::Subtraction, Operator::Multiplication,\
    \ Operator::Floor division]\n   |       ^ unexpected token\n\nerror: `match` arm\
    \ body without braces\n  --> /tmp/tmpupyhv8p7.rs:34:29\n   |\n33 | ...ec![Operator::Addition,\
    \ Operator::Subtraction, Operator::Multiplication, Operator::Floor division, Operator::Exponentiation]\
    \ => \n   |                                                                  \
    \                                                               -- while parsing\
    \ the `match` arm starting here\n34 | ...   result = result + operand1 + operand2;\n\
    \   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: use a comma to end a\
    \ `match` arm expression: `,`\n   |       |\n   |       this statement is not\
    \ surrounded by a body\n\nerror: expected one of `,`, `.`, `?`, `}`, or an operator,\
    \ found `vec`\n  --> /tmp/tmpupyhv8p7.rs:41:13\n   |\n40 |             vec![Operator::Addition,\
    \ Operator::Subtraction, Operator::Multiplication, Operator::Floor division] =>\
    \ return operand[0]\n   |                                                    \
    \                                                             --             \
    \     - expected one of `,`, `.`, `?`, `}`, or an operator\n   |             \
    \                                                                            \
    \                        |\n   |                "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // do binary operations\n    if operand.len()\
    \ < operator.len() {\n        for i in 0..(operand.len() - operator.len()) {\n\
    \            if operator[i] == operator[0] {\n                let result = do_algebra(operator,\
    \ &operand[0..(i + 1)]);\n                return do_algebra(operator, &operand[i\
    \ + 1 .. ]);\n            }\n        }\n    }\n    else {\n        for i in 0..operator.len()\
    \ {\n            if operator[i] == operator[0] {\n                let result =\
    \ do_algebra(operator, &operand[0..]);\n                return do_algebra(operator,\
    \ &operand[..]);\n            }\n        }\n    }\n\n    if operator[0] == operator[1]\
    \ {\n        return operand[0] + (operand[1] * operand[2]) / operand[3];\n   \
    \ }\n    else {\n        return operand[0]\n            + operand[1] * operand[2]\n\
    \            * operand[3]\n            / (operand[4] * operand[5]);\n    }\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw2r4tchj.rs:24:51\n   |\n\
    24 |                 let result = do_algebra(operator, &operand[0..(i + 1)]);\n\
    \   |                                                   ^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found `&[isize]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found reference `&[isize]`\nhelp: try using a conversion method\n\
    \   |\n24 |                 let result = do_algebra(operator, (&operand[0..(i\
    \ + 1)]).to_vec());\n   |                                                   +\
    \                    ++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw2r4tchj.rs:25:45\n\
    \   |\n25 |                 return do_algebra(operator, &operand[i + 1 .. ]);\n\
    \   |                                             ^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found `&[isize]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found reference `&[isize]`\nhelp: try using a conversion method\n\
    \   |\n25 |                 return do_algebra(operator, (&operand[i + 1 .. ]).to_vec());\n\
    \   |                                             +                   ++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpw2r4tchj.rs:32:51\n   |\n32 |\
    \                 let result = do_algebra(operator, &operand[0..]);\n   |    \
    \                                               ^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found `&[isize]`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \        found reference `&[isize]`\nhelp: try using a conversion method\n   |\n\
    32 |                 let result = do_algebra(operator, (&operand[0..]).to_vec());\n\
    \   |                                                   +             ++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpw2r4tchj.rs:33:45\n   |\n33 |\
    \                 return do_algebra(operator, &operand[..]);\n   |           \
    \                                  ^^^^^^^^^^^^ expected struct `Vec`, found `&[isize]`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found reference `&[isize]`\n\
    help: try using a conversion method\n   |\n33 |                 return do_algebra(operator,\
    \ (&operan"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Implement your solution in this function\
    \ and test it.\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvjtoiwwe.rs:19:62\n   |\n\
    19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  \
    \ |    ----------                                                ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // TODO:\n    // Implement your solution\
    \ here\n    return 0\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `37`', /tmp/tmp5eraznng.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operand.len() < operator.len() {\n \
    \       return -1;\n    }\n    \n    let result = operand[0] as isize;\n    for\
    \ i in 1..operand.len() {\n        match operator[i - 1].as_str() {\n        \
    \    \"+\" => result += operand[i] as isize,\n            \"-\" => result -= operand[i]\
    \ as isize,\n            \"*\" => result *= operand[i] as isize,\n           \
    \ \"//\" => result /= operand[i] as isize,\n            \"**\" => result **= operand[i]\
    \ as isize,\n            _ => {\n                println!(\"The operator: {} is\
    \ not valid in this list!\", operator[i - 1]);\n                return -1;\n \
    \           }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmps_wfldwr.rs:31:29\n\
    \   |\n31 |             \"**\" => result **= operand[i] as isize,\n   |      \
    \            --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror: aborting\
    \ due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    assert!(operator.len() > 0, \"Operator\
    \ list is empty\");\n    assert!(operand.len() > 1, \"Operand list is empty\"\
    );\n    assert!(operator.len() == operand.len() - 1, \"Operator and operand list\
    \ must of same size\");\n    let mut result: isize = 0;\n    for i in operand.iter()\
    \ {\n        let op_string = operator[i % operator.len()];\n        let op_digit\
    \ = if op_string == \"*\" { 1 } else { 0 };\n        let op_value = *i / op_digit;\n\
    \        let op_index = i - op_value;\n        let op_type = op_string.as_str();\n\
    \        let op_digit = if op_string == \"*\" { op_digit } else { op_digit };\n\
    \        if op_type == \"+\" {\n            result += *op_index * op_digit;\n\
    \        } else if op_type == \"-\" {\n            result -= *op_index * op_digit;\n\
    \        } else if op_type == \"*\" {\n            result *= *op_index * op_digit;\n\
    \        } else if op_type == \"/\" {\n            result /= *op_index * op_digit;\n\
    \        } else {\n            result **= *op_index * op_digit;\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp6ukhget2.rs:40:21\n\
    \   |\n40 |             result **= *op_index * op_digit;\n   |               \
    \      ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6ukhget2.rs:25:38\n\
    \   |\n25 |         let op_string = operator[i % operator.len()];\n   |      \
    \                                ^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot mod `&isize` by `usize`\n  --> /tmp/tmp6ukhget2.rs:25:36\n\
    \   |\n25 |         let op_string = operator[i % operator.len()];\n   |      \
    \                              ^ no implementation for `&isize % usize`\n   |\n\
    \   = help: the trait `Rem<usize>` is not implemented for `&isize`\n   = help:\
    \ the following other types implement trait `Rem<Rhs>`:\n             <&'a f32\
    \ as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as\
    \ Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n\
    \             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n      \
    \       <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0277]: the\
    \ type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmp6ukhget2.rs:25:25\n\
    \   |\n25 |         let op_string = operator[i % operator.len()];\n   |      \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<String>`\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmp6ukhget2.rs:32:23\n   |\n32 |             result += *op_index *\
    \ op_digit;\n   |                       ^^^^^^^^^\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmp6ukhget2.rs:34:23\n   |\n34 |        \
    \     result -= *op_index * op_digit;\n   |                       ^^^^^^^^^\n\n\
    error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp6ukhget2.rs:36:23\n\
    \   |\n36 |             result *= *op_index *"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut total_result = 0;\n    for operand\
    \ in operand {\n        match operator {\n            vec![\"-\"] | vec![\"+\"\
    ] | vec![\"*\"] | vec![\"/\"] | vec![\"//\"] => total_result += operand as isize,\n\
    \            _ => panic!(\"No operator in operator list\"),\n        }\n    }\n\
    \    total_result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpqbyuugao.rs:23:13\n\
    \   |\n23 |             vec![\"-\"] | vec![\"+\"] | vec![\"*\"] | vec![\"/\"]\
    \ | vec![\"//\"] => total_result += operand as isize,\n   |             ^^^^^^^^^\n\
    \   |\n   = note: this error originates in the macro `vec` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: arbitrary expressions aren't\
    \ allowed in patterns\n  --> /tmp/tmpqbyuugao.rs:23:25\n   |\n23 |           \
    \  vec![\"-\"] | vec![\"+\"] | vec![\"*\"] | vec![\"/\"] | vec![\"//\"] => total_result\
    \ += operand as isize,\n   |                         ^^^^^^^^^\n   |\n   = note:\
    \ this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror: arbitrary expressions aren't allowed in patterns\n\
    \  --> /tmp/tmpqbyuugao.rs:23:37\n   |\n23 |             vec![\"-\"] | vec![\"\
    +\"] | vec![\"*\"] | vec![\"/\"] | vec![\"//\"] => total_result += operand as\
    \ isize,\n   |                                     ^^^^^^^^^\n   |\n   = note:\
    \ this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror: arbitrary expressions aren't allowed in patterns\n\
    \  --> /tmp/tmpqbyuugao.rs:23:49\n   |\n23 |             vec![\"-\"] | vec![\"\
    +\"] | vec![\"*\"] | vec![\"/\"] | vec![\"//\"] => total_result += operand as\
    \ isize,\n   |                                                 ^^^^^^^^^\n   |\n\
    \   = note: this error originates in the macro `vec` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\n\nerror: arbitrary expressions aren't allowed\
    \ in patterns\n  --> /tmp/tmpqbyuugao.rs:23:61\n   |\n23 |             vec![\"\
    -\"] | vec![\"+\"] | vec![\"*\"] | vec![\"/\"] | vec![\"//\"] => total_result\
    \ += operand as isize,\n   |                                                 \
    \            ^^^^^^^^^^\n   |\n   = note: this error originates in the macro `vec`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: aborting\
    \ due to 5 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    operator.iter().zip(operand).fold1(|a,\
    \ (op, x)| a + (*op as isize * x))\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `fold1` found for struct `Zip` in the current\
    \ scope\n  --> /tmp/tmp2g2h1xg8.rs:20:34\n   |\n20 |     operator.iter().zip(operand).fold1(|a,\
    \ (op, x)| a + (*op as isize * x))\n   |                                  ^^^^^\
    \ method not found in `Zip<std::slice::Iter<'_, String>, std::vec::IntoIter<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    match operator {\n        vec![\"+\"] |\
    \ vec[\"-\"] | vec[\"*\"] | vec[\"//\"] | vec[\"**\"] | vec[\"^\"] | vec[\"<=>\"\
    ] | vec[\"<\"] => {\n            let mut left = operand.remove(0);\n         \
    \   let mut right = operand.remove(0);\n            match operator {\n       \
    \         vec[\"+\"] | vec[\"+\"] => {\n                    left = operand.remove(0);\n\
    \                    right = operand.remove(0);\n                }\n         \
    \       vec[\"-\"] | vec[\"-\"] => {\n                    left = operand.remove(0);\n\
    \                    right = operand.remove(0);\n                }\n         \
    \       vec[\"*\"] | vec[\"*\"] => {\n                    left = operand.remove(0);\n\
    \                    right = operand.remove(0);\n                }\n         \
    \       vec[\"//\"] | vec[\"//\"] => {\n                    left = operand.remove(0);\n\
    \                    right = operand.remove(0);\n                }\n         \
    \       vec[\"**\"] | vec[\"**\"] => {\n                    left = operand.remove(0);\n\
    \                    right = operand.remove(0);\n                }\n         \
    \       vec[\"^\"] | vec[\"^\"] => {\n                    left = operand.remove(0);\n\
    \                    right = operand.remove(0);\n                }\n         \
    \       vec[\"<=>\"] | vec[\"<=>\"] => {\n                    left = operand.remove(0);\n\
    \                    right = operand.remove(0);\n                }\n         \
    \       vec[\"<\"] | vec[\"<\"] => {\n                    left = operand.remove(0);\n\
    \                    right = operand.remove(0);\n                }\n         \
    \   }\n            let mut result = left;\n            for &op in operator {\n\
    \                result = result.to_f32().powf(2.0).unwrap();\n              \
    \  match op {\n                    \"*\" => {\n                        result\
    \ = result * right;\n                    }\n                    \"/\" => {\n \
    \                       result = result / right;\n                    }\n    \
    \                \"+\" => {\n                        result = result + right;\n\
    \                    }\n                    \"-\" => {\n                     \
    \   result = result - right;\n                    }\n                    \"^\"\
    \ => {\n                        result = result.powi(right);\n               \
    \     }\n                    \"**\" => {\n                        result = result.powf(right);\n\
    \                    }\n                    \"<\" => {\n                     \
    \   result = result.lt(right);\n                    }\n                    \"\
    <=>\" => {\n                        result = result.leq(right);\n            \
    \        }\n                }\n            }\n            result\n        }\n\
    \        _ => panic!(\"Unknown operator\")\n    }\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected one of `=>`, `@`, `if`, or `|`, found `[`\n  --> /tmp/tmp2mpv67t3.rs:21:24\n\
    \   |\n21 |         vec![\"+\"] | vec[\"-\"] | vec[\"*\"] | vec[\"//\"] | vec[\"\
    **\"] | vec[\"^\"] | vec[\"<=>\"] | vec[\"<\"] => {\n   |                    \
    \    ^ expected one of `=>`, `@`, `if`, or `|`\n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    match (operator, operand) {\n        (vec1,\
    \ vec2) => do_algebra_helper(vec1, vec2, operator)\n    }\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `do_algebra_helper` in this scope\n\
    \  --> /tmp/tmpsl96rt2m.rs:21:25\n   |\n21 |         (vec1, vec2) => do_algebra_helper(vec1,\
    \ vec2, operator)\n   |                         ^^^^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // initialize result to zero\n    let mut\
    \ result = 0;\n\n    // use map to convert operator list to operation function\n\
    \    let mut operation_func: Vec<fn(String) -> isize> = \n        operator.into_iter().map(|x|\
    \ match x {\n            \"+\" => +,\n            \"-\" => -,\n            \"\
    *\" => *,\n            \"//\" => /,\n            \"**\" => std::pow,\n       \
    \     _ => panic!(\"invalid algebra operator {:?}\", x),\n        }).collect();\n\
    \n    // use map to convert operand list to operand value\n    let mut operand:\
    \ Vec<isize> = operand.into_iter().map(|x| x as isize).collect();\n\n    // use\
    \ zip to convert both to tuples, where the first element is the operation function,\
    \ the second element is the operand value\n    let mut operation_tuple = operand.zip(operation_func).collect();\n\
    \n    // for each pair of values in the tuple, call the operation function\n \
    \   for (op, val) in operation_tuple {\n        result = op(val, result);\n  \
    \  }\n\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `+`\n  --> /tmp/tmp2hhenl6k.rs:26:20\n\
    \   |\n26 |             \"+\" => +,\n   |                 -- ^ expected expression\n\
    \   |                 |\n   |                 while parsing the `match` arm starting\
    \ here\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp2hhenl6k.rs:38:39\n\
    \    |\n38  |       let mut operation_tuple = operand.zip(operation_func).collect();\n\
    \    |                                         ^^^ `Vec<isize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // To keep track of the number of elements\
    \ in the expression\n    let mut num: isize = 0;\n    for op in operator {\n \
    \       // Add one to the number of elements in the expression when the current\
    \ operator is a basic algebra operation\n        num += match op {\n         \
    \   \"+\" | \"-\" => 1,\n            \"*\" => 2,\n            \"/\" | \"//\" =>\
    \ 3,\n            \"**\" => 4,\n            _ => 0,\n        };\n        // Add\
    \ one to the number of elements in the expression when the current operator is\
    \ an exponent\n        num += match op {\n            \"**\" => 1,\n         \
    \   _ => 0,\n        };\n    }\n    // For each element in the expression\n  \
    \  for element in operand {\n        // Multiply the value of the element by the\
    \ number of elements in the expression\n        num *= element;\n    }\n    return\
    \ num\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmdo9ofv8.rs:25:13\n   |\n\
    24 |         num += match op {\n   |                      -- this expression has\
    \ type `String`\n25 |             \"+\" | \"-\" => 1,\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmdo9ofv8.rs:25:19\n\
    \   |\n24 |         num += match op {\n   |                      -- this expression\
    \ has type `String`\n25 |             \"+\" | \"-\" => 1,\n   |              \
    \     ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpmdo9ofv8.rs:26:13\n   |\n24 |         num += match op {\n   | \
    \                     -- this expression has type `String`\n25 |             \"\
    +\" | \"-\" => 1,\n26 |             \"*\" => 2,\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmdo9ofv8.rs:27:13\n\
    \   |\n24 |         num += match op {\n   |                      -- this expression\
    \ has type `String`\n...\n27 |             \"/\" | \"//\" => 3,\n   |        \
    \     ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpmdo9ofv8.rs:27:19\n   |\n24 |         num += match op {\n   | \
    \                     -- this expression has type `String`\n...\n27 |        \
    \     \"/\" | \"//\" => 3,\n   |                   ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmdo9ofv8.rs:28:13\n\
    \   |\n24 |         num += match op {\n   |                      -- this expression\
    \ has type `String`\n...\n28 |             \"**\" => 4,\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpmdo9ofv8.rs:33:13\n   |\n32 |         num += match op {\n   |  \
    \                    -- this expression has type `String`\n33 |             \"\
    **\" => 1,\n   |             ^^^^ expected struct `String`, found `&str`\n\nerror:\
    \ aborting due to 7 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    match operator.len() {\n        0 => 0,\n\
    \        _ => operand.iter().zip(operator).fold(0, |acc, (e1, e2)| {\n       \
    \     match e1 {\n                \"+\" => acc + e2,\n                \"-\" =>\
    \ acc - e2,\n                \"*\" => acc * e2,\n                \"//\" => acc\
    \ / e2,\n                \"**\" => acc ** e2,\n                _ => panic!(\"\
    Unsupported operator: {}\", e1),\n            }\n        }),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeoik7msh.rs:24:17\n   |\n\
    23 |             match e1 {\n   |                   -- this expression has type\
    \ `&isize`\n24 |                 \"+\" => acc + e2,\n   |                 ^^^\
    \ expected `isize`, found `str`\n   |\n   = note: expected reference `&isize`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpeoik7msh.rs:25:17\n   |\n23 |             match e1 {\n   |    \
    \               -- this expression has type `&isize`\n24 |                 \"\
    +\" => acc + e2,\n25 |                 \"-\" => acc - e2,\n   |              \
    \   ^^^ expected `isize`, found `str`\n   |\n   = note: expected reference `&isize`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpeoik7msh.rs:26:17\n   |\n23 |             match e1 {\n   |    \
    \               -- this expression has type `&isize`\n...\n26 |              \
    \   \"*\" => acc * e2,\n   |                 ^^^ expected `isize`, found `str`\n\
    \   |\n   = note: expected reference `&isize`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeoik7msh.rs:27:17\n  \
    \ |\n23 |             match e1 {\n   |                   -- this expression has\
    \ type `&isize`\n...\n27 |                 \"//\" => acc / e2,\n   |         \
    \        ^^^^ expected `isize`, found `str`\n   |\n   = note: expected reference\
    \ `&isize`\n              found reference `&'static str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpeoik7msh.rs:28:17\n   |\n23 |             match e1 {\n\
    \   |                   -- this expression has type `&isize`\n...\n28 |      \
    \           \"**\" => acc ** e2,\n   |                 ^^^^ expected `isize`,\
    \ found `str`\n   |\n   = note: expected reference `&isize`\n              found\
    \ reference `&'static str`\n\nerror[E0277]: cannot add `String` to `isize`\n \
    \ --> /tmp/tmpeoik7msh.rs:24:28\n   |\n24 |                 \"+\" => acc + e2,\n\
    \   |                            ^ no implementation for `isize + String`\n  \
    \ |\n   = help: the trait `Add<String>` is not implemented for `isize`\n   = help:\
    \ the following other typ"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in &operator[1..] {\n        result = do_operation(&operator[0], &operand[0],\
    \ &i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `do_operation` in this scope\n  -->\
    \ /tmp/tmp1zm8is4c.rs:22:18\n   |\n22 |         result = do_operation(&operator[0],\
    \ &operand[0], &i);\n   |                  ^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 1;\n    for &mut op in\
    \ operator {\n        let operand1 = operand.clone();\n        let operand2 =\
    \ operand.clone();\n        for op2 in op {\n            match op2 {\n       \
    \         '+' => {\n                    let mut temp = operand1.clone();\n   \
    \                 for &mut ele in temp {\n                        ele += ele;\n\
    \                    }\n                    result = temp[0]\n               \
    \ }\n                '-' => {\n                    let mut temp = operand1.clone();\n\
    \                    for &mut ele in temp {\n                        ele -= ele;\n\
    \                    }\n                    result = temp[0]\n               \
    \ }\n                '*' => {\n                    let mut temp = operand1.clone();\n\
    \                    for &mut ele in temp {\n                        ele *= ele;\n\
    \                    }\n                    result = temp[0]\n               \
    \ }\n                '/' => {\n                    let mut temp = operand1.clone();\n\
    \                    for &mut ele in temp {\n                        ele /= ele;\n\
    \                    }\n                    result = temp[0]\n               \
    \ }\n                '^' => {\n                    let mut temp = operand1.clone();\n\
    \                    for &mut ele in temp {\n                        ele **= ele;\n\
    \                    }\n                    result = temp[0]\n               \
    \ }\n                '**' => {\n                    let mut temp = operand1.clone();\n\
    \                    for &mut ele in temp {\n                        ele **= ele;\n\
    \                    }\n                    result = temp[0]\n               \
    \ }\n                _ => panic!(\"Not valid operator\")\n            }\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp_51qa0uw.rs:61:17\n\
    \   |\n61 |                 '**' => {\n   |                 ^^^^\n   |\nhelp:\
    \ if you meant to write a `str` literal, use double quotes\n   |\n61 |       \
    \          \"**\" => {\n   |                 ~~~~\n\nerror: expected expression,\
    \ found `*=`\n  --> /tmp/tmp_51qa0uw.rs:57:30\n   |\n57 |                    \
    \     ele **= ele;\n   |                              ^^ expected expression\n\
    \nerror: expected expression, found `*=`\n  --> /tmp/tmp_51qa0uw.rs:64:30\n  \
    \ |\n64 |                         ele **= ele;\n   |                         \
    \     ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_51qa0uw.rs:21:9\n\
    \   |\n21 |     for &mut op in operator {\n   |         ^^^^^^^    -------- this\
    \ expression has type `Option<String>`\n   |         |\n   |         expected\
    \ struct `String`, found `&mut _`\n   |         help: you can probably remove\
    \ the explicit borrow: `op`\n   |\n   = note:         expected struct `String`\n\
    \           found mutable reference `&mut _`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_51qa0uw.rs:28:25\n   |\n28 |                     for &mut ele\
    \ in temp {\n   |                         ^^^^^^^^    ---- this expression has\
    \ type `Option<isize>`\n   |                         |\n   |                 \
    \        expected `isize`, found `&mut _`\n   |                         help:\
    \ you can probably remove the explicit borrow: `ele`\n   |\n   = note:       \
    \    expected type `isize`\n           found mutable reference `&mut _`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_51qa0uw.rs:35:25\n   |\n35 |              \
    \       for &mut ele in temp {\n   |                         ^^^^^^^^    ----\
    \ this expression has type `Option<isize>`\n   |                         |\n \
    \  |                         expected `isize`, found `&mut _`\n   |          \
    \               help: you can probably remove the explicit borrow: `ele`\n   |\n\
    \   = note:           expected type `isize`\n           found mutable reference\
    \ `&mut _`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_51qa0uw.rs"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 1;\n    for a in operand.iter()\
    \ {\n        for op in operator.iter() {\n            result += a * op;\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `&isize` by `&String`\n  --> /tmp/tmpn8byk4ba.rs:23:25\n\
    \   |\n23 |             result += a * op;\n   |                         ^ no implementation\
    \ for `&isize * &String`\n   |\n   = help: the trait `Mul<&String>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut temp_result = 0;\n    let mut idx\
    \ = 0;\n    let mut op_result = 0;\n    while idx < operator.len() {\n       \
    \ let current_op = operator[idx];\n        op_result = operand[idx] as isize;\n\
    \        match current_op {\n            \"+\" => {\n                temp_result\
    \ += op_result;\n            }\n            \"-\" => {\n                temp_result\
    \ -= op_result;\n            }\n            \"*\" => {\n                temp_result\
    \ *= op_result;\n            }\n            \"/\" => {\n                temp_result\
    \ /= op_result;\n            }\n            \"**\" => {\n                temp_result\
    \ **= op_result;\n            }\n            _ => {\n                // todo:\
    \ error handling\n            }\n        }\n        idx += 1;\n    }\n    temp_result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpb1ssp3hx.rs:40:30\n\
    \   |\n40 |                 temp_result **= op_result;\n   |                 \
    \             ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpb1ssp3hx.rs:27:13\n   |\n26 |         match current_op {\n   |     \
    \          ---------- this expression has type `String`\n27 |             \"+\"\
    \ => {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb1ssp3hx.rs:30:13\n   |\n26 |         match\
    \ current_op {\n   |               ---------- this expression has type `String`\n\
    ...\n30 |             \"-\" => {\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb1ssp3hx.rs:33:13\n\
    \   |\n26 |         match current_op {\n   |               ---------- this expression\
    \ has type `String`\n...\n33 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb1ssp3hx.rs:36:13\n\
    \   |\n26 |         match current_op {\n   |               ---------- this expression\
    \ has type `String`\n...\n36 |             \"/\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb1ssp3hx.rs:39:13\n\
    \   |\n26 |         match current_op {\n   |               ---------- this expression\
    \ has type `String`\n...\n39 |             \"**\" => {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut temp: isize = 0;\n    for op in\
    \ operator {\n        let operand1 = operand[op.to_string().len_of::<String>()..op.to_string().len_of::<String>()].iter().sum::<isize>()\n\
    \        temp += operand1.to_isize() * operand[op.to_string().len_of::<String>()].to_isize();\n\
    \    }\n    temp\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `temp`\n  --> /tmp/tmpyxpa3g1v.rs:22:123\n \
    \  |\n22 |         let operand1 = operand[op.to_string().len_of::<String>()..op.to_string().len_of::<String>()].iter().sum::<isize>()\n\
    \   |                                                                        \
    \                                                   ^ help: add `;` here\n23 |\
    \         temp += operand1.to_isize() * operand[op.to_string().len_of::<String>()].to_isize();\n\
    \   |         ---- unexpected token\n\nerror[E0599]: no method named `len_of`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpyxpa3g1v.rs:22:47\n\
    \   |\n22 |         let operand1 = operand[op.to_string().len_of::<String>()..op.to_string().len_of::<String>()].iter().sum::<isize>()\n\
    \   |                                               ^^^^^^ help: there is an associated\
    \ function with a similar name: `len`\n\nerror[E0599]: no method named `len_of`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpyxpa3g1v.rs:22:82\n\
    \   |\n22 |         let operand1 = operand[op.to_string().len_of::<String>()..op.to_string().len_of::<String>()].iter().sum::<isize>()\n\
    \   |                                                                        \
    \          ^^^^^^ help: there is an associated function with a similar name: `len`\n\
    \nerror[E0599]: no method named `to_isize` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpyxpa3g1v.rs:23:26\n   |\n23 |         temp += operand1.to_isize()\
    \ * operand[op.to_string().len_of::<String>()].to_isize();\n   |             \
    \             ^^^^^^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len_of` found for struct `String` in the current scope\n  --> /tmp/tmpyxpa3g1v.rs:23:62\n\
    \   |\n23 |         temp += operand1.to_isize() * operand[op.to_string().len_of::<String>()].to_isize();\n\
    \   |                                                              ^^^^^^ help:\
    \ there is an associated function with a similar name: `len`\n\nerror: aborting\
    \ due to 5 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // let mut stack = Vec::new();\n    let\
    \ mut stack = Vec::new();\n\n    for op in operator {\n        match op {\n  \
    \          \"+\" => {\n                stack.push(stack.last().unwrap() + operand.last().unwrap())\n\
    \            }\n            \"*\" => {\n                stack.push(stack.last().unwrap()\
    \ * operand.last().unwrap())\n            }\n            \"-\" => {\n        \
    \        stack.push(stack.last().unwrap() - operand.last().unwrap())\n       \
    \     }\n            \"/\" => {\n                stack.push(stack.last().unwrap()\
    \ / operand.last().unwrap())\n            }\n            \"//\" => {\n       \
    \         stack.push(stack.last().unwrap() // operand.last().unwrap())\n     \
    \       }\n            \"**\" => {\n                stack.push(stack.last().unwrap()\
    \ ** operand.last().unwrap())\n            }\n            _ => {\n           \
    \     panic!(\"Unknown operator\");\n            }\n        }\n    }\n    stack.pop()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpy902bi8c.rs:38:27\n\
    \   |\n37 |             \"//\" => {\n   |                     - closing delimiter\
    \ possibly meant for this\n38 |                 stack.push(stack.last().unwrap()\
    \ // operand.last().unwrap())\n   |                           ^ unclosed delimiter\n\
    39 |             }\n   |             ^ mismatched closing delimiter\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy902bi8c.rs:25:13\n   |\n24 |         match\
    \ op {\n   |               -- this expression has type `String`\n25 |        \
    \     \"+\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpy902bi8c.rs:28:13\n   |\n24 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n28 |             \"*\" => {\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy902bi8c.rs:31:13\n\
    \   |\n24 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n31 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy902bi8c.rs:34:13\n\
    \   |\n24 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n34 |             \"/\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy902bi8c.rs:37:13\n\
    \   |\n24 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n37 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy902bi8c.rs:40:13\n\
    \   |\n24 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n40 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy902bi8c.rs:38:28\n\
    \   |\n38 |                 stack.push(stack.last().unwrap() // operand.last().unwrap())\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `&isize`\n "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let operands = operand.clone(); // Copy\
    \ operands to avoid mutating them\n    operator\n        .iter()\n        .zip(operands)\n\
    \        .for_each(|operator, operand| {\n            match operator {\n     \
    \           \"+\" => operands[0] + operand,\n                \"-\" => operands[0]\
    \ - operand,\n                \"*\" => operands[0] * operand,\n              \
    \  \"//\" => operands[0] / operand,\n                \"**\" => operands[0] **\
    \ operand,\n                _ => panic!(\"Unknown operator: {:?}\", operator),\n\
    \            }\n        });\n    operands[0]\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0593]: closure is expected to take a single 2-tuple as argument,\
    \ but it takes 2 distinct arguments\n  --> /tmp/tmp_wvwvcm0.rs:24:10\n   |\n24\
    \ |         .for_each(|operator, operand| {\n   |          ^^^^^^^^ -------------------\
    \ takes 2 distinct arguments\n   |          |\n   |          expected closure\
    \ that takes a single 2-tuple as argument\n   |\nhelp: change the closure to accept\
    \ a tuple instead of individual arguments\n   |\n24 |         .for_each(|(operator,\
    \ operand)| {\n   |                   ~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0593`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0.0;\n    let operator\
    \ = operator\n        .iter()\n        .map(|x| x.to_string())\n        .collect::<Vec<&str>>();\n\
    \    let mut operand = operand\n        .iter()\n        .map(|x| x as isize)\n\
    \        .collect::<Vec<isize>>();\n    match operand.pop() {\n        Some(x)\
    \ => result += x,\n        None => return result,\n    }\n    match operator.pop()\
    \ {\n        Some(x) => result *= x,\n        None => return result,\n    }\n\
    \    while operand.len() != 0 {\n        match operator.pop() {\n            Some(x)\
    \ => result *= x,\n            None => return result,\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<&str>` cannot be built from an iterator\
    \ over elements of type `String`\n    --> /tmp/tmplc21x5g1.rs:24:10\n     |\n\
    24   |         .collect::<Vec<&str>>();\n     |          ^^^^^^^ value of type\
    \ `Vec<&str>` cannot be built from `std::iter::Iterator<Item=String>`\n     |\n\
    \     = help: the trait `FromIterator<String>` is not implemented for `Vec<&str>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmplc21x5g1.rs:30:27\n   |\n30 |         Some(x) => result += x,\n\
    \   |                           ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplc21x5g1.rs:31:24\n   |\n19 |\
    \ fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n   | \
    \                                                             ----- expected `isize`\
    \ because of return type\n...\n31 |         None => return result,\n   |     \
    \                   ^^^^^^ expected `isize`, found floating-point number\n\nerror[E0277]:\
    \ cannot multiply-assign `{float}` by `&str`\n  --> /tmp/tmplc21x5g1.rs:34:27\n\
    \   |\n34 |         Some(x) => result *= x,\n   |                           ^^\
    \ no implementation for `{float} *= &str`\n   |\n   = help: the trait `MulAssign<&str>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `MulAssign<Rhs>`:\n             <f32 as MulAssign<&f32>>\n           \
    \  <f32 as MulAssign>\n             <f64 as MulAssign<&f64>>\n             <f64\
    \ as MulAssign>\n             <i128 as MulAssi"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() != operand.len() {\n\
    \        panic!(\"operator and operand list must have the same length\")\n   \
    \ }\n\n    let mut expression = Vec::new();\n    let mut operators_found = false;\n\
    \    for i in 0..operand.len() {\n        expression.append(operand[i]);\n\n \
    \       for j in 0..operator.len() {\n            if operand[i] == operator[j]\
    \ {\n                let left_index = i;\n                let right_index = i;\n\
    \                for k in 0..i {\n                    expression.append(operand[k]);\n\
    \                }\n                expression = &expression.to_owned();\n\n \
    \               let mut right_operand: Vec<isize> = Vec::new();\n            \
    \    let mut left_operand: Vec<isize> = Vec::new();\n\n                for k in\
    \ left_index..right_index {\n                    right_operand.append(operand[k]);\n\
    \                    left_operand.append(expression[k]);\n                }\n\
    \                left_operand = &left_operand.to_owned();\n                right_operand\
    \ = &right_operand.to_owned();\n\n                let left_value = do_algebra(operator,\
    \ left_operand);\n                let right_value = do_algebra(operator, right_operand);\n\
    \n                let mut result = 0;\n\n                if left_value > right_value\
    \ {\n                    result = left_value;\n                } else {\n    \
    \                result = right_value;\n                }\n                expression[k]\
    \ = result;\n                operators_found = true;\n                break;\n\
    \            }\n        }\n\n        if operators_found {\n            break;\n\
    \        }\n    }\n\n    expression.resize(operand.len(), 0);\n    expression\
    \ = &expression.to_owned();\n\n    let mut value = do_algebra(operator, expression);\n\
    \n    for i in 0..value.len() {\n        value = &value[..i + 1].unwrap_or(0);\n\
    \    }\n    value\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `k` in this scope\n   --> /tmp/tmpkm0j11bn.rs:58:28\n\
    \    |\n58  |                 expression[k] = result;\n    |                 \
    \           ^ help: a tuple variant with a similar name exists: `Ok`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkm0j11bn.rs:27:27\n   |\n27 |         expression.append(operand[i]);\n\
    \   |                           ^^^^^^^^^^ expected `&mut Vec<_>`, found `isize`\n\
    \   |\n   = note: expected mutable reference `&mut Vec<_>`\n                 \
    \          found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkm0j11bn.rs:30:30\n\
    \   |\n30 |             if operand[i] == operator[j] {\n   |                 \
    \             ^^^^^^^^^^^ expected `isize`, found struct `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkm0j11bn.rs:34:39\n   |\n34 |              \
    \       expression.append(operand[k]);\n   |                                 \
    \      ^^^^^^^^^^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected\
    \ mutable reference `&mut Vec<_>`\n                           found type `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkm0j11bn.rs:36:30\n   |\n24 |\
    \     let mut expression = Vec::new();\n   |                          ----------\
    \ expected due to this value\n...\n36 |                 expression = &expression.to_owned();\n\
    \   |                              ^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found `&Vec<_>`\n   |\n   = note: expected struct `Vec<_>`\n           found\
    \ reference `&Vec<_>`\nhelp: consider removing the borrow\n   |\n36 -        \
    \         expression = &expression.to_owned();\n36 +                 expression\
    \ = expression.to_owned();\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkm0j11bn.rs:42:42\n\
    \   |\n42 |                     right_operand.append(operand[k]);\n   |      \
    \                                    ^^^^^^^^^^ expected `&mut Vec<isize>`, found\
    \ `isize`\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n   \
    \                        found type `isize`\n\nerror[E0277]: the trait bound `&mut\
    \ Vec<isize>: Clone` is not satisfied\n  --> /tmp/tmpkm0j11b"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // TODO: implement a recursive function\
    \ without using recursion\n    if operand.len() < operator.len() - 1 {\n     \
    \   println!(\"Operand list and operator list have different lengths\")\n    }\n\
    \    if operator.len() < 2 {\n        println!(\"Operator list has less than two\
    \ operators\")\n    }\n\n    let mut result = operand.first().unwrap() * operand.last().unwrap();\n\
    \    for i in 1..operand.len() {\n        result += operator[i - 1] * operand[i]\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `String` by `isize`\n  --> /tmp/tmpm1pqam3r.rs:30:35\n\
    \   |\n30 |         result += operator[i - 1] * operand[i]\n   |             \
    \      --------------- ^ ---------- isize\n   |                   |\n   |    \
    \               String\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Step 1 : The evaluation of an expression\
    \ \n    // Find the number of elements in the operand list. \n    // Find the\
    \ number of elements in the operator list. \n    // For each element, multiply\
    \ operand number by operand number. \n    // Add the sum of the multiplications\
    \ together.\n    let mut total: isize = 0;\n    for op in operator {\n       \
    \ total += operand [operator.index(op) - 1] * operand [operator.index(op) - 1]\n\
    \    }\n    total\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `index` found for struct `Vec<String>` in\
    \ the current scope\n  --> /tmp/tmpbffztwpr.rs:27:36\n   |\n27 |         total\
    \ += operand [operator.index(op) - 1] * operand [operator.index(op) - 1]\n   |\
    \                                    ^^^^^ method not found in `Vec<String>`\n\
    \   |\n   = help: items from traits can only be used if the trait is in scope\n\
    help: the following trait is implemented but not in scope; perhaps add a `use`\
    \ for it:\n   |\n1  | use std::ops::Index;\n   |\n\nerror[E0599]: no method named\
    \ `index` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpbffztwpr.rs:27:71\n\
    \   |\n27 |         total += operand [operator.index(op) - 1] * operand [operator.index(op)\
    \ - 1]\n   |                                                                 \
    \      ^^^^^ method not found in `Vec<String>`\n   |\n   = help: items from traits\
    \ can only be used if the trait is in scope\nhelp: the following trait is implemented\
    \ but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::ops::Index;\n\
    \   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut operator_index\
    \ = 0;\n    while operator_index < operator.len() {\n        result += operand[operator_index]\
    \ * operator[operator_index];\n        operator_index += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `isize` by `String`\n  --> /tmp/tmp3jwgm0h7.rs:23:43\n\
    \   |\n23 |         result += operand[operator_index] * operator[operator_index];\n\
    \   |                                           ^ no implementation for `isize\
    \ * String`\n   |\n   = help: the trait `Mul<String>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut operands = operand.iter().cloned().collect::<Vec<isize>>();\n\
    \    let mut operators = operator.iter().cloned().collect::<Vec<String>>();\n\
    \    operators.insert(0, operators.last());\n    let mut res = operands.iter().cloned().collect::<Vec<isize>>();\n\
    \    operators.iter().cloned().for_each(|operator| {\n        res.iter().cloned().for_each(|x|\
    \ {\n            if x == '+' { \n                res += 1;\n            }\n  \
    \          if x == '-' { \n                let temp = res.pop();\n           \
    \     res += temp;\n            }\n            if x == '*' { \n              \
    \  res *= *x;\n            }\n            if x == '/' { \n                let\
    \ temp = res.pop();\n                if temp == x {\n                    res.append(0);\n\
    \                }\n                else {\n                    res.append(temp\
    \ / x);\n                }\n            }\n            if x == '^' { \n      \
    \          let temp = res.pop();\n                let exp = if temp < x {\n  \
    \                  1\n                }\n                else {\n            \
    \        exp as i32\n                };\n                let temp = exp * x;\n\
    \                let temp = temp as i32;\n                res.append(temp);\n\
    \            }\n            if x == '**' { \n                let temp = res.pop();\n\
    \                let exp = if temp < x {\n                    1\n            \
    \    }\n                else {\n                    exp as i32\n             \
    \   };\n                let temp = exp;\n                let temp = temp as i32;\n\
    \                res.append(temp);\n            }\n        });\n    });\n    res.iter().cloned().for_each(|x|\
    \ {\n        print!(\"{}\", x);\n    });\n    res.last().unwrap()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpkr06ovpo.rs:57:21\n\
    \   |\n57 |             if x == '**' { \n   |                     ^^^^\n   |\n\
    help: if you meant to write a `str` literal, use double quotes\n   |\n57 |   \
    \          if x == \"**\" { \n   |                     ~~~~\n\nerror[E0425]: cannot\
    \ find value `exp` in this scope\n  --> /tmp/tmpkr06ovpo.rs:51:21\n   |\n51 |\
    \                     exp as i32\n   |                     ^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `exp` in this scope\n  --> /tmp/tmpkr06ovpo.rs:63:21\n\
    \   |\n63 |                     exp as i32\n   |                     ^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkr06ovpo.rs:22:25\n\
    \   |\n22 |     operators.insert(0, operators.last());\n   |                 \
    \        ^^^^^^^^^^^^^^^^ expected struct `String`, found enum `Option`\n   |\n\
    \   = note: expected struct `String`\n                found enum `Option<&String>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkr06ovpo.rs:26:21\n   |\n26 |\
    \             if x == '+' { \n   |                     ^^^ expected `isize`, found\
    \ `char`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to\
    \ type `Vec<isize>`\n  --> /tmp/tmpkr06ovpo.rs:27:17\n   |\n27 |             \
    \    res += 1;\n   |                 ---^^^^^\n   |                 |\n   |  \
    \               cannot use `+=` on type `Vec<isize>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkr06ovpo.rs:29:21\n   |\n29 |             if x == '-' {\
    \ \n   |                     ^^^ expected `isize`, found `char`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `Vec<isize>`\n  -->\
    \ /tmp/tmpkr06ovpo.rs:31:17\n   |\n31 |                 res += temp;\n   |   \
    \              ---^^^^^^^^\n   |                 |\n   |                 cannot\
    \ use `+=` on type `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkr06ovpo.rs:33:21\n\
    \   |\n33 |             if x == '*' { \n   |                     ^^^ expected\
    \ `isize`, found `char`\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpkr06ovpo.rs:34:24"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    match operator.len() {\n        0 => panic!(\"\
    Invalid length of operator list: {}\", operator);\n        1 => operand.first(),\n\
    \        2 => operator[0] * operand.first() + operator[1] * operand.last(),\n\
    \        3 => operator[0] * operand.first() + operator[1] * operand.last() + operator[2]\
    \ * operand.first() + operator[3] * operand.last(),\n        4 => operator[0]\
    \ * operand.first() + operator[1] * operand.last() + operator[2] * operand.first()\
    \ + operator[3] * operand.last() + operator[4] * operand.first() + operator[5]\
    \ * operand.last(),\n        5 => operator[0] * operand.first() + operator[1]\
    \ * operand.last() + operator[2] * operand.first() + operator[3] * operand.last()\
    \ + operator[4] * operand.first() + operator[5] * operand.last() + operator[6]\
    \ * operand.first() + operator[7] * operand.last(),\n        _ => panic!(\"Invalid\
    \ length of operator list: {}\", operator),\n    }\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: `match` arm body without braces\n  --> /tmp/tmpnj7rw4ln.rs:21:14\n\
    \   |\n21 |         0 => panic!(\"Invalid length of operator list: {}\", operator);\n\
    \   |           -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help:\
    \ use a comma to end a `match` arm expression: `,`\n   |           |  |\n   |\
    \           |  this statement is not surrounded by a body\n   |           while\
    \ parsing the `match` arm starting here\n\nerror[E0369]: cannot multiply `String`\
    \ by `Option<&isize>`\n  --> /tmp/tmpnj7rw4ln.rs:23:26\n   |\n23 |         2 =>\
    \ operator[0] * operand.first() + operator[1] * operand.last(),\n   |        \
    \      ----------- ^ --------------- Option<&isize>\n   |              |\n   |\
    \              String\n\nerror[E0369]: cannot multiply `String` by `Option<&isize>`\n\
    \  --> /tmp/tmpnj7rw4ln.rs:23:58\n   |\n23 |         2 => operator[0] * operand.first()\
    \ + operator[1] * operand.last(),\n   |                                      \
    \        ----------- ^ -------------- Option<&isize>\n   |                   \
    \                           |\n   |                                          \
    \    String\n\nerror[E0369]: cannot multiply `String` by `Option<&isize>`\n  -->\
    \ /tmp/tmpnj7rw4ln.rs:24:26\n   |\n24 |         3 => operator[0] * operand.first()\
    \ + operator[1] * operand.last() + operator[2] * operand.first() + operator[3]\
    \ * operand.last(),\n   |              ----------- ^ --------------- Option<&isize>\n\
    \   |              |\n   |              String\n\nerror[E0369]: cannot multiply\
    \ `String` by `Option<&isize>`\n  --> /tmp/tmpnj7rw4ln.rs:24:58\n   |\n24 |  \
    \       3 => operator[0] * operand.first() + operator[1] * operand.last() + operator[2]\
    \ * operand.first() + operator[3] * operand.last(),\n   |                    \
    \                          ----------- ^ -------------- Option<&isize>\n   | \
    \                                             |\n   |                        \
    \                      String\n\nerror[E0369]: cannot multiply `String` by `Option<&isize>`\n\
    \  --> /tmp/tmpnj7rw4ln.rs:24:89\n   |\n24 |         3 => operator[0] * operand.first()\
    \ + operator[1] * operand.la"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    match operator.len() {\n        0 => 0,\n\
    \        _ => do_algebra_with_match(operator, operand)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `do_algebra_with_match` in this scope\n\
    \  --> /tmp/tmplji5obox.rs:22:14\n   |\n22 |         _ => do_algebra_with_match(operator,\
    \ operand)\n   |              ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // We should make sure that the operator\
    \ list is empty before we try to subtract \n    // the first element from operand[0]\n\
    \    if operator.len() == 0 || operand.len() == 0 {\n        return 0;\n    }\n\
    \n    let mut expr: isize = operand[0];\n    let mut operator_index = operator.len()\
    \ - 1;\n    for element in operand {\n        // We will keep track of the result\
    \ in the expr\n        expr += operator[operator_index] * element;\n        operator_index\
    \ -= 1;\n    }\n    return expr;\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `String` by `isize`\n  --> /tmp/tmplyh5pk9y.rs:30:42\n\
    \   |\n30 |         expr += operator[operator_index] * element;\n   |        \
    \         ------------------------ ^ ------- isize\n   |                 |\n \
    \  |                 String\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operand.len() == 0 {\n        0\n  \
    \  } else if operand.len() == 1 {\n        operand[0]\n    } else {\n        let\
    \ mut left_operand = do_algebra(operator, operand[0..operand.len()-1]);\n    \
    \    let mut right_operand = do_algebra(operator, operand[operand.len()..]);\n\
    \        left_operand + right_operand\n    }\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5ovlm8oo.rs:25:53\n   |\n\
    25 |         let mut left_operand = do_algebra(operator, operand[0..operand.len()-1]);\n\
    \   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_vec()`\n   |                     \
    \                                |\n   |                                     \
    \                expected struct `Vec`, found slice `[isize]`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n               found slice `[isize]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5ovlm8oo.rs:26:54\n   |\n26 |         let mut\
    \ right_operand = do_algebra(operator, operand[operand.len()..]);\n   |      \
    \                                                ^^^^^^^^^^^^^^^^^^^^^^^^- help:\
    \ try using a conversion method: `.to_vec()`\n   |                           \
    \                           |\n   |                                          \
    \            expected struct `Vec`, found slice `[isize]`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n               found slice `[isize]`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    use std::mem::{size_of, transmute};\n \
    \   let result = operand[0];\n    for index in 1..operand.len() {\n        let\
    \ current_result = result * operator[index - 1] as isize;\n        result *= current_result\
    \ as isize;\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "warning: unused imports: `size_of`, `transmute`\n  --> /tmp/tmp5565av0h.rs:20:20\n\
    \   |\n20 |     use std::mem::{size_of, transmute};\n   |                    ^^^^^^^\
    \  ^^^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0605]:\
    \ non-primitive cast: `String` as `isize`\n  --> /tmp/tmp5565av0h.rs:23:39\n \
    \  |\n23 |         let current_result = result * operator[index - 1] as isize;\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as`\
    \ expression can only be used to convert between primitive types or to coerce\
    \ to a specific trait object\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0605`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().product();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result = result\
    \ + operand.iter().product(),\n            \"-\" => result = result - operand.iter().product(),\n\
    \            \"*\" => result = result * operand.iter().product(),\n          \
    \  \"//\" => result = result / operand.iter().product(),\n            \"**\" =>\
    \ result = result ** operand.iter().product(),\n            _ => panic!(\"Illegal\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg460em5e.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result = result + operand.iter().product(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg460em5e.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result = result + operand.iter().product(),\n24 |             \"-\" => result\
    \ = result - operand.iter().product(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg460em5e.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result = result * operand.iter().product(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpg460em5e.rs:26:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n26 |   \
    \          \"//\" => result = result / operand.iter().product(),\n   |       \
    \      ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg460em5e.rs:27:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n27 |             \"\
    **\" => result = result ** operand.iter().product(),\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n\n    for i in 0..operand.len()\
    \ {\n        match operator[i] {\n            \"+\" => result += operand[i],\n\
    \            \"*\" => result *= operand[i],\n            \"-\" => result -= operand[i],\n\
    \            \"//\" => result = result // operand[i],\n            \"**\" => result\
    \ = result ** operand[i],\n            _ => (),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `\"**\"`\n  --> /tmp/tmpw36mr3t9.rs:28:13\n   |\n27 |             \"//\"\
    \ => result = result // operand[i],\n   |                  --                -\
    \ expected one of 8 possible tokens\n   |                  |\n   |           \
    \       while parsing the `match` arm starting here\n28 |             \"**\" =>\
    \ result = result ** operand[i],\n   |             ^^^^ unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpw36mr3t9.rs:23:15\n   |\n23 |         match\
    \ operator[i] {\n   |               ^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut op = operand.clone();\n    op.sort_unstable();\n\
    \    op.push(0);\n    let mut eval = 0;\n    for j in 0..op.len() {\n        let\
    \ mut res = 0;\n        for p in 0..op.len() {\n            let mut tmp = 0;\n\
    \            for k in 0..j {\n                let mut a = k == 0 ? 0 : op[p];\n\
    \                let b = j == op.len() - 1 ? 0 : op[j];\n                let c\
    \ = p == op.len() - 1 ? 0 : op[p];\n                let d = j == op.len() - 1\
    \ ? 0 : op[j];\n                let tmp1 = a + b + c + d;\n                if\
    \ tmp1 > 0 {\n                    tmp += tmp1;\n                }\n          \
    \  }\n            eval += tmp;\n        }\n    }\n    eval\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `0`\n\
    \  --> /tmp/tmpq31n2ru4.rs:29:38\n   |\n29 |                 let mut a = k ==\
    \ 0 ? 0 : op[p];\n   |                                      ^ expected one of\
    \ `.`, `;`, `?`, `else`, or an operator\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    assert!(operator.is_len() == operand.len(),\n\
    \        \"operator and operand size mismatch\");\n\n    operand.iter().fold(0,\
    \ |result, i| {\n        match operator {\n            Operator::Add(a) => result\
    \ + a,\n            Operator::Subtract(a) => result - a,\n            Operator::Multiply(a)\
    \ => result * a,\n            Operator::FloorDivision(a) => result // a,\n   \
    \         Operator::Exponentiation(a) => result ** a,\n        }\n    })\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `Operator`\n  --> /tmp/tmpxxs6q_gg.rs:29:13\n   |\n28 |             Operator::FloorDivision(a)\
    \ => result // a,\n   |                                        --       - expected\
    \ one of 8 possible tokens\n   |                                        |\n  \
    \ |                                        while parsing the `match` arm starting\
    \ here\n29 |             Operator::Exponentiation(a) => result ** a,\n   |   \
    \          ^^^^^^^^ unexpected token\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Operator`\n  --> /tmp/tmpxxs6q_gg.rs:25:13\n   |\n25 |    \
    \         Operator::Add(a) => result + a,\n   |             ^^^^^^^^ use of undeclared\
    \ type `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n\
    \  --> /tmp/tmpxxs6q_gg.rs:26:13\n   |\n26 |             Operator::Subtract(a)\
    \ => result - a,\n   |             ^^^^^^^^ use of undeclared type `Operator`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpxxs6q_gg.rs:27:13\n\
    \   |\n27 |             Operator::Multiply(a) => result * a,\n   |           \
    \  ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0599]: no method named\
    \ `is_len` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpxxs6q_gg.rs:20:22\n\
    \   |\n20 |     assert!(operator.is_len() == operand.len(),\n   |            \
    \          ^^^^^^ help: there is an associated function with a similar name: `len`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    \n    if operator.len() != operand.len()\
    \ - 1 {\n        return -1;\n    }\n\n    let mut result = 0;\n\n    for (i, el)\
    \ in operator.iter().zip(operand.iter()).enumerate().take(operand.len() - 1) {\n\
    \        match el {\n            '*' => result += (el as isize) * operand[i as\
    \ usize],\n            '-' => result -= (el as isize) * operand[i as usize],\n\
    \            '/' => result /= (el as isize),\n            '^' => result ^= (el\
    \ as isize),\n            '+' => {\n                result += operand[i as usize];\n\
    \            }\n            '-' => result -= operand[i as usize],\n          \
    \  _ => return -1,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpj1ymq9xq.rs:31:30\n\
    \   |\n31 |             '/' => result /= (el as isize),\n   |                \
    \              ^           ^\n   |\n   = note: `#[warn(unused_parens)]` on by\
    \ default\nhelp: remove these parentheses\n   |\n31 -             '/' => result\
    \ /= (el as isize),\n31 +             '/' => result /= el as isize,\n   | \n\n\
    warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpj1ymq9xq.rs:32:30\n\
    \   |\n32 |             '^' => result ^= (el as isize),\n   |                \
    \              ^           ^\n   |\nhelp: remove these parentheses\n   |\n32 -\
    \             '^' => result ^= (el as isize),\n32 +             '^' => result\
    \ ^= el as isize,\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj1ymq9xq.rs:29:13\n\
    \   |\n28 |         match el {\n   |               -- this expression has type\
    \ `(&String, &isize)`\n29 |             '*' => result += (el as isize) * operand[i\
    \ as usize],\n   |             ^^^ expected tuple, found `char`\n   |\n   = note:\
    \ expected tuple `(&String, &isize)`\n               found type `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpj1ymq9xq.rs:30:13\n   |\n28 |         match\
    \ el {\n   |               -- this expression has type `(&String, &isize)`\n29\
    \ |             '*' => result += (el as isize) * operand[i as usize],\n30 |  \
    \           '-' => result -= (el as isize) * operand[i as usize],\n   |      \
    \       ^^^ expected tuple, found `char`\n   |\n   = note: expected tuple `(&String,\
    \ &isize)`\n               found type `char`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpj1ymq9xq.rs:31:13\n   |\n28 |         match el {\n   |        \
    \       -- this expression has type `(&String, &isize)`\n...\n31 |           \
    \  '/' => result /= (el as isize),\n   |             ^^^ expected tuple, found\
    \ `char`\n   |\n   = note: expected tuple `(&String, &isize)`\n              \
    \ found type `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj1ymq9xq.rs:32:13\n\
    \   |\n28 |         match el {\n   |               -- this expression has type\
    \ `(&String, &isize)`\n...\n32 |             '^' "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for (index, element) in operand.iter().enumerate() {\n        match operator[index]\
    \ {\n            \"+\" => result += element,\n            \"-\" => result -= element,\n\
    \            \"*\" => result *= element,\n            \"//\" => result /= element,\n\
    \            \"**\" => result **= element,\n            _ => panic!(\"wrong operator\"\
    ),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpm5_cg23r.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= element,\n   |                  --\
    \         ^^ expected expression\n   |                  |\n   |              \
    \    while parsing the `match` arm starting here\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpm5_cg23r.rs:22:15\n   |\n22 |         match operator[index] {\n\
    \   |               ^^^^^^^^^^^^^^^ expected `&str`, found struct `String`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut res = 0;\n    for val in operand\
    \ {\n        if val > 0 {\n            res = res + val;\n        }\n    }\n  \
    \  for op in operator {\n        if op == \"-\" {\n            res = res - val;\n\
    \        } else {\n            res = res * val;\n        }\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `val` in this scope\n  --> /tmp/tmp2ceuz9bj.rs:28:25\n\
    \   |\n28 |             res = res - val;\n   |                         ^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `val` in this scope\n\
    \  --> /tmp/tmp2ceuz9bj.rs:30:25\n   |\n30 |             res = res * val;\n  \
    \ |                         ^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack = Vec::new();\n\n    for\
    \ element in operand {\n        stack.push(element);\n    }\n\n    for i in 1..operator.len()\
    \ {\n        stack.unshift(do_operator(stack[stack.len() - 1], operator[i]));\n\
    \    }\n\n    stack.pop()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `do_operator` in this scope\n  --> /tmp/tmp7s2jfp9e.rs:27:23\n\
    \   |\n27 |         stack.unshift(do_operator(stack[stack.len() - 1], operator[i]));\n\
    \   |                       ^^^^^^^^^^^ help: a local variable with a similar\
    \ name exists: `operator`\n\nerror[E0599]: no method named `unshift` found for\
    \ struct `Vec<isize>` in the current scope\n  --> /tmp/tmp7s2jfp9e.rs:27:15\n\
    \   |\n27 |         stack.unshift(do_operator(stack[stack.len() - 1], operator[i]));\n\
    \   |               ^^^^^^^ method not found in `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7s2jfp9e.rs:30:5\n   |\n19 | fn do_algebra(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n   |                         \
    \                                     ----- expected `isize` because of return\
    \ type\n...\n30 |     stack.pop()\n   |     ^^^^^^^^^^^ expected `isize`, found\
    \ enum `Option`\n   |\n   = note: expected type `isize`\n              found enum\
    \ `Option<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0425, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // If the two vectors are of different\
    \ lengths, then return 0.\n    if operator.len() != operand.len() {\n        return\
    \ 0\n    }\n    let mut result = 0\n    for (a, b) in operand.iter().zip(operator.iter())\
    \ {\n        match b {\n            '+' => result = result + a,\n            '-'\
    \ => result = result - a,\n            '*' => result = result * a,\n         \
    \   '/' => result = result / a,\n            '%' => result = result % a,\n   \
    \         '^' => result = result ^ a,\n            a => return 0,\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmptocqozea.rs:24:23\n\
    \   |\n24 |     let mut result = 0\n   |                       ^ help: add `;`\
    \ here\n25 |     for (a, b) in operand.iter().zip(operator.iter()) {\n   |   \
    \  --- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptocqozea.rs:27:13\n\
    \   |\n26 |         match b {\n   |               - this expression has type `&String`\n\
    27 |             '+' => result = result + a,\n   |             ^^^ expected struct\
    \ `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptocqozea.rs:28:13\n\
    \   |\n26 |         match b {\n   |               - this expression has type `&String`\n\
    27 |             '+' => result = result + a,\n28 |             '-' => result =\
    \ result - a,\n   |             ^^^ expected struct `String`, found `char`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmptocqozea.rs:29:13\n   |\n26 |  \
    \       match b {\n   |               - this expression has type `&String`\n...\n\
    29 |             '*' => result = result * a,\n   |             ^^^ expected struct\
    \ `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptocqozea.rs:30:13\n\
    \   |\n26 |         match b {\n   |               - this expression has type `&String`\n\
    ...\n30 |             '/' => result = result / a,\n   |             ^^^ expected\
    \ struct `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptocqozea.rs:31:13\n\
    \   |\n26 |         match b {\n   |               - this expression has type `&String`\n\
    ...\n31 |             '%' => result = result % a,\n   |             ^^^ expected\
    \ struct `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptocqozea.rs:32:13\n\
    \   |\n26 |         match b {\n   |               - this expression has type `&String`\n\
    ...\n32 |             '^' => result = result ^ a,\n   |             ^^^ expected\
    \ struct `String`, found `char`\n\nerror: aborting due to 7 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() != operand.len() - 1\
    \ {\n        return -1;\n    }\n    let mut operations = Vec::new();\n    let\
    \ mut total = 0;\n\n    for (i, x) in operand.iter().enumerate() {\n        total\
    \ += x;\n\n        let mut operation = operator[i];\n        while let Some(m)\
    \ = operations.iter().position(|x| &m == &x) {\n            operation = match\
    \ operation {\n                '+' => match m {\n                    '*' => {\n\
    \                        operation = operator[operators.len() - 1];\n        \
    \                total += x;\n                    },\n                    '-'\
    \ => {\n                        operation = operator[0];\n                   \
    \     total -= x;\n                    }\n                },\n               \
    \ '*' => {\n                    operation = operator[operators.len() - 1];\n \
    \                   total *= x;\n                },\n                '/' => {\n\
    \                    operation = operator[0];\n                    total /= x;\n\
    \                },\n                '%' => {\n                    operation =\
    \ operator[operators.len() - 1];\n                    total %= x;\n          \
    \      },\n                _ => {\n                    operation = match m {\n\
    \                        '**' => {\n                            operation = operator[0];\n\
    \                            total = x ** x;\n                        }\n    \
    \                };\n                }\n            };\n        }\n\n        if\
    \ let Some(o) = &operation {\n            operations.push(o);\n        }\n   \
    \ }\n\n    total\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpeh8_hxyp.rs:56:25\n\
    \   |\n56 |                         '**' => {\n   |                         ^^^^\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    56 |                         \"**\" => {\n   |                         ~~~~\n\n\
    error[E0425]: cannot find value `m` in this scope\n  --> /tmp/tmpeh8_hxyp.rs:30:61\n\
    \   |\n30 |         while let Some(m) = operations.iter().position(|x| &m == &x)\
    \ {\n   |                                                             ^ help:\
    \ a local variable with a similar name exists: `i`\n\nerror[E0425]: cannot find\
    \ value `operators` in this scope\n  --> /tmp/tmpeh8_hxyp.rs:34:46\n   |\n34 |\
    \                         operation = operator[operators.len() - 1];\n   |   \
    \                                           ^^^^^^^^^ help: a local variable with\
    \ a similar name exists: `operator`\n\nerror[E0425]: cannot find value `operators`\
    \ in this scope\n  --> /tmp/tmpeh8_hxyp.rs:43:42\n   |\n43 |                 \
    \    operation = operator[operators.len() - 1];\n   |                        \
    \                  ^^^^^^^^^ help: a local variable with a similar name exists:\
    \ `operator`\n\nerror[E0425]: cannot find value `operators` in this scope\n  -->\
    \ /tmp/tmpeh8_hxyp.rs:51:42\n   |\n51 |                     operation = operator[operators.len()\
    \ - 1];\n   |                                          ^^^^^^^^^ help: a local\
    \ variable with a similar name exists: `operator`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpeh8_hxyp.rs:32:17\n   |\n31 |             operation = match\
    \ operation {\n   |                               --------- this expression has\
    \ type `String`\n32 |                 '+' => match m {\n   |                 ^^^\
    \ expected struct `String`, found `char`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpeh8_hxyp.rs:42:17\n   |\n31 |             operation = match operation\
    \ {\n   |                               --------- this expression has type `String`\n\
    ...\n42 |                 '*' => {\n   |                 ^^^ expected struct `String`,\
    \ found `char`\n\nerror"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    operator.len() == operand.len() - 1 &&\n\
    \        operator.iter().zip(operand.iter()).map(|(a, b)| a + (b as isize)).sum()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `isize` to `&String`\n  --> /tmp/tmplnqs77dh.rs:21:60\n\
    \   |\n21 |         operator.iter().zip(operand.iter()).map(|(a, b)| a + (b as\
    \ isize)).sum()\n   |                                                        \
    \  - ^ ------------ isize\n   |                                              \
    \            |\n   |                                                         \
    \ &String\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplnqs77dh.rs:20:5\n\
    \   |\n19 |   fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                                -----\
    \ expected `isize` because of return type\n20 | /     operator.len() == operand.len()\
    \ - 1 &&\n21 | |         operator.iter().zip(operand.iter()).map(|(a, b)| a +\
    \ (b as isize)).sum()\n   | |________________________________________________________________________________^\
    \ expected `isize`, found `bool`\n\nerror[E0277]: the trait bound `bool: Sum<_>`\
    \ is not satisfied\n    --> /tmp/tmplnqs77dh.rs:21:76\n     |\n21   |        \
    \ operator.iter().zip(operand.iter()).map(|(a, b)| a + (b as isize)).sum()\n \
    \    |                                                                       \
    \     ^^^ the trait `Sum<_>` is not implemented for `bool`\n     |\n     = help:\
    \ the following other types implement trait `Sum<A>`:\n               <Duration\
    \ as Sum<&'a Duration>>\n               <Duration as Sum>\n               <Option<T>\
    \ as Sum<Option<U>>>\n               <Result<T, E> as Sum<Result<U, E>>>\n   \
    \            <Simd<f32, LANES> as Sum<&'a Simd<f32, LANES>>>\n               <Simd<f32,\
    \ LANES> as Sum>\n               <Simd<f64, LANES> as Sum<&'a Simd<f64, LANES>>>\n\
    \               <Simd<f64, LANES> as Sum>\n             and 72 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror[E0606]: casting `&isize` as\
    \ `isize` is invalid\n  --> /tmp/tmplnqs77dh.rs:21:62\n   |\n21 |         operator.iter().zip(operand.iter()).map(|(a,\
    \ b)| a + (b as isize)).sum()\n   |                                          \
    \                    ^-^^^^^^^^^^\n   |                   "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    assert_eq!(operator.len(), operand.len());\n\
    \    assert_eq!(operator.size(), operand.len() - 1);\n    let mut result = 0;\n\
    \    for &op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand[op.len()..].iter().sum(),\n            \"-\" => result -= operand[op.len()..].iter().sum(),\n\
    \            \"*\" => result *= operand[op.len()..].iter().sum(),\n          \
    \  \"//\" => result /= operand[op.len()..].iter().sum(),\n            \"**\" =>\
    \ result **= operand[op.len()..].iter().sum(),\n            _ => panic!(\"unknown\
    \ operator: {}\", op)\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp6ou1u371.rs:29:29\n\
    \   |\n29 |             \"**\" => result **= operand[op.len()..].iter().sum(),\n\
    \   |                  --         ^^ expected expression\n   |               \
    \   |\n   |                  while parsing the `match` arm starting here\n\nerror[E0599]:\
    \ no method named `size` found for struct `Vec<String>` in the current scope\n\
    \  --> /tmp/tmp6ou1u371.rs:21:25\n   |\n21 |     assert_eq!(operator.size(), operand.len()\
    \ - 1);\n   |                         ^^^^ help: there is an associated function\
    \ with a similar name: `resize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6ou1u371.rs:23:9\n\
    \   |\n23 |     for &op in operator {\n   |         ^^^    -------- this expression\
    \ has type `Option<String>`\n   |         |\n   |         expected struct `String`,\
    \ found reference\n   |         help: you can probably remove the explicit borrow:\
    \ `op`\n   |\n   = note: expected struct `String`\n           found reference\
    \ `&_`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Calculate the result\n    let mut result:\
    \ isize = 0;\n    for &index in operator.iter().cloned() {\n        result +=\
    \ operand[index];\n    }\n    // Return the result\n    return result;\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx1_kqzk6.rs:22:9\n   |\n\
    22 |     for &index in operator.iter().cloned() {\n   |         ^^^^^^    ------------------------\
    \ this expression has type `Option<String>`\n   |         |\n   |         expected\
    \ struct `String`, found reference\n   |         help: you can probably remove\
    \ the explicit borrow: `index`\n   |\n   = note: expected struct `String`\n  \
    \         found reference `&_`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.last(),\n    \
    \        \"-\" => result -= operand.last(),\n            \"*\" => result *= operand.last(),\n\
    \            \"//\" => result /= operand.last(),\n            \"**\" => result\
    \ **= operand.last(),\n            _ => {}\n        }\n        result = operand.last()\
    \ * result;\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpzx3qnhy0.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzx3qnhy0.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzx3qnhy0.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzx3qnhy0.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzx3qnhy0.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Option<&isize>` to `{integer}`\n\
    \  --> /tmp/tmpzx3qnhy0.rs:23:27\n   |\n23 |             \"+\" => result += operand.last(),\n\
    \   |                           ^^ no implementation for `{integer} += Option<&isize>`\n\
    \   |\n   = help: the trait `AddAssign<Option<&isize>>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssig"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    //println!(\"{}\", operator);\n    let\
    \ mut op = operand[0];\n    for num in operand {\n        //println!(\"{} {}\"\
    , num, op);\n        let mut val = num;\n        for op in operator {\n      \
    \      if op == \"+\" {\n                val += val;\n            }\n        \
    \    if op == \"-\" {\n                val -= val;\n            }\n          \
    \  if op == \"*\" {\n                val *= val;\n            }\n            if\
    \ op == \"/\" {\n                val /= val;\n            }\n            if op\
    \ == \"**\" {\n                val *= val;\n            }\n            if op ==\
    \ \"//\" {\n                val /= val;\n            }\n        }\n    }\n   \
    \ return val;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `val` in this scope\n  --> /tmp/tmpb_v8t7l8.rs:46:12\n\
    \   |\n46 |     return val;\n   |            ^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Create a map of operators\n    let mut\
    \ map = Vec::new();\n    for (i, s) in operator.iter().enumerate() {\n       \
    \ map.push(i as usize, s);\n    }\n\n    // Create stack for operands\n    let\
    \ mut stack = Vec::new();\n\n    // Push current operand on the stack\n    for\
    \ e in &mut stack {\n        stack.push(e.0);\n    }\n\n    // Pop the operand\
    \ on top of the stack\n    let mut result = operand.iter().cloned().collect::<Vec<_>>();\n\
    \    while let Some(e) = stack.pop() {\n        let (id, operator) = map.get(e\
    \ as usize);\n        let mut left_operand = stack.cloned().collect::<Vec<_>>();\n\
    \n        // If there aren't any more operands on the stack or the operand is\
    \ an int, push the operand back on the stack\n        while left_operand.len()\
    \ == 0 || left_operand[0] == Some(e as isize) {\n            left_operand.push(result);\n\
    \        }\n\n        match operator {\n            \"+\" => {\n             \
    \   if left_operand.len() > 1 {\n                    stack.push(left_operand[1]\
    \ + left_operand[0]);\n                    left_operand.truncate(1);\n       \
    \         }\n            }\n            \"-\" => {\n                if left_operand.len()\
    \ > 1 {\n                    stack.push(left_operand[1] - left_operand[0]);\n\
    \                    left_operand.truncate(1);\n                }\n          \
    \  }\n            \"*\" => {\n                if left_operand.len() > 1 {\n  \
    \                  stack.push(left_operand[1] * left_operand[0]);\n          \
    \          left_operand.truncate(1);\n                }\n            }\n     \
    \       \"//\" => {\n                if left_operand.len() > 1 {\n           \
    \         stack.push(left_operand[1] / left_operand[0]);\n                   \
    \ left_operand.truncate(1);\n                }\n            }\n            \"\
    **\" => {\n                if left_operand.len() > 1 {\n                    stack.push(left_operand[1]\
    \ ** left_operand[0]);\n                    left_operand.truncate(1);\n      \
    \          }\n            }\n            \"\" => {\n                if left_operand.len()\
    \ > 0 {\n                    result = left_operand[0]\n                }\n   \
    \         }\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpcch92seu.rs:23:13\n     |\n23   |         map.push(i as usize,\
    \ s);\n     |             ^^^^ ----------  - supplied 2 arguments\n     |    \
    \         |\n     |             expected 1 argument\n     |\nnote: associated\
    \ function defined here\n\nerror[E0609]: no field `0` on type `&mut _`\n  -->\
    \ /tmp/tmpcch92seu.rs:31:22\n   |\n31 |         stack.push(e.0);\n   |       \
    \               ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcch92seu.rs:37:13\n\
    \   |\n37 |         let (id, operator) = map.get(e as usize);\n   |          \
    \   ^^^^^^^^^^^^^^   ------------------- this expression has type `Option<&_>`\n\
    \   |             |\n   |             expected enum `Option`, found tuple\n  \
    \ |\n   = note: expected enum `Option<&_>`\n             found tuple `(_, _)`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcch92seu.rs:84:5\n   |\n19 | fn\
    \ do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n   |    \
    \                                                          ----- expected `isize`\
    \ because of return type\n...\n84 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found struct `Vec`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0308, E0609.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for i in 0..operator.len() - 1 {\n        if operator[i] == \"+\" {\n      \
    \      result = result.iter().cloned().flat_map(|x| x.iter().cloned())\n     \
    \           .sum::<isize>().unwrap();\n        } else if operator[i] == \"-\"\
    \ {\n            result = result.iter().cloned().flat_map(|x| x.iter().cloned())\n\
    \                .filter(|x| x > 0)\n                .sum::<isize>().unwrap();\n\
    \        } else if operator[i] == \"*\" {\n            result = result.iter().cloned().flat_map(|x|\
    \ x.iter().cloned())\n                .product::<isize>().unwrap();\n        }\
    \ else if operator[i] == \"//\" {\n            let mut divisor = operand.iter().cloned().skip(1).take(1).unwrap().clone();\n\
    \            let mut quotient = operand.iter().cloned().skip(1).take(1).unwrap().clone();\n\
    \            for i in divisor.iter().cloned().flat_map(|x| x.iter().cloned())\
    \ {\n                quotient = quotient / x;\n            }\n            result\
    \ = quotient.iter().cloned().sum::<isize>().unwrap();\n        } else {\n    \
    \        result = operand.iter().cloned().flat_map(|x| x.iter().cloned())\n  \
    \              .enumerate()\n                .filter_map(|(i, x)| if i > 0 { Some((*x,\
    \ operator[i - 1], *result)) } else { None })\n                .flatten()\n  \
    \              .fold(operand.iter().cloned().collect::<Vec<_>>(), |mut v, x| {\n\
    \                    if *x != 0 {\n                        let vv = v.iter().cloned().flat_map(|x|\
    \ x.iter().cloned()).sum::<isize>().unwrap();\n                        *v += (*x);\n\
    \                        *v = vv;\n                    }\n                   \
    \ v\n                });\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"\
    ), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `x` in this scope\n  --> /tmp/tmp1n4tv6s2.rs:36:39\n\
    \   |\n36 |                 quotient = quotient / x;\n   |                   \
    \                    ^ help: a local variable with a similar name exists: `i`\n\
    \nwarning: unnecessary parentheses around assigned value\n  --> /tmp/tmp1n4tv6s2.rs:47:31\n\
    \   |\n47 |                         *v += (*x);\n   |                        \
    \       ^  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove\
    \ these parentheses\n   |\n47 -                         *v += (*x);\n47 +    \
    \                     *v += *x;\n   | \n\nerror[E0599]: no method named `iter`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmp1n4tv6s2.rs:23:60\n\
    \   |\n23 |             result = result.iter().cloned().flat_map(|x| x.iter().cloned())\n\
    \   |                                                            ^^^^ method not\
    \ found in `isize`\n\nerror[E0599]: no method named `iter` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmp1n4tv6s2.rs:26:60\n   |\n26 |          \
    \   result = result.iter().cloned().flat_map(|x| x.iter().cloned())\n   |    \
    \                                                        ^^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `iter` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmp1n4tv6s2.rs:30:60\n   |\n30 |             result\
    \ = result.iter().cloned().flat_map(|x| x.iter().cloned())\n   |             \
    \                                               ^^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `unwrap` found for struct `std::iter::Take` in\
    \ the current scope\n  --> /tmp/tmp1n4tv6s2.rs:33:71\n   |\n33 |             let\
    \ mut divisor = operand.iter().cloned().skip(1).take(1).unwrap().clone();\n  \
    \ |                                                                       ^^^^^^\
    \ method not found in `std::iter::Take<Skip<Cloned<std::slice::Iter<'_, isize>>>>`\n\
    \nerror[E0599]: no method named `unwrap` found for struct `std::iter::Take` in\
    \ the current scope\n  --> /tmp/tmp1n4tv6s2.rs:34:72\n   |\n34 |             let\
    \ mut quotient = operand.iter()."
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 1;\n    for &op in operator\
    \ {\n        result *= operand.last().unwrap() * (&op as isize);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcwz4mvqw.rs:21:9\n   |\n\
    21 |     for &op in operator {\n   |         ^^^    -------- this expression has\
    \ type `Option<String>`\n   |         |\n   |         expected struct `String`,\
    \ found reference\n   |         help: you can probably remove the explicit borrow:\
    \ `op`\n   |\n   = note: expected struct `String`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut total_value = 0;\n    let mut operators_used\
    \ = 0;\n    for i in 0..operand.len() {\n        if operator == operators[operators_used]\
    \ {\n            total_value += operand[i];\n            operators_used++;\n \
    \       } else {\n            if operators_used > 0 {\n                total_value\
    \ += do_algebra(operators[operators_used], operand.iter().take(i + 1).collect());\n\
    \            }\n            total_value += operand[i];\n        }\n    }\n   \
    \ total_value\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpyjimczsu.rs:25:27\n\
    \   |\n25 |             operators_used++;\n   |                           ^^ not\
    \ a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n25 |       \
    \      { let tmp = operators_used; operators_used += 1; tmp };\n   |         \
    \    +++++++++++               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n25 -            \
    \ operators_used++;\n25 +             operators_used += 1;\n   | \n\nerror[E0425]:\
    \ cannot find value `operators` in this scope\n  --> /tmp/tmpyjimczsu.rs:23:24\n\
    \   |\n23 |         if operator == operators[operators_used] {\n   |         \
    \               ^^^^^^^^^ help: a local variable with a similar name exists: `operator`\n\
    \nerror[E0425]: cannot find value `operators` in this scope\n  --> /tmp/tmpyjimczsu.rs:28:43\n\
    \   |\n28 |                 total_value += do_algebra(operators[operators_used],\
    \ operand.iter().take(i + 1).collect());\n   |                               \
    \            ^^^^^^^^^ help: a local variable with a similar name exists: `operator`\n\
    \nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpyjimczsu.rs:28:70\n     |\n\
    28   |                 total_value += do_algebra(operators[operators_used], operand.iter().take(i\
    \ + 1).collect());\n     |                                ----------         \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |            \
    \                    |\n     |                                required by a bound\
    \ introduced by this call\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = operand.to_owned();\n\
    \n    for op in operator {\n        let mut stack: Vec<isize> = stack;\n     \
    \   match op {\n            \"+\" => {\n                let top = stack.pop().unwrap();\n\
    \                let bottom = stack.pop().unwrap();\n                stack.push(top\
    \ + bottom)\n            }\n            \"-\" => {\n                let top =\
    \ stack.pop().unwrap();\n                let bottom = stack.pop().unwrap();\n\
    \                stack.push(top - bottom)\n            }\n            \"*\" =>\
    \ {\n                let top = stack.pop().unwrap();\n                let bottom\
    \ = stack.pop().unwrap();\n                stack.push(top * bottom)\n        \
    \    }\n            \"//\" => {\n                let top = stack.pop().unwrap();\n\
    \                let bottom = stack.pop().unwrap();\n                stack.push(top\
    \ / bottom)\n            }\n            \"**\" => {\n                let top =\
    \ stack.pop().unwrap();\n                let bottom = stack.pop().unwrap();\n\
    \                stack.push(top ** bottom)\n            }\n            _ => panic!()\n\
    \        }\n    }\n    stack.pop()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe0cvs345.rs:25:13\n   |\n\
    24 |         match op {\n   |               -- this expression has type `String`\n\
    25 |             \"+\" => {\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe0cvs345.rs:30:13\n\
    \   |\n24 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n30 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe0cvs345.rs:35:13\n\
    \   |\n24 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n35 |             \"*\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe0cvs345.rs:40:13\n\
    \   |\n24 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n40 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe0cvs345.rs:45:13\n\
    \   |\n24 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n45 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpe0cvs345.rs:48:33\n   |\n48 |                 stack.push(top **\
    \ bottom)\n   |                                 ^^^^^^^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe0cvs345.rs:53:5\n   |\n19 | fn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n   |                                      \
    \                        ----- expected `isize` because of return type\n...\n\
    53 |     stack.pop()\n   |     ^^^^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<isize>`\n\
    \nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut total_operand = operand.first().unwrap();\n\
    \    for op in &operator {\n        let mut operand2 = operand.last().unwrap();\n\
    \        let mut operand2_factor = 1;\n        while operand2.is_some() {\n  \
    \          let mut operand2_factor = operand2_factor.pow(op);\n            operand2\
    \ = operand2.unwrap();\n        }\n        total_operand = total_operand * (operand2_factor\
    \ as isize);\n    }\n    total_operand\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_some` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmplt7c6vg5.rs:24:24\n   |\n24 |         while\
    \ operand2.is_some() {\n   |                        ^^^^^^^ method not found in\
    \ `&isize`\n\nerror[E0689]: can't call method `pow` on ambiguous numeric type\
    \ `{integer}`\n  --> /tmp/tmplt7c6vg5.rs:25:55\n   |\n25 |             let mut\
    \ operand2_factor = operand2_factor.pow(op);\n   |                           \
    \                            ^^^\n   |\nhelp: you must specify a type for this\
    \ binding, like `i32`\n   |\n23 |         let mut operand2_factor: i32 = 1;\n\
    \   |             ~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0599]: no method named `unwrap`\
    \ found for reference `&isize` in the current scope\n  --> /tmp/tmplt7c6vg5.rs:26:33\n\
    \   |\n26 |             operand2 = operand2.unwrap();\n   |                  \
    \               ^^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplt7c6vg5.rs:28:25\n   |\n20 |     let mut total_operand\
    \ = operand.first().unwrap();\n   |                             ------------------------\
    \ expected due to this value\n...\n28 |         total_operand = total_operand\
    \ * (operand2_factor as isize);\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found `isize`\n   |                         help: consider borrowing here: `&(total_operand\
    \ * (operand2_factor as isize))`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplt7c6vg5.rs:30:5\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                              ----- expected\
    \ `isize` because of return type\n...\n30 |     total_operand\n   |     ^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n30 |     *total_operand\n   |     +\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599, E0689.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() == 1 {\n        return\
    \ operand.iter().sum();\n    }\n\n    if operator.len() == 2 {\n        let mut\
    \ total = 0;\n\n        // add up the operands until we get to the final value\n\
    \        for op in operator.iter() {\n            total += operand\n         \
    \       .iter()\n                .take_while(|i| i == op)\n                .sum()\n\
    \        }\n\n        return total;\n    }\n\n    if operator.len() == 3 {\n \
    \       let mut total = 0;\n\n        // add up the operands until we get to the\
    \ final value\n        for op in operator.iter() {\n            total += operand\n\
    \                .iter()\n                .take_while(|i| i == op)\n         \
    \       .sum()\n        }\n\n        // add up the rest of the operands minus\
    \ 1\n        let mut rest = operand\n            .iter()\n            .skip(operator.len())\n\
    \            .sum();\n\n        // multiply them all together, then add the final\
    \ value\n        total *= rest;\n        total += operand.iter().last().sum();\n\
    \n        return total;\n    }\n\n    println!(\"invalid number of operators\"\
    );\n    -1\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `String`\n  --> /tmp/tmptp41c6do.rs:31:35\n\
    \   |\n31 |                 .take_while(|i| i == op)\n   |                   \
    \                ^^ no implementation for `&isize == String`\n   |\n   = help:\
    \ the trait `PartialEq<String>` is not implemented for `&isize`\n   = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \   = note: required because of the requirements on the impl of `PartialEq<&String>`\
    \ for `&&isize`\n\nerror[E0277]: can't compare `&isize` with `String`\n  --> /tmp/tmptp41c6do.rs:45:35\n\
    \   |\n45 |                 .take_while(|i| i == op)\n   |                   \
    \                ^^ no implementation for `&isize == String`\n   |\n   = help:\
    \ the trait `PartialEq<String>` is not implemented for `&isize`\n   = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \   = note: required because of the requirements on the impl of `PartialEq<&String>`\
    \ for `&&isize`\n\nerror[E0599]: `Option<&isize>` is not an iterator\n   --> /tmp/tmptp41c6do.rs:57:40\n\
    \    |\n57  |           total += operand.iter().last().sum();\n    |         \
    \                                 ^^^ `Option<&isize>` is not an iterator\n  \
    \  |\n    = note: the following trait bounds were not satisfied:\n           \
    \ `Option<&isize>: Iterator`\n            which is required by `&mut Option<&isize>:\
    \ Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack = Vec::new();\n\n    for\
    \ v in operand {\n        let mut op = match operator.to_lowercase().last() {\n\
    \            \"+\" => ops::Addition::Add,\n            \"-\" => ops::Subtraction::Subtract,\n\
    \            \"*\" => ops::Multiplication::Multiply,\n            \"//\" => ops::FloorDivide::Divide,\n\
    \            \"**\" => ops::Power::Power,\n            _ => {\n              \
    \  println!(\"Invalid Operator {}\", v);\n                return -1;\n       \
    \     }\n        };\n\n        stack.push(op(v));\n    }\n\n    match stack.pop()\
    \ {\n        ops::Addition::Add => return 0,\n        ops::Subtraction::Subtract\
    \ => return 0,\n        ops::Multiplication::Multiply => return 0,\n        ops::FloorDivide::Divide\
    \ => return 0,\n        ops::Power::Power => return 0,\n        _ => panic!(\"\
    Stack exhausted\"),\n    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `ops`\n\
    \  --> /tmp/tmpedn9c_wt.rs:24:20\n   |\n24 |             \"+\" => ops::Addition::Add,\n\
    \   |                    ^^^ use of undeclared crate or module `ops`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `ops`\n  --> /tmp/tmpedn9c_wt.rs:25:20\n\
    \   |\n25 |             \"-\" => ops::Subtraction::Subtract,\n   |           \
    \         ^^^ use of undeclared crate or module `ops`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared crate or module `ops`\n  --> /tmp/tmpedn9c_wt.rs:26:20\n\
    \   |\n26 |             \"*\" => ops::Multiplication::Multiply,\n   |        \
    \            ^^^ use of undeclared crate or module `ops`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared crate or module `ops`\n  --> /tmp/tmpedn9c_wt.rs:27:21\n\
    \   |\n27 |             \"//\" => ops::FloorDivide::Divide,\n   |            \
    \         ^^^ use of undeclared crate or module `ops`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared crate or module `ops`\n  --> /tmp/tmpedn9c_wt.rs:28:21\n\
    \   |\n28 |             \"**\" => ops::Power::Power,\n   |                   \
    \  ^^^ use of undeclared crate or module `ops`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared crate or module `ops`\n  --> /tmp/tmpedn9c_wt.rs:39:9\n  \
    \ |\n39 |         ops::Addition::Add => return 0,\n   |         ^^^ use of undeclared\
    \ crate or module `ops`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ crate or module `ops`\n  --> /tmp/tmpedn9c_wt.rs:40:9\n   |\n40 |         ops::Subtraction::Subtract\
    \ => return 0,\n   |         ^^^ use of undeclared crate or module `ops`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `ops`\n  --> /tmp/tmpedn9c_wt.rs:41:9\n\
    \   |\n41 |         ops::Multiplication::Multiply => return 0,\n   |         ^^^\
    \ use of undeclared crate or module `ops`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared crate or module `ops`\n  --> /tmp/tmpedn9c_wt.rs:42:9\n  \
    \ |\n42 |         ops::FloorDivide::Divide => return 0,\n   |         ^^^ use\
    \ of undeclared crate or module `ops`\n\nerror[E0433]: failed to resolve:"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut total: isize = 0;\n    for operation,\
    \ i in operator.iter().enumerate() {\n        total += operand[i] as isize * (operand[i\
    \ - 1] as isize).pow((1 as isize).pow(i))\n    }\n    total\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: unexpected `,` in pattern\n  --> /tmp/tmpdkzrqnwv.rs:21:18\n   |\n\
    21 |     for operation, i in operator.iter().enumerate() {\n   |             \
    \     ^\n   |\nhelp: try adding parentheses to match on a tuple\n   |\n21 |  \
    \   for (operation, i) in operator.iter().enumerate() {\n   |         +      \
    \      +\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operand.len() < 2 {\n        println!(\"\
    ERROR: Invalid input.\");\n        0\n    }\n    let mut left_index = operand.len()\
    \ - 1;\n    let mut right_index = operand.len() - 1;\n    let mut result = 0;\n\
    \n    while left_index >= 0 {\n        // println!(\"left_index = {}, right_index\
    \ = {}\", left_index, right_index);\n        let left_value = operand[left_index];\n\
    \        let right_value = operand[right_index];\n        \n        let operator\
    \ = operator[left_index];\n        \n        match operator {\n            \"\
    +\" => {\n                result = result + left_value;\n            }\n     \
    \       \"*\" => {\n                result = result * left_value;\n          \
    \  }\n            \"-\" => {\n                result = result - left_value;\n\
    \            }\n            \"//\" => {\n                result = result // left_value;\n\
    \            }\n            \"**\" => {\n                result = result ** left_value;\n\
    \            }\n            _ => {\n                println!(\"ERROR: Invalid\
    \ input.\");\n                0\n            }\n        };\n        \n       \
    \ if left_index != right_index {\n            left_index--;\n        }\n     \
    \   else {\n            right_index--;\n        }\n    }\n    if left_index >=\
    \ 0 {\n        let left_value = operand[left_index];\n        \n        match\
    \ operator {\n            \"+\" => {\n                result = result + left_value;\n\
    \            }\n            \"*\" => {\n                result = result * left_value;\n\
    \            }\n            \"-\" => {\n                result = result - left_value;\n\
    \            }\n            \"//\" => {\n                result = result // left_value;\n\
    \            }\n            \"**\" => {\n                result = result ** left_value;\n\
    \            }\n            _ => {\n                println!(\"ERROR: Invalid\
    \ input.\");\n                0\n            }\n        };\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpe982lwv7.rs:58:25\n\
    \   |\n58 |             left_index--;\n   |                         ^ expected\
    \ expression\n\nerror: expected expression, found `;`\n  --> /tmp/tmpe982lwv7.rs:61:26\n\
    \   |\n61 |             right_index--;\n   |                          ^ expected\
    \ expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe982lwv7.rs:22:9\n\
    \   |\n20 | /     if operand.len() < 2 {\n21 | |         println!(\"ERROR: Invalid\
    \ input.\");\n22 | |         0\n   | |         ^ expected `()`, found integer\n\
    23 | |     }\n   | |_____- expected this to be `()`\n   |\nhelp: you might have\
    \ meant to return this value\n   |\n22 |         return 0;\n   |         ++++++\
    \  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe982lwv7.rs:36:13\n   |\n\
    35 |         match operator {\n   |               -------- this expression has\
    \ type `String`\n36 |             \"+\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe982lwv7.rs:39:13\n\
    \   |\n35 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n39 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe982lwv7.rs:42:13\n\
    \   |\n35 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n42 |             \"-\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe982lwv7.rs:45:13\n\
    \   |\n35 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n45 |             \"//\" => {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpe982lwv7.rs:48:13\n   |\n35 |         match operator {\n   |   \
    \            -------- this expression has type `String`\n...\n48 |           \
    \  \"**\" => {\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpe982lwv7.rs:49:34\n\
    \   |\n49 |              "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut left_operand: Vec<isize> = operand.clone();\n\
    \    let mut right_operand: Vec<isize> = operand.clone();\n\n    // Go through\
    \ each operator and evaluate left and right operands.\n    for (i, operator) in\
    \ operator.iter().enumerate() {\n        match operator {\n            \"+\" =>\
    \ left_operand.push(left_operand.last().unwrap() + right_operand.last()),\n  \
    \          \"-\" => left_operand.push(left_operand.last().unwrap() - right_operand.last()),\n\
    \            \"*\" => left_operand.push(left_operand.last().unwrap() * right_operand.last()),\n\
    \            \"/\" => left_operand.push(left_operand.last().unwrap() / (right_operand.last())),\n\
    \            \"**\" => left_operand.push(left_operand.last().unwrap() ** (right_operand.last())),\n\
    \            _ => panic!(\"Unknown operator: {}\", operator)\n        }\n    \
    \    right_operand.pop();\n    }\n    // Now we have the left and right operands\
    \ we need.\n    // We need to add the right operand to the result of the left\
    \ operand \n    // after each operator is evaluated.\n    for operand in left_operand.iter()\
    \ {\n        *result += operand;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `result` in this scope\n  --> /tmp/tmp3ipaiuzy.rs:39:10\n\
    \   |\n39 |         *result += operand;\n   |          ^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `result` in this scope\n  --> /tmp/tmp3ipaiuzy.rs:41:5\n\
    \   |\n41 |     result\n   |     ^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3ipaiuzy.rs:26:13\n   |\n25 |         match\
    \ operator {\n   |               -------- this expression has type `&String`\n\
    26 |             \"+\" => left_operand.push(left_operand.last().unwrap() + right_operand.last()),\n\
    \   |             ^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected reference `&String`\n              found reference `&'static str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3ipaiuzy.rs:27:13\n   |\n25 |\
    \         match operator {\n   |               -------- this expression has type\
    \ `&String`\n26 |             \"+\" => left_operand.push(left_operand.last().unwrap()\
    \ + right_operand.last()),\n27 |             \"-\" => left_operand.push(left_operand.last().unwrap()\
    \ - right_operand.last()),\n   |             ^^^ expected struct `String`, found\
    \ `str`\n   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3ipaiuzy.rs:28:13\n\
    \   |\n25 |         match operator {\n   |               -------- this expression\
    \ has type `&String`\n...\n28 |             \"*\" => left_operand.push(left_operand.last().unwrap()\
    \ * right_operand.last()),\n   |             ^^^ expected struct `String`, found\
    \ `str`\n   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3ipaiuzy.rs:29:13\n\
    \   |\n25 |         match operator {\n   |               -------- this expression\
    \ has type `&String`\n...\n29 |             \"/\" => left_operand.push(left_operand.last().unwrap()\
    \ / (right_operand.last())),\n   |             ^^^ expected struct `String`, found\
    \ `str`\n   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static s"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() != operand.len() - 1\
    \ {\n        panic!(\"Invalid operator and operand lengths.\")\n    }\n    \n\
    \    match operator.first() {\n        Some(operator_name) => {\n            if\
    \ !operand.iter().all(|&i| i.is_power_of_two()) {\n                panic!(\"Invalid\
    \ operand. Power of two required.\")\n            }\n            \n          \
    \  match operator {\n                [\"+\"] => operand.iter().map(|&i| i + i).sum(),\n\
    \                [\"-\"] => operand.iter().map(|&i| i - i).sum(),\n          \
    \      [\"*\"] => operand.iter().map(|&i| i * i).sum(),\n                [\"//\"\
    ] => operand.iter().map(|&i| i / i).sum(),\n                [\"**\"] => operand.iter().map(|&i|\
    \ (i as isize).pow((i as isize).log(10) as isize)).sum(),\n                _ =>\
    \ panic!(\"Invalid operator: {}\", operator_name),\n            }\n        }\n\
    \        _ => panic!(\"Invalid operator: {}\", operator[0]),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_power_of_two` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmp8abqvurs.rs:26:43\n   |\n26 |          \
    \   if !operand.iter().all(|&i| i.is_power_of_two()) {\n   |                 \
    \                          ^^^^^^^^^^^^^^^ method not found in `isize`\n\nerror[E0529]:\
    \ expected an array or slice, found `Vec<String>`\n  --> /tmp/tmp8abqvurs.rs:31:17\n\
    \   |\n30 |             match operator {\n   |                   -------- help:\
    \ consider slicing here: `operator[..]`\n31 |                 [\"+\"] => operand.iter().map(|&i|\
    \ i + i).sum(),\n   |                 ^^^^^ pattern cannot match with input type\
    \ `Vec<String>`\n\nerror[E0529]: expected an array or slice, found `Vec<String>`\n\
    \  --> /tmp/tmp8abqvurs.rs:32:17\n   |\n30 |             match operator {\n  \
    \ |                   -------- help: consider slicing here: `operator[..]`\n31\
    \ |                 [\"+\"] => operand.iter().map(|&i| i + i).sum(),\n32 |   \
    \              [\"-\"] => operand.iter().map(|&i| i - i).sum(),\n   |        \
    \         ^^^^^ pattern cannot match with input type `Vec<String>`\n\nerror[E0529]:\
    \ expected an array or slice, found `Vec<String>`\n  --> /tmp/tmp8abqvurs.rs:33:17\n\
    \   |\n30 |             match operator {\n   |                   -------- help:\
    \ consider slicing here: `operator[..]`\n...\n33 |                 [\"*\"] =>\
    \ operand.iter().map(|&i| i * i).sum(),\n   |                 ^^^^^ pattern cannot\
    \ match with input type `Vec<String>`\n\nerror[E0529]: expected an array or slice,\
    \ found `Vec<String>`\n  --> /tmp/tmp8abqvurs.rs:34:17\n   |\n30 |           \
    \  match operator {\n   |                   -------- help: consider slicing here:\
    \ `operator[..]`\n...\n34 |                 [\"//\"] => operand.iter().map(|&i|\
    \ i / i).sum(),\n   |                 ^^^^^^ pattern cannot match with input type\
    \ `Vec<String>`\n\nerror[E0529]: expected an array or slice, found `Vec<String>`\n\
    \  --> /tmp/tmp8abqvurs.rs:35:17\n   |\n30 |             match operator {\n  \
    \ |                   -------- help: consider slicing here: `operator[..]`\n...\n\
    35 |                 [\"**\"] => operand.iter("
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() != operand.len() - 1\
    \ {\n        panic!(\"Length of operator list is {}, not equal to length of operand\
    \ list minus one: {}\", operator.len(), operand.len() - 1);\n    }\n\n    let\
    \ mut result = 0;\n\n    for &item in operand {\n        result = do_op(result,\
    \ operator, item);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `do_op` in this scope\n  --> /tmp/tmpfqc8p2ep.rs:27:18\n\
    \   |\n27 |         result = do_op(result, operator, item);\n   |            \
    \      ^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpfqc8p2ep.rs:26:9\n   |\n26 |     for &item in operand {\n   |      \
    \   ^^^^^    ------- this expression has type `Option<isize>`\n   |         |\n\
    \   |         expected `isize`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `item`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() != operand.len() - 1\
    \ {\n        println!(\"Error: operator list length does not match operand list\
    \ length\");\n        0\n    }\n\n    if !operator.is_empty() {\n        let mut\
    \ result = operand[0];\n        for i in 1..operator.len() {\n            result\
    \ += operand[i].powi(operator[i]);\n        }\n        result\n    } else {\n\
    \        operand[0]\n    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx81if_yv.rs:22:9\n   |\n\
    20 | /     if operator.len() != operand.len() - 1 {\n21 | |         println!(\"\
    Error: operator list length does not match operand list length\");\n22 | |   \
    \      0\n   | |         ^ expected `()`, found integer\n23 | |     }\n   | |_____-\
    \ expected this to be `()`\n   |\nhelp: you might have meant to return this value\n\
    \   |\n22 |         return 0;\n   |         ++++++  +\n\nerror[E0599]: no method\
    \ named `powi` found for type `isize` in the current scope\n  --> /tmp/tmpx81if_yv.rs:28:34\n\
    \   |\n28 |             result += operand[i].powi(operator[i]);\n   |        \
    \                          ^^^^ help: there is an associated function with a similar\
    \ name: `pow`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() != operand.len() - 1\
    \ {\n        panic!(\"Length of operator list is {}. Length of operand list is\
    \ {}.\", operator.len(), operand.len());\n    }\n\n    let mut result = 0;\n \
    \   for &x in operand {\n        result = result + operator[0] * (x as isize)\
    \ * (x as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxwzgfh_z.rs:25:9\n   |\n\
    25 |     for &x in operand {\n   |         ^^    ------- this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `x`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror[E0369]:\
    \ cannot multiply `String` by `isize`\n  --> /tmp/tmpxwzgfh_z.rs:26:39\n   |\n\
    26 |         result = result + operator[0] * (x as isize) * (x as isize);\n  \
    \ |                           ----------- ^ ------------ isize\n   |         \
    \                  |\n   |                           String\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    debug_assert!(operator.is_len_of(operand.len()\
    \ - 1));\n    debug_assert!(operand.is_len_of(operator.len()));\n    debug_assert!(operator.iter().all(|&v|\
    \ v == \"+\" || v == \"-\" || v == \"*\" || v == \"/\" || v == \"**\"));\n   \
    \ let mut expr = 0;\n    for i in 0..operand.len() - 1 {\n        expr += operand[i]\
    \ * operator[i + 1..].iter().cloned().sum();\n    }\n    expr\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_len_of` found for struct `Vec<String>`\
    \ in the current scope\n  --> /tmp/tmpn3nwoaq4.rs:20:28\n   |\n20 |     debug_assert!(operator.is_len_of(operand.len()\
    \ - 1));\n   |                            ^^^^^^^^^ method not found in `Vec<String>`\n\
    \nerror[E0599]: no method named `is_len_of` found for struct `Vec<isize>` in the\
    \ current scope\n  --> /tmp/tmpn3nwoaq4.rs:21:27\n   |\n21 |     debug_assert!(operand.is_len_of(operator.len()));\n\
    \   |                           ^^^^^^^^^ method not found in `Vec<isize>`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n\n    // Initialize\
    \ result to zero\n    for a in operand {\n        result += a;\n    }\n\n    //\
    \ Loop through operator list to do the math operation\n    for op in operator\
    \ {\n        switch op {\n            case \"-\" => {\n                for a in\
    \ operand {\n                    result = result - a;\n                }\n   \
    \         }\n            case \"+\" => {\n                for a in operand {\n\
    \                    result = result + a;\n                }\n            }\n\
    \            case \"*\" => {\n                for a in operand {\n           \
    \         result = result * a;\n                }\n            }\n           \
    \ case \"//\" => {\n                for a in operand {\n                    result\
    \ = result / a;\n                }\n            }\n            case \"**\" =>\
    \ {\n                for a in operand {\n                    result = result **\
    \ a;\n                }\n            }\n        }\n    }\n\n    result\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found `op`\n  --> /tmp/tmpkwo59nbg.rs:29:16\n   |\n29 |         switch op {\n\
    \   |                ^^ expected one of 8 possible tokens\n\nerror: aborting due\
    \ to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    assert!(operator.len() > 0);\n    assert!(operator.len()\
    \ <= 2);\n    assert!(operand.len() > 0);\n    assert!(operand.len() >= 2);\n\n\
    \    let mut result = operand[0];\n    for i in 1 .. operator.len() {\n      \
    \  result = operator[i] + result;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpva9rlxti.rs:27:32\n   |\n\
    27 |         result = operator[i] + result;\n   |                            \
    \    ^^^^^^ expected `&str`, found `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpva9rlxti.rs:27:18\n   |\n25 |     let mut result = operand[0];\n\
    \   |                      ---------- expected due to this value\n26 |     for\
    \ i in 1 .. operator.len() {\n27 |         result = operator[i] + result;\n  \
    \ |                  ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for element\
    \ in operand.iter().skip(1) {\n        let operator = operator[0];\n        match\
    \ operator {\n            \"+\" => result += element,\n            \"-\" => result\
    \ -= element,\n            \"*\" => result *= element,\n            \"/\" => result\
    \ /= element,\n            \"//\" => result //= element,\n            \"**\" =>\
    \ result **= element,\n            _ => panic!(\"unsupported op: {}\", operator),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `\"**\"`\n  --> /tmp/tmp9nffu880.rs:29:13\n   |\n28 |             \"//\"\
    \ => result //= element,\n   |                  --       - expected one of 8 possible\
    \ tokens\n   |                  |\n   |                  while parsing the `match`\
    \ arm starting here\n29 |             \"**\" => result **= element,\n   |    \
    \         ^^^^ unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9nffu880.rs:24:13\n\
    \   |\n23 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n24 |             \"+\" => result += element,\n   |      \
    \       ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9nffu880.rs:25:13\n   |\n23 |         match operator {\n\
    \   |               -------- this expression has type `String`\n24 |         \
    \    \"+\" => result += element,\n25 |             \"-\" => result -= element,\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9nffu880.rs:26:13\n   |\n23 |         match\
    \ operator {\n   |               -------- this expression has type `String`\n\
    ...\n26 |             \"*\" => result *= element,\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9nffu880.rs:27:13\n\
    \   |\n23 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n27 |             \"/\" => result /= element,\n   | \
    \            ^^^ expected struct `String`, found `&str`\n\nerror: aborting due\
    \ to 5 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = vec![];\n \
    \   let mut op: isize = 0;\n    let mut num: isize = 0;\n\n    loop {\n      \
    \  match op {\n            0 => num += operand.pop(),\n            1 => num -=\
    \ operand.pop(),\n            2 => num *= operand.pop(),\n            3 => num\
    \ += operand.pop() / operand.pop(),\n            4 => num += operand.pop() **\
    \ operand.pop(),\n            _ => panic!(),\n        }\n        match operator.pop()\
    \ {\n            \"+\" => stack.pop().unwrap() += num,\n            \"-\" => stack.pop().unwrap()\
    \ -= num,\n            \"*\" => stack.pop().unwrap() *= num,\n            \"/\"\
    \ => stack.pop().unwrap() += num / operand.pop(),\n            \"**\" => stack.pop().unwrap()\
    \ += num ** operand.pop(),\n            _ => panic!(),\n        }\n        stack.pop().unwrap()\n\
    \    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `Option<isize>` to `isize`\n  --> /tmp/tmp0yly09zr.rs:26:22\n\
    \   |\n26 |             0 => num += operand.pop(),\n   |                     \
    \ ^^ no implementation for `isize += Option<isize>`\n   |\n   = help: the trait\
    \ `AddAssign<Option<isize>>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot subtract-assign\
    \ `Option<isize>` from `isize`\n  --> /tmp/tmp0yly09zr.rs:27:22\n   |\n27 |  \
    \           1 => num -= operand.pop(),\n   |                      ^^ no implementation\
    \ for `isize -= Option<isize>`\n   |\n   = help: the trait `SubAssign<Option<isize>>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `SubAssign<Rhs>`:\n             <f32 as SubAssign<&f32>>\n           \
    \  <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n             <f64\
    \ as SubAssign>\n             <i128 as SubAssign<&i128>>\n             <i128 as\
    \ SubAssign>\n             <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot multiply-assign `isize` by `Option<isize>`\n\
    \  --> /tmp/tmp0yly09zr.rs:28:22\n   |\n28 |             2 => num *= operand.pop(),\n\
    \   |                      ^^ no implementation for `isize *= Option<isize>`\n\
    \   |\n   = help: the trait `MulAssign<Option<isize>>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `MulAssign<Rhs>`:\n\
    \             <f32 as MulAssign<&f32>>\n             <f32 as MulAssign>\n    \
    \         <f64 as MulAssign<&f64>>\n             <f64 as MulAssign>\n        \
    \     <i128 as MulAssign<&i128>>\n             <i128 as MulAssign>\n         \
    \    <i16 as MulAssign<&i16>>\n             <i16 as MulAssign>\n           and\
    \ 20 othe"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let len = operator.len();\n    if len ==\
    \ 0 {\n        0\n    } else if len == 1 {\n        operand[0]\n    } else if\
    \ len == 2 {\n        operand[0] * operand[1]\n    } else if len == 3 {\n    \
    \    operand[0] * operand[1] * operand[2]\n    } else if len == 4 {\n        operand[0]\
    \ * operand[1] * operand[2] * operand[3]\n    } else if len == 5 {\n        operand[0]\
    \ * operand[1] * operand[2] * operand[3] * operand[4]\n    } else if len == 6\
    \ {\n        operand[0] * operand[1] * operand[2] * operand[3] * operand[4] *\
    \ operand[5]\n    } else if len == 7 {\n        operand[0] * operand[1] * operand[2]\
    \ * operand[3] * operand[4] * operand[5] * operand[6]\n    } else if len == 8\
    \ {\n        operand[0] * operand[1] * operand[2] * operand[3] * operand[4] *\
    \ operand[5] * operand[6] * operand[7]\n    } else if len == 9 {\n        operand[0]\
    \ * operand[1] * operand[2] * operand[3] * operand[4] * operand[5] * operand[6]\
    \ * operand[7] * operand[8]\n    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0317]: `if` may be missing an `else` clause\n  --> /tmp/tmpr1p_c6or.rs:39:12\n\
    \   |\n39 |       } else if len == 9 {\n   |  ____________^\n40 | |         operand[0]\
    \ * operand[1] * operand[2] * operand[3] * operand[4] * operand[5] * operand[6]\
    \ * operand[7] * operand[8]\n   | |         ------------------------------------------------------------------------------------------------------------------\
    \ found here\n41 | |     }\n   | |_____^ expected `()`, found `isize`\n   |\n\
    \   = note: `if` expressions without `else` evaluate to `()`\n   = help: consider\
    \ adding an `else` block that evaluates to the expected type\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0317`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    match operator.len() {\n        1 => {\n\
    \            let mut sum = 0;\n            for element in operand {\n        \
    \        sum += element;\n            }\n            return sum;\n        }\n\
    \        _ => {\n            let mut sum = 0;\n            for operator in operator\
    \ {\n                sum += do_algebra(vec![operator], operand);\n           \
    \ }\n            return sum;\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `operand`\n  --> /tmp/tmp56r7ock3.rs:31:51\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                      ------- move occurs because `operand`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n31 |\
    \                 sum += do_algebra(vec![operator], operand);\n   |          \
    \                                         ^^^^^^^ value moved here, in previous\
    \ iteration of loop\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for i in &operator {\n        result = operators.binary_op(result, i);\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `operators` in this scope\n  --> /tmp/tmp5_hcck77.rs:22:18\n\
    \   |\n22 |         result = operators.binary_op(result, i);\n   |           \
    \       ^^^^^^^^^ help: a local variable with a similar name exists: `operator`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5_hcck77.rs:24:5\n   |\n19 | fn\
    \ do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n   |    \
    \                                                          ----- expected `isize`\
    \ because of return type\n...\n24 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<&isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().cloned().collect::<Vec<isize>>().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().cloned().collect::<Vec<isize>>().sum(),\n            \"-\" =>\
    \ result -= operand.iter().cloned().collect::<Vec<isize>>().sum(),\n         \
    \   \"*\" => result *= operand.iter().cloned().collect::<Vec<isize>>().sum(),\n\
    \            \"//\" => result /= operand.iter().cloned().collect::<Vec<isize>>().sum(),\n\
    \            \"**\" => result **= operand.iter().cloned().collect::<Vec<isize>>().sum(),\n\
    \            _ => panic!(\"Operator not found\")\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmppoxblfk5.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().cloned().collect::<Vec<isize>>().sum(),\n\
    \   |                  --         ^^ expected expression\n   |               \
    \   |\n   |                  while parsing the `match` arm starting here\n\nerror[E0599]:\
    \ `Vec<isize>` is not an iterator\n   --> /tmp/tmppoxblfk5.rs:20:70\n    |\n20\
    \  |       let mut result = operand.iter().cloned().collect::<Vec<isize>>().sum();\n\
    \    |                                                                       \
    \ ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `Vec<isize>: Iterator`\n           \
    \ which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n\
    \            which is required by `&mut [isize]: Iterator`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppoxblfk5.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.iter().cloned().collect::<Vec<isize>>().sum(),\n   |     \
    \        ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppoxblfk5.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.iter().cloned().collect::<Vec<isize>>().sum(),\n24 |     \
    \        \"-\" => result -= operand.iter().cloned().collect::<Vec<isize>>().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppoxblfk5.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result *= operand.iter().cloned().collect::<Vec<isize>>().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppoxblfk5.rs:26:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n26 |   \
    \          \"//\" => result /= operand.iter().cloned().co"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut expr = 0;\n    for i in 0..operand.len()\
    \ - 1 {\n        let op = operator[i];\n        if let Some(op) = Operator::try_from(op)\
    \ {\n            expr += op.eval(&operand[i]);\n        }\n    }\n    expr\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operator`\n  -->\
    \ /tmp/tmp22dq9qkw.rs:23:27\n   |\n23 |         if let Some(op) = Operator::try_from(op)\
    \ {\n   |                           ^^^^^^^^ use of undeclared type `Operator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Find the length of operand\n    let\
    \ mut op_len = operand.len();\n    \n    // For each operator in the operator\
    \ list\n    for &s in operator {\n        // Get the character of the operator\n\
    \        let ch = s.chars().next().unwrap();\n        \n        // If character\
    \ is a minus sign then we need to subtract \n        if ch == '-' {\n        \
    \    op_len = op_len - 1;\n        } else {\n            // Get the index of the\
    \ operator from operand list\n            let index = op_len - operand.len();\n\
    \n            // Get the character from the operand list\n            let ch_1\
    \ = operand[index].chars().next().unwrap();\n            \n            // If the\
    \ character is a * then we need to multiply the operand\n            if ch_1 ==\
    \ '*' {\n                op_len = op_len * operand[index];\n            } else\
    \ {\n                // If the character is a / then we need to floor divide \n\
    \                if ch_1 == '/' {\n                    op_len = op_len / operand[index];\n\
    \                } else {\n                    // If we have already calculated\
    \ the result then just move on\n                    if let Some(result) = &result_value\
    \ {\n                        continue;\n                    }\n              \
    \      \n                    // Find the character from operand list that corresponds\
    \ to the input value\n                    let ch_2 = operand[index + operand.len()].chars().next().unwrap();\n\
    \n                    // If the character is a ** then we need to exponentiate\
    \ the operand\n                    if ch_2 == '**' {\n                       \
    \ op_len = (op_len ** operand[index + operand.len()]);\n                    }\
    \ else {\n                        let num: isize = operand[index];\n         \
    \               // Find the index of the input value from operand list\n     \
    \                   let ind_1 = index + operand.len();\n                     \
    \   let ind_2 = index + operand.len() + 1;\n\n                        // If the\
    \ character is a + then we need to add the operand\n                        if\
    \ ch_1 == '+' {\n                            op_len = op_len + num;\n        \
    \                } else {\n                            if ch_1 == '-' {\n    \
    \                            op_len = op_len - num;\n                        \
    \    } else {\n                                if ch_2 == '+' {\n            \
    \                        op_len = op_len + num;\n                            \
    \    } else {\n                                    if ch_2 == '-' {\n        \
    \                                op_len = op_len - num;\n                    \
    \                } else {\n                                        let num: isize\
    \ = operand[ind_1];\n                                        // Find the index\
    \ of the input value from operand list\n                                     \
    \   let ind_3 = ind_1 + operand.len();\n                                     \
    \   let ind_4 = ind_1 + operand.len() + 1;\n\n                               \
    \         if ch_1 == '*' {\n                                            op_len\
    \ = op_len * num;\n                                        } else {\n        \
    \                                    if ch_1 == '/' {\n                      \
    \                          op_len = op_len / num;\n                          \
    \                  } else {\n                                                if\
    \ ch_2 == '*' {\n                                                    op_len =\
    \ op_len * num;\n                                                } else {\n  \
    \                              \n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpodtdv7fd.rs:55:32\n\
    \   |\n55 |                     if ch_2 == '**' {\n   |                      \
    \          ^^^^\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n55 |                     if ch_2 == \"**\" {\n   |           \
    \                     ~~~~\n\nerror: this file contains an unclosed delimiter\n\
    \  --> /tmp/tmpodtdv7fd.rs:98:3\n   |\n19 | fn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n   |                                      \
    \                              - unclosed delimiter\n...\n24 |     for &s in operator\
    \ {\n   |                        - unclosed delimiter\n...\n31 |         } else\
    \ {\n   |                - unclosed delimiter\n...\n41 |             } else {\n\
    \   |                    - unclosed delimiter\n...\n45 |                 } else\
    \ {\n   |                        - unclosed delimiter\n...\n57 |             \
    \        } else {\n   |                            - unclosed delimiter\n...\n\
    66 |                         } else {\n   |                                - unclosed\
    \ delimiter\n...\n69 |                             } else {\n   |            \
    \                        - unclosed delimiter\n...\n72 |                     \
    \            } else {\n   |                                        - unclosed\
    \ delimiter\n...\n75 |                                     } else {\n   |    \
    \                                        - unclosed delimiter\n...\n83 |     \
    \                                    } else {\n   |                          \
    \                      - unclosed delimiter\n...\n86 |                       \
    \                      } else {\n   |                                        \
    \            - unclosed delimiter\n...\n89 |                                 \
    \                } else {\n   |                                              \
    \          - this delimiter might not be properly closed...\n90 |            \
    \                     \n91 | }\n   | - ...as it matches this but it has different\
    \ indentation\n...\n98 | }\n   |   ^\n\nerror[E0425]: cannot find value `result_value`"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..operand.len()\
    \ {\n        sum += operator[i..].iter().cloned().sum()\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpbv8v50dd.rs:22:13\n\
    \   |\n22 |         sum += operator[i..].iter().cloned().sum()\n   |         \
    \    ^^ cannot infer type\n   |\nhelp: consider specifying the type argument in\
    \ the method call\n   |\n22 |         sum += operator[i..].iter().cloned().sum::<S>()\n\
    \   |                                                 +++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut op = operator[0];\n    let mut\
    \ exp = operand[0];\n    let mut prod = 1;\n    for operand in operand {\n   \
    \     if operand >= 0 {\n            prod = prod * operand;\n        }\n    }\n\
    \    for op in operator {\n        if op == \"+\" {\n            exp = exp + prod;\n\
    \        }\n        if op == \"-\" {\n            exp = exp - prod;\n        }\n\
    \        if op == \"*\" {\n            exp = exp * prod;\n        }\n        if\
    \ op == \"/\" {\n            exp = exp / prod;\n        }\n        if op == \"\
    //\" {\n            exp = exp / prod;\n        }\n        if op == \"**\" {\n\
    \            exp = exp * prod;\n        }\n    }\n    exp\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `op`\n  --> /tmp/tmprvua401l.rs:20:13\n   |\n\
    20 |     let mut op = operator[0];\n   |             ^^ help: if this is intentional,\
    \ prefix it with an underscore: `_op`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmprvua401l.rs:20:9\n\
    \   |\n20 |     let mut op = operator[0];\n   |         ----^^\n   |         |\n\
    \   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0507]: cannot move out of index of `Vec<String>`\n \
    \ --> /tmp/tmprvua401l.rs:20:18\n   |\n20 |     let mut op = operator[0];\n  \
    \ |                  ^^^^^^^^^^^\n   |                  |\n   |              \
    \    move occurs because value has type `String`, which does not implement the\
    \ `Copy` trait\n   |                  help: consider borrowing here: `&operator[0]`\n\
    \nerror: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0507`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut total_result = 0;\n    for i in\
    \ operand.iter() {\n        let mut temp_result = 0;\n        for j in operator.iter()\
    \ {\n            temp_result = temp_result + i as isize * j;\n        }\n    \
    \    total_result = total_result + temp_result;\n    }\n    total_result;\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `isize` by `&String`\n  --> /tmp/tmprovwtyse.rs:24:52\n\
    \   |\n24 |             temp_result = temp_result + i as isize * j;\n   |    \
    \                                                ^ no implementation for `isize\
    \ * &String`\n   |\n   = help: the trait `Mul<&String>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprovwtyse.rs:19:62\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |    ----------                                                ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n...\n28 |     total_result;\n   |      \
    \           - help: remove this semicolon\n\nerror[E0606]: casting `&isize` as\
    \ `isize` is invalid\n  --> /tmp/tmprovwtyse.rs:24:41\n   |\n24 |            \
    \ temp_result = temp_result + i as isize * j;\n   |                          \
    \               -^^^^^^^^^\n   |                                         |\n \
    \  |                                         cannot cast `&isize` as `isize`\n\
    \   |                                         help: dereference the expression:\
    \ `*i`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0606.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for element in\
    \ operator {\n        match element {\n            '+' => {\n                result\
    \ = result + operand.last().unwrap();\n            }\n            '-' => {\n \
    \               result = result - operand.last().unwrap();\n            }\n  \
    \          '*' => {\n                result = result * operand.last().unwrap();\n\
    \            }\n            '/' => {\n                result = result / operand.last().unwrap();\n\
    \            }\n            '%' => {\n                result = result % operand.last().unwrap();\n\
    \            }\n            '^' => {\n                result = result ^ operand.last().unwrap();\n\
    \            }\n            '**' => {\n                result = result ** operand.last().unwrap();\n\
    \            }\n            _ => {\n                return Err(format!(\"The operator\
    \ {} is not valid in algebra\", element));\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpc0xjr1g6.rs:41:13\n\
    \   |\n41 |             '**' => {\n   |             ^^^^\n   |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n   |\n41 |             \"**\" =>\
    \ {\n   |             ~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc0xjr1g6.rs:23:13\n\
    \   |\n22 |         match element {\n   |               ------- this expression\
    \ has type `String`\n23 |             '+' => {\n   |             ^^^ expected\
    \ struct `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc0xjr1g6.rs:26:13\n\
    \   |\n22 |         match element {\n   |               ------- this expression\
    \ has type `String`\n...\n26 |             '-' => {\n   |             ^^^ expected\
    \ struct `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc0xjr1g6.rs:29:13\n\
    \   |\n22 |         match element {\n   |               ------- this expression\
    \ has type `String`\n...\n29 |             '*' => {\n   |             ^^^ expected\
    \ struct `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc0xjr1g6.rs:32:13\n\
    \   |\n22 |         match element {\n   |               ------- this expression\
    \ has type `String`\n...\n32 |             '/' => {\n   |             ^^^ expected\
    \ struct `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc0xjr1g6.rs:35:13\n\
    \   |\n22 |         match element {\n   |               ------- this expression\
    \ has type `String`\n...\n35 |             '%' => {\n   |             ^^^ expected\
    \ struct `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc0xjr1g6.rs:38:13\n\
    \   |\n22 |         match element {\n   |               ------- this expression\
    \ has type `String`\n...\n38 |             '^' => {\n   |             ^^^ expected\
    \ struct `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc0xjr1g6.rs:45:24\n\
    \   |\n45 |                 return Err(format!(\"The operator {} is not valid\
    \ in algebra\", element));\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found enum `Result`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    operator.iter().for_each(|op|\
    \ {\n        match op {\n            \"+\" => {\n                result += operand.iter().sum();\n\
    \            }\n            \"-\" => {\n                result -= operand.iter().sum();\n\
    \            }\n            \"*\" => {\n                result *= operand.iter().sum();\n\
    \            }\n            \"/\" => {\n                result /= operand.iter().sum();\n\
    \            }\n            \"//\" => {\n                result //= operand.iter().sum();\n\
    \            }\n            \"**\" => {\n                result **= operand.iter().sum();\n\
    \            }\n            _ => {\n                return std::process::exit(1);\n\
    \            }\n        }\n    });\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmplatnqk19.rs:39:25\n\
    \   |\n39 |                 result **= operand.iter().sum();\n   |           \
    \              ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplatnqk19.rs:23:13\n   |\n22 |         match op {\n   |             \
    \  -- this expression has type `&String`\n23 |             \"+\" => {\n   |  \
    \           ^^^ expected struct `String`, found `str`\n   |\n   = note: expected\
    \ reference `&String`\n              found reference `&'static str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplatnqk19.rs:26:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `&String`\n...\n26 |  \
    \           \"-\" => {\n   |             ^^^ expected struct `String`, found `str`\n\
    \   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplatnqk19.rs:29:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `&String`\n...\n29 |             \"*\" => {\n   |             ^^^ expected struct\
    \ `String`, found `str`\n   |\n   = note: expected reference `&String`\n     \
    \         found reference `&'static str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmplatnqk19.rs:32:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `&String`\n...\n32 |             \"/\" => {\n\
    \   |             ^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected reference `&String`\n              found reference `&'static str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplatnqk19.rs:35:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `&String`\n\
    ...\n35 |             \"//\" => {\n   |             ^^^^ expected struct `String`,\
    \ found `str`\n   |\n   = note: expected reference `&String`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplatnqk19.rs:38:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `&String`\n...\n38 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `Str"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut total = 0;\n\
    \    while i < operator.len() && i < operand.len() {\n        let mut operator\
    \ = &operator[i];\n        let mut operand = &operand[i];\n        if let Ok(Some(op))\
    \ = op.parse::<Operator>() {\n            total += op(*operand);\n           \
    \ i += 1;\n        }\n        if let Ok(Some(number)) = number.parse::<isize>()\
    \ {\n            total += number;\n            i += 1;\n        }\n    }\n   \
    \ total\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `op` in this scope\n  --> /tmp/tmpdegctoi6.rs:25:31\n\
    \   |\n25 |         if let Ok(Some(op)) = op.parse::<Operator>() {\n   |     \
    \                          ^^ not found in this scope\n\nerror[E0412]: cannot\
    \ find type `Operator` in this scope\n    --> /tmp/tmpdegctoi6.rs:25:42\n    \
    \ |\n25   |           if let Ok(Some(op)) = op.parse::<Operator>() {\n     | \
    \                                           ^^^^^^^^\n     |\nhelp: a trait with\
    \ a similar name exists\n     |\n25   |         if let Ok(Some(op)) = op.parse::<Iterator>()\
    \ {\n     |                                          ~~~~~~~~\nhelp: you might\
    \ be missing a type parameter\n     |\n19   | fn do_algebra<Operator>(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n     |              ++++++++++\n\
    \nerror[E0425]: cannot find value `number` in this scope\n  --> /tmp/tmpdegctoi6.rs:29:35\n\
    \   |\n29 |         if let Ok(Some(number)) = number.parse::<isize>() {\n   |\
    \                                   ^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operand.len() == 1 {\n        return\
    \ operand.iter().sum();\n    }\n    if operand.len() == 2 {\n        let mut result:\
    \ isize = 0;\n        for i in 0..operand.len() {\n            let mut temp =\
    \ operand[i];\n            if i == 0 {\n                temp -= operand[i - 1];\n\
    \            }\n            result += operator[i - 1].to_owned()? *temp as isize;\n\
    \        }\n        result\n    }\n    panic!(\"do_algebra: invalid arguments:\
    \ operator = {:?}, operand = {:?}\", operator, operand);\n}\n\nfn main() {\n \
    \   let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the `?` operator can only be applied to values that implement\
    \ `Try`\n  --> /tmp/tmpnud2foxw.rs:30:23\n   |\n30 |             result += operator[i\
    \ - 1].to_owned()? *temp as isize;\n   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ the `?` operator cannot be applied to type `String`\n   |\n   = help: the trait\
    \ `Try` is not implemented for `String`\n\nerror[E0277]: the `?` operator can\
    \ only be used in a function that returns `Result` or `Option` (or another type\
    \ that implements `FromResidual`)\n  --> /tmp/tmpnud2foxw.rs:30:49\n   |\n19 |\
    \ / fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n20 |\
    \ |     if operand.len() == 1 {\n21 | |         return operand.iter().sum();\n\
    22 | |     }\n...  |\n30 | |             result += operator[i - 1].to_owned()?\
    \ *temp as isize;\n   | |                                                 ^ cannot\
    \ use the `?` operator in a function that returns `isize`\n...  |\n34 | |    \
    \ panic!(\"do_algebra: invalid arguments: operator = {:?}, operand = {:?}\", operator,\
    \ operand);\n35 | | }\n   | |_- this function should return `Result` or `Option`\
    \ to accept `?`\n   |\n   = help: the trait `FromResidual<_>` is not implemented\
    \ for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnud2foxw.rs:32:9\n\
    \   |\n23 | /     if operand.len() == 2 {\n24 | |         let mut result: isize\
    \ = 0;\n25 | |         for i in 0..operand.len() {\n26 | |             let mut\
    \ temp = operand[i];\n...  |\n32 | |         result\n   | |         ^^^^^^ expected\
    \ `()`, found `isize`\n33 | |     }\n   | |_____- expected this to be `()`\n \
    \  |\nhelp: you might have meant to return this value\n   |\n32 |         return\
    \ result;\n   |         ++++++       +\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut operand = operand.clone();\n  \
    \  let mut operator = operator.clone();\n    \n    for _ in 0..operand.len() -\
    \ 1 {\n        match operator.pop() {\n            \"+\" => operand += operand.pop(),\n\
    \            \"-\" => operand -= operand.pop(),\n            \"*\" => operand\
    \ *= operand.pop(),\n            \"/\" => operand /= operand.pop(),\n        \
    \    \"//\" => operand //= operand.pop(),\n            \"**\" => operand **= operand.pop(),\n\
    \            _ => unreachable!()\n        }\n    }\n    operand\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `\"**\"`\n  --> /tmp/tmpddqlomiq.rs:30:13\n   |\n29 |             \"//\"\
    \ => operand //= operand.pop(),\n   |                  --        - expected one\
    \ of 8 possible tokens\n   |                  |\n   |                  while parsing\
    \ the `match` arm starting here\n30 |             \"**\" => operand **= operand.pop(),\n\
    \   |             ^^^^ unexpected token\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpddqlomiq.rs:25:13\n   |\n24 |         match operator.pop() {\n   | \
    \              -------------- this expression has type `Option<String>`\n25 |\
    \             \"+\" => operand += operand.pop(),\n   |             ^^^ expected\
    \ enum `Option`, found `&str`\n   |\n   = note:   expected enum `Option<String>`\n\
    \           found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpddqlomiq.rs:26:13\n   |\n24 |         match operator.pop() {\n\
    \   |               -------------- this expression has type `Option<String>`\n\
    25 |             \"+\" => operand += operand.pop(),\n26 |             \"-\" =>\
    \ operand -= operand.pop(),\n   |             ^^^ expected enum `Option`, found\
    \ `&str`\n   |\n   = note:   expected enum `Option<String>`\n           found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpddqlomiq.rs:27:13\n\
    \   |\n24 |         match operator.pop() {\n   |               --------------\
    \ this expression has type `Option<String>`\n...\n27 |             \"*\" => operand\
    \ *= operand.pop(),\n   |             ^^^ expected enum `Option`, found `&str`\n\
    \   |\n   = note:   expected enum `Option<String>`\n           found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpddqlomiq.rs:28:13\n\
    \   |\n24 |         match operator.pop() {\n   |               --------------\
    \ this expression has type `Option<String>`\n...\n28 |             \"/\" => operand\
    \ /= operand.pop(),\n   |             ^^^ expected enum `Option`, found `&str`\n\
    \   |\n   = note:   expected enum `Option<String>`\n           found reference\
    \ `&'static str`\n\nerror[E0368]: binary assignment operation `"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() != operand.len() - 1\
    \ {\n        panic!(\"Invalid Input: operator list should have one operator, and\
    \ operand list should have two or more operands.\");\n    }\n    operand.iter().fold(0,\
    \ |sum, operand| {\n        let operand = if operand == 0 { 1 } else { operand\
    \ };\n        match operator {\n            vec![\"+\"] => sum + operand,\n  \
    \          vec![\"-\"] => sum - operand,\n            vec![\"*\"] => sum * operand,\n\
    \            vec![\"/\"] | vec![\"//\"] => sum / operand,\n            vec![\"\
    **\"] => sum ** operand,\n            vec![] => panic!(\"Invalid Input: operator\
    \ list should have at least one operator.\"),\n            _ => panic!(\"Invalid\
    \ Input: operator list should only have basic algebra operations.\"),\n      \
    \  }\n    })\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpckum6qrm.rs:26:13\n\
    \   |\n26 |             vec![\"+\"] => sum + operand,\n   |             ^^^^^^^^^\n\
    \   |\n   = note: this error originates in the macro `vec` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: arbitrary expressions aren't\
    \ allowed in patterns\n  --> /tmp/tmpckum6qrm.rs:27:13\n   |\n27 |           \
    \  vec![\"-\"] => sum - operand,\n   |             ^^^^^^^^^\n   |\n   = note:\
    \ this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror: arbitrary expressions aren't allowed in patterns\n\
    \  --> /tmp/tmpckum6qrm.rs:28:13\n   |\n28 |             vec![\"*\"] => sum *\
    \ operand,\n   |             ^^^^^^^^^\n   |\n   = note: this error originates\
    \ in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpckum6qrm.rs:29:13\n\
    \   |\n29 |             vec![\"/\"] | vec![\"//\"] => sum / operand,\n   |   \
    \          ^^^^^^^^^\n   |\n   = note: this error originates in the macro `vec`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: arbitrary\
    \ expressions aren't allowed in patterns\n  --> /tmp/tmpckum6qrm.rs:29:25\n  \
    \ |\n29 |             vec![\"/\"] | vec![\"//\"] => sum / operand,\n   |     \
    \                    ^^^^^^^^^^\n   |\n   = note: this error originates in the\
    \ macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\
    \nerror: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpckum6qrm.rs:30:13\n\
    \   |\n30 |             vec![\"**\"] => sum ** operand,\n   |             ^^^^^^^^^^\n\
    \   |\n   = note: this error originates in the macro `vec` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: arbitrary expressions aren't\
    \ allowed in patterns\n  --> /tmp/tmpckum6qrm.rs:31:13\n   |\n31 |           \
    \  vec![] => panic!(\"Invalid Input: operator list should have at least one operator.\"\
    ),\n   |             ^^^^^^\n   |\n   = note: this error originates in the macro\
    \ `vec` (in Nightly bu"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operand.len() == 0 {\n        0\n  \
    \  } else if operand.len() == 1 {\n        operand[0]\n    } else {\n        do_algebra_impl(operator,\
    \ operand, operand.len() - 1)\n    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `do_algebra_impl` in this scope\n  -->\
    \ /tmp/tmp0ylb2ov7.rs:25:9\n   |\n25 |         do_algebra_impl(operator, operand,\
    \ operand.len() - 1)\n   |         ^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Calculate the total of the operands.\
    \ \n    let mut total: isize = 0;\n    // Calculate the number of operands.\n\
    \    let mut operands = operand.len();\n    // Calculate the number of operators.\n\
    \    let mut operators = operator.len();\n    // Calculate the result of the expression.\n\
    \    let mut result = 0;\n    // Initialize a temporary variable to hold the result\
    \ of the expression.\n    let mut temporary: isize = 0;\n    // Initialize a boolean\
    \ variable for checking if the first operand is a negative number.\n    let mut\
    \ neg: Option<bool> = None;\n    // While loop is used to keep checking if the\
    \ first operand is a negative number.\n    while let Some(neg) = neg {\n     \
    \   // If current operand is a negative number, then subtract it from total \n\
    \        // and set the neg variable to true.\n        total = total - operands.pop()\
    \ as isize;\n        neg = Some(true);\n    }\n    // If total is not zero, then\
    \ return negative number and set neg variable to false.\n    if total != 0 {\n\
    \        neg = Some(false);\n        return -total;\n    }\n    // The while loop\
    \ ends here because the total is zero.\n    // Check if the second operand is\
    \ zero or positive, then return it.\n    if operands[0] != 0 {\n        total\
    \ = operands.clone().sum();\n        return total;\n    }\n    // The while loop\
    \ ends here because the second operand is zero.\n    // Check if the second operand\
    \ is zero or negative, then return it.\n    if let Some(neg) = neg {\n       \
    \ total = total - operands.pop() as isize;\n        return total;\n    }\n   \
    \ // The while loop ends here because the second operand is zero.\n    // If the\
    \ first operand is zero or negative, return zero.\n    if neg != None {\n    \
    \    return 0isize;\n    }\n    // The while loop ends here because the first\
    \ operand is zero or negative.\n    // If the first operand is zero or positive,\
    \ return zero.\n    total = total - operands.pop() as isize;\n    neg = Some(true);\n\
    \    return -total;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `pop` found for type `usize` in the current\
    \ scope\n  --> /tmp/tmpm11gq1q0.rs:36:34\n   |\n36 |         total = total - operands.pop()\
    \ as isize;\n   |                                  ^^^ help: there is an associated\
    \ function with a similar name: `pow`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpm11gq1q0.rs:37:15\n   |\n33 |     while let Some(neg) = neg {\n   |\
    \                    --- expected due to the type of this binding\n...\n37 | \
    \        neg = Some(true);\n   |               ^^^^^^^^^^ expected `bool`, found\
    \ enum `Option`\n   |\n   = note: expected type `bool`\n              found enum\
    \ `Option<bool>`\n\nerror[E0608]: cannot index into a value of type `usize`\n\
    \  --> /tmp/tmpm11gq1q0.rs:46:8\n   |\n46 |     if operands[0] != 0 {\n   |  \
    \      ^^^^^^^^^^^\n\nerror[E0599]: `usize` is not an iterator\n  --> /tmp/tmpm11gq1q0.rs:47:34\n\
    \   |\n47 |         total = operands.clone().sum();\n   |                    \
    \              ^^^ `usize` is not an iterator\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `usize: Iterator`\n           which\
    \ is required by `&mut usize: Iterator`\n\nerror[E0599]: no method named `pop`\
    \ found for type `usize` in the current scope\n  --> /tmp/tmpm11gq1q0.rs:53:34\n\
    \   |\n53 |         total = total - operands.pop() as isize;\n   |           \
    \                       ^^^ help: there is an associated function with a similar\
    \ name: `pow`\n\nerror[E0599]: no method named `pop` found for type `usize` in\
    \ the current scope\n  --> /tmp/tmpm11gq1q0.rs:63:30\n   |\n63 |     total = total\
    \ - operands.pop() as isize;\n   |                              ^^^ help: there\
    \ is an associated function with a similar name: `pow`\n\nerror: aborting due\
    \ to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0599,\
    \ E0608.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 1;\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        if let Some(i) = operand.iter().position(|x|\
    \ x == op) {\n            result *= i;\n            operand = &operand[..i];\n\
    \        } else {\n            break;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `String`\n  --> /tmp/tmpdl8hr7cx.rs:22:56\n\
    \   |\n22 |         if let Some(i) = operand.iter().position(|x| x == op) {\n\
    \   |                                                        ^^ no implementation\
    \ for `isize == String`\n   |\n   = help: the trait `PartialEq<String>` is not\
    \ implemented for `isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n   = note: required because of the requirements\
    \ on the impl of `PartialEq<&String>` for `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdl8hr7cx.rs:23:23\n   |\n23 |             result *= i;\n\
    \   |                       ^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot multiply-assign `isize` by `usize`\n  --> /tmp/tmpdl8hr7cx.rs:23:20\n\
    \   |\n23 |             result *= i;\n   |                    ^^ no implementation\
    \ for `isize *= usize`\n   |\n   = help: the trait `MulAssign<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `MulAssign<Rhs>`:\n\
    \             <f32 as MulAssign<&f32>>\n             <f32 as MulAssign>\n    \
    \         <f64 as MulAssign<&f64>>\n             <f64 as MulAssign>\n        \
    \     <i128 as MulAssign<&i128>>\n             <i128 as MulAssign>\n         \
    \    <i16 as MulAssign<&i16>>\n             <i16 as MulAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdl8hr7cx.rs:24:23\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                               ---------- expected due\
    \ to this parameter type\n...\n24 |             operand = &operand[..i];\n   |\
    \                       ^^^^^^^^^^^^^ expected struct `Vec`, found `&[isize]`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found reference `&[isize]`\n\
    help: try using a conversion method\n   |\n24 |             operand = (&operand[..i]).to_vec();\n\
    \   |                       +    "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut res = operand.iter().fold(0, |a,\
    \ b| a + b * operator[0]);\n    for e in &operand[1..] {\n        res *= e;\n\
    \    }\n    return res;\n}\n\nfn main() {\n    let candidate = do_algebra;\n \
    \   assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `&isize` by `String`\n  --> /tmp/tmp3h80ij0e.rs:20:55\n\
    \   |\n20 |     let mut res = operand.iter().fold(0, |a, b| a + b * operator[0]);\n\
    \   |                                                       ^ no implementation\
    \ for `&isize * String`\n   |\n   = help: the trait `Mul<String>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    loop {\n        if operand.len() == 1 {\n\
    \            return operand[0];\n        }\n        if operand.len() > 2 {\n \
    \           return operand[0] - operand[1] + operand[2] * operand[3]\n       \
    \         + operand[4] / operand[5] * operand[6]\n                + operand[7]\
    \ ** operand[8]\n        }\n        for op in operator {\n            match op\
    \ {\n                \"+\" => return operand[0] + operand[1],\n              \
    \  \"-\" => return operand[0] - operand[1],\n                \"*\" => return operand[0]\
    \ * operand[1],\n                \"/\" => return operand[0] / operand[1],\n  \
    \              \"**\" => return operand[0] ** operand[1],\n                _ =>\
    \ return -1,\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp7jhlx_uy.rs:27:31\n\
    \   |\n27 |                 + operand[7] ** operand[8]\n   |                 \
    \              ^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7jhlx_uy.rs:31:17\n\
    \   |\n30 |             match op {\n   |                   -- this expression\
    \ has type `String`\n31 |                 \"+\" => return operand[0] + operand[1],\n\
    \   |                 ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7jhlx_uy.rs:32:17\n   |\n30 |             match\
    \ op {\n   |                   -- this expression has type `String`\n31 |    \
    \             \"+\" => return operand[0] + operand[1],\n32 |                 \"\
    -\" => return operand[0] - operand[1],\n   |                 ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7jhlx_uy.rs:33:17\n\
    \   |\n30 |             match op {\n   |                   -- this expression\
    \ has type `String`\n...\n33 |                 \"*\" => return operand[0] * operand[1],\n\
    \   |                 ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7jhlx_uy.rs:34:17\n   |\n30 |             match\
    \ op {\n   |                   -- this expression has type `String`\n...\n34 |\
    \                 \"/\" => return operand[0] / operand[1],\n   |             \
    \    ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7jhlx_uy.rs:35:17\n   |\n30 |             match op {\n   |    \
    \               -- this expression has type `String`\n...\n35 |              \
    \   \"**\" => return operand[0] ** operand[1],\n   |                 ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmp7jhlx_uy.rs:35:44\n   |\n35 |                 \"**\" => return\
    \ operand[0] ** operand[1],\n   |                                            ^^^^^^^^^^^^\n\
    \nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n\n    for x in &operand\
    \ {\n        result = operator\n            .iter()\n            .fold(result,\
    \ |result, x| result + x);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&String` to `{integer}`\n  --> /tmp/tmpvzg6jxm4.rs:25:46\n\
    \   |\n25 |             .fold(result, |result, x| result + x);\n   |         \
    \                                     ^ no implementation for `{integer} + &String`\n\
    \   |\n   = help: the trait `Add<&String>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    operator\n        .into_iter()\n      \
    \  .zip(operand.into_iter())\n        .zip(operand.iter().map(|x| x ** 2))\n \
    \       .filter(|&(a, b)| a == b)\n        .map(|&(a, b)| a * b as isize)\n  \
    \      .sum() \n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpp1dkr7k7.rs:23:40\n\
    \   |\n23 |         .zip(operand.iter().map(|x| x ** 2))\n   |               \
    \                         ^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp1dkr7k7.rs:24:32\n\
    \   |\n24 |         .filter(|&(a, b)| a == b)\n   |                          \
    \      ^ expected tuple, found `isize`\n   |\n   = note: expected tuple `(String,\
    \ isize)`\n               found type `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpp1dkr7k7.rs:25:15\n   |\n25 |         .map(|&(a, b)| a * b as isize)\n\
    \   |               ^^^^^^-\n   |               |     |\n   |               |\
    \     expected due to this\n   |               expected tuple, found reference\n\
    \   |\n   = note:  expected tuple `((String, isize), isize)`\n           found\
    \ reference `&_`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    operand.pop(); // remove operand \n   \
    \ operator.pop(); // remove operator \n\n    let mut result = operand[0]; // initial\
    \ value \n    \n    for i in operand {\n        let current_operand = operand[i];\n\
    \        result *= current_operand;\n    }\n    \n    for i in operator {\n  \
    \      result /= operand[operand.len()-i+1];\n    }\n    \n    result\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1ntuf4ub.rs:26:31\n\
    \   |\n26 |         let current_operand = operand[i];\n   |                  \
    \             ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: cannot subtract `String` from `usize`\n  --> /tmp/tmp1ntuf4ub.rs:31:40\n\
    \   |\n31 |         result /= operand[operand.len()-i+1];\n   |              \
    \                          ^ no implementation for `usize - String`\n   |\n  \
    \ = help: the trait `Sub<String>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Step 1 -- Initialize result with initial\
    \ operand.\n    let mut result = operand.clone();\n    for op in operator {\n\
    \        result *= op.parse();\n    }\n    // Step 2 -- Now add 1 to result if\
    \ there was a minus operation.\n    if operator.len() == 2 {\n        result +=\
    \ 1;\n    }\n    // Step 3 -- Return result.\n    result\n}\n\nfn main() {\n \
    \   let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `*=` cannot be applied to type\
    \ `Vec<isize>`\n  --> /tmp/tmpcvi7teuj.rs:23:9\n   |\n23 |         result *= op.parse();\n\
    \   |         ------^^^^^^^^^^^^^^\n   |         |\n   |         cannot use `*=`\
    \ on type `Vec<isize>`\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `Vec<isize>`\n  --> /tmp/tmpcvi7teuj.rs:27:9\n   |\n27 |\
    \         result += 1;\n   |         ------^^^^^\n   |         |\n   |       \
    \  cannot use `+=` on type `Vec<isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpcvi7teuj.rs:30:5\n   |\n19 | fn do_algebra(operator: Vec<String>, operand:\
    \ Vec<isize>) -> isize {\n   |                                               \
    \               ----- expected `isize` because of return type\n...\n30 |     result\n\
    \   |     ^^^^^^ expected `isize`, found struct `Vec`\n   |\n   = note: expected\
    \ type `isize`\n            found struct `Vec<isize>`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut sum: isize = 0;\n    for (i, op)\
    \ in operator.iter().enumerate().take(operand.len() - 1) {\n        sum += operand[i]\
    \ * operand[i + 1 as usize].pow(op.to_string().parse().unwrap());\n    }\n   \
    \ sum\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: InvalidDigit }', /tmp/tmpmh23px5e.rs:22:80\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = Vec::new();\n\
    \n    for i in 0..operand.len() {\n        stack.unshift(operand[i]);\n    }\n\
    \    while let Some(item) = stack.pop() {\n        if let Some(operator) = stack.pop()\
    \ {\n            match operator {\n                \"+\" => stack.append(item\
    \ + stack.pop()),\n                \"-\" => stack.append(item - stack.pop()),\n\
    \                \"*\" => stack.append(item * stack.pop()),\n                \"\
    //\" => stack.append(item / stack.pop()),\n                \"**\" => stack.append(item\
    \ ** stack.pop()),\n                _ => panic!(\"Incorrect operator in expression\"\
    )\n            }\n        } else {\n            stack.append(item)\n        }\n\
    \    }\n    stack.pop()\n}\n\nfn main() {\n    let candidate = do_algebra;\n \
    \   assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unshift` found for struct `Vec<isize>` in\
    \ the current scope\n  --> /tmp/tmppgrngsco.rs:23:15\n   |\n23 |         stack.unshift(operand[i]);\n\
    \   |               ^^^^^^^ method not found in `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppgrngsco.rs:28:17\n   |\n27 |             match\
    \ operator {\n   |                   -------- this expression has type `isize`\n\
    28 |                 \"+\" => stack.append(item + stack.pop()),\n   |        \
    \         ^^^ expected `isize`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppgrngsco.rs:29:17\n   |\n27 |             match operator {\n  \
    \ |                   -------- this expression has type `isize`\n28 |        \
    \         \"+\" => stack.append(item + stack.pop()),\n29 |                 \"\
    -\" => stack.append(item - stack.pop()),\n   |                 ^^^ expected `isize`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppgrngsco.rs:30:17\n\
    \   |\n27 |             match operator {\n   |                   -------- this\
    \ expression has type `isize`\n...\n30 |                 \"*\" => stack.append(item\
    \ * stack.pop()),\n   |                 ^^^ expected `isize`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmppgrngsco.rs:31:17\n   |\n27 |  \
    \           match operator {\n   |                   -------- this expression\
    \ has type `isize`\n...\n31 |                 \"//\" => stack.append(item / stack.pop()),\n\
    \   |                 ^^^^ expected `isize`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppgrngsco.rs:32:17\n   |\n27 |             match operator\
    \ {\n   |                   -------- this expression has type `isize`\n...\n32\
    \ |                 \"**\" => stack.append(item ** stack.pop()),\n   |       \
    \          ^^^^ expected `isize`, found `&str`\n\nerror[E0277]: cannot add `Option<isize>`\
    \ to `isize`\n  --> /tmp/tmppgrngsco.rs:28:42\n   |\n28 |                 \"+\"\
    \ => stack.append(item + stack.pop()),\n   |                                 \
    \         ^ no implementation for `isize + Option<isize>`\n   |\n   = help: the\
    \ trait `Add<Option<isize>>` is not implemented"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operand.len() < 2 {\n        panic!(\"\
    Not enough operands\");\n    }\n    let mut sum = 0;\n    for (i, elem) in operand.iter().enumerate()\
    \ {\n        match &operator[i] {\n            \"+\" => sum += elem,\n       \
    \     \"-\" => sum -= elem,\n            \"*\" => sum *= elem,\n            \"\
    /\" => sum /= elem,\n            \"**\" => sum **= elem,\n            _ => panic!(\"\
    Invalid operator in operator list: {}\", operator),\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpudi2bmfm.rs:30:26\n\
    \   |\n30 |             \"**\" => sum **= elem,\n   |                  --    \
    \  ^^ expected expression\n   |                  |\n   |                  while\
    \ parsing the `match` arm starting here\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpudi2bmfm.rs:25:15\n   |\n25 |         match &operator[i] {\n   |   \
    \            ^^^^^^^^^^^^ expected `str`, found struct `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = Vec::new();\n\
    \n    for &n in operand {\n        stack.unshift(n);\n    }\n\n    for &op in\
    \ operator {\n        if op == \"+\" {\n            stack.push(isize::from(stack[0])\
    \ + isize::from(stack[1]));\n        } else if op == \"-\" {\n            stack.push(isize::from(stack[0])\
    \ - isize::from(stack[1]));\n        } else if op == \"*\" {\n            stack.push(isize::from(stack[0])\
    \ * isize::from(stack[1]));\n        } else if op == \"//\" {\n            stack.push(isize::from(stack[0])\
    \ / isize::from(stack[1]));\n        } else if op == \"**\" {\n            stack.push(isize::from(stack[0])\
    \ ** isize::from(stack[1]));\n        } else {\n            println!(\"Invalid\
    \ operator {}.\", op);\n            return isize::from(n);\n        }\n    }\n\
    \    stack.pop()\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `n` in this scope\n  --> /tmp/tmpg54l4kkl.rs:39:32\n\
    \   |\n39 |             return isize::from(n);\n   |                         \
    \       ^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg54l4kkl.rs:22:9\n\
    \   |\n22 |     for &n in operand {\n   |         ^^    ------- this expression\
    \ has type `Option<isize>`\n   |         |\n   |         expected `isize`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `n`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error[E0599]: no method named `unshift` found for struct `Vec<isize>` in the current\
    \ scope\n  --> /tmp/tmpg54l4kkl.rs:23:15\n   |\n23 |         stack.unshift(n);\n\
    \   |               ^^^^^^^ method not found in `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpg54l4kkl.rs:26:9\n   |\n26 |     for &op in\
    \ operator {\n   |         ^^^    -------- this expression has type `Option<String>`\n\
    \   |         |\n   |         expected struct `String`, found reference\n   |\
    \         help: you can probably remove the explicit borrow: `op`\n   |\n   =\
    \ note: expected struct `String`\n           found reference `&_`\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpg54l4kkl.rs:36:47\n   |\n\
    36 |             stack.push(isize::from(stack[0]) ** isize::from(stack[1]));\n\
    \   |                                               ^^^^^^^^^^^^^^^^^^^^^^^\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpg54l4kkl.rs:42:5\n   |\n19 | fn\
    \ do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n   |    \
    \                                                          ----- expected `isize`\
    \ because of return type\n...\n42 |     stack.pop()\n   |     ^^^^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<isize>`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425, E0599, E0614.\nFor more\
    \ information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    \n    let mut result: isize = 0;\n    \n\
    \    // Loop through the arrays and add one to the result if operator is found.\n\
    \    for element in operand {\n        if operator.iter().any(|op| op == &element)\
    \ {\n            result += 1;\n        }\n    }\n\n    // Return the result.\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `String` with `isize`\n  --> /tmp/tmpnnnyxead.rs:25:40\n\
    \   |\n25 |         if operator.iter().any(|op| op == &element) {\n   |      \
    \                                  ^^ no implementation for `String == isize`\n\
    \   |\n   = help: the trait `PartialEq<isize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n   = note: required because\
    \ of the requirements on the impl of `PartialEq<&isize>` for `&String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack = Vec::with_capacity(operand.len()\
    \ - 1);\n    let mut res = 0;\n    for &mut op in &mut operator {\n        match\
    \ op {\n            \"+\" => stack.pop().unwrap() += operand.pop().unwrap(),\n\
    \            \"-\" => stack.pop().unwrap() -= operand.pop().unwrap(),\n      \
    \      \"*\" => stack.pop().unwrap() *= operand.pop().unwrap(),\n            \"\
    /\" => stack.pop().unwrap() /= operand.pop().unwrap(),\n            \"%\" => stack.pop().unwrap()\
    \ %= operand.pop().unwrap(),\n            \"**\" => stack.pop().unwrap() **= operand.pop().unwrap(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n        res\
    \ += stack.pop().unwrap();\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpr6gpzsh3.rs:29:43\n\
    \   |\n29 |             \"**\" => stack.pop().unwrap() **= operand.pop().unwrap(),\n\
    \   |                  --                       ^^ expected expression\n   | \
    \                 |\n   |                  while parsing the `match` arm starting\
    \ here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr6gpzsh3.rs:24:13\n  \
    \ |\n23 |         match op {\n   |               -- this expression has type `String`\n\
    24 |             \"+\" => stack.pop().unwrap() += operand.pop().unwrap(),\n  \
    \ |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpr6gpzsh3.rs:25:13\n   |\n23 |         match op {\n   |\
    \               -- this expression has type `String`\n24 |             \"+\" =>\
    \ stack.pop().unwrap() += operand.pop().unwrap(),\n25 |             \"-\" => stack.pop().unwrap()\
    \ -= operand.pop().unwrap(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr6gpzsh3.rs:26:13\n\
    \   |\n23 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"*\" => stack.pop().unwrap() *= operand.pop().unwrap(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr6gpzsh3.rs:27:13\n   |\n23 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"/\" => stack.pop().unwrap() /= operand.pop().unwrap(),\n   |    \
    \         ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpr6gpzsh3.rs:28:13\n   |\n23 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n28 |             \"\
    %\" => stack.pop().unwrap() %= operand.pop().unwrap(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0067]: invalid left-hand side of assignment\n\
    \  --> /tmp/tmpr6gpzsh3.rs:24:41\n   |\n24 |             \"+\" => stack.pop().unwrap()\
    \ += operand.pop().unwrap(),\n   |                    -------------------- ^^\n\
    \   |                    |\n   |          "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for i in 0..operand.len()\
    \ {\n        if let Some(value) = operand.iter().find(|x| x == i) {\n        \
    \    result += value * operator.get(i - operand.len()).unwrap();\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&&isize` with `usize`\n  --> /tmp/tmpzs_eq7pp.rs:22:56\n\
    \   |\n22 |         if let Some(value) = operand.iter().find(|x| x == i) {\n \
    \  |                                                        ^^ no implementation\
    \ for `&&isize == usize`\n   |\n   = help: the trait `PartialEq<usize>` is not\
    \ implemented for `&&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0277]: cannot multiply `&isize`\
    \ by `&String`\n  --> /tmp/tmpzs_eq7pp.rs:23:29\n   |\n23 |             result\
    \ += value * operator.get(i - operand.len()).unwrap();\n   |                 \
    \            ^ no implementation for `&isize * &String`\n   |\n   = help: the\
    \ trait `Mul<&String>` is not implemented for `&isize`\n   = help: the following\
    \ other types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n\
    \             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n  \
    \           <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n      \
    \       <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n            \
    \ <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack = VecDeque::<(isize, isize)>::new();\n\
    \    stack.push((0, 0));\n    stack.extend_from_slice(operand.clone());\n    \n\
    \    let mut result = 0;\n    while stack.len() > 0 {\n        let item = stack.pop_front().unwrap();\n\
    \        let op = &operator[item.0];\n        let right = item.1;\n        let\
    \ left  = stack.pop_front().unwrap().1;\n        match op {\n            \"+\"\
    \ => {\n                result += left;\n            }\n            \"-\" => {\n\
    \                result -= left;\n            }\n            \"*\" => {\n    \
    \            result *= left;\n            }\n            \"/\" => {\n        \
    \        result /= left;\n            }\n            \"^\" => {\n            \
    \    result **= left;\n            }\n            _ => {\n                panic!(\"\
    Unknown operator: {:?}\", op)\n            }\n        }\n        stack.push((right,\
    \ left));\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpb8k5mz_3.rs:44:25\n\
    \   |\n44 |                 result **= left;\n   |                         ^^\
    \ expected expression\n\nerror[E0433]: failed to resolve: use of undeclared type\
    \ `VecDeque`\n  --> /tmp/tmpb8k5mz_3.rs:20:21\n   |\n20 |     let mut stack =\
    \ VecDeque::<(isize, isize)>::new();\n   |                     ^^^^^^^^ not found\
    \ in this scope\n   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::VecDeque;\n\
    \   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Get the list of operators\n    let mut\
    \ operators = operator[1..].clone();\n\n    // Get the number of operators\n \
    \   let mut num_of_operators = operator.len();\n    // Get the first operand\n\
    \    let mut first_operand = operand[0].clone();\n    // Get the second operand\n\
    \    let mut second_operand = operand[1].clone();\n\n    // If there are more\
    \ operands than operators, make num_of_operators to equal the number of operands\n\
    \    while num_of_operators != operand.len() {\n        num_of_operators = num_of_operators\
    \ + 1;\n    }\n\n    // Go through the list of operators and operands \n    //\
    \ to form the algebric expression\n    while num_of_operators > 0 {\n        //\
    \ Get the operator\n        let mut operator = operators.clone();\n\n        //\
    \ Get an operand and remove it from the list of operands\n        let mut operand\
    \ = operand.clone();\n        operand.remove(0);\n\n        // If the operator\
    \ equals the last operator, \n        // then remove the operator from the list\n\
    \        if operator == operators[num_of_operators - 1].clone() {\n          \
    \  num_of_operators = num_of_operators - 1;\n        }\n        // Otherwise,\
    \ append the operator to the list of operators, and remove the \n        // operator\
    \ from the list of operands\n        else {\n            num_of_operators = num_of_operators\
    \ + 1;\n            operators.push(operator.clone());\n            operand.remove(0);\n\
    \        }\n    }\n\n    // Get the first operand\n    let mut first_operand =\
    \ operand[0].clone();\n\n    // If the first operand equals the second operand,\
    \ \n    // then return 0 \n    if first_operand == second_operand {\n        return\
    \ 0;\n    }\n    // Otherwise, the first operand and second operand are \n   \
    \ // the product of their digits\n    else {\n        match first_operand {\n\
    \            0 => second_operand % first_operand as isize,\n            _ => first_operand\
    \ * second_operand % 10 as isize,\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone` found for slice `[String]` in the\
    \ current scope\n  --> /tmp/tmpglm0voft.rs:21:39\n   |\n21 |     let mut operators\
    \ = operator[1..].clone();\n   |                                       ^^^^^ method\
    \ not found in `[String]`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut res = 0;\n    let mut i = 0;\n\
    \    while i < operator.len() {\n        if operand.len() > i {\n            res\
    \ = res + operand[i] - operator[i] - operand[i];\n        } else {\n         \
    \   res = res + operand[i] - operator[i];\n        }\n        i = i + 1;\n   \
    \ }\n    res as isize\n}\n\nfn main() {\n    let candidate = do_algebra;\n   \
    \ assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot subtract `String` from `isize`\n  --> /tmp/tmpqtbm34kx.rs:24:36\n\
    \   |\n24 |             res = res + operand[i] - operator[i] - operand[i];\n \
    \  |                                    ^ no implementation for `isize - String`\n\
    \   |\n   = help: the trait `Sub<String>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Sub<Rhs>`:\n             <&'a\
    \ f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128\
    \ as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as\
    \ Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot subtract `String` from `isize`\n  --> /tmp/tmpqtbm34kx.rs:26:36\n   |\n\
    26 |             res = res + operand[i] - operator[i];\n   |                 \
    \                   ^ no implementation for `isize - String`\n   |\n   = help:\
    \ the trait `Sub<String>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for i in\
    \ 0..operand.len() {\n        let mut temp: isize = 0;\n        for j in 0..operator.len()\
    \ {\n            if i == 0 && j == 0 {\n                temp = operand[i];\n \
    \           } else {\n                temp += operand[i] * operand[j];\n     \
    \       }\n        }\n        result = temp + result;\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `124`,\n right: `37`', /tmp/tmpblp6xl1h.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let operator = operator\n        .iter()\n\
    \        .filter(|&s| s.len() == 2)\n        .collect::<Vec<String>>();\n\n  \
    \  let operand = operand\n        .iter()\n        .filter(|&s| s.len() == 1)\n\
    \        .collect::<Vec<isize>>();\n\n    let operator1 = operator\n        .iter()\n\
    \        .filter(|&s| !s.contains(\" \"))\n        .collect::<Vec<String>>();\n\
    \n    let operator2 = operator\n        .iter()\n        .filter(|&s| s.contains(\"\
    \ \"))\n        .collect::<Vec<String>>();\n\n    if operator.len() < 2 || operand.len()\
    \ < 2 {\n        panic!(\"The length of operator list is less than the length\
    \ of operand list minus one.\");\n    }\n\n    let mut op = String::new();\n \
    \   let mut operand1 = String::new();\n    let mut operand2 = String::new();\n\
    \    let mut operator = String::new();\n\n    for _ in 0..operator.len() {\n \
    \       op += \" \";\n    }\n    for _ in 0..operand.len() {\n        operand1\
    \ += \" \";\n    }\n    for _ in 0..operator.len() {\n        operand2 += \" \"\
    ;\n    }\n\n    let mut result = operand[0].to_isize();\n    for operator in operator1\
    \ {\n        match operator {\n            \"+\" => result += (operand[1].to_isize()\
    \ + operand[2].to_isize()).to_isize(),\n            \"-\" => result -= (operand[1].to_isize()\
    \ - operand[2].to_isize()).to_isize(),\n            \"*\" => result += (operand[1].to_isize()\
    \ * operand[2].to_isize()).to_isize(),\n            \"/\" => result += (operand[1].to_isize()\
    \ / operand[2].to_isize()).to_isize(),\n            \"//\" => result += (operand[1].to_isize()\
    \ % operand[2].to_isize()).to_isize(),\n            \"**\" => result += (operand[1].to_isize().powf(operand[2].to_isize())).to_isize(),\n\
    \            _ => panic!(\"Invalid operator!\"),\n        }\n    }\n    for operator\
    \ in operator2 {\n        match operator {\n            \"+\" => result += (operand[1].to_isize()\
    \ + operand[2].to_isize()).to_isize(),\n            \"-\" => result -= (operand[1].to_isize()\
    \ - operand[2].to_isize()).to_isize(),\n            \"*\" => result += (operand[1].to_isize()\
    \ * operand[2].to_isize()).to_isize(),\n            \"/\" => result += (operand[1].\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpdtj29vzp.rs:84:3\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                                    -\
    \ unclosed delimiter\n...\n71 |     for operator in operator2 {\n   |        \
    \                       - unclosed delimiter\n72 |         match operator {\n\
    \   |                        - this delimiter might not be properly closed...\n\
    ...\n77 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    84 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpdtj29vzp.rs:76:30\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                                    -\
    \ closing delimiter possibly meant for this\n...\n76 |             \"/\" => result\
    \ += (operand[1].\n   |                              ^ unclosed delimiter\n77\
    \ | }\n   | ^ mismatched closing delimiter\n\nerror: unexpected token: `)`\n \
    \ --> /tmp/tmpdtj29vzp.rs:77:1\n   |\n77 | }\n   | ^\n\nwarning: unnecessary parentheses\
    \ around assigned value\n  --> /tmp/tmpdtj29vzp.rs:76:30\n   |\n76 |         \
    \      \"/\" => result += (operand[1].\n   |  ______________________________^__________^\n\
    77 | | }\n   | |_^\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n   |\n76 -             \"/\" => result += (operand[1].\n\
    76 +             \"/\" => result += operand[1]\n   | \n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmpdtj29vzp.rs:23:10\n     |\n23   |         .collect::<Vec<String>>();\n\
    \     |          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror[E0599]: no method named `len`\
    \ found for reference `&isize` in the current scope\n  --> /tmp/tmpdt"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator.iter()\
    \ {\n        match op {\n            \"+\" => result += operand.pop(),\n     \
    \       \"-\" => result -= operand.pop(),\n            \"*\" => result *= operand.pop(),\n\
    \            \"/\" => result /= operand.pop(),\n            \"//\" => result //=\
    \ operand.pop(),\n            \"**\" => result **= operand.pop(),\n          \
    \  _ => panic!(),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `\"**\"`\n  --> /tmp/tmp1sjx3sjk.rs:28:13\n   |\n27 |             \"//\"\
    \ => result //= operand.pop(),\n   |                  --       - expected one\
    \ of 8 possible tokens\n   |                  |\n   |                  while parsing\
    \ the `match` arm starting here\n28 |             \"**\" => result **= operand.pop(),\n\
    \   |             ^^^^ unexpected token\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp1sjx3sjk.rs:23:13\n   |\n22 |         match op {\n   |             \
    \  -- this expression has type `&String`\n23 |             \"+\" => result +=\
    \ operand.pop(),\n   |             ^^^ expected struct `String`, found `str`\n\
    \   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1sjx3sjk.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `&String`\n23 |             \"+\" => result += operand.pop(),\n24 |        \
    \     \"-\" => result -= operand.pop(),\n   |             ^^^ expected struct\
    \ `String`, found `str`\n   |\n   = note: expected reference `&String`\n     \
    \         found reference `&'static str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp1sjx3sjk.rs:25:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `&String`\n...\n25 |             \"*\" => result\
    \ *= operand.pop(),\n   |             ^^^ expected struct `String`, found `str`\n\
    \   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1sjx3sjk.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `&String`\n...\n26 |             \"/\" => result /= operand.pop(),\n   |   \
    \          ^^^ expected struct `String`, found `str`\n   |\n   = note: expected\
    \ reference `&String`\n              found reference `&'static str`\n\nerror[E0277]:\
    \ cannot add-assign `Option<isize>` to `{integer}`\n  --> /tmp/tmp1sjx3sjk.rs:23:27\n\
    \   |\n23 |             \"+\" => result += operand.pop(),\n   |              \
    \        "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut operation = operand.len();\n  \
    \  let mut sum: isize = 0;\n    while operation > 0 {\n        let operator_index\
    \ = operator.len() - 1;\n        let value = operator[operator_index].parse().unwrap();\n\
    \        sum += operand[operation] * value;\n        operation -= 1;\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpyt4scun3.rs:24:13\n\
    \   |\n24 |         let value = operator[operator_index].parse().unwrap();\n \
    \  |             ^^^^^ consider giving `value` a type\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // The result will hold final value.\n\
    \    let mut result: isize = 0;\n    // For all operators and operands\n    for\
    \ &x in operator {\n        // The operand will hold the sum of operands so far\
    \ before operation.\n        let mut operand = operand.clone();\n        // For\
    \ all operands that aren't the last one\n        for x in &mut operand {\n   \
    \         // Do the operation\n            result += (x.to_isize() * x);\n   \
    \         // Remove the current operand\n            *x = *x % 10;\n        }\n\
    \    }\n    // Return result\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmp32m9obro.rs:29:23\n\
    \   |\n29 |             result += (x.to_isize() * x);\n   |                  \
    \     ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n   |\n29 -             result += (x.to_isize()\
    \ * x);\n29 +             result += x.to_isize() * x;\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp32m9obro.rs:23:9\n   |\n23 |     for &x in operator\
    \ {\n   |         ^^    -------- this expression has type `Option<String>`\n \
    \  |         |\n   |         expected struct `String`, found reference\n   | \
    \        help: you can probably remove the explicit borrow: `x`\n   |\n   = note:\
    \ expected struct `String`\n           found reference `&_`\n\nerror[E0599]: no\
    \ method named `to_isize` found for mutable reference `&mut isize` in the current\
    \ scope\n  --> /tmp/tmp32m9obro.rs:29:26\n   |\n29 |             result += (x.to_isize()\
    \ * x);\n   |                          ^^^^^^^^ method not found in `&mut isize`\n\
    \nerror: aborting due to 2 previous errors; 1 warning emitted\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Initialize the result to 0\n    let\
    \ mut result = 0;\n\n    // Loop through the operands, each time\n    for i in\
    \ 0..operand.len() - 1 {\n        // Initialize the temporary result to 0\n  \
    \      let mut temp = 0;\n\n        // Loop through the operators\n        for\
    \ j in 0..operator.len() - 1 {\n            // Perform the operation\n       \
    \     temp = temp + operand[j] * operator[j].parse::<isize>().unwrap();\n    \
    \    }\n\n        // Store the temporary result to result list\n        result\
    \ = result + temp;\n    }\n\n    // Return the result\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: InvalidDigit }', /tmp/tmpfj2khpim.rs:31:69\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    do_algebra_helper(operator, operand).0\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `do_algebra_helper` in this scope\n\
    \  --> /tmp/tmpu5hr9k39.rs:20:5\n   |\n20 |     do_algebra_helper(operator, operand).0\n\
    \   |     ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    \n    // Start by adding two operands,\
    \ one by one. \n    for i in 0..operand.len() {\n        let op = operator[i as\
    \ usize - 1];\n        let a = operand[i as usize - 1];\n        let b = operand[(i\
    \ + 1) as usize - 1];\n        \n        // Perform the appropriate operation\
    \ \n        let op = match op {\n            \"+\" => a + b,\n            \"*\"\
    \ => a * b,\n            \"-\" => a - b,\n            \"/\" => a / b,\n      \
    \      \"//\" => a / b,\n            \"**\" => a ** b,\n            _ => panic!(\"\
    Operator {:?} not found.\", op),\n        };\n        \n        // Store the new\
    \ result\n        operand[i] = op;\n    }\n    \n    // Return the evaluated result\n\
    \    operand[0]\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkhruol9v.rs:29:13\n   |\n\
    28 |         let op = match op {\n   |                        -- this expression\
    \ has type `String`\n29 |             \"+\" => a + b,\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkhruol9v.rs:30:13\n\
    \   |\n28 |         let op = match op {\n   |                        -- this expression\
    \ has type `String`\n29 |             \"+\" => a + b,\n30 |             \"*\"\
    \ => a * b,\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkhruol9v.rs:31:13\n   |\n28 |         let op\
    \ = match op {\n   |                        -- this expression has type `String`\n\
    ...\n31 |             \"-\" => a - b,\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkhruol9v.rs:32:13\n\
    \   |\n28 |         let op = match op {\n   |                        -- this expression\
    \ has type `String`\n...\n32 |             \"/\" => a / b,\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpkhruol9v.rs:33:13\n   |\n28 |         let op = match op {\n   |\
    \                        -- this expression has type `String`\n...\n33 |     \
    \        \"//\" => a / b,\n   |             ^^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkhruol9v.rs:34:13\n\
    \   |\n28 |         let op = match op {\n   |                        -- this expression\
    \ has type `String`\n...\n34 |             \"**\" => a ** b,\n   |           \
    \  ^^^^ expected struct `String`, found `&str`\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n  --> /tmp/tmpkhruol9v.rs:34:24\n   |\n34 |             \"\
    **\" => a ** b,\n   |                        ^^^\n\nerror: aborting due to 7 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Initialize the result with first operand\n\
    \    let result = operand[0];\n    // Perform basic algebra operations\n    for\
    \ &i in &operand {\n        // Find the index of operator in operator vector\n\
    \        let index = operator.iter().position(|&x| x == &i);\n        // Perform\
    \ the operation on result and operand\n        result = operator[index](result,\
    \ i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `String` with `&isize`\n  --> /tmp/tmpc79ayhzt.rs:25:53\n\
    \   |\n25 |         let index = operator.iter().position(|&x| x == &i);\n   |\
    \                                                     ^^ no implementation for\
    \ `String == &isize`\n   |\n   = help: the trait `PartialEq<&isize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror[E0277]: the type\
    \ `[String]` cannot be indexed by `Option<usize>`\n  --> /tmp/tmpc79ayhzt.rs:27:18\n\
    \   |\n27 |         result = operator[index](result, i);\n   |               \
    \   ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `Option<usize>`\n\
    \   = note: required because of the requirements on the impl of `Index<Option<usize>>`\
    \ for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // use std::cmp::Ordering;\n    // use\
    \ std::cmp::PartialEq;\n\n    let mut result: isize = 0;\n    \n    let mut ops:\
    \ Vec<String> = Vec::new();\n    let mut i: usize = 0;\n    while i < operator.len()\
    \ {\n        if i < operand.len() {\n            match operator[i] {\n       \
    \         \"+\" => {\n                    ops.push(operator[..i]);\n         \
    \           i += 1;\n                }\n                \"-\" => {\n         \
    \           ops.push(operator[..i]);\n                    i += 1;\n          \
    \      }\n                \"*\" => {\n                    ops.push(operator[..i]);\n\
    \                    i += 1;\n                }\n                \"//\" => {\n\
    \                    ops.push(operator[..i]);\n                    i += 1;\n \
    \               }\n                \"**\" => {\n                    ops.push(operator[..i]);\n\
    \                    i += 1;\n                }\n                _ => { /* do\
    \ nothing */ }\n            }\n        } else {\n            break;\n        }\n\
    \    }\n    \n    let mut operands: Vec<isize> = Vec::new();\n    let mut j: usize\
    \ = 0;\n    while j < operand.len() {\n        if j < operator.len() {\n     \
    \       match operator[j] {\n                \"+\" => {\n                    operands.push(operand[j..j\
    \ + 1]);\n                    j += 1;\n                }\n                \"-\"\
    \ => {\n                    operands.push(operand[j..j + 1]);\n              \
    \      j += 1;\n                }\n                \"*\" => {\n              \
    \      operands.push(operand[j..j + 1]);\n                    j += 1;\n      \
    \          }\n                \"//\" => {\n                    operands.push(operand[j..j\
    \ + 1]);\n                    j += 1;\n                }\n                \"**\"\
    \ => {\n                    operands.push(operand[j..j + 1]);\n              \
    \      j += 1;\n                }\n                _ => { /* do nothing */ }\n\
    \            }\n        } else {\n            break;\n        }\n    }\n\n   \
    \ for i in ops.iter() {\n        result += operands[i] * operand.len() - i;\n\
    \    }\n\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_96r_5_l.rs:29:19\n   |\n\
    29 |             match operator[i] {\n   |                   ^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_96r_5_l.rs:31:30\n\
    \   |\n31 |                     ops.push(operator[..i]);\n   |               \
    \               ^^^^^^^^^^^^^ expected struct `String`, found slice\n   |\n  \
    \ = note: expected struct `String`\n               found slice `[String]`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp_96r_5_l.rs:35:30\n   |\n35 |  \
    \                   ops.push(operator[..i]);\n   |                           \
    \   ^^^^^^^^^^^^^ expected struct `String`, found slice\n   |\n   = note: expected\
    \ struct `String`\n               found slice `[String]`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_96r_5_l.rs:39:30\n   |\n39 |                     ops.push(operator[..i]);\n\
    \   |                              ^^^^^^^^^^^^^ expected struct `String`, found\
    \ slice\n   |\n   = note: expected struct `String`\n               found slice\
    \ `[String]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_96r_5_l.rs:43:30\n\
    \   |\n43 |                     ops.push(operator[..i]);\n   |               \
    \               ^^^^^^^^^^^^^ expected struct `String`, found slice\n   |\n  \
    \ = note: expected struct `String`\n               found slice `[String]`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp_96r_5_l.rs:47:30\n   |\n47 |  \
    \                   ops.push(operator[..i]);\n   |                           \
    \   ^^^^^^^^^^^^^ expected struct `String`, found slice\n   |\n   = note: expected\
    \ struct `String`\n               found slice `[String]`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_96r_5_l.rs:61:19\n   |\n61 |             match operator[j]\
    \ {\n   |                   ^^^^^^^^^^^ expected `&str`, found struct `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_96r_5_l.rs:63:35\n   |\n63 |\
    \                     operands.push(operand[j..j + 1]);\n   |                \
    \                   ^^^^^^^^^^^^^^^^^ expected `isize`, found slice `[isize]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/t"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    debug_assert!(operator.len() == operand.len()\
    \ - 1);\n    \n    let mut stack = vec![];\n    let mut operands_set = HashSet::new();\n\
    \    let mut operands_count = operand.len() - 1;\n    let mut operator_stack =\
    \ vec![];\n    \n    \n    for operand in &mut operand {\n        operands_set.insert(operand);\n\
    \    }\n    \n    for operator in &operator {\n        operator_stack.push(operator);\n\
    \    }\n    \n    \n    while operands_count > 0 && operator_stack.len() > 0 {\n\
    \        let operator = operator_stack.remove(0);\n        let operand = operands_set.remove(&operands_count);\n\
    \        \n        stack.push(operator);\n        \n        operands_count +=\
    \ operand;\n    }\n    \n    stack.remove(0);\n    stack.join(\"\").parse().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmphu87og1c.rs:23:28\n   |\n23 |     let mut operands_set = HashSet::new();\n\
    \   |                            ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0599]: the method `join` exists for struct `Vec<&String>`, but\
    \ its trait bounds were not satisfied\n  --> /tmp/tmphu87og1c.rs:47:11\n   |\n\
    47 |     stack.join(\"\").parse().unwrap()\n   |           ^^^^ method cannot\
    \ be called on `Vec<&String>` due to unsatisfied trait bounds\n   |\n   = note:\
    \ the following trait bounds were not satisfied:\n           `[&String]: Join<_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    do_algebra2(operator, operand).unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `do_algebra2` in this scope\n  --> /tmp/tmpao39v9_k.rs:20:5\n\
    \   |\n20 |     do_algebra2(operator, operand).unwrap()\n   |     ^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    match operator.len() {\n        1 => do_addition(operator[0],\
    \ operand),\n        2 => do_subtraction(operator[0], operator[1], operand),\n\
    \        3 => do_multiplication(operator[0], operator[1], operator[2], operand),\n\
    \        4 => do_division(operator[0], operator[1], operator[2], operator[3],\
    \ operand),\n        5 => do_exponentiation(operator[0], operator[1], operator[2],\
    \ operator[3], operator[4], operand),\n        _ => panic!(\"This should be impossible.\"\
    ),\n    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `do_addition` in this scope\n  --> /tmp/tmpkix99uo9.rs:21:14\n\
    \   |\n21 |         1 => do_addition(operator[0], operand),\n   |            \
    \  ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `do_subtraction`\
    \ in this scope\n  --> /tmp/tmpkix99uo9.rs:22:14\n   |\n22 |         2 => do_subtraction(operator[0],\
    \ operator[1], operand),\n   |              ^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `do_multiplication` in this scope\n  -->\
    \ /tmp/tmpkix99uo9.rs:23:14\n   |\n23 |         3 => do_multiplication(operator[0],\
    \ operator[1], operator[2], operand),\n   |              ^^^^^^^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `do_division` in this\
    \ scope\n  --> /tmp/tmpkix99uo9.rs:24:14\n   |\n24 |         4 => do_division(operator[0],\
    \ operator[1], operator[2], operator[3], operand),\n   |              ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `do_exponentiation`\
    \ in this scope\n  --> /tmp/tmpkix99uo9.rs:25:14\n   |\n25 |         5 => do_exponentiation(operator[0],\
    \ operator[1], operator[2], operator[3], operator[4], operand),\n   |        \
    \      ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 5 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ tmp: isize = 0;\n    for i in 0..operand.len() {\n        if i == 0 {\n    \
    \        result = operand[i] + operand[i];\n            tmp = 1;\n        }\n\
    \        if i == 1 && (operator.contains(&\"+\") == true) {\n            result\
    \ = result + operand[i];\n            tmp = operand[i] + 1;\n        }\n     \
    \   if i == 1 && (operator.contains(&\"-\") == true) {\n            result = result\
    \ - operand[i];\n            tmp = operand[i] - 1;\n        }\n        if i ==\
    \ 1 && (operator.contains(&\"*\") == true) {\n            result = result * operand[i];\n\
    \            tmp = operand[i] * operand[i];\n        }\n        if i == 1 && (operator.contains(&\"\
    //\") == true) {\n            result = result / operand[i];\n            tmp =\
    \ operand[i] / operand[i];\n        }\n        if i == 1 && (operator.contains(&\"\
    **\") == true) {\n            result = result ** operand[i];\n            tmp\
    \ = operand[i] ** operand[i];\n        }\n    }\n    return tmp;\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2tbcshio.rs:27:41\n   |\n\
    27 |         if i == 1 && (operator.contains(&\"+\") == true) {\n   |        \
    \                                 ^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected reference `&String`\n              found reference\
    \ `&&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2tbcshio.rs:31:41\n\
    \   |\n31 |         if i == 1 && (operator.contains(&\"-\") == true) {\n   | \
    \                                        ^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected reference `&String`\n              found reference\
    \ `&&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2tbcshio.rs:35:41\n\
    \   |\n35 |         if i == 1 && (operator.contains(&\"*\") == true) {\n   | \
    \                                        ^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected reference `&String`\n              found reference\
    \ `&&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2tbcshio.rs:39:41\n\
    \   |\n39 |         if i == 1 && (operator.contains(&\"//\") == true) {\n   |\
    \                                         ^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected reference `&String`\n              found reference\
    \ `&&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2tbcshio.rs:43:41\n\
    \   |\n43 |         if i == 1 && (operator.contains(&\"**\") == true) {\n   |\
    \                                         ^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected reference `&String`\n              found reference\
    \ `&&'static str`\n\nerror[E0614]: type `isize` cannot be dereferenced\n  -->\
    \ /tmp/tmp2tbcshio.rs:44:30\n   |\n44 |             result = result ** operand[i];\n\
    \   |                              ^^^^^^^^^^^^\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmp2tbcshio.rs:45:31\n   |\n45 |        \
    \     tmp = operand[i] ** operand[i];\n   |                               ^^^^^^^^^^^^\n\
    \nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information abou"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // 1. First we convert the list operands\
    \ into integer values\n    let num_operands: isize = operand.len();\n    let mut\
    \ val_operands: Vec<isize> = Vec::new();\n    for i in 0..num_operands {\n   \
    \     val_operands.push(operand[i]);\n    }\n\n    // 2. Then we convert the list\
    \ operators into algebra operators and apply them using recursion\n    let num_operators:\
    \ isize = operator.len();\n    if num_operators == 1 {\n        let mut val_op:\
    \ isize = operand[0];\n        for i in 1..num_operands {\n            val_op\
    \ = val_op + operator[0] as isize;\n        }\n        return val_op;\n    }\n\
    \    if num_operators == 2 {\n        let mut val_op: isize = operand[0] + operand[1];\n\
    \        for i in 2..num_operands {\n            val_op = val_op + operator[0]\
    \ as isize + operator[1] as isize;\n        }\n        return val_op;\n    }\n\
    \    if num_operators == 3 {\n        let mut val_op: isize = operand[0] + operand[1]\
    \ + operand[2];\n        for i in 3..num_operands {\n            val_op = val_op\
    \ + operator[0] as isize + operator[1] as isize + operator[2] as isize;\n    \
    \    }\n        return val_op;\n    }\n\n    // 3. If number of operands and operator\
    \ is not possible, return invalid value\n    match num_operators {\n        4\
    \ => {\n            let mut val_op: isize = operand[0] + operand[1] + operand[2]\
    \ + operand[3];\n            for i in 0..num_operands {\n                val_op\
    \ = val_op + operator[0] as isize + operator[1] as isize + operator[2] as isize\
    \ + operator[3] as isize;\n            }\n            return val_op;\n       \
    \ }\n        _ => return 0\n    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfpomv3rj.rs:21:31\n   |\n\
    21 |     let num_operands: isize = operand.len();\n   |                      \
    \ -----   ^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |                \
    \       |\n   |                       expected due to this\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n21 |     let num_operands: isize = operand.len().try_into().unwrap();\n\
    \   |                                            ++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfpomv3rj.rs:24:27\n\
    \   |\n24 |         val_operands.push(operand[i]);\n   |                     \
    \      ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfpomv3rj.rs:28:32\n   |\n28 |\
    \     let num_operators: isize = operator.len();\n   |                       \
    \ -----   ^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |               \
    \         |\n   |                        expected due to this\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n28 |     let num_operators: isize = operator.len().try_into().unwrap();\n\
    \   |                                              ++++++++++++++++++++\n\nerror[E0605]:\
    \ non-primitive cast: `String` as `isize`\n  --> /tmp/tmpfpomv3rj.rs:32:31\n \
    \  |\n32 |             val_op = val_op + operator[0] as isize;\n   |         \
    \                      ^^^^^^^^^^^^^^^^^^^^ an `as` expression can only be used\
    \ to convert between primitive types or to coerce to a specific trait object\n\
    \nerror[E0605]: non-primitive cast: `String` as `isize`\n  --> /tmp/tmpfpomv3rj.rs:39:31\n\
    \   |\n39 |             val_op = val_op + operator[0] as isize + operator[1] as\
    \ isize;\n   |                               ^"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // TODO: write this function.\n    let\
    \ mut result = 0;\n    let mut operator_index = 0;\n    let mut operand_index\
    \ = 0;\n    while operator_index < operator.len() && operand_index < operand.len()\
    \ {\n        let mut operation_operand = operand[operand_index];\n        while\
    \ operator_index < operator.len() {\n            operation_operand *= operand[operand_index];\n\
    \            operator_index += 1;\n        }\n        result += operation_operand;\n\
    \        operand_index += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `37`', /tmp/tmpdlva5e08.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    assert!(operand.len() >= 2);\n    assert!(operator.len()\
    \ >= 1);\n    let mut left = 0;\n    let mut right = 0;\n    for op in operator\
    \ {\n        if op == \"-\" {\n            right = operand[right];\n        }\
    \ else {\n            left = operand[left];\n        }\n    }\n    let mut result\
    \ = left;\n    for n in operand {\n        result = result * n;\n    }\n    return\
    \ result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvnbol1w6.rs:26:21\n   |\n\
    23 |     let mut right = 0;\n   |                     - expected due to this value\n\
    ...\n26 |             right = operand[right];\n   |                     ^^^^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvnbol1w6.rs:28:20\n\
    \   |\n22 |     let mut left = 0;\n   |                    - expected due to this\
    \ value\n...\n28 |             left = operand[left];\n   |                   \
    \ ^^^^^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpvnbol1w6.rs:33:27\n   |\n33 |         result = result * n;\n  \
    \ |                           ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot multiply `usize` by `isize`\n  --> /tmp/tmpvnbol1w6.rs:33:25\n   |\n\
    33 |         result = result * n;\n   |                         ^ no implementation\
    \ for `usize * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvnbol1w6.rs:35:12\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                              ----- expected\
    \ `isize` because of return type\n...\n35 |     return result;\n   |         \
    \   ^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n35 |     return\
    \ result.try_into().unwrap();\n   |                  ++++++++++++++++++++\n\n\
    error: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().cloned().sum();\n\
    \    for op in operator.iter() {\n        match op {\n            String::from(\"\
    +\") => {\n                result = result + operand.iter().cloned().sum();\n\
    \            }\n            String::from(\"-\") => {\n                result =\
    \ result - operand.iter().cloned().sum();\n            }\n            String::from(\"\
    *\") => {\n                result = result * operand.iter().cloned().sum();\n\
    \            }\n            String::from(\"/\") => {\n                result =\
    \ result / operand.iter().cloned().sum();\n            }\n            String::from(\"\
    //\") => {\n                result = result / operand.iter().cloned().sum();\n\
    \            }\n            String::from(\"**\") => {\n                result\
    \ = result ** operand.iter().cloned().sum();\n            }\n            _ =>\
    \ panic!(\"Unexpected operator: {}\", op),\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0164]: expected tuple struct or tuple variant, found associated\
    \ function `String::from`\n  --> /tmp/tmpa8pm9wqh.rs:23:13\n   |\n23 |       \
    \      String::from(\"+\") => {\n   |             ^^^^^^^^^^^^^^^^^ `fn` calls\
    \ are not allowed in patterns\n   |\n   = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n\
    \nerror[E0164]: expected tuple struct or tuple variant, found associated function\
    \ `String::from`\n  --> /tmp/tmpa8pm9wqh.rs:26:13\n   |\n26 |             String::from(\"\
    -\") => {\n   |             ^^^^^^^^^^^^^^^^^ `fn` calls are not allowed in patterns\n\
    \   |\n   = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n\
    \nerror[E0164]: expected tuple struct or tuple variant, found associated function\
    \ `String::from`\n  --> /tmp/tmpa8pm9wqh.rs:29:13\n   |\n29 |             String::from(\"\
    *\") => {\n   |             ^^^^^^^^^^^^^^^^^ `fn` calls are not allowed in patterns\n\
    \   |\n   = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n\
    \nerror[E0164]: expected tuple struct or tuple variant, found associated function\
    \ `String::from`\n  --> /tmp/tmpa8pm9wqh.rs:32:13\n   |\n32 |             String::from(\"\
    /\") => {\n   |             ^^^^^^^^^^^^^^^^^ `fn` calls are not allowed in patterns\n\
    \   |\n   = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n\
    \nerror[E0164]: expected tuple struct or tuple variant, found associated function\
    \ `String::from`\n  --> /tmp/tmpa8pm9wqh.rs:35:13\n   |\n35 |             String::from(\"\
    //\") => {\n   |             ^^^^^^^^^^^^^^^^^^ `fn` calls are not allowed in\
    \ patterns\n   |\n   = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n\
    \nerror[E0164]: expected tuple struct or tuple variant, found associated function\
    \ `String::from`\n  --> /tmp/tmpa8pm9wqh.rs:38:13\n   |\n38 |             String::from(\"\
    **\") => {\n   |             ^^^^^^^^^^^^^^^^^^ `fn` calls are not allowed in\
    \ patterns\n   |\n   = help: for more information, visit https://doc.rust-lang.org/book/ch1"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut num: isize = 0;\n\n    // We iterate\
    \ over the operator list, and each operation is evaluated for the \n    // corresponding\
    \ operand (operand) in the array.\n    for op in operator.iter() {\n        let\
    \ mut temp: isize = 0;\n\n        // Each operation (op) is executed for each\
    \ element (temp) of the operand list. \n        for temp in operand.iter() {\n\
    \            let result = match op.to_string() {\n                \"+\" => temp\
    \ + temp,\n                \"-\" => temp - temp,\n                \"*\" => temp\
    \ * temp,\n                \"/\" => temp / temp,\n                \"//\" => temp\
    \ as isize // temp,\n                \"**\" => temp ** temp,\n               \
    \ _ => panic!(\"Operator not defined.\")\n            };\n\n            // If\
    \ a match succeeds, the result is added to the accumulator num.\n            num\
    \ = num + result;\n        }\n    }\n\n    // Return the accumulated value.\n\
    \    num\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `(`, `,`, `.`, `::`, `<`, `?`, or `}`, found\
    \ `\"**\"`\n  --> /tmp/tmph1ntth9y.rs:35:17\n   |\n34 |                 \"//\"\
    \ => temp as isize // temp,\n   |                      --              - expected\
    \ one of 8 possible tokens\n   |                      |\n   |                \
    \      while parsing the `match` arm starting here\n35 |                 \"**\"\
    \ => temp ** temp,\n   |                 ^^^^ unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmph1ntth9y.rs:30:17\n   |\n29 |             let\
    \ result = match op.to_string() {\n   |                                --------------\
    \ this expression has type `String`\n30 |                 \"+\" => temp + temp,\n\
    \   |                 ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmph1ntth9y.rs:31:17\n   |\n29 |             let\
    \ result = match op.to_string() {\n   |                                --------------\
    \ this expression has type `String`\n30 |                 \"+\" => temp + temp,\n\
    31 |                 \"-\" => temp - temp,\n   |                 ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph1ntth9y.rs:32:17\n\
    \   |\n29 |             let result = match op.to_string() {\n   |            \
    \                    -------------- this expression has type `String`\n...\n32\
    \ |                 \"*\" => temp * temp,\n   |                 ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph1ntth9y.rs:33:17\n\
    \   |\n29 |             let result = match op.to_string() {\n   |            \
    \                    -------------- this expression has type `String`\n...\n33\
    \ |                 \"/\" => temp / temp,\n   |                 ^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut temp = 0;\n    let mut i = 0;\n\
    \n    for op in operator {\n        if op.len() != 1 || operator[i].len() != 1\
    \ {\n            return 0;\n        }\n        temp += operand[i] * operator[i].to_owned().parse().unwrap();\n\
    \        i += 1;\n    }\n\n    temp\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp2n1xg960.rs:27:14\n\
    \   |\n27 |         temp += operand[i] * operator[i].to_owned().parse().unwrap();\n\
    \   |              ^^ cannot infer type\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() != operand.len() - 1\
    \ {\n        bail!(\"Bad number of operator and operand lists\")\n    }\n    do_math(operator,\
    \ operand)\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: cannot find macro `bail` in this scope\n  --> /tmp/tmpf0obxzwg.rs:21:9\n\
    \   |\n21 |         bail!(\"Bad number of operator and operand lists\")\n   |\
    \         ^^^^\n\nerror[E0425]: cannot find function `do_math` in this scope\n\
    \  --> /tmp/tmpf0obxzwg.rs:23:5\n   |\n23 |     do_math(operator, operand)\n \
    \  |     ^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0] as isize;\n\
    \    for i in operator.iter().rev() {\n        if i > 2 {\n            result\
    \ += operand[i/2];\n        }\n        result -= operand[i];\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpix01qs18.rs:22:16\n   |\n\
    22 |         if i > 2 {\n   |                ^ expected `&String`, found integer\n\
    \nerror[E0369]: cannot divide `&String` by `{integer}`\n  --> /tmp/tmpix01qs18.rs:23:32\n\
    \   |\n23 |             result += operand[i/2];\n   |                        \
    \       -^- {integer}\n   |                               |\n   |            \
    \                   &String\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `&String`\n  --> /tmp/tmpix01qs18.rs:25:19\n   |\n25 |         result -=\
    \ operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `&String`\n   = note: required because of the requirements on\
    \ the impl of `Index<&String>` for `Vec<isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0369.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    assert!(operator.len() >= 1);\n    assert!(operand.len()\
    \ >= 2);\n    let mut result = operand[0];\n    for i in 1..operand.len() {\n\
    \        result = operator[i] + operand[i];\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnrsqaz8p.rs:24:32\n   |\n\
    24 |         result = operator[i] + operand[i];\n   |                        \
    \        ^^^^^^^^^^ expected `&str`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnrsqaz8p.rs:24:18\n   |\n22 |     let mut result = operand[0];\n\
    \   |                      ---------- expected due to this value\n23 |     for\
    \ i in 1..operand.len() {\n24 |         result = operator[i] + operand[i];\n \
    \  |                  ^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for i in 0..operator.len()\
    \ {\n        result = result + operand[operator.len() - i - 1] * operator[i].parse::<isize>();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `isize` by `Result<isize, ParseIntError>`\n\
    \  --> /tmp/tmpcb0r15c4.rs:22:59\n   |\n22 |         result = result + operand[operator.len()\
    \ - i - 1] * operator[i].parse::<isize>();\n   |                             \
    \                              ^ no implementation for `isize * Result<isize,\
    \ ParseIntError>`\n   |\n   = help: the trait `Mul<Result<isize, ParseIntError>>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 0;\n  \
    \  let mut result = 1;\n    while i < operator.len() && j < operand.len() {\n\
    \        if operator[i] == operand[j] {\n            i += 1;\n            j +=\
    \ 1;\n        } else {\n            result *= operator[i];\n            i += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `String` with `isize`\n  --> /tmp/tmpnh3q3_8_.rs:24:24\n\
    \   |\n24 |         if operator[i] == operand[j] {\n   |                     \
    \   ^^ no implementation for `String == isize`\n   |\n   = help: the trait `PartialEq<isize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n   \
    \          <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror[E0277]: cannot multiply-assign `{integer}` by\
    \ `String`\n  --> /tmp/tmpnh3q3_8_.rs:28:20\n   |\n28 |             result *=\
    \ operator[i];\n   |                    ^^ no implementation for `{integer} *=\
    \ String`\n   |\n   = help: the trait `MulAssign<String>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `MulAssign<Rhs>`:\n\
    \             <f32 as MulAssign<&f32>>\n             <f32 as MulAssign>\n    \
    \         <f64 as MulAssign<&f64>>\n             <f64 as MulAssign>\n        \
    \     <i128 as MulAssign<&i128>>\n             <i128 as MulAssign>\n         \
    \    <i16 as MulAssign<&i16>>\n             <i16 as MulAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    assert!(operand.len() > 1 && operator.len()\
    \ > 0);\n    assert!(operand.len() <= operator.len());\n    let mut res = operand[0].clone();\n\
    \    for i in 1..operand.len() {\n        match operator[i] {\n            \"\
    +\" => {\n                res = res + operand[i];\n            }\n           \
    \ \"-\" => {\n                res = res - operand[i];\n            }\n       \
    \     \"*\" => {\n                res = res * operand[i];\n            }\n   \
    \         \"//\" => {\n                res = res / operand[i];\n            }\n\
    \            \"**\" => {\n                res = res * operand[i];\n          \
    \  }\n            _ => panic!(\"Invalid operator: {}\", operator[i]),\n      \
    \  }\n    }\n    res\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvotbs369.rs:24:15\n   |\n\
    24 |         match operator[i] {\n   |               ^^^^^^^^^^^ expected `&str`,\
    \ found struct `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result_expr = 0;\n    let mut num_operands\
    \ = operand.len();\n\n    for i in 0..num_operands {\n        let mut operand_expr\
    \ = 0;\n        let mut num_operators = operator.len();\n\n        // If the length\
    \ of operator list is less than or equal the length of operand list minus one,\n\
    \        // throw an error.\n        if num_operators <= num_operands - 1 {\n\
    \            panic!(\"Invalid number of operands or operators: {} vs. {}\", num_operands,\
    \ num_operators);\n        }\n\n        // If the length of operand list is less\
    \ than 2, throw an error.\n        if num_operands < 2 {\n            panic!(\"\
    Invalid number of operands: {}\", num_operands);\n        }\n\n        // If the\
    \ length of operator list is greater than 2, throw an error.\n        if num_operators\
    \ > 2 {\n            panic!(\"Invalid number of operators: {}\", num_operators);\n\
    \        }\n\n        // Do the operations one by one.\n        for op in 0..num_operators\
    \ {\n            let mut operand_i = operand[num_operands - i - 1];\n        \
    \    let mut operand_j = operand[num_operands - i - 1];\n            let mut operator_i\
    \ = operator[op];\n            let mut operator_j = operator[op];\n\n        \
    \    // If the operator is multiplication, then perform the operation.\n     \
    \       if operator_i == Operator::Multiplication {\n                operand_expr\
    \ += operand_j * operator_j;\n            } else {\n                // If the\
    \ operator is subtraction, then perform the operation.\n                if operator_i\
    \ == Operator::Subtraction {\n                    operand_expr -= operand_j;\n\
    \                } else {\n                    // If the operator is addition,\
    \ then perform the operation.\n                    if operator_i == Operator::Addition\
    \ {\n                        operand_expr += operand_j;\n                    }\n\
    \n                    // If the operator is floor division, then perform the operation.\n\
    \                    if operator_i == Operator::FloorDivision {\n            \
    \            operand_expr += operand_j / operator_j;\n                    }\n\
    \                }\n            }\n        }\n\n        // Apply the operation\
    \ to the operand and save the result into the result expression.\n        result_expr\
    \ += operand_expr;\n    }\n\n    // Return the result of the algebraic expression.\n\
    \    result_expr\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operator`\n  -->\
    \ /tmp/tmpwjuw1yui.rs:51:30\n   |\n51 |             if operator_i == Operator::Multiplication\
    \ {\n   |                              ^^^^^^^^ use of undeclared type `Operator`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpwjuw1yui.rs:55:34\n\
    \   |\n55 |                 if operator_i == Operator::Subtraction {\n   |   \
    \                               ^^^^^^^^ use of undeclared type `Operator`\n\n\
    error[E0433]: failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpwjuw1yui.rs:59:38\n\
    \   |\n59 |                     if operator_i == Operator::Addition {\n   |  \
    \                                    ^^^^^^^^ use of undeclared type `Operator`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpwjuw1yui.rs:64:38\n\
    \   |\n64 |                     if operator_i == Operator::FloorDivision {\n \
    \  |                                      ^^^^^^^^ use of undeclared type `Operator`\n\
    \nerror[E0277]: cannot multiply `isize` by `String`\n  --> /tmp/tmpwjuw1yui.rs:52:43\n\
    \   |\n52 |                 operand_expr += operand_j * operator_j;\n   |    \
    \                                       ^ no implementation for `isize * String`\n\
    \   |\n   = help: the trait `Mul<String>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Mul<Rhs>`:\n             <&'a\
    \ f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128\
    \ as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as\
    \ Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot divide `isize` by `String`\n  --> /tmp/tmpwjuw1yui.rs:65:51\n   |\n65\
    \ |                         operand_expr += operand_j / operator_j;\n   |    \
    \                                               ^ no implementation for `isize\
    \ / String`\n   |\n   = help: the trait `Div<String>` is not implemented for `isize`\n\
    \   = help: the following other types implem"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let operator = &operator[..];\n    let\
    \ operand = &operand[..];\n    let mut num = 0;\n    for op in operator {\n  \
    \      num = num + operand.iter().fold(0, |a, b| {\n            match op {\n \
    \               '+' => {\n                    a\n                }\n         \
    \       '-' => {\n                    a - b\n                }\n             \
    \   '*' => {\n                    a * b\n                }\n                '/'\
    \ => {\n                    if (b == 0) || (b == -1){\n                      \
    \  0.0\n                    } else {\n                        a / b\n        \
    \            }\n                }\n                '**' => {\n               \
    \     a ** b\n                }\n            }\n        })\n    }\n    num\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmprcy41eg_.rs:42:17\n\
    \   |\n42 |                 '**' => {\n   |                 ^^^^\n   |\nhelp:\
    \ if you meant to write a `str` literal, use double quotes\n   |\n42 |       \
    \          \"**\" => {\n   |                 ~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprcy41eg_.rs:26:17\n   |\n25 |             match op {\n\
    \   |                   -- this expression has type `&String`\n26 |          \
    \       '+' => {\n   |                 ^^^ expected struct `String`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprcy41eg_.rs:29:17\n   |\n25 |\
    \             match op {\n   |                   -- this expression has type `&String`\n\
    ...\n29 |                 '-' => {\n   |                 ^^^ expected struct `String`,\
    \ found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprcy41eg_.rs:32:17\n\
    \   |\n25 |             match op {\n   |                   -- this expression\
    \ has type `&String`\n...\n32 |                 '*' => {\n   |               \
    \  ^^^ expected struct `String`, found `char`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprcy41eg_.rs:35:17\n   |\n25 |             match op {\n   |    \
    \               -- this expression has type `&String`\n...\n35 |             \
    \    '/' => {\n   |                 ^^^ expected struct `String`, found `char`\n\
    \nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmprcy41eg_.rs:36:27\n\
    \   |\n36 |                     if (b == 0) || (b == -1){\n   |              \
    \             ^^ no implementation for `&isize == {integer}`\n   |\n   = help:\
    \ the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmprcy41eg_.rs:36:39\n\
    \   |\n36 |                     if (b == 0) || (b == -1){\n   |              \
    \                         ^^ no implementation for `&"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Get the lengths of the operator and\
    \ operand lists.\n    let length = operator.len();\n    let mut result = operand.iter().sum();\n\
    \    for i in 0..length-1 {\n        result = result.binary_op(operand[i], operator[i]).unwrap();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp0605a4v2.rs:24:18\n\
    \   |\n22 |     let mut result = operand.iter().sum();\n   |         ----------\
    \ consider giving `result` a type\n23 |     for i in 0..length-1 {\n24 |     \
    \    result = result.binary_op(operand[i], operator[i]).unwrap();\n   |      \
    \            ^^^^^^ cannot infer type\n   |\n   = note: type must be known at\
    \ this point\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() != operand.len() - 1\
    \ {\n        panic!(\"Not valid number of operands.\");\n    }\n\n    let mut\
    \ result = operand[0];\n    for i in 0..operator.len() {\n        if operator[i].is_empty()\
    \ {\n            return result;\n        }\n\n        let temp_result = result\
    \ * (operator[i].len() + 1);\n        result += (operand[i + 1].parse::<isize>())\
    \ * (temp_result);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptc8l_ev9.rs:30:36\n   |\n\
    30 |         let temp_result = result * (operator[i].len() + 1);\n   |       \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n\nerror[E0277]: cannot multiply `isize` by `usize`\n  --> /tmp/tmptc8l_ev9.rs:30:34\n\
    \   |\n30 |         let temp_result = result * (operator[i].len() + 1);\n   |\
    \                                  ^ no implementation for `isize * usize`\n \
    \  |\n   = help: the trait `Mul<usize>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Mul<Rhs>`:\n             <&'a f32\
    \ as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as\
    \ Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n\
    \             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n      \
    \       <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0599]: no\
    \ method named `parse` found for type `isize` in the current scope\n  --> /tmp/tmptc8l_ev9.rs:31:35\n\
    \   |\n31 |         result += (operand[i + 1].parse::<isize>()) * (temp_result);\n\
    \   |                                   ^^^^^ method not found in `isize`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // TODO: Check size of operator and operand\
    \ vectors\n    if operator.len() < 1 {\n        return -1;\n    }\n\n    if operand.len()\
    \ < 2 {\n        return -1;\n    }\n\n    let mut eval_expression = 0;\n    for\
    \ (i, elem) in operand.iter().zip(operator.iter()).map(|(x, y)| {\n        match\
    \ x {\n            '+' => eval_expression += y,\n            '-' => eval_expression\
    \ -= y,\n            '*' => eval_expression *= y,\n            '/' => (eval_expression\
    \ as isize) / y,\n            '//' => (eval_expression as isize) as isize / y,\n\
    \            '**' => (eval_expression as isize) ** (y as isize),\n           \
    \ _ => panic!(\"Invalid operator in operand list: {}\", x),\n        }\n    })\
    \ {\n        Ok(val) => {\n            return val;\n        }\n        Err(err)\
    \ => {\n            println!(\"ERROR: {}\", err);\n            return -1;\n  \
    \      }\n    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpltpkfl0e.rs:36:13\n\
    \   |\n36 |             '//' => (eval_expression as isize) as isize / y,\n   |\
    \             ^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut i = 0;\n\
    \    while i < operand.len() - 1 {\n        let op_str = operator[i];\n      \
    \  match op_str {\n            \"+\" => result += (operand[i] - operand[i + 1]),\n\
    \            \"-\" => result -= (operand[i] - operand[i + 1]),\n            \"\
    *\" => result += (operand[i] * operand[i + 1]),\n            \"/\" => result +=\
    \ (operand[i] / operand[i + 1]),\n            \"**\" => result += (operand[i]\
    \ ** operand[i + 1]),\n            _ => break,\n        }\n        i += 1;\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmp64mzbpk4.rs:25:30\n\
    \   |\n25 |             \"+\" => result += (operand[i] - operand[i + 1]),\n  \
    \ |                              ^                           ^\n   |\n   = note:\
    \ `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n\
    25 -             \"+\" => result += (operand[i] - operand[i + 1]),\n25 +     \
    \        \"+\" => result += operand[i] - operand[i + 1],\n   | \n\nwarning: unnecessary\
    \ parentheses around assigned value\n  --> /tmp/tmp64mzbpk4.rs:26:30\n   |\n26\
    \ |             \"-\" => result -= (operand[i] - operand[i + 1]),\n   |      \
    \                        ^                           ^\n   |\nhelp: remove these\
    \ parentheses\n   |\n26 -             \"-\" => result -= (operand[i] - operand[i\
    \ + 1]),\n26 +             \"-\" => result -= operand[i] - operand[i + 1],\n \
    \  | \n\nwarning: unnecessary parentheses around assigned value\n  --> /tmp/tmp64mzbpk4.rs:27:30\n\
    \   |\n27 |             \"*\" => result += (operand[i] * operand[i + 1]),\n  \
    \ |                              ^                           ^\n   |\nhelp: remove\
    \ these parentheses\n   |\n27 -             \"*\" => result += (operand[i] * operand[i\
    \ + 1]),\n27 +             \"*\" => result += operand[i] * operand[i + 1],\n \
    \  | \n\nwarning: unnecessary parentheses around assigned value\n  --> /tmp/tmp64mzbpk4.rs:28:30\n\
    \   |\n28 |             \"/\" => result += (operand[i] / operand[i + 1]),\n  \
    \ |                              ^                           ^\n   |\nhelp: remove\
    \ these parentheses\n   |\n28 -             \"/\" => result += (operand[i] / operand[i\
    \ + 1]),\n28 +             \"/\" => result += operand[i] / operand[i + 1],\n \
    \  | \n\nwarning: unnecessary parentheses around assigned value\n  --> /tmp/tmp64mzbpk4.rs:29:31\n\
    \   |\n29 |             \"**\" => result += (operand[i] ** operand[i + 1]),\n\
    \   |                               ^                            ^\n   |\nhelp:\
    \ remove these parentheses\n   |\n29 -             \"**\" => result += (operand[i]\
    \ ** operand[i + 1]),\n29 +             \"**\" => result += operand[i] ** operand[i\
    \ + 1],\n   | \n\nerror"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() != operand.len() - 1\
    \ {\n        panic!(\"Length of operator list is different than length of operand\
    \ list!\")\n    }\n    let mut result: isize = 0;\n    for op_iter in operator.iter()\
    \ {\n        match op_iter.as_str() {\n            \"+\" => {\n              \
    \  result = result + operand.iter().find(|&item| item == 2).unwrap();\n      \
    \      }\n            \"-\" => {\n                result = result - operand.iter().find(|&item|\
    \ item == 2).unwrap();\n            }\n            \"*\" => {\n              \
    \  result = result * operand.iter().find(|&item| item == 2).unwrap();\n      \
    \      }\n            \"/\" => {\n                result = result / operand.iter().find(|&item|\
    \ item == 2).unwrap();\n            }\n            \"//\" => {\n             \
    \   result = result / operand.iter().find(|&item| item == 2).unwrap();\n     \
    \       }\n            \"**\" => {\n                result = result ** operand.iter().find(|&item|\
    \ item == 2).unwrap();\n            }\n            _ => {}\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp409x5ju1.rs:27:68\n\
    \   |\n27 |                 result = result + operand.iter().find(|&item| item\
    \ == 2).unwrap();\n   |                                                      \
    \              ^^ no implementation for `&isize == {integer}`\n   |\n   = help:\
    \ the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp409x5ju1.rs:30:68\n\
    \   |\n30 |                 result = result - operand.iter().find(|&item| item\
    \ == 2).unwrap();\n   |                                                      \
    \              ^^ no implementation for `&isize == {integer}`\n   |\n   = help:\
    \ the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp409x5ju1.rs:33:68\n\
    \   |\n33 |                 result = result * operand.iter().find(|&item| item\
    \ == 2).unwrap();\n   |                                                      \
    \              ^^ no implementation for `&isize == {integer}`\n   |\n   = help:\
    \ the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp409x5ju1.rs:36:68\n\
    \   |\n36 |                 result = result / operand.iter().find(|&item| item\
    \ == 2).unwrap();\n   |                          "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum::<isize>()\
    \ as isize;\n\n    for operator in operator {\n        match operator {\n    \
    \        \"+\" => {\n                result += operand.iter().sum::<isize>() as\
    \ isize\n            }\n            \"-\" => {\n                result -= operand.iter().sum::<isize>()\
    \ as isize\n            }\n            \"*\" => {\n                result *= operand.iter().sum::<isize>()\
    \ as isize\n            }\n            \"/\" => {\n                result /= operand.iter().sum::<isize>()\
    \ as isize\n            }\n            \"**\" => {\n                result **=\
    \ operand.iter().sum::<isize>() as isize\n            }\n            _ => {}\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmplltq7kz7.rs:37:25\n\
    \   |\n37 |                 result **= operand.iter().sum::<isize>() as isize\n\
    \   |                         ^^ expected expression\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplltq7kz7.rs:24:13\n   |\n23 |         match operator {\n\
    \   |               -------- this expression has type `String`\n24 |         \
    \    \"+\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplltq7kz7.rs:27:13\n   |\n23 |\
    \         match operator {\n   |               -------- this expression has type\
    \ `String`\n...\n27 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplltq7kz7.rs:30:13\n\
    \   |\n23 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n30 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplltq7kz7.rs:33:13\n\
    \   |\n23 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n33 |             \"/\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplltq7kz7.rs:36:13\n\
    \   |\n23 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n36 |             \"**\" => {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut num_operand = operand.len();\n\
    \    let mut num_operator = operator.len();\n    let mut num_result = 0;\n\n \
    \   while num_operand > 0 || num_operator > 0 {\n        // Check if the last\
    \ operator is valid (operator's last element must be a valid operator).\n    \
    \    if num_operator > 0 && num_operand < num_operator && operator[num_operator-1]\
    \ != \"**\" && operator[num_operator-1] != \"//\" {\n            panic!(\"The\
    \ last element of operator list must be a valid operator.\");\n        }\n\n \
    \       // Check if the last operand is valid (operand's last element must be\
    \ a valid operand).\n        if num_operand > 0 && num_operator < num_operand\
    \ && operand[num_operand-1] < 0 { // operand must be non-negative.\n         \
    \   panic!(\"The last element of operand list must be a valid operand.\");\n \
    \       }\n\n        // Check if the first operator is valid (operator's first\
    \ element must be a valid operator).\n        if num_operand < num_operator &&\
    \ num_operator < operator.len() && operator[num_operator-1] != \"**\" && operator[num_operator-1]\
    \ != \"//\" {\n            panic!(\"The first element of operator list must be\
    \ a valid operator.\");\n        }\n\n        // Check if the first operand is\
    \ valid (operand's first element must be a valid operand).\n        if num_operand\
    \ < num_operator && num_operator > 0 && operand[num_operand-1] < 0 { // operand\
    \ must be non-negative.\n            panic!(\"The first element of operand list\
    \ must be a valid operand.\");\n        }\n\n        // The last operator and\
    \ operand are valid. Evaluate expression.\n        let current_operator = &operator[num_operator\
    \ - 1];\n        let current_operand = &operand[num_operand - 1];\n        \n\
    \        // Perform the appropriate operation.\n        match current_operator\
    \ {\n            \"+\" => num_result += current_operand,\n            \"-\" =>\
    \ num_result -= current_operand,\n            \"*\" => num_result *= current_operand,\n\
    \            \"//\" => num_result = num_result / current_operand,\n          \
    \  \"**\" => num_result = num_result ** current_operand,\n            _ => panic!(\"\
    Invalid operator, operator list.\"),\n        }\n\n        // Reset the operand/operator\
    \ and continue with next operand.\n        num_operand = num_operand.saturating_sub(1);\n\
    \        num_operator = num_operator.saturating_sub(1);\n    }\n    \n    // Return\
    \ the result.\n    num_result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbuukpvro.rs:51:13\n   |\n\
    50 |         match current_operator {\n   |               ---------------- this\
    \ expression has type `&String`\n51 |             \"+\" => num_result += current_operand,\n\
    \   |             ^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected reference `&String`\n              found reference `&'static str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbuukpvro.rs:52:13\n   |\n50 |\
    \         match current_operator {\n   |               ---------------- this expression\
    \ has type `&String`\n51 |             \"+\" => num_result += current_operand,\n\
    52 |             \"-\" => num_result -= current_operand,\n   |             ^^^\
    \ expected struct `String`, found `str`\n   |\n   = note: expected reference `&String`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbuukpvro.rs:53:13\n   |\n50 |         match current_operator {\n\
    \   |               ---------------- this expression has type `&String`\n...\n\
    53 |             \"*\" => num_result *= current_operand,\n   |             ^^^\
    \ expected struct `String`, found `str`\n   |\n   = note: expected reference `&String`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbuukpvro.rs:54:13\n   |\n50 |         match current_operator {\n\
    \   |               ---------------- this expression has type `&String`\n...\n\
    54 |             \"//\" => num_result = num_result / current_operand,\n   |  \
    \           ^^^^ expected struct `String`, found `str`\n   |\n   = note: expected\
    \ reference `&String`\n              found reference `&'static str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbuukpvro.rs:55:13\n   |\n50 |         match\
    \ current_operator {\n   |               ---------------- this expression has\
    \ type `&String`\n...\n55 |             \"**\" => num_result = num_result ** current_operand,\n\
    \   |             ^^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected reference `&String`\n              found reference `&'static str`\n\
    \nerror: aborting due to 5 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operand.len() < 2 {\n        panic!(\"\
    The length of operand list must be greater than one.\");\n    }\n    if operator.len()\
    \ < 2 {\n        panic!(\"The length of operator list must be greater than one.\"\
    );\n    }\n\n    let mut result = operand.clone();\n    for i in 0..operand.len()\
    \ - 1 {\n        if operator[i] == operator[i+1] {\n            result[i] = result[i]\
    \ + operand[i+1];\n        }\n        else if operator[i] == \"-\" {\n       \
    \     result[i] = result[i] - operand[i+1];\n        }\n        else if operator[i]\
    \ == \"*\" {\n            result[i] = result[i] * operand[i+1];\n        }\n \
    \       else if operator[i] == \"/\" {\n            result[i] = result[i] / operand[i+1];\n\
    \        }\n        else if operator[i] == \"%\" {\n            result[i] = result[i]\
    \ % operand[i+1];\n        }\n        else {\n            panic!(\"Invalid operator\"\
    );\n        }\n    }\n    result[0]\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'Invalid operator', /tmp/tmpaqzcp5bp.rs:45:13\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 1;\n    let mut i = 0;\n\
    \    while i <= operand.len() - 1 {\n        if operator[i] == operator[0] {\n\
    \            result += operand[i];\n        }\n        if operator[i] == operator[1]\
    \ {\n            result -= operand[i];\n        }\n        if operator[i] == operator[2]\
    \ {\n            result *= operand[i];\n        }\n        if operator[i] == operator[3]\
    \ {\n            result /= operand[i];\n        }\n        if operator[i] == operator[4]\
    \ {\n            result %= operand[i];\n        }\n        if operator[i] == operator[5]\
    \ {\n            result /= operand[i];\n        }\n        i += 1;\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 3 but the index\
    \ is 3', /tmp/tmpxucsd_96.rs:32:27\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0.;\n    let mut counter:\
    \ usize = 0;\n\n    for n in operand {\n        match operator {\n           \
    \ vec![\"+\", \"+\", \"+\"] | vec![\"-\", \"-\", \"-\"] => {\n               \
    \ result += n;\n            }\n            vec![\"+\", \"-\", \"*\"] | vec![\"\
    -\", \"*\", \"*\"] | vec![\"*\", \"*\", \"*\"] | vec![\"/\", \"*\", \"/\"] | vec![\"\
    //\", \"*\", \"**\"] | vec![\"**\", \"*\", \"*\"] | vec![\"**\", \"/\", \"*\"\
    ] | vec![\"**\", \"*\", \"/\"] | vec![\"**\", \"/\", \"/\"] => {\n           \
    \     let value = if counter == 0 {\n                    n * 2\n             \
    \   } else {\n                    let value = if counter == 1 {\n            \
    \            n * 2\n                    } else {\n                        n *\
    \ n * 2\n                    };\n\n                    result += value;\n    \
    \                counter += 1;\n                    value;\n                };\n\
    \n                if operator == vec![\"+\", \"+\", \"+\"] {\n               \
    \     result += value;\n                } else {\n                    result -=\
    \ value;\n                }\n            }\n            _ => {}\n        };\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpimvv7j6q.rs:25:13\n\
    \   |\n25 |             vec![\"+\", \"+\", \"+\"] | vec![\"-\", \"-\", \"-\"]\
    \ => {\n   |             ^^^^^^^^^^^^^^^^^^^\n   |\n   = note: this error originates\
    \ in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpimvv7j6q.rs:25:35\n\
    \   |\n25 |             vec![\"+\", \"+\", \"+\"] | vec![\"-\", \"-\", \"-\"]\
    \ => {\n   |                                   ^^^^^^^^^^^^^^^^^^^\n   |\n   =\
    \ note: this error originates in the macro `vec` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\n\nerror: arbitrary expressions aren't allowed\
    \ in patterns\n  --> /tmp/tmpimvv7j6q.rs:28:13\n   |\n28 | ...   vec![\"+\", \"\
    -\", \"*\"] | vec![\"-\", \"*\", \"*\"] | vec![\"*\", \"*\", \"*\"] | vec![\"\
    /\", \"*\", \"/\"] | vec![\"//\", \"*\", \"**\"] | vec![\"**\", \"*\", \"*\"...\n\
    \   |       ^^^^^^^^^^^^^^^^^^^\n   |\n   = note: this error originates in the\
    \ macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\
    \nerror: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpimvv7j6q.rs:28:35\n\
    \   |\n28 | ...   vec![\"+\", \"-\", \"*\"] | vec![\"-\", \"*\", \"*\"] | vec![\"\
    *\", \"*\", \"*\"] | vec![\"/\", \"*\", \"/\"] | vec![\"//\", \"*\", \"**\"] |\
    \ vec![\"**\", \"*\", \"*\"...\n   |                             ^^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = note: this error originates in the macro `vec` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: arbitrary expressions aren't\
    \ allowed in patterns\n  --> /tmp/tmpimvv7j6q.rs:28:57\n   |\n28 | ...   vec![\"\
    +\", \"-\", \"*\"] | vec![\"-\", \"*\", \"*\"] | vec![\"*\", \"*\", \"*\"] | vec![\"\
    /\", \"*\", \"/\"] | vec![\"//\", \"*\", \"**\"] | vec![\"**\", \"*\", \"*\"...\n\
    \   |                                                   ^^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = note: this error originates in the macro `vec` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: arbitrary expressions aren't\
    \ allowed in patterns\n  --> /tmp/tmpimvv7j6q.rs:28:79\n   |\n28 | ...   vec![\"\
    +\", \"-\", \"*\"] | vec![\"-\", \"*\", \"*\"] | vec![\"*\","
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // TODO\n    let mut result = 0;\n\n  \
    \  for x in operand {\n        match operator {\n            vec![\"+\"] => {\n\
    \                result += x;\n            }\n            vec![\"-\"] => {\n \
    \               result -= x;\n            }\n            vec![\"*\"] => {\n  \
    \              result *= x;\n            }\n            vec![\"//\"] => {\n  \
    \              result /= x;\n            }\n            vec![\"**\"] => {\n  \
    \              result **= x;\n            }\n            _ => panic!(\"wrong operator\
    \ list length\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp51anos15.rs:38:25\n\
    \   |\n38 |                 result **= x;\n   |                         ^^ expected\
    \ expression\n\nerror: arbitrary expressions aren't allowed in patterns\n  -->\
    \ /tmp/tmp51anos15.rs:25:13\n   |\n25 |             vec![\"+\"] => {\n   |   \
    \          ^^^^^^^^^\n   |\n   = note: this error originates in the macro `vec`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: arbitrary\
    \ expressions aren't allowed in patterns\n  --> /tmp/tmp51anos15.rs:28:13\n  \
    \ |\n28 |             vec![\"-\"] => {\n   |             ^^^^^^^^^\n   |\n   =\
    \ note: this error originates in the macro `vec` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\n\nerror: arbitrary expressions aren't allowed\
    \ in patterns\n  --> /tmp/tmp51anos15.rs:31:13\n   |\n31 |             vec![\"\
    *\"] => {\n   |             ^^^^^^^^^\n   |\n   = note: this error originates\
    \ in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmp51anos15.rs:34:13\n\
    \   |\n34 |             vec![\"//\"] => {\n   |             ^^^^^^^^^^\n   |\n\
    \   = note: this error originates in the macro `vec` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\n\nerror: arbitrary expressions aren't allowed\
    \ in patterns\n  --> /tmp/tmp51anos15.rs:37:13\n   |\n37 |             vec![\"\
    **\"] => {\n   |             ^^^^^^^^^^\n   |\n   = note: this error originates\
    \ in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror: aborting due to 6 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    match operator {\n        vec![\"+\"] |\
    \ vec![\"-\"] | vec![\"*\"] | vec![\"//\"] | vec![\"**\"] => {\n            operator\n\
    \                .iter()\n                .zip(operand.iter())\n             \
    \   .map(|(op, val)| op + val as isize)\n                .sum()\n        }\n \
    \       _ => panic!(\"Unknown algebra operation!\"),\n    }\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpjbvgx2fr.rs:21:9\n\
    \   |\n21 |         vec![\"+\"] | vec![\"-\"] | vec![\"*\"] | vec![\"//\"] | vec![\"\
    **\"] => {\n   |         ^^^^^^^^^\n   |\n   = note: this error originates in\
    \ the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\
    \nerror: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpjbvgx2fr.rs:21:21\n\
    \   |\n21 |         vec![\"+\"] | vec![\"-\"] | vec![\"*\"] | vec![\"//\"] | vec![\"\
    **\"] => {\n   |                     ^^^^^^^^^\n   |\n   = note: this error originates\
    \ in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpjbvgx2fr.rs:21:33\n\
    \   |\n21 |         vec![\"+\"] | vec![\"-\"] | vec![\"*\"] | vec![\"//\"] | vec![\"\
    **\"] => {\n   |                                 ^^^^^^^^^\n   |\n   = note: this\
    \ error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror: arbitrary expressions aren't allowed in patterns\n\
    \  --> /tmp/tmpjbvgx2fr.rs:21:45\n   |\n21 |         vec![\"+\"] | vec![\"-\"\
    ] | vec![\"*\"] | vec![\"//\"] | vec![\"**\"] => {\n   |                     \
    \                        ^^^^^^^^^^\n   |\n   = note: this error originates in\
    \ the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\
    \nerror: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpjbvgx2fr.rs:21:58\n\
    \   |\n21 |         vec![\"+\"] | vec![\"-\"] | vec![\"*\"] | vec![\"//\"] | vec![\"\
    **\"] => {\n   |                                                          ^^^^^^^^^^\n\
    \   |\n   = note: this error originates in the macro `vec` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror[E0369]: cannot add `isize`\
    \ to `&String`\n  --> /tmp/tmpjbvgx2fr.rs:25:37\n   |\n25 |                 .map(|(op,\
    \ val)| op + val as isize)\n   |                                  -- ^ ------------\
    \ isize\n   |                                  |\n   |                       \
    \           &String\n\nerror[E0606]: casting `&isize` as `isize` is invalid\n\
    \  --> /tm"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = operand[0];\n \
    \   for op in &operator[1..] {\n        match op {\n            \"+\" => {\n \
    \               result = result + operand[1];\n            }\n            \"-\"\
    \ => {\n                result = result - operand[1];\n            }\n       \
    \     \"*\" => {\n                result = result * operand[1];\n            }\n\
    \            \"/\" => {\n                result = result / operand[1];\n     \
    \       }\n            \"**\" => {\n                result = result ** operand[1];\n\
    \            }\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_f2f4yy8.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `&String`\n\
    23 |             \"+\" => {\n   |             ^^^ expected struct `String`, found\
    \ `str`\n   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_f2f4yy8.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `&String`\n...\n26 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `str`\n   |\n   = note: expected reference `&String`\n     \
    \         found reference `&'static str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp_f2f4yy8.rs:29:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `&String`\n...\n29 |             \"*\" => {\n\
    \   |             ^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected reference `&String`\n              found reference `&'static str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_f2f4yy8.rs:32:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `&String`\n\
    ...\n32 |             \"/\" => {\n   |             ^^^ expected struct `String`,\
    \ found `str`\n   |\n   = note: expected reference `&String`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_f2f4yy8.rs:35:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `&String`\n...\n35 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `str`\n   |\n   = note: expected reference `&String`\n\
    \              found reference `&'static str`\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n  --> /tmp/tmp_f2f4yy8.rs:36:34\n   |\n36 |               \
    \  result = result ** operand[1];\n   |                                  ^^^^^^^^^^^^\n\
    \nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() == 1 {\n        operand[0]\
    \ \n    } else {\n        do_algebra_core(operator, operand)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `do_algebra_core` in this scope\n  -->\
    \ /tmp/tmposenaaoj.rs:23:9\n   |\n23 |         do_algebra_core(operator, operand)\n\
    \   |         ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // initialize result to 0\n    let mut\
    \ result = 0;\n    // initialize operator_index to 0\n    let mut operator_index\
    \ = 0;\n    // loop over operand_list \n    for item in operand {\n        //\
    \ get operator\n        let operator = operator[operator_index];\n        // get\
    \ operand\n        let operand = item;\n        // perform operator with operand\
    \ \n        result += (operand as isize)\n            * (operators[operator].iter().cloned().map(|op|\
    \ op.value).sum());\n        // increment operator_index\n        operator_index\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `operators` in this scope\n  --> /tmp/tmpnzsywq9j.rs:32:16\n\
    \   |\n32 |             * (operators[operator].iter().cloned().map(|op| op.value).sum());\n\
    \   |                ^^^^^^^^^ help: a local variable with a similar name exists:\
    \ `operator`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first().unwrap();\n\
    \    for i in 1..operand.len() {\n        let op = operator[i - 1].to_string();\n\
    \        let num = operand[i..i];\n        match op {\n            \"+\" => result\
    \ += num.first().unwrap(),\n            \"-\" => result -= num.first().unwrap(),\n\
    \            \"*\" => result *= num.first().unwrap(),\n            \"/\" => result\
    \ /= num.first().unwrap(),\n            \"//\" => result //= num.first().unwrap(),\n\
    \            \"**\" => result **= num.first().unwrap(),\n            _ => unreachable!(\"\
    Invalid operator: {:?}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `\"**\"`\n  --> /tmp/tmp11b4_llw.rs:30:13\n   |\n29 |             \"//\"\
    \ => result //= num.first().unwrap(),\n   |                  --       - expected\
    \ one of 8 possible tokens\n   |                  |\n   |                  while\
    \ parsing the `match` arm starting here\n30 |             \"**\" => result **=\
    \ num.first().unwrap(),\n   |             ^^^^ unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp11b4_llw.rs:25:13\n   |\n24 |         match\
    \ op {\n   |               -- this expression has type `String`\n25 |        \
    \     \"+\" => result += num.first().unwrap(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp11b4_llw.rs:26:13\n\
    \   |\n24 |         match op {\n   |               -- this expression has type\
    \ `String`\n25 |             \"+\" => result += num.first().unwrap(),\n26 |  \
    \           \"-\" => result -= num.first().unwrap(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp11b4_llw.rs:27:13\n\
    \   |\n24 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"*\" => result *= num.first().unwrap(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp11b4_llw.rs:28:13\n   |\n24 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n28 |             \"\
    /\" => result /= num.first().unwrap(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: the size for values of type `[isize]` cannot be\
    \ known at compilation time\n  --> /tmp/tmp11b4_llw.rs:23:13\n   |\n23 |     \
    \    let num = operand[i..i];\n   |             ^^^ doesn't have a size known\
    \ at compile-time\n   |\n   = help: the trait `Sized` is not implemented for `[isize]`\n\
    \   = note: all local variables must have a statically known size\n   = help:\
    \ unsized locals are gated as an unstable feature\nhelp: consider borrowing here\n\
    \   |\n23 |         let num = &operand[i."
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    \n    // Find the operator symbol\n   \
    \ let mut operator_count = 0;\n    let mut symbol_operator = String::new();\n\
    \    for s in operator {\n        operator_count = operator_count + 1;\n     \
    \   if s == symbol_operator {\n            break;\n        }\n        symbol_operator\
    \ = s;\n    }\n    \n    // Compute the expression\n    let mut expression = String::new();\n\
    \    for (i, &e) in operand.iter().enumerate() {\n        expression.push_str(&format!(\"\
    {}{}\", symbol_operator, &e));\n        if i != operand.len() - 1 {\n        \
    \    expression.push_str(\"+\");\n        }\n    }\n    \n    // Return the value\
    \ of the expression\n    return expression.parse().unwrap();\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: InvalidDigit }', /tmp/tmp8hw7fa9w.rs:42:31\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = Vec::new();\n\
    \    let mut total_val: isize = operand.first();\n    stack.push(operand.first());\n\
    \n    for i in 1..operand.len() {\n        if operator[0..(i-1)].len() > 0 {\n\
    \            let tmp_val: isize = operator[operator[0..(i-1)].len()-1]\n     \
    \           + stack.pop().unwrap() * operand[i];\n            total_val += tmp_val;\n\
    \        } else {\n            total_val += stack.pop().unwrap() * operand[i];\n\
    \        }\n        stack.push(total_val);\n    }\n    total_val\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmq5i8d5f.rs:21:32\n   |\n\
    21 |     let mut total_val: isize = operand.first();\n   |                   \
    \     -----   ^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |    \
    \                    |\n   |                        expected due to this\n   |\n\
    \   = note: expected type `isize`\n              found enum `Option<&isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmq5i8d5f.rs:22:16\n   |\n22 |\
    \     stack.push(operand.first());\n   |                ^^^^^^^^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpmq5i8d5f.rs:27:19\n   |\n27 |                 + stack.pop().unwrap()\
    \ * operand[i];\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmq5i8d5f.rs:26:34\n\
    \   |\n26 |               let tmp_val: isize = operator[operator[0..(i-1)].len()-1]\n\
    \   |  __________________________-----___^\n   | |                          |\n\
    \   | |                          expected due to this\n27 | |                \
    \ + stack.pop().unwrap() * operand[i];\n   | |___________________________________________________^\
    \ expected `isize`, found struct `String`\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    operator.iter().for_each(|op|\
    \ {\n        result += operand.iter().filter(|i| op == i.to_string()).sum();\n\
    \    });\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&String` with `String`\n  --> /tmp/tmp7q6jc2bd.rs:22:48\n\
    \   |\n22 |         result += operand.iter().filter(|i| op == i.to_string()).sum();\n\
    \   |                                                ^^ no implementation for\
    \ `&String == String`\n   |\n   = help: the trait `PartialEq<String>` is not implemented\
    \ for `&String`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let result = operand.iter().cloned().enumerate().map(|(index,\
    \ item)| {\n        match operator {\n            vec![\"+\"] => item.clone()\
    \ + operand[index],\n            vec![\"-\"] => item.clone() - operand[index],\n\
    \            vec![\"*\"] => item.clone() * operand[index],\n            vec![\"\
    //\"] => item.clone() // operand[index],\n            vec![\"**\"] => item.clone()\
    \ ** operand[index],\n        }\n    }).sum();\n    return result;\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found `vec`\n\
    \  --> /tmp/tmp4w399_bv.rs:26:13\n   |\n25 |             vec![\"//\"] => item.clone()\
    \ // operand[index],\n   |                        --             - expected one\
    \ of `,`, `.`, `?`, `}`, or an operator\n   |                        |\n   | \
    \                       while parsing the `match` arm starting here\n26 |    \
    \         vec![\"**\"] => item.clone() ** operand[index],\n   |             ^^^\
    \ unexpected token\n\nerror: arbitrary expressions aren't allowed in patterns\n\
    \  --> /tmp/tmp4w399_bv.rs:22:13\n   |\n22 |             vec![\"+\"] => item.clone()\
    \ + operand[index],\n   |             ^^^^^^^^^\n   |\n   = note: this error originates\
    \ in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmp4w399_bv.rs:23:13\n\
    \   |\n23 |             vec![\"-\"] => item.clone() - operand[index],\n   |  \
    \           ^^^^^^^^^\n   |\n   = note: this error originates in the macro `vec`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: arbitrary\
    \ expressions aren't allowed in patterns\n  --> /tmp/tmp4w399_bv.rs:24:13\n  \
    \ |\n24 |             vec![\"*\"] => item.clone() * operand[index],\n   |    \
    \         ^^^^^^^^^\n   |\n   = note: this error originates in the macro `vec`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: aborting\
    \ due to 4 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        let mut result = 0;\n        for op2 in operand {\n            result\
    \ += (op as isize + op2 as isize) * (op as isize as usize);\n        }\n    }\n\
    \    result as isize\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_0jrhhat.rs:24:54\n   |\n\
    24 |             result += (op as isize + op2 as isize) * (op as isize as usize);\n\
    \   |                                                      ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot multiply `isize` by\
    \ `usize`\n  --> /tmp/tmp_0jrhhat.rs:24:52\n   |\n24 |             result += (op\
    \ as isize + op2 as isize) * (op as isize as usize);\n   |                   \
    \                                 ^ no implementation for `isize * usize`\n  \
    \ |\n   = help: the trait `Mul<usize>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Mul<Rhs>`:\n             <&'a f32\
    \ as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as\
    \ Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n\
    \             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n      \
    \       <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0605]: non-primitive\
    \ cast: `String` as `isize`\n  --> /tmp/tmp_0jrhhat.rs:24:24\n   |\n24 |     \
    \        result += (op as isize + op2 as isize) * (op as isize as usize);\n  \
    \ |                        ^^^^^^^^^^^ an `as` expression can only be used to\
    \ convert between primitive types or to coerce to a specific trait object\n\n\
    error[E0605]: non-primitive cast: `String` as `isize`\n  --> /tmp/tmp_0jrhhat.rs:24:55\n\
    \   |\n24 |             result += (op as isize + op2 as isize) * (op as isize\
    \ as usize);\n   |                                                       ^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0605.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    \n    operator\n        .iter()\n     \
    \   .fold(0, |total: isize, op: &str| (total + operand \n            .rev()\n\
    \            .iter()\n            .find(|&e| e.to_ascii_lowercase() == op)\n \
    \           .unwrap())\n        )\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmphnw_qb79.rs:24:14\n\
    \    |\n24  |               .rev()\n    |                ^^^ `Vec<isize>` is not\
    \ an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror[E0631]: type mismatch in closure arguments\n\
    \    --> /tmp/tmphnw_qb79.rs:23:10\n     |\n23   |           .fold(0, |total:\
    \ isize, op: &str| (total + operand \n     |  __________^^^^____-\n     | |  \
    \        |\n     | |          expected signature of `fn(isize, &String) -> _`\n\
    24   | |             .rev()\n25   | |             .iter()\n26   | |          \
    \   .find(|&e| e.to_ascii_lowercase() == op)\n27   | |             .unwrap())\n\
    \     | |______________________- found signature of `for<'r> fn(isize, &'r str)\
    \ -> _`\n     |\nnote: required by a bound in `fold`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0599, E0631.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_count: usize = 0;\n    for op in operator {\n        if op_map.contains_key(&op)\
    \ {\n            result += op_map[op](&operand[operator_count], &operand[operator_count+1]);\n\
    \            operator_count+=2;\n        } else {\n            println!(\"unknown\
    \ operator, use '+', '-', '*', '/', '**'\");\n            exit!(1);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: cannot find macro `exit` in this scope\n  --> /tmp/tmpbbkp4l7_.rs:28:13\n\
    \   |\n28 |             exit!(1);\n   |             ^^^^\n\nerror[E0425]: cannot\
    \ find value `op_map` in this scope\n  --> /tmp/tmpbbkp4l7_.rs:23:12\n   |\n23\
    \ |         if op_map.contains_key(&op) {\n   |            ^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find value `op_map` in this scope\n  -->\
    \ /tmp/tmpbbkp4l7_.rs:24:23\n   |\n24 |             result += op_map[op](&operand[operator_count],\
    \ &operand[operator_count+1]);\n   |                       ^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Convert operators and operands into\
    \ expression tree nodes\n    let mut root_node = Node(Root, None, None);\n   \
    \ let mut last_node = root_node;\n    for oper in operator.iter() {\n        last_node.add_child(Node(None,\
    \ Some(oper), last_node));\n    }\n    for operand in operand.iter() {\n     \
    \   last_node.add_child(Node(None, None, None));\n        last_node.children[operand].add_child(Node(None,\
    \ None, None));\n    }\n    last_node.value = do_evaluation(root_node);\n    return\
    \ last_node.value\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function, tuple struct or tuple variant `Node`\
    \ in this scope\n   --> /tmp/tmphxddqrpo.rs:21:25\n    |\n21  |     let mut root_node\
    \ = Node(Root, None, None);\n    |                         ^^^^ help: a unit variant\
    \ with a similar name exists: `None`\n\nerror[E0425]: cannot find value `Root`\
    \ in this scope\n  --> /tmp/tmphxddqrpo.rs:21:30\n   |\n21 |     let mut root_node\
    \ = Node(Root, None, None);\n   |                              ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant\
    \ `Node` in this scope\n   --> /tmp/tmphxddqrpo.rs:24:29\n    |\n24  |       \
    \  last_node.add_child(Node(None, Some(oper), last_node));\n    |            \
    \                 ^^^^ help: a unit variant with a similar name exists: `None`\n\
    \nerror[E0425]: cannot find function, tuple struct or tuple variant `Node` in\
    \ this scope\n   --> /tmp/tmphxddqrpo.rs:27:29\n    |\n27  |         last_node.add_child(Node(None,\
    \ None, None));\n    |                             ^^^^ help: a unit variant with\
    \ a similar name exists: `None`\n\nerror[E0425]: cannot find function, tuple struct\
    \ or tuple variant `Node` in this scope\n   --> /tmp/tmphxddqrpo.rs:28:47\n  \
    \  |\n28  |         last_node.children[operand].add_child(Node(None, None, None));\n\
    \    |                                               ^^^^ help: a unit variant\
    \ with a similar name exists: `None`\n\nerror[E0425]: cannot find function `do_evaluation`\
    \ in this scope\n  --> /tmp/tmphxddqrpo.rs:30:23\n   |\n30 |     last_node.value\
    \ = do_evaluation(root_node);\n   |                       ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 6 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut res = operand[0].clone();\n   \
    \ \n    for op in operator.iter().rev() {\n        let mut multiplier = 1;\n \
    \       let mut pow = 1;\n        \n        for i in 1..operand.len() {\n    \
    \        multiplier *= operand[i];\n            pow *= i;\n        }\n       \
    \ \n        if op == \"-\" {\n            res = res - multiplier * pow;\n    \
    \    } else {\n            res = res + multiplier * pow;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxwtt2du0.rs:32:38\n   |\n\
    32 |             res = res - multiplier * pow;\n   |                         \
    \             ^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot multiply\
    \ `isize` by `usize`\n  --> /tmp/tmpxwtt2du0.rs:32:36\n   |\n32 |            \
    \ res = res - multiplier * pow;\n   |                                    ^ no\
    \ implementation for `isize * usize`\n   |\n   = help: the trait `Mul<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxwtt2du0.rs:34:38\n\
    \   |\n34 |             res = res + multiplier * pow;\n   |                  \
    \                    ^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `usize`\n  --> /tmp/tmpxwtt2du0.rs:34:36\n   |\n34 |   \
    \          res = res + multiplier * pow;\n   |                               \
    \     ^ no implementation for `isize * usize`\n   |\n   = help: the trait `Mul<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    match operator.len() {\n        0 => operand.iter().reduce(0)\
    \ { |m, e| m + (**e as isize)},\n        _ => do_algebra_helper(operator, operand)\n\
    \    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found `{`\n\
    \  --> /tmp/tmpmaos0wto.rs:21:39\n   |\n21 |         0 => operand.iter().reduce(0)\
    \ { |m, e| m + (**e as isize)},\n   |           --                          ^\
    \ expected one of `,`, `.`, `?`, `}`, or an operator\n   |           |\n   | \
    \          while parsing the `match` arm starting here\n\nerror: aborting due\
    \ to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Basic algebra operations\n    let mut\
    \ result = operand[0];\n    for elem in operand {\n        let mut new_result\
    \ = result;\n        let mut index = 0;\n        for op in operator {\n      \
    \      if index == 0 {\n                new_result = new_result + elem;\n    \
    \        } else {\n                new_result = new_result + op * elem;\n    \
    \        }\n            index = index + 1;\n        }\n        result = new_result;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `String` by `isize`\n  --> /tmp/tmpq8fq64vg.rs:29:46\n\
    \   |\n29 |                 new_result = new_result + op * elem;\n   |       \
    \                                    -- ^ ---- isize\n   |                   \
    \                        |\n   |                                           String\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    assert!(operator.size() >= 1);\n    assert!(operand.size()\
    \ >= 2);\n    \n    let mut result = operand[0];\n    for (i, e) in operand.iter().zip(operator.iter())\
    \ {\n        match e {\n            \"+\" => {\n                result += operand[i+1];\n\
    \            }\n            \"-\" => {\n                result -= operand[i+1];\n\
    \            }\n            \"*\" => {\n                result *= operand[i+1];\n\
    \            }\n            \"/\" => {\n                result /= operand[i+1];\n\
    \            }\n            \"**\" => {\n                result **= operand[i+1];\n\
    \            }\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpj5ap85mh.rs:39:25\n\
    \   |\n39 |                 result **= operand[i+1];\n   |                   \
    \      ^^ expected expression\n\nerror[E0599]: no method named `size` found for\
    \ struct `Vec<String>` in the current scope\n  --> /tmp/tmpj5ap85mh.rs:20:22\n\
    \   |\n20 |     assert!(operator.size() >= 1);\n   |                      ^^^^\
    \ help: there is an associated function with a similar name: `resize`\n\nerror[E0599]:\
    \ no method named `size` found for struct `Vec<isize>` in the current scope\n\
    \  --> /tmp/tmpj5ap85mh.rs:21:21\n   |\n21 |     assert!(operand.size() >= 2);\n\
    \   |                     ^^^^ help: there is an associated function with a similar\
    \ name: `resize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj5ap85mh.rs:26:13\n\
    \   |\n25 |         match e {\n   |               - this expression has type `&String`\n\
    26 |             \"+\" => {\n   |             ^^^ expected struct `String`, found\
    \ `str`\n   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj5ap85mh.rs:29:13\n\
    \   |\n25 |         match e {\n   |               - this expression has type `&String`\n\
    ...\n29 |             \"-\" => {\n   |             ^^^ expected struct `String`,\
    \ found `str`\n   |\n   = note: expected reference `&String`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj5ap85mh.rs:32:13\n\
    \   |\n25 |         match e {\n   |               - this expression has type `&String`\n\
    ...\n32 |             \"*\" => {\n   |             ^^^ expected struct `String`,\
    \ found `str`\n   |\n   = note: expected reference `&String`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj5ap85mh.rs:35:13\n\
    \   |\n25 |         match e {\n   |               - this expression has type `&String`\n\
    ...\n35 |             \"/\" => {\n   |             ^^^ expected struct `String`,\
    \ found `str`\n   |\n   = note: expected reference `&String`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tm"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut operations = vec![];\n    let mut\
    \ operands = vec![];\n    \n    for operation in operator {\n        operations.push((operation\
    \ as char) as usize);\n    }\n    \n    operand.cloned().for_each(|operand| {\n\
    \        operands.push(operand as isize);\n    });\n    \n    let mut num = 0;\n\
    \    \n    for operation in operations {\n        let op: usize = operation as\
    \ usize;\n        if op == 0 {\n            num += operands[operands.len() - 1];\n\
    \            operands.pop();\n        } else {\n            num += (op as isize)\
    \ * operands[operands.len() - 1];\n            operands.pop();\n        }\n  \
    \  }\n    num\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp7pacner6.rs:27:13\n\
    \    |\n27  |       operand.cloned().for_each(|operand| {\n    |             \
    \  ^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `Vec<isize>: Iterator`\n           \
    \ which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n\
    \            which is required by `&mut [isize]: Iterator`\n\nerror[E0605]: non-primitive\
    \ cast: `String` as `char`\n  --> /tmp/tmp7pacner6.rs:24:25\n   |\n24 |      \
    \   operations.push((operation as char) as usize);\n   |                     \
    \    ^^^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between\
    \ primitive types or to coerce to a specific trait object\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0605.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let operator_index = operand.len() - 1;\n\
    \    let result = operand\n        .iter()\n        .zip(operator)\n        .fold(0,\
    \ |res, &(a: &String, &b: &String)| {\n            let a_index = a.find('*');\n\
    \            let b_index = b.find('*');\n            if a_index >= 0 && b_index\
    \ >= 0 && a_index > b_index {\n                res\n            } else {\n   \
    \             if a_index >= 0 {\n                    res\n                } else\
    \ {\n                    res\n                }\n            }\n        });\n\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `@`, or `|`, found `:`\n  --> /tmp/tmpx1tjzrn4.rs:24:27\n\
    \   |\n24 |         .fold(0, |res, &(a: &String, &b: &String)| {\n   |       \
    \                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: expected\
    \ one of `!`, `(`, `::`, `<`, or `|`, found `)`\n  --> /tmp/tmpx1tjzrn4.rs:24:49\n\
    \   |\n24 |         .fold(0, |res, &(a: &String, &b: &String)| {\n   |       \
    \                                          ^ expected one of `!`, `(`, `::`, `<`,\
    \ or `|`\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() == 0 || operand.len()\
    \ < 2 {\n        panic!(\"The length of operator list is equal to zero.\");\n\
    \    }\n\n    let mut total: isize = 0;\n\n    // Add the operands into the total\
    \ if they belong to the same operator.\n    for x in &operand {\n        total\
    \ += (*x) as! isize;\n    }\n\n    // Then add the rest of the operands.\n   \
    \ total += do_algebra(operator, operand[1..]);\n\n    total\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, or `}`, found `isize`\n  --> /tmp/tmp6d123o60.rs:28:27\n\
    \   |\n28 |         total += (*x) as! isize;\n   |                           ^^^^^\
    \ expected one of `.`, `;`, `?`, or `}`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp6d123o60.rs:32:35\n   |\n32 |     total += do_algebra(operator, operand[1..]);\n\
    \   |                                   ^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_vec()`\n   |                                   |\n   |        \
    \                           expected struct `Vec`, found slice `[isize]`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n               found slice `[isize]`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut a = operand.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut b = operator.iter().cloned().collect::<Vec<_>>();\n    loop {\n \
    \       if a.len() == 0 {\n            return b[0];\n        }\n        if b.len()\
    \ == 0 {\n            return a[0];\n        }\n        match &operator[0] {\n\
    \            \"+\" => b[0] += a[0],\n            \"-\" => b[0] -= a[0],\n    \
    \        \"*\" => b[0] *= a[0],\n            \"//\" => b[0] /= a[0],\n       \
    \     \"**\" => b[0] **= a[0],\n            _ => panic!(\"operator {}\", operator[0]),\n\
    \        }\n        a.pop();\n        b.pop();\n    }\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpqstwnbkl.rs:34:27\n\
    \   |\n34 |             \"**\" => b[0] **= a[0],\n   |                  --   \
    \    ^^ expected expression\n   |                  |\n   |                  while\
    \ parsing the `match` arm starting here\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpqstwnbkl.rs:24:20\n   |\n24 |             return b[0];\n   |       \
    \             ^^^^ expected `isize`, found struct `String`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqstwnbkl.rs:29:15\n   |\n29 |         match &operator[0]\
    \ {\n   |               ^^^^^^^^^^^^ expected `str`, found struct `String`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpqstwnbkl.rs:30:28\n   |\n30 |  \
    \           \"+\" => b[0] += a[0],\n   |                            ^^^^ expected\
    \ `&str`, found `isize`\n\nerror[E0368]: binary assignment operation `-=` cannot\
    \ be applied to type `String`\n  --> /tmp/tmpqstwnbkl.rs:31:20\n   |\n31 |   \
    \          \"-\" => b[0] -= a[0],\n   |                    ----^^^^^^^^\n   |\
    \                    |\n   |                    cannot use `-=` on type `String`\n\
    \nerror[E0368]: binary assignment operation `*=` cannot be applied to type `String`\n\
    \  --> /tmp/tmpqstwnbkl.rs:32:20\n   |\n32 |             \"*\" => b[0] *= a[0],\n\
    \   |                    ----^^^^^^^^\n   |                    |\n   |       \
    \             cannot use `*=` on type `String`\n\nerror[E0368]: binary assignment\
    \ operation `/=` cannot be applied to type `String`\n  --> /tmp/tmpqstwnbkl.rs:33:21\n\
    \   |\n33 |             \"//\" => b[0] /= a[0],\n   |                     ----^^^^^^^^\n\
    \   |                     |\n   |                     cannot use `/=` on type\
    \ `String`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0368.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    match operator.len() {\n        0 => 0,\n\
    \        1 => operand.first(),\n        _ => {\n            let mut result = operand.first();\n\
    \            operator.iter().zip(operand.iter()).for_each(|op, val| {\n      \
    \          match op {\n                    \"+\" => result += val,\n         \
    \           \"-\" => result -= val,\n                    \"*\" => result *= val,\n\
    \                    \"//\" => result /= val,\n                    \"**\" => result\
    \ **= val,\n                }\n            });\n            result\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmps57bbhkv.rs:31:37\n\
    \   |\n31 |                     \"**\" => result **= val,\n   |              \
    \            --         ^^ expected expression\n   |                         \
    \ |\n   |                          while parsing the `match` arm starting here\n\
    \nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmps57bbhkv.rs:22:14\n\
    \   |\n20 | /     match operator.len() {\n21 | |         0 => 0,\n   | |     \
    \         - this is found to be of type `isize`\n22 | |         1 => operand.first(),\n\
    \   | |              ^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n23\
    \ | |         _ => {\n...  |\n35 | |         }\n36 | |     }\n   | |_____- `match`\
    \ arms have incompatible types\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<&isize>`\n\nerror[E0593]: closure is expected to\
    \ take a single 2-tuple as argument, but it takes 2 distinct arguments\n  -->\
    \ /tmp/tmps57bbhkv.rs:25:49\n   |\n25 |             operator.iter().zip(operand.iter()).for_each(|op,\
    \ val| {\n   |                                                 ^^^^^^^^ ---------\
    \ takes 2 distinct arguments\n   |                                           \
    \      |\n   |                                                 expected closure\
    \ that takes a single 2-tuple as argument\n   |\nhelp: change the closure to accept\
    \ a tuple instead of individual arguments\n   |\n25 |             operator.iter().zip(operand.iter()).for_each(|(op,\
    \ val)| {\n   |                                                          ~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmps57bbhkv.rs:34:13\n   |\n19 |\
    \ fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n   | \
    \                                                             ----- expected `isize`\
    \ because of return type\n...\n34 |             result\n   |             ^^^^^^\
    \ expected `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n\
    \              found enum `Option<&isize>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0593.\nFor more i"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // TODO: \n    // Write a while loop for\
    \ iterating over the operand\n    // Use a while loop to loop over the operator\n\
    \    // Use the while loop to compare operator and operand\n    // If the operators\
    \ are equal, return the evaluation\n    // If the operators are not equal, continue\
    \ looping and looping\n}\n\nfn main() {\n    let candidate = do_algebra;\n   \
    \ assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpom2aq_vr.rs:19:62\n   |\n\
    19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  \
    \ |    ----------                                                ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for x in operand\
    \ {\n        for op in operator.iter() {\n            let mut temp = 0;\n    \
    \        if op == \"+\" || op == \"-\" {\n                temp = x;\n        \
    \    }\n            if op == \"*\" || op == \"/\" {\n                temp = temp\
    \ * x;\n            }\n            if op == \"//\" {\n                temp = temp\
    \ / x;\n            }\n            if op == \"**\" {\n                temp = temp\
    \ ** x;\n            }\n            result = temp;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpme_j2ojm.rs:34:30\n\
    \   |\n34 |                 temp = temp ** x;\n   |                          \
    \    ^^^\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // First get the basic expression parts\
    \ \n    let operator0 = operator[0]\n    let operator1 = operator[1]\n    let\
    \ operator2 = operator[2]\n    let operand0 = operand[0]\n    let operand1 = operand[1]\n\
    \    let operand2 = operand[2]\n    // Then evaluate the expression \n    // 1.\
    \ Evaluate operand 1\n    if operand0 < 0 {\n        -1\n    } else if operand1\
    \ < 0 {\n        -1\n    } else if operand2 < 0 {\n        -1\n    } else {\n\
    \        // Operand 2 \n        // Operand 1 \n        // Operand 0 \n       \
    \ // First get the basic operator parts \n        let op0 = operator0[0]\n   \
    \     let op1 = operator1[0]\n        let op2 = operator2[0]\n        // Evaluate\
    \ the expression \n        // 1. If operator0 is '+', then add operand 0 to operand\
    \ 1\n        // 2. If operator0 is '-', then subtract operand 0 from operand 1\n\
    \        // 3. If operator0 is '*', then multiply operand 0 with operand 1\n \
    \       // 4. If operator0 is '//', then floor divide operand 0 by operand 1\n\
    \        // 5. If operator0 is '**', then multiply operand 0 by operand 1 and\
    \ then floor \n        //    divide operand 0 by operand 1\n        // 6. Otherwise,\
    \ if operator0 is not '+', '-', '*', '//' or '**', then return \n        //  \
    \  -1.\n        // 7. Otherwise, return operand 0 + operand 1 + operand 2. \n\
    \        if op0 == '+' {\n            operand1 + operand2\n        } else if op0\
    \ == '-' {\n            operand1 - operand2\n        } else if op0 == '*' {\n\
    \            operand1 * operand2\n        } else if op0 == '/' {\n           \
    \ if operand2 == 0 {\n                -1\n            } else {\n             \
    \   operand1 / operand2\n            }\n        } else if op0 == '^' {\n     \
    \       if operand2 == 0 {\n                0\n            } else {\n        \
    \        operand1 ** operand2\n            }\n        } else {\n            -1\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpi2oc5aup.rs:21:32\n\
    \   |\n21 |     let operator0 = operator[0]\n   |                            \
    \    ^ help: add `;` here\n22 |     let operator1 = operator[1]\n   |     ---\
    \ unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpi2oc5aup.rs:22:32\n\
    \   |\n22 |     let operator1 = operator[1]\n   |                            \
    \    ^ help: add `;` here\n23 |     let operator2 = operator[2]\n   |     ---\
    \ unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpi2oc5aup.rs:23:32\n\
    \   |\n23 |     let operator2 = operator[2]\n   |                            \
    \    ^ help: add `;` here\n24 |     let operand0 = operand[0]\n   |     --- unexpected\
    \ token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpi2oc5aup.rs:24:30\n\
    \   |\n24 |     let operand0 = operand[0]\n   |                              ^\
    \ help: add `;` here\n25 |     let operand1 = operand[1]\n   |     --- unexpected\
    \ token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpi2oc5aup.rs:25:30\n\
    \   |\n25 |     let operand1 = operand[1]\n   |                              ^\
    \ help: add `;` here\n26 |     let operand2 = operand[2]\n   |     --- unexpected\
    \ token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpi2oc5aup.rs:26:30\n\
    \   |\n26 |     let operand2 = operand[2]\n   |                              ^\
    \ help: add `;` here\n...\n29 |     if operand0 < 0 {\n   |     -- unexpected\
    \ token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpi2oc5aup.rs:40:31\n\
    \   |\n40 |         let op0 = operator0[0]\n   |                             \
    \  ^ help: add `;` here\n41 |         let op1 = operator1[0]\n   |         ---\
    \ unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpi2oc5aup.rs:41:31\n\
    \   |\n41 |         let op1 = operator1[0]\n   |                             \
    \  ^ help: add `;` here\n42 |         let op2 = operator2[0]\n   |         ---\
    \ unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpi2oc5aup.rs:42:31\n\
    \   |\n42 |         let op2 = operator2[0]\n   |                             \
    \  ^ he"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    match operator.pop() {\n        Some('+')\
    \ => operand.iter().fold(0, |a, i| a + i),\n        Some('-') => operand.iter().fold(0,\
    \ |a, i| a - i),\n        Some('*') => operand.iter().fold(0, |a, i| a * i),\n\
    \        Some('/') => operand.iter().fold(0, |a, i| a / i),\n        Some('^')\
    \ => operand.iter().fold(0, |a, i| a ** i),\n        _ => 0,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpykzx8415.rs:21:14\n   |\n\
    20 |     match operator.pop() {\n   |           -------------- this expression\
    \ has type `Option<String>`\n21 |         Some('+') => operand.iter().fold(0,\
    \ |a, i| a + i),\n   |              ^^^ expected struct `String`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpykzx8415.rs:22:14\n   |\n20 |\
    \     match operator.pop() {\n   |           -------------- this expression has\
    \ type `Option<String>`\n21 |         Some('+') => operand.iter().fold(0, |a,\
    \ i| a + i),\n22 |         Some('-') => operand.iter().fold(0, |a, i| a - i),\n\
    \   |              ^^^ expected struct `String`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpykzx8415.rs:23:14\n   |\n20 |     match operator.pop()\
    \ {\n   |           -------------- this expression has type `Option<String>`\n\
    ...\n23 |         Some('*') => operand.iter().fold(0, |a, i| a * i),\n   |   \
    \           ^^^ expected struct `String`, found `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpykzx8415.rs:24:14\n   |\n20 |     match operator.pop()\
    \ {\n   |           -------------- this expression has type `Option<String>`\n\
    ...\n24 |         Some('/') => operand.iter().fold(0, |a, i| a / i),\n   |   \
    \           ^^^ expected struct `String`, found `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpykzx8415.rs:25:14\n   |\n20 |     match operator.pop()\
    \ {\n   |           -------------- this expression has type `Option<String>`\n\
    ...\n25 |         Some('^') => operand.iter().fold(0, |a, i| a ** i),\n   |  \
    \            ^^^ expected struct `String`, found `char`\n\nerror: aborting due\
    \ to 5 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0.;\n    let size = operand.len();\n\
    \    \n    for i in 0..size {\n        if operator.contains(&operator[i]) {\n\
    \            result += (operand[i] - operand[i - size + (operand.len() - i - 1)]);\n\
    \        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpr2o416g9.rs:25:23\n\
    \   |\n25 |             result += (operand[i] - operand[i - size + (operand.len()\
    \ - i - 1)]);\n   |                       ^                                  \
    \                      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n   |\n25 -             result += (operand[i] -\
    \ operand[i - size + (operand.len() - i - 1)]);\n25 +             result += operand[i]\
    \ - operand[i - size + (operand.len() - i - 1)];\n   | \n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmpr2o416g9.rs:25:20\n   |\n25 |\
    \             result += (operand[i] - operand[i - size + (operand.len() - i -\
    \ 1)]);\n   |                    ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpr2o416g9.rs:28:12\n   |\n19 |\
    \ fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n   | \
    \                                                             ----- expected `isize`\
    \ because of return type\n...\n28 |     return result;\n   |            ^^^^^^\
    \ expected `isize`, found floating-point number\n\nerror: aborting due to 2 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277,\
    \ E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for i in 0..operator.len() - 1 {\n        let index = operator[i].parse::<usize>().unwrap();\n\
    \        result = operator[i].to_string().parse::<isize>().unwrap().to_owned()\
    \ + result[index];\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmh83pn9f.rs:23:18\n   |\n\
    20 |     let mut result = operand.clone();\n   |                      ---------------\
    \ expected due to this value\n...\n23 |         result = operator[i].to_string().parse::<isize>().unwrap().to_owned()\
    \ + result[index];\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmh83pn9f.rs:25:5\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                              ----- expected\
    \ `isize` because of return type\n...\n25 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found struct `Vec`\n   |\n   = note: expected type `isize`\n      \
    \      found struct `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let len = operator.size();\n    assert!(len\
    \ > 1);\n    assert!(len <= operand.len());\n    let mut res = 0;\n    for i in\
    \ 0..(len - 1) {\n        res += operand[len - 1 - i] * operator[len - 1 - i];\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `size` found for struct `Vec<String>` in\
    \ the current scope\n  --> /tmp/tmpxmls0yx9.rs:20:24\n   |\n20 |     let len =\
    \ operator.size();\n   |                        ^^^^ help: there is an associated\
    \ function with a similar name: `resize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut total_value: isize = 0;\n    for\
    \ element in operator {\n        total_value = total_value + operand.iter().fold(0,\
    \ |acc, item| acc + item);\n    }\n    return total_value;\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `42`,\n right: `37`', /tmp/tmpw2hacek7.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack = Box::new([0; operator.len()]);\n\
    \n    for index in 0..operator.len() {\n        let stack_top = stack.len();\n\
    \n        let operand = &operand[index..];\n        let operator = &operator[index..];\n\
    \n        match operator[stack.len() - stack_top] { \n            Operator::Addition\
    \ => \n                stack.push(operand.iter().zip(stack.clone()).fold(0usize,\
    \ |sum, (_, op_a)| sum + op_a.to_isize())), \n            Operator::Subtraction\
    \ => \n                stack.push(operand.iter().zip(stack.clone()).fold(0usize,\
    \ |sum, (_, op_b)| sum - op_b.to_isize())), \n            Operator::Multiplication\
    \ => \n                stack.push(operand.iter().zip(stack.clone()).fold(0usize,\
    \ |sum, (_, op_a)| sum * op_a.to_isize())), \n            Operator::Floor => \n\
    \                stack.push(operand.iter().zip(stack.clone()).fold(0usize, |sum,\
    \ (_, op_a)| sum / op_a.to_isize())), \n            Operator::Exponentiation =>\
    \ \n                stack.push(operand.iter().zip(stack.clone()).fold(0usize,\
    \ |sum, (_, op_a)| sum ** op_a.to_isize())), \n            _ => panic!(\"Error:\
    \ invalid operator: {}\", operator[stack.len() - stack_top])\n        }\n    }\n\
    \n    stack.pop()\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpj_dja7db.rs:20:34\n   |\n19 | fn do_algebra(operator: Vec<String>, operand:\
    \ Vec<isize>) -> isize {\n   |               -------- this would need to be a\
    \ `const`\n20 |     let mut stack = Box::new([0; operator.len()]);\n   |     \
    \                             ^^^^^^^^\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared type `Operator`\n  --> /tmp/tmpj_dja7db.rs:29:13\n   |\n29 | \
    \            Operator::Addition => \n   |             ^^^^^^^^ use of undeclared\
    \ type `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n\
    \  --> /tmp/tmpj_dja7db.rs:31:13\n   |\n31 |             Operator::Subtraction\
    \ => \n   |             ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpj_dja7db.rs:33:13\n\
    \   |\n33 |             Operator::Multiplication => \n   |             ^^^^^^^^\
    \ use of undeclared type `Operator`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Operator`\n  --> /tmp/tmpj_dja7db.rs:35:13\n   |\n35 |    \
    \         Operator::Floor => \n   |             ^^^^^^^^ use of undeclared type\
    \ `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n\
    \  --> /tmp/tmpj_dja7db.rs:37:13\n   |\n37 |             Operator::Exponentiation\
    \ => \n   |             ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0282]:\
    \ type annotations needed\n  --> /tmp/tmpj_dja7db.rs:23:25\n   |\n20 |     let\
    \ mut stack = Box::new([0; operator.len()]);\n   |         --------- consider\
    \ giving `stack` a type\n...\n23 |         let stack_top = stack.len();\n   |\
    \                         ^^^^^ cannot infer type\n   |\n   = note: type must\
    \ be known at this point\n\nerror: aborting due to 7 previous errors\n\nSome errors\
    \ have detailed explanations: E0282, E0433, E0435.\nFor more information about\
    \ an error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for operator in operator {\n        result = result + operand.last().unwrap()\
    \ * (*operator).to_string().parse::<isize>();\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `&isize` by `Result<isize, ParseIntError>`\n\
    \  --> /tmp/tmpmamzfckk.rs:22:51\n   |\n22 |         result = result + operand.last().unwrap()\
    \ * (*operator).to_string().parse::<isize>();\n   |                          \
    \                         ^ no implementation for `&isize * Result<isize, ParseIntError>`\n\
    \   |\n   = help: the trait `Mul<Result<isize, ParseIntError>>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0369]: cannot add `_` to `Option<&isize>`\n  --> /tmp/tmpmamzfckk.rs:22:25\n\
    \   |\n22 |         result = result + operand.last().unwrap() * (*operator).to_string().parse::<isize>();\n\
    \   |                  ------ ^ ------------------------------------------------------------------\
    \ _\n   |                  |\n   |                  Option<&isize>\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmamzfckk.rs:24:5\n   |\n19 | fn do_algebra(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n   |                         \
    \                                     ----- expected `isize` because of return\
    \ type\n...\n24 |     result\n   |     ^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0369.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operand.len() < 2 {\n        println!(\"\
    Error! Invalid number of operands, min 2!\");\n        std::process::exit(1);\n\
    \    }\n    let mut result = operand[0];\n    for v in operand.iter().skip(1)\
    \ {\n        result = operator[operator].call(result, v);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[String]` cannot be indexed by `Vec<String>`\n\
    \  --> /tmp/tmp6s2ytjah.rs:26:18\n   |\n26 |         result = operator[operator].call(result,\
    \ v);\n   |                  ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not\
    \ implemented for `Vec<String>`\n   = note: required because of the requirements\
    \ on the impl of `Index<Vec<String>>` for `Vec<String>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // If there is not enough operands to build\
    \ the expression, return -1.\n    if operand.len() < operator.len() {\n      \
    \  return -1;\n    }\n    // Iterate through all operators.\n    for i in 0..operator.len()\
    \ {\n        // If the current operator is not in the list of available operators,\
    \ return -1.\n        if operator[i].to_string().as_bytes() !=  &operator[0].to_string().as_bytes()\
    \ {\n            return -1;\n        }\n        // Initialize a temporary variable\
    \ that will hold the value before this operator, \n        // and after this operator.\n\
    \        let temp_var: isize;\n        // Find the next operator in the list of\
    \ operators.\n        let next_operator = operator[i];\n        // Go through\
    \ the operand list to find an operator that matches the current operator.\n  \
    \      for j in 0..operand.len() {\n            if operand[j] == next_operator.parse::<isize>()\
    \ {\n                // If the current operand is equal to the next operator's\
    \ operand, set the temporary \n                // variable to that operand.\n\
    \                temp_var = operand[j];\n            }\n            // Else, return\
    \ -1.\n            else {\n                return -1;\n            }\n       \
    \ }\n        // Set the value of this operator's operand to the temporary variable.\n\
    \        operator[i] = temp_var;\n    }\n    // Go through the list of operators,\
    \ find the last operator and set the value to the result of\n    // the last operator's\
    \ operands.\n    let last_operator = &operator[operator.len()-1];\n    for i in\
    \ 0..operand.len() {\n        operator[i] = operand[operand.len()-i-1];\n    }\n\
    \    // Return the value of this expression's last operator's operand.\n    return\
    \ operator[operator.len()-1];\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `[u8]` with `&[u8]`\n  --> /tmp/tmpbbvsdhkk.rs:27:47\n\
    \   |\n27 |         if operator[i].to_string().as_bytes() !=  &operator[0].to_string().as_bytes()\
    \ {\n   |                                               ^^ no implementation for\
    \ `[u8] == &[u8]`\n   |\n   = help: the trait `PartialEq<&[u8]>` is not implemented\
    \ for `[u8]`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&[B] as PartialEq<[A; N]>>\n             <&[T] as PartialEq<Vec<U,\
    \ A>>>\n             <&mut [B] as PartialEq<[A; N]>>\n             <&mut [T] as\
    \ PartialEq<Vec<U, A>>>\n             <[A; N] as PartialEq<&[B]>>\n          \
    \   <[A; N] as PartialEq<&mut [B]>>\n             <[A; N] as PartialEq<[B; N]>>\n\
    \             <[A; N] as PartialEq<[B]>>\n           and 3 others\n   = note:\
    \ required because of the requirements on the impl of `PartialEq<&&[u8]>` for\
    \ `&[u8]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbbvsdhkk.rs:37:30\n\
    \   |\n37 |             if operand[j] == next_operator.parse::<isize>() {\n  \
    \ |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found enum `Result`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Result<isize, ParseIntError>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpbbvsdhkk.rs:48:23\n   |\n48 |         operator[i] = temp_var;\n   |\
    \         -----------   ^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |         |             |\n   |         |             expected struct `String`,\
    \ found `isize`\n   |         expected due to the type of this binding\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbbvsdhkk.rs:54:23\n   |\n54 |         operator[i]\
    \ = operand[operand.len()-i-1];\n   |         -----------   ^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |         |        \
    \     |\n   |         |             expected struct `String`, found `isize`\n\
    \   |         expected due to the type of this binding\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbbvsdhkk.rs:57:12\n   |\n19 | fn do_algebra(operator: Vec<Strin"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // get length of operator and operand list\n\
    \    let (op_len, op_len2) = (operator.len(), operand.len());\n    \n    // init\
    \ result variable\n    let mut result = operand[0];\n    \n    // init counter\
    \ variable\n    let mut counter = op_len2;\n    \n    // loop over the operator\n\
    \    for op in operator {\n        \n        // switch case for operator\n   \
    \     match op {\n            // addition\n            \"+\" => result += operand[counter],\n\
    \            // subtraction\n            \"-\" => result -= operand[counter],\n\
    \            // multiplication\n            \"*\" => result *= operand[counter],\n\
    \            // floor division\n            \"//\" => result /= operand[counter],\n\
    \            // exponentiation\n            \"**\" => result **= operand[counter]\n\
    \        }\n        \n        // increment counter variable\n        counter +=\
    \ 1;\n    }\n    \n    // return evaluated result\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpehggggld.rs:43:29\n\
    \   |\n43 |             \"**\" => result **= operand[counter]\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpehggggld.rs:35:13\n   |\n33 |         match op {\n   |\
    \               -- this expression has type `String`\n34 |             // addition\n\
    35 |             \"+\" => result += operand[counter],\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpehggggld.rs:37:13\n\
    \   |\n33 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n37 |             \"-\" => result -= operand[counter],\n   | \
    \            ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpehggggld.rs:39:13\n   |\n33 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n39 |             \"\
    *\" => result *= operand[counter],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpehggggld.rs:41:13\n\
    \   |\n33 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n41 |             \"//\" => result /= operand[counter],\n   |\
    \             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting due\
    \ to 5 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ i = 0;\n    while i < operator.len() && i < operand.len() {\n        match operator[i]\
    \ {\n            '+' => {\n                result += operand[i];\n           \
    \     i += 1;\n            }\n            '-' => {\n                result -=\
    \ operand[i];\n                i += 1;\n            }\n            '*' => {\n\
    \                result *= operand[i];\n                i += 1;\n            }\n\
    \            '/' => {\n                if operand[i] == 0 {\n                \
    \    error!(\"Can not divide by zero\");\n                    return -1;\n   \
    \             }\n                result /= operand[i];\n                i += 1;\n\
    \            }\n            '**' => {\n                result **= operand[i];\n\
    \                i += 1;\n            }\n            _ => {\n                break;\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpgsh23ydz.rs:44:13\n\
    \   |\n44 |             '**' => {\n   |             ^^^^\n   |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n   |\n44 |             \"**\" =>\
    \ {\n   |             ~~~~\n\nerror: expected expression, found `*=`\n  --> /tmp/tmpgsh23ydz.rs:45:25\n\
    \   |\n45 |                 result **= operand[i];\n   |                     \
    \    ^^ expected expression\n\nerror: cannot find macro `error` in this scope\n\
    \  --> /tmp/tmpgsh23ydz.rs:38:21\n   |\n38 |                     error!(\"Can\
    \ not divide by zero\");\n   |                     ^^^^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgsh23ydz.rs:24:13\n   |\n23 |         match operator[i]\
    \ {\n   |               ----------- this expression has type `String`\n24 |  \
    \           '+' => {\n   |             ^^^ expected struct `String`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgsh23ydz.rs:28:13\n   |\n23 |\
    \         match operator[i] {\n   |               ----------- this expression\
    \ has type `String`\n...\n28 |             '-' => {\n   |             ^^^ expected\
    \ struct `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgsh23ydz.rs:32:13\n\
    \   |\n23 |         match operator[i] {\n   |               ----------- this expression\
    \ has type `String`\n...\n32 |             '*' => {\n   |             ^^^ expected\
    \ struct `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgsh23ydz.rs:36:13\n\
    \   |\n23 |         match operator[i] {\n   |               ----------- this expression\
    \ has type `String`\n...\n36 |             '/' => {\n   |             ^^^ expected\
    \ struct `String`, found `char`\n\nerror: aborting due to 7 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // check inputs\n    if operator.len()\
    \ != operand.len() {\n        println!(\"ERROR: number of elements in operator\
    \ and operand must be equal!\");\n        exit(1);\n    }\n\n    // convert from\
    \ integer to string for operator input\n    operator.iter().zip(operand.iter()).for_each(|(oper,\
    \ operand_i)| {\n        match oper {\n            \"+\" => println!(\"[+] add\
    \ {}\", operand_i),\n            \"-\" => println!(\"[-] subtract {}\", operand_i),\n\
    \            \"*\" => println!(\"[*] multiply {}\", operand_i),\n            \"\
    /\" => println!(\"[/] floor divide {}\", operand_i),\n            \"**\" => println!(\"\
    [**] raise to power {}\", operand_i),\n            _ => println!(\"unknown operator\
    \ {}\", oper),\n        };\n    });\n\n    // construct algebric expression\n\
    \    let algebric_expression = operator[0] as String;\n    let operand1 = operand[0]\
    \ as isize;\n    let operand2 = operand[1] as isize;\n\n    if algebric_expression\
    \ == \"+\" {\n        println!(\"[+] add {}\", operand1);\n        println!(\"\
    [+] add {}\", operand2);\n        println!(\"result = {:?}\", operand1 + operand2);\n\
    \    } else if algebric_expression == \"-\" {\n        println!(\"[-] subtract\
    \ {}\", operand1);\n        println!(\"[-] subtract {}\", operand2);\n       \
    \ println!(\"result = {:?}\", operand1 - operand2);\n    } else if algebric_expression\
    \ == \"*\" {\n        println!(\"[*] multiply {}\", operand1);\n        println!(\"\
    [*] multiply {}\", operand2);\n        println!(\"result = {:?}\", operand1 *\
    \ operand2);\n    } else if algebric_expression == \"/\" {\n        println!(\"\
    [/] floor divide {}\", operand1);\n        println!(\"[/] floor divide {}\", operand2);\n\
    \        println!(\"result = {:?}\", operand1 / operand2);\n    } else if algebric_expression\
    \ == \"**\" {\n        println!(\"[**] raise to power {}\", operand1);\n     \
    \   println!(\"[**] raise to power {}\", operand2);\n        println!(\"result\
    \ = {:?}\", operand1 ** operand2);\n    } else {\n        println!(\"unknown algebric\
    \ expression {}\", algebric_expression);\n    }\n    return operand1 + operand2;\n\
    \n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `exit` in this scope\n  --> /tmp/tmp93a_fm6s.rs:23:9\n\
    \   |\n23 |         exit(1);\n   |         ^^^^ not found in this scope\n   |\n\
    help: consider importing this function\n   |\n1  | use std::process::exit;\n \
    \  |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp93a_fm6s.rs:29:13\n   |\n\
    28 |         match oper {\n   |               ---- this expression has type `&String`\n\
    29 |             \"+\" => println!(\"[+] add {}\", operand_i),\n   |         \
    \    ^^^ expected struct `String`, found `str`\n   |\n   = note: expected reference\
    \ `&String`\n              found reference `&'static str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp93a_fm6s.rs:30:13\n   |\n28 |         match oper {\n  \
    \ |               ---- this expression has type `&String`\n29 |             \"\
    +\" => println!(\"[+] add {}\", operand_i),\n30 |             \"-\" => println!(\"\
    [-] subtract {}\", operand_i),\n   |             ^^^ expected struct `String`,\
    \ found `str`\n   |\n   = note: expected reference `&String`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp93a_fm6s.rs:31:13\n\
    \   |\n28 |         match oper {\n   |               ---- this expression has\
    \ type `&String`\n...\n31 |             \"*\" => println!(\"[*] multiply {}\"\
    , operand_i),\n   |             ^^^ expected struct `String`, found `str`\n  \
    \ |\n   = note: expected reference `&String`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp93a_fm6s.rs:32:13\n  \
    \ |\n28 |         match oper {\n   |               ---- this expression has type\
    \ `&String`\n...\n32 |             \"/\" => println!(\"[/] floor divide {}\",\
    \ operand_i),\n   |             ^^^ expected struct `String`, found `str`\n  \
    \ |\n   = note: expected reference `&String`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp93a_fm6s.rs:33:13\n  \
    \ |\n28 |         match oper {\n   |               ---- this expression has type\
    \ `&String`\n...\n33 |             \"**\" => println!(\"[**] raise to power {}\"\
    , operand_i),\n   |             ^^^^ expected struct `String"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut operations = Vec::new();\n    let\
    \ mut temp = operand.clone();\n    let mut result = 0.0;\n    let mut i = 0.0;\n\
    \    while i <= operand.len() {\n        if operations.len() > 0 {\n         \
    \   if operations[0] == \"-\" {\n                operations.remove(0).unwrap();\n\
    \                temp = &temp[i..i + (temp.len() - i)];\n            } else {\n\
    \                result -= temp[i];\n            }\n        } else {\n       \
    \     let operator = operator[i / 2];\n            if operator == \"+\" {\n  \
    \              result += (temp[i]);\n            } else if operator == \"-\" {\n\
    \                result -= (temp[i]);\n            } else if operator == \"*\"\
    \ {\n                result += (temp[i]);\n            } else if operator == \"\
    //\" {\n                result /= temp[i];\n            } else if operator ==\
    \ \"**\" {\n                result *= temp[i];\n            } else {\n       \
    \         panic!(\"Unknown operation in algebra: \\\"{:?}\\\", at index {}\",\
    \ operator, i);\n            }\n        }\n        i += 2;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpxtzmud2y.rs:35:27\n\
    \   |\n35 |                 result += (temp[i]);\n   |                       \
    \    ^       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp:\
    \ remove these parentheses\n   |\n35 -                 result += (temp[i]);\n\
    35 +                 result += temp[i];\n   | \n\nwarning: unnecessary parentheses\
    \ around assigned value\n  --> /tmp/tmpxtzmud2y.rs:37:27\n   |\n37 |         \
    \        result -= (temp[i]);\n   |                           ^       ^\n   |\n\
    help: remove these parentheses\n   |\n37 -                 result -= (temp[i]);\n\
    37 +                 result -= temp[i];\n   | \n\nwarning: unnecessary parentheses\
    \ around assigned value\n  --> /tmp/tmpxtzmud2y.rs:39:27\n   |\n39 |         \
    \        result += (temp[i]);\n   |                           ^       ^\n   |\n\
    help: remove these parentheses\n   |\n39 -                 result += (temp[i]);\n\
    39 +                 result += temp[i];\n   | \n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxtzmud2y.rs:24:16\n   |\n24 |     while i <= operand.len() {\n\
    \   |                ^^^^^^^^^^^^^ expected floating-point number, found `usize`\n\
    \nerror[E0277]: can't compare `{float}` with `usize`\n  --> /tmp/tmpxtzmud2y.rs:24:13\n\
    \   |\n24 |     while i <= operand.len() {\n   |             ^^ no implementation\
    \ for `{float} < usize` and `{float} > usize`\n   |\n   = help: the trait `PartialOrd<usize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: cannot subtract `{float}`\
    \ from `usize`\n  --> /tmp/tmpxtzmud2y.rs:28:49\n   |\n28 |                 temp\
    \ = &temp[i..i + (temp.len() - i)];\n   |                                    \
    \             ^ no implementation for `usize - {float}`\n   |\n   = help: the\
    \ trait `Sub<{float}>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let num_operand = operand.len();\n    let\
    \ num_operator = operator.len();\n    if num_operator == 0 {\n        // No operator\
    \ found\n        return 0;\n    }\n    if num_operand < num_operator {\n     \
    \   println!(\"The number of operands is less than the number of operators!\"\
    );\n    }\n    let mut result = operand[0];\n    for i in 1..num_operand - 1 {\n\
    \        result = operator[num_operator - 1 - i] * result;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `String` by `isize`\n  --> /tmp/tmpfwujecnr.rs:31:49\n\
    \   |\n31 |         result = operator[num_operator - 1 - i] * result;\n   |  \
    \                ------------------------------ ^ ------ isize\n   |         \
    \         |\n   |                  String\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    operator.iter().for_each(|operator|\
    \ {\n        result += operand.iter().for_each(|operand| {\n            if operator\
    \ == \"+\" {\n                result + operand\n            } else if operator\
    \ == \"-\" {\n                result - operand\n            } else if operator\
    \ == \"*\" {\n                result * operand\n            } else if operator\
    \ == \"/\" {\n                result / operand\n            } else if operator\
    \ == \"**\" {\n                result ** operand\n            }\n        })\n\
    \    })\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `result`\n  --> /tmp/tmpbdzae94m.rs:35:7\n \
    \  |\n35 |     })\n   |       ^ help: add `;` here\n36 |     result\n   |    \
    \ ------ unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbdzae94m.rs:24:17\n\
    \   |\n23 | /             if operator == \"+\" {\n24 | |                 result\
    \ + operand\n   | |                 ^^^^^^^^^^^^^^^^ expected `()`, found `isize`\n\
    25 | |             } else if operator == \"-\" {\n26 | |                 result\
    \ - operand\n...  |\n32 | |                 result ** operand\n33 | |        \
    \     }\n   | |_____________- expected this to be `()`\n   |\nhelp: consider using\
    \ a semicolon here\n   |\n33 |             };\n   |              +\nhelp: you\
    \ might have meant to return this value\n   |\n24 |                 return result\
    \ + operand;\n   |                 ++++++                 +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbdzae94m.rs:26:17\n   |\n25 |               } else if operator\
    \ == \"-\" {\n   |  ____________________-\n26 | |                 result - operand\n\
    \   | |                 ^^^^^^^^^^^^^^^^ expected `()`, found `isize`\n27 | |\
    \             } else if operator == \"*\" {\n28 | |                 result * operand\n\
    ...  |\n32 | |                 result ** operand\n33 | |             }\n   | |_____________-\
    \ expected this to be `()`\n   |\nhelp: consider using a semicolon here\n   |\n\
    33 |             };\n   |              +\nhelp: you might have meant to return\
    \ this value\n   |\n26 |                 return result - operand;\n   |      \
    \           ++++++                 +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpbdzae94m.rs:28:17\n   |\n27 |               } else if operator == \"\
    *\" {\n   |  ____________________-\n28 | |                 result * operand\n\
    \   | |                 ^^^^^^^^^^^^^^^^ expected `()`, found `isize`\n29 | |\
    \             } else if operator == \"/\" {\n30 | |                 result / operand\n\
    31 | |             } else if operator == \"**\" {\n32 | |                 result\
    \ ** operand\n33 | |             }\n   | |_____________- expected this to be `()`\n\
    \   |\nhelp: consider using a semicolon here\n   "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        result += operand[operator.index(i)] * operator[i];\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `index` found for struct `Vec<String>` in\
    \ the current scope\n  --> /tmp/tmp3v9juw8a.rs:22:36\n   |\n22 |         result\
    \ += operand[operator.index(i)] * operator[i];\n   |                         \
    \           ^^^^^ method not found in `Vec<String>`\n   |\n   = help: items from\
    \ traits can only be used if the trait is in scope\nhelp: the following trait\
    \ is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use\
    \ std::ops::Index;\n   |\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() != operand.len() - 1\
    \ {\n        panic!(\"length of operator list is different from operand list\"\
    );\n    }\n    let mut op = operator[..operator.len()];\n    let mut op_number\
    \ = 0;\n    let mut operands = operand[..operand.len()];\n    let mut result:\
    \ isize = 0;\n    for num in &mut operands {\n        match op.pop() {\n     \
    \       \"+\" => result += num,\n            \"-\" => result -= num,\n       \
    \     \"*\" => result *= num,\n            \"//\" => result /= num,\n        \
    \    \"**\" => result **= num,\n            _ => panic!(\"unexpected operator\"\
    ),\n        }\n        op_number += 1;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpuorqg03z.rs:33:29\n\
    \   |\n33 |             \"**\" => result **= num,\n   |                  --  \
    \       ^^ expected expression\n   |                  |\n   |                \
    \  while parsing the `match` arm starting here\n\nerror[E0277]: the size for values\
    \ of type `[String]` cannot be known at compilation time\n  --> /tmp/tmpuorqg03z.rs:23:9\n\
    \   |\n23 |     let mut op = operator[..operator.len()];\n   |         ^^^^^^\
    \ doesn't have a size known at compile-time\n   |\n   = help: the trait `Sized`\
    \ is not implemented for `[String]`\n   = note: all local variables must have\
    \ a statically known size\n   = help: unsized locals are gated as an unstable\
    \ feature\nhelp: consider borrowing here\n   |\n23 |     let mut op = &operator[..operator.len()];\n\
    \   |                  +\n\nerror[E0277]: the size for values of type `[isize]`\
    \ cannot be known at compilation time\n  --> /tmp/tmpuorqg03z.rs:25:9\n   |\n\
    25 |     let mut operands = operand[..operand.len()];\n   |         ^^^^^^^^^^^^\
    \ doesn't have a size known at compile-time\n   |\n   = help: the trait `Sized`\
    \ is not implemented for `[isize]`\n   = note: all local variables must have a\
    \ statically known size\n   = help: unsized locals are gated as an unstable feature\n\
    help: consider borrowing here\n   |\n25 |     let mut operands = &operand[..operand.len()];\n\
    \   |                        +\n\nerror[E0599]: no method named `pop` found for\
    \ slice `[String]` in the current scope\n  --> /tmp/tmpuorqg03z.rs:28:18\n   |\n\
    28 |         match op.pop() {\n   |                  ^^^ method not found in `[String]`\n\
    \nerror[E0277]: cannot add-assign `&mut isize` to `isize`\n  --> /tmp/tmpuorqg03z.rs:29:27\n\
    \   |\n29 |             \"+\" => result += num,\n   |                        \
    \   ^^ no implementation for `isize += &mut isize`\n   |\n   = help: the trait\
    \ `AddAssign<&mut isize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \   "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operand.len() < 2 {\n        panic!(\"\
    Error: invalid operand list size!\");\n    }\n\n    for _ in 0..operand.len()\
    \ {\n        if !operand.is_sorted()\n        {\n            operand.sort_unstable();\n\
    \        }\n    }\n\n    if !operator.is_sorted()\n    {\n        operator.sort_unstable();\n\
    \    }\n\n    let mut expr: isize = 0;\n    let mut operator_index: usize = 0;\n\
    \    let mut prev_op_index: usize = 0;\n\n    for op in &operator[0..operand.len()\
    \ - 1]\n    {\n        if operator_index < prev_op_index\n        {\n        \
    \    expr += operand[operator_index];\n        }\n\n        if op == operator[operator_index]\
    \ {\n            operator_index += 1;\n        }\n        else if op == operator[prev_op_index]\
    \ {\n            expr -= operand[operator_index];\n            prev_op_index +=\
    \ 1;\n        }\n        else {\n            expr *= operand[operator_index];\n\
    \            operator_index += 1;\n            prev_op_index += 1;\n        }\n\
    \    }\n\n    if prev_op_index < operand.len() {\n        expr *= operand[prev_op_index];\n\
    \    }\n\n    return expr;\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0658]: use of unstable library feature 'is_sorted': new API\n  -->\
    \ /tmp/tmptdec9hy1.rs:25:21\n   |\n25 |         if !operand.is_sorted()\n   |\
    \                     ^^^^^^^^^\n   |\n   = note: see issue #53485 <https://github.com/rust-lang/rust/issues/53485>\
    \ for more information\n\nerror[E0658]: use of unstable library feature 'is_sorted':\
    \ new API\n  --> /tmp/tmptdec9hy1.rs:31:18\n   |\n31 |     if !operator.is_sorted()\n\
    \   |                  ^^^^^^^^^\n   |\n   = note: see issue #53485 <https://github.com/rust-lang/rust/issues/53485>\
    \ for more information\n\nerror[E0277]: can't compare `&String` with `String`\n\
    \  --> /tmp/tmptdec9hy1.rs:47:15\n   |\n47 |         if op == operator[operator_index]\
    \ {\n   |               ^^ no implementation for `&String == String`\n   |\n \
    \  = help: the trait `PartialEq<String>` is not implemented for `&String`\n  \
    \ = help: the following other types implement trait `PartialEq<Rhs>`:\n      \
    \       <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror[E0277]: can't compare\
    \ `&String` with `String`\n  --> /tmp/tmptdec9hy1.rs:50:20\n   |\n50 |       \
    \  else if op == operator[prev_op_index] {\n   |                    ^^ no implementation\
    \ for `&String == String`\n   |\n   = help: the trait `PartialEq<String>` is not\
    \ implemented for `&String`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n         \
    \    <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror: aborting due to "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut operator = operator;\n    let mut\
    \ operand = operand;\n    \n    while operator.len() > 0 && operand.len() > 0\
    \ {\n        if operator.len() == 1 {\n            return operand.last() * operator[0].parse::<i32>().unwrap();\n\
    \        }\n        if operand.len() == 1 {\n            return operand.last().parse::<i32>().unwrap()\
    \ * operator[0].parse::<i32>().unwrap();\n        }\n        \n        if operator[0].parse::<i32>().unwrap()\
    \ >= 0 {\n            let mut tmp1 = operand.last().parse::<i32>().unwrap() *\
    \ operator[0].parse::<i32>().unwrap();\n            let mut tmp2 = operand.last().parse::<i32>().unwrap()\
    \ * operator[0].parse::<i32>().unwrap();\n            for _ in 0..(operator[0].parse::<i32>().unwrap()\
    \ - 1) {\n                tmp1 = operand.last().parse::<i32>().unwrap() + tmp2;\n\
    \                tmp2 = operand.last().parse::<i32>().unwrap() + tmp2;\n     \
    \       }\n            return tmp1;\n        } else {\n            let mut tmp1\
    \ = operand.last().parse::<i32>().unwrap() * operator[0].parse::<i32>().unwrap();\n\
    \            let mut tmp2 = operand.last().parse::<i32>().unwrap() * operator[0].parse::<i32>().unwrap();\n\
    \            for _ in 0..(operator[0].parse::<i32>().unwrap() - 1) {\n       \
    \         tmp1 = operand.last().parse::<i32>().unwrap() + tmp2;\n            \
    \    tmp2 = operand.last().parse::<i32>().unwrap() + tmp2;\n            }\n  \
    \          return tmp2;\n        }\n    }\n    \n    0\n}\n\nfn main() {\n   \
    \ let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"\
    ), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `Option<&isize>` by `i32`\n  --> /tmp/tmplau4sm_e.rs:25:35\n\
    \   |\n25 |             return operand.last() * operator[0].parse::<i32>().unwrap();\n\
    \   |                    -------------- ^ -----------------------------------\
    \ i32\n   |                    |\n   |                    Option<&isize>\n\nerror[E0599]:\
    \ no method named `parse` found for enum `Option` in the current scope\n  -->\
    \ /tmp/tmplau4sm_e.rs:28:35\n   |\n28 |             return operand.last().parse::<i32>().unwrap()\
    \ * operator[0].parse::<i32>().unwrap();\n   |                               \
    \    ^^^^^ method not found in `Option<&isize>`\n\nerror[E0599]: no method named\
    \ `parse` found for enum `Option` in the current scope\n  --> /tmp/tmplau4sm_e.rs:32:43\n\
    \   |\n32 |             let mut tmp1 = operand.last().parse::<i32>().unwrap()\
    \ * operator[0].parse::<i32>().unwrap();\n   |                               \
    \            ^^^^^ method not found in `Option<&isize>`\n\nerror[E0599]: no method\
    \ named `parse` found for enum `Option` in the current scope\n  --> /tmp/tmplau4sm_e.rs:33:43\n\
    \   |\n33 |             let mut tmp2 = operand.last().parse::<i32>().unwrap()\
    \ * operator[0].parse::<i32>().unwrap();\n   |                               \
    \            ^^^^^ method not found in `Option<&isize>`\n\nerror[E0599]: no method\
    \ named `parse` found for enum `Option` in the current scope\n  --> /tmp/tmplau4sm_e.rs:35:39\n\
    \   |\n35 |                 tmp1 = operand.last().parse::<i32>().unwrap() + tmp2;\n\
    \   |                                       ^^^^^ method not found in `Option<&isize>`\n\
    \nerror[E0599]: no method named `parse` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmplau4sm_e.rs:36:39\n   |\n36 |                 tmp2 = operand.last().parse::<i32>().unwrap()\
    \ + tmp2;\n   |                                       ^^^^^ method not found in\
    \ `Option<&isize>`\n\nerror[E0599]: no method named `parse` found for enum `Option`\
    \ in the current scope\n  --> /tmp/tmplau4sm_e.rs:40:43\n   |\n40 |          \
    \   let mut tmp1 = operand.last().parse::<i32>().unwrap() * operator[0].parse::<i32>()"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // check input\n    let mut num_operand\
    \ = operand.len();\n    let mut num_operator = operator.len();\n    let mut result\
    \ = operand[0];\n    while num_operand > 0 || num_operator > 0 {\n        if num_operand\
    \ > 0 {\n            // first operand is greater than 0, so do simple arithmetic\
    \ operation\n            if num_operator == 0 {\n                num_operand--;\
    \ // remove one operand\n                result = operand[0] + result;\n     \
    \       }\n            else if num_operand > 0 {\n                // do binary\
    \ arithmetic operation\n                result = operand[0] * result + operand[num_operand\
    \ - 1];\n                num_operand--;\n                num_operator--;\n   \
    \         }\n        }\n        else if num_operator > 0 {\n            // first\
    \ operator is greater than 0, so do binary arithmetic operation\n            if\
    \ num_operand == 0 {\n                num_operator--; // remove one operator\n\
    \                result = operand[0] * result + operand[num_operator - 1];\n \
    \           }\n            else if num_operator > 0 {\n                // do simple\
    \ arithmetic operation\n                result = operand[num_operator] * result\
    \ + operand[num_operator - 1];\n                num_operator--;\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpy8ctc0xy.rs:28:30\n\
    \   |\n28 |                 num_operand--; // remove one operand\n   |       \
    \                       ^ expected expression\n\nerror: expected expression, found\
    \ `;`\n  --> /tmp/tmpy8ctc0xy.rs:34:30\n   |\n34 |                 num_operand--;\n\
    \   |                              ^ expected expression\n\nerror: expected expression,\
    \ found `;`\n  --> /tmp/tmpy8ctc0xy.rs:41:31\n   |\n41 |                 num_operator--;\
    \ // remove one operator\n   |                               ^ expected expression\n\
    \nerror: expected expression, found `;`\n  --> /tmp/tmpy8ctc0xy.rs:47:31\n   |\n\
    47 |                 num_operator--;\n   |                               ^ expected\
    \ expression\n\nerror: aborting due to 4 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut op = operand.clone();\n    op.sort_unstable();\n\
    \    if operator.len() == 2 {\n        if op.len() == 2 {\n            let mut\
    \ a = op.clone();\n            let mut b = op.clone();\n            a.sort_unstable();\n\
    \            b.sort_unstable();\n            let mut result = a.iter().cloned().fold((0.),\
    \ |r, x| {\n                match x {\n                    0 => r,\n         \
    \           1 => r + b,\n                    2 => r + r + b,\n               \
    \     3 => r + r + r + b,\n                    _ => unreachable!(),\n        \
    \        }\n            });\n            result\n        } else {\n          \
    \  unreachable!()\n        }\n    } else {\n        unreachable!()\n    }\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around method argument\n  --> /tmp/tmplstzv2l2.rs:28:53\n\
    \   |\n28 |             let mut result = a.iter().cloned().fold((0.), |r, x| {\n\
    \   |                                                     ^  ^\n   |\n   = note:\
    \ `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n\
    28 -             let mut result = a.iter().cloned().fold((0.), |r, x| {\n28 +\
    \             let mut result = a.iter().cloned().fold(0., |r, x| {\n   | \n\n\
    error[E0277]: cannot add `Vec<isize>` to `{float}`\n  --> /tmp/tmplstzv2l2.rs:31:28\n\
    \   |\n31 |                     1 => r + b,\n   |                            ^\
    \ no implementation for `{float} + Vec<isize>`\n   |\n   = help: the trait `Add<Vec<isize>>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: cannot add `Vec<isize>` to `{float}`\n\
    \  --> /tmp/tmplstzv2l2.rs:32:32\n   |\n32 |                     2 => r + r +\
    \ b,\n   |                                ^ no implementation for `{float} + Vec<isize>`\n\
    \   |\n   = help: the trait `Add<Vec<isize>>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `Vec<isize>` to `{float}`\n  --> /tmp/tmplstzv2l2.rs:33:36\n   |\n\
    33 |                     3 => r + r + r + b,\n   |                           \
    \         ^ no implementation for `{float} + Vec<isize>`\n   |\n   = help: the\
    \ trait `Add<Vec<isize>"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for i in operator.iter().rev() {\n        match i {\n            \"+\" => result\
    \ = result + result[0],\n            \"-\" => result = result - result[0],\n \
    \           \"*\" => result = result * result[0],\n            \"//\" => result\
    \ = result // result[0],\n            \"**\" => result = result ** result[0],\n\
    \            _ => panic!(\"Invalid operation: {}\", i),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `\"**\"`\n  --> /tmp/tmp378v2q7f.rs:27:13\n   |\n26 |             \"//\"\
    \ => result = result // result[0],\n   |                  --                -\
    \ expected one of 8 possible tokens\n   |                  |\n   |           \
    \       while parsing the `match` arm starting here\n27 |             \"**\" =>\
    \ result = result ** result[0],\n   |             ^^^^ unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp378v2q7f.rs:23:13\n   |\n22 |         match\
    \ i {\n   |               - this expression has type `&String`\n23 |         \
    \    \"+\" => result = result + result[0],\n   |             ^^^ expected struct\
    \ `String`, found `str`\n   |\n   = note: expected reference `&String`\n     \
    \         found reference `&'static str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp378v2q7f.rs:24:13\n   |\n22 |         match i {\n   |          \
    \     - this expression has type `&String`\n23 |             \"+\" => result =\
    \ result + result[0],\n24 |             \"-\" => result = result - result[0],\n\
    \   |             ^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected reference `&String`\n              found reference `&'static str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp378v2q7f.rs:25:13\n   |\n22 |\
    \         match i {\n   |               - this expression has type `&String`\n\
    ...\n25 |             \"*\" => result = result * result[0],\n   |            \
    \ ^^^ expected struct `String`, found `str`\n   |\n   = note: expected reference\
    \ `&String`\n              found reference `&'static str`\n\nerror[E0369]: cannot\
    \ add `isize` to `Vec<isize>`\n  --> /tmp/tmp378v2q7f.rs:23:36\n   |\n23 |   \
    \          \"+\" => result = result + result[0],\n   |                       \
    \      ------ ^ --------- isize\n   |                             |\n   |    \
    \                         Vec<isize>\n\nerror[E0369]: cannot subtract `isize`\
    \ from `Vec<isize>`\n  --> /tmp/tmp378v2q7f.rs:24:36\n   |\n24 |             \"\
    -\" => result = result - result[0],\n   |                             ------ ^\
    \ --------- isize\n   |               "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Convert string operands into integer\
    \ values\n    let mut value = 0;\n    for val in operand {\n        value += val;\n\
    \    }\n\n    let mut operator_index = 0;\n    let mut result = 1;\n    for operator\
    \ in operator {\n        if operator == \"+\" {\n            result += value;\n\
    \        } else if operator == \"-\" {\n            result -= value;\n       \
    \ } else if operator == \"*\" {\n            result *= value;\n        } else\
    \ if operator == \"//\" {\n            result /= value;\n        } else if operator\
    \ == \"**\" {\n            result **= value;\n        }\n        operator_index\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmphclw72xp.rs:38:21\n\
    \   |\n38 |             result **= value;\n   |                     ^^ expected\
    \ expression\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() != operand.len() - 1\
    \ {\n        panic!(\"The length of operator list is different than length of\
    \ operand list\");\n    }\n    let mut result = operand.iter().sum();\n    \n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ = result / operand.iter().sum(),\n            \"**\" => result = result ** operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {:?}\", op),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeamp4r1c.rs:27:13\n   |\n\
    26 |         match op {\n   |               -- this expression has type `String`\n\
    27 |             \"+\" => result += operand.iter().sum(),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpeamp4r1c.rs:28:13\n   |\n26 |         match op {\n   |         \
    \      -- this expression has type `String`\n27 |             \"+\" => result\
    \ += operand.iter().sum(),\n28 |             \"-\" => result -= operand.iter().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpeamp4r1c.rs:29:13\n   |\n26 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n29 |   \
    \          \"*\" => result *= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeamp4r1c.rs:30:13\n\
    \   |\n26 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n30 |             \"//\" => result = result / operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpeamp4r1c.rs:31:13\n   |\n26 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n31 |   \
    \          \"**\" => result = result ** operand.iter().sum(),\n   |          \
    \   ^^^^ expected struct `String`, found `&str`\n\nerror: aborting due to 5 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let operator_size = operator.len() - 1;\n\
    \    let mut result = 0;\n    for i in 0..operator_size {\n        let operator\
    \ = operator[i];\n        let mut operand0 = operand[i];\n        let mut operand1\
    \ = operand[i + 1];\n        match operator {\n            \"+\" => {\n      \
    \          result += operand0 + operand1;\n            }\n            \"-\" =>\
    \ {\n                result -= operand0 - operand1;\n            }\n         \
    \   \"*\" => {\n                result *= operand0;\n            }\n         \
    \   \"/\" => {\n                result = result / operand0;\n            }\n \
    \           \"**\" => {\n                result = result ** operand0;\n      \
    \      }\n            _ => panic!(\"Invalid Operator!\");\n        }\n    }\n\
    \    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: `match` arm body without braces\n  --> /tmp/tmpvc1nv0c3.rs:42:18\n\
    \   |\n42 |             _ => panic!(\"Invalid Operator!\");\n   |            \
    \   -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: use a comma to end a `match` arm expression:\
    \ `,`\n   |               |  |\n   |               |  this statement is not surrounded\
    \ by a body\n   |               while parsing the `match` arm starting here\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpvc1nv0c3.rs:27:13\n   |\n26 |  \
    \       match operator {\n   |               -------- this expression has type\
    \ `String`\n27 |             \"+\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvc1nv0c3.rs:30:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n30 |             \"-\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvc1nv0c3.rs:33:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n33 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvc1nv0c3.rs:36:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n36 |             \"/\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvc1nv0c3.rs:39:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n39 |             \"**\" => {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n  --> /tmp/tmpvc1nv0c3.rs:40:34\n   |\n40 |               \
    \  result = result ** operand0;\n   |                                  ^^^^^^^^^^\n\
    \nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Your code here\n    \n    let mut result\
    \ = operand[0];\n    for num in operand {\n        for op in operator {\n    \
    \        result = result + num;\n        }\n    }\n    return result;\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `op`\n  --> /tmp/tmp5p3asji4.rs:24:13\n   |\n\
    24 |         for op in operator {\n   |             ^^ help: if this is intentional,\
    \ prefix it with an underscore: `_op`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0382]: use of moved value: `operator`\n   --> /tmp/tmp5p3asji4.rs:24:19\n\
    \    |\n19  | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n    |               -------- move occurs because `operator` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n...\n24  |         for op in operator\
    \ {\n    |                   ^^^^^^^^ `operator` moved due to this implicit call\
    \ to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `operator`\nhelp: consider\
    \ iterating over a slice of the `Vec<String>`'s content to avoid moving into the\
    \ `for` loop\n    |\n24  |         for op in &operator {\n    |              \
    \     +\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() != operand.len() - 1\
    \ {\n        println!(\"Invalid input, wrong operator or operand. Operator {},\
    \ operand {}\", operator, operand);\n        return -1;\n    }\n\n    let mut\
    \ result = 0;\n    for i in 0..operator.len() {\n        match operator[i] {\n\
    \            \"+\" => {\n                result += operand[i];\n            }\n\
    \            \"-\" => {\n                result -= operand[i];\n            }\n\
    \            \"*\" => {\n                result *= operand[i];\n            }\n\
    \            \"/\" => {\n                result = result // operand[i];\n    \
    \        }\n            \"**\" => {\n                result = result ** operand[i];\n\
    \            }\n            other => {\n                return -1;\n         \
    \   }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: `Vec<String>` doesn't implement `std::fmt::Display`\n  -->\
    \ /tmp/tmpcbnwo6z3.rs:21:87\n   |\n21 |         println!(\"Invalid input, wrong\
    \ operator or operand. Operator {}, operand {}\", operator, operand);\n   |  \
    \                                                                            \
    \         ^^^^^^^^ `Vec<String>` cannot be formatted with the default formatter\n\
    \   |\n   = help: the trait `std::fmt::Display` is not implemented for `Vec<String>`\n\
    \   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print)\
    \ instead\n   = note: this error originates in the macro `$crate::format_args_nl`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]:\
    \ `Vec<isize>` doesn't implement `std::fmt::Display`\n  --> /tmp/tmpcbnwo6z3.rs:21:97\n\
    \   |\n21 |         println!(\"Invalid input, wrong operator or operand. Operator\
    \ {}, operand {}\", operator, operand);\n   |                                \
    \                                                                 ^^^^^^^ `Vec<isize>`\
    \ cannot be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display`\
    \ is not implemented for `Vec<isize>`\n   = note: in format strings you may be\
    \ able to use `{:?}` (or {:#?} for pretty-print) instead\n   = note: this error\
    \ originates in the macro `$crate::format_args_nl` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcbnwo6z3.rs:27:15\n\
    \   |\n27 |         match operator[i] {\n   |               ^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpcbnwo6z3.rs:41:34\n   |\n41 |                 result = result **\
    \ operand[i];\n   |                                  ^^^^^^^^^^^^\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // The first element in the vector is the\
    \ operator and the second is the operand. \n    // The third element in the vector\
    \ is the result.\n    let mut result = operand.first();\n\n    for operator in\
    \ operator {\n        result *= operand.last();\n        match operator {\n  \
    \          \"+\" => result += operand.last(),\n            \"-\" => result -=\
    \ operand.last(),\n            \"*\" => result *= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"unknown operator: \\\"{}\\\"\", operator),\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n \
    \   assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp0pz4lntg.rs:31:29\n\
    \   |\n31 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0368]: binary\
    \ assignment operation `*=` cannot be applied to type `Option<&isize>`\n  -->\
    \ /tmp/tmp0pz4lntg.rs:25:9\n   |\n25 |         result *= operand.last();\n   |\
    \         ------^^^^^^^^^^^^^^^^^^\n   |         |\n   |         cannot use `*=`\
    \ on type `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0pz4lntg.rs:27:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n27 |             \"+\" => result += operand.last(),\n   |\
    \             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0pz4lntg.rs:28:13\n   |\n26 |         match operator {\n\
    \   |               -------- this expression has type `String`\n27 |         \
    \    \"+\" => result += operand.last(),\n28 |             \"-\" => result -= operand.last(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0pz4lntg.rs:29:13\n   |\n26 |         match\
    \ operator {\n   |               -------- this expression has type `String`\n\
    ...\n29 |             \"*\" => result *= operand.last(),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp0pz4lntg.rs:30:13\n   |\n26 |         match operator {\n   |   \
    \            -------- this expression has type `String`\n...\n30 |           \
    \  \"//\" => result /= operand.last(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `Option<&isize>`\n  --> /tmp/tmp0pz4lntg.rs:27:20\n   |\n\
    27 |             \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operat"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    \n    let mut result = 0;\n\n    let mut\
    \ temp_operand = operand.clone();\n    let mut temp_operator = operator.clone();\n\
    \n    for element in temp_operand {\n        result += element;\n    }\n\n   \
    \ for element in temp_operator {\n        result -= element;\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot subtract-assign `String` from `isize`\n  --> /tmp/tmp4lvgyk44.rs:31:16\n\
    \   |\n31 |         result -= element;\n   |                ^^ no implementation\
    \ for `isize -= String`\n   |\n   = help: the trait `SubAssign<String>` is not\
    \ implemented for `isize`\n   = help: the following other types implement trait\
    \ `SubAssign<Rhs>`:\n             <f32 as SubAssign<&f32>>\n             <f32\
    \ as SubAssign>\n             <f64 as SubAssign<&f64>>\n             <f64 as SubAssign>\n\
    \             <i128 as SubAssign<&i128>>\n             <i128 as SubAssign>\n \
    \            <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n     \
    \      and 20 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut op = operator[0];\n    let mut\
    \ res = 0;\n    for &x in operand {\n        match op {\n            \"+\" =>\
    \ {\n                res += x;\n            }\n            \"-\" => {\n      \
    \          res -= x;\n            }\n            \"*\" => {\n                res\
    \ *= x;\n            }\n            \"//\" => {\n                res = res / x;\n\
    \            }\n            \"**\" => {\n                res = res as isize*x\
    \ as isize;\n            }\n            _ => {}\n        }\n        op = operator[1];\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmx90xldm.rs:22:9\n   |\n\
    22 |     for &x in operand {\n   |         ^^    ------- this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `x`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmx90xldm.rs:24:13\n   |\n23 |         match\
    \ op {\n   |               -- this expression has type `String`\n24 |        \
    \     \"+\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmx90xldm.rs:27:13\n   |\n23 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"-\" => {\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmx90xldm.rs:30:13\n\
    \   |\n23 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n30 |             \"*\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmx90xldm.rs:33:13\n\
    \   |\n23 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n33 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmx90xldm.rs:36:13\n\
    \   |\n23 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n36 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    debug!(\n        \"do_algebra: {:?}, {:?}\"\
    ,\n        operator,\n        operand\n    );\n\n    let mut num_operands = operand.len();\n\
    \n    let mut num_operators = operator.len();\n\n    let mut result: isize = 0;\n\
    \    loop {\n        let mut operator_index = num_operators;\n        let mut\
    \ operand_index = num_operands;\n\n        if operand_index >= 2 {\n         \
    \   operator_index -= 1;\n            operand_index -= 1;\n        }\n\n     \
    \   if operator_index >= 1 {\n            result += operand[operand_index - 1].pow(operator[operator_index\
    \ - 1]);\n        }\n\n        if operator_index == 0 {\n            break;\n\
    \        }\n\n        if operator_index < num_operators {\n            result\
    \ += operand[operand_index - 1].pow(operator[operator_index]);\n        }\n\n\
    \        if operand_index < num_operands {\n            result += operand[operand_index].pow(operator[0]);\n\
    \        }\n\n        num_operands = operand_index;\n        num_operators = operator_index;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: cannot find macro `debug` in this scope\n  --> /tmp/tmpy2lniv50.rs:20:5\n\
    \   |\n20 |     debug!(\n   |     ^^^^^\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpy2lniv50.rs:41:54\n   |\n41 |             result += operand[operand_index\
    \ - 1].pow(operator[operator_index - 1]);\n   |                              \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u32`, found struct\
    \ `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy2lniv50.rs:49:54\n\
    \   |\n49 |             result += operand[operand_index - 1].pow(operator[operator_index]);\n\
    \   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `u32`, found struct `String`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpy2lniv50.rs:53:50\n   |\n53 |             result += operand[operand_index].pow(operator[0]);\n\
    \   |                                                  ^^^^^^^^^^^ expected `u32`,\
    \ found struct `String`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() != operand.len() - 1\
    \ {\n        println!(\"Error: Invalid Operator or Operand list!\");\n       \
    \ return -1;\n    }\n    let mut result = operand[0].clone();\n    for &i in operand\
    \ {\n        let mut tmp: isize = 1;\n        for &operator in operator {\n  \
    \          match operator {\n                \"+\" => tmp = tmp + i,\n       \
    \         \"-\" => tmp = tmp - i,\n                \"*\" => tmp = tmp * i,\n \
    \               \"/\" => tmp = tmp / i,\n                \"**\" => tmp = tmp **\
    \ i,\n                _ => println!(\"Error: Invalid Operator!\"),\n         \
    \   }\n        }\n        result = tmp;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu8h54mf5.rs:25:9\n   |\n\
    25 |     for &i in operand {\n   |         ^^    ------- this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `i`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu8h54mf5.rs:27:13\n   |\n27 |         for &operator\
    \ in operator {\n   |             ^^^^^^^^^    -------- this expression has type\
    \ `Option<String>`\n   |             |\n   |             expected struct `String`,\
    \ found reference\n   |             help: you can probably remove the explicit\
    \ borrow: `operator`\n   |\n   = note: expected struct `String`\n           found\
    \ reference `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut expr = 0;\n    \n    for (i,op)\
    \ in operator.iter().enumerate() {\n        if let Some(op) = op.as_slice() {\n\
    \            expr += operand[i].as_int + op.as_isize();\n        } else {\n  \
    \          expr += operand[i];\n        }\n    }\n    \n    return expr;\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `as_slice` found for reference `&String`\
    \ in the current scope\n  --> /tmp/tmp08k5vtrl.rs:23:30\n   |\n23 |         if\
    \ let Some(op) = op.as_slice() {\n   |                              ^^^^^^^^ method\
    \ not found in `&String`\n\nerror[E0610]: `isize` is a primitive type and therefore\
    \ doesn't have fields\n  --> /tmp/tmp08k5vtrl.rs:24:32\n   |\n24 |           \
    \  expr += operand[i].as_int + op.as_isize();\n   |                          \
    \      ^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0599, E0610.\nFor more information about an error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    operand.iter().fold(0, |result, i| {\n\
    \        match operator.len() {\n            1 => result + i,\n            2 =>\
    \ result + (i as isize) * operand[0],\n            3 => result + (i as isize)\
    \ * operand[0] * operand[1],\n            4 => result + (i as isize) * operand[0]\
    \ * operand[1] * operand[2],\n            5 => result + (i as isize) * operand[0]\
    \ * operand[1] * operand[2] * operand[3],\n            _ => panic!(\"Cannot evaluate\
    \ algebraic expression with {} operators and {} operands\".to_string(), operator.len(),\
    \ operand.len()),\n        }\n    })\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: format argument must be a string literal\n  --> /tmp/tmprob9caw5.rs:27:25\n\
    \   |\n27 | ...   _ => panic!(\"Cannot evaluate algebraic expression with {} operators\
    \ and {} operands\".to_string(), operator.len(), operand.len()),\n   |       \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |\nhelp: you might be missing a string literal to format with\n   |\n27 |\
    \             _ => panic!(\"{} {} {}\", \"Cannot evaluate algebraic expression\
    \ with {} operators and {} operands\".to_string(), operator.len(), operand.len()),\n\
    \   |                         +++++++++++\n\nerror[E0606]: casting `&isize` as\
    \ `isize` is invalid\n  --> /tmp/tmprob9caw5.rs:23:27\n   |\n23 |            \
    \ 2 => result + (i as isize) * operand[0],\n   |                           ^-^^^^^^^^^^\n\
    \   |                           ||\n   |                           |help: dereference\
    \ the expression: `*i`\n   |                           cannot cast `&isize` as\
    \ `isize`\n\nerror[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmprob9caw5.rs:24:27\n\
    \   |\n24 |             3 => result + (i as isize) * operand[0] * operand[1],\n\
    \   |                           ^-^^^^^^^^^^\n   |                           ||\n\
    \   |                           |help: dereference the expression: `*i`\n   |\
    \                           cannot cast `&isize` as `isize`\n\nerror[E0606]: casting\
    \ `&isize` as `isize` is invalid\n  --> /tmp/tmprob9caw5.rs:25:27\n   |\n25 |\
    \             4 => result + (i as isize) * operand[0] * operand[1] * operand[2],\n\
    \   |                           ^-^^^^^^^^^^\n   |                           ||\n\
    \   |                           |help: dereference the expression: `*i`\n   |\
    \                           cannot cast `&isize` as `isize`\n\nerror[E0606]: casting\
    \ `&isize` as `isize` is invalid\n  --> /tmp/tmprob9caw5.rs:26:27\n   |\n26 |\
    \             5 => result + (i as isize) * operand[0] * operand[1] * operand[2]\
    \ * operand[3],\n   |                           ^-^^^^^^^^^^\n   |           \
    \                ||\n   |                           |help: dereference the exp"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Initialize variables\n    let mut result\
    \ = 0;\n    let mut i = 0;\n    // Check if both operands have the same length\n\
    \    if operand.len() != operator.len() - 1 {\n        return result;\n    }\n\
    \    // If operator = operand\n    if operator.len() == 1 {\n        return operand[0];\n\
    \    }\n    // Iterate through each element of operand list\n    for num in operand\
    \ {\n        let op_iter = operator.iter().nth(i);\n        let num = num as isize;\n\
    \        result += (op_iter as usize) * num;\n        i += 1;\n    }\n    // Return\
    \ result\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0zwe4dba.rs:35:40\n   |\n\
    35 |         result += (op_iter as usize) * num;\n   |                       \
    \                 ^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ multiply `usize` by `isize`\n  --> /tmp/tmp0zwe4dba.rs:35:38\n   |\n35 |   \
    \      result += (op_iter as usize) * num;\n   |                             \
    \         ^ no implementation for `usize * isize`\n   |\n   = help: the trait\
    \ `Mul<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp0zwe4dba.rs:35:19\n   |\n35 |         result += (op_iter as usize)\
    \ * num;\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n\nerror[E0277]: cannot add-assign `usize` to `isize`\n  --> /tmp/tmp0zwe4dba.rs:35:16\n\
    \   |\n35 |         result += (op_iter as usize) * num;\n   |                ^^\
    \ no implementation for `isize += usize`\n   |\n   = help: the trait `AddAssign<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0605]: non-primitive cast: `Option<&String>`\
    \ as `usize`\n  --> /tmp/tmp0zwe4dba.rs:35:19\n   |\n35 |         result += (op_iter\
    \ as usize) * num;\n   |                   ^^^^^^^^^^^^^^^^^^ an `as` expression\
    \ can only be used to convert between primitive types or to coerce to a specific\
    \ trait object\n\nerror: aborting due to 5 previou"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Implement your code here.\n    let mut\
    \ result = 0;\n    operator.iter().for_each(|item| {\n        result += (operand\
    \ as f64) * (operand as f64);\n    })\n    result / operand.last().unwrap_or(0)\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `result`\n  --> /tmp/tmp4qsif2qi.rs:24:7\n \
    \  |\n24 |     })\n   |       ^ help: add `;` here\n25 |     result / operand.last().unwrap_or(0)\n\
    \   |     ------ unexpected token\n\nerror[E0277]: cannot add-assign `f64` to\
    \ `{integer}`\n  --> /tmp/tmp4qsif2qi.rs:23:16\n   |\n23 |         result += (operand\
    \ as f64) * (operand as f64);\n   |                ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4qsif2qi.rs:25:39\n\
    \   |\n25 |     result / operand.last().unwrap_or(0)\n   |                   \
    \                    ^\n   |                                       |\n   |   \
    \                                    expected `&isize`, found integer\n   |  \
    \                                     help: consider borrowing here: `&0`\n\n\
    error[E0605]: non-primitive cast: `Vec<isize>` as `f64`\n  --> /tmp/tmp4qsif2qi.rs:23:19\n\
    \   |\n23 |         result += (operand as f64) * (operand as f64);\n   |     \
    \              ^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert\
    \ between primitive types or to coerce to a specific trait object\n\nerror[E0605]:\
    \ non-primitive cast: `Vec<isize>` as `f64`\n  --> /tmp/tmp4qsif2qi.rs:23:38\n\
    \   |\n23 |         result += (operand as f64) * (operand as f64);\n   |     \
    \                                 ^^^^^^^^^^^^^^^^ an `as` expression can only\
    \ be used to convert between primitive types or to coerce to a specific trait\
    \ object\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0605.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
