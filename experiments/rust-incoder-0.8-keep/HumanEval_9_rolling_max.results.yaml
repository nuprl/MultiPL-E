name: HumanEval_9_rolling_max
language: rust
results:
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max_numbers: Vec<isize> = Vec::new();\n\
    \    for number in numbers {\n        rolling_max_numbers.push(number);\n    }\n\
    \    for number in numbers.iter_mut() {\n        *number = rolling_max(*number);\n\
    \    }\n    rolling_max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpokntdreh.rs:11:31\n   |\n\
    11 |         *number = rolling_max(*number);\n   |                           \
    \    ^^^^^^^ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n                found type `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpokntdreh.rs:11:19\n   |\n11 |         *number = rolling_max(*number);\n\
    \   |         -------   ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found struct `Vec`\n\
    \   |         |\n   |         expected due to the type of this binding\n   |\n\
    \   = note: expected type `isize`\n            found struct `Vec<isize>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2).fold(Vec::new(), |acc, &(n1, n2)| {\n\
    \        let mut max: Option<isize> = Some(n1);\n        let mut cur_max: Option<isize>\
    \ = Some(n2);\n        for n in max..cur_max {\n            if acc.contains(&n)\
    \ {\n                continue;\n            }\n            if n == max {\n   \
    \             max = None;\n            }\n            if n == cur_max {\n    \
    \            cur_max = None;\n            }\n            acc.push(n.clone());\n\
    \        }\n        acc\n    })\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprphivcnv.rs:6:48\n  |\n6 |\
    \     numbers.windows(2).fold(Vec::new(), |acc, &(n1, n2)| {\n  |            \
    \                                    ^^^^^^^-\n  |                           \
    \                     |      |\n  |                                          \
    \      |      expected due to this\n  |                                      \
    \          expected slice `[isize]`, found tuple\n  |\n  = note: expected slice\
    \ `[isize]`\n             found tuple `(_, _)`\n\nerror[E0277]: the trait bound\
    \ `Option<isize>: Step` is not satisfied\n --> /tmp/tmprphivcnv.rs:9:18\n  |\n\
    9 |         for n in max..cur_max {\n  |                  ^^^^^^^^^^^^ the trait\
    \ `Step` is not implemented for `Option<isize>`\n  |\n  = help: the following\
    \ other types implement trait `Step`:\n            char\n            i128\n  \
    \          i16\n            i32\n            i64\n            i8\n           \
    \ isize\n            u128\n          and 5 others\n  = note: required because\
    \ of the requirements on the impl of `Iterator` for `std::ops::Range<Option<isize>>`\n\
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `std::ops::Range<Option<isize>>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmprphivcnv.rs:10:29\n   |\n10 |             if acc.contains(&n) {\n  \
    \ |                             ^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected reference `&isize`\n              found reference `&Option<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprphivcnv.rs:19:22\n   |\n19 |\
    \             acc.push(n.clone());\n   |                      ^^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    let mut mut_idx\
    \ = 1;\n    let mut max_idx = -1;\n    let mut max = numbers[0];\n    let mut\
    \ max_value = max;\n    while numbers_copy.len() > 0 {\n        if numbers_copy[0]\
    \ > max {\n            max_value = max;\n            max_idx = mut_idx;\n    \
    \    }\n        if numbers_copy[0] < max {\n            numbers_copy.pop();\n\
    \        }\n        else {\n            if max_value != max {\n              \
    \  numbers_copy.pop();\n            }\n            else {\n                numbers_copy.pop();\n\
    \            }\n        }\n        mut_idx += 1;\n        max = numbers[mut_idx\
    \ - 1];\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpl2jw_8kp.rs:8:23\n\
    \  |\n8 |     let mut max_idx = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl2jw_8kp.rs:30:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n30 |     max_idx\n   |     ^^^^^^^ expected struct `Vec`, found `usize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n                found type `usize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.size() == 0 {\n        return vec![];\n    }\n\
    \n    let mut max_number = numbers[0] as isize;\n    let mut max_element = numbers[0]\
    \ as isize;\n    let mut prev_max_number = numbers[0] as isize;\n    let mut prev_max_element\
    \ = numbers[0] as isize;\n\n    for i in 1..numbers.len() {\n        let cur_number\
    \ = numbers[i] - prev_max_number as isize;\n\n        if cur_number < max_number\
    \ {\n            prev_max_number = max_number;\n            prev_max_element =\
    \ max_element;\n            max_number = cur_number;\n            max_element\
    \ = i;\n        } else {\n            max_number = prev_max_number;\n        \
    \    max_element = prev_max_element;\n        }\n    }\n\n    vec![max_element]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `size` found for struct `Vec<isize>` in the\
    \ current scope\n --> /tmp/tmp55naxz75.rs:6:16\n  |\n6 |     if numbers.size()\
    \ == 0 {\n  |                ^^^^ help: there is an associated function with a\
    \ similar name: `resize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp55naxz75.rs:22:27\n\
    \   |\n11 |     let mut max_element = numbers[0] as isize;\n   |             \
    \              ------------------- expected due to this value\n...\n22 |     \
    \        max_element = i;\n   |                           ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut maxes = Vec::new();\n    let mut first_max_index\
    \ = -1;\n    for element in numbers.iter() {\n        if element > maxes[first_max_index]\
    \ {\n            maxes.push(element);\n        }\n        else {\n           \
    \ let mut index = first_max_index;\n            while index != (first_max_index\
    \ + 1) {\n                if element > maxes[index] {\n                    maxes.swap(index,\
    \ index + 1);\n                }\n                index += 1;\n            }\n\
    \        }\n        first_max_index += 1;\n    }\n    maxes\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpfngbtzqa.rs:7:31\n\
    \  |\n7 |     let mut first_max_index = -1;\n  |                             \
    \  ^^ the trait `Neg` is not implemented for `usize`\n  |\n  = help: the following\
    \ other types implement trait `Neg`:\n            &f32\n            &f64\n   \
    \         &i128\n            &i16\n            &i32\n            &i64\n      \
    \      &i8\n            &isize\n          and 8 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfngbtzqa.rs:23:5\n   |\n5  | fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n23 |     maxes\n   |     ^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut prev_max = 0;\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        if n > prev_max {\n \
    \           result.push(prev_max);\n        }\n        prev_max = n;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu0w2lmju.rs:9:16\n  |\n9 |\
    \         if n > prev_max {\n  |                ^^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&prev_max`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpu0w2lmju.rs:12:20\n   |\n7  |     let mut prev_max = 0;\n   |      \
    \                  - expected due to this value\n...\n12 |         prev_max =\
    \ n;\n   |                    ^ expected integer, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n12 |         prev_max = *n;\n   | \
    \                   +\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_max =\
    \ 0;\n    let mut current_max_index = 0;\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        if current_max < number {\n            current_max = number;\n  \
    \          current_max_index = i;\n        }\n        if current_max != number\
    \ {\n            result.push(number);\n            current_max = number;\n   \
    \         current_max_index = i;\n        }\n    }\n    result.push(numbers[current_max_index]);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0w9ltpsi.rs:11:27\n   |\n\
    7  |     let mut current_max = 0;\n   |                           - expected due\
    \ to this value\n...\n11 |             current_max = number;\n   |           \
    \                ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n11 |             current_max = *number;\n  \
    \ |                           +\n\nerror[E0277]: can't compare `isize` with `&isize`\n\
    \  --> /tmp/tmp0w9ltpsi.rs:10:24\n   |\n10 |         if current_max < number {\n\
    \   |                        ^ no implementation for `isize < &isize` and `isize\
    \ > &isize`\n   |\n   = help: the trait `PartialOrd<&isize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `PartialOrd<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0w9ltpsi.rs:14:27\n\
    \   |\n14 |         if current_max != number {\n   |                         \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n14 |         if current_max != *number {\n   |           \
    \                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0w9ltpsi.rs:16:27\n\
    \   |\n7  |     let mut current_max = 0;\n   |                           - expected\
    \ due to this value\n...\n16 |             current_max = number;\n   |       \
    \                    ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n16 |             current_max = *number;\n  \
    \ |                           +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0w9ltpsi.rs:20:17\n\
    \   |\n20 |     result.push(numbers[current_max_index]);\n   |               \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                 |\n   |                 expected\
    \ `&isize`, found `isize`\n   |                 help: consider borrowing here:\
    \ `&numbers[current_max_index]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0w9ltpsi.rs:21:5\n\
    \   |\n5  | fn rolling_max(nu"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max = numbers[0];\n    let mut cur_pos\
    \ = 0;\n    for cur_pos in 1..numbers.len() {\n        if numbers[cur_pos] > rolling_max\
    \ {\n            rolling_max = numbers[cur_pos];\n        }\n    }\n    rolling_max\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx_o5jepi.rs:13:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n13 |     rolling_max\n   |     ^^^^^^^^^^^ expected struct `Vec`, found `isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n                found type `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element = numbers[0];\n    let mut max_number\
    \ = numbers[0];\n    for n in numbers {\n        if n > max_number {\n       \
    \     max_element = n;\n            max_number = n;\n        }\n    }\n    vec![max_element]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpyf3l0rbv.rs:6:27\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut maxes = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        maxes.push((numbers[i], i));\n    }\n\n    for i in 0..numbers.len()\
    \ {\n        maxes[i].0 = maxes[i].0 > numbers[i] ? maxes[i].0 : numbers[i];\n\
    \    }\n\n    maxes.sort_by(|a, b| a.0.cmp(&b.0));\n\n    for i in 0..numbers.len()\
    \ {\n        maxes[i].1 = maxes[i].1 > numbers[i] ? maxes[i].1 : numbers[i];\n\
    \    }\n\n    maxes.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `maxes`\n\
    \  --> /tmp/tmppix9sehi.rs:12:48\n   |\n12 |         maxes[i].0 = maxes[i].0 >\
    \ numbers[i] ? maxes[i].0 : numbers[i];\n   |                                \
    \                ^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\n\
    error: expected one of `.`, `;`, `?`, `}`, or an operator, found `maxes`\n  -->\
    \ /tmp/tmppix9sehi.rs:18:48\n   |\n18 |         maxes[i].1 = maxes[i].1 > numbers[i]\
    \ ? maxes[i].1 : numbers[i];\n   |                                           \
    \     ^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `(isize, usize)`\n    --> /tmp/tmppix9sehi.rs:21:27\n     |\n21   |\
    \     maxes.iter().cloned().collect()\n     |                           ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=(isize,\
    \ usize)>`\n     |\n     = help: the trait `FromIterator<(isize, usize)>` is not\
    \ implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented\
    \ for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: Option<isize> = None;\n    let mut\
    \ i = 1;\n    while i < numbers.len() {\n        let element = numbers[i];\n \
    \       if max_element.is_some() || element > max_element {\n            max_element\
    \ = Some(element);\n        }\n        i = i + 1;\n    }\n    numbers\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg0x95qk0.rs:10:47\n   |\n\
    10 |         if max_element.is_some() || element > max_element {\n   |       \
    \                                        ^^^^^^^^^^^ expected `isize`, found enum\
    \ `Option`\n   |\n   = note: expected type `isize`\n              found enum `Option<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element = numbers.last();\n    let mut running_max_index\
    \ = numbers.len() - 1;\n\n    for i in 0..numbers.len() - 1 {\n        if max_element\
    \ < numbers[i] {\n            max_element = numbers[i];\n            running_max_index\
    \ = i;\n        }\n    }\n\n    let mut result = vec![max_element];\n\n    for\
    \ i in running_max_index..numbers.len() {\n        result.push(numbers[i]);\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0ivraw6s.rs:10:26\n   |\n\
    10 |         if max_element < numbers[i] {\n   |                          ^^^^^^^^^^\
    \ expected enum `Option`, found `isize`\n   |\n   = note: expected enum `Option<&isize>`\n\
    \              found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0ivraw6s.rs:11:27\n\
    \   |\n6  |     let mut max_element = numbers.last();\n   |                  \
    \         -------------- expected due to this value\n...\n11 |             max_element\
    \ = numbers[i];\n   |                           ^^^^^^^^^^ expected enum `Option`,\
    \ found `isize`\n   |\n   = note: expected enum `Option<&isize>`\n           \
    \   found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0ivraw6s.rs:19:21\n\
    \   |\n19 |         result.push(numbers[i]);\n   |                     ^^^^^^^^^^\
    \ expected enum `Option`, found `isize`\n   |\n   = note: expected enum `Option<&isize>`\n\
    \              found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0ivraw6s.rs:22:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n22 |     result\n   |     ^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<&isize>>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut window: Vec<isize> = Vec::new();\n    let mut min:\
    \ usize = 0;\n    for n in numbers {\n        if n < min {\n            min =\
    \ 1;\n        }\n        if n >= min {\n            window.push(n as isize);\n\
    \        } else {\n            window.push((min as isize) as isize);\n       \
    \     min = 1;\n        }\n    }\n    if window.len() > 0 {\n        window.push(min\
    \ as isize);\n    }\n    window\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmby752cj.rs:9:16\n  |\n9 |\
    \         if n < min {\n  |                ^^^ expected `isize`, found `usize`\n\
    \  |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n9 |         if n < min.try_into().unwrap() {\n  |  \
    \                 ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpmby752cj.rs:12:17\n   |\n12 |         if n >= min {\n   |          \
    \       ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n12 |     \
    \    if n >= min.try_into().unwrap() {\n   |                    ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = 0;\n    for i in 1..numbers.len() {\n        if numbers[i] > max_value {\n\
    \            max_value = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    vec![numbers[max_index]]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmput7s04ko.rs:6:25\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_val = numbers[0];\n    let mut current_max:\
    \ usize = max_val;\n    let mut max_pos: Vec<usize> = Vec::new();\n    let mut\
    \ new_max = numbers[0];\n    for n in numbers {\n        if n == current_max {\n\
    \            new_max = n;\n        } else {\n            max_pos.push(i);\n  \
    \          current_max = n;\n        }\n    }\n    max_pos.push(i);\n    max_pos.sort_unstable();\n\
    \    max_pos.reverse();\n    numbers.into_iter().map(|n| {\n        if n == max_val\
    \ {\n            max_val = n;\n            max_pos.pop();\n        } else {\n\
    \            new_max = n;\n        }\n    }).collect();\n    max_pos.reverse();\n\
    \    max_pos.push(new_max.max(&numbers[max_pos.len() - 1]));\n    max_pos\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp4gfzp7c6.rs:14:26\n\
    \   |\n14 |             max_pos.push(i);\n   |                          ^ help:\
    \ a local variable with a similar name exists: `n`\n\nerror[E0425]: cannot find\
    \ value `i` in this scope\n  --> /tmp/tmp4gfzp7c6.rs:18:18\n   |\n18 |     max_pos.push(i);\n\
    \   |                  ^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp4gfzp7c6.rs:7:34\n  |\n7 |     let mut current_max: usize = max_val;\n\
    \  |                          -----   ^^^^^^^ expected `usize`, found `isize`\n\
    \  |                          |\n  |                          expected due to\
    \ this\n  |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n  |\n7 |     let mut current_max: usize = max_val.try_into().unwrap();\n\
    \  |                                         ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4gfzp7c6.rs:11:17\n   |\n11 |         if n ==\
    \ current_max {\n   |                 ^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n11 |         if n == current_max.try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4gfzp7c6.rs:15:27\n   |\n7  |     let mut current_max:\
    \ usize = max_val;\n   |                          ----- expected due to this type\n\
    ...\n15 |             current_max = n;\n   |                           ^ expected\
    \ `usize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4gfzp7c6.rs:30:30\n\
    \   |\n30 |     max_pos.push(new_max.max(&numbers[max_pos.len() - 1]));\n   |\
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider removing the borrow\n   |\n30 -     max_pos.push(new_max.max(&numbers[max_pos.len()\
    \ - 1]));\n30 +     max_pos.push(new_max.max(numbers[max_pos.len() - 1]));\n \
    \  | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4gfzp7c6.rs:30:18\n   |\n\
    30 |     max_pos.push(new_max.max(&number"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_found = numbers[0];\n    for n in &numbers\
    \ {\n        if n > max_found {\n            max_found = n\n        }\n    }\n\
    \    vec![max_found]\n}\n\nfn main() {\n    let candidate = rolling_max;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_xo9omab.rs:8:16\n  |\n8 |\
    \         if n > max_found {\n  |                ^^^^^^^^^\n  |              \
    \  |\n  |                expected `&isize`, found `isize`\n  |               \
    \ help: consider borrowing here: `&max_found`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp_xo9omab.rs:9:25\n  |\n6 |     let mut max_found = numbers[0];\n\
    \  |                         ---------- expected due to this value\n...\n9 | \
    \            max_found = n\n  |                         ^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |           \
    \  max_found = *n\n  |                         +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2).into_iter().flat_map(|nums| nums.iter().map(|n|\
    \ n))\n        .max(|a, b| if a > b { a } else { b })\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmp9b897xb0.rs:7:10\n     |\n7    |         .max(|a, b| if a > b\
    \ { a } else { b })\n     |          ^^^ -------------------------------- supplied\
    \ 1 argument\n     |          |\n     |          expected 0 arguments\n     |\n\
    note: associated function defined here\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp9b897xb0.rs:6:5\n  |\n5 |   fn rolling_max(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n  |                                          ---------- expected `Vec<isize>`\
    \ because of return type\n6 | /     numbers.windows(2).into_iter().flat_map(|nums|\
    \ nums.iter().map(|n| n))\n7 | |         .max(|a, b| if a > b { a } else { b })\n\
    \  | |______________________________________________^ expected struct `Vec`, found\
    \ enum `Option`\n  |\n  = note: expected struct `Vec<isize>`\n               found\
    \ enum `Option<&isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = Vec::new();\n    for &i in numbers.iter() {\n       \
    \ if i > max_value {\n            max_value = i;\n            max_index = Vec::new();\n\
    \        }\n        if i == max_value {\n            max_index.push(i);\n    \
    \    }\n    }\n    for i in max_index.iter() {\n        result.push(i);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwo6sq11o.rs:21:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n21 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ret: Vec<isize> = Vec::new();\n    let mut cur\
    \ = numbers[0];\n    ret.push(cur);\n    for i in 1..numbers.len() {\n       \
    \ if cur > numbers[i] {\n            ret.push(cur);\n        }\n        cur =\
    \ numbers[i];\n    }\n    ret\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpi022_kfn.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index = 0;\n\
    \    for num in numbers.iter().rev() {\n        if num > max {\n            max\
    \ = num;\n            max_index = numbers.iter().rev().skip(1).count();\n    \
    \    }\n    }\n    numbers.iter().cloned().rev().take(max_index).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplty2mk1r.rs:9:18\n  |\n9 |\
    \         if num > max {\n  |                  ^^^\n  |                  |\n \
    \ |                  expected `&isize`, found `isize`\n  |                  help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplty2mk1r.rs:10:19\n\
    \   |\n6  |     let mut max = numbers[0];\n   |                   ---------- expected\
    \ due to this value\n...\n10 |             max = num;\n   |                  \
    \ ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n10 |             max = *num;\n   |                   +\n\nerror[E0271]:\
    \ type mismatch resolving `<std::slice::Iter<'_, isize> as Iterator>::Item ==\
    \ &&_`\n    --> /tmp/tmplty2mk1r.rs:14:51\n     |\n14   |     numbers.iter().cloned().rev().take(max_index).cloned().collect()\n\
    \     |                                                   ^^^^^^ expected reference,\
    \ found `isize`\n     |\n     = note: expected reference `&&_`\n             \
    \   found reference `&isize`\n     = note: required because of the requirements\
    \ on the impl of `Iterator` for `Cloned<std::slice::Iter<'_, isize>>`\nnote: required\
    \ by a bound in `cloned`\n\nerror[E0599]: the method `collect` exists for struct\
    \ `Cloned<std::iter::Take<Rev<Cloned<std::slice::Iter<'_, isize>>>>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmplty2mk1r.rs:14:60\n   |\n14 |\
    \        numbers.iter().cloned().rev().take(max_index).cloned().collect()\n  \
    \ |                                                               ^^^^^^^ method\
    \ cannot be called on `Cloned<std::iter::Take<Rev<Cloned<std::slice::Iter<'_,\
    \ isize>>>>>` due to unsatisfied trait bounds\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `<std::iter::Take<Rev<Cloned<std::slice::Iter<'_,\
    \ isize>>>> as Iterator>::Item = &_`\n           which is required by `Cloned<std::iter::Take<Rev<Cloned<std::slice::Iter<'_,\
    \ isize>>>>>: Iterator`\n           `Cloned<std::iter::Take<Rev<Cloned<std::slice::Iter<'_,\
    \ isize>>>>>: Iterator`\n           which is required by `&mut Cloned"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(numbers.len())\n        .iter()\n     \
    \   .cloned()\n        .filter(|&x| x > 0)\n        .max().collect()\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for struct `Windows` in the\
    \ current scope\n --> /tmp/tmp2ycpopr8.rs:7:10\n  |\n7 |         .iter()\n  |\
    \          ^^^^ method not found in `Windows<'_, isize>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = vec![];\n    for n in numbers\
    \ {\n        let mut i = 0;\n        loop {\n            if i < n {\n        \
    \        result.push(i);\n                break;\n            }\n            i\
    \ += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0]`,\n right: `[1, 2, 3, 4]`', /tmp/tmprdrypzmq.rs:23:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for x in numbers {\n\
    \        result = result.push(max(x, result));\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpcv1gghy4.rs:8:30\n\
    \  |\n8 |         result = result.push(max(x, result));\n  |                 \
    \             ^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ function\n  |\n1 | use std::cmp::max;\n  |\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpcv1gghy4.rs:8:18\n  |\n6 |     let mut result = Vec::new();\n  |\
    \                      ---------- expected due to this value\n7 |     for x in\
    \ numbers {\n8 |         result = result.push(max(x, result));\n  |          \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |\n\
    \  = note: expected struct `Vec<_>`\n          found unit type `()`\nnote: method\
    \ `push` modifies its receiver in-place\n --> /tmp/tmpcv1gghy4.rs:8:25\n  |\n\
    8 |         result = result.push(max(x, result));\n  |                  ------\
    \ ^^^^ this call modifies `result` in-place\n  |                  |\n  |     \
    \             you probably want to use this value after calling the method...\n\
    \  = note: ...instead of the `()` output of method `push`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut current_max: isize = 0;\n    let mut rolling_max:\
    \ Vec<isize> = Vec::new();\n    for element in numbers {\n        if element >\
    \ current_max {\n            rolling_max.push(element);\n            current_max\
    \ = element;\n        } else {\n            rolling_max.push(current_max);\n \
    \       }\n    }\n    rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_nums = Vec::new();\n    let mut i = 0;\n  \
    \  let mut max = numbers[0] as isize;\n\n    while i < numbers.len() {\n     \
    \   if numbers[i] > max {\n            max_nums.push(max);\n        }\n      \
    \  max = numbers[i + 1] as isize;\n        i += 1;\n    }\n    max_nums.push(max);\n\
    \    max_nums\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp7x0nuouj.rs:8:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut maximum = numbers[0];\n    for number in numbers\
    \ {\n        if number > maximum {\n            maximum = number;\n        }\n\
    \    }\n    numbers.extend(1..numbers.len()).iter().map(|&number| number).filter(|number|\
    \ number == maximum).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `Vec<isize>: Extend<usize>` is not satisfied\n\
    \  --> /tmp/tmpbf3z5bln.rs:12:13\n   |\n12 |     numbers.extend(1..numbers.len()).iter().map(|&number|\
    \ number).filter(|number| number == maximum).collect()\n   |             ^^^^^^\
    \ the trait `Extend<usize>` is not implemented for `Vec<isize>`\n   |\n   = help:\
    \ the following other types implement trait `Extend<A>`:\n             <Vec<T,\
    \ A> as Extend<&'a T>>\n             <Vec<T, A> as Extend<T>>\n\nerror[E0599]:\
    \ no method named `iter` found for unit type `()` in the current scope\n  -->\
    \ /tmp/tmpbf3z5bln.rs:12:38\n   |\n12 |     numbers.extend(1..numbers.len()).iter().map(|&number|\
    \ number).filter(|number| number == maximum).collect()\n   |                 \
    \                     ^^^^ method not found in `()`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\
    \n    let mut result = vec![];\n    let first_value = numbers[0];\n    let mut\
    \ last_value = 0;\n\n    for i in 1..numbers.len() {\n        let mut current_value\
    \ = numbers[i];\n\n        for j in i..numbers.len() {\n            if numbers[j]\
    \ > current_value {\n                current_value = numbers[j];\n           \
    \ }\n        }\n\n        if current_value > last_value {\n            result.push(current_value);\n\
    \            last_value = current_value;\n        }\n    }\n\n    result\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpj5q94gmi.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut maxes = Vec::new();\n    for i in numbers.iter()\
    \ {\n        if maxes.is_empty() {\n            maxes.push(i);\n        } else\
    \ {\n            if maxes.last().unwrap() < i {\n                maxes.push(maxes.last().unwrap());\n\
    \            }\n        }\n    }\n    maxes\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprdahh6r5.rs:11:40\n   |\n\
    11 |             if maxes.last().unwrap() < i {\n   |                        \
    \                ^ expected `&isize`, found `isize`\n   |\n   = note: expected\
    \ reference `&&isize`\n              found reference `&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprdahh6r5.rs:16:5\n   |\n5  | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                        ----------\
    \ expected `Vec<isize>` because of return type\n...\n16 |     maxes\n   |    \
    \ ^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = numbers.clone();\n    let\
    \ mut max_value: isize = 0;\n    for number in numbers.iter() {\n        if max_value\
    \ < number {\n            max_value = number;\n            result.remove(number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm6ablc6i.rs:9:24\n  |\n9 |\
    \         if max_value < number {\n  |                        ^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |         if max_value < *number {\n  |                        +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm6ablc6i.rs:10:25\n   |\n7  |     let mut max_value:\
    \ isize = 0;\n   |                        ----- expected due to this type\n...\n\
    10 |             max_value = number;\n   |                         ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    10 |             max_value = *number;\n   |                         +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm6ablc6i.rs:11:27\n   |\n11 |             result.remove(number);\n\
    \   |                           ^^^^^^ expected `usize`, found `&isize`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut maximum = numbers[0] as isize;\n    for i in numbers.iter().skip(1)\
    \ {\n        if i > maximum {\n            maximum = i as isize;\n        }\n\
    \    }\n    vec![maximum as usize]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgk3156dy.rs:8:16\n  |\n8 |\
    \         if i > maximum {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found `isize`\n  |                help:\
    \ consider borrowing here: `&maximum`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpgk3156dy.rs:12:10\n   |\n12 |     vec![maximum as usize]\n   |     \
    \     ^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    12 |     vec![(maximum as usize).try_into().unwrap()]\n   |          +       \
    \         +++++++++++++++++++++\n\nerror[E0606]: casting `&isize` as `isize` is\
    \ invalid\n --> /tmp/tmpgk3156dy.rs:9:23\n  |\n9 |             maximum = i as\
    \ isize;\n  |                       -^^^^^^^^^\n  |                       |\n\
    \  |                       cannot cast `&isize` as `isize`\n  |              \
    \         help: dereference the expression: `*i`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0606.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    // Create a list of indices corresponding to max element\
    \ seen so far\n    let mut max_indices = Vec::with_capacity(numbers.len());\n\
    \    let mut max_number = numbers[0];\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        if n > max_number {\n            max_number = n;\n            max_indices.truncate(i);\n\
    \        }\n    }\n\n    // Generate rolling max elements\n    let mut rolling_max:\
    \ Vec<isize> = Vec::with_capacity(numbers.len());\n    let mut i: usize = 1;\n\
    \    while max_indices.len() > 0 {\n        rolling_max.push(max_number);\n  \
    \      max_indices.truncate(i);\n        max_indices.remove(0);\n\n        //\
    \ Check if we need to add new max element to the rolling max\n        if i < (numbers.len()\
    \ - 1) {\n            let next_number = numbers[i + 1];\n            if next_number\
    \ > max_number {\n                max_number = next_number;\n                i\
    \ += 1;\n            }\n        } else {\n            break;\n        }\n    }\n\
    \    rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpufounnob.rs:10:16\n   |\n\
    10 |         if n > max_number {\n   |                ^^^^^^^^^^\n   |       \
    \         |\n   |                expected `&isize`, found `isize`\n   |      \
    \          help: consider borrowing here: `&max_number`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpufounnob.rs:11:26\n   |\n8  |     let mut max_number =\
    \ numbers[0];\n   |                          ---------- expected due to this value\n\
    ...\n11 |             max_number = n;\n   |                          ^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    11 |             max_number = *n;\n   |                          +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = numbers.to_vec();\n    let\
    \ mut current_max = numbers[0] as isize;\n    let mut i = 0;\n    while i < result.len()\
    \ {\n        if result[i] > current_max {\n            current_max = result[i];\n\
    \        }\n        if result[i] == current_max {\n            i += 1;\n     \
    \   } else {\n            result[i] = current_max;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpgj7avlpd.rs:7:27\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_numbers.push(i);\n        }\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp7e4r21lg.rs:11:30\n\
    \   |\n11 |             max_numbers.push(i);\n   |                           \
    \   ^ not found in this scope\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max = Vec::new();\n    let mut i = 0;\n\
    \    let mut last = numbers[0];\n    while i <= numbers.len() - 1 {\n        if\
    \ numbers[i] > last {\n            rolling_max.push(last);\n            i += 1;\n\
    \        } else {\n            rolling_max.push(numbers[i]);\n        }\n    \
    \    last = numbers[i];\n    }\n    rolling_max\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpoeoh4h0n.rs:8:20\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = numbers.clone();\n    result.sort_unstable();\n\
    \n    for i in 0..result.len() {\n        for j in (i + 1)..result.len() {\n \
    \           if result[i] < result[j] {\n                result[j] = result[i];\n\
    \            }\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1, 1]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpl4k1m1hh.rs:23:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut max_element = numbers[0];\n    for i in numbers {\n        if i >\
    \ max_element {\n            max_element = i;\n        }\n        result.push(max_element);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp4xaew1hm.rs:7:27\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rmax = numbers[0] as isize;\n    for x in numbers.iter().rev()\
    \ {\n        if x >= rmax {\n            rmax = x;\n        }\n    }\n    vec![rmax,\
    \ ..numbers]\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9fxr1cub.rs:8:17\n  |\n8 |\
    \         if x >= rmax {\n  |                 ^^^^\n  |                 |\n  |\
    \                 expected `&isize`, found `isize`\n  |                 help:\
    \ consider borrowing here: `&rmax`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp9fxr1cub.rs:9:20\n\
    \  |\n6 |     let mut rmax = numbers[0] as isize;\n  |                    -------------------\
    \ expected due to this value\n...\n9 |             rmax = x;\n  |            \
    \        ^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n9 |             rmax = *x;\n  |                    +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9fxr1cub.rs:12:16\n   |\n12 |     vec![rmax,\
    \ ..numbers]\n   |                ^^^^^^^^^ expected `isize`, found struct `RangeTo`\n\
    \   |\n   = note: expected type `isize`\n            found struct `RangeTo<Vec<isize>>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for &n in numbers.iter()\
    \ {\n        if n > max {\n            max = n;\n        }\n    }\n    vec![max]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpd9u1nwv8.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers.iter().max().unwrap();\n    let mut\
    \ rev = numbers.iter().rev();\n    for i in numbers.iter().rev().take(numbers.len()\
    \ - 1).rev() {\n        if i < max {\n            max = i;\n        }\n    }\n\
    \    for i in numbers.iter().rev() {\n        if i as isize == max {\n       \
    \     max = i;\n        }\n    }\n    for i in rev {\n        if i as isize ==\
    \ max {\n            max = i;\n        }\n    }\n    let mut result = Vec::new();\n\
    \    for i in numbers.iter() {\n        if i == max {\n            result.push(i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnvpaluwy.rs:14:26\n   |\n\
    14 |         if i as isize == max {\n   |                          ^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    14 |         if i as isize == *max {\n   |                          +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnvpaluwy.rs:19:26\n   |\n19 |         if i as\
    \ isize == max {\n   |                          ^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n19 |         if i as isize\
    \ == *max {\n   |                          +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpnvpaluwy.rs:29:5\n   |\n5  | fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n29 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror[E0606]: casting `&isize` as `isize`\
    \ is invalid\n  --> /tmp/tmpnvpaluwy.rs:14:12\n   |\n14 |         if i as isize\
    \ == max {\n   |            -^^^^^^^^^\n   |            |\n   |            cannot\
    \ cast `&isize` as `isize`\n   |            help: dereference the expression:\
    \ `*i`\n\nerror[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmpnvpaluwy.rs:19:12\n\
    \   |\n19 |         if i as isize == max {\n   |            -^^^^^^^^^\n   | \
    \           |\n   |            cannot cast `&isize` as `isize`\n   |         \
    \   help: dereference the expression: `*i`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0606.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_rolling_max\
    \ = numbers[0];\n\n    for i in 1..numbers.len() {\n        let mut max_found\
    \ = numbers[0];\n\n        for j in 0..numbers.len() {\n            if numbers[j]\
    \ > max_found {\n                max_found = numbers[j];\n            }\n    \
    \    }\n\n        max_rolling_max = max_rolling_max == numbers[0] ? max_found\
    \ : max_rolling_max;\n\n        max_so_far = max_rolling_max == numbers[0] ? max_so_far\
    \ : max_rolling_max;\n    }\n\n    max_so_far\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `max_found`\n\
    \  --> /tmp/tmpxo1gzpi5.rs:18:59\n   |\n18 |         max_rolling_max = max_rolling_max\
    \ == numbers[0] ? max_found : max_rolling_max;\n   |                         \
    \                                  ^^^^^^^^^ expected one of `.`, `;`, `?`, `}`,\
    \ or an operator\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxo1gzpi5.rs:23:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n23 |     max_so_far\n   |     ^^^^^^^^^^ expected struct `Vec`, found\
    \ `isize`\n   |\n   = note: expected struct `Vec<isize>`\n                found\
    \ type `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_idx = 1;\n\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n            max_idx = i;\n        }\n    }\n\n    let mut last_max_idx\
    \ = max_idx;\n    for j in 1..max_idx - 1 {\n        if numbers[last_max_idx +\
    \ 1] < numbers[j] {\n            last_max_idx += 1;\n        }\n    }\n\n    numbers.windows(last_max_idx\
    \ + 1).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&[isize]`\n    --> /tmp/tmp6xjyo02q.rs:23:39\n     |\n\
    23   |     numbers.windows(last_max_idx + 1).collect()\n     |               \
    \                        ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&[isize]>`\n     |\n     = help: the trait `FromIterator<&[isize]>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\
    \    let mut maximum = numbers[0];\n    let mut maximums = vec![];\n    for element\
    \ in numbers {\n        if element > maximum {\n            maximum = element;\n\
    \        }\n        maximums.push(maximum);\n    }\n    maximums\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current = vec![];\n\
    \n    for i in numbers.iter() {\n        let mut rolling_max = i;\n\n        //\
    \ Find the maximum in current rolling window\n        while rolling_max > 0 {\n\
    \            current.push(rolling_max % 10);\n            rolling_max /= 10;\n\
    \        }\n\n        result.push(current.pop().unwrap());\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplcw3hbt_.rs:13:29\n   |\n\
    13 |         while rolling_max > 0 {\n   |                             ^\n   |\
    \                             |\n   |                             expected `&isize`,\
    \ found integer\n   |                             help: consider borrowing here:\
    \ `&0`\n\nerror[E0368]: binary assignment operation `/=` cannot be applied to\
    \ type `&isize`\n  --> /tmp/tmplcw3hbt_.rs:15:13\n   |\n15 |             rolling_max\
    \ /= 10;\n   |             -----------^^^^^^\n   |             |\n   |       \
    \      cannot use `/=` on type `&isize`\n   |\nhelp: `/=` can be used on `isize`,\
    \ you can dereference `rolling_max`\n   |\n15 |             *rolling_max /= 10;\n\
    \   |             +\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0368.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut prev = numbers[0];\n\
    \    for num in numbers.iter().rev() {\n        if num > prev {\n            prev\
    \ = num;\n        }\n        result.push(num);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppufq4r8n.rs:9:18\n  |\n9 |\
    \         if num > prev {\n  |                  ^^^^\n  |                  |\n\
    \  |                  expected `&isize`, found `isize`\n  |                  help:\
    \ consider borrowing here: `&prev`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppufq4r8n.rs:10:20\n\
    \   |\n7  |     let mut prev = numbers[0];\n   |                    ----------\
    \ expected due to this value\n...\n10 |             prev = num;\n   |        \
    \            ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             prev = *num;\n   |                    +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmppufq4r8n.rs:14:5\n   |\n5  | fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                     \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    ...\n14 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![numbers[0]];\n    for n in numbers[1..]\
    \ {\n        if n > result.last_mut().unwrap() {\n            result.last_mut().unwrap()\
    \ = n;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n --> /tmp/tmpjbr61r7w.rs:7:14\n  |\n7 |     for n in numbers[1..]\
    \ {\n  |              ^^^^^^^^^^^^ expected an implementor of trait `IntoIterator`\n\
    \  |\n  = note: the trait bound `[isize]: IntoIterator` is not satisfied\n  =\
    \ note: required because of the requirements on the impl of `IntoIterator` for\
    \ `[isize]`\nhelp: consider borrowing here\n  |\n7 |     for n in &numbers[1..]\
    \ {\n  |              +\n7 |     for n in &mut numbers[1..] {\n  |           \
    \   ++++\n\nerror[E0277]: `[isize]` is not an iterator\n --> /tmp/tmpjbr61r7w.rs:7:14\n\
    \  |\n7 |     for n in numbers[1..] {\n  |              ^^^^^^^^^^^^ expected\
    \ an implementor of trait `IntoIterator`\n  |\n  = note: the trait bound `[isize]:\
    \ IntoIterator` is not satisfied\n  = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n\
    \  |\n7 |     for n in &numbers[1..] {\n  |              +\n7 |     for n in &mut\
    \ numbers[1..] {\n  |              ++++\n\nerror[E0070]: invalid left-hand side\
    \ of assignment\n --> /tmp/tmpjbr61r7w.rs:9:40\n  |\n9 |             result.last_mut().unwrap()\
    \ = n;\n  |             -------------------------- ^\n  |             |\n  | \
    \            cannot assign to this expression\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0070, E0277.\nFor more information\
    \ about an error, try `rustc --explain E0070`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.is_empty() {\n        return numbers;\n    }\n\
    \    let mut max_index = numbers[0] as isize;\n    for index in 1..numbers.len()\
    \ {\n        if numbers[index] > numbers[max_index] {\n            max_index =\
    \ index;\n        }\n    }\n    let mut max_value = numbers[max_index];\n    let\
    \ mut max_index = max_index as usize;\n    for value in &numbers[..max_index]\
    \ {\n        max_value = value;\n        max_index += 1;\n    }\n    numbers[max_index..]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp5ahn32v9.rs:11:29\n\
    \   |\n11 |         if numbers[index] > numbers[max_index] {\n   |           \
    \                  ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5ahn32v9.rs:12:25\n\
    \   |\n9  |     let mut max_index = numbers[0] as isize;\n   |               \
    \          ------------------- expected due to this value\n...\n12 |         \
    \    max_index = index;\n   |                         ^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp5ahn32v9.rs:15:25\n   |\n15 |     let mut max_value = numbers[max_index];\n\
    \   |                         ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5ahn32v9.rs:21:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n21 |     numbers[max_index..]\n   |     ^^^^^^^^^^^^^^^^^^^^- help:\
    \ try using a conversion method: `.to_vec()`\n   |     |\n   |     expected struct\
    \ `Vec`, found slice `[isize]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \               found slice `[isize]`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut current =\
    \ numbers[0] as isize;\n    let mut rolling_max = Vec::<isize>::new();\n    for\
    \ &i in numbers {\n        if current >= i {\n            rolling_max.push(current);\n\
    \            max_value = i;\n            current = 0;\n        } else {\n    \
    \        current = i;\n        }\n    }\n    rolling_max.push(max_value);\n  \
    \  rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbm5e2zi1.rs:9:9\n  |\n9 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \    }\n    vec![max]\n}\n\nfn main() {\n    let candidate = rolling_max;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp8_n2g300.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max: isize = 0;\n    let mut max_list: Vec<isize>\
    \ = vec![];\n    for n in numbers {\n        max = n;\n        max_list.push(n);\n\
    \    }\n    max_list.reverse();\n    for i in 0..(max_list.len()-1) {\n      \
    \  max_list[i] = if max_list[i+1] > max {\n            max_list[i]\n        }\
    \ else {\n            max as isize\n        };\n    }\n    max_list\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpnz0kvhy8.rs:13:17\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut current_max = numbers[0];\n    for i in numbers.iter().rev()\
    \ {\n        if i > current_max {\n            current_max = i;\n        }\n \
    \   }\n\n    let mut current_max = current_max;\n\n    for i in numbers.iter().rev()\
    \ {\n        if i <= current_max {\n            current_max = i;\n        }\n\
    \    }\n\n    vec![current_max]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx8iw6ljt.rs:8:16\n  |\n8 |\
    \         if i > current_max {\n  |                ^^^^^^^^^^^\n  |          \
    \      |\n  |                expected `&isize`, found `isize`\n  |           \
    \     help: consider borrowing here: `&current_max`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpx8iw6ljt.rs:9:27\n  |\n6 |     let mut current_max = numbers[0];\n\
    \  |                           ---------- expected due to this value\n...\n9 |\
    \             current_max = i;\n  |                           ^ expected `isize`,\
    \ found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |     \
    \        current_max = *i;\n  |                           +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpx8iw6ljt.rs:16:17\n   |\n16 |         if i <= current_max\
    \ {\n   |                 ^^^^^^^^^^^\n   |                 |\n   |          \
    \       expected `&isize`, found `isize`\n   |                 help: consider\
    \ borrowing here: `&current_max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx8iw6ljt.rs:17:27\n\
    \   |\n13 |     let mut current_max = current_max;\n   |                     \
    \      ----------- expected due to this value\n...\n17 |             current_max\
    \ = i;\n   |                           ^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n17 |             current_max\
    \ = *i;\n   |                           +\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element = numbers.first().unwrap();\n    let\
    \ mut max_time = numbers.last().unwrap();\n\n    for num in numbers.iter().skip(1)\
    \ {\n        if num > max_element {\n            max_element = num;\n        }\n\
    \    }\n\n    for num in numbers.iter().skip(numbers.len() - max_time) {\n   \
    \     max_element = num;\n    }\n\n    max_element\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1hi5pb_3.rs:15:52\n   |\n\
    15 |     for num in numbers.iter().skip(numbers.len() - max_time) {\n   |    \
    \                                                ^^^^^^^^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `&isize` from `usize`\n  --> /tmp/tmp1hi5pb_3.rs:15:50\n\
    \   |\n15 |     for num in numbers.iter().skip(numbers.len() - max_time) {\n \
    \  |                                                  ^ no implementation for\
    \ `usize - &isize`\n   |\n   = help: the trait `Sub<&isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1hi5pb_3.rs:19:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n19 |     max_element\n   |     ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ reference `&isize`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers: Vec<isize> = Vec::new();\n    let\
    \ mut current_max: usize = 0;\n    let mut current_number: usize = 0;\n    for\
    \ n in numbers {\n        if n == current_max {\n            max_numbers.push(current_number);\n\
    \            current_max = 0;\n            current_number = 0;\n        } else\
    \ {\n            current_number = n;\n            current_max = n;\n        }\n\
    \    }\n    max_numbers.push(current_number);\n    max_numbers\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpchhkir0m.rs:10:17\n   |\n\
    10 |         if n == current_max {\n   |                 ^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |         if n == current_max.try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpchhkir0m.rs:11:30\n   |\n11 |             max_numbers.push(current_number);\n\
    \   |                              ^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n11 |             max_numbers.push(current_number.try_into().unwrap());\n\
    \   |                                            ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpchhkir0m.rs:15:30\n   |\n8  |     let mut current_number:\
    \ usize = 0;\n   |                             ----- expected due to this type\n\
    ...\n15 |             current_number = n;\n   |                              ^\
    \ expected `usize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpchhkir0m.rs:16:27\n\
    \   |\n7  |     let mut current_max: usize = 0;\n   |                        \
    \  ----- expected due to this type\n...\n16 |             current_max = n;\n \
    \  |                           ^ expected `usize`, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpchhkir0m.rs:19:22\n   |\n19 |     max_numbers.push(current_number);\n\
    \   |                      ^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  \
    \ |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n19 |     max_numbers.push(current_number.try_into().unwrap());\n\
    \   |                                    ++++++++++++++++++++\n\nerror: aborting\
    \ due to 5 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for number in numbers.iter().cloned()\
    \ {\n        if number > max {\n            max = number;\n        }\n    }\n\
    \    vec![max]\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp61ql5z29.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut r = Vec::new();\n    let mut max_val = numbers[0];\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_val {\n        \
    \    max_val = numbers[i];\n        }\n        r.push(max_val);\n    }\n    r\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpri3zdd_u.rs:7:23\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut current_max = numbers[0];\n\
    \    for number in numbers.iter().skip(1) {\n        if number > current_max {\n\
    \            current_max = number;\n        }\n        result.push(current_max);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3u49zlio.rs:9:21\n  |\n9 |\
    \         if number > current_max {\n  |                     ^^^^^^^^^^^\n  |\
    \                     |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&current_max`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3u49zlio.rs:10:27\n   |\n7  |     let mut current_max\
    \ = numbers[0];\n   |                           ---------- expected due to this\
    \ value\n...\n10 |             current_max = number;\n   |                   \
    \        ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             current_max = *number;\n   |            \
    \               +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max = numbers[1..];\n    let mut i = 0;\n\
    \    while i < numbers.len() {\n        if rolling_max[i] > numbers[i] {\n   \
    \         rolling_max[i] = numbers[i];\n        }\n        i += 1;\n    }\n  \
    \  rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n --> /tmp/tmppznj5eyd.rs:6:9\n  |\n6 |     let mut rolling_max\
    \ = numbers[1..];\n  |         ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n\
    \  |\n  = help: the trait `Sized` is not implemented for `[isize]`\n  = note:\
    \ all local variables must have a statically known size\n  = help: unsized locals\
    \ are gated as an unstable feature\nhelp: consider borrowing here\n  |\n6 |  \
    \   let mut rolling_max = &numbers[1..];\n  |                           +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmppznj5eyd.rs:14:5\n   |\n5  | fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                     \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    ...\n14 |     rolling_max\n   |     ^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_vec()`\n   |     |\n   |     expected struct `Vec`, found slice\
    \ `[isize]`\n   |\n   = note: expected struct `Vec<isize>`\n               found\
    \ slice `[isize]`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max: isize = 0;\n    for n in numbers {\n     \
    \   if n > max {\n            max = n;\n        }\n    }\n\n    let mut ret =\
    \ Vec::new();\n    for n in numbers.drain(1..) {\n        ret.push(max);\n   \
    \     max = n;\n    }\n    ret\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `numbers` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmp99w_3_ej.rs:14:14\n   |\n5  | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                ------- help: consider changing\
    \ this to be mutable: `mut numbers`\n...\n14 |     for n in numbers.drain(1..)\
    \ {\n   |              ^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0382]:\
    \ borrow of moved value: `numbers`\n   --> /tmp/tmp99w_3_ej.rs:14:14\n    |\n\
    5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |             \
    \   ------- move occurs because `numbers` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n6   |     let mut max: isize = 0;\n7   |     for\
    \ n in numbers {\n    |              ------- `numbers` moved due to this implicit\
    \ call to `.into_iter()`\n...\n14  |     for n in numbers.drain(1..) {\n    |\
    \              ^^^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `numbers`\n\
    help: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n7   |     for n in &numbers {\n    |           \
    \   +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0382, E0596.\nFor more information about an error, try `rustc\
    \ --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    // We want to sort the numbers first, and then find the\
    \ biggest element in the sorted array\n    // So we need to create an array of\
    \ indices that point to the start of the rolling max\n    // and then we can get\
    \ the rolling max from the sorted array\n    let mut indexed: Vec<usize> = Vec::new();\n\
    \    for idx in numbers.iter().cloned().sort_by(|a, b| a <=> b) {\n        if\
    \ indexed.last().unwrap() != idx {\n            indexed.push(idx);\n        }\n\
    \    }\n    // After the rolling max is generated, we can just slice the original\
    \ array.\n    numbers.iter().cloned().take(indexed.len()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: invalid comparison operator `<=>`\n  --> /tmp/tmpkv3zla0u.rs:10:57\n\
    \   |\n10 |     for idx in numbers.iter().cloned().sort_by(|a, b| a <=> b) {\n\
    \   |                                                         ^^^ `<=>` is not\
    \ a valid comparison operator, use `std::cmp::Ordering`\n\nerror[E0599]: no method\
    \ named `sort_by` found for struct `Cloned` in the current scope\n  --> /tmp/tmpkv3zla0u.rs:10:40\n\
    \   |\n10 |     for idx in numbers.iter().cloned().sort_by(|a, b| a <=> b) {\n\
    \   |                                        ^^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0277]: can't compare `&usize` with `usize`\n  --> /tmp/tmpkv3zla0u.rs:11:36\n\
    \   |\n11 |         if indexed.last().unwrap() != idx {\n   |                \
    \                    ^^ no implementation for `&usize == usize`\n   |\n   = help:\
    \ the trait `PartialEq<usize>` is not implemented for `&usize`\n   = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_idx = numbers.iter().find_map(|&x| x);\n  \
    \  let mut max_val = numbers[max_idx];\n    for &n in &mut numbers[..] {\n   \
    \     if n > max_val {\n            max_val = n;\n            max_idx = numbers.iter().enumerate().skip_while(|&(i,\
    \ _)| i == max_idx + 1).next().unwrap();\n        }\n    }\n    numbers[max_idx..]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzr2essl8.rs:6:52\n  |\n6 |\
    \     let mut max_idx = numbers.iter().find_map(|&x| x);\n  |                \
    \                                    ^ expected enum `Option`, found `isize`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `isize`\nhelp:\
    \ try wrapping the expression in `Some`\n  |\n6 |     let mut max_idx = numbers.iter().find_map(|&x|\
    \ Some(x));\n  |                                                    +++++ +\n\n\
    error[E0277]: the type `[isize]` cannot be indexed by `Option<_>`\n --> /tmp/tmpzr2essl8.rs:7:23\n\
    \  |\n7 |     let mut max_val = numbers[max_idx];\n  |                       ^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `Option<_>`\n  = note: required\
    \ because of the requirements on the impl of `Index<Option<_>>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpzr2essl8.rs:8:9\n  |\n8 |     for\
    \ &n in &mut numbers[..] {\n  |         ^^    ---------------- this expression\
    \ has type `Option<&mut isize>`\n  |         |\n  |         types differ in mutability\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note: expected mutable reference `&mut isize`\n                     found reference\
    \ `&_`\n\nerror[E0369]: cannot add `{integer}` to `Option<_>`\n  --> /tmp/tmpzr2essl8.rs:11:84\n\
    \   |\n11 |             max_idx = numbers.iter().enumerate().skip_while(|&(i,\
    \ _)| i == max_idx + 1).next().unwrap();\n   |                               \
    \                                             ------- ^ - {integer}\n   |    \
    \                                                                        |\n \
    \  |                                                                         \
    \   Option<_>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzr2essl8.rs:11:23\n\
    \   |\n6  |     let mut max_idx = numbers.iter().find_map(|&x| x);\n   |     \
    \                  ------------------------------- expected due to this value\n\
    ...\n11 |             max_idx = numbers.iter().enumerate().skip_while(|&"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2)\n        .iter()\n        .max_by_key(|x|\
    \ x.clone())\n        .collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for struct `Windows` in the\
    \ current scope\n --> /tmp/tmpvq2xa_lp.rs:7:10\n  |\n7 |         .iter()\n  |\
    \          ^^^^ method not found in `Windows<'_, isize>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut window = Vec::new();\n\
    \    for n in numbers {\n        window.push(n);\n        if window.len() > 2\
    \ {\n            window.pop();\n        }\n        if window.len() == 2 {\n  \
    \          window.pop();\n        }\n        result.push(window.max().unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmp85i3dh2o.rs:16:28\n    |\n16  |         result.push(window.max().unwrap());\n\
    \    |                            ^^^- supplied 0 arguments\n    |           \
    \                 |\n    |                            expected 1 argument\n  \
    \  |\nnote: associated function defined here\n\nerror[E0599]: no method named\
    \ `unwrap` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp85i3dh2o.rs:16:34\n\
    \   |\n16 |         result.push(window.max().unwrap());\n   |                \
    \                  ^^^^^^ help: there is an associated function with a similar\
    \ name: `swap`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0061, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut numbers_max = Vec::new();\n    let mut i = 0;\n\
    \    for number in numbers {\n        while i <= number {\n            numbers_max.push(number);\n\
    \            i += 1;\n        }\n    }\n    numbers_max\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 2, 3, 4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpv2w0eays.rs:20:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ret = Vec::new();\n    let mut prev_max = numbers[0]\
    \ as isize;\n    for &n in numbers {\n        if n > prev_max {\n            ret.push(prev_max);\n\
    \        }\n        prev_max = n;\n    }\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj8lz6jbj.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `n`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = vec![];\n    let mut largest = numbers[0];\n\
    \    for x in numbers.iter() {\n        if largest < x {\n            largest\
    \ = x;\n        }\n    }\n    res.push(largest);\n    for x in numbers.iter()\
    \ {\n        if x == largest {\n            continue;\n        }\n        let\
    \ mut cur = x;\n        let mut count = 1;\n        while cur > largest {\n  \
    \          count += 1;\n            cur = cur - 1;\n        }\n        res.push(largest);\n\
    \        largest = x;\n        for _ in 0..count {\n            res.push(largest);\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprz3h_z_s.rs:9:22\n  |\n9 |\
    \         if largest < x {\n  |                      ^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |         if\
    \ largest < *x {\n  |                      +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprz3h_z_s.rs:10:23\n   |\n7  |     let mut largest = numbers[0];\n\
    \   |                       ---------- expected due to this value\n...\n10 | \
    \            largest = x;\n   |                       ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |        \
    \     largest = *x;\n   |                       +\n\nerror[E0277]: can't compare\
    \ `&isize` with `isize`\n  --> /tmp/tmprz3h_z_s.rs:15:14\n   |\n15 |         if\
    \ x == largest {\n   |              ^^ no implementation for `&isize == isize`\n\
    \   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprz3h_z_s.rs:20:21\n\
    \   |\n20 |         while cur > largest {\n   |                     ^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&largest`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprz3h_z_s.rs:22:19\n   |\n18 |\
    \         let mut cur = x;\n   |                       - expected due to this\
    \ value\n...\n22 |             cur = cur - 1;\n   |                   ^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(cur - 1)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprz3h_z_s.rs:25:19\n   |\n7  |     let mut largest\
    \ = numbers[0];\n   |                       ---------- expected due to this value\n\
    ...\n25 |         largest = x;\n   |                   ^ expected `isize`, found\
    \ `&isize`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2).fold(vec![0; numbers.len()], |mut acc,\
    \ val| {\n        acc.push(val + acc.last().unwrap());\n        acc\n    })\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `&isize` to `&[isize]`\n --> /tmp/tmp90nemf66.rs:7:22\n\
    \  |\n7 |         acc.push(val + acc.last().unwrap());\n  |                  ---\
    \ ^ ------------------- &isize\n  |                  |\n  |                  &[isize]\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_number = numbers[0];\n    let mut max_number\
    \ = numbers[0];\n    let mut max_number = numbers[0];\n    let mut max_index =\
    \ 0;\n    let mut max_count = 0;\n\n    for &number in &numbers {\n        if\
    \ number > max_number {\n            max_number = number;\n            max_index\
    \ = numbers.iter().position(|&n| n == number).unwrap();\n            max_count\
    \ = 1;\n        }\n        if number == max_number {\n            max_count +=\
    \ 1;\n        }\n        if max_count > max_number {\n            max_number =\
    \ max_number;\n            max_index = numbers.iter().position(|&n| n == max_number).unwrap();\n\
    \            max_count = 0;\n        }\n    }\n    let mut result = vec![];\n\
    \    for i in 0..numbers.len() {\n        if max_index == i {\n            result.push(max_number);\n\
    \            continue;\n        }\n        let mut count = 0;\n        let mut\
    \ max_value = numbers[max_index];\n        for &value in numbers[i..] {\n    \
    \        if value == max_value {\n                count += 1;\n            }\n\
    \        }\n        if count == max_value {\n            result.push(max_number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmpr7zpeay1.rs:35:23\n   |\n35 |         for &value\
    \ in numbers[i..] {\n   |                       ^^^^^^^^^^^^ expected an implementor\
    \ of trait `IntoIterator`\n   |\n   = note: the trait bound `[isize]: IntoIterator`\
    \ is not satisfied\n   = note: required because of the requirements on the impl\
    \ of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n   |\n35 | \
    \        for &value in &numbers[i..] {\n   |                       +\n35 |   \
    \      for &value in &mut numbers[i..] {\n   |                       ++++\n\n\
    error[E0277]: `[isize]` is not an iterator\n  --> /tmp/tmpr7zpeay1.rs:35:23\n\
    \   |\n35 |         for &value in numbers[i..] {\n   |                       ^^^^^^^^^^^^\
    \ expected an implementor of trait `IntoIterator`\n   |\n   = note: the trait\
    \ bound `[isize]: IntoIterator` is not satisfied\n   = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `[isize]`\nhelp: consider\
    \ borrowing here\n   |\n35 |         for &value in &numbers[i..] {\n   |     \
    \                  +\n35 |         for &value in &mut numbers[i..] {\n   |   \
    \                    ++++\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max = Vec::with_capacity(numbers.len());\n\
    \    for i in 1..numbers.len() {\n        rolling_max.push(numbers[i - 1]);\n\
    \        while i <= numbers.len() {\n            if numbers[i - 1] > numbers[i]\
    \ {\n                rolling_max.push(numbers[i - 1]);\n                break;\n\
    \            }\n            rolling_max.push(numbers[i]);\n            i += 1;\n\
    \        }\n    }\n    rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3ne4g6hy.rs:15:13\n\
    \   |\n7  |     for i in 1..numbers.len() {\n   |         -\n   |         |\n\
    \   |         first assignment to `i`\n   |         help: consider making this\
    \ binding mutable: `mut i`\n...\n15 |             i += 1;\n   |             ^^^^^^\
    \ cannot assign twice to immutable variable\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::with_capacity(numbers.len());\n    let\
    \ mut i = 0;\n    while i < numbers.len() {\n        let x = numbers[i] + i;\n\
    \        res.push(x);\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n   \
    \ let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpobq_ixjp.rs:9:30\n  |\n9 |\
    \         let x = numbers[i] + i;\n  |                              ^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot add `usize` to `isize`\n -->\
    \ /tmp/tmpobq_ixjp.rs:9:28\n  |\n9 |         let x = numbers[i] + i;\n  |    \
    \                        ^ no implementation for `isize + usize`\n  |\n  = help:\
    \ the trait `Add<usize>` is not implemented for `isize`\n  = help: the following\
    \ other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n\
    \            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n    \
    \        <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n          \
    \  <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize\
    \ as Add<isize>>\n          and 48 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers.clone().sort();\n    let mut max_idx\
    \ = 0;\n    let mut max_val = max.first();\n    while let Some(idx) = (*max_idx..).find(|x|\
    \ x > &max_val) {\n        max_val = max[idx];\n        max_idx = idx;\n    }\n\
    \    max_idx += 1;\n    max.rev();\n    for i in 0..(numbers.len() - 1) {\n  \
    \      if numbers[max_idx] <= numbers[i] {\n            max.swap(max_idx, i);\n\
    \        }\n    }\n    max.to_owned()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `first` found for unit type `()` in the current\
    \ scope\n --> /tmp/tmpl27f8hj5.rs:8:27\n  |\n8 |     let mut max_val = max.first();\n\
    \  |                           ^^^^^ method not found in `()`\n\nerror[E0614]:\
    \ type `{integer}` cannot be dereferenced\n --> /tmp/tmpl27f8hj5.rs:9:28\n  |\n\
    9 |     while let Some(idx) = (*max_idx..).find(|x| x > &max_val) {\n  |     \
    \                       ^^^^^^^^\n\nerror[E0608]: cannot index into a value of\
    \ type `()`\n  --> /tmp/tmpl27f8hj5.rs:10:19\n   |\n10 |         max_val = max[idx];\n\
    \   |                   ^^^^^^^^\n   |\n   = help: to access tuple elements, use\
    \ tuple indexing syntax (e.g., `tuple.0`)\n\nerror[E0599]: `()` is not an iterator\n\
    \  --> /tmp/tmpl27f8hj5.rs:14:9\n   |\n14 |     max.rev();\n   |         ^^^ `()`\
    \ is not an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `(): Iterator`\n           which is required by `&mut (): Iterator`\n\
    \nerror[E0599]: no method named `swap` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpl27f8hj5.rs:17:17\n   |\n17 |             max.swap(max_idx,\
    \ i);\n   |                 ^^^^ method not found in `()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl27f8hj5.rs:20:5\n   |\n5  | fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n20 |     max.to_owned()\n   |    \
    \ ^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0599,\
    \ E0608, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n    while\
    \ i < numbers.len() {\n        result.push(numbers[i]);\n        i += 1;\n   \
    \     while i < numbers.len() && numbers[i] > numbers[i - 1] {\n            i\
    \ += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[1, 2, 3, 4]`', /tmp/tmp4730z0_u.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = 0;\n    let mut max_index = -1;\n \
    \   for i in numbers {\n        if max_value <= i {\n            max_value = i;\n\
    \            max_index = i;\n        } else {\n            max_value = max_value\
    \ * 10 + i as isize;\n            if max_index == i {\n                max_index\
    \ = i;\n            }\n        }\n    }\n\n    let mut indexes = Vec::new();\n\
    \    for i in numbers {\n        if i == max_index {\n            indexes.push(max_index);\n\
    \        }\n    }\n\n    indexes.append(max_index);\n\n    indexes.sort();\n\n\
    \    indexes\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuhoc9rt4.rs:27:20\n   |\n\
    27 |     indexes.append(max_index);\n   |                    ^^^^^^^^^ expected\
    \ `&mut Vec<isize>`, found `isize`\n   |\n   = note: expected mutable reference\
    \ `&mut Vec<isize>`\n                           found type `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut maximum = numbers[0];\n    for number in numbers\
    \ {\n        if number > maximum {\n            maximum = number;\n        }\n\
    \    }\n    numbers\n        .iter()\n        .skip(1)\n        .map(|number|\
    \ if number > maximum { number } else { maximum })\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3en5fgmd.rs:15:35\n   |\n\
    15 |         .map(|number| if number > maximum { number } else { maximum })\n\
    \   |                                   ^^^^^^^\n   |                        \
    \           |\n   |                                   expected `&isize`, found\
    \ `isize`\n   |                                   help: consider borrowing here:\
    \ `&maximum`\n\nerror[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmp3en5fgmd.rs:15:61\n\
    \   |\n15 |         .map(|number| if number > maximum { number } else { maximum\
    \ })\n   |                                             ------          ^^^^^^^\
    \ expected `&isize`, found `isize`\n   |                                     \
    \        |\n   |                                             expected because\
    \ of this\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far: Vec<isize> = Vec::new();\n    let mut\
    \ min_so_far: isize = 0;\n    for num in numbers {\n        if num > min_so_far\
    \ {\n            max_so_far.push(num);\n        }\n        if num < min_so_far\
    \ {\n            min_so_far = num;\n        }\n    }\n    max_so_far\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpnv5vh1wz.rs:23:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_val: isize = 0;\n    let mut max_idx = 0;\n\
    \    for n in numbers {\n        if n == max_val {\n            continue;\n  \
    \      }\n        if n > max_val {\n            max_val = n;\n            max_idx\
    \ = *numbers.iter().position(|&i| i > n).unwrap();\n        }\n    }\n    let\
    \ mut max_vals = Vec::new();\n    max_vals.push(max_val);\n    for i in numbers.iter().rev()\
    \ {\n        if i == max_val {\n            break;\n        }\n        max_vals.push(i);\n\
    \    }\n    max_vals\n}\n\nfn main() {\n    let candidate = rolling_max;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `usize` cannot be dereferenced\n  --> /tmp/tmpqnhj9ail.rs:14:23\n\
    \   |\n14 |             max_idx = *numbers.iter().position(|&i| i > n).unwrap();\n\
    \   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpqnhj9ail.rs:23:23\n   |\n23 |  \
    \       max_vals.push(i);\n   |                       ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n23 |        \
    \ max_vals.push(*i);\n   |                       +\n\nerror[E0277]: can't compare\
    \ `&isize` with `isize`\n  --> /tmp/tmpqnhj9ail.rs:20:14\n   |\n20 |         if\
    \ i == max_val {\n   |              ^^ no implementation for `&isize == isize`\n\
    \   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers[0].clone());\n\
    \    for n in numbers.iter().rev() {\n        if result.len() > n {\n        \
    \    break;\n        }\n        result.push(n);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyyxqyq3.rs:6:41\n  |\n6 |\
    \     let mut result = Vec::with_capacity(numbers[0].clone());\n  |          \
    \                               ^^^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n  |\n6 |     let mut result = Vec::with_capacity(numbers[0].clone().try_into().unwrap());\n\
    \  |                                                           ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpbyyxqyq3.rs:8:27\n  |\n8 |    \
    \     if result.len() > n {\n  |                           ^ expected `usize`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbyyxqyq3.rs:13:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers\n        .windows(3)\n        .fold(vec![numbers.last().unwrap(),\
    \ numbers.last().unwrap()], |mut accum, i| {\n            if accum[i] > i {\n\
    \                accum[i] = i;\n            }\n            accum\n        })\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb9203w8_.rs:8:20\n  |\n8 |\
    \         .fold(vec![numbers.last().unwrap(), numbers.last().unwrap()], |mut accum,\
    \ i| {\n  |                    ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n8 |         .fold(vec![*numbers.last().unwrap(),\
    \ numbers.last().unwrap()], |mut accum, i| {\n  |                    +\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `&[isize]`\n --> /tmp/tmpb9203w8_.rs:9:16\n\
    \  |\n9 |             if accum[i] > i {\n  |                ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&[isize]`\n  = note: required because of the requirements\
    \ on the impl of `Index<&[isize]>` for `Vec<isize>`\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `&[isize]`\n  --> /tmp/tmpb9203w8_.rs:10:17\n\
    \   |\n10 |                 accum[i] = i;\n   |                 ^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `&[isize]`\n   = note: required\
    \ because of the requirements on the impl of `Index<&[isize]>` for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut window = Vec::new();\n    let mut max = numbers[0]\
    \ as usize;\n    for number in numbers.iter().rev() {\n        if number > max\
    \ {\n            window.push(max);\n            max = number;\n        } else\
    \ {\n            window.push(number);\n        }\n    }\n    window.reverse();\n\
    \    window\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgg9ua24u.rs:9:21\n  |\n9 |\
    \         if number > max {\n  |                     ^^^ expected `&isize`, found\
    \ `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgg9ua24u.rs:11:19\n\
    \   |\n7  |     let mut max = numbers[0] as usize;\n   |                   -------------------\
    \ expected due to this value\n...\n11 |             max = number;\n   |      \
    \             ^^^^^^ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgg9ua24u.rs:13:25\n   |\n13 |             window.push(number);\n\
    \   |                         ^^^^^^ expected `usize`, found `&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgg9ua24u.rs:17:5\n   |\n5  | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                        ----------\
    \ expected `Vec<isize>` because of return type\n...\n17 |     window\n   |   \
    \  ^^^^^^ expected `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<usize>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2)\n        .filter(|&a| a > 0)\n     \
    \   .enumerate()\n        .fold(Vec::<isize>::new(), |mut acc, &(_, v)| {\n  \
    \          if acc.is_empty() {\n                acc.push(v);\n            } else\
    \ {\n                if *acc > v {\n                    acc.push(v);\n       \
    \         }\n            }\n            acc\n        })\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbh1o145m.rs:7:26\n  |\n7 |\
    \         .filter(|&a| a > 0)\n  |                          ^ expected `&[isize]`,\
    \ found integer\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbh1o145m.rs:9:46\n\
    \  |\n9 |         .fold(Vec::<isize>::new(), |mut acc, &(_, v)| {\n  |       \
    \                                       ^^^^^^-\n  |                         \
    \                     |     |\n  |                                           \
    \   |     expected due to this\n  |                                          \
    \    expected tuple, found reference\n  |\n  = note:  expected tuple `(usize,\
    \ &[isize])`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbh1o145m.rs:13:27\n   |\n13 |                 if *acc > v {\n \
    \  |                           ^ expected slice `[isize]`, found `isize`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    // TODO: optimize with scan\n    let mut max_element =\
    \ numbers[0];\n    let mut max_index = -1;\n    let mut maxes: Vec<isize> = Vec::new();\n\
    \n    for n in numbers {\n        if n >= max_element {\n            max_element\
    \ = n;\n            max_index = maxes.len();\n        }\n\n        match maxes.get(max_index)\
    \ {\n            Some(max) => {\n                if n == max {\n             \
    \       maxes.push(max_element);\n                    max_index = maxes.len();\n\
    \                } else {\n                    maxes[max_index] = n;\n       \
    \         }\n            }\n            None => maxes.push(n),\n        }\n  \
    \  }\n\n    maxes\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpcgjvko1_.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpcgjvko1_.rs:19:25\n   |\n19 |                 if n == max {\n   |  \
    \                       ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n19 |                 if n == *max {\n   |  \
    \                       +\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.len() == 0 {\n        return vec![];\n    }\n\
    \n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index = -1;\n\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_so_far {\n     \
    \       max_so_far = numbers[i];\n            max_so_far_index = i;\n        }\n\
    \    }\n\n    let mut new_numbers = vec![numbers[0]];\n    let mut new_max_so_far\
    \ = max_so_far;\n    let mut new_max_so_far_index = max_so_far_index;\n\n    for\
    \ i in 1..numbers.len() {\n        if numbers[i] < new_max_so_far {\n        \
    \    new_numbers.push(numbers[i]);\n            new_max_so_far = max_so_far;\n\
    \            new_max_so_far_index = i;\n        }\n    }\n\n    new_numbers.extend_from_slice(&vec![new_max_so_far_index..new_max_so_far_index\
    \ + new_max_so_far]);\n    new_numbers\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpzgw2jaff.rs:11:32\n\
    \   |\n11 |     let mut max_so_far_index = -1;\n   |                         \
    \       ^^ the trait `Neg` is not implemented for `usize`\n   |\n   = help: the\
    \ following other types implement trait `Neg`:\n             &f32\n          \
    \   &f64\n             &i128\n             &i16\n             &i32\n         \
    \    &i64\n             &i8\n             &isize\n           and 8 others\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpzgw2jaff.rs:32:86\n   |\n32 |  \
    \   new_numbers.extend_from_slice(&vec![new_max_so_far_index..new_max_so_far_index\
    \ + new_max_so_far]);\n   |                                                  \
    \                                    ^^^^^^^^^^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmpzgw2jaff.rs:32:84\n\
    \   |\n32 |     new_numbers.extend_from_slice(&vec![new_max_so_far_index..new_max_so_far_index\
    \ + new_max_so_far]);\n   |                                                  \
    \                                  ^ no implementation for `usize + isize`\n \
    \  |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzgw2jaff.rs:32:35\n   |\n32 |     new_numbers.extend_from_slice(&vec![new_max_so_far_index..new_max_so_far_index\
    \ + new_max_so_far]);\n   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected slice `[isize]`, found struct `Vec`\n   |\n   = note: expected reference\
    \ `&[isize]`\n              found reference `&Vec<std::ops::Range<usize>>`\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanatio"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max = numbers;\n\n    let mut max_rolling_max\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if max_rolling_max <\
    \ numbers[i] {\n            max_rolling_max = numbers[i];\n        }\n    }\n\n\
    \    for i in 1..numbers.len() {\n        rolling_max[i] = max_rolling_max;\n\
    \    }\n\n    for i in 1..numbers.len() {\n        rolling_max[i] += rolling_max[i\
    \ - 1];\n    }\n\n    rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `numbers`\n --> /tmp/tmpur2e7ard.rs:8:31\n\
    \  |\n5 | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n  |           \
    \     ------- move occurs because `numbers` has type `Vec<isize>`, which does\
    \ not implement the `Copy` trait\n6 |     let mut rolling_max = numbers;\n  |\
    \                           ------- value moved here\n7 | \n8 |     let mut max_rolling_max\
    \ = numbers[0];\n  |                               ^^^^^^^ value borrowed here\
    \ after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max: isize = 0;\n    for x in numbers {\n     \
    \   max = max if x > max else x;\n    }\n    let mut maxs = Vec::new();\n    maxs.push(max);\n\
    \    let mut ix = 1;\n    while ix <= numbers.len() {\n        let mut max_so_far\
    \ = max;\n        for i in 0..ix.min(numbers.len() - ix) {\n            let mut\
    \ m = max;\n            if i < (ix - 1) {\n                m = maxs[ix];\n   \
    \         }\n            if maxs[i] > m {\n                max_so_far = m;\n \
    \           }\n        }\n        maxs.push(max_so_far);\n        ix += 1;\n \
    \   }\n    maxs\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found keyword `if`\n --> /tmp/tmp6i3aewoo.rs:8:19\n  |\n8 |         max = max\
    \ if x > max else x;\n  |                   ^^ expected one of 8 possible tokens\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current: isize\
    \ = 0;\n    let mut counter = numbers.iter().peekable().peek();\n    if numbers.len()\
    \ > 1 {\n        while counter > current {\n            result.push(counter);\n\
    \            counter -= 1;\n        }\n        result.push(current);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjk2t0kyj.rs:10:25\n   |\n\
    10 |         while counter > current {\n   |                         ^^^^^^^ expected\
    \ enum `Option`, found `isize`\n   |\n   = note: expected enum `Option<&&isize>`\n\
    \              found type `isize`\n\nerror[E0368]: binary assignment operation\
    \ `-=` cannot be applied to type `Option<&&isize>`\n  --> /tmp/tmpjk2t0kyj.rs:12:13\n\
    \   |\n12 |             counter -= 1;\n   |             -------^^^^^\n   |   \
    \          |\n   |             cannot use `-=` on type `Option<&&isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjk2t0kyj.rs:14:21\n   |\n14 |         result.push(current);\n\
    \   |                     ^^^^^^^ expected enum `Option`, found `isize`\n   |\n\
    \   = note: expected enum `Option<&&isize>`\n              found type `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpjk2t0kyj.rs:16:5\n   |\n5  | fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                     \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    ...\n16 |     result\n   |     ^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<&&isize>>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max: isize =\
    \ 0;\n\n    for n in numbers {\n        let max = *n as isize;\n        result.push(max);\n\
    \    }\n\n    let mut pos = 1;\n    while result.len() < numbers.len() {\n   \
    \     let mut max_found = -1;\n        for n in result.iter() {\n            if\
    \ n == max {\n                max_found = n;\n                break;\n       \
    \     }\n        }\n\n        if max_found == -1 {\n            pos = 0;\n   \
    \     } else {\n            result.push(*max_found);\n        }\n\n        max\
    \ = *max_found as isize;\n        pos++;\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp9u9afltd.rs:31:12\n\
    \   |\n31 |         pos++;\n   |            ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n31 |         { let tmp = pos; pos += 1;\
    \ tmp };\n   |         +++++++++++    ~~~~~~~~~~~~~~~~~\n31 -         pos++;\n\
    31 +         pos += 1;\n   | \n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmp9u9afltd.rs:10:19\n   |\n10 |         let max = *n as isize;\n\
    \   |                   ^^\n\nerror[E0277]: can't compare `&_` with `isize`\n\
    \  --> /tmp/tmp9u9afltd.rs:18:18\n   |\n18 |             if n == max {\n   | \
    \                 ^^ no implementation for `&_ == isize`\n   |\n   = help: the\
    \ trait `PartialEq<isize>` is not implemented for `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9u9afltd.rs:19:29\n   |\n16 |         let mut max_found\
    \ = -1;\n   |                             -- expected due to this value\n...\n\
    19 |                 max_found = n;\n   |                             ^ expected\
    \ integer, found reference\n   |\n   = note:   expected type `{integer}`\n   \
    \        found reference `&_`\nhelp: consider dereferencing the borrow\n   |\n\
    19 |                 max_found = *n;\n   |                             +\n\nerror[E0614]:\
    \ type `{integer}` cannot be dereferenced\n  --> /tmp/tmp9u9afltd.rs:27:25\n \
    \  |\n27 |             result.push(*max_found);\n   |                        \
    \ ^^^^^^^^^^\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmp9u9afltd.rs:30:15\n\
    \   |\n30 |         max = *max_found as isize;\n   |               ^^^^^^^^^^\n\
    \nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0614.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max: Option<isize> = None;\n    let mut max_idx\
    \ = -1;\n    let mut sum = 0;\n    for &i in numbers {\n        if let Some(mut\
    \ v) = max {\n            v.swap(i);\n            sum += v;\n        }\n     \
    \   max = Some(i);\n        max_idx = i;\n    }\n    let mut result = Vec::new();\n\
    \    for &i in numbers {\n        let mut v: Option<isize>;\n        if let Some(mut\
    \ v) = max {\n            v.swap(i);\n            sum += v;\n        }\n     \
    \   if sum == i {\n            result.push(i);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp42r6lmie.rs:9:9\n  |\n9 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0599]:\
    \ no method named `swap` found for type `isize` in the current scope\n  --> /tmp/tmp42r6lmie.rs:11:15\n\
    \   |\n11 |             v.swap(i);\n   |               ^^^^ method not found in\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp42r6lmie.rs:18:9\n\
    \   |\n18 |     for &i in numbers {\n   |         ^^    ------- this expression\
    \ has type `Option<isize>`\n   |         |\n   |         expected `isize`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `i`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error[E0599]: no method named `swap` found for type `isize` in the current scope\n\
    \  --> /tmp/tmp42r6lmie.rs:21:15\n   |\n21 |             v.swap(i);\n   |    \
    \           ^^^^ method not found in `isize`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut min_num: isize\
    \ = 0;\n    let mut max_num: isize = 0;\n    let mut current_num: isize = 0;\n\
    \    let mut num_elements = numbers.len();\n    loop {\n        if current_num\
    \ > max_num {\n            result.push(max_num);\n            current_num = min_num;\n\
    \        }\n\n        if current_num < min_num {\n            result.push(min_num);\n\
    \            current_num = max_num;\n        }\n\n        if current_num == max_num\
    \ {\n            result.push(max_num);\n            current_num -= 1;\n      \
    \  }\n\n        if current_num == min_num {\n            result.push(min_num);\n\
    \            current_num += 1;\n        }\n        current_num += 1;\n       \
    \ if current_num == num_elements {\n            break;\n        }\n        if\
    \ current_num == numbers[0] {\n            break;\n        }\n        min_num\
    \ = numbers[0];\n        max_num = current_num;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxp_68b1p.rs:32:27\n   |\n\
    32 |         if current_num == num_elements {\n   |                          \
    \ ^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a\
    \ `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n32\
    \ |         if current_num == num_elements.try_into().unwrap() {\n   |       \
    \                                ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut res = Vec::new();\n\
    \    for x in numbers.iter() {\n        if x != max {\n            max = x;\n\
    \            res.push(max);\n        }\n    }\n    res\n}\n\nfn main() {\n   \
    \ let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkuhin0wm.rs:10:19\n   |\n\
    6  |     let mut max = numbers[0];\n   |                   ---------- expected\
    \ due to this value\n...\n10 |             max = x;\n   |                   ^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n10 |             max = *x;\n   |                   +\n\nerror[E0277]: can't\
    \ compare `&isize` with `isize`\n --> /tmp/tmpkuhin0wm.rs:9:14\n  |\n9 |     \
    \    if x != max {\n  |              ^^ no implementation for `&isize == isize`\n\
    \  |\n  = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n\
    \  = help: the following other types implement trait `PartialEq<Rhs>`:\n     \
    \       f32\n            f64\n            i128\n            i16\n            i32\n\
    \            i64\n            i8\n            isize\n          and 6 others\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for value in numbers.iter().cloned() {\n \
    \       if value < min {\n            min = value;\n        }\n        if value\
    \ > max {\n            max = value;\n        }\n    }\n    let mut cur = min;\n\
    \    while numbers.iter().any(|x| x > cur) {\n        result.push(cur);\n    \
    \    cur += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6imn523.rs:18:38\n   |\n\
    18 |     while numbers.iter().any(|x| x > cur) {\n   |                       \
    \               ^^^\n   |                                      |\n   |       \
    \                               expected `&isize`, found `isize`\n   |       \
    \                               help: consider borrowing here: `&cur`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut max_num:\
    \ isize = 0;\n    let mut i = 0;\n    while i < numbers.len() {\n        if numbers[i]\
    \ > max_num {\n            max_num = numbers[i];\n        }\n        result.push(max_num);\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    // Create a vector with the current maximun element found\
    \ so far\n    let mut maximum_element = numbers[0];\n    // Start with current\
    \ maximun element\n    maximum_element.unwrap();\n    // For each element in the\
    \ list, check if the element is the new maximum\n    for element in numbers.iter()\
    \ {\n        if element > maximum_element {\n            maximum_element = element;\n\
    \        }\n    }\n    // If all the elements are equals, return the original\
    \ list\n    if maximum_element == numbers[numbers.size() - 1] {\n        return\
    \ numbers;\n    }\n    // Create a vector with the current maximun element found\
    \ so far\n    let mut maximum_element = numbers[0];\n    // Start with current\
    \ maximun element\n    maximum_element.unwrap();\n    // For each element in the\
    \ list, check if the element is the new maximum\n    for element in numbers.iter()\
    \ {\n        if element > maximum_element {\n            maximum_element = element;\n\
    \        }\n    }\n    // Create the vector with the result\n    let mut new_numbers\
    \ = vec![0; numbers.len()];\n    // For each element in the list, add the new\
    \ maximum to the vector\n    for element in numbers.iter() {\n        new_numbers[element.position()]\
    \ = element;\n    }\n    // Return the result\n    new_numbers\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpms7qisvn.rs:9:21\n  |\n9 |     maximum_element.unwrap();\n\
    \  |                     ^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpms7qisvn.rs:12:22\n   |\n12 |         if element > maximum_element\
    \ {\n   |                      ^^^^^^^^^^^^^^^\n   |                      |\n\
    \   |                      expected `&isize`, found `isize`\n   |            \
    \          help: consider borrowing here: `&maximum_element`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpms7qisvn.rs:13:31\n   |\n7  |     let mut maximum_element\
    \ = numbers[0];\n   |                               ---------- expected due to\
    \ this value\n...\n13 |             maximum_element = element;\n   |         \
    \                      ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n13 |             maximum_element = *element;\n\
    \   |                               +\n\nerror[E0599]: no method named `size`\
    \ found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpms7qisvn.rs:17:43\n\
    \   |\n17 |     if maximum_element == numbers[numbers.size() - 1] {\n   |    \
    \                                       ^^^^ help: there is an associated function\
    \ with a similar name: `resize`\n\nerror[E0599]: no method named `unwrap` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpms7qisvn.rs:23:21\n   |\n\
    23 |     maximum_element.unwrap();\n   |                     ^^^^^^ method not\
    \ found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpms7qisvn.rs:26:22\n\
    \   |\n26 |         if element > maximum_element {\n   |                     \
    \ ^^^^^^^^^^^^^^^\n   |                      |\n   |                      expected\
    \ `&isize`, found `isize`\n   |                      help: consider borrowing\
    \ here: `&maximum_element`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpms7qisvn.rs:27:31\n\
    \   |\n21 |     let mut maximum_element = numbers[0];\n   |                  \
    \             ---------- expected due to this value\n...\n27 |             maximum_element\
    \ = elemen"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers[0].len());\n\
    \    for i in 0..numbers.len() {\n        let mut last = i;\n        let mut current_max\
    \ = numbers[0];\n        let mut count = 0;\n        for j in last..numbers.len()\
    \ {\n            if numbers[j] < current_max {\n                last = j;\n  \
    \              current_max = numbers[j];\n                count = j - last;\n\
    \            }\n        }\n        result.push(current_max);\n        result.push(count);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp560j9yn7.rs:6:52\n  |\n6 |     let mut result = Vec::with_capacity(numbers[0].len());\n\
    \  |                                                    ^^^ method not found in\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp560j9yn7.rs:19:21\n\
    \   |\n19 |         result.push(count);\n   |                     ^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n19 |         result.push(count.try_into().unwrap());\n\
    \   |                          ++++++++++++++++++++\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    assert!(numbers.len() > 0);\n    let mut rolling_max =\
    \ numbers[0];\n    for i in 1..numbers.len() {\n        rolling_max = if numbers[i]\
    \ > rolling_max { numbers[i] } else { rolling_max };\n    }\n    vec![rolling_max]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: numbers.len() > 0', /tmp/tmp4im23rc9.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.len() == 0 {\n        return vec![];\n    }\n\
    \n    let mut max = numbers[0];\n    let mut maximums = vec![];\n\n    for i in\
    \ 1..numbers.len() {\n        if numbers[i] > max {\n            max = numbers[i];\n\
    \        }\n\n        maximums.push(max);\n    }\n\n    maximums\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmplaqvm_0v.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut maxes = Vec::new();\n    let mut n = numbers.len();\n\
    \    while n > 0 {\n        maxes.push((numbers[n - 1] + numbers[n - 2] + numbers[n\
    \ - 3] + numbers[n - 4]) / 4);\n        n -= 4;\n    }\n    maxes\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpnl86quv7.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = numbers;\n    let mut rolling_max = numbers[0];\n\
    \n    for n in numbers.iter().rev() {\n        if rolling_max < n {\n        \
    \    rolling_max = n;\n        }\n    }\n\n    result.reverse();\n    result.append(rolling_max);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8jujdtso.rs:10:26\n   |\n\
    10 |         if rolling_max < n {\n   |                          ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |  \
    \       if rolling_max < *n {\n   |                          +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8jujdtso.rs:11:27\n   |\n7  |     let mut rolling_max\
    \ = numbers[0];\n   |                           ---------- expected due to this\
    \ value\n...\n11 |             rolling_max = n;\n   |                        \
    \   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n11 |             rolling_max = *n;\n   |                     \
    \      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8jujdtso.rs:16:19\n\
    \   |\n16 |     result.append(rolling_max);\n   |                   ^^^^^^^^^^^\
    \ expected `&mut Vec<isize>`, found `isize`\n   |\n   = note: expected mutable\
    \ reference `&mut Vec<isize>`\n                           found type `isize`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element = numbers[0];\n    let mut max_count\
    \ = 0;\n\n    for number in numbers.iter() {\n        if number > max_element\
    \ {\n            max_element = number;\n            max_count = 1;\n        }\
    \ else {\n            max_count += 1;\n        }\n    }\n\n    Vec::new()\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvwygueve.rs:10:21\n   |\n\
    10 |         if number > max_element {\n   |                     ^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_element`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpvwygueve.rs:11:27\n   |\n6  |\
    \     let mut max_element = numbers[0];\n   |                           ----------\
    \ expected due to this value\n...\n11 |             max_element = number;\n  \
    \ |                           ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n11 |             max_element =\
    \ *number;\n   |                           +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = numbers;\n    for n in numbers {\n      \
    \  res.rotate_right(n - 1).unwrap();\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp47f41noh.rs:8:26\n  |\n8 |\
    \         res.rotate_right(n - 1).unwrap();\n  |                          ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n8 |         res.rotate_right((n\
    \ - 1).try_into().unwrap()).unwrap();\n  |                          +     +++++++++++++++++++++\n\
    \nerror[E0599]: no method named `unwrap` found for unit type `()` in the current\
    \ scope\n --> /tmp/tmp47f41noh.rs:8:33\n  |\n8 |         res.rotate_right(n -\
    \ 1).unwrap();\n  |                                 ^^^^^^ method not found in\
    \ `()`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.len() == 0 {\n        return vec![];\n    }\n\
    \    numbers.windows(numbers.len() - 1)\n        .filter_map(|&x| x.max_by(|a,\
    \ b| b - a).unwrap_or(0))\n        .collect::<Vec<_>>()\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `[isize]` is not an iterator\n  --> /tmp/tmprw00rwg5.rs:10:28\n\
    \   |\n10 |         .filter_map(|&x| x.max_by(|a, b| b - a).unwrap_or(0))\n  \
    \ |                            ^^^^^^ `[isize]` is not an iterator; try calling\
    \ `.into_iter()` or `.iter()`\n   |\n   = note: the following trait bounds were\
    \ not satisfied:\n           `[isize]: Iterator`\n           which is required\
    \ by `&mut [isize]: Iterator`\n\nerror[E0277]: the size for values of type `[isize]`\
    \ cannot be known at compilation time\n  --> /tmp/tmprw00rwg5.rs:10:23\n   |\n\
    10 |         .filter_map(|&x| x.max_by(|a, b| b - a).unwrap_or(0))\n   |     \
    \                  ^ doesn't have a size known at compile-time\n   |\n   = help:\
    \ the trait `Sized` is not implemented for `[isize]`\n   = note: all local variables\
    \ must have a statically known size\n   = help: unsized locals are gated as an\
    \ unstable feature\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2)\n        .filter(|window| window.len()\
    \ > 1)\n        .map(|window| window.iter().max().unwrap())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmp5m_d0fih.rs:9:10\n     |\n9\
    \    |         .collect()\n     |          ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.is_empty() {\n        numbers\n    } else {\n\
    \        let mut max = numbers[0];\n        let mut max_number = 0;\n        let\
    \ mut index = 0;\n        for number in numbers.iter().rev() {\n            if\
    \ number > max {\n                index = numbers.len();\n                max\
    \ = number;\n                max_number = index;\n            } else {\n     \
    \           if index > max_number {\n                    max_number = index;\n\
    \                }\n            }\n            index += 1;\n        }\n      \
    \  let mut new_numbers = Vec::new();\n        for i in 0..max_number {\n     \
    \       new_numbers.push(numbers[i - 1]);\n        }\n        new_numbers.push(max);\n\
    \        new_numbers\n    }\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt6wxsqy8.rs:13:25\n   |\n\
    13 |             if number > max {\n   |                         ^^^\n   |   \
    \                      |\n   |                         expected `&isize`, found\
    \ `isize`\n   |                         help: consider borrowing here: `&max`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpt6wxsqy8.rs:15:23\n   |\n9  |\
    \         let mut max = numbers[0];\n   |                       ---------- expected\
    \ due to this value\n...\n15 |                 max = number;\n   |           \
    \            ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n15 |                 max = *number;\n   |                \
    \       +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut current = vec![numbers[0]];\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > current[current.len() - 1] {\n            current.push(numbers[i]);\n\
    \        } else {\n            current.pop();\n        }\n    }\n    current\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpl5jn7lvy.rs:6:28\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rv = numbers;\n    rv.sort_unstable_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \n    while rv.len() > 1 {\n        rv.pop();\n    }\n\n    rv\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpznh0380j.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_found = numbers[0];\n\
    \    for i in numbers.iter().rev() {\n        if *i == max_found {\n         \
    \   continue;\n        }\n        let j = max_found + 1;\n        while j < i\
    \ {\n            result.push(*j);\n            j += 1;\n        }\n        result.push(*i);\n\
    \        max_found = *i;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj5ep8wfx.rs:13:19\n   |\n\
    13 |         while j < i {\n   |                   ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |         while j < *i\
    \ {\n   |                   +\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpj5ep8wfx.rs:14:25\n   |\n14 |             result.push(*j);\n  \
    \ |                         ^^\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.len() < 2 {\n        return numbers;\n    }\n\
    \    numbers.windows(2)\n        .enumerate()\n        .map(|(i, _)| numbers[i\
    \ - 1])\n        .max_by(|a, b| a < b)\n        .unwrap()\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppggy739y.rs:12:24\n   |\n\
    12 |         .max_by(|a, b| a < b)\n   |                        ^^^^^ expected\
    \ enum `std::cmp::Ordering`, found `bool`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppggy739y.rs:9:5\n   |\n5  |   fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n9  | /     numbers.windows(2)\n10\
    \ | |         .enumerate()\n11 | |         .map(|(i, _)| numbers[i - 1])\n12 |\
    \ |         .max_by(|a, b| a < b)\n13 | |         .unwrap()\n   | |_________________^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut maximum = numbers[0];\n    for i in 1..numbers.len()\
    \ {\n        if maximum < numbers[i] {\n            maximum = numbers[i];\n  \
    \      }\n    }\n    maximum\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuwbv5hq5.rs:12:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n12 |     maximum\n   |     ^^^^^^^ expected struct `Vec`, found `isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n                found type `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut current = numbers.first().unwrap();\n    let mut\
    \ best = vec![current];\n    for number in numbers.iter().skip(1) {\n        if\
    \ number > current {\n            current = number;\n            best = vec![number];\n\
    \        } else {\n            best.push(number);\n        }\n    }\n    best\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuogkbfb9.rs:16:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n16 |     best\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = i32::MAX;\n    let mut result = Vec::new();\n\
    \    for num in numbers {\n        if num > m {\n            m = num;\n      \
    \  }\n        if result.len() == 0 || num > result[-1] {\n            result.push(num);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo8y3jxdq.rs:9:18\n  |\n9 |\
    \         if num > m {\n  |                  ^ expected `isize`, found `i32`\n\
    \  |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n9 |         if num > m.try_into().unwrap() {\n  |  \
    \                 ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpo8y3jxdq.rs:10:17\n   |\n6  |     let mut m = i32::MAX;\n   |      \
    \           -------- expected due to this value\n...\n10 |             m = num;\n\
    \   |                 ^^^ expected `i32`, found `isize`\n\nerror: negative integers\
    \ cannot be used to index on a `Vec<_>`\n  --> /tmp/tmpo8y3jxdq.rs:12:46\n   |\n\
    12 |         if result.len() == 0 || num > result[-1] {\n   |                \
    \                              ^^ cannot use a negative integer for indexing on\
    \ `Vec<_>`\n   |\nhelp: to access an element starting from the end of the `Vec<_>`,\
    \ compute the index\n   |\n12 |         if result.len() == 0 || num > result[result.len()\
    \ -1] {\n   |                                              ++++++++++++\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers\n        .iter()\n        .cloned()\n        .windows(4)\n\
    \        .enumerate()\n        .map(|(index, window)| window.iter().max().unwrap())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `windows` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpm06swyhh.rs:9:10\n  |\n9 |         .windows(4)\n\
    \  |          ^^^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut maximum = numbers[0];\n    for number in numbers\
    \ {\n        if number > maximum {\n            maximum = number;\n        }\n\
    \    }\n    vec![maximum]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpowxh1_pi.rs:6:23\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max = Vec::new();\n    let mut min_num\
    \ = numbers[0];\n    let mut max_num = numbers[0];\n    for n in numbers {\n \
    \       if n > max_num {\n            max_num = n;\n        }\n        if n <\
    \ min_num {\n            min_num = n;\n        }\n    }\n    for i in numbers\
    \ {\n        if i > max_num && i < min_num {\n            rolling_max.push(i);\n\
    \        }\n        if i < min_num {\n            rolling_max.push(min_num);\n\
    \        }\n        if i > max_num {\n            rolling_max.push(max_num);\n\
    \        }\n    }\n    rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmprepyankg.rs:17:14\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n9   |     for n in numbers {\n   \
    \ |              ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n17  |     for i in numbers {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `numbers`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n9   |     for n in &numbers\
    \ {\n    |              +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut buffer = Vec::with_capacity(numbers.len());\n \
    \   let mut max = numbers[0];\n    for i in numbers.iter().rev() {\n        if\
    \ *i > max {\n            max = *i;\n        }\n        buffer.push(max);\n  \
    \  }\n    buffer\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpvomlv0s9.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(3).map(|w| w.max().unwrap()).collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpynvuq2vo.rs:6:34\n    |\n6   |     numbers.windows(3).map(|w|\
    \ w.max().unwrap()).collect()\n    |                                  ^^^- supplied\
    \ 0 arguments\n    |                                  |\n    |               \
    \                   expected 1 argument\n    |\nnote: associated function defined\
    \ here\n\nerror[E0599]: no method named `unwrap` found for reference `&[isize]`\
    \ in the current scope\n --> /tmp/tmpynvuq2vo.rs:6:40\n  |\n6 |     numbers.windows(3).map(|w|\
    \ w.max().unwrap()).collect()\n  |                                        ^^^^^^\
    \ help: there is an associated function with a similar name: `swap`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max: Vec<isize> = Vec::new();\n    for\
    \ number in numbers.iter() {\n        if number > rolling_max.last() {\n     \
    \       rolling_max.push(number);\n        }\n    }\n    rolling_max\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj21en6ag.rs:8:21\n  |\n8 |\
    \         if number > rolling_max.last() {\n  |                     ^^^^^^^^^^^^^^^^^^\
    \ expected `&isize`, found enum `Option`\n  |\n  = note: expected reference `&isize`\n\
    \                  found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpj21en6ag.rs:9:30\n  |\n9 |             rolling_max.push(number);\n\
    \  |                              ^^^^^^ expected `isize`, found `&isize`\n  |\n\
    help: consider dereferencing the borrow\n  |\n9 |             rolling_max.push(*number);\n\
    \  |                              +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2).fold(vec![numbers[0], numbers[0]], |mut\
    \ max, numbers| {\n        if let Some(i) = (*max).last() {\n            if *numbers\
    \ > i {\n                (max, numbers)\n            } else {\n              \
    \  (i, numbers + vec![numbers[0], numbers[0]])\n            }\n        } else\
    \ {\n            (max, numbers)\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp62nkjkte.rs:8:27\n  |\n8 |\
    \             if *numbers > i {\n  |                           ^ expected slice\
    \ `[isize]`, found `&isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp62nkjkte.rs:9:17\n\
    \  |\n9 |                 (max, numbers)\n  |                 ^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found tuple\n  |\n  = note: expected struct `Vec<isize>`\n   \
    \           found tuple `(Vec<isize>, &[isize])`\n\nerror[E0369]: cannot add `Vec<isize>`\
    \ to `&[isize]`\n  --> /tmp/tmp62nkjkte.rs:11:29\n   |\n11 |                 (i,\
    \ numbers + vec![numbers[0], numbers[0]])\n   |                     ------- ^\
    \ ---------------------------- Vec<isize>\n   |                     |\n   |  \
    \                   &[isize]\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp62nkjkte.rs:14:13\n\
    \   |\n14 |             (max, numbers)\n   |             ^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found tuple\n   |\n   = note: expected struct `Vec<isize>`\n \
    \              found tuple `(Vec<isize>, &[isize])`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.iter().fold(vec![], |mut vec: Vec<isize>, number|\
    \ {\n        let mut max_number = numbers[0];\n        for n in numbers.iter().take(numbers.len()\
    \ - 1) {\n            if n > max_number {\n                max_number = n;\n \
    \           }\n        }\n        vec.push(max_number);\n        vec\n    })\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1rq_eb0m.rs:9:20\n  |\n9 |\
    \             if n > max_number {\n  |                    ^^^^^^^^^^\n  |    \
    \                |\n  |                    expected `&isize`, found `isize`\n\
    \  |                    help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1rq_eb0m.rs:10:30\n   |\n7  |         let mut\
    \ max_number = numbers[0];\n   |                              ---------- expected\
    \ due to this value\n...\n10 |                 max_number = n;\n   |         \
    \                     ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n10 |                 max_number = *n;\n   |\
    \                              +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_val = numbers[0];\n    let mut cur = numbers[0];\n\
    \    for n in numbers {\n        if n > cur {\n            max_val = cur;\n  \
    \          cur = n;\n        } else {\n            max_val = n;\n        }\n \
    \   }\n    vec![max_val]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp2v0mpmdl.rs:6:23\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   for i in numbers.iter() {\n        let mut max = i;\n        for j in numbers.iter().rev()\
    \ {\n            if *j < max {\n                max = *j;\n            }\n   \
    \     }\n        result.push(max);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_73eqinf.rs:10:21\n   |\n\
    10 |             if *j < max {\n   |                     ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |  \
    \           if *j < *max {\n   |                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_73eqinf.rs:11:23\n   |\n8  |         let mut max = i;\n\
    \   |                       - expected due to this value\n...\n11 |          \
    \       max = *j;\n   |                       ^^\n   |                       |\n\
    \   |                       expected `&isize`, found `isize`\n   |           \
    \            help: consider borrowing here: `&*j`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_73eqinf.rs:16:5\n   |\n5  | fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n16 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(3)\n        .max(|a, b| a.partial_cmp(b).unwrap())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp222gh286.rs:7:15\n\
    \  |\n7 |         .max(|a, b| a.partial_cmp(b).unwrap())\n  |               ^\
    \ consider giving this closure parameter a type\n  |\n  = note: type must be known\
    \ at this point\n\nerror[E0061]: this function takes 0 arguments but 1 argument\
    \ was supplied\n    --> /tmp/tmp222gh286.rs:7:10\n     |\n7    |         .max(|a,\
    \ b| a.partial_cmp(b).unwrap())\n     |          ^^^ --------------------------------\
    \ supplied 1 argument\n     |          |\n     |          expected 0 arguments\n\
    \     |\nnote: associated function defined here\n\nerror[E0599]: `Option<&[isize]>`\
    \ is not an iterator\n   --> /tmp/tmp222gh286.rs:8:10\n    |\n8   |          \
    \ .collect()\n    |            ^^^^^^^ `Option<&[isize]>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<&[isize]>: Iterator`\n            which is required by `&mut Option<&[isize]>:\
    \ Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0061, E0282, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_i\
    \ = 1;\n    let mut max_so_far_p = 1;\n    let mut max_so_far_l = 1;\n    let\
    \ mut rolling_max: Vec<isize> = vec![];\n    for number in numbers.iter().rev()\
    \ {\n        if max_so_far < number {\n            max_so_far_i = max_so_far_p\
    \ - max_so_far_i;\n            max_so_far_p = max_so_far;\n            max_so_far\
    \ = number;\n        } else {\n            max_so_far_i = max_so_far_p - max_so_far_i;\n\
    \            max_so_far_p += number;\n        }\n        rolling_max.push(max_so_far);\n\
    \    }\n    rolling_max.reverse();\n    rolling_max\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphw0rbp8o.rs:12:25\n   |\n\
    12 |         if max_so_far < number {\n   |                         ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    12 |         if max_so_far < *number {\n   |                         +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphw0rbp8o.rs:15:26\n   |\n6  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n15 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n15 |             max_so_far = *number;\n   |             \
    \             +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_index: usize = 0;\n    let mut max = numbers[0];\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n            max_index = i;\n        }\n    }\n    numbers[max_index..max_index\
    \ + numbers.len() - 1].cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `[isize]` is not an iterator\n  --> /tmp/tmpjyoieevm.rs:14:55\n\
    \   |\n14 |     numbers[max_index..max_index + numbers.len() - 1].cloned().collect()\n\
    \   |                                                       ^^^^^^ `[isize]` is\
    \ not an iterator; try calling `.into_iter()` or `.iter()`\n   |\n   = note: the\
    \ following trait bounds were not satisfied:\n           `[isize]: Iterator`\n\
    \           which is required by `&mut [isize]: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n    let mut cur_max\
    \ = numbers[0];\n    let mut idx = 1;\n\n    for n in numbers {\n        if n\
    \ >= cur_max {\n            result.push(cur_max);\n            cur_max = n;\n\
    \        }\n        idx += 1;\n    }\n\n    result.push(cur_max);\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp2eny3mdu.rs:7:23\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    max_numbers.push(max_number);\n\n    for number in numbers.iter().rev()\
    \ {\n        max_number = std::cmp::max(max_number, number);\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9udc17j0.rs:11:48\n   |\n\
    11 |         max_number = std::cmp::max(max_number, number);\n   |           \
    \                                     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |         max_number\
    \ = std::cmp::max(max_number, *number);\n   |                                \
    \                +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = vec![numbers[0]];\n    numbers[0] = numbers[0];\n\
    \    for n in numbers {\n        res.iter().take(3).for_each(|e| e.max(&mut n));\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoe412ece.rs:9:41\n  |\n9 |\
    \         res.iter().take(3).for_each(|e| e.max(&mut n));\n  |               \
    \                          ^^^^^^^^^^^^^ expected `()`, found `&isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut it = numbers.iter();\n\
    \    let mut last_value = it.next();\n    result.push(last_value.unwrap());\n\
    \    for value in numbers.iter() {\n        let mut current = result.last().unwrap();\n\
    \        if *value >= *current {\n            result.push(current);\n        }\
    \ else {\n            result.push(*value);\n        }\n        last_value = value;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpin3b_unw.rs:12:22\n   |\n\
    12 |         if *value >= *current {\n   |                      ^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    12 |         if *value >= **current {\n   |                      +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpin3b_unw.rs:15:25\n   |\n15 |             result.push(*value);\n\
    \   |                         ^^^^^^\n   |                         |\n   |   \
    \                      expected `&isize`, found `isize`\n   |                \
    \         help: consider borrowing here: `&*value`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpin3b_unw.rs:17:22\n   |\n8  |     let mut last_value =\
    \ it.next();\n   |                          --------- expected due to this value\n\
    ...\n17 |         last_value = value;\n   |                      ^^^^^ expected\
    \ enum `Option`, found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n\
    \           found reference `&isize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n17 |         last_value = Some(value);\n   |                      +++++\
    \     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpin3b_unw.rs:19:5\n  \
    \ |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |          \
    \                              ---------- expected `Vec<isize>` because of return\
    \ type\n...\n19 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_elements: Vec<isize> = Vec::new();\n    let\
    \ mut current_max: isize = numbers[0];\n    for n in numbers {\n        if n >\
    \ current_max {\n            max_elements.push(current_max);\n            current_max\
    \ = n;\n        }\n        else {\n            max_elements.push(current_max);\n\
    \            current_max = n;\n        }\n    }\n    max_elements.push(current_max);\n\
    \    max_elements\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp3leqpiwl.rs:7:34\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut current_max = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number > current_max {\n            current_max = number;\n  \
    \      }\n    }\n\n    let mut current_max = current_max + 1;\n    numbers.iter().map(|number|\
    \ {\n        if number > current_max {\n            current_max = number;\n  \
    \      }\n        number\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpegoqzhej.rs:8:21\n  |\n8 |\
    \         if number > current_max {\n  |                     ^^^^^^^^^^^\n  |\
    \                     |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&current_max`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpegoqzhej.rs:9:27\n  |\n6 |     let mut current_max\
    \ = numbers[0];\n  |                           ---------- expected due to this\
    \ value\n...\n9 |             current_max = number;\n  |                     \
    \      ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n9 |             current_max = *number;\n  |               \
    \            +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpegoqzhej.rs:15:21\n\
    \   |\n15 |         if number > current_max {\n   |                     ^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&current_max`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpegoqzhej.rs:16:27\n   |\n13 |\
    \     let mut current_max = current_max + 1;\n   |                           ---------------\
    \ expected due to this value\n...\n16 |             current_max = number;\n  \
    \ |                           ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n16 |             current_max =\
    \ *number;\n   |                           +\n\nerror[E0277]: a value of type\
    \ `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n\
    \    --> /tmp/tmpegoqzhej.rs:19:8\n     |\n19   |     }).collect()\n     |   \
    \     ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc -"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = numbers[0];\n    let mut res = Vec::new();\n\
    \    let mut prev = 0;\n    for n in numbers {\n        if n < prev {\n      \
    \      m = n;\n        }\n        res.push(m);\n        prev = n;\n    }\n   \
    \ res\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpmrjc889y.rs:6:17\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current = numbers[0];\n\
    \    for ele in numbers.iter() {\n        if ele > current {\n            result.push(current);\n\
    \            current = ele;\n        } else {\n            current = ele;\n  \
    \      }\n    }\n    result.push(current);\n    result\n}\n\nfn main() {\n   \
    \ let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp994ke3q6.rs:9:18\n  |\n9 |\
    \         if ele > current {\n  |                  ^^^^^^^\n  |              \
    \    |\n  |                  expected `&isize`, found `isize`\n  |           \
    \       help: consider borrowing here: `&current`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp994ke3q6.rs:11:23\n   |\n7  |     let mut current = numbers[0];\n\
    \   |                       ---------- expected due to this value\n...\n11 | \
    \            current = ele;\n   |                       ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n11 |  \
    \           current = *ele;\n   |                       +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp994ke3q6.rs:13:23\n   |\n7  |     let mut current = numbers[0];\n\
    \   |                       ---------- expected due to this value\n...\n13 | \
    \            current = ele;\n   |                       ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |  \
    \           current = *ele;\n   |                       +\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut index = 0;\n\n  \
    \  for i in 1..numbers.len() {\n        if numbers[index] > numbers[i] {\n   \
    \         result.push(numbers[index]);\n            index++;\n        } else {\n\
    \            result.push(numbers[i]);\n        }\n    }\n\n    result\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpgwkpucjn.rs:12:18\n\
    \   |\n12 |             index++;\n   |                  ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n12 |             { let tmp =\
    \ index; index += 1; tmp };\n   |             +++++++++++      ~~~~~~~~~~~~~~~~~~~\n\
    12 -             index++;\n12 +             index += 1;\n   | \n\nerror: aborting\
    \ due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(numbers.len() + 1).max_by_key(|v| v)\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk4iz_bf4.rs:6:5\n  |\n5 |\
    \ fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n  |                   \
    \                     ---------- expected `Vec<isize>` because of return type\n\
    6 |     numbers.windows(numbers.len() + 1).max_by_key(|v| v)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found enum `Option`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \               found enum `Option<&[isize]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut last\
    \ = numbers[0] as usize;\n\n    for i in numbers.iter() {\n        result.push(if\
    \ i == last {\n            last\n        } else {\n            last + 1\n    \
    \    });\n        last = *i;\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3ji38dna.rs:10:29\n   |\n\
    10 |         result.push(if i == last {\n   |                             ^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3ji38dna.rs:11:13\n\
    \   |\n11 |             last\n   |             ^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n11 |             last.try_into().unwrap()\n   |   \
    \              ++++++++++++++++++++\n\nerror[E0277]: can't compare `&isize` with\
    \ `usize`\n  --> /tmp/tmp3ji38dna.rs:10:26\n   |\n10 |         result.push(if\
    \ i == last {\n   |                          ^^ no implementation for `&isize\
    \ == usize`\n   |\n   = help: the trait `PartialEq<usize>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3ji38dna.rs:13:13\n\
    \   |\n13 |             last + 1\n   |             ^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n13 |             (last + 1).try_into().unwrap()\n\
    \   |             +        +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3ji38dna.rs:15:16\n   |\n7  |     let mut last = numbers[0] as\
    \ usize;\n   |                    ------------------- expected due to this value\n\
    ...\n15 |         last = *i;\n   |                ^^ expected `usize`, found `isize`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2).fold(Vec::<isize>::new(), |mut accumulator,\
    \ element| {\n        if accumulator.len() == 0 {\n            accumulator.push(element);\n\
    \            return accumulator;\n        }\n        if accumulator.last().unwrap()\
    \ > element {\n            accumulator.push(element);\n            return accumulator;\n\
    \        }\n        accumulator\n    })\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg9w7g02x.rs:8:30\n  |\n8 |\
    \             accumulator.push(element);\n  |                              ^^^^^^^\
    \ expected `isize`, found `&[isize]`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpg9w7g02x.rs:11:42\n   |\n11 |         if accumulator.last().unwrap()\
    \ > element {\n   |                                          ^^^^^^^ expected\
    \ `isize`, found slice `[isize]`\n   |\n   = note: expected reference `&isize`\n\
    \              found reference `&[isize]`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpg9w7g02x.rs:12:30\n   |\n12 |             accumulator.push(element);\n\
    \   |                              ^^^^^^^ expected `isize`, found `&[isize]`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let max_number = numbers[0]\
    \ as isize;\n    let mut max = max_number;\n    for n in numbers {\n        if\
    \ n > max {\n            max = n as isize;\n        }\n    }\n    result.push(max);\n\
    \    for n in numbers {\n        if n == max {\n            result.push(max);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpt8ae2n7j.rs:15:14\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n9   |     for n in numbers {\n   \
    \ |              ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n15  |     for n in numbers {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `numbers`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n9   |     for n in &numbers\
    \ {\n    |              +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut maximum = numbers[0];\n    for i in 1..numbers.len()\
    \ {\n        if maximum < numbers[i] {\n            maximum = numbers[i];\n  \
    \      }\n    }\n    vec![maximum]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp3uxruz3g.rs:6:23\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_idx = 0;\n    let mut max_num = numbers[0]\
    \ as isize;\n    let mut rolling_max = vec![numbers[0]];\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_num {\n            max_num = numbers[i];\n  \
    \          max_idx = i;\n        }\n        rolling_max.push(max_num);\n    }\n\
    \    rolling_max.push(numbers[max_idx]);\n    rolling_max\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpi_0vjg8a.rs:7:23\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut index = 1;\n   \
    \ let mut max_index = numbers.len() - 1;\n    let mut max_value = numbers[0];\n\
    \    let mut current_value = numbers[0];\n    while index != numbers.len() {\n\
    \        while index < numbers.len() && current_value > max {\n            max\
    \ += numbers[index];\n            index += 1;\n            current_value += numbers[index];\n\
    \        }\n        if index > numbers.len() {\n            break;\n        }\n\
    \        max_value = max;\n        max_index = index;\n        max = numbers[index];\n\
    \        index += 1;\n        current_value += numbers[index];\n    }\n    numbers.iter().skip(max_index).take(max_index\
    \ - index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpjvo099jn.rs:26:60\n     |\n\
    26   |     numbers.iter().skip(max_index).take(max_index - index).collect()\n\
    \     |                                                            ^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for i in numbers.iter().rev()\
    \ {\n        if i > max {\n            max = i;\n        }\n    }\n    numbers.drain(numbers.iter().rev().skip(numbers.iter().filter(|&x|\
    \ *x > max).count()));\n    numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpeilky789.rs:8:16\n  |\n8 |\
    \         if i > max {\n  |                ^^^\n  |                |\n  |    \
    \            expected `&isize`, found `isize`\n  |                help: consider\
    \ borrowing here: `&max`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpeilky789.rs:9:19\n\
    \  |\n6 |     let mut max = numbers[0];\n  |                   ---------- expected\
    \ due to this value\n...\n9 |             max = i;\n  |                   ^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |             max = *i;\n  |                   +\n\nerror[E0277]: the trait\
    \ bound `Skip<Rev<std::slice::Iter<'_, isize>>>: RangeBounds<usize>` is not satisfied\n\
    \    --> /tmp/tmpeilky789.rs:12:19\n     |\n12   |     numbers.drain(numbers.iter().rev().skip(numbers.iter().filter(|&x|\
    \ *x > max).count()));\n     |             ----- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ the trait `RangeBounds<usize>` is not implemented for `Skip<Rev<std::slice::Iter<'_,\
    \ isize>>>`\n     |             |\n     |             required by a bound introduced\
    \ by this call\n     |\n     = help: the following other types implement trait\
    \ `RangeBounds<T>`:\n               (Bound<&'a T>, Bound<&'a T>)\n           \
    \    (Bound<T>, Bound<T>)\n               RangeFrom<&T>\n               RangeFrom<T>\n\
    \               RangeFull\n               RangeInclusive<&T>\n               RangeInclusive<T>\n\
    \               RangeTo<&T>\n             and 5 others\nnote: required by a bound\
    \ in `Vec::<T, A>::drain`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2)\n        .enumerate()\n        .filter_map(|(index,\
    \ w)| index == 0 || w.iter().max().is_some())\n        .map(|(index, w)| w.max().unwrap())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppubh34ll.rs:8:34\n  |\n8 |\
    \         .filter_map(|(index, w)| index == 0 || w.iter().max().is_some())\n \
    \ |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n    \
    \         found type `bool`\nhelp: try wrapping the expression in `Some`\n  |\n\
    8 |         .filter_map(|(index, w)| Some(index == 0 || w.iter().max().is_some()))\n\
    \  |                                  +++++                                  \
    \    +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut r = Vec::new();\n    let mut curr = numbers[0]\
    \ as isize;\n    for i in 1..numbers.len() {\n        if curr <= numbers[i] {\n\
    \            r.push(curr);\n            curr = numbers[i];\n        } else {\n\
    \            curr = max(numbers[i], curr);\n        }\n    }\n    r\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpc_mww_vr.rs:13:20\n\
    \   |\n13 |             curr = max(numbers[i], curr);\n   |                  \
    \  ^^^ not found in this scope\n   |\nhelp: consider importing this function\n\
    \   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    assert!(numbers.len() > 0);\n    let mut result = numbers[0];\n\
    \    let mut current_max = numbers[0];\n    for i in 1..numbers.len() {\n    \
    \    if numbers[i] > current_max {\n            current_max = numbers[i];\n  \
    \          result = numbers[i];\n        }\n    }\n    vec![current_max, result]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: numbers.len() > 0', /tmp/tmp62cwqbkw.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = numbers[0] as isize;\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] >= m {\n            m = numbers[i];\n        }\n  \
    \  }\n    numbers.append(m);\n    numbers\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp140aj7dc.rs:12:20\n   |\n\
    12 |     numbers.append(m);\n   |                    ^ expected `&mut Vec<isize>`,\
    \ found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n\
    \                           found type `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max = numbers;\n    for value in numbers.iter()\
    \ {\n        if value > rolling_max.last() {\n            rolling_max.push(value);\n\
    \        }\n    }\n    rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuo3cca76.rs:8:20\n  |\n8 |\
    \         if value > rolling_max.last() {\n  |                    ^^^^^^^^^^^^^^^^^^\
    \ expected `&isize`, found enum `Option`\n  |\n  = note: expected reference `&isize`\n\
    \                  found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpuo3cca76.rs:9:30\n  |\n9 |             rolling_max.push(value);\n\
    \  |                              ^^^^^ expected `isize`, found `&isize`\n  |\n\
    help: consider dereferencing the borrow\n  |\n9 |             rolling_max.push(*value);\n\
    \  |                              +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max: isize = 0;\n    for i in 0..numbers.len()\
    \ {\n        max = if max < numbers[i] { numbers[i] } else { max };\n    }\n \
    \   let mut vec = Vec::new();\n    for i in 0..numbers.len() {\n        vec.push(numbers[i]);\n\
    \    }\n    vec.push(max);\n    vec\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmps0sfi0i7.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \    }\n    for i in 1..numbers.len() {\n        if numbers[i] > max {\n     \
    \       max = numbers[i];\n        }\n    }\n    numbers.iter().cloned().reverse().take(numbers.len()\
    \ - 1).collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmp9o51wkih.rs:17:29\n   |\n17 |     numbers.iter().cloned().reverse().take(numbers.len()\
    \ - 1).collect::<Vec<_>>()\n   |                             ^^^^^^^ method not\
    \ found in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for element in numbers.iter().rev() {\n        if element >\
    \ max_element {\n            max_element = element;\n            max_index = numbers.iter().rev().position(|x|\
    \ *x != element).unwrap() + 1;\n        }\n    }\n    vec![max_element].rev().into_iter().cloned().collect::<Vec<isize>>()[max_index..]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpv_p5deq4.rs:9:22\n  |\n9 |\
    \         if element > max_element {\n  |                      ^^^^^^^^^^^\n \
    \ |                      |\n  |                      expected `&isize`, found\
    \ `isize`\n  |                      help: consider borrowing here: `&max_element`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpv_p5deq4.rs:10:27\n   |\n6  |\
    \     let mut max_element: isize = 0;\n   |                          ----- expected\
    \ due to this type\n...\n10 |             max_element = element;\n   |       \
    \                    ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n10 |             max_element = *element;\n \
    \  |                           +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv_p5deq4.rs:11:65\n\
    \   |\n11 |             max_index = numbers.iter().rev().position(|x| *x != element).unwrap()\
    \ + 1;\n   |                                                                 ^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n11 |             max_index = numbers.iter().rev().position(|x| *x != *element).unwrap()\
    \ + 1;\n   |                                                                 +\n\
    \nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpv_p5deq4.rs:14:23\n\
    \    |\n14  |       vec![max_element].rev().into_iter().cloned().collect::<Vec<isize>>()[max_index..]\n\
    \    |                         ^^^ `Vec<isize>` is not an iterator\n    |\n  \
    \  = note: the following trait bounds were not satisfied:\n            `Vec<isize>:\
    \ Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n  \
    \          `[isize]: Iterator`\n            which is required by `&mut [isize]:\
    \ Iterator`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = numbers;\n    let mut max = numbers[0];\n\
    \    for i in numbers.iter().rev() {\n        if i > max {\n            max =\
    \ i;\n        }\n        if max == i {\n            result.remove(i);\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppwlv3eno.rs:9:16\n  |\n9 |\
    \         if i > max {\n  |                ^^^\n  |                |\n  |    \
    \            expected `&isize`, found `isize`\n  |                help: consider\
    \ borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppwlv3eno.rs:10:19\n\
    \   |\n7  |     let mut max = numbers[0];\n   |                   ---------- expected\
    \ due to this value\n...\n10 |             max = i;\n   |                   ^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n10 |             max = *i;\n   |                   +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppwlv3eno.rs:12:19\n   |\n12 |         if max == i {\n \
    \  |                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n12 |         if max == *i {\n   |          \
    \         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppwlv3eno.rs:13:27\n\
    \   |\n13 |             result.remove(i);\n   |                           ^ expected\
    \ `usize`, found `&isize`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers == Vec::new() {\n        return Vec::new();\n\
    \    }\n\n    let mut max_number = numbers[0];\n    let mut max_index = -1;\n\
    \    let mut i = 1;\n    loop {\n        if max_number > numbers[i] {\n      \
    \      max_number = numbers[i];\n            max_index = i;\n        }\n     \
    \   i += 1;\n        if i == numbers.len() {\n            break;\n        }\n\
    \    }\n\n    Vec::from_elem(max_index, max_number).into_iter().collect()\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp_mqm9onb.rs:11:25\n\
    \   |\n11 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror[E0599]: no function or associated\
    \ item named `from_elem` found for struct `Vec<_, _>` in the current scope\n \
    \ --> /tmp/tmp_mqm9onb.rs:24:10\n   |\n24 |     Vec::from_elem(max_index, max_number).into_iter().collect()\n\
    \   |          ^^^^^^^^^ function or associated item not found in `Vec<_, _>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut curr = numbers[0];\n\
    \    for n in numbers.iter().rev() {\n        let mut max_n = max::<isize>(curr,\
    \ n);\n        while curr < max_n {\n            result.push(curr);\n        \
    \    curr += 1;\n        }\n        curr = n;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpr0xy___f.rs:9:25\n\
    \  |\n9 |         let mut max_n = max::<isize>(curr, n);\n  |                \
    \         ^^^ not found in this scope\n  |\nhelp: consider importing this function\n\
    \  |\n1 | use std::cmp::max;\n  |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr0xy___f.rs:14:16\n\
    \   |\n7  |     let mut curr = numbers[0];\n   |                    ----------\
    \ expected due to this value\n...\n14 |         curr = n;\n   |              \
    \  ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n14 |         curr = *n;\n   |                +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = numbers.first();\n    let mut max = numbers[0];\n\
    \    for n in numbers.iter().rev() {\n        if n == m {\n            max = n;\n\
    \        } else if n > max {\n            max = n;\n        }\n        m = n;\n\
    \    }\n    let mut result = vec![max];\n    for n in numbers.iter().rev() {\n\
    \        if n != max {\n            result.push(n);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5qd1f41a.rs:10:19\n   |\n\
    7  |     let mut max = numbers[0];\n   |                   ---------- expected\
    \ due to this value\n...\n10 |             max = n;\n   |                   ^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n10 |             max = *n;\n   |                   +\n\nerror[E0277]: can't\
    \ compare `&isize` with `Option<&isize>`\n --> /tmp/tmp5qd1f41a.rs:9:14\n  |\n\
    9 |         if n == m {\n  |              ^^ no implementation for `&isize ==\
    \ Option<&isize>`\n  |\n  = help: the trait `PartialEq<Option<&isize>>` is not\
    \ implemented for `&isize`\n  = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n            f32\n            f64\n            i128\n    \
    \        i16\n            i32\n            i64\n            i8\n            isize\n\
    \          and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5qd1f41a.rs:11:23\n\
    \   |\n11 |         } else if n > max {\n   |                       ^^^\n   |\
    \                       |\n   |                       expected `&isize`, found\
    \ `isize`\n   |                       help: consider borrowing here: `&max`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp5qd1f41a.rs:12:19\n   |\n7  |  \
    \   let mut max = numbers[0];\n   |                   ---------- expected due\
    \ to this value\n...\n12 |             max = n;\n   |                   ^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    12 |             max = *n;\n   |                   +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5qd1f41a.rs:14:13\n   |\n6  |     let mut m = numbers.first();\n\
    \   |                 --------------- expected due to this value\n...\n14 |  \
    \       m = n;\n   |             ^ expected enum `Option`, found `&isize`\n  \
    \ |\n   = note:   expected enum `Option<&isize>`\n           found reference `&isize`\n\
    help: try wrapping the expression in `Some`\n   |\n14 |         m = Some(n);\n\
    \   |             +++++ +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5qd1f41a.rs:19:25\n\
    \   |\n19 |             result.push(n);\n   |              "
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max = Vec::new();\n    for number in numbers\
    \ {\n        rolling_max.push(number);\n        if rolling_max.len() > 1 {\n \
    \           if rolling_max[len(rolling_max)-1] > rolling_max[len(rolling_max)-2]\n\
    \            {\n                for number in rolling_max.iter().rev() {\n   \
    \                 if number > rolling_max[len(rolling_max)-2]\n              \
    \      { rolling_max.pop(); };\n                };\n            };\n        };\n\
    \    };\n    rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpo0hp4aif.rs:10:28\n\
    \   |\n10 |             if rolling_max[len(rolling_max)-1] > rolling_max[len(rolling_max)-2]\n\
    \   |                            ^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `len` in this scope\n  --> /tmp/tmpo0hp4aif.rs:10:62\n\
    \   |\n10 |             if rolling_max[len(rolling_max)-1] > rolling_max[len(rolling_max)-2]\n\
    \   |                                                              ^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  -->\
    \ /tmp/tmpo0hp4aif.rs:13:45\n   |\n13 |                     if number > rolling_max[len(rolling_max)-2]\n\
    \   |                                             ^^^ not found in this scope\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let size = numbers[numbers.size()\
    \ - 1];\n    for i in 0..size {\n        let index = numbers[i as usize] - 1;\n\
    \        result.push(numbers[index]);\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `size` found for struct `Vec<isize>` in the\
    \ current scope\n --> /tmp/tmpap1rkcvy.rs:7:32\n  |\n7 |     let size = numbers[numbers.size()\
    \ - 1];\n  |                                ^^^^ help: there is an associated\
    \ function with a similar name: `resize`\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpap1rkcvy.rs:10:21\n   |\n10 |         result.push(numbers[index]);\n\
    \   |                     ^^^^^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_list = numbers;\n\n    for i in 1..numbers.len()\
    \ {\n        max_list = max_list.windows(i);\n        match max_list.last() {\n\
    \            None => return max_list,\n            Some(max_el) => {\n       \
    \         max_list.remove(0);\n                max_list.push(max_el);\n      \
    \      }\n        }\n    }\n    max_list\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0nkascdi.rs:9:20\n  |\n6 |\
    \     let mut max_list = numbers;\n  |                        ------- expected\
    \ due to this value\n...\n9 |         max_list = max_list.windows(i);\n  |   \
    \                 ^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found struct `Windows`\n\
    \  |\n  = note: expected struct `Vec<isize>`\n             found struct `Windows<'_,\
    \ isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0nkascdi.rs:14:31\n\
    \   |\n14 |                 max_list.push(max_el);\n   |                     \
    \          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n14 |                 max_list.push(*max_el);\n   |       \
    \                        +\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut last_max = numbers[0];\n    let mut last_max_idx\
    \ = 1;\n    let mut max_idx = 1;\n    let mut max_el = numbers[0];\n    for el\
    \ in numbers {\n        if el > last_max {\n            last_max_idx = max_idx;\n\
    \            last_max = el;\n        }\n        max_idx = (max_idx + 1) % numbers.len();\n\
    \        max_el = numbers[max_idx];\n    }\n    vec![max_el, last_max, max_el]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "warning: variable `last_max_idx` is assigned to, but never used\n --> /tmp/tmpz9s74__7.rs:7:13\n\
    \  |\n7 |     let mut last_max_idx = 1;\n  |             ^^^^^^^^^^^^\n  |\n \
    \ = note: `#[warn(unused_variables)]` on by default\n  = note: consider using\
    \ `_last_max_idx` instead\n\nwarning: value assigned to `last_max_idx` is never\
    \ read\n  --> /tmp/tmpz9s74__7.rs:12:13\n   |\n12 |             last_max_idx =\
    \ max_idx;\n   |             ^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0382]:\
    \ borrow of moved value: `numbers`\n   --> /tmp/tmpz9s74__7.rs:15:35\n    |\n\
    5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |             \
    \   ------- move occurs because `numbers` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n...\n10  |     for el in numbers {\n    |      \
    \         ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n15  |         max_idx = (max_idx + 1) % numbers.len();\n    |           \
    \                        ^^^^^^^^^^^^^ value borrowed here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `numbers`\n\
    help: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n10  |     for el in &numbers {\n    |          \
    \     +\n\nerror: aborting due to previous error; 2 warnings emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_numbers_mut_ref\
    \ = &mut max_numbers;\n    for n in numbers.iter() {\n        loop {\n       \
    \     if max_numbers_mut_ref[0] > n {\n                *max_numbers_mut_ref[0]\
    \ = n;\n                break;\n            }\n            match max_numbers_mut_ref.iter().position(|&x|\
    \ x == n) {\n                None => break,\n                Some(_) => {\n  \
    \                  max_numbers_mut_ref.rev()\n                }\n            }\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed for `Vec<T>`\n  --> /tmp/tmp45b6ax9t.rs:11:17\n\
    \   |\n6  |     let mut max_numbers = Vec::new();\n   |         ---------------\
    \ consider giving `max_numbers` the explicit type `Vec<T>`, with the type parameters\
    \ specified\n...\n11 |                 *max_numbers_mut_ref[0] = n;\n   |    \
    \             ^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n   |\n   = note: type\
    \ must be known at this point\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = numbers.clone();\n    let\
    \ mut maximum = numbers[0];\n    for number in numbers {\n        if number >\
    \ maximum {\n            maximum = number;\n        }\n    }\n    for i in (0..numbers.len()\
    \ - 1).rev() {\n        result.insert(i, maximum);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmpujkdb89t.rs:13:18\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n13  |     for i in (0..numbers.len() - 1).rev() {\n   \
    \ |                  ^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `numbers`\n\
    help: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n8   |     for number in &numbers {\n    |      \
    \             +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut maxes = Vec::new();\n    let mut current_max =\
    \ numbers[0];\n    for num in numbers.iter().rev() {\n        if num > current_max\
    \ {\n            current_max = num;\n        }\n        maxes.push(current_max);\n\
    \    }\n    maxes\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpprgy1ako.rs:9:18\n  |\n9 |\
    \         if num > current_max {\n  |                  ^^^^^^^^^^^\n  |      \
    \            |\n  |                  expected `&isize`, found `isize`\n  |   \
    \               help: consider borrowing here: `&current_max`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpprgy1ako.rs:10:27\n   |\n7  |     let mut current_max\
    \ = numbers[0];\n   |                           ---------- expected due to this\
    \ value\n...\n10 |             current_max = num;\n   |                      \
    \     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             current_max = *num;\n   |               \
    \            +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    numbers.windows(2)\n        .filter(|w| w.iter().all(|x|\
    \ *x == *w.last()))\n        .collect()\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `Option<&isize>` cannot be dereferenced\n --> /tmp/tmp94rjylvj.rs:7:44\n\
    \  |\n7 |         .filter(|w| w.iter().all(|x| *x == *w.last()))\n  |        \
    \                                    ^^^^^^^^^\n\nerror[E0277]: a value of type\
    \ `Vec<isize>` cannot be built from an iterator over elements of type `&[isize]`\n\
    \    --> /tmp/tmp94rjylvj.rs:8:10\n     |\n8    |         .collect()\n     | \
    \         ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&[isize]>`\n\
    \     |\n     = help: the trait `FromIterator<&[isize]>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max: isize = 0;\n    for v in numbers {\n     \
    \   if v > max {\n            max = v;\n        }\n    }\n    let mut output:\
    \ Vec<isize> = Vec::new();\n    for v in numbers {\n        if v == max {\n  \
    \          output.push(v);\n        }\n    }\n    output\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmppuvo57td.rs:13:14\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n6   |     let mut max: isize = 0;\n7  \
    \ |     for v in numbers {\n    |              ------- `numbers` moved due to\
    \ this implicit call to `.into_iter()`\n...\n13  |     for v in numbers {\n  \
    \  |              ^^^^^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `numbers`\nhelp: consider\
    \ iterating over a slice of the `Vec<isize>`'s content to avoid moving into the\
    \ `for` loop\n    |\n7   |     for v in &numbers {\n    |              +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::<isize>::with_capacity(numbers[0].len());\n\
    \    let mut cur_max: Option<isize> = None;\n    for &x in numbers {\n       \
    \ if cur_max.is_none() {\n            cur_max = Some(x);\n        } else {\n \
    \           cur_max.unwrap() = if x > cur_max.unwrap() {\n                x\n\
    \            } else {\n                cur_max.unwrap()\n            };\n    \
    \    }\n        result.push(cur_max.unwrap());\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpf0f7c6av.rs:6:61\n  |\n6 |     let mut result = Vec::<isize>::with_capacity(numbers[0].len());\n\
    \  |                                                             ^^^ method not\
    \ found in `isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpf0f7c6av.rs:8:9\n\
    \  |\n8 |     for &x in numbers {\n  |         ^^    ------- this expression has\
    \ type `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `x`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0070]:\
    \ invalid left-hand side of assignment\n  --> /tmp/tmpf0f7c6av.rs:12:30\n   |\n\
    12 |             cur_max.unwrap() = if x > cur_max.unwrap() {\n   |          \
    \   ---------------- ^\n   |             |\n   |             cannot assign to\
    \ this expression\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0070, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0070`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut index = numbers.len();\n\
    \    while index > 0 {\n        if max < numbers[index - 1] {\n            max\
    \ = numbers[index - 1];\n        }\n        index -= 1;\n    }\n    vec![max]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmphuwiwill.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut last = numbers.iter().max().unwrap();\n\
    \    for num in numbers {\n        if num == last {\n            result.push(num);\n\
    \        } else {\n            result.push(last);\n            last = num;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp41fd70dd.rs:9:19\n  |\n9 |\
    \         if num == last {\n  |                   ^^^^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |         if\
    \ num == *last {\n  |                   +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp41fd70dd.rs:12:25\n   |\n12 |             result.push(last);\n\
    \   |                         ^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n12 |             result.push(*last);\n\
    \   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41fd70dd.rs:13:20\n\
    \   |\n7  |     let mut last = numbers.iter().max().unwrap();\n   |          \
    \          ----------------------------- expected due to this value\n...\n13 |\
    \             last = num;\n   |                    ^^^\n   |                 \
    \   |\n   |                    expected `&isize`, found `isize`\n   |        \
    \            help: consider borrowing here: `&num`\n\nerror: aborting due to 3\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_num = numbers[0];\n\n    for i in 1..numbers.len()\
    \ {\n        max_num = if numbers[i] > max_num {\n            max_num\n      \
    \  } else {\n            numbers[i]\n        };\n    }\n\n    vec![max_num]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpx9g0h3w0.rs:6:23\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max: isize = 0;\n    let mut last_max: isize =\
    \ 0;\n    let mut last_number = 0;\n    let mut i = 0;\n    let mut cur = &numbers[0];\n\
    \    while i < numbers.len() {\n        while i < numbers.len() && (numbers[i]\
    \ > cur as isize) {\n            i += 1;\n        }\n        let value = numbers[i];\n\
    \        if value > last_max {\n            last_max = value;\n        } else\
    \ {\n            max = last_max;\n        }\n        last_number = cur;\n    \
    \    cur = &numbers[i];\n    }\n    last_number = cur;\n    vec![max, last_number]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyoorh__k.rs:21:23\n   |\n\
    8  |     let mut last_number = 0;\n   |                           - expected due\
    \ to this value\n...\n21 |         last_number = cur;\n   |                  \
    \     ^^^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n21 |         last_number = *cur;\n   |                   \
    \    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyoorh__k.rs:24:19\n  \
    \ |\n8  |     let mut last_number = 0;\n   |                           - expected\
    \ due to this value\n...\n24 |     last_number = cur;\n   |                  \
    \ ^^^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n24 |     last_number = *cur;\n   |                   +\n\nerror[E0606]:\
    \ casting `&isize` as `isize` is invalid\n  --> /tmp/tmpyoorh__k.rs:12:50\n  \
    \ |\n12 |         while i < numbers.len() && (numbers[i] > cur as isize) {\n \
    \  |                                                  ---^^^^^^^^^\n   |     \
    \                                             |\n   |                        \
    \                          cannot cast `&isize` as `isize`\n   |             \
    \                                     help: dereference the expression: `*cur`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0606.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut last_item: isize\
    \ = 0;\n    for (i, item) in numbers.iter().enumerate() {\n        if last_item\
    \ == item {\n            result.push(item);\n            continue;\n        }\n\
    \        last_item = item;\n        result.push(item);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmper8b5alt.rs:9:25\n  |\n9 |\
    \         if last_item == item {\n  |                         ^^^^ expected `isize`,\
    \ found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |     \
    \    if last_item == *item {\n  |                         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmper8b5alt.rs:13:21\n   |\n7  |     let mut last_item: isize\
    \ = 0;\n   |                        ----- expected due to this type\n...\n13 |\
    \         last_item = item;\n   |                     ^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |        \
    \ last_item = *item;\n   |                     +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmper8b5alt.rs:16:5\n   |\n5  | fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n16 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut buffer = Vec::new();\n    for i in 1..numbers.len()\
    \ {\n        let j = numbers.len() - i;\n        let tmp = buffer[j - 1];\n  \
    \      if tmp > numbers[j] {\n            buffer[j] = numbers[j];\n        }\n\
    \    }\n    buffer\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 2', /tmp/tmpsg_zcy8m.rs:9:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = numbers;\n    for elem in numbers.iter().skip(1)\
    \ {\n        if elem > res.last_unwrap() {\n            res.last_mut().unwrap()\
    \ = elem;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `last_unwrap` found for struct `Vec<isize>`\
    \ in the current scope\n --> /tmp/tmpb8bodxqi.rs:8:23\n  |\n8 |         if elem\
    \ > res.last_unwrap() {\n  |                       ^^^^^^^^^^^ method not found\
    \ in `Vec<isize>`\n\nerror[E0070]: invalid left-hand side of assignment\n -->\
    \ /tmp/tmpb8bodxqi.rs:9:37\n  |\n9 |             res.last_mut().unwrap() = elem;\n\
    \  |             ----------------------- ^\n  |             |\n  |           \
    \  cannot assign to this expression\n\nerror[E0308]: mismatched types\n --> /tmp/tmpb8bodxqi.rs:9:39\n\
    \  |\n9 |             res.last_mut().unwrap() = elem;\n  |                   \
    \                    ^^^^ types differ in mutability\n  |\n  = note: expected\
    \ mutable reference `&mut isize`\n                     found reference `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0070, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0070`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    let mut current = 0;\n    for x in numbers\
    \ {\n        if x > max {\n            max = x;\n        }\n        if x <= min\
    \ {\n            min = x;\n        }\n        if x == max {\n            current++;\n\
    \        } else {\n            current = 0;\n        }\n        result.push(max);\n\
    \        max = current;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpaxzxaqr8.rs:18:20\n\
    \   |\n18 |             current++;\n   |                    ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n18 |             { let tmp =\
    \ current; current += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n\
    18 -             current++;\n18 +             current += 1;\n   | \n\nerror: aborting\
    \ due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_rolling_number:\
    \ isize = 0;\n    let mut rolling_number: isize = 0;\n    for i in numbers {\n\
    \        if max_element < i {\n            max_element = i;\n            max_rolling_number\
    \ = rolling_number;\n        }\n        rolling_number += 1;\n        if rolling_number\
    \ > max_rolling_number {\n            max_rolling_number = rolling_number;\n \
    \       }\n    }\n    numbers.push(max_element);\n    numbers\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `numbers` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmp_9gr4c31.rs:19:5\n   |\n5  | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                ------- help: consider changing\
    \ this to be mutable: `mut numbers`\n...\n19 |     numbers.push(max_element);\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0382]:\
    \ borrow of moved value: `numbers`\n   --> /tmp/tmp_9gr4c31.rs:19:5\n    |\n5\
    \   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |             \
    \   ------- move occurs because `numbers` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n...\n9   |     for i in numbers {\n    |       \
    \       ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     numbers.push(max_element);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `numbers`\nhelp: consider iterating over a\
    \ slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n  \
    \  |\n9   |     for i in &numbers {\n    |              +\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0382, E0596.\n\
    For more information about an error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut prev_max = numbers[0];\n\
    \n    for n in numbers {\n        if n > prev_max {\n            result.push(n\
    \ - prev_max);\n            prev_max = n;\n        } else {\n            result.push(prev_max);\n\
    \            prev_max = n;\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpx91z2khg.rs:7:24\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number > rolling_max {\n            rolling_max = number;\n  \
    \      }\n    }\n    Vec::from(rolling_max)\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp41iyqdtz.rs:8:21\n  |\n8 |\
    \         if number > rolling_max {\n  |                     ^^^^^^^^^^^\n  |\
    \                     |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&rolling_max`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp41iyqdtz.rs:9:27\n  |\n6 |     let mut rolling_max\
    \ = numbers[0];\n  |                           ---------- expected due to this\
    \ value\n...\n9 |             rolling_max = number;\n  |                     \
    \      ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n9 |             rolling_max = *number;\n  |               \
    \            +\n\nerror[E0277]: the trait bound `Vec<_, _>: From<isize>` is not\
    \ satisfied\n  --> /tmp/tmp41iyqdtz.rs:12:5\n   |\n12 |     Vec::from(rolling_max)\n\
    \   |     ^^^^^^^^^ the trait `From<isize>` is not implemented for `Vec<_, _>`\n\
    \   |\n   = help: the following other types implement trait `From<T>`:\n     \
    \        <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T,\
    \ A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut\
    \ [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as\
    \ From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8>\
    \ as From<&str>>\n           and 2 others\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    numbers.iter().cloned().for_each(|x|\
    \ {\n        let mut max: isize = 0;\n        let mut index = 0;\n        for\
    \ i in 1..numbers.len() {\n            if max < numbers[i] {\n               \
    \ max = numbers[i];\n                index = i;\n            }\n        }\n  \
    \      result.push(max);\n    });\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 4, 4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpzpbhrh3v.rs:24:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers.max_by_key(|number| {\n        if\
    \ number > numbers.len() {\n            number\n        } else {\n           \
    \ numbers[number]\n        }\n    });\n    max = std::cmp::max(max, numbers.len());\n\
    \    for i in 0..max {\n        if numbers[i] > numbers.len() {\n            numbers[i\
    \ - 1..i + 1]\n        } else {\n            numbers[i..i + 1]\n        }\n  \
    \  }\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpuaxnzda8.rs:6:27\n\
    \    |\n6   |       let mut max = numbers.max_by_key(|number| {\n    |       \
    \                      ^^^^^^^^^^ `Vec<isize>` is not an iterator\n    |\n   \
    \ = note: the following trait bounds were not satisfied:\n            `Vec<isize>:\
    \ Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n  \
    \          `[isize]: Iterator`\n            which is required by `&mut [isize]:\
    \ Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuaxnzda8.rs:15:25\n\
    \   |\n15 |         if numbers[i] > numbers.len() {\n   |                    \
    \     ^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    15 |         if numbers[i] > numbers.len().try_into().unwrap() {\n   |       \
    \                               ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuaxnzda8.rs:16:13\n   |\n15 | /         if numbers[i] >\
    \ numbers.len() {\n16 | |             numbers[i - 1..i + 1]\n   | |          \
    \   ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found slice `[isize]`\n17 | |       \
    \  } else {\n18 | |             numbers[i..i + 1]\n19 | |         }\n   | |_________-\
    \ expected this to be `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuaxnzda8.rs:18:13\n\
    \   |\n15 | /         if numbers[i] > numbers.len() {\n16 | |             numbers[i\
    \ - 1..i + 1]\n17 | |         } else {\n18 | |             numbers[i..i + 1]\n\
    \   | |             ^^^^^^^^^^^^^^^^^ expected `()`, found slice `[isize]`\n19\
    \ | |         }\n   | |_________- expected this to be `()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuaxnzda8.rs:14:5\n   |\n5  |   fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n14 | /     for i in 0..max\
    \ {\n15 | |         if numbers[i] > numbers.len() {\n16 | |             numbers[i\
    \ - 1..i + 1]\n17 | |         } else {\n18 | |             numbers[i..i + 1]\n\
    19 | |         }\n20 | |     }\n   | |_____^ ex"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rollingmax = numbers;\n\n    for n in rollingmax.iter_mut()\
    \ {\n        *n += 1;\n        if *n > *rollingmax.last() {\n            *n =\
    \ *rollingmax.last();\n            rollingmax.pop();\n        }\n    }\n    rollingmax\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `Option<&isize>` cannot be dereferenced\n  --> /tmp/tmp3tzk70s8.rs:10:17\n\
    \   |\n10 |         if *n > *rollingmax.last() {\n   |                 ^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0614]: type `Option<&isize>` cannot be dereferenced\n  --> /tmp/tmp3tzk70s8.rs:11:18\n\
    \   |\n11 |             *n = *rollingmax.last();\n   |                  ^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_element\
    \ = max_so_far;\n    for i in 1..numbers.len() {\n        if numbers[i] > max_so_far\
    \ {\n            max_so_far = numbers[i];\n            max_element = numbers[i];\n\
    \        }\n    }\n    let mut rest = numbers.len() - 1;\n    while rest > 0 {\n\
    \        if numbers[rest] > max_so_far {\n            max_so_far = numbers[rest];\n\
    \            max_element = numbers[rest];\n        }\n        rest -= 1;\n   \
    \ }\n    vec![max_element]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp7alqwsvg.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut current_max = max;\n\
    \    for i in 1..numbers.len() {\n        let mut cur = max;\n        cur = cur\
    \ if cur > numbers[i] else numbers[i];\n        if cur > current_max {\n     \
    \       current_max = cur;\n        }\n    }\n    vec![current_max]\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found keyword `if`\n  --> /tmp/tmpyf0nowoi.rs:10:19\n   |\n10 |         cur\
    \ = cur if cur > numbers[i] else numbers[i];\n   |                   ^^ expected\
    \ one of 8 possible tokens\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\
    \    let mut result = vec![numbers[0]];\n    for i in 2..numbers.len() {\n   \
    \     let num = &numbers[i - 1];\n        if num > numbers[i] {\n            result.push(num);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwq3z749_.rs:12:18\n   |\n\
    12 |         if num > numbers[i] {\n   |                  ^^^^^^^^^^\n   |   \
    \               |\n   |                  expected `&isize`, found `isize`\n  \
    \ |                  help: consider borrowing here: `&numbers[i]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwq3z749_.rs:13:25\n   |\n13 |             result.push(num);\n\
    \   |                         ^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n13 |             result.push(*num);\n\
    \   |                         +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = numbers[0];\n    for x in numbers[1..]\
    \ {\n        if x > result {\n            result = x;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n --> /tmp/tmp6rsozvrd.rs:7:14\n  |\n7 |     for x in numbers[1..]\
    \ {\n  |              ^^^^^^^^^^^^ expected an implementor of trait `IntoIterator`\n\
    \  |\n  = note: the trait bound `[isize]: IntoIterator` is not satisfied\n  =\
    \ note: required because of the requirements on the impl of `IntoIterator` for\
    \ `[isize]`\nhelp: consider borrowing here\n  |\n7 |     for x in &numbers[1..]\
    \ {\n  |              +\n7 |     for x in &mut numbers[1..] {\n  |           \
    \   ++++\n\nerror[E0277]: `[isize]` is not an iterator\n --> /tmp/tmp6rsozvrd.rs:7:14\n\
    \  |\n7 |     for x in numbers[1..] {\n  |              ^^^^^^^^^^^^ expected\
    \ an implementor of trait `IntoIterator`\n  |\n  = note: the trait bound `[isize]:\
    \ IntoIterator` is not satisfied\n  = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n\
    \  |\n7 |     for x in &numbers[1..] {\n  |              +\n7 |     for x in &mut\
    \ numbers[1..] {\n  |              ++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp6rsozvrd.rs:12:5\n   |\n5  | fn rolling_max(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n12 |     result\n   |     ^^^^^^ expected\
    \ struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value = numbers.min();\n    let mut max_value\
    \ = min_value;\n    let mut max_idx = vec![-1isize; numbers.len()];\n    let mut\
    \ max_values = vec![max_value; numbers.len()];\n    for i in 0..numbers.len()\
    \ {\n        if numbers[i] > max_value {\n            max_value = numbers[i];\n\
    \            max_idx = vec![i];\n        }\n        if max_idx != vec![-1isize;\
    \ numbers.len()] {\n            max_value = numbers[max_idx[0]];\n        }\n\
    \        max_values[i] = max_value;\n    }\n    max_values\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmptgj5lhby.rs:6:33\n    |\n6   |     let mut min_value = numbers.min();\n\
    \    |                                 ^^^- supplied 0 arguments\n    |      \
    \                           |\n    |                                 expected\
    \ 1 argument\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptgj5lhby.rs:11:25\n   |\n11 |         if numbers[i] > max_value\
    \ {\n   |                         ^^^^^^^^^ expected `isize`, found struct `Vec`\n\
    \   |\n   = note: expected type `isize`\n            found struct `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptgj5lhby.rs:12:25\n   |\n7  |\
    \     let mut max_value = min_value;\n   |                         --------- expected\
    \ due to this value\n...\n12 |             max_value = numbers[i];\n   |     \
    \                    ^^^^^^^^^^ expected struct `Vec`, found `isize`\n   |\n \
    \  = note: expected struct `Vec<isize>`\n                found type `isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmptgj5lhby.rs:13:28\n   |\n13 |  \
    \           max_idx = vec![i];\n   |                            ^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n13 |             max_idx = vec![i.try_into().unwrap()];\n\
    \   |                             ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptgj5lhby.rs:16:25\n  \
    \ |\n16 |             max_value = numbers[max_idx[0]];\n   |                 \
    \        ^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptgj5lhby.rs:20:5\n   |\n5  | fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                     \
    \                  "
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_idx = 1;\n\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n            max_idx = i;\n        }\n    }\n\n    numbers.iter_mut().enumerate().for_each(|(idx,\
    \ n)| {\n        if idx == max_idx {\n            *n += 1;\n        } else {\n\
    \            *n = *n;\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg57gr_ju.rs:16:5\n   |\n\
    5  |   fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |             \
    \                             ---------- expected `Vec<isize>` because of return\
    \ type\n...\n16 | /     numbers.iter_mut().enumerate().for_each(|(idx, n)| {\n\
    17 | |         if idx == max_idx {\n18 | |             *n += 1;\n19 | |      \
    \   } else {\n20 | |             *n = *n;\n21 | |         }\n22 | |     })\n \
    \  | |______^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(numbers.len());\n \
    \   let mut current_max = numbers[0];\n\n    for i in 1..numbers.len() {\n   \
    \     if current_max < numbers[i - 1] {\n            current_max = numbers[i -\
    \ 1];\n        }\n        result.push(current_max);\n    }\n\n    result\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp9b58dxal.rs:7:27\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number > rolling_max {\n            rolling_max = number;\n  \
    \      }\n    }\n    rolling_max.clone()\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxxrlknq9.rs:8:21\n  |\n8 |\
    \         if number > rolling_max {\n  |                     ^^^^^^^^^^^\n  |\
    \                     |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&rolling_max`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpxxrlknq9.rs:9:27\n  |\n6 |     let mut rolling_max\
    \ = numbers[0];\n  |                           ---------- expected due to this\
    \ value\n...\n9 |             rolling_max = number;\n  |                     \
    \      ^^^^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n9 |             rolling_max = *number;\n  |               \
    \            +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxxrlknq9.rs:12:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n12 |     rolling_max.clone()\n   |     ^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far: Option<isize> = None;\n    let mut\
    \ max_so_far_roll: Vec<isize> = Vec::new();\n    for n in numbers {\n        if\
    \ max_so_far.is_none() {\n            max_so_far_roll.push(n);\n            max_so_far\
    \ = Some(n);\n        } else {\n            if n > max_so_far.unwrap() {\n   \
    \             max_so_far_roll.push(max_so_far.unwrap());\n                max_so_far_roll.push(n);\n\
    \                max_so_far = Some(max_so_far.unwrap());\n            }\n    \
    \    }\n    }\n    if max_so_far.is_none() {\n        max_so_far_roll.push(n);\n\
    \    }\n    max_so_far_roll\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `n` in this scope\n  --> /tmp/tmpgbioz0tn.rs:21:30\n\
    \   |\n21 |         max_so_far_roll.push(n);\n   |                           \
    \   ^ not found in this scope\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers.remove(0);\n    numbers.iter().take_while(|&x|\
    \ x <= max_value).for_each(|&x| {\n        max_value = x;\n    });\n    numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf32hc9if.rs:7:41\n  |\n7 |\
    \     numbers.iter().take_while(|&x| x <= max_value).for_each(|&x| {\n  |    \
    \                                     ^^^^^^^^^\n  |                         \
    \                |\n  |                                         expected `&isize`,\
    \ found `isize`\n  |                                         help: consider borrowing\
    \ here: `&max_value`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.len() == 0 {\n        return vec![];\n    }\n\
    \    if numbers.len() == 1 {\n        return vec![1];\n    }\n    if numbers[0]\
    \ == numbers[1] {\n        return vec![];\n    }\n    let mut max_num = numbers[0];\n\
    \    let mut max_idx = 1;\n    for (idx, num) in numbers.iter().enumerate() {\n\
    \        if num > max_num {\n            max_num = num;\n            max_idx =\
    \ idx;\n        }\n    }\n    let mut numbers_copy = numbers;\n    numbers_copy.swap(0,\
    \ max_idx);\n    numbers_copy.swap(max_idx + 1, numbers_copy.len());\n    numbers_copy.pop();\n\
    \    numbers_copy.pop();\n    numbers_copy\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbc4ft_ca.rs:18:18\n   |\n\
    18 |         if num > max_num {\n   |                  ^^^^^^^\n   |         \
    \         |\n   |                  expected `&isize`, found `isize`\n   |    \
    \              help: consider borrowing here: `&max_num`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbc4ft_ca.rs:19:23\n   |\n15 |     let mut max_num = numbers[0];\n\
    \   |                       ---------- expected due to this value\n...\n19 | \
    \            max_num = num;\n   |                       ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n19 |  \
    \           max_num = *num;\n   |                       +\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_value: isize = (numbers[0] as f64).ceil() as\
    \ isize;\n    for i in 1..numbers.len() {\n        if numbers[i] > min_value {\n\
    \            min_value = numbers[i];\n        }\n    }\n    let mut max_value\
    \ = min_value;\n    for i in 1..numbers.len() {\n        max_value = max_value\
    \ as f64 + (numbers[i] - min_value) as f64;\n        if max_value < numbers[i]\
    \ {\n            max_value = numbers[i];\n        }\n    }\n    (0..numbers.len()\
    \ - 1).map(|i| numbers[i as usize]).filter_map(|n| Some(n as usize)).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2bi052o2.rs:14:21\n   |\n\
    12 |     let mut max_value = min_value;\n   |                         ---------\
    \ expected due to this value\n13 |     for i in 1..numbers.len() {\n14 |     \
    \    max_value = max_value as f64 + (numbers[i] - min_value) as f64;\n   |   \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2bi052o2.rs:19:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n19 |     (0..numbers.len() - 1).map(|i| numbers[i as usize]).filter_map(|n|\
    \ Some(n as usize)).collect::<Vec<_>>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<usize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for number in numbers.iter().cloned()\
    \ {\n        if number > max {\n            max = number;\n        }\n    }\n\
    \    let mut out = Vec::with_capacity(numbers.len());\n    for i in 1..numbers.len()\
    \ {\n        out.push(numbers[i - 1]);\n        out.push(max);\n    }\n    out\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp5g5j7l59.rs:6:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    result.push(numbers[0]);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] < result[0].partial_cmp(&numbers[i\
    \ - 1]) {\n            result.push(numbers[i]);\n        } else {\n          \
    \  result.push(result[0]);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq6zfbqgg.rs:9:25\n  |\n9 |\
    \         if numbers[i] < result[0].partial_cmp(&numbers[i - 1]) {\n  |      \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ enum `Option`\n  |\n  = note: expected type `isize`\n             found enum\
    \ `Option<std::cmp::Ordering>`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::with_capacity(numbers.len());\n\
    \    let mut it = numbers.iter().cloned().rev();\n    let mut current_number =\
    \ it.next().unwrap();\n    while current_number != 0 {\n        let current_number\
    \ = it.next().unwrap();\n        let mut current_max = current_number;\n     \
    \   for _ in 0..=current_number {\n            current_max = max_numbers.pop().unwrap();\n\
    \            max_numbers.push(current_max);\n        }\n    }\n    max_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpd1owdaz8.rs:8:40\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_val: isize = numbers[0] as isize;\n    let\
    \ mut max_idx = numbers[0] as isize;\n    let mut current_idx = numbers[0] as\
    \ isize;\n\n    for num in numbers {\n        if num > max_val {\n           \
    \ max_val = num;\n            max_idx = current_idx;\n        } else {\n     \
    \       current_idx = num;\n        }\n    }\n\n    vec![max_idx, max_val]\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpd11k65z0.rs:6:30\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    for num in numbers\
    \ {\n        if num > max_so_far {\n            max_so_far = num;\n        }\n\
    \    }\n    vec![max_so_far]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpkjzi04hs.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    if numbers.len() == 0 {\n        return vec![];\n    }\n\
    \n    let mut buffer = vec![];\n\n    let mut max = numbers[0];\n    for n in\
    \ numbers.iter().rev() {\n        if n < max {\n            break;\n        }\n\
    \        buffer.push(n);\n        max = n;\n    }\n\n    buffer\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphcs8elug.rs:14:16\n   |\n\
    14 |         if n < max {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found `isize`\n   |                help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphcs8elug.rs:18:15\n\
    \   |\n12 |     let mut max = numbers[0];\n   |                   ---------- expected\
    \ due to this value\n...\n18 |         max = n;\n   |               ^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    18 |         max = *n;\n   |               +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphcs8elug.rs:21:5\n   |\n5  | fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n21 |     buffer\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    // We can't use max_by_key because we are not allowed to\
    \ use external crates\n    let mut max = numbers[0] as isize;\n    let mut max_at\
    \ = 0 as usize;\n\n    for i in 1..numbers.len() {\n        let cur = numbers[i\
    \ - 1];\n        let next = numbers[i];\n        if cur > max {\n            max\
    \ = cur;\n            max_at = i;\n        }\n    }\n    vec![numbers[max_at],\
    \ max]\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpkjlkz7cg.rs:7:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0] as isize;\n    for n in numbers.iter().rev()\
    \ {\n        if n > max {\n            max = n as isize;\n        }\n    }\n \
    \   numbers[numbers.len() - 1]\n        .iter()\n        .filter(|&x| x > max)\n\
    \        .collect::<Vec<_>>()\n        .into_iter()\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8si87h6o.rs:8:16\n  |\n8 |\
    \         if n > max {\n  |                ^^^\n  |                |\n  |    \
    \            expected `&isize`, found `isize`\n  |                help: consider\
    \ borrowing here: `&max`\n\nerror[E0599]: no method named `iter` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmp8si87h6o.rs:13:10\n   |\n13 |  \
    \       .iter()\n   |          ^^^^ method not found in `isize`\n\nerror[E0606]:\
    \ casting `&isize` as `isize` is invalid\n --> /tmp/tmp8si87h6o.rs:9:19\n  |\n\
    9 |             max = n as isize;\n  |                   -^^^^^^^^^\n  |     \
    \              |\n  |                   cannot cast `&isize` as `isize`\n  | \
    \                  help: dereference the expression: `*n`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599,\
    \ E0606.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rolling_max = numbers[0];\n    let mut current_max\
    \ = numbers[0];\n    for value in numbers {\n        if value > rolling_max {\n\
    \            rolling_max = value;\n        }\n        if value < current_max {\n\
    \            current_max = value;\n        }\n    }\n    vec![rolling_max, current_max]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp_l5vtuv7.rs:6:27\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    rolling_max_helper(&mut\
    \ res, numbers.clone());\n    res\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `rolling_max_helper` in this scope\n\
    \ --> /tmp/tmpn28w8gan.rs:7:5\n  |\n7 |     rolling_max_helper(&mut res, numbers.clone());\n\
    \  |     ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element = numbers[0];\n    for index in 1..numbers.len()\
    \ {\n        let mut max_element = max_element;\n        for element in numbers\
    \ {\n            if element > max_element {\n                max_element = element;\n\
    \            }\n        }\n        max_element = max_element;\n    }\n    max_element\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_wekcvdw.rs:16:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n16 |     max_element\n   |     ^^^^^^^^^^^ expected struct `Vec`, found `isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n                found type `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = vec![];\n    for number in\
    \ numbers {\n        if number > result.len() {\n            result.push(number);\n\
    \        } else {\n            result[number] = number;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsrjg120j.rs:8:21\n  |\n8 |\
    \         if number > result.len() {\n  |                     ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |         if number > result.len().try_into().unwrap()\
    \ {\n  |                                 ++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsrjg120j.rs:11:13\n\
    \   |\n11 |             result[number] = number;\n   |             ^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::with_capacity(numbers.len());\n\
    \    let mut current_max: isize = 0;\n    let mut current_min: isize = 1;\n\n\
    \    for i in numbers {\n        if i < current_max {\n            current_max\
    \ = i;\n        } else {\n            if current_max != i {\n                current_max\
    \ = i;\n                result.push(current_max);\n            }\n        }\n\n\
    \        if i > current_min {\n            current_min = i;\n        } else {\n\
    \            if current_min != i {\n                current_min = i;\n       \
    \         result.push(current_min);\n            }\n        }\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 2, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp56umitop.rs:37:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max = numbers[0];\n\
    \    for number in numbers.iter().rev() {\n        if number > max {\n       \
    \     max = number;\n        }\n        result.push(max);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp32khck00.rs:9:21\n  |\n9 |\
    \         if number > max {\n  |                     ^^^\n  |                \
    \     |\n  |                     expected `&isize`, found `isize`\n  |       \
    \              help: consider borrowing here: `&max`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp32khck00.rs:10:19\n   |\n7  |     let mut max = numbers[0];\n\
    \   |                   ---------- expected due to this value\n...\n10 |     \
    \        max = number;\n   |                   ^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |        \
    \     max = *number;\n   |                   +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    for i in numbers\
    \ {\n        if i > max_so_far {\n            max_so_far = i;\n        }\n   \
    \ }\n    vec![max_so_far]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp_a1l6ezu.rs:6:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
