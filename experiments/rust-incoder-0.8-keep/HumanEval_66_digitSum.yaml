name: HumanEval_66_digitSum
language: rust
prompt: "/// Task\n/// Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// digitSum(\"\
  \") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\") => 67\n/// digitSum(\"\
  helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n/// digitSum(\"aAaaaXa\") =>\
  \ 153\nfn digitSum(s: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
  \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
  abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
  woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
  \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
  You arE Very Smart\")), 327);\n}\n"
completions: ["    let mut sum = match s.len() {\n        0 => 0,\n        1 => 0,\n\
    \        2 => 0,\n        _ => {\n            let mut num = 0;\n            for\
    \ &c in s.chars() {\n                num = if c >= 'a' && c <= 'z' { num + 10\
    \ } else { num + c };\n            }\n            num + (s.len() - s.chars().count())\n\
    \        }\n    };\n    sum", "    s.chars().map(|c| *c - '0').sum()", '    s.chars().filter(|c|
    c.is_ascii_upper()).sum()', "    let mut sum = 0;\n    let len = s.len();\n  \
    \  for i in 0..len {\n        if s.chars().any(|&c| c < 'A' || c > 'Z') {\n  \
    \          continue;\n        }\n        sum += s.chars().nth(i).unwrap().digits(10);\n\
    \    }\n    return sum;", '    digits(s).iter().sum()', "    if s == \"\" {\n\
    \        return 0\n    }\n\n    let mut digits = String::new();\n\n    for (i,\
    \ c) in s.chars().enumerate().filter(|&(idx, _)| idx % 3 == 0) {\n        digits\
    \ += c;\n    }\n\n    let digits_as_integer: isize = digits.parse().unwrap();\n\
    \    let sum = digits_as_integer.checked_mul(10).unwrap();\n\n    return sum;",
  "    s.chars()\n        .filter(|&c| c <= 'Z')\n        .map(|c| 'A'..'Z').filter(|c|\
    \ c <= 'Z').count() + s.chars().filter(|c| 'A'..'Z').filter(|c| c <= 'Z').count()",
  "    s.chars()\n        .filter(|c| c.is_upper())\n        .filter(|c| c >= '0'\
    \ && c <= '9')\n        .sum()", "    s.chars().filter(|c| c >= 'a' && c <= 'z').sum()",
  '    s.chars().filter(|c| c.is_upper()).fold(0, |acc, _| acc + c.to_digit(16).unwrap())',
  '    s.chars().fold(0, |acc, x| acc + (x.to_digit(10).unwrap() as isize))', "  \
    \  s.length()\n        .iter()\n        .map(|x| x.to_ascii_lowercase())\n   \
    \     .filter_map(|x| x.chars().sum::<i32>())\n        .sum()", "    let mut sum\
    \ = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n            sum\
    \ += c.to_digit(10).unwrap();\n        }\n    }\n    sum", "    let mut sum =\
    \ 0;\n    for ch in s.chars() {\n        sum += ch.to_ascii_uppercase().into();\n\
    \    }\n    sum", "    if s.is_empty() {\n        return 0\n    }\n    let mut\
    \ sum = 0isize;\n    let mut last_char = 0;\n    for ch in s.chars() {\n     \
    \   if ch.is_upper() {\n            last_char = ch;\n        }\n        sum +=\
    \ last_char.as_bytes()[0];\n    }\n    sum", "    let mut counter = 0;\n    for\
    \ c in s.chars() {\n        counter += if !c.is_ascii_uppercase() {\n        \
    \    c.code()\n        } else {\n            10\n        };\n    }\n    counter",
  '    s.chars().fold(0, |acc, x| acc + x.digits_upper().sum::<isize>())', "    s.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z')\n        .filter(|c| *c >= 'a' && *c <= 'z')\n     \
    \   .sum()", "    s.chars().filter(|c| *c >= 'a' && *c <= 'z').sum()", "    let\
    \ mut sum: isize = 0;\n    for (i, c) in s.chars().enumerate() {\n        if c\
    \ >= '0' && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    sum",
  "    if s == \"\" {\n        return 0;\n    }\n\n    let mut sum = 0;\n\n    for\
    \ (i, c) in s.chars().enumerate() {\n        if c > 'Z' && c < 'A' {\n       \
    \     sum += c - 'A' + 1;\n        }\n    }\n\n    sum", "    let mut sum = 0;\n\
    \    for &c in s.as_bytes() {\n        if c >= b'A' && c <= b'Z' {\n         \
    \   sum += c - b'A' + 10;\n        }\n    }\n    return sum;", "    let mut total:\
    \ isize = 0;\n    for c in s.chars() {\n        if !c.is_ascii_uppercase() {\n\
    \            continue;\n        }\n        total += c.to_ascii_lowercase().unwrap();\n\
    \    }\n    total", '    digitSumHelper("", s)', '    s.chars().filter(|c| c.is_ascii_upper()).sum()',
  '    s.chars().map(|c| c.code()).sum::<isize>()', "    let mut sum = 0;\n    for\
    \ c in s.chars() {\n        if c.is_uppercase() {\n            sum += c.as_byte().wrapping_add(b'A');\n\
    \        } else {\n            sum += c.as_byte().wrapping_add(b'a');\n      \
    \  }\n    }\n    sum as isize", "    let mut sum = 0;\n    for &c in s.chars()\
    \ {\n        if c >= 'a' && c <= 'z' {\n            sum += (c - 'a' + 10);\n \
    \       }\n    }\n    sum", "    let mut sum = 0;\n    for i in s.chars() {\n\
    \        if i > 'Z' {\n            sum += (i - 'A');\n        }\n    }\n    sum",
  "    let mut sum = 0;\n    s.chars().for_each(|x|\n        if x >= 'a' && x <= 'z'\
    \ {\n            sum += x - 'a' + 10;\n        } else if x >= 'A' && x <= 'Z'\
    \ {\n            sum += x - 'A' + 10;\n        } else {\n            sum += x\n\
    \        }\n    );\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if ('A' <= c && c <= 'Z') {\n            sum += c - 'A' as isize;\n \
    \       }\n    }\n    return sum;", "    let mut digits = 0;\n    for c in s.chars()\
    \ {\n        if !c.is_ascii_uppercase() {\n            digits += c.to_digit(10).unwrap();\n\
    \        } else {\n            digits += c;\n        }\n    }\n    digits", " \
    \   let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n  \
    \          sum += c.to_ascii_lowercase();\n        }\n    }\n    return sum;",
  "    s.chars().filter(|c| c < 'A' || c > 'Z').sum()", "    let mut sum = 0;\n  \
    \  for (i, _) in s.chars().enumerate() {\n        if i > 0 {\n            sum\
    \ += s.chars()[i - 1] as usize;\n        }\n        if i < s.len() - 1 {\n   \
    \         sum += s.chars()[i + 1] as usize;\n        }\n    }\n    sum", "   \
    \ let mut sum = 0;\n    for ch in s.chars() {\n        let code: usize = match\
    \ ch {\n            c if c.is_digit() => c as usize,\n            _ => 0,\n  \
    \      };\n        sum += code;\n    }\n    sum", "    let mut sum = 0;\n    for\
    \ c in s.chars() {\n        if c.is_uppercase() {\n            sum += c.to_digit(10);\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    let mut last_digit = 0;\n\
    \    let mut max_digit = s.len() - 1;\n    let mut last_char: char;\n    for &c\
    \ in s.chars() {\n        if *c >= '0' && *c <= '9' {\n            sum += (*c\
    \ - '0');\n        }\n        if *c >= 'A' && *c <= 'Z' {\n            sum +=\
    \ (*c - 'A' + 10);\n        }\n        if *c >= 'a' && *c <= 'z' {\n         \
    \   sum += (*c - 'a' + 10);\n        }\n        last_digit = *c - '0';\n     \
    \   last_char = c;\n        if sum > max_digit {\n            break;\n       \
    \ }\n    }\n    last_digit;", "    s.chars().filter(|c| c >= 'a' && c <= 'z').sum()",
  "    let mut acc = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n   \
    \         acc += 1;\n        }\n    }\n    acc", "    let mut sum = 0;\n    s.chars().filter_map(|c|\
    \ if c.is_upper() { sum += c.digit() } else { 0 }).sum();\n    sum", "    s.chars().filter(|c|\
    \ *c >= '0' && *c <= '9').sum()", "    let mut sum = 0;\n    for c in s.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            sum += c.to_ascii_uppercase().unwrap();\n\
    \        }\n    }\n    return sum;", "    let mut chars: Vec<char> = s.chars().collect();\n\
    \    chars.sort_by(|a, b| a.cmp(b));\n    let mut sum = 0;\n    for i in chars.iter().rev()\
    \ {\n        sum += i[..1].as_bytes().iter().sum()\n    }\n    sum", '    digitSumHelper(s.chars().map(|x|
    *x).collect(), 0, 0).0', "    s.chars().filter(|&c| c >= 'A' && c <= 'Z').sum()",
  "    let mut sum = 0;\n    let mut i = 1;\n    let len = s.len();\n    let mut digits\
    \ = vec![0; len as usize];\n    \n    while(i < len){\n        digits[i as usize]\
    \ =\n            s[i as usize].chars().map(|c| c as usize).sum();\n        i +=\
    \ 1;\n    }\n    \n    for i in 0..len {\n        sum += digits[i];\n    }\n \
    \   \n    sum", "    let mut sum = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if c >= 'a' && c <= 'z' {\n            sum += c - 'a' + 10;\n   \
    \     } else {\n            sum += c - '0';\n        }\n    }\n    sum", "   \
    \ // We convert the string to an array of chars, because that way we can\n   \
    \ // perform a map operation on that array, which can convert each char\n    //\
    \ to a number between 0 and 9\n    let chars = s.chars().map(|c| c.to_digit(10)).collect();\n\
    \    // We find the index of the first non-digit character (i.e. the first\n \
    \   // character that is not a digit)\n    let firstNonDigit = chars.iter().position(|c|\
    \ c < '0');\n    // The position of the last non-digit char\n    let lastNonDigit\
    \ = chars.iter().rposition(|c| c < '0').unwrap_or(0);\n    // Then we sum the\
    \ chars between the two indices\n    let sum: isize = chars[firstNonDigit..lastNonDigit].sum()\n\
    \        + chars[0..firstNonDigit].sum();\n    // Finally we return that sum\n\
    \    sum", "    s.chars()\n        .filter(|c| c.is_upper())\n        .sum()",
  "    s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()", "    let mut sum = 0isize;\n\
    \    for c in s.chars() {\n        if c.is_upper() {\n            sum += c.to_digit(10);\n\
    \        }\n    }\n    sum", "    if s.is_empty() {\n        return 0\n    }\n\
    \    let mut sum_ = 0;\n    for i in s.chars() {\n        if i as usize + sum_\
    \ > 123 {\n            sum_ = 0;\n        } else {\n            sum_ += i as usize;\n\
    \        }\n    }\n    sum_", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if ('A' <= c && c <= 'Z') {\n            sum += c - 'A' + 10;\n     \
    \   }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n    \
    \    if c.is_upper() {\n            sum += c.code();\n        }\n    }\n    sum",
  "    use std::cmp::Ordering;\n    s.chars().filter(|c| c.is_ascii_upper()).fold(0,\
    \ Ordering::Equal)", "    let mut sum = 0i32;\n    for c in s.chars() {\n    \
    \    if c.is_uppercase() {\n            sum += c.code_point().unwrap() as isize;\n\
    \        }\n    }\n    sum", "    DIGITS.iter().fold(0, |sum, item| {\n      \
    \  match item.to_ascii_uppercase() {\n            None => sum,\n            Some(x)\
    \ => sum + x.to_digit(),\n        }\n    })", "    let mut sum = 0;\n    for ch\
    \ in s.chars() {\n        sum += ch.to_ascii_uppercase().unwrap();\n    }\n  \
    \  sum", "    let mut sum = 0;\n    for ch in s.chars() {\n        if ch > 'Z'\
    \ {\n            sum += ch - 'A' + 1;\n        } else {\n            sum += ch;\n\
    \        }\n    }\n    sum", "    let mut sum: isize = 0;\n    for c in s.chars()\
    \ {\n        if c < '0' || c > '9' {\n            break;\n        }\n        sum\
    \ += c - '0';\n    }\n    return sum;", '    // Write your code in Rust starting
    here.', "    s.length()\n        .par_iter()\n        .filter_map(|c| c >= 'A'\
    \ && c <= 'Z')\n        .sum()", "    s.chars()\n        .filter(|c| c.is_ascii_upper())\n\
    \        .sum()", '    s.chars().map(|c| *c).filter(|&x| x.is_uppercase()).sum()',
  "    let mut sum = 0;\n    for (i, ch) in s.chars().enumerate() {\n        sum +=\
    \ if ch >= 'a' && ch <= 'z' { ch - 'a' + 1 } else { 0 };\n        if i == s.len()\
    \ - 1 {\n            return sum;\n        }\n    }", '    digits(s, false).sum()',
  "    s.chars().filter(|c| c < 'A' || c > 'Z').count()", "    let mut s = String::from(s);\n\
    \    let mut sum: isize = 0;\n    while !s.is_empty() {\n        sum = sum + (s.chars().filter(|c|\
    \ !c.is_digit()).collect::<Vec<_>>().last().unwrap() as isize);\n        s.clear();\n\
    \    }\n    sum", "    let mut sum = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        let c = c.to_string();\n        if c.chars().any(|x| *x != 'A' ||\
    \ *x != 'a') {\n            sum += i;\n        }\n    }\n    sum", "    let mut\
    \ sum = 0isize;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' { sum\
    \ += c - '0'; }\n        else { break; }\n    }\n    return sum;", "    let mut\
    \ sum = 0;\n\n    for c in s.chars() {\n        if c.is_upper() {\n          \
    \  sum += c.to_digit(10);\n        }\n    }\n\n    sum", "    let mut res = 0;\n\
    \    for c in s.chars() {\n        if c.is_uppercase() {\n            res += c.as_bytes().iter().map(|b|\
    \ b as usize).sum();\n        } else {\n            return res;\n        }\n \
    \   }\n    return res;", "    let mut sum = 0;\n    for (i, ch) in s.chars().enumerate()\
    \ {\n        if ch <= '9' {\n            sum += ch as isize - (i + 1);\n     \
    \   }\n    }\n    sum", "    if s.is_empty() {\n        return 0;\n    }\n\n \
    \   let mut result = 0.;\n    let mut pos = 0;\n    let mut s = s;\n\n    while\
    \ pos < s.len() {\n        let mut sum = 0;\n        let mut digit = s.chars().nth(pos)?.chars().sum();\n\
    \        if digit == 0 {\n            sum += 1;\n        }\n        else {\n \
    \           sum += digit;\n        }\n        pos += 1;\n        result = result\
    \ + sum;\n    }\n    result", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        sum += c;\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars()\
    \ {\n        if c.is_uppercase() {\n            sum += c.to_digit(10);\n     \
    \   }\n    }\n    sum", "    let mut result = 1;\n    for c in s.chars() {\n \
    \       if c >= '0' && c <= '9' {\n            result += c - '0';\n        }\n\
    \    }\n    result", "    let mut sum: isize = 0;\n    for ch in s.chars() {\n\
    \        if ch >= '0' && ch <= '9' {\n            sum += ch as isize;\n      \
    \  }\n    }\n    sum", "    let mut sum = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if c.is_uppercase() {\n            sum += c.to_digit(10).unwrap();\n\
    \        }\n    }\n    sum", "    let mut total: isize = 0;\n    for c in s.chars()\
    \ {\n        if c.is_upper() {\n            total += c.to_digit();\n        }\n\
    \    }\n    total", '    s.chars().enumerate().filter(|&(_, c)| c.is_upper()).map(|(i,
    c)| c).sum()', "    let mut counter = s.chars().filter(|&c| c >= '0' && c <= '9').count();\n\
    \    while counter > 0 {\n        counter -= 1;\n        s -= &s[counter..counter\
    \ + 1];\n    }\n    s.chars().filter(|&c| c >= 'a' && c <= 'z').count()", "  \
    \  let mut result = 0;\n    for ch in s.chars() {\n        if ch.is_upper() {\n\
    \            result += ch.code();\n        }\n    }\n    result", "    let mut\
    \ sum = 0;\n    for (i, c) in s.chars().enumerate() {\n        if c.is_upper()\
    \ {\n            sum += c - '0';\n        } else {\n            sum += c.to_ascii_uppercase().to_usize()\
    \ - '0';\n        }\n    }\n    sum", '    s.chars().filter(|c| c < 64).sum()',
  "    s.length()\n        .iter()\n        .filter_map(|c| c as u32)\n        .filter_map(|c|\
    \ c.checked_add(c - 32) as u32)\n        .sum()", "    s.chars().filter(|c| c\
    \ >= '0' && c <= '9').sum()", "    s.chars().filter(|c| c >= 'a' && c <= 'z').sum()",
  "    let mut sum = 0usize;\n    for (i, c) in s.chars().enumerate() {\n        if\
    \ i > 0 && c >= 'A' && c <= 'Z' {\n            sum += c - 'A';\n        }\n  \
    \  }\n    return sum;", '    digitSum_helper(&s[..], s.len() as usize)', "   \
    \ let mut sum = 0;\n    for c in s.chars() {\n        let code = (c.code() as\
    \ i32).wrapping_add(32);\n        sum += if code > 'z' { code - 'z' + 1 } else\
    \ { code };\n    }\n    sum", '    s.chars().fold(0, |acc, x| acc + x.as_byte().to_ascii_uppercase().or_insert(0u));',
  "    let mut result = s.len();\n    let mut accum = s.len() as isize;\n\n    for\
    \ c in s.chars() {\n        if c.is_uppercase() {\n            result -= c.to_ascii_digit().unwrap();\n\
    \        } else {\n            accum += c.to_ascii_digit().unwrap();\n       \
    \ }\n    }\n    result", "    let mut sum = 0;\n    for (i, &c) in s.chars().enumerate()\
    \ {\n        if c > '9' {\n            sum += c - '0';\n        }\n    }\n   \
    \ sum", "    let mut total = 0;\n    for c in s.chars() {\n        if c > 'Z'\
    \ {\n            total += c - 'A' + 1;\n        }\n    }\n    return total;",
  "    let mut sum = 0 as isize;\n    for ch in s.chars() {\n        sum += ch.to_ascii_upper()\
    \ as isize;\n    }\n    sum", "    let mut sum = 0;\n    for i in s.chars() {\n\
    \        if i.is_uppercase() {\n            sum += i.to_ascii_digit().unwrap();\n\
    \        }\n    }\n    sum", '    digitSum(s.chars().filter(|c| !c.is_whitespace()).collect::<Vec<_>>(),
    0)', "    let mut result = usize::MAX;\n    s.chars()\n        .filter(|c| c >=\
    \ 'a' && c <= 'z')\n        .for_each(|c| {\n            if c >= 'A' && c <= 'Z'\
    \ {\n                result += c - 'A' + 10;\n            } else {\n         \
    \       result += c - 'a' + 10;\n            }\n        });\n    result", '    digitSum_impl(s,
    0, s.len(), 0)', "    let mut sum = 0;\n    let len = s.len();\n    for i in 0..len\
    \ {\n        let ch = s[i];\n        if ch >= 'A' && ch <= 'Z' {\n           \
    \ sum += ch - 'A' as isize;\n        } else if ch >= 'a' && ch <= 'z' {\n    \
    \        sum += ch - 'a' as isize;\n        }\n    }\n    sum", "    let mut total\
    \ = 0usize;\n    for c in s.chars() {\n        total += c as isize - 'A' as isize;\n\
    \    }\n    total", "    s.chars().filter(|c| *c >= 'a' && *c <= 'z').sum().wrapping_add(digitSum(s.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').sum().wrapping_add(*c)))", "    s.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').sum()", "    let mut sum = 0;\n    for &c in s.chars()\
    \ {\n        if !c.is_ascii_uppercase() {\n            continue;\n        }\n\
    \        sum += c.code().unwrap() as isize;\n    }\n    sum", "    digits.iter()\n\
    \        .fold(0, |sum, c| sum + c.to_ascii_digit(s.chars().count()))", "    let\
    \ mut sum = 0;\n    for c in s.chars() {\n        if !c.is_ascii_upper() {\n \
    \           continue;\n        }\n        sum += c.to_ascii_uppercase().unwrap()\
    \ as isize;\n    }\n    sum", "    let len = s.len();\n    if len == 0 {\n   \
    \     return 0;\n    }\n\n    let mut sum = 0;\n    let mut last_ascii_code =\
    \ s.chars().last().unwrap();\n    for i in s.chars().skip(len - 1).rev() {\n \
    \       if i > (last_ascii_code as isize) + 1 {\n            return -1;\n    \
    \    }\n        last_ascii_code += 1;\n        sum += last_ascii_code;\n    }\n\
    \    sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c.as_bytes().iter().map(|c| c as i16).sum();\n       \
    \ }\n    }\n    sum", '    digits(s).iter().sum()', '    digitSum(s.chars().map(|c|
    c.to_digit()).collect::<Vec<_>>()).unwrap()', "    let mut sum: usize = 0;\n\n\
    \    for c in s.chars() {\n        if c > '9' {\n            sum += c - '0';\n\
    \        } else {\n            sum += 10 - c - 'a' + 1;\n        }\n    }\n\n\
    \    sum", "    let mut sum = 0;\n    for &c in s.chars() {\n        sum += c\
    \ as isize;\n    }\n    sum", '    s.chars().map(|c| c.to_digit(10)).sum()', " \
    \   s.chars().filter(|c| *c >= 'A' && *c <= 'Z').sum()", "    let mut sum = 0;\n\
    \n    for c in s.chars() {\n        if c.is_upper() {\n            sum += c.to_digit(10);\n\
    \        }\n    }\n\n    sum", "    let mut sum = 0;\n    for ch in s {\n    \
    \    sum += ch.to_ascii_digit().unwrap();\n    }\n    sum", "    let mut sum =\
    \ 0;\n    for c in s.chars() {\n        if !c.is_upper() {\n            sum +=\
    \ c.as_bytes().last().unwrap() as isize;\n        }\n    }\n    sum", "    if\
    \ s.is_empty() {\n        return 0;\n    }\n    let mut sum = 0;\n    let len\
    \ = s.len();\n    for i in 0..len {\n        if s[i..].is_uppercase().any() {\n\
    \            sum += s[i..].chars().filter(|&c| c == 'A'..='Z').count() as isize;\n\
    \        }\n    }\n    sum", "    let len = s.len();\n    let mut sum = 0;\n\n\
    \    for i in 0..len {\n        let c1 = s.chars().nth(i);\n        match c1 {\n\
    \            'A' | 'a' => sum += 32,\n            'B' | 'b' => sum += 16,\n  \
    \          'C' | 'c' => sum += 8,\n            'D' | 'd' => sum += 4,\n      \
    \      'E' | 'e' => sum += 2,\n            'F' | 'f' => sum += 1,\n          \
    \  _ => continue,\n        }\n    }\n\n    sum", "    let mut sum = 0;\n    for\
    \ (i, c) in s.chars().enumerate() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit();\n        }\n    }\n    sum", "    s.chars().filter(|c| c >\
    \ '9').map(|c| c as usize + 10).sum::<usize>()", "    match s {\n        s @ \"\
    \" => 0,\n        s @ c => s.chars().filter(|x| x >= 'A' && x <= 'Z').count(),\n\
    \    }", '    s.chars().filter(|c| c.is_ascii_uppercase()).sum::<isize>()', " \
    \   let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n  \
    \          sum += c.as_bytes().last().unwrap();\n        } else {\n          \
    \  sum += c.as_bytes().last().unwrap() - 32;\n        }\n    }\n    sum", "  \
    \  let mut sum = 0;\n    for i in s.chars().filter(|c| *c >= '0' && *c <= '9')\
    \ {\n        sum += *i as isize;\n    }\n    sum", "    let mut sum = 0;\n   \
    \ for (i, c) in s.chars().enumerate() {\n        if i > 0 && c.is_uppercase()\
    \ && !s.chars().skip_while(|&c| *c != *c).last().unwrap().is_uppercase() {\n \
    \           sum += i;\n        }\n    }\n    sum", '    s.chars().filter(|&x|
    x > 64 && x < 128).sum()', "    let mut sum = 0;\n    for i in s.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').take(s.size()) {\n        sum += *i as isize;\n    }\n\
    \    return sum;", '    s.chars().map(|c| c.to_ascii_digit()).sum()', "    use\
    \ std::iter::FromIterator;\n    let mut sum = s.chars().map(|x| x.to_digit()).sum();\n\
    \    sum = sum.to_ascii_lowercase().to_digit().to_ascii_uppercase().to_digit().sum();\n\
    \    sum", "    let mut sum = 0;\n    for c in s.chars() {\n        match c {\n\
    \            'A' | 'a' => sum += 1,\n            'B' | 'b' => sum += 2,\n    \
    \        'C' | 'c' => sum += 3,\n            'D' | 'd' => sum += 4,\n        \
    \    'E' | 'e' => sum += 5,\n            'F' | 'f' => sum += 6,\n            'G'\
    \ | 'g' => sum += 7,\n            'H' | 'h' => sum += 8,\n            'I' | 'i'\
    \ => sum += 9,\n            'J' | 'j' => sum += 10,\n            'K' | 'k' =>\
    \ sum += 11,\n            'L' | 'l' => sum += 12,\n            'M' | 'm' => sum\
    \ += 13,\n            'N' | 'n' => sum += 14,\n            'O' | 'o' => sum +=\
    \ 15,\n            'P' | 'p' => sum += 16,\n            'Q' | 'q' => sum += 17,\n\
    \            'R' | 'r' => sum += 18,\n            'S' | 's' => sum += 19,\n  \
    \          'T' | 't' => sum += 20,\n            'U' | 'u' => sum += 21,\n    \
    \        'V' | 'v' => sum += 22,\n            'W' | 'w' => sum += 23,\n      \
    \      'X' | 'x' => sum += 24,\n            'Y' | 'y' => sum += 25,\n        \
    \    'Z' | 'z' => sum += 26,\n            _ => continue,\n        }\n    }\n \
    \   sum", "    s.chars().filter(|c| *c >= '0' && *c <= '9' && *c != '-').sum()",
  "    let mut sum = 0;\n    for c in s.chars() {\n        sum += (c - 'a') as isize;\n\
    \    }\n    return sum;", '    s.chars().map(|c| c.to_digit(10)).sum::<isize>()',
  "    let mut sum: isize = 0;\n    let mut s = String::from(s);\n    for (i, c) in\
    \ s.chars().enumerate() {\n        if i > 0 && sum > 122 {\n            return\
    \ sum;\n        }\n        sum += c;\n    }\n    sum", "    s.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').map(|c| c - 'a' as isize).sum()", "    let mut sum = 0;\n\
    \    for c in s.chars() {\n        if c <= '9' {\n            sum += c - '0';\n\
    \        } else {\n            sum += 10 + c - 'a' - 1;\n        }\n    }\n  \
    \  sum", "    let mut sum = 0;\n    for c in s.chars() {\n        sum += c.to_digit(10).unwrap();\n\
    \    }\n    sum", "    fn digits(s: &str) -> Option<usize> {\n        if !s.is_empty()\
    \ {\n            Some(s.chars().filter(|c| c.is_ascii_upper()).count())\n    \
    \    } else {\n            None\n        }\n    }\n\n    digits(s).unwrap()",
  "    loop {\n        let mut s = s.to_string();\n        s += 'A';\n        loop\
    \ {\n            if s.chars().any(|c| c > 'Z') {\n                break;\n   \
    \         }\n            s += '0';\n        }\n        if s.chars().any(|c| c\
    \ > '9') {\n            break;\n        }\n        s += '0';\n    }\n    let mut\
    \ s: String = s;\n    loop {\n        s += 'A';\n        loop {\n            if\
    \ s.chars().any(|c| c > 'Z') {\n                break;\n            }\n      \
    \      s += '0';\n        }\n        if s.chars().any(|c| c > '9') {\n       \
    \     break;\n        }\n        s += '0';\n    }\n    s.parse()", "    s.chars().map(|&c|\
    \ c as isize)\n        .filter(|x| x >= '0' && x <= '9')\n        .sum()", " \
    \   let mut s: String = s.to_string();\n    let mut sum = 0;\n    for (i, c) in\
    \ s.chars().enumerate() {\n        sum += c as isize - '0';\n        if i < s.len()\
    \ - 1 {\n            s += &s[..i + 1];\n        }\n    }\n    sum", "    s.chars().filter(|&c|\
    \ c >= '0' && c <= '9').sum::<usize>()", "    let mut result = isize::zero();\n\
    \    for c in s.chars() {\n        if c.is_upper() {\n            result += c.as_bytes().iter().filter(|&b|\
    \ b != b'_').count() as isize;\n        }\n    }\n    result", '    s.chars().filter(|c|
    c.is_ascii()).sum()', "    let mut s = s;\n    s.par_iter().filter(|c| c >= 'A'\
    \ && c <= 'Z').map(|c| c - 'A' as isize)\n        .sum()", "    // TODO: Write\
    \ code here.\n    return 0", "    let mut sum = 0;\n\n    for ch in s.chars()\
    \ {\n        if ch.is_upper() {\n            sum += ch.to_ascii_uppercase().unwrap().to_digit().unwrap();\n\
    \        }\n    }\n\n    return sum;", "    let mut sum = 0;\n    for c in s.chars()\
    \ {\n        if let Some(d) = c.to_digit(10) {\n            sum += *d;\n     \
    \   }\n    }\n    sum", "    let mut sum = 0;\n    for &c in s.as_bytes() {\n\
    \        if !c.is_ascii() {\n            return 0;\n        }\n        sum +=\
    \ c;\n    }\n    sum", "    match s.chars().windows(4) {\n        None => 0,\n\
    \        Some(w) => w.iter().filter(|c| c.is_uppercase()).sum(|c| c.code()),\n\
    \    }", '    s.chars().filter(|c| c.is_ascii_uppercase()).sum()', "    let mut\
    \ sum = 0;\n    for ch in s.chars() {\n        if ch >= 'a' && ch <= 'z' {\n \
    \           sum += ch as isize - 'a' as isize;\n        }\n    }\n    return sum;",
  "    use std::cmp::Ordering;\n    use std::ascii::AsciiExt;\n\n    match s.chars().map(|c|\
    \ c.to_ascii_upper()).fold(0, Ordering::Add) {\n        Ok(a) => a,\n        Err(a)\
    \ => a,\n    }", "    let mut sum = 0;\n    for i in s.chars() {\n        if i\
    \ >= 'A' && i <= 'Z' {\n            sum += i - 'A' as isize;\n        } else {\n\
    \            sum += i;\n        }\n    }\n    sum", "    s.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').sum::<isize>()", "    sum(s.chars().rev().filter_map(|x|\
    \ *x <= 'z' && *x >= 'A' as usize).rev())", '    s.chars().filter(|c| c.is_uppercase()).sum()',
  "    let mut accum = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9'\
    \ {\n            accum += c - '0';\n        }\n    }\n    accum", "    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase() {\n  \
    \          sum += c.to_digit(10);\n        }\n    }\n    sum", "    let mut sum\
    \ = 0;\n    for i in s.chars() {\n        if i >= 'a' && i <= 'z' {\n        \
    \    sum += i as isize;\n        }\n    }\n    sum", '    s.chars().sum().unwrap_or(0)',
  "    s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()", "    s.chars()\n       \
    \ .filter(|c| c.is_ascii_upper())\n        .sum()", "    // TODO\n    let sum\
    \ = s.chars().filter_map(|c| c.to_digit()).sum();\n    return sum;", "    let\
    \ mut s = s;\n    while s.len() > 0 {\n        s = s.to_string();\n        let\
    \ mut sum = 0;\n        for c in s.chars() {\n            sum += c as isize -\
    \ '0';\n        }\n        s = s.chars().skip(1).collect::<String>().to_string();\n\
    \        return sum;\n    }\n    0", "    s.chars().filter(|c| *c >= 'A' && *c\
    \ <= 'Z').sum()", '    s |> String::to_char |> char_to_u8 |> char_to_usize |>
    sum', "    let mut acc: isize = s.chars().filter(|c| c >= 'A' && c <= 'Z').sum();\n\
    \    for c in s.chars() {\n        if c >= 'A' && c <= 'Z' {\n            acc\
    \ += c - 'A' as isize;\n        }\n    }\n    acc", "    let mut sum: isize =\
    \ 0;\n    for &c in s.chars() {\n        if c < '0' || c > '9' {\n           \
    \ continue;\n        }\n        sum += (c - '0').wrapping_add(10);\n    }\n  \
    \  sum", "    s + \"0\".repeat(s.len()).chars().filter(|c| c == 'A' || c == 'a').sum::<isize>()",
  "    let mut total = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n \
    \           total += c.digits();\n        }\n    }\n    total", "    let mut sum\
    \ = 0;\n\n    for ch in s.chars() {\n        if ch >= 'A' && ch <= 'Z' {\n   \
    \         sum += ch as isize - 'A' as isize;\n        }\n    }\n\n    sum", " \
    \   s.chars().filter_map(|c| c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')\n \
    \       .sum()", "    if s.is_empty() { return 0; }\n    let mut sum = 0;\n  \
    \  for c in s.chars() {\n        if c >= '0' && c <= '9' {\n            sum +=\
    \ c - '0';\n        }\n    }\n    sum", '    s.chars().filter(|c| c.is_ascii_uppercase()).sum()',
  "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n   \
    \         sum += c.to_digit(10);\n        }\n    }\n    sum", "    if s.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n\n    for c in s.chars()\
    \ {\n        if c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' {\n            sum\
    \ += c - 'a' as isize;\n        }\n    }\n\n    sum", "    s.chars().filter(|c|\
    \ c >= '0' && c <= '9').sum()", "    let mut sum = 0;\n    let mut s = s;\n  \
    \  while !s.is_empty() {\n        sum += s.chars().take(3).fold(0, |sum, ch| sum\
    \ + ch.to_digit(10));\n        s = s.chars().skip(3).take(s.len() - 1).collect();\n\
    \    }\n    sum", "    let mut s = s.to_string();\n    s.chars().filter(|c| c.is_ascii_uppercase()).sum()",
  "    sums.insert(s.chars().filter(|c| c.is_ascii_upper()).sum());\n    sums.into_iter().sum()",
  '    str.chars().filter(|c| c.is_ascii_upper()).fold(0, |x, c| c + x)', "    //\
    \ Write your code in terms of digitSum\n    // Do not forget to handle the empty\
    \ string case\n    return digitSumHelper(s.chars().filter(|x| x.isupper()).cloned());",
  "    let len = s.len();\n    if len < 2 {\n        return 0;\n    }\n    let mut\
    \ sum = 0;\n    let mut max_len = s.chars().max().unwrap();\n    for &x in s.chars()\
    \ {\n        sum += x;\n        if sum > max_len {\n            sum = sum - max_len;\n\
    \            max_len = 0;\n        }\n        max_len = max(max_len, x);\n   \
    \ }\n    sum", "    // Your code here\n    sumDigits(s.to_owned())", "    let\
    \ mut sum = 0;\n\n    for c in s.chars() {\n        if c.to_ascii_uppercase().is_none()\
    \ {\n            sum += c.to_digit().unwrap();\n        }\n    }\n\n    sum",
  "    match s.chars().map(|c| *c as usize).sum() {\n        None => 0,\n        Some(s)\
    \ => s,\n    }", "    let mut sum = 0;\n    for c in s.chars() {\n        if c\
    \ < '0' || c > '9' {\n            continue;\n        }\n        sum += (c - '0').to_digit(10).unwrap();\n\
    \    }\n    sum", "    let mut sum = 0;\n    s.chars().filter_map(|c| {\n    \
    \    if c < '0' || '9' < c {\n            0\n        } else {\n            match\
    \ c {\n                'A'..='Z' as _ => 65 - c + 1,\n                'a'..='z'\
    \ as _ => 97 - c + 1,\n                _ => 0,\n            }\n        }\n   \
    \ }).fold(0, |acc, x| {\n        sum += acc;\n        sum\n    });\n    sum",
  '    digits(s).map(|x| x.to_ascii_lowercase().chars().sum::<usize>()).sum()', " \
    \   s.chars().filter(|&c| *c >= 'A' && *c <= 'Z').sum()", "    // Your code goes\
    \ here\n    return s.chars().filter(|c| *c >= 'A' && *c <= 'Z').sum();", "   \
    \ let mut sum = 0;\n    for (i, &c) in s.chars().enumerate() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        } else {\n            sum +=\
    \ c.to_digit(10);\n        }\n    }\n    sum", "    let mut sum: isize = 0;\n\n\
    \    for c in s.chars() {\n        if c.is_uppercase() {\n            sum += c.to_ascii_upper().unwrap()\
    \ as isize;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars()\
    \ {\n        sum = sum + c.to_ascii_lowercase().chars().sum();\n    }\n    sum",
  "    let mut res = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n   \
    \         res += c.code().wrapping_add(32);\n        } else {\n            res\
    \ += c.code();\n        }\n    }\n    res", "    s.chars().filter(|c| *c >= '0'\
    \ && *c <= '9').sum()"]
stop_tokens:
- "\n}"
