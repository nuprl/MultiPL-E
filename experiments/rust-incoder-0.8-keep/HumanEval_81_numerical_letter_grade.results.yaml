name: HumanEval_81_numerical_letter_grade
language: rust
results:
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    let mut gpa =\
    \ grades.iter().min().unwrap();\n    let mut letter_grade = String::new();\n\n\
    \    while gpa > 0.0 {\n        let letter_grade = if gpa > 3.0 { \"A+\" } else\
    \ { \"A\" };\n        gpa -= 3.0; // remove a point from gpa\n        letter_grades.push(letter_grade);\n\
    \    }\n\n    while gpa > 2.0 {\n        let letter_grade = if gpa > 2.7 { \"\
    B+\" } else { \"B\" };\n        gpa -= 2.7; // remove a point from gpa\n     \
    \   letter_grades.push(letter_grade);\n    }\n\n    while gpa > 1.7 {\n      \
    \  let letter_grade = if gpa > 1.3 { \"C+\" } else { \"C\" };\n        gpa -=\
    \ 1.7; // remove a point from gpa\n        letter_grades.push(letter_grade);\n\
    \    }\n\n    while gpa > 1.0 {\n        let letter_grade = if gpa > 0.7 { \"\
    D+\" } else { \"D\" };\n        gpa -= 1.0; // remove a point from gpa\n     \
    \   letter_grades.push(letter_grade);\n    }\n\n    while gpa > 0.0 {\n      \
    \  let letter_grade = if gpa > 0.0 { \"D-\" } else { \"E\" };\n        gpa -=\
    \ 0.0; // remove a point from gpa\n        letter_grades.push(letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpn44oqrpt.rs:24:33\n\
    \     |\n24   |     let mut gpa = grades.iter().min().unwrap();\n     |      \
    \                           ^^^ the trait `Ord` is not implemented for `f64`\n\
    \     |\n     = help: the following other types implement trait `Ord`:\n     \
    \          i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpn44oqrpt.rs:27:17\n   |\n27 |\
    \     while gpa > 0.0 {\n   |                 ^^^\n   |                 |\n  \
    \ |                 expected `&f64`, found floating-point number\n   |       \
    \          help: consider borrowing here: `&0.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpn44oqrpt.rs:28:37\n   |\n28 |         let letter_grade = if gpa\
    \ > 3.0 { \"A+\" } else { \"A\" };\n   |                                     ^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&f64`, found floating-point number\n   |                 \
    \                    help: consider borrowing here: `&3.0`\n\nerror[E0368]: binary\
    \ assignment operation `-=` cannot be applied to type `&f64`\n  --> /tmp/tmpn44oqrpt.rs:29:9\n\
    \   |\n29 |         gpa -= 3.0; // remove a point from gpa\n   |         ---^^^^^^^\n\
    \   |         |\n   |         cannot use `-=` on type `&f64`\n   |\nhelp: `-=`\
    \ can be used on `f64`, you can dereference `gpa`\n   |\n29 |         *gpa -=\
    \ 3.0; // remove a point from gpa\n   |         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpn44oqrpt.rs:33:17\n   |\n33 |     while gpa > 2.0 {\n \
    \  |                 ^^^\n   |                 |\n   |                 expected\
    \ `&f64`, found floating-point number\n   |                 help: consider borrowing\
    \ here: `&2.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn44oqrpt.rs:34:37\n\
    \   |\n34 |         let letter_grade = "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut output: Vec<String> = vec![];\n    for i in 0..grades.len()\
    \ {\n        let grade = grades[i];\n        let gpa = grades[i - 1];\n      \
    \  let grade = if gpa > 2.0 { 1.0 + gpa - 2.0 } else if gpa > 1.0 { 1.0 } else\
    \ { 0.0 };\n        let grade = grade as f64 as char;\n        output.push((grade\
    \ as String).to_string());\n    }\n    output\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0604]: only `u8` can be cast as `char`, not `f64`\n  --> /tmp/tmp38gr47kx.rs:28:21\n\
    \   |\n28 |         let grade = grade as f64 as char;\n   |                  \
    \   ^^^^^^^^^^^^^^^^^^^^ invalid cast\n   |\nhelp: try `char::from_u32` instead\
    \ (via a `u32`)\n  --> /tmp/tmp38gr47kx.rs:28:21\n   |\n28 |         let grade\
    \ = grade as f64 as char;\n   |                     ^^^^^^^^^^^^^^^^^^^^\n\nerror[E0605]:\
    \ non-primitive cast: `char` as `String`\n  --> /tmp/tmp38gr47kx.rs:29:21\n  \
    \ |\n29 |         output.push((grade as String).to_string());\n   |          \
    \           ^^^^^^^^^^^^^^^^^ help: consider using the `From` trait instead: `String::from(grade)`\n\
    \   |\n   = note: an `as` expression can only be used to convert between primitive\
    \ types or to coerce to a specific trait object\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0604, E0605.\nFor more information\
    \ about an error, try `rustc --explain E0604`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades = grades.to_vec();\n    let mut letter_grades:\
    \ Vec<String> = Vec::new();\n    grades.pop();\n    grades.sort_by_key(|x| -x.clone());\n\
    \    let mut total = 0.;\n    let mut total_per_grade: Vec<f64> = Vec::new();\n\
    \    for grade in grades {\n        let index = total / grade as f64;\n      \
    \  total += grade;\n        total_per_grade.push(index);\n    }\n    for i in\
    \ total_per_grade.iter() {\n        let index = i as f64;\n        if index ==\
    \ 0 {\n            letter_grades.push(format!(\"{}+\", 0));\n        } else if\
    \ index == 1 {\n            letter_grades.push(format!(\"{}\", 0));\n        }\
    \ else if index == 2 {\n            letter_grades.push(format!(\"{}-\", 0));\n\
    \        } else if index == 3 {\n            letter_grades.push(format!(\"+{}\"\
    , 0));\n        } else if index == 4 {\n            letter_grades.push(format!(\"\
    +{}\", 1));\n        } else if index == 5 {\n            letter_grades.push(format!(\"\
    -{}\", 0));\n        } else if index == 6 {\n            letter_grades.push(format!(\"\
    -{}\", 1));\n        } else {\n            letter_grades.push(format!(\"{}\",\
    \ 1));\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpqcson_v4.rs:26:24\n\
    \    |\n26  |     grades.sort_by_key(|x| -x.clone());\n    |            -----------\
    \ ^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `f64`\n    |         \
    \   |\n    |            required by a bound introduced by this call\n    |\n \
    \   = help: the following other types implement trait `Ord`:\n              i128\n\
    \              i16\n              i32\n              i64\n              i8\n \
    \             isize\n              u128\n              u16\n            and 4\
    \ others\nnote: required by a bound in `slice::<impl [T]>::sort_by_key`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqcson_v4.rs:36:21\n   |\n36 |         if index\
    \ == 0 {\n   |                     ^\n   |                     |\n   |       \
    \              expected `f64`, found integer\n   |                     help: use\
    \ a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqcson_v4.rs:38:28\n\
    \   |\n38 |         } else if index == 1 {\n   |                            ^\n\
    \   |                            |\n   |                            expected `f64`,\
    \ found integer\n   |                            help: use a float literal: `1.0`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpqcson_v4.rs:40:28\n   |\n40 |\
    \         } else if index == 2 {\n   |                            ^\n   |    \
    \                        |\n   |                            expected `f64`, found\
    \ integer\n   |                            help: use a float literal: `2.0`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpqcson_v4.rs:42:28\n   |\n42 |  \
    \       } else if index == 3 {\n   |                            ^\n   |      \
    \                      |\n   |                            expected `f64`, found\
    \ integer\n   |                            help: use a float literal: `3.0`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpqcson_v4.rs:44:28\n   |\n44 |  \
    \       } else if index == 4 {\n   |                            ^\n   |      \
    \                      |\n   |                            expected `f64`, found\
    \ integer\n   |                            hel"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letters = Vec::new();\n    letters.push(\"E\"\
    .to_string());\n    letters.push(\"F\".to_string());\n    letters.push(\"F\".to_string());\n\
    \    for i in grades.iter().rev() {\n        if i <= 3.0 {\n            letters.push(\"\
    A+\".to_string());\n        }\n        if i > 3.0 && (i <= 3.7) {\n          \
    \  letters.push(\"A\".to_string());\n        }\n        if i > 3.7 && i <= 3.3\
    \ {\n            letters.push(\"A-\".to_string());\n        }\n        if i >\
    \ 3.3 && i <= 3.0 {\n            letters.push(\"B+\".to_string());\n        }\n\
    \        if i > 3.0 && i <= 3.7 {\n            letters.push(\"B\".to_string());\n\
    \        }\n        if i > 3.7 && i <= 3.3 {\n            letters.push(\"B-\"\
    .to_string());\n        }\n        if i > 3.3 && i <= 3.0 {\n            letters.push(\"\
    C+\".to_string());\n        }\n        if i > 3.0 && i <= 3.7 {\n            letters.push(\"\
    C\".to_string());\n        }\n        if i > 3.7 && i <= 3.3 {\n            letters.push(\"\
    C-\".to_string());\n        }\n        if i > 3.3 && i <= 3.0 {\n            letters.push(\"\
    D+\".to_string());\n        }\n        if i > 3.0 && i <= 3.7 {\n            letters.push(\"\
    D\".to_string());\n        }\n        if i > 3.7 && i <= 3.3 {\n            letters.push(\"\
    D-\".to_string());\n        }\n        if i == 3.0 {\n            letters.push(\"\
    F\".to_string());\n        }\n    }\n    letters\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfykxjivi.rs:28:17\n   |\n\
    28 |         if i <= 3.0 {\n   |                 ^^^\n   |                 |\n\
    \   |                 expected `&f64`, found floating-point number\n   |     \
    \            help: consider borrowing here: `&3.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfykxjivi.rs:31:16\n   |\n31 |         if i > 3.0 && (i\
    \ <= 3.7) {\n   |                ^^^\n   |                |\n   |            \
    \    expected `&f64`, found floating-point number\n   |                help: consider\
    \ borrowing here: `&3.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfykxjivi.rs:31:29\n\
    \   |\n31 |         if i > 3.0 && (i <= 3.7) {\n   |                         \
    \    ^^^\n   |                             |\n   |                           \
    \  expected `&f64`, found floating-point number\n   |                        \
    \     help: consider borrowing here: `&3.7`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfykxjivi.rs:34:16\n   |\n34 |         if i > 3.7 && i <= 3.3 {\n\
    \   |                ^^^\n   |                |\n   |                expected\
    \ `&f64`, found floating-point number\n   |                help: consider borrowing\
    \ here: `&3.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfykxjivi.rs:34:28\n\
    \   |\n34 |         if i > 3.7 && i <= 3.3 {\n   |                           \
    \ ^^^\n   |                            |\n   |                            expected\
    \ `&f64`, found floating-point number\n   |                            help: consider\
    \ borrowing here: `&3.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfykxjivi.rs:37:16\n\
    \   |\n37 |         if i > 3.3 && i <= 3.0 {\n   |                ^^^\n   |  \
    \              |\n   |                expected `&f64`, found floating-point number\n\
    \   |                help: consider borrowing here: `&3.3`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfykxjivi.rs:37:28\n   |\n37 |         if i > 3.3 && i <=\
    \ 3.0 {\n   |                            ^^^\n   |                           \
    \ |\n   |                            expected `&f64`, found floating-point number\n\
    \   |                            help: cons"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    grades_copy.sort();\n    for i in grades_copy.iter() {\n    \
    \    if i <= 3.3 {\n            letter_grades.push(\"A+\");\n        } else if\
    \ i <= 3.0 {\n            letter_grades.push(\"A\");\n        } else if i <= 2.7\
    \ {\n            letter_grades.push(\"B+\");\n        } else if i <= 2.3 {\n \
    \           letter_grades.push(\"B\");\n        } else if i <= 1.7 {\n       \
    \     letter_grades.push(\"C+\");\n        } else if i <= 1.3 {\n            letter_grades.push(\"\
    C\");\n        } else if i <= 1.0 {\n            letter_grades.push(\"D+\");\n\
    \        } else if i <= 0.7 {\n            letter_grades.push(\"D\");\n      \
    \  } else {\n            letter_grades.push(\"D-\");\n        }\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpuoea8tfm.rs:25:17\n\
    \    |\n25  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuoea8tfm.rs:27:17\n\
    \   |\n27 |         if i <= 3.3 {\n   |                 ^^^\n   |            \
    \     |\n   |                 expected `&f64`, found floating-point number\n \
    \  |                 help: consider borrowing here: `&3.3`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuoea8tfm.rs:29:24\n   |\n29 |         } else if i <= 3.0\
    \ {\n   |                        ^^^\n   |                        |\n   |    \
    \                    expected `&f64`, found floating-point number\n   |      \
    \                  help: consider borrowing here: `&3.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuoea8tfm.rs:31:24\n   |\n31 |         } else if i <= 2.7\
    \ {\n   |                        ^^^\n   |                        |\n   |    \
    \                    expected `&f64`, found floating-point number\n   |      \
    \                  help: consider borrowing here: `&2.7`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuoea8tfm.rs:33:24\n   |\n33 |         } else if i <= 2.3\
    \ {\n   |                        ^^^\n   |                        |\n   |    \
    \                    expected `&f64`, found floating-point number\n   |      \
    \                  help: consider borrowing here: `&2.3`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuoea8tfm.rs:35:24\n   |\n35 |         } else if i <= 1.7\
    \ {\n   |                        ^^^\n   |                        |\n   |    \
    \                    expected `&f64`, found floating-point number\n   |      \
    \                  help: consider borrowing here: `&1.7`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuoea8tfm.rs:37:24\n   |\n3"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let mut grades_slice\
    \ = grades_copy.as_slice();\n    let mut grades_len = grades.len();\n    let mut\
    \ result = vec![];\n    while grades_len > 0 {\n        grades_slice.pop();\n\
    \        if grades_len == 0 {\n            result.push(\"E\");\n            break;\n\
    \        }\n        let grade = grades_slice.pop();\n        result.push(format!(\"\
    {}+\", numerical_grade(grade)));\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `numerical_grade` in this scope\n  -->\
    \ /tmp/tmpbq5ruqfl.rs:34:36\n   |\n34 |         result.push(format!(\"{}+\", numerical_grade(grade)));\n\
    \   |                                    ^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0599]: no method named `pop` found for reference `&[f64]` in the current\
    \ scope\n  --> /tmp/tmpbq5ruqfl.rs:28:22\n   |\n28 |         grades_slice.pop();\n\
    \   |                      ^^^ method not found in `&[f64]`\n\nerror[E0599]: no\
    \ method named `pop` found for reference `&[f64]` in the current scope\n  -->\
    \ /tmp/tmpbq5ruqfl.rs:33:34\n   |\n33 |         let grade = grades_slice.pop();\n\
    \   |                                  ^^^ method not found in `&[f64]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbq5ruqfl.rs:34:21\n   |\n34 |         result.push(format!(\"\
    {}+\", numerical_grade(grade)));\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `String`\n   |\n   = note: this error originates\
    \ in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbq5ruqfl.rs:36:5\n  \
    \ |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   | \
    \                                               ----------- expected `Vec<String>`\
    \ because of return type\n...\n36 |     result\n   |     ^^^^^^ expected struct\
    \ `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n   \
    \           found struct `Vec<&str>`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    if grades.len() != 7 {\n        panic!(\"grades must be\
    \ exactly 7 grades\")\n    }\n    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades.iter() {\n        letter_grades.push((\n            if grade\
    \ < 3.0 { \"A+\" }\n            else if grade < 3.7 { \"A\" }\n            else\
    \ if grade < 3.3 { \"A-\" }\n            else if grade < 3.0 { \"B+\" }\n    \
    \        else if grade < 2.7 { \"B\" }\n            else if grade < 2.3 { \"B-\"\
    \ }\n            else if grade < 2.0 { \"C+\" }\n            else if grade < 1.7\
    \ { \"C\" }\n            else if grade < 1.3 { \"C-\" }\n            else if grade\
    \ < 1.0 { \"D+\" }\n            else if grade < 0.7 { \"D\" }\n            else\
    \ { \"D-\" }\n        ));\n    }\n    letter_grades\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around method argument\n  --> /tmp/tmp8ct1v7a3.rs:28:28\n\
    \   |\n28 |           letter_grades.push((\n   |  ____________________________^\n\
    29 | |             if grade < 3.0 { \"A+\" }\n   | |____________^\n...\n40 | \
    \              else { \"D-\" }\n   |  __________________________^\n41 | |    \
    \     ));\n   | |_________^\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n   |\n28 ~         letter_grades.push(if grade\
    \ < 3.0 { \"A+\" }\n29 |             else if grade < 3.7 { \"A\" }\n30 |     \
    \        else if grade < 3.3 { \"A-\" }\n31 |             else if grade < 3.0\
    \ { \"B+\" }\n32 |             else if grade < 2.7 { \"B\" }\n33 |           \
    \  else if grade < 2.3 { \"B-\" }\n ...\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp8ct1v7a3.rs:29:24\n   |\n29 |             if grade < 3.0 { \"A+\" }\n\
    \   |                        ^^^\n   |                        |\n   |        \
    \                expected `&f64`, found floating-point number\n   |          \
    \              help: consider borrowing here: `&3.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8ct1v7a3.rs:30:29\n   |\n30 |             else if grade\
    \ < 3.7 { \"A\" }\n   |                             ^^^\n   |                \
    \             |\n   |                             expected `&f64`, found floating-point\
    \ number\n   |                             help: consider borrowing here: `&3.7`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8ct1v7a3.rs:31:29\n   |\n31 |\
    \             else if grade < 3.3 { \"A-\" }\n   |                           \
    \  ^^^\n   |                             |\n   |                             expected\
    \ `&f64`, found floating-point number\n   |                             help:\
    \ consider borrowing here: `&3.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8ct1v7a3.rs:32:29\n\
    \   |\n32 |             else if grade < 3.0 { \"B+\" }\n   |                 \
    \            ^^^\n   |                             |\n   |                   \
    \          expected `&f64`, found floating-point number\n   |                \
    \             help: consider borrowing here: `&3.0`\n\nerror[E0308]: "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let grades = grades.clone();\n    let mut grade_array\
    \ = vec![];\n    for grade in grades {\n        let mut letter_grade = vec![];\n\
    \        if grade <= 3.0 {\n            letter_grade.push(('A' + grade).to_string());\n\
    \        } else if grade <= 3.3 {\n            letter_grade.push(('A' + grade\
    \ - 2).to_string());\n        } else if grade <= 3.7 {\n            letter_grade.push(('B'\
    \ + grade - 3.3).to_string());\n        } else if grade <= 4.0 {\n           \
    \ letter_grade.push(('B' + grade - 3.7).to_string());\n        } else if grade\
    \ <= 4.3 {\n            letter_grade.push(('B' + grade - 4.0).to_string());\n\
    \        } else if grade <= 4.7 {\n            letter_grade.push(('B' + grade\
    \ - 4.3).to_string());\n        } else if grade <= 5.0 {\n            letter_grade.push(('B'\
    \ + grade - 4.7).to_string());\n        } else if grade <= 5.3 {\n           \
    \ letter_grade.push(('B' + grade - 5.0).to_string());\n        } else if grade\
    \ <= 5.7 {\n            letter_grade.push(('B' + grade - 5.3).to_string());\n\
    \        } else if grade <= 6.0 {\n            letter_grade.push(('B' + grade\
    \ - 5.7).to_string());\n        } else {\n            letter_grade.push(('C' +\
    \ grade - 6.0).to_string());\n        }\n        grade_array.push(&mut letter_grade.iter().cloned().collect::<Vec<String>>());\n\
    \    }\n    grade_array\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `f64` to `char`\n  --> /tmp/tmp2y0u5pro.rs:28:36\n\
    \   |\n28 |             letter_grade.push(('A' + grade).to_string());\n   |  \
    \                              --- ^ ----- f64\n   |                         \
    \       |\n   |                                char\n\nerror[E0369]: cannot add\
    \ `f64` to `char`\n  --> /tmp/tmp2y0u5pro.rs:30:36\n   |\n30 |             letter_grade.push(('A'\
    \ + grade - 2).to_string());\n   |                                --- ^ -----\
    \ f64\n   |                                |\n   |                           \
    \     char\n\nerror[E0369]: cannot add `f64` to `char`\n  --> /tmp/tmp2y0u5pro.rs:32:36\n\
    \   |\n32 |             letter_grade.push(('B' + grade - 3.3).to_string());\n\
    \   |                                --- ^ ----- f64\n   |                   \
    \             |\n   |                                char\n\nerror[E0369]: cannot\
    \ add `f64` to `char`\n  --> /tmp/tmp2y0u5pro.rs:34:36\n   |\n34 |           \
    \  letter_grade.push(('B' + grade - 3.7).to_string());\n   |                 \
    \               --- ^ ----- f64\n   |                                |\n   | \
    \                               char\n\nerror[E0369]: cannot add `f64` to `char`\n\
    \  --> /tmp/tmp2y0u5pro.rs:36:36\n   |\n36 |             letter_grade.push(('B'\
    \ + grade - 4.0).to_string());\n   |                                --- ^ -----\
    \ f64\n   |                                |\n   |                           \
    \     char\n\nerror[E0369]: cannot add `f64` to `char`\n  --> /tmp/tmp2y0u5pro.rs:38:36\n\
    \   |\n38 |             letter_grade.push(('B' + grade - 4.3).to_string());\n\
    \   |                                --- ^ ----- f64\n   |                   \
    \             |\n   |                                char\n\nerror[E0369]: cannot\
    \ add `f64` to `char`\n  --> /tmp/tmp2y0u5pro.rs:40:36\n   |\n40 |           \
    \  letter_grade.push(('B' + grade - 4.7).to_string());\n   |                 \
    \               --- ^ ----- f64\n   |                                |\n   | \
    \                               char\n\nerror[E0369]: cannot add `f64` to `char`\n\
    \  --> /tmp/tmp2y0u5pro.rs:42:36\n   |\n42 |             letter_g"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    if grades.len() < 1 {\n        return vec![];\n    }\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut gpas = grades.to_vec();\n\
    \    let mut gpa_index = 0;\n    while gpa_index < gpas.len() {\n        let mut\
    \ letter_grade = \"\";\n        for mut i = 0; i < gpas.len() - gpa_index + 1;\
    \ i++ {\n            let gpa = gpas[gpa_index + i];\n            let grade = match\
    \ gpa {\n                f64 => if i ==0 { \"+\" }\n                else     \
    \      { \" \" }\n                _ => {\n                    let mut gpa1 = gpas[gpa_index\
    \ - i];\n                    let mut gpa2 = gpas[gpa_index + i];\n           \
    \         let mut gpa3 = gpas[gpa_index + 2 * i];\n                    let mut\
    \ gpa4 = gpas[gpa_index + 3 * i];\n                    if gpa1 < gpa2 { gpa1 }\n\
    \                    else          { gpa2 }\n                }\n            };\n\
    \            letter_grade += grade as char;\n        }\n        gpa_index += 1;\n\
    \        grades_vec.push(letter_grade);\n    }\n    return grades_vec;\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: missing `in` in `for` loop\n  --> /tmp/tmpqrartn99.rs:31:18\n  \
    \ |\n31 |         for mut i = 0; i < gpas.len() - gpa_index + 1; i++ {\n   | \
    \                 ^ help: try adding `in` here\n\nerror: expected expression,\
    \ found `=`\n  --> /tmp/tmpqrartn99.rs:31:19\n   |\n31 |         for mut i = 0;\
    \ i < gpas.len() - gpa_index + 1; i++ {\n   |                   ^ expected expression\n\
    \nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let len = grades.len();\n    if len < 7 {\n        return\
    \ vec![String::from(\"E\")];\n    }\n    let mut result = vec![String::from(\"\
    E\")];\n    let grade = grades.iter().map(|g| {\n        if g > 3.0 {\n      \
    \      String::from(\"B+\")\n        } else if g > 2.7 {\n            String::from(\"\
    B\")\n        } else if g > 2.3 {\n            String::from(\"B-\")\n        }\
    \ else if g > 2.0 {\n            String::from(\"C+\")\n        } else if g > 1.7\
    \ {\n            String::from(\"C\")\n        } else if g > 1.3 {\n          \
    \  String::from(\"C-\")\n        } else if g > 1.0 {\n            String::from(\"\
    D+\")\n        } else if g > 0.7 {\n            String::from(\"D\")\n        }\
    \ else if g > 0.0 {\n            String::from(\"D-\")\n        } else {\n    \
    \        String::from(\"E\")\n        }\n    }).collect::<Vec<String>>();\n  \
    \  for g in grade {\n        result.push(g);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2x16637b.rs:29:16\n   |\n\
    29 |         if g > 3.0 {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&f64`, found floating-point number\n   |        \
    \        help: consider borrowing here: `&3.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2x16637b.rs:31:23\n   |\n31 |         } else if g > 2.7 {\n   |\
    \                       ^^^\n   |                       |\n   |              \
    \         expected `&f64`, found floating-point number\n   |                 \
    \      help: consider borrowing here: `&2.7`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2x16637b.rs:33:23\n   |\n33 |         } else if g > 2.3 {\n   |\
    \                       ^^^\n   |                       |\n   |              \
    \         expected `&f64`, found floating-point number\n   |                 \
    \      help: consider borrowing here: `&2.3`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2x16637b.rs:35:23\n   |\n35 |         } else if g > 2.0 {\n   |\
    \                       ^^^\n   |                       |\n   |              \
    \         expected `&f64`, found floating-point number\n   |                 \
    \      help: consider borrowing here: `&2.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2x16637b.rs:37:23\n   |\n37 |         } else if g > 1.7 {\n   |\
    \                       ^^^\n   |                       |\n   |              \
    \         expected `&f64`, found floating-point number\n   |                 \
    \      help: consider borrowing here: `&1.7`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2x16637b.rs:39:23\n   |\n39 |         } else if g > 1.3 {\n   |\
    \                       ^^^\n   |                       |\n   |              \
    \         expected `&f64`, found floating-point number\n   |                 \
    \      help: consider borrowing here: `&1.3`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2x16637b.rs:41:23\n   |\n41 |         } else if g > 1.0 {\n   |\
    \                       ^^^\n   |                       |\n   |              \
    \         expected `&f64`, found floating-point number\n   |                 \
    \      help: consider borrowing here"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    // TODO\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphpbke937.rs:22:48\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let grades = grades.into_iter().map(|g| g as f64).collect::<Vec<_>>();\n\
    \    let grades_iter = grades.iter();\n    let mut letter_grades = Vec::new();\n\
    \n    for grade in grades_iter {\n        let mut cur = grade;\n        loop {\n\
    \            if cur == 0.0 {\n                letter_grades.push(\"D+\");\n  \
    \              break;\n            } else if cur < 1.0 && cur > 0.0 && cur ==\
    \ cur - 1.0 {\n                letter_grades.push(\"D\");\n                break;\n\
    \            } else if cur < 0.0 && cur > -1.0 && cur == cur + 1.0 {\n       \
    \         letter_grades.push(\"D-\");\n                break;\n            } else\
    \ if cur > -1.0 && cur > -1.0 && cur == cur - 1.0 {\n                letter_grades.push(\"\
    C\");\n                break;\n            } else if cur > -1.0 && cur < -1.0\
    \ && cur == cur + 1.0 {\n                letter_grades.push(\"C\");\n        \
    \        break;\n            } else if cur < -1.0 && cur > -1.0 && cur == cur\
    \ - 1.0 {\n                letter_grades.push(\"B-\");\n                break;\n\
    \            } else if cur < -1.0 && cur < -1.0 && cur == cur + 1.0 {\n      \
    \          letter_grades.push(\"B-\");\n                break;\n            }\
    \ else if cur < -1.0 && cur < -1.0 && cur == cur - 1.0 {\n                letter_grades.push(\"\
    B-\");\n                break;\n            } else if cur > -1.0 && cur < -1.0\
    \ && cur == cur + 1.0 {\n                letter_grades.push(\"B-\");\n       \
    \         break;\n            } else if cur > -1.0 && cur < -1.0 && cur == cur\
    \ - 1.0 {\n                letter_grades.push(\"B+\");\n                break;\n\
    \            } else if cur > -1.0 && cur < -1.0 && cur == cur + 1.0 {\n      \
    \          letter_grades.push(\"B+\");\n                break;\n            }\
    \ else if cur < -1.0 && cur > -1.0 && cur == cur - 1.0 {\n                letter_grades.push(\"\
    B+\");\n                break;\n            } else if cur < -1.0 && cur < -1.0\
    \ && cur == cur + 1.0 {\n                letter_grades.push(\"B+\");\n       \
    \         break;\n            } else if cur > -1.0 && cur < -1.0 && cur == cur\
    \ - 1.0 {\n                letter_grades.push(\"A+\");\n                break;\n\
    \            } else if cur < -1.0 && cur > -1.0 && cur == cur + 1.0 {\n      \
    \          letter_grades.push(\"A+\");\n                break;\n            }\
    \ else if cur < -1.0 && cur < -1.0 && cur == cur - 1.0 {\n                letter_grades.push(\"\
    A+\");\n                break;\n\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp6kjectpj.rs:89:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n27 |     for grade in grades_iter {\n   |                              -\
    \ unclosed delimiter\n28 |         let mut cur = grade;\n29 |         loop {\n\
    \   |              - unclosed delimiter\n...\n75 |             } else if cur <\
    \ -1.0 && cur < -1.0 && cur == cur - 1.0 {\n   |                             \
    \                                       - this delimiter might not be properly\
    \ closed...\n...\n79 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n89 | }\n   |   ^\n\nerror[E0277]: can't compare `&f64` with `{float}`\n \
    \ --> /tmp/tmp6kjectpj.rs:30:20\n   |\n30 |             if cur == 0.0 {\n   |\
    \                    ^^ no implementation for `&f64 == {float}`\n   |\n   = help:\
    \ the trait `PartialEq<{float}>` is not implemented for `&f64`\n   = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6kjectpj.rs:33:29\n   |\n33 |\
    \             } else if cur < 1.0 && cur > 0.0 && cur == cur - 1.0 {\n   |   \
    \                          ^^^\n   |                             |\n   |     \
    \                        expected `&f64`, found floating-point number\n   |  \
    \                           help: consider borrowing here: `&1.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6kjectpj.rs:33:42\n   |\n33 |             }\
    \ else if cur < 1.0 && cur > 0.0 && cur == cur - 1.0 {\n   |                 \
    \                         ^^^\n   |                                          |\n\
    \   |                                          expected `&f64`, found floating-point\
    \ number\n   |                                          help: consider borrowing\
    \ here: `&0.0`\n\nerror[E0277]: can't compare `&f64` with `f64`\n  --> /tmp/t"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    // TODO: Implement me\n    vec![]\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmpohwlw8f8.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n\n    for grade in\
    \ grades {\n        if grade >= 3.0 {\n            letter_grades.push(match grade\
    \ {\n                0.0    => \"D\",\n                1.7    => \"C\",\n    \
    \            2.0    => \"B\",\n                2.3    => \"B\",\n            \
    \    2.7    => \"B\",\n                3.0    => \"A\",\n                3.3 \
    \   => \"A-\",\n                3.7    => \"A\",\n                4.0    => \"\
    A+\",\n                _      => \"E\",\n            });\n        } else if grade\
    \ >= 2.0 {\n            letter_grades.push(match grade {\n                0.0\
    \    => \"D\",\n                1.7    => \"C\",\n                2.0    => \"\
    B\",\n                2.3    => \"B-\",\n                2.7    => \"B\",\n  \
    \              3.0    => \"A\",\n                3.3    => \"A+\",\n         \
    \       3.7    => \"A\",\n                4.0    => \"A+\",\n                _\
    \      => \"E\",\n            });\n        } else if grade >= 1.0 {\n        \
    \    letter_grades.push(match grade {\n                0.0    => \"D\",\n    \
    \            1.7    => \"C\",\n                2.0    => \"B\",\n            \
    \    2.3    => \"B-\",\n                2.7    => \"B\",\n                3.0\
    \    => \"A\",\n                3.3    => \"A-\",\n                3.7    => \"\
    A\",\n                4.0    => \"A+\",\n                _      => \"E\",\n  \
    \          });\n        } else if grade >= 0.0 {\n            letter_grades.push(match\
    \ grade {\n                0.0    => \"D\",\n                1.7    => \"C\",\n\
    \                2.0    => \"B\",\n                2.3    => \"B-\",\n       \
    \         2.7    => \"B\",\n                3.0    => \"A\",\n               \
    \ 3.3    => \"A-\",\n                3.7    => \"A\",\n                4.0   \
    \ => \"A+\",\n                _      => \"E\",\n            });\n        } else\
    \ {\n            letter_grades.push(match grade {\n                0.0    => \"\
    D\",\n                1.7    => \"C\",\n                2.0    => \"B\",\n   \
    \             2.3    => \"B-\",\n                2.7    => \"B\",\n          \
    \      3.0    => \"A\",\n                3.3    => \"A-\",\n                3.7\
    \    => \"A\",\n                4.0    => \"A+\",\n                _      => \"\
    E\",\n            });\n        }\n    }\n\n    return letter_grades\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3agx57c4.rs:94:12\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n94 |     return letter_grades\n   |           \
    \ ^^^^^^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grade = grades.iter().filter(|&x| x > 0).collect::<Vec<f64>>();\n\
    \    if grade.len() > 0 {\n        grade.sort();\n        let mut grade_letter\
    \ = vec!['B' - 'A' + 1];\n        for grade in grade {\n            if grade <\
    \ 2.0 {\n                grade_letter.push('C' - 'A' + grade - 2.0);\n       \
    \     } else if grade < 3.0 {\n                grade_letter.push('B-');\n    \
    \        } else if grade < 4.0 {\n                grade_letter.push('A-');\n \
    \           } else {\n                grade_letter.push('B+');\n            }\n\
    \        }\n        return grade_letter.iter().cloned().collect::<Vec<String>>();\n\
    \    } else {\n        return vec!['E'.to_string()];\n    }\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp4t3a281a.rs:31:38\n\
    \   |\n31 |                 grade_letter.push('B-');\n   |                   \
    \                   ^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_array = grades.to_owned();\n    let mut\
    \ grades_iter = grades_array.iter();\n    let mut grades_len = 0;\n    let mut\
    \ letter_grade = String::new();\n    for grade in grades_iter {\n        grades_len\
    \ += 1;\n        if grade < 1.0 {\n            letter_grade += \"A\";\n      \
    \  } else if grade < 2.0 {\n            letter_grade += \"A-\";\n        } else\
    \ if grade < 3.0 {\n            letter_grade += \"B\";\n        } else if grade\
    \ < 4.0 {\n            letter_grade += \"B-\";\n        } else if grade < 5.0\
    \ {\n            letter_grade += \"C\";\n        } else if grade < 6.0 {\n   \
    \         letter_grade += \"C-\";\n        } else if grade < 7.0 {\n         \
    \   letter_grade += \"D\";\n        } else if grade < 8.0 {\n            letter_grade\
    \ += \"D-\";\n        } else if grade < 9.0 {\n            letter_grade += \"\
    E\";\n        } else {\n            letter_grade += \"F\";\n        }\n    }\n\
    \    let mut letter_grades_array = vec![];\n    if grades_len == 1 {\n       \
    \ letter_grades_array.push(letter_grade);\n    } else if grades_len == 2 {\n \
    \       if grades_array[0] > grades_array[1] {\n            letter_grades_array.push(\"\
    B-\");\n            letter_grades_array.push(\"B-\");\n        } else {\n    \
    \        letter_grades_array.push(\"B-\");\n            letter_grades_array.push(\"\
    B-\");\n        }\n    } else {\n        if grades_array[0] > grades_array[1]\
    \ && grades_array[0] > grades_array[2] {\n            letter_grades_array.push(\"\
    B-\");\n            letter_grades_array.push(\"B-\");\n            letter_grades_array.push(\"\
    B-\");\n        } else {\n            letter_grades_array.push(\"B-\");\n    \
    \        letter_grades_array.push(\"B-\");\n        }\n        if grades_array[1]\
    \ > grades_array[2] {\n            letter_grades_array.push(\"B-\");\n       \
    \     letter_grades_array.push(\"B-\");\n        }\n    }\n    letter_grades_array\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7xgsxz06.rs:29:20\n   |\n\
    29 |         if grade < 1.0 {\n   |                    ^^^\n   |             \
    \       |\n   |                    expected `&f64`, found floating-point number\n\
    \   |                    help: consider borrowing here: `&1.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7xgsxz06.rs:31:27\n   |\n31 |         } else\
    \ if grade < 2.0 {\n   |                           ^^^\n   |                 \
    \          |\n   |                           expected `&f64`, found floating-point\
    \ number\n   |                           help: consider borrowing here: `&2.0`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7xgsxz06.rs:33:27\n   |\n33 |\
    \         } else if grade < 3.0 {\n   |                           ^^^\n   |  \
    \                         |\n   |                           expected `&f64`, found\
    \ floating-point number\n   |                           help: consider borrowing\
    \ here: `&3.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7xgsxz06.rs:35:27\n\
    \   |\n35 |         } else if grade < 4.0 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&4.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7xgsxz06.rs:37:27\n\
    \   |\n37 |         } else if grade < 5.0 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&5.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7xgsxz06.rs:39:27\n\
    \   |\n39 |         } else if grade < 6.0 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&6.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7xgsxz06.rs:41:27\n\
    \   |\n41 |         } else if grade < 7.0 {\n   |                           ^^^\n\
    \   |                         "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    // Solution goes here\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6bd_7ev_.rs:22:48\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades\
    \ {\n        if grade > 4.0 {\n            letter_grades.push('C');\n        }\
    \ else if grade > 3.7 {\n            letter_grades.push('B');\n        } else\
    \ if grade > 3.3 {\n            letter_grades.push('A');\n        } else if grade\
    \ > 3.0 {\n            letter_grades.push('A+');\n        } else if grade > 2.7\
    \ {\n            letter_grades.push('B');\n        } else if grade > 2.3 {\n \
    \           letter_grades.push('B-');\n        } else if grade > 2.0 {\n     \
    \       letter_grades.push('A+');\n        } else if grade > 1.7 {\n         \
    \   letter_grades.push('A');\n        } else if grade > 1.3 {\n            letter_grades.push('A-');\n\
    \        } else if grade > 1.0 {\n            letter_grades.push('D+');\n    \
    \    } else if grade > 0.7 {\n            letter_grades.push('D');\n        }\
    \ else if grade > 0.0 {\n            letter_grades.push('D-');\n        } else\
    \ {\n            letter_grades.push('E');\n        }\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpp0ql4ztg.rs:32:35\n\
    \   |\n32 |             letter_grades.push('A+');\n   |                      \
    \             ^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n\n    for i in grades\
    \ {\n        if i >= 0.0 {\n            letter_grades.push(\"A+\");\n        }\
    \ else if i > 3.0 {\n            letter_grades.push(\"A\");\n        } else if\
    \ i > 2.3 {\n            letter_grades.push(\"A-\");\n        } else if i > 1.7\
    \ {\n            letter_grades.push(\"B+\");\n        } else if i > 1.3 {\n  \
    \          letter_grades.push(\"B\");\n        } else if i > 0.7 {\n         \
    \   letter_grades.push(\"B-\");\n        } else if i > 0.3 {\n            letter_grades.push(\"\
    C+\");\n        } else if i > 0.07 {\n            letter_grades.push(\"C\");\n\
    \        } else if i > 0.03 {\n            letter_grades.push(\"C-\");\n     \
    \   } else if i > 0.007 {\n            letter_grades.push(\"D+\");\n        }\
    \ else if i > 0.003 {\n            letter_grades.push(\"D\");\n        } else\
    \ {\n            letter_grades.push(\"D-\");\n        }\n    }\n\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzlab6uij.rs:53:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n53 |     letter_grades\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_str = vec![\"\"];\n    let mut grade_points_to_add\
    \ = 0;\n    for i in grades.iter().cloned() {\n        if grade_points_to_add\
    \ == 3 {\n            grades_str.push(\"C\");\n            grade_points_to_add\
    \ = 0;\n        } else if grade_points_to_add == 2 {\n            grades_str.push(\"\
    B-\");\n            grade_points_to_add = 0;\n        } else if grade_points_to_add\
    \ == 1 {\n            grades_str.push(\"B-\");\n            grades_str.push(\"\
    A-\");\n            grade_points_to_add = 0;\n        } else if grade_points_to_add\
    \ == 0 {\n            grades_str.push(\"D-\");\n            grades_str.push(\"\
    C-\");\n            grades_str.push(\"B-\");\n            grades_str.push(\"A-\"\
    );\n            grades_str.push(\"A-\");\n            grades_str.push(\"D-\");\n\
    \            grades_str.push(\"C-\");\n            grade_points_to_add = 0;\n\
    \        } else {\n            grades_str.push(\"D-\");\n            grades_str.push(\"\
    C-\");\n            grades_str.push(\"B-\");\n            grades_str.push(\"A-\"\
    );\n            grades_str.push(\"A-\");\n            grades_str.push(\"D-\");\n\
    \            grades_str.push(\"C-\");\n            grade_points_to_add = 0;\n\
    \        }\n        grades_str.push(match i {\n            3.0 => \"C+\",\n  \
    \          2.7 => \"B+\",\n            2.3 => \"B-\",\n            2.0 => \"C+\"\
    ,\n            1.7 => \"C\",\n            1.3 => \"C-\",\n            1.0 => \"\
    D+\",\n            0.7 => \"D\",\n            0.0 => \"D-\",\n            _ =>\
    \ \"E\",\n        });\n        grade_points_to_add += 1;\n    }\n    grades_str\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpug8rb7jt.rs:69:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n69 |     grades_str\n   |     ^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n\n    // Sort based\
    \ on GPA\n    grades.sort_unstable_by_key(|x| x.0);\n\n    // We start from index\
    \ 1, because index 0 has grades 4.0 and index 1\n    // has grades 0.0\n    for\
    \ i in 1..grades.len() {\n        // Calculate the GPA of the next student\n \
    \       let gpa = grades[i-1].0 + grades[i].0;\n\n        // If GPA is less than\
    \ or equal to 3.5, output A grade\n        if gpa >= 3.5 {\n            letter_grades.push(\"\
    A+\");\n        }\n        // If GPA between 3.3 and 3.7, output A grade\n   \
    \     if gpa >= 3.3 && gpa <= 3.7 {\n            letter_grades.push(\"A\");\n\
    \        }\n        // If GPA between 3.0 and 3.3, output B+ grade\n        if\
    \ gpa >= 3.0 && gpa <= 3.3 {\n            letter_grades.push(\"B+\");\n      \
    \  }\n        // If GPA between 2.7 and 3.0, output B grade\n        if gpa >=\
    \ 2.7 && gpa <= 3.0 {\n            letter_grades.push(\"B\");\n        }\n   \
    \     // If GPA between 2.3 and 2.7, output B-\n        if gpa >= 2.3 && gpa <=\
    \ 2.7 {\n            letter_grades.push(\"B-\");\n        }\n        // If GPA\
    \ between 2.0 and 3.0, output C+ grade\n        if gpa >= 2.0 && gpa <= 2.3 {\n\
    \            letter_grades.push(\"C+\");\n        }\n        // If GPA between\
    \ 1.7 and 2.0, output C grade\n        if gpa >= 1.7 && gpa <= 2.0 {\n       \
    \     letter_grades.push(\"C\");\n        }\n        // If GPA between 1.3 and\
    \ 1.7, output C-\n        if gpa >= 1.3 && gpa <= 1.7 {\n            letter_grades.push(\"\
    C-\");\n        }\n        // If GPA between 1.0 and 1.3, output D+ grade\n  \
    \      if gpa >= 1.0 && gpa <= 1.3 {\n            letter_grades.push(\"D+\");\n\
    \        }\n        // If GPA less than or equal to 0.7, output D grade\n    \
    \    if gpa <= 0.7 {\n            letter_grades.push(\"D\");\n        }\n    \
    \    // If GPA less than 0.0, output D- grade\n        if gpa <= 0.0 {\n     \
    \       letter_grades.push(\"D-\");\n        }\n        // If GPA is less than\
    \ or equal to 0.0, output E grade\n        if gpa <= 0.0 {\n            letter_grades.push(\"\
    E\");\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0609]: no field `0` on type `&f64`\n  --> /tmp/tmp2wqlndv1.rs:26:39\n\
    \   |\n26 |     grades.sort_unstable_by_key(|x| x.0);\n   |                  \
    \                     ^\n\nerror[E0610]: `f64` is a primitive type and therefore\
    \ doesn't have fields\n  --> /tmp/tmp2wqlndv1.rs:32:31\n   |\n32 |         let\
    \ gpa = grades[i-1].0 + grades[i].0;\n   |                               ^\n\n\
    error[E0610]: `f64` is a primitive type and therefore doesn't have fields\n  -->\
    \ /tmp/tmp2wqlndv1.rs:32:45\n   |\n32 |         let gpa = grades[i-1].0 + grades[i].0;\n\
    \   |                                             ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2wqlndv1.rs:83:5\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \     ----------- expected `Vec<String>` because of return type\n...\n83 |   \
    \  letter_grades\n   |     ^^^^^^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0609, E0610.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    if grades.len() <= 1 || grades.len() > 10 {\n        return\
    \ vec![\"F\"];\n    }\n    let mut letter_grades: Vec<String> = vec![\"F\"];\n\
    \    grades.sort_unstable();\n    let mut grade_sum: f64 = 0.0;\n    let mut total_count:\
    \ usize = 1;\n    for grade in grades {\n        grade_sum += grade;\n       \
    \ total_count += 1;\n    }\n    for grade in grades {\n        let letter_grade:\
    \ String;\n        if grade < 3.0 {\n            letter_grade = \"F\";\n     \
    \   } else if grade < 3.3 {\n            letter_grade = \"E\";\n        } else\
    \ if grade < 3.7 {\n            letter_grade = \"D\";\n        } else if grade\
    \ < 4.0 {\n            letter_grade = \"C\";\n        } else if grade < 4.3 {\n\
    \            letter_grade = \"B\";\n        } else if grade < 4.7 {\n        \
    \    letter_grade = \"A\";\n        } else if grade < 5.0 {\n            letter_grade\
    \ = \"A+\";\n        } else if grade < 5.3 {\n            letter_grade = \"A-\"\
    ;\n        } else if grade < 5.7 {\n            letter_grade = \"B+\";\n     \
    \   } else if grade < 6.0 {\n            letter_grade = \"B-\";\n        } else\
    \ if grade < 6.3 {\n            letter_grade = \"C+\";\n        } else if grade\
    \ < 6.7 {\n            letter_grade = \"C-\";\n        } else if grade < 7.0 {\n\
    \            letter_grade = \"D+\";\n        } else if grade < 7.3 {\n       \
    \     letter_grade = \"D-\";\n        } else if grade < 7.7 {\n            letter_grade\
    \ = \"F\";\n        } else if grade < 8.0 {\n            letter_grade = \"E\"\
    ;\n        } else if grade < 8.3 {\n            letter_grade = \"D\";\n      \
    \  } else if grade < 8.7 {\n            letter_grade = \"C\";\n        } else\
    \ if grade < 9.0 {\n            letter_grade = \"B\";\n        } else if grade\
    \ < 9.3 {\n            letter_grade = \"A\";\n        } else if grade < 9.7 {\n\
    \            letter_grade = \"A+\";\n        } else if grade < 10.0 {\n      \
    \      letter_grade = \"A-\";\n        } else {\n            letter_grade = \"\
    F\";\n        }\n        letter_grades.push(format!(\"{}\", letter_grade));\n\
    \    }\n    letter_grades.push(format!(\"{}\", format!(\"+{}\", grade_sum / total_count)));\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpckgm1spd.rs:24:21\n   |\n\
    24 |         return vec![\"F\"];\n   |                     ^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                     |\n   |      \
    \               expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpckgm1spd.rs:26:47\n   |\n26 |     let mut letter_grades:\
    \ Vec<String> = vec![\"F\"];\n   |                                           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \                                     |\n   |                                \
    \               expected struct `String`, found `&str`\n\nerror[E0277]: the trait\
    \ bound `f64: Ord` is not satisfied\n    --> /tmp/tmpckgm1spd.rs:27:12\n     |\n\
    27   |     grades.sort_unstable();\n     |            ^^^^^^^^^^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n     |\n     = help: the following other\
    \ types implement trait `Ord`:\n               i128\n               i16\n    \
    \           i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpckgm1spd.rs:37:28\n   |\n35 |         let letter_grade:\
    \ String;\n   |                           ------ expected due to this type\n36\
    \ |         if grade < 3.0 {\n37 |             letter_grade = \"F\";\n   |   \
    \                         ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                            |\n   |                            expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckgm1spd.rs:39:28\n\
    \   |\n35 |         let letter_grade: String;\n   |                          \
    \ ------ expected due to this type\n...\n39 |             letter_grade = \"E\"\
    ;\n   |                            ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                            |\n   |                            expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched t"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    // TODO: Implement the function\n    // let grades = vec![4.0,\
    \ 3.7, 3.3, 3, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0];\n    // let grades = vec![4.0, 3.7,\
    \ 3.3, 3, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0];\n    let grades = vec![4.0, 3.7, 3.3,\
    \ 3, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0];\n    let grades_num = grades.iter().map(|&x|\
    \ x as f64).collect::<Vec<f64>>();\n    let mut grades_letter: Vec<String> = vec![];\n\
    \    let mut running_sum = 0.0;\n\n    for grade in grades_num {\n        running_sum\
    \ += grade;\n        if running_sum >= 3.0 {\n            grades_letter.push(\"\
    A+\");\n        }\n        else if running_sum >= 2.0 {\n            grades_letter.push(\"\
    B+\");\n        }\n        else if running_sum >= 1.5 {\n            grades_letter.push(\"\
    C+\");\n        }\n        else if running_sum >= 1.0 {\n            grades_letter.push(\"\
    C\");\n        }\n        else if running_sum >= 0.0 {\n            grades_letter.push(\"\
    D+\");\n        }\n        else if running_sum < 0.0 {\n            grades_letter.push(\"\
    D\");\n        }\n        else {\n            grades_letter.push(\"E\");\n   \
    \     }\n    }\n    grades_letter\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkbs040x3.rs:26:38\n   |\n\
    26 |     let grades = vec![4.0, 3.7, 3.3, 3, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0];\n\
    \   |                                      ^ expected floating-point number, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkbs040x3.rs:34:32\n\
    \   |\n34 |             grades_letter.push(\"A+\");\n   |                    \
    \            ^^^^- help: try using a conversion method: `.to_string()`\n   | \
    \                               |\n   |                                expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkbs040x3.rs:37:32\n\
    \   |\n37 |             grades_letter.push(\"B+\");\n   |                    \
    \            ^^^^- help: try using a conversion method: `.to_string()`\n   | \
    \                               |\n   |                                expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkbs040x3.rs:40:32\n\
    \   |\n40 |             grades_letter.push(\"C+\");\n   |                    \
    \            ^^^^- help: try using a conversion method: `.to_string()`\n   | \
    \                               |\n   |                                expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkbs040x3.rs:43:32\n\
    \   |\n43 |             grades_letter.push(\"C\");\n   |                     \
    \           ^^^- help: try using a conversion method: `.to_string()`\n   |   \
    \                             |\n   |                                expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkbs040x3.rs:46:32\n\
    \   |\n46 |             grades_letter.push(\"D+\");\n   |                    \
    \            ^^^^- help: try using a conversion method: `.to_string()`\n   | \
    \                               |\n   |                                expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkbs040x3.rs:49:32\n\
    \   |\n49 |             grades_letter.push(\"D\");\n   |                     \
    \           ^^^- help: try using a conversion method: `.to_string()`\n   |   \
    \          "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let grades = grades.into_iter().map(|g| g as f64).collect();\n\
    \    let mut grade_level = grades.len() - 1;\n    let mut letter_grades = Vec::new();\n\
    \    loop {\n        let grade_level_index = grade_level % grades.len();\n   \
    \     let grade = grades[grade_level_index];\n        if grade_level > 0 {\n \
    \           grade_level -= 1;\n        } else {\n            letter_grades.push(format!(\"\
    {}+\", grade));\n            break;\n        }\n        letter_grades.push(format!(\"\
    {}\", grade));\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpuuad1ve2.rs:24:27\n\
    \   |\n23 |     let grades = grades.into_iter().map(|g| g as f64).collect();\n\
    \   |         ------ consider giving `grades` a type\n24 |     let mut grade_level\
    \ = grades.len() - 1;\n   |                           ^^^^^^ cannot infer type\n\
    \   |\n   = note: type must be known at this point\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    // Only grade the students if they are in the range\n\
    \    // [4.0, 3.7], i.e., 4.0 is the lowest grade and 3.7 is the highest grade.\n\
    \    if grades.len() < 2 {\n        return vec![];\n    }\n    let mut num_grades\
    \ = Vec::new();\n    let grade = grades[0];\n    let grades = grades[1..];\n \
    \   let mut i = 1;\n    loop {\n        if grade < grades[i] {\n            break;\n\
    \        }\n        num_grades.push(String::from(grades[i - 1]));\n        i +=\
    \ 1;\n    }\n    num_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[f64]` cannot be known at compilation\
    \ time\n  --> /tmp/tmpctaantdh.rs:30:9\n   |\n30 |     let grades = grades[1..];\n\
    \   |         ^^^^^^ doesn't have a size known at compile-time\n   |\n   = help:\
    \ the trait `Sized` is not implemented for `[f64]`\n   = note: all local variables\
    \ must have a statically known size\n   = help: unsized locals are gated as an\
    \ unstable feature\nhelp: consider borrowing here\n   |\n30 |     let grades =\
    \ &grades[1..];\n   |                  +\n\nerror[E0277]: the trait bound `String:\
    \ From<f64>` is not satisfied\n  --> /tmp/tmpctaantdh.rs:36:25\n   |\n36 |   \
    \      num_grades.push(String::from(grades[i - 1]));\n   |                   \
    \      ^^^^^^^^^^^^ the trait `From<f64>` is not implemented for `String`\n  \
    \ |\n   = help: the following other types implement trait `From<T>`:\n       \
    \      <String as From<&String>>\n             <String as From<&mut str>>\n  \
    \           <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![\"\".to_string(); grades.len()+1];\n\
    \    let mut gpa = grades.iter().sum();\n    let mut min_grade: f64 = std::f64::MAX;\n\
    \    let mut max_grade: f64 = std::f64::MIN;\n\n    // Find minimum and maximum\n\
    \    for i in grades.iter() {\n        if i > max_grade {\n            max_grade\
    \ = i;\n        }\n        if i < min_grade {\n            min_grade = i;\n  \
    \      }\n    }\n\n    // Find the grades \n    for i in grades.iter() {\n   \
    \     if i > max_grade {\n            letter_grades[0] = format!(\"D+\");\n  \
    \          break;\n        }\n        if i < min_grade {\n            letter_grades[0]\
    \ = format!(\"D-\");\n            break;\n        }\n        let num = numerical_grade(i);\n\
    \        if num >= gpa {\n            letter_grades[0] = format!(\"D+\");\n  \
    \          break;\n        }\n        if num < gpa {\n            letter_grades[0]\
    \ = format!(\"D-\");\n            break;\n        }\n\n        let letter_grade\
    \ = letter_grades[num];\n        letter_grades[num] = match i {\n            0\
    \ => \"D+\".to_string(),\n            _ => \"\".to_string(),\n        };\n   \
    \     gpa = i - num;\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `numerical_grade` in this scope\n  -->\
    \ /tmp/tmp9djyof42.rs:48:19\n   |\n48 |         let num = numerical_grade(i);\n\
    \   |                   ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9djyof42.rs:30:16\n   |\n30 |         if i >\
    \ max_grade {\n   |                ^^^^^^^^^\n   |                |\n   |    \
    \            expected `&f64`, found `f64`\n   |                help: consider\
    \ borrowing here: `&max_grade`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9djyof42.rs:31:25\n\
    \   |\n26 |     let mut max_grade: f64 = std::f64::MIN;\n   |                \
    \        --- expected due to this type\n...\n31 |             max_grade = i;\n\
    \   |                         ^ expected `f64`, found `&f64`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n31 |             max_grade = *i;\n   |     \
    \                    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9djyof42.rs:33:16\n\
    \   |\n33 |         if i < min_grade {\n   |                ^^^^^^^^^\n   |  \
    \              |\n   |                expected `&f64`, found `f64`\n   |     \
    \           help: consider borrowing here: `&min_grade`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9djyof42.rs:34:25\n   |\n25 |     let mut min_grade: f64\
    \ = std::f64::MAX;\n   |                        --- expected due to this type\n\
    ...\n34 |             min_grade = i;\n   |                         ^ expected\
    \ `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n   |\n34\
    \ |             min_grade = *i;\n   |                         +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9djyof42.rs:40:16\n   |\n40 |         if i >\
    \ max_grade {\n   |                ^^^^^^^^^\n   |                |\n   |    \
    \            expected `&f64`, found `f64`\n   |                help: consider\
    \ borrowing here: `&max_grade`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9djyof42.rs:44:16\n\
    \   |\n44 |         if i < min_grade {\n   |                ^^^^^^^^^\n   |  \
    \              |\n   |                expected `&f64`, found `f64`\n   |     \
    \           help: consider borrowing here: `&min_grade`\n\ne"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grade = Vec::new();\n    grades.sort_unstable();\n\
    \    for i in 0..grades.len() {\n        let mut grade = grades[i];\n        let\
    \ grade_string = match grade {\n            4.0 => \"+\".to_string(),\n      \
    \      _ => \"\".to_string()\n        };\n        let grade = match grade {\n\
    \            3.7 => \"A\".to_string(),\n            3.3 => \"A-\".to_string(),\n\
    \            3.0 => \"B+\".to_string(),\n            2.7 => \"B\".to_string(),\n\
    \            2.3 => \"B-\".to_string(),\n            2.0 => \"C+\".to_string(),\n\
    \            1.7 => \"C\".to_string(),\n            1.3 => \"C-\".to_string(),\n\
    \            1.0 => \"D+\".to_string(),\n            0.7 => \"D\".to_string(),\n\
    \            0.0 => \"D-\".to_string(),\n            _ => \"\".to_string(),\n\
    \        };\n        letter_grade.push(i + grade_string + grade);\n    }\n   \
    \ return letter_grade;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpwx4vunhr.rs:24:12\n\
    \     |\n24   |     grades.sort_unstable();\n     |            ^^^^^^^^^^^^^ the\
    \ trait `Ord` is not implemented for `f64`\n     |\n     = help: the following\
    \ other types implement trait `Ord`:\n               i128\n               i16\n\
    \               i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror[E0277]: cannot\
    \ add `String` to `usize`\n  --> /tmp/tmpwx4vunhr.rs:45:29\n   |\n45 |       \
    \  letter_grade.push(i + grade_string + grade);\n   |                        \
    \     ^ no implementation for `usize + String`\n   |\n   = help: the trait `Add<String>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        letter_grades.push(match grade {\n            4.0 => \"A+\"\
    ,\n            _ => match grade {\n                3.7 => \"A\",\n           \
    \     3.3 => \"A-\",\n                3.0 => \"B+\",\n                2.7 => \"\
    B\",\n                2.3 => \"B-\",\n                2.0 => \"C+\",\n       \
    \         1.7 => \"C\",\n                1.3 => \"C-\",\n                1.0 =>\
    \ \"D+\",\n                _ => \"D\",\n            }\n        });\n    }\n  \
    \  letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_rv3t49b.rs:41:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n41 |     letter_grades\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grade_sum: f64 = 0.0;\n    let mut num_grade:\
    \ usize = 0;\n    let mut letter_grade: String = String::new();\n    for grade\
    \ in grades {\n        let grade_part = grade / 1.0;\n        let letter = if\
    \ grade_part < 4.0 {\n            \"A+\"\n        } else if grade_part < 3.7 {\n\
    \            \"A\"\n        } else if grade_part < 3.3 {\n            \"A-\"\n\
    \        } else if grade_part < 3.0 {\n            \"B+\"\n        } else if grade_part\
    \ < 2.7 {\n            \"B\"\n        } else if grade_part < 2.3 {\n         \
    \   \"B-\"\n        } else if grade_part < 2.0 {\n            \"C+\"\n       \
    \ } else if grade_part < 1.7 {\n            \"C\"\n        } else if grade_part\
    \ < 1.3 {\n            \"C-\"\n        } else if grade_part < 1.0 {\n        \
    \    \"D+\"\n        } else if grade_part < 0.7 {\n            \"D\"\n       \
    \ } else if grade_part < 0.0 {\n            \"D-\"\n        } else {\n       \
    \     \"E\"\n        }\n        letter_grade += letter;\n        grade_sum +=\
    \ grade;\n        num_grade++;\n    }\n    let total_letter = num_grade - 1;\n\
    \    let total_grade = grade_sum;\n    if total_letter > 1 {\n        for _ in\
    \ 1..total_letter {\n            letter_grade += &\"-\";\n        }\n    }\n \
    \   if total_grade < 5.0 {\n        for _ in 0..total_grade {\n            letter_grade\
    \ += &\"-\";\n        }\n    }\n    vec![&letter_grade]\n}\n\nfn main() {\n  \
    \  let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `letter_grade`\n  --> /tmp/tmpimpgcb2h.rs:54:10\n\
    \   |\n54 |         }\n   |          ^ help: add `;` here\n55 |         letter_grade\
    \ += letter;\n   |         ------------ unexpected token\n\nerror: Rust has no\
    \ postfix increment operator\n  --> /tmp/tmpimpgcb2h.rs:57:18\n   |\n57 |    \
    \     num_grade++;\n   |                  ^^ not a valid postfix operator\n  \
    \ |\nhelp: use `+= 1` instead\n   |\n57 |         { let tmp = num_grade; num_grade\
    \ += 1; tmp };\n   |         +++++++++++          ~~~~~~~~~~~~~~~~~~~~~~~\n57\
    \ -         num_grade++;\n57 +         num_grade += 1;\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpimpgcb2h.rs:67:21\n   |\n67 |         for _\
    \ in 0..total_grade {\n   |                     ^^^^^^^^^^^ expected integer,\
    \ found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpimpgcb2h.rs:71:10\n\
    \   |\n71 |     vec![&letter_grade]\n   |          ^^^^^^^^^^^^^ expected struct\
    \ `String`, found `&String`\n   |\nhelp: consider removing the borrow\n   |\n\
    71 -     vec![&letter_grade]\n71 +     vec![letter_grade]\n   | \n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_sum = grades.iter().sum();\n    let mut\
    \ letter_grades: Vec<String> = Vec::new();\n    let mut index = grades.iter().count();\n\
    \    while index < grades.len() {\n        if grades[index] >= grades_sum {\n\
    \            letter_grades.push(format!(\"{:.2}\", grades[index] / grades_sum));\n\
    \            grades_sum += grades[index];\n        } else {\n            grades_sum\
    \ -= grades[index];\n        }\n        index += 1\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmp_emo923c.rs:40:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letters: Vec<String> = vec![];\n    for grade\
    \ in grades {\n        let grade: f64 = grade as f64;\n        let mut letter:\
    \ String;\n        if grade < 0.0 {\n            letter = String::from(\"E\");\n\
    \        } else {\n            letter = match grade {\n                0..3.0\
    \ => \"A+\",\n                4.0  => \"A\",\n                > 3.7 => \"A- \"\
    ,\n                3.7 => \"A \",\n                3.3 => \"A- \",\n         \
    \       3.0  => \"B+\",\n                2.7 => \"B \",\n                2.3 =>\
    \ \"B-\",\n                2.0  => \"C+\",\n                1.7  => \"C\",\n \
    \               1.3  => \"C-\",\n                1.0  => \"D+\",\n           \
    \     0.7  => \"D \",\n                0.0  => \"D-\",\n                _ => String::from(\"\
    ?\"),\n            };\n        }\n        letters.push(letter);\n    }\n    letters\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected pattern, found `>`\n  --> /tmp/tmpd4shozz1.rs:33:17\n \
    \  |\n33 |                 > 3.7 => \"A- \",\n   |                 ^ expected\
    \ pattern\n\nerror[E0658]: exclusive range pattern syntax is experimental\n  -->\
    \ /tmp/tmpd4shozz1.rs:31:17\n   |\n31 |                 0..3.0 => \"A+\",\n  \
    \ |                 ^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4shozz1.rs:31:17\n\
    \   |\n30 |             letter = match grade {\n   |                         \
    \   ----- this expression has type `f64`\n31 |                 0..3.0 => \"A+\"\
    ,\n   |                 ^  --- this is of type `{float}`\n   |               \
    \  |\n   |                 expected `f64`, found integer\n   |               \
    \  help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4shozz1.rs:31:27\n\
    \   |\n31 |                 0..3.0 => \"A+\",\n   |                          \
    \ ^^^^- help: try using a conversion method: `.to_string()`\n   |            \
    \               |\n   |                           expected struct `String`, found\
    \ `&str`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0658.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let (grades_min, grades_max) = grades.min().min(|a, b|\
    \ a.partial_cmp(&b).unwrap());\n    let mut grades_range = grades_max - grades_min\
    \ + 1.0;\n    let mut grades_average = grades_range / grades.len();\n    let mut\
    \ grades_average_mut = grades_average;\n    let mut grades_letter_grades = vec![];\n\
    \n    for grade in grades {\n        if grade == 0.0 {\n            break;\n \
    \       }\n\n        if grades_average_mut*grade > grades_range {\n          \
    \  grades_range += 0.0;\n            grades_average = grades_range / grades.len();\n\
    \            grades_average_mut = grades_average;\n        }\n\n        if grades_average_mut*grade\
    \ == grades_range {\n            grades_letter_grades.push(LetterGrade::average);\n\
    \        } else {\n            let letter_grade = if grades_average >= grades_min\
    \ {\n                grades_average_mut\n            } else {\n              \
    \  grades_average_mut*(-grades_min / grades_average)\n            };\n       \
    \     grades_letter_grades.push(LetterGrade::from_value(letter_grade));\n    \
    \    }\n    }\n\n    grades_letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `LetterGrade`\n\
    \  --> /tmp/tmpcdurdl9m.rs:41:39\n   |\n41 |             grades_letter_grades.push(LetterGrade::average);\n\
    \   |                                       ^^^^^^^^^^^ use of undeclared type\
    \ `LetterGrade`\n\nerror[E0433]: failed to resolve: use of undeclared type `LetterGrade`\n\
    \  --> /tmp/tmpcdurdl9m.rs:48:39\n   |\n48 |             grades_letter_grades.push(LetterGrade::from_value(letter_grade));\n\
    \   |                                       ^^^^^^^^^^^ use of undeclared type\
    \ `LetterGrade`\n\nerror[E0599]: the method `min` exists for struct `Vec<f64>`,\
    \ but its trait bounds were not satisfied\n   --> /tmp/tmpcdurdl9m.rs:23:43\n\
    \    |\n23  |       let (grades_min, grades_max) = grades.min().min(|a, b| a.partial_cmp(&b).unwrap());\n\
    \    |                                             ^^^ method cannot be called\
    \ on `Vec<f64>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `f64: Ord`\n            which\
    \ is required by `Vec<f64>: Ord`\n            `Vec<f64>: Ord`\n            which\
    \ is required by `&Vec<f64>: Ord`\n            `Vec<f64>: Ord`\n            which\
    \ is required by `&mut Vec<f64>: Ord`\n            `Vec<f64>: Iterator`\n    \
    \        which is required by `&mut Vec<f64>: Iterator`\n            `f64: Ord`\n\
    \            which is required by `[f64]: Ord`\n            `[f64]: Ord`\n   \
    \         which is required by `&[f64]: Ord`\n            `[f64]: Ord`\n     \
    \       which is required by `&mut [f64]: Ord`\n            `[f64]: Iterator`\n\
    \            which is required by `&mut [f64]: Iterator`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut output = Vec::new();\n    let mut min_grade =\
    \ grades[0];\n    let mut max_grade = grades[0];\n\n    for grade in grades {\n\
    \        if grade < min_grade {\n            min_grade = grade;\n        }\n \
    \       if grade > max_grade {\n            max_grade = grade;\n        }\n  \
    \  }\n\n    for grade in grades {\n        output.push(\n            match grade\
    \ {\n                0.0 <= grade && grade <= 2.0 => \"A+\".to_string(),\n   \
    \             2.0 <= grade && grade <= 3.0 => \"A\".to_string(),\n           \
    \     3.0 <= grade && grade <= 3.7 => \"A-\".to_string(),\n                4.0\
    \ <= grade && grade <= 4.4 => \"B+\".to_string(),\n                4.5 <= grade\
    \ && grade <= 4.7 => \"B\".to_string(),\n                4.8 <= grade && grade\
    \ <= 4.9 => \"B-\".to_string(),\n                5.0 <= grade && grade <= 5.4\
    \ => \"C+\".to_string(),\n                5.5 <= grade && grade <= 5.7 => \"C\"\
    .to_string(),\n                5.8 <= grade && grade <= 5.9 => \"C-\".to_string(),\n\
    \                6.0 <= grade && grade <= 6.4 => \"D+\".to_string(),\n       \
    \         6.5 <= grade && grade <= 6.7 => \"D\".to_string(),\n               \
    \ 6.8 <= grade && grade <= 6.9 => \"D-\".to_string(),\n                7.0 <=\
    \ grade && grade <= 7.4 => \"F\".to_string(),\n                _ => \"\",\n  \
    \          },\n        );\n    }\n\n    match max_grade {\n        1.0 => output.push(\"\
    D-\".to_string()),\n        2.0 => output.push(\"C+\".to_string()),\n        3.0\
    \ => output.push(\"C\".to_string()),\n        4.0 => output.push(\"B+\".to_string()),\n\
    \        5.0 => output.push(\"B\".to_string()),\n        6.0 => output.push(\"\
    B-\".to_string()),\n        _ => output.push(\"A+\".to_string()),\n    }\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `...`, `..=`, `..`, `=>`, `if`, or `|`, found `<=`\n\
    \  --> /tmp/tmp7yc2c5c5.rs:39:21\n   |\n39 |                 0.0 <= grade && grade\
    \ <= 2.0 => \"A+\".to_string(),\n   |                     ^^ expected one of `...`,\
    \ `..=`, `..`, `=>`, `if`, or `|`\n\nwarning: unreachable call\n  --> /tmp/tmp7yc2c5c5.rs:37:16\n\
    \   |\n37 |           output.push(\n   |                  ^^^^ unreachable call\n\
    38 | /             match grade {\n39 | |                 0.0 <= grade && grade\
    \ <= 2.0 => \"A+\".to_string(),\n40 | |                 2.0 <= grade && grade\
    \ <= 3.0 => \"A\".to_string(),\n41 | |                 3.0 <= grade && grade <=\
    \ 3.7 => \"A-\".to_string(),\n...  |\n52 | |                 _ => \"\",\n53 |\
    \ |             },\n   | |_____________- any code following this expression is\
    \ unreachable\n   |\n   = note: `#[warn(unreachable_code)]` on by default\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp7yc2c5c5.rs:58:16\n   |\n22 | fn\
    \ numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |            \
    \                                    ----------- expected `Vec<String>` because\
    \ of return type\n...\n58 |         1.0 => output.push(\"D-\".to_string()),\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found\
    \ `()`\n   |\n   = note: expected struct `Vec<String>`\n           found unit\
    \ type `()`\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grade = Vec::new();\n    for grade in grades.iter()\
    \ {\n        let mut letter_grade_counter = 1;\n        for mut letter_grade_temp\
    \ in letter_grade.iter() {\n            if grade > letter_grade_temp {\n     \
    \           letter_grade_counter = letter_grade_counter + 1;\n            }\n\
    \        }\n        letter_grade.push(format!(\"{}\", letter_grade_counter));\n\
    \    }\n    return letter_grade;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9r3wmhbn.rs:31:27\n   |\n\
    31 |         letter_grade.push(format!(\"{}\", letter_grade_counter));\n   | \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found struct `String`\n   |\n   = note: this error originates in the macro `format`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9r3wmhbn.rs:33:12\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \     ----------- expected `Vec<String>` because of return type\n...\n33 |   \
    \  return letter_grade;\n   |            ^^^^^^^^^^^^ expected struct `String`,\
    \ found `f64`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<f64>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades\n        .iter()\n        .enumerate()\n      \
    \  .map(|(i, grade)| {\n            let (prev, next) = grade - 0.5;\n        \
    \    let letter_grade = if next == 0.0 && prev == 0.0 { \"E\" } else { format!(\"\
    {}+\", next) };\n            format!(\"{}\", letter_grade)\n        })\n     \
    \   .collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz49gn5mh.rs:27:17\n   |\n\
    27 |             let (prev, next) = grade - 0.5;\n   |                 ^^^^^^^^^^^^\
    \   ----------- this expression has type `f64`\n   |                 |\n   | \
    \                expected `f64`, found tuple\n   |\n   = note: expected type `f64`\n\
    \             found tuple `(_, _)`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_sorted = grades.clone();\n    grades_sorted.sort_unstable_by_key(|a|\
    \ a.partial_cmp(&a.last()));\n    let mut grades_sorted_index = grades_sorted.iter().rev().map(|a|\
    \ a.index()).collect::<Vec<usize>>();\n    let grades_sorted_index_reversed =\
    \ grades_sorted_index.reverse();\n\n    let mut letter_grades = Vec::new();\n\n\
    \    for (grade_index, grade) in grades_sorted_index.iter().zip(grades_sorted)\
    \ {\n        let grade_percentage = grade_index / grades_sorted_index_reversed.len();\n\
    \        let grade_letter_grade = match grade_percentage {\n            0 => \"\
    E\",\n            1 => \"D\",\n            2 => \"D+\",\n            3 => \"D-\"\
    ,\n            4 => \"C\",\n            5 => \"C-\",\n            6 => \"B\",\n\
    \            7 => \"B-\",\n            8 => \"A\",\n            9 => \"A+\",\n\
    \            _ => \"A- \",\n        };\n        letter_grades.push(grade_letter_grade\
    \ + &grade);\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `&f64` is not an iterator\n  --> /tmp/tmpvwolirkr.rs:24:61\n\
    \   |\n24 |     grades_sorted.sort_unstable_by_key(|a| a.partial_cmp(&a.last()));\n\
    \   |                                                             ^^^^ `&f64`\
    \ is not an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `&f64: Iterator`\n           which is required by `&mut &f64: Iterator`\n\
    \           `f64: Iterator`\n           which is required by `&mut f64: Iterator`\n\
    \nerror[E0599]: no method named `index` found for reference `&f64` in the current\
    \ scope\n  --> /tmp/tmpvwolirkr.rs:25:72\n   |\n25 |     let mut grades_sorted_index\
    \ = grades_sorted.iter().rev().map(|a| a.index()).collect::<Vec<usize>>();\n \
    \  |                                                                        ^^^^^\
    \ method not found in `&f64`\n\nerror[E0599]: no method named `len` found for\
    \ unit type `()` in the current scope\n  --> /tmp/tmpvwolirkr.rs:31:75\n   |\n\
    31 |         let grade_percentage = grade_index / grades_sorted_index_reversed.len();\n\
    \   |                                                                        \
    \   ^^^ method not found in `()`\n\nerror[E0369]: cannot add `&f64` to `&str`\n\
    \  --> /tmp/tmpvwolirkr.rs:45:47\n   |\n45 |         letter_grades.push(grade_letter_grade\
    \ + &grade);\n   |                            ------------------ ^ ------ &f64\n\
    \   |                            |\n   |                            &str\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0369, E0599.\nFor more information about an error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    // Your code here\n    return vec![\n        \"A+\",\n\
    \        \"A\",\n        \"A- \",\n        \"B+\",\n        \"B\",\n        \"\
    B-\",\n        \"C+\",\n        \"C\",\n        \"C-\",\n        \"D+ \",\n  \
    \      \"D\",\n        \"D-\",\n        \"E\",\n    ];\n}\n\nfn main() {\n   \
    \ let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4rksk0kp.rs:25:9\n   |\n\
    25 |         \"A+\",\n   |         ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |         |\n   |         expected struct `String`, found\
    \ `&str`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n\n    let mut current_grade:\
    \ f64 = grades[0];\n\n    for grade in grades.iter().rev() {\n        let current_letter_grade\
    \ = match grade {\n            4.0 => \"+\".to_string(),\n            3.7 => \"\
    A\".to_string(),\n            3.3 => \"A-\".to_string(),\n            3.0 => \"\
    B+\".to_string(),\n            2.7 => \"B\".to_string(),\n            2.3 => \"\
    B-\".to_string(),\n            2.0 => \"C+\".to_string(),\n            1.7 =>\
    \ \"C\".to_string(),\n            1.3 => \"C-\".to_string(),\n            1.0\
    \ => \"D+\".to_string(),\n            0.7 => \"D\".to_string(),\n            _\
    \ => \"\".to_string(),\n        };\n\n        if current_grade < 3.0 {\n     \
    \       current_grade += 1.0;\n        }\n\n        letter_grades.push(current_letter_grade\
    \ + &current_grade);\n    }\n\n    if current_grade < 3.0 {\n        letter_grades.push(\"\
    \".to_string());\n    }\n\n    letter_grades.reverse();\n\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpch4vilk3.rs:47:51\n   |\n\
    47 |         letter_grades.push(current_letter_grade + &current_grade);\n   |\
    \                                                   ^^^^^^^^^^^^^^ expected `str`,\
    \ found `f64`\n   |\n   = note: expected reference `&str`\n              found\
    \ reference `&f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grade = vec![\"E\"];\n    let mut min_gpa\
    \ = grades.iter().min();\n    let mut max_gpa = grades.iter().max();\n    let\
    \ mut total_gpa = grades.iter().sum();\n    for i in 0..grades.len() {\n     \
    \   if total_gpa >= 0.0 && grades[i] <= max_gpa {\n            letter_grade.push(i\
    \ + 1 + \"A+\");\n            total_gpa -= grades[i];\n        } else {\n    \
    \        if total_gpa >= min_gpa && grades[i] >= min_gpa {\n                letter_grade.push(i\
    \ + 1 + \"A\");\n                total_gpa -= grades[i];\n            } else if\
    \ total_gpa >= min_gpa && grades[i] <= max_gpa {\n                letter_grade.push(i\
    \ + 1 + \"A-\");\n                total_gpa -= grades[i];\n            } else\
    \ if total_gpa >= min_gpa && grades[i] >= max_gpa {\n                letter_grade.push(i\
    \ + 1 + \"B+\");\n                total_gpa -= grades[i];\n            } else\
    \ if total_gpa >= min_gpa && grades[i] < max_gpa {\n                letter_grade.push(i\
    \ + 1 + \"B\");\n                total_gpa -= grades[i];\n            } else if\
    \ total_gpa >= min_gpa && grades[i] <= max_gpa {\n                letter_grade.push(i\
    \ + 1 + \"B-\");\n                total_gpa -= grades[i];\n            } else\
    \ if total_gpa >= min_gpa && grades[i] >= max_gpa {\n                letter_grade.push(i\
    \ + 1 + \"C+\");\n                total_gpa -= grades[i];\n            } else\
    \ if total_gpa >= min_gpa && grades[i] < max_gpa {\n                letter_grade.push(i\
    \ + 1 + \"C\");\n                total_gpa -= grades[i];\n            } else if\
    \ total_gpa >= min_gpa && grades[i] >= max_gpa {\n                letter_grade.push(i\
    \ + 1 + \"C-\");\n                total_gpa -= grades[i];\n            } else\
    \ if total_gpa >= min_gpa && grades[i] <= max_gpa {\n                letter_grade.push(i\
    \ + 1 + \"D+\");\n                total_gpa -= grades[i];\n            } else\
    \ if total_gpa >= min_gpa && grades[i] < max_gpa {\n                letter_grade.push(i\
    \ + 1 + \"D\");\n                total_gpa -= grades[i];\n            } else if\
    \ total_gpa >= min_gpa && grades[i] <= max_gpa {\n                letter_grade.push(i\
    \ + 1 + \"D-\");\n                total_\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmppkf2jvfl.rs:75:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n27 |     for i in 0..grades.len() {\n   |                              -\
    \ unclosed delimiter\n...\n31 |         } else {\n   |                - unclosed\
    \ delimiter\n...\n62 |             } else if total_gpa >= min_gpa && grades[i]\
    \ <= max_gpa {\n   |                                                         \
    \           - this delimiter might not be properly closed...\n...\n65 | }\n  \
    \ | - ...as it matches this but it has different indentation\n...\n75 | }\n  \
    \ |   ^\n\nerror[E0425]: cannot find value `total_` in this scope\n  --> /tmp/tmppkf2jvfl.rs:64:17\n\
    \   |\n64 |                 total_\n   |                 ^^^^^^ not found in this\
    \ scope\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    -->\
    \ /tmp/tmppkf2jvfl.rs:24:37\n     |\n24   |     let mut min_gpa = grades.iter().min();\n\
    \     |                                     ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmppkf2jvfl.rs:25:37\n\
    \     |\n25   |     let mut max_gpa = grades.iter().max();\n     |           \
    \                          ^^^ the trait `Ord` is not implemented for `f64`\n\
    \     |\n     = help: the following other types implement trait `Ord`:\n     \
    \          i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grade = vec![];\n    let gpa: Vec<f64>\
    \ = grades.iter().cloned().collect();\n    for &g in &gpa {\n        if g > 3.0\
    \ {\n            letter_grade.push(\"B+\");\n        } else if g > 2.7 {\n   \
    \         letter_grade.push(\"B\");\n        } else if g > 2.3 {\n           \
    \ letter_grade.push(\"B-\");\n        } else if g > 1.7 { \n            letter_grade.push(\"\
    C\");\n        } else if g > 1.3 {\n            letter_grade.push(\"C-\");\n \
    \       } else if g > 0.7 {\n            letter_grade.push(\"D\");\n        }\
    \ else if g > 0.1 {\n            letter_grade.push(\"D-\");\n        } else if\
    \ g > 0.0 { \n            letter_grade.push(\"E\");\n        }\n    }\n    letter_grade\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2glc8ypn.rs:44:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n44 |     letter_grade\n   |     ^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades\
    \ {\n        if grade < 3.0 {\n            letter_grades.push(String::from(\"\
    B+\".to_string()));\n        } else if grade < 3.7 {\n            letter_grades.push(String::from(\"\
    B\".to_string()));\n        } else if grade < 4.0 {\n            letter_grades.push(String::from(\"\
    C\".to_string()));\n        } else if grade < 4.7 {\n            letter_grades.push(String::from(\"\
    C+\".to_string()));\n        } else if grade < 5.0 {\n            letter_grades.push(String::from(\"\
    D\".to_string()));\n        } else if grade < 5.7 {\n            letter_grades.push(String::from(\"\
    D+\".to_string()));\n        } else if grade < 6.0 {\n            letter_grades.push(String::from(\"\
    D-\".to_string()));\n        } else if grade < 6.7 {\n            letter_grades.push(String::from(\"\
    E\".to_string()));\n        } else {\n            letter_grades.push(String::from(\"\
    F\".to_string()));\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n  \
    \  let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"C+\", \"B\", \"B+\", \"B+\", \"B\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmp91_bs7oj.rs:50:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    if grades.len() < 2 {\n        return vec![];\n    }\n\
    \    let mut numerical_grade: Vec<String> = vec![];\n    let mut total_gpa: f64\
    \ = grades[0] + grades[1];\n    for i in 2..grades.len() {\n        total_gpa\
    \ += grades[i] - grades[i - 1];\n        numerical_grade.push((if total_gpa >=\
    \ 0.5 { \"A+\" } else { \"A-\" })\n            + (if total_gpa >= 0.3 { \"B+\"\
    \ } else { \"B-\" })\n            + (if total_gpa >= 0.1 { \"C+\" } else { \"\
    C-\" })\n            + (if total_gpa >= 0.07 { \"D+\" } else { \"D-\" })\n   \
    \         + (if total_gpa >= 0.03 { \"E+\" } else { \"E-\" }));\n        total_gpa\
    \ = grades[i] - grades[i - 1];\n    }\n    numerical_grade.push((if total_gpa\
    \ >= 0.5 { \"A+\" } else { \"A-\" })\n        + (if total_gpa >= 0.3 { \"B+\"\
    \ } else { \"B-\" })\n        + (if total_gpa >= 0.1 { \"C+\" } else { \"C-\"\
    \ })\n        + (if total_gpa >= 0.07 { \"D+\" } else { \"D-\" })\n        + (if\
    \ total_gpa >= 0.03 { \"E+\" } else { \"E-\" }));\n    numerical_grade\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `&str` to `&str`\n  --> /tmp/tmpul9wary1.rs:31:13\n\
    \   |\n30 |         numerical_grade.push((if total_gpa >= 0.5 { \"A+\" } else\
    \ { \"A-\" })\n   |                              --------------------------------------------\
    \ &str\n31 |             + (if total_gpa >= 0.3 { \"B+\" } else { \"B-\" })\n\
    \   |             ^ -------------------------------------------- &str\n   |  \
    \           |\n   |             `+` cannot be used to concatenate two `&str` strings\n\
    \   |\n   = note: string concatenation requires an owned `String` on the left\n\
    help: create an owned `String` from a string reference\n   |\n30 |         numerical_grade.push((if\
    \ total_gpa >= 0.5 { \"A+\" } else { \"A-\" }).to_owned()\n   |              \
    \                                                            +++++++++++\n\nerror[E0369]:\
    \ cannot add `&str` to `&str`\n  --> /tmp/tmpul9wary1.rs:38:9\n   |\n37 |    \
    \ numerical_grade.push((if total_gpa >= 0.5 { \"A+\" } else { \"A-\" })\n   |\
    \                          -------------------------------------------- &str\n\
    38 |         + (if total_gpa >= 0.3 { \"B+\" } else { \"B-\" })\n   |        \
    \ ^ -------------------------------------------- &str\n   |         |\n   |  \
    \       `+` cannot be used to concatenate two `&str` strings\n   |\n   = note:\
    \ string concatenation requires an owned `String` on the left\nhelp: create an\
    \ owned `String` from a string reference\n   |\n37 |     numerical_grade.push((if\
    \ total_gpa >= 0.5 { \"A+\" } else { \"A-\" }).to_owned()\n   |              \
    \                                                        +++++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let gpa_sum = grades.iter().fold(0.0, |acc, x| acc + x);\n\
    \    let gpa_average = if gpa_sum > 0.0 {gpa_sum / grades.len() as f64} else {0.0};\n\
    \    let letter_grades = grades.iter()\n        .map(|x| {\n            let gpa_difference\
    \ = x - gpa_average;\n            let gpa_percent = if gpa_difference > 0.0 {(gpa_average\
    \ - x) / (gpa_average as f64).sqrt()} else {0.0};\n            match gpa_percent\
    \ {\n                |-7.0 => format!(\"{}\", String::from(\"C\")),\n        \
    \        -6 => format!(\"{}\", String::from(\"B\")),\n                -5 => format!(\"\
    {}\", String::from(\"A-\")),\n                -4 => format!(\"{}\", String::from(\"\
    A-\")),\n                -3 => format!(\"{}\", String::from(\"A-\")),\n      \
    \          -2 => format!(\"{}\", String::from(\"A-\")),\n                -1 =>\
    \ format!(\"{}\", String::from(\"A\")),\n                0 => format!(\"{}\",\
    \ String::from(\"A\")),\n                1 => format!(\"{}\", String::from(\"\
    A+\")),\n                2 => format!(\"{}\", String::from(\"A+\")),\n       \
    \         3 => format!(\"{}\", String::from(\"A+\")),\n                4 => format!(\"\
    {}\", String::from(\"A-\")),\n                5 => format!(\"{}\", String::from(\"\
    A-\")),\n                6 => format!(\"{}\", String::from(\"A-\")),\n       \
    \         7 => format!(\"{}\", String::from(\"A-\")),\n                8 => format!(\"\
    {}\", String::from(\"A-\")),\n                9 => format!(\"{}\", String::from(\"\
    B+\")),\n                10 => format!(\"{}\", String::from(\"B+\")),\n      \
    \          11 => format!(\"{}\", String::from(\"B+\")),\n                12 =>\
    \ format!(\"{}\", String::from(\"B-\")),\n                13 => format!(\"{}\"\
    , String::from(\"B-\")),\n                14 => format!(\"{}\", String::from(\"\
    B-\")),\n                15 => format!(\"{}\", String::from(\"B-\")),\n      \
    \          16 => format!(\"{}\", String::from(\"B-\")),\n                17 =>\
    \ format!(\"{}\", String::from(\"B-\")),\n                18 => format!(\"{}\"\
    , String::from(\"B-\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmp4lu0fkqw.rs:65:83\n\
    \   |\n65 |       assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"\
    ), String::from(\"D-\")]);\n   |  ___________________________________________________________________________________^\n\
    66 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n\n    // Sorts\
    \ the array\n    grades_copy.sort();\n\n    let mut letter_grades = Vec::new();\n\
    \n    // Loop through all grades and check\n    for grade in grades_copy {\n \
    \       let mut i = 0;\n        // Loop through the letters and check if there\
    \ are any grades left\n        for letter in \"ABCDEFGHI\".chars() {\n       \
    \     if grade < i {\n                letter_grades.push('D-'[i - grade]);\n \
    \           } else if grade < i + 1 {\n                letter_grades.push('C'[i\
    \ - grade - 1]);\n            } else if grade < i + 2 {\n                letter_grades.push('B'[i\
    \ - grade - 2]);\n            } else if grade < i + 3 {\n                letter_grades.push('A'[i\
    \ - grade - 3]);\n            } else if grade < i + 4 {\n                letter_grades.push('A+'[i\
    \ - grade - 4]);\n            } else {\n                letter_grades.push('E'[i\
    \ - grade]);\n            }\n            i += 1;\n        }\n    }\n\n    // Returns\
    \ the grades sorted\n    letter_grades\n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpgtt_wlm6.rs:36:39\n\
    \   |\n36 |                 letter_grades.push('D-'[i - grade]);\n   |       \
    \                                ^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let grades_without_zeros = grades.iter().filter(|x| x\
    \ > 0).collect();\n    let grades_plus_zeros = grades.iter().filter(|x| x > 0.0).collect();\n\
    \    let grades_minus_zeros = grades.iter().filter(|x| x < 0.0).collect();\n \
    \   let grades_plus_ones = grades.iter().filter(|x| x >= 1.0).collect();\n   \
    \ let grades_minus_ones = grades.iter().filter(|x| x <= -1.0).collect();\n   \
    \ let grades_plus_twos = grades.iter().filter(|x| x >= 2.0 && x <= 3.0).collect();\n\
    \    let grades_minus_twos = grades.iter().filter(|x| x <= -2.0 && x >= -3.0).collect();\n\
    \    let grades_plus_threes = grades.iter().filter(|x| x >= 3.0 && x <= 4.0).collect();\n\
    \    let grades_minus_threes = grades.iter().filter(|x| x <= -3.0 && x >= -4.0).collect();\n\
    \    let grades_plus_fours = grades.iter().filter(|x| x >= 4.0 && x <= 5.0).collect();\n\
    \    let grades_minus_fours = grades.iter().filter(|x| x <= -4.0 && x >= -5.0).collect();\n\
    \    let grades_plus_fives = grades.iter().filter(|x| x >= 5.0 && x <= 6.0).collect();\n\
    \    let grades_minus_fives = grades.iter().filter(|x| x <= -5.0 && x >= -6.0).collect();\n\
    \    let grades_plus_sixes = grades.iter().filter(|x| x >= 6.0 && x <= 7.0).collect();\n\
    \    let grades_minus_sixes = grades.iter().filter(|x| x <= -6.0 && x >= -7.0).collect();\n\
    \    let grades_plus_sevnes = grades.iter().filter(|x| x >= 7.0 && x <= 8.0).collect();\n\
    \    let grades_minus_sevnes = grades.iter().filter(|x| x <= -7.0 && x >= -8.0).collect();\n\
    \    let grades_plus_nines = grades.iter().filter(|x| x >= 8.0 && x <= 9.0).collect();\n\
    \    let grades_minus_nines = grades.iter().filter(|x| x <= -8.0 && x >= -9.0).collect();\n\
    \    let grades_plus_tens = grades.iter().filter(|x| x >= 9.0 && x <= 10.0).collect();\n\
    \    let grades_minus_tens = grades.iter().filter(|x| x <= -9.0 && x >= -10.0).collect();\n\
    \    let grades_plus_elevens = grades.iter().filter(|x| x >= 10.\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmpzj0vqbq9.rs:45:1\n   |\n45 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmpzj0vqbq9.rs:44:51\n   |\n22 | fn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n   |                                                     \
    \       - closing delimiter possibly meant for this\n...\n44 |     let grades_plus_elevens\
    \ = grades.iter().filter(|x| x >= 10.\n   |                                  \
    \                 ^ unclosed delimiter\n45 | }\n   | ^ mismatched closing delimiter\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzj0vqbq9.rs:23:61\n   |\n23 |\
    \     let grades_without_zeros = grades.iter().filter(|x| x > 0).collect();\n\
    \   |                                                             ^ expected `&&f64`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzj0vqbq9.rs:24:58\n\
    \   |\n24 |     let grades_plus_zeros = grades.iter().filter(|x| x > 0.0).collect();\n\
    \   |                                                          ^^^ expected `&&f64`,\
    \ found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzj0vqbq9.rs:25:59\n\
    \   |\n25 |     let grades_minus_zeros = grades.iter().filter(|x| x < 0.0).collect();\n\
    \   |                                                           ^^^ expected `&&f64`,\
    \ found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzj0vqbq9.rs:26:58\n\
    \   |\n26 |     let grades_plus_ones = grades.iter().filter(|x| x >= 1.0).collect();\n\
    \   |                                                          ^^^ expected `&&f64`,\
    \ found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzj0vqbq9.rs:27:59\n\
    \   |\n27 |     let grades_minus_ones = grades.iter().filter(|x| x <= -1.0).collect();\n\
    \   |                                                           ^^^^ expected\
    \ `&&f64`, found floating-point number\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpzj0vqbq9.rs:28:58\n   |\n28 |     let grades_plus_twos = grades.iter().filter(|x|\
    \ x >= 2.0 && "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grade_index = 0;\n    let mut grades_sum = 0.0;\n    let mut letter_grades\
    \ = Vec::new();\n    while grade_index < grades_copy.len() {\n        let gpa\
    \ = grades_copy[grade_index];\n        if gpa > 0.0 {\n            grades_sum\
    \ += gpa;\n        }\n        // Grade by GPA\n        if grades_sum > 4.0 {\n\
    \            letter_grades.push(\n                String::from(\n            \
    \        match grade_index % 5 {\n                        0 => \"A+\".to_string(),\n\
    \                        1 => \"A\".to_string(),\n                        2 =>\
    \ \"A\".to_string(),\n                        3 => \"A\".to_string(),\n      \
    \                  4 => \"A\".to_string(),\n                        5 => \"A\"\
    .to_string(),\n                        _ => \"A\".to_string(),\n             \
    \       },\n                )\n            );\n            grades_sum -= 4.0;\n\
    \            grade_index += 1;\n        } else {\n            letter_grades.push(\n\
    \                String::from(\n                    match grade_index % 5 {\n\
    \                        0 => \"B+\".to_string(),\n                        1 =>\
    \ \"B\".to_string(),\n                        2 => \"B\".to_string(),\n      \
    \                  3 => \"B\".to_string(),\n                        4 => \"B\"\
    .to_string(),\n                        5 => \"B\".to_string(),\n             \
    \           _ => \"B\".to_string(),\n                    },\n                )\n\
    \            );\n            grades_sum -= 3.7;\n            grade_index += 1;\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp23lyu44p.rs:24:17\n\
    \     |\n24   |     grades_copy.sort_unstable();\n     |                 ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n     |\n     = help: the following\
    \ other types implement trait `Ord`:\n               i128\n               i16\n\
    \               i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    if grades.len() == 0 {\n        return vec![];\n    }\n\
    \    \n    let mut grades_sorted = grades.sort_unstable();\n    let mut letter_grades:\
    \ Vec<String> = vec![];\n    \n    grades_sorted.reverse();\n    \n    let mut\
    \ previous_grade: f64 = grades_sorted[0];\n    for i in 1..grades_sorted.len()\
    \ {\n        let grade = grades_sorted[i];\n        if grade < previous_grade\
    \ {\n            let letter = grade_to_letter(grade);\n            letter_grades.push(letter);\n\
    \        }\n        \n        previous_grade = grade;\n    }\n    \n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `grade_to_letter` in this scope\n  -->\
    \ /tmp/tmptf7dgibn.rs:36:26\n   |\n36 |             let letter = grade_to_letter(grade);\n\
    \   |                          ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmptf7dgibn.rs:27:36\n\
    \     |\n27   |     let mut grades_sorted = grades.sort_unstable();\n     |  \
    \                                  ^^^^^^^^^^^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\nnote: required by a bound in `core::slice::<impl\
    \ [T]>::sort_unstable`\n\nerror[E0599]: no method named `reverse` found for unit\
    \ type `()` in the current scope\n  --> /tmp/tmptf7dgibn.rs:30:19\n   |\n30 |\
    \     grades_sorted.reverse();\n   |                   ^^^^^^^ method not found\
    \ in `()`\n\nerror[E0608]: cannot index into a value of type `()`\n  --> /tmp/tmptf7dgibn.rs:32:35\n\
    \   |\n32 |     let mut previous_grade: f64 = grades_sorted[0];\n   |        \
    \                           ^^^^^^^^^^^^^^^^ help: to access tuple elements, use:\
    \ `grades_sorted.0`\n\nerror[E0599]: no method named `len` found for unit type\
    \ `()` in the current scope\n  --> /tmp/tmptf7dgibn.rs:33:31\n   |\n33 |     for\
    \ i in 1..grades_sorted.len() {\n   |                               ^^^ method\
    \ not found in `()`\n\nerror[E0608]: cannot index into a value of type `()`\n\
    \  --> /tmp/tmptf7dgibn.rs:34:21\n   |\n34 |         let grade = grades_sorted[i];\n\
    \   |                     ^^^^^^^^^^^^^^^^\n   |\n   = help: to access tuple elements,\
    \ use tuple indexing syntax (e.g., `tuple.0`)\n\nerror: aborting due to 6 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0425, E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let grade = grades[0];\n    let grades_count = grades.len();\n\
    \    let mut letter_grades: Vec<String> = vec![\"\".to_string();];\n    let mut\
    \ max_grade: f64 = grade - 1.0;\n    let mut min_grade: f64 = grade + 1.0;\n \
    \   // Find the maximum and minimum grade in the list \n    for i in 1..grades_count\
    \ {\n        let grade_1 = grades[i];\n        if max_grade > grade_1 {\n    \
    \        max_grade = grade_1;\n        }\n        if min_grade < grade_1 {\n \
    \           min_grade = grade_1;\n        }\n    }\n    for i in 0..grades_count\
    \ {\n        let grade_1 = grades[i];\n        let grade_2 = grades[i + 1];\n\
    \        // If the grade is outside the range of two grades then use the middle\
    \ one.\n        if grade_1 < min_grade || grade_2 < min_grade {\n            letter_grades.push(\"\
    \");\n        }\n        // If the grade is between max and min grade then use\
    \ the max grade.\n        else if grade_1 > max_grade && grade_2 > max_grade {\n\
    \            letter_grades.push(max_grade.to_string());\n        }\n        //\
    \ If both grades are the same then use middle grade\n        else if grade_1 ==\
    \ grade_2 {\n            letter_grades.push(\n                ((grade_1 + grade_2)\
    \ / 2.0).to_string(),\n            );\n        }\n        // Use max and min grade\
    \ if the grades are outside those ranges\n        else {\n            letter_grades.push(\n\
    \                (max_grade + min_grade) / 2.0,\n            );\n        }\n \
    \   }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: unexpected end of macro invocation\n  --> /tmp/tmpivutvakc.rs:25:62\n\
    \   |\n25 |     let mut letter_grades: Vec<String> = vec![\"\".to_string();];\n\
    \   |                                                              ^ missing tokens\
    \ in macro arguments\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpivutvakc.rs:43:32\n\
    \   |\n43 |             letter_grades.push(\"\");\n   |                      \
    \          ^^- help: try using a conversion method: `.to_string()`\n   |     \
    \                           |\n   |                                expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpivutvakc.rs:58:17\n\
    \   |\n58 |                 (max_grade + min_grade) / 2.0,\n   |             \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `f64`\n   |\n\
    help: try using a conversion method\n   |\n58 |                 ((max_grade +\
    \ min_grade) / 2.0).to_string(),\n   |                 +                     \
    \        +++++++++++++\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades\n        .iter()\n        .enumerate()\n      \
    \  .filter_map(|(i, grade)| {\n            let grade_div = grade / 4.0\n     \
    \       Some((grade - grade_div).abs() > 1.25 ? Some('C') : Some(grade_div))\n\
    \        })\n        .collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `Some`\n  --> /tmp/tmpo71ecvqs.rs:27:40\n  \
    \ |\n27 |             let grade_div = grade / 4.0\n   |                      \
    \                  ^ help: add `;` here\n28 |             Some((grade - grade_div).abs()\
    \ > 1.25 ? Some('C') : Some(grade_div))\n   |             ---- unexpected token\n\
    \nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found `Some`\n  -->\
    \ /tmp/tmpo71ecvqs.rs:28:53\n   |\n28 |             Some((grade - grade_div).abs()\
    \ > 1.25 ? Some('C') : Some(grade_div))\n   |                                \
    \                    -^^^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\
    \   |                                                    |\n   |             \
    \                                       help: missing `,`\n\nerror[E0573]: expected\
    \ type, found variant `Some`\n  --> /tmp/tmpo71ecvqs.rs:28:65\n   |\n28 |    \
    \         Some((grade - grade_div).abs() > 1.25 ? Some('C') : Some(grade_div))\n\
    \   |                                                                 ^^^^^^^^^^^^^^^\n\
    \   |                                                                 |\n   |\
    \                                                                 expecting a\
    \ type here because of type ascription\n   |                                 \
    \                                help: try using the variant's enum: `std::option::Option`\n\
    \nerror[E0573]: expected type, found local variable `grade_div`\n  --> /tmp/tmpo71ecvqs.rs:28:70\n\
    \   |\n28 |             Some((grade - grade_div).abs() > 1.25 ? Some('C') : Some(grade_div))\n\
    \   |                                                                      ^^^^^^^^^\
    \ expecting a type here because of type ascription\n\nerror[E0277]: the `?` operator\
    \ can only be applied to values that implement `Try`\n  --> /tmp/tmpo71ecvqs.rs:28:46\n\
    \   |\n28 |             Some((grade - grade_div).abs() > 1.25 ? Some('C') : Some(grade_div))\n\
    \   |                                              ^^^^^^ the `?` operator cannot\
    \ be applied to type `{float}`\n   |\n   = help: the trait `Try` is not implemented\
    \ for `{float}`\n\nerror[E0061]: this enum v"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_iter = grades.clone().into_iter();\n  \
    \  let mut letter_grades = Vec::new();\n\n    let mut first_grade: f64 = 0.0;\n\
    \    let mut first_grade_index = 0;\n    let mut second_grade: f64 = 0.0;\n  \
    \  let mut second_grade_index = 0;\n    let mut third_grade: f64 = 0.0;\n    let\
    \ mut third_grade_index = 0;\n    let mut fourth_grade: f64 = 0.0;\n    let mut\
    \ fourth_grade_index = 0;\n    let mut fifth_grade: f64 = 0.0;\n    let mut fifth_grade_index\
    \ = 0;\n    let mut sixth_grade: f64 = 0.0;\n    let mut sixth_grade_index = 0;\n\
    \n    while grades_iter.next().is_some() {\n        let grade = grades_iter.next().unwrap();\n\
    \n        if grade < 4.0 {\n            letter_grades.push(String::from(\"A+\"\
    ));\n        }\n\n        if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        }\n\n        if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        }\n\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        }\n\n        if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        }\n\n        if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        }\n\n        if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        }\n\n        if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        }\n\n        if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        }\n\n        if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        }\n\n        if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        }\n\n        if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        }\n\n        if grade == 0.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        }\n\n        if grade < 4.0 {\n            fourth_grade += grade;\n\
    \            fourth_grade_index += 1;\n        }\n\n        if grade > 3.7 {\n\
    \            fifth_grade += grade;\n            fifth_grade_index += 1;\n    \
    \    }\n\n        if grade > 3.3 {\n            sixth_grade += grade;\n      \
    \      sixth_grade_index += 1;\n        }\n\n        if gra\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp60de02_s.rs:120:3\n\
    \    |\n22  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n39  |     while grades_iter.next().is_some() {\n    |                   \
    \                     - this delimiter might not be properly closed...\n...\n\
    110 | }\n    | - ...as it matches this but it has different indentation\n...\n\
    120 | }\n    |   ^\n\nerror: expected `{`, found `}`\n   --> /tmp/tmp60de02_s.rs:110:1\n\
    \    |\n109 |         if gra\n    |         -- this `if` expression has a condition,\
    \ but no block\n110 | }\n    | ^ expected `{`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp60de02_s.rs:22:48\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|x| {\n        let mut sum = 0.0;\n\
    \        if x > 3.0 { sum += 2.0; }\n        if x > 2.7 { sum += 1.0; }\n    \
    \    if x > 2.3 { sum += 0.8; }\n        if x > 2.0 { sum += 0.6; }\n        if\
    \ x > 1.7 { sum += 0.5; }\n        if x > 1.3 { sum += 0.4; }\n        if x >\
    \ 1.0 { sum += 0.3; }\n        if x > 0.7 { sum += 0.2; }\n        if x > 0.3\
    \ { sum += 0.1; }\n        if x > 0.0 { sum += 0.0; }\n        let mut letter\
    \ = \"\";\n        if sum < 0.0 {\n            letter = \"E\";\n        } else\
    \ {\n            letter = match sum {\n                0 => \"D-\",\n        \
    \        1 => \"D\",\n                2 => \"D+\",\n                3 => \"D\"\
    ,\n                4 => \"C+\",\n                5 => \"C\",\n               \
    \ 6 => \"C-\",\n                7 => \"C\",\n                8 => \"B+\",\n  \
    \              9 => \"B\",\n                10 => \"B-\",\n                11\
    \ => \"B\",\n                12 => \"A-\",\n                13 => \"A\",\n   \
    \             14 => \"A+\",\n                _ => \"E\",\n            }\n    \
    \    }\n        letter\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc3gt5feu.rs:25:16\n   |\n\
    25 |         if x > 3.0 { sum += 2.0; }\n   |                ^^^\n   |       \
    \         |\n   |                expected `&f64`, found floating-point number\n\
    \   |                help: consider borrowing here: `&3.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpc3gt5feu.rs:26:16\n   |\n26 |         if x > 2.7 { sum\
    \ += 1.0; }\n   |                ^^^\n   |                |\n   |            \
    \    expected `&f64`, found floating-point number\n   |                help: consider\
    \ borrowing here: `&2.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc3gt5feu.rs:27:16\n\
    \   |\n27 |         if x > 2.3 { sum += 0.8; }\n   |                ^^^\n   |\
    \                |\n   |                expected `&f64`, found floating-point\
    \ number\n   |                help: consider borrowing here: `&2.3`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc3gt5feu.rs:28:16\n   |\n28 |         if x >\
    \ 2.0 { sum += 0.6; }\n   |                ^^^\n   |                |\n   |  \
    \              expected `&f64`, found floating-point number\n   |            \
    \    help: consider borrowing here: `&2.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpc3gt5feu.rs:29:16\n   |\n29 |         if x > 1.7 { sum += 0.5;\
    \ }\n   |                ^^^\n   |                |\n   |                expected\
    \ `&f64`, found floating-point number\n   |                help: consider borrowing\
    \ here: `&1.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc3gt5feu.rs:30:16\n\
    \   |\n30 |         if x > 1.3 { sum += 0.4; }\n   |                ^^^\n   |\
    \                |\n   |                expected `&f64`, found floating-point\
    \ number\n   |                help: consider borrowing here: `&1.3`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc3gt5feu.rs:31:16\n   |\n31 |         if x >\
    \ 1.0 { sum += 0.3; }\n   |                ^^^\n   |                |\n   |  \
    \              expected `&f64`, found floating-point number\n   |            \
    \    help: consider borrowing here: `&1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpc3gt5feu.rs:32:16\n   |\n32 |         if x > 0.7 { sum += 0"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades: Vec<String> = Vec::new();\n   \
    \ let gpa: Vec<f64> = grades.iter().cloned().collect();\n\n    for value in grade\
    \ {\n        if value < gpa.iter().min() {\n            letter_grades.push(\"\"\
    );\n        } else if value < gpa.iter().max() {\n            let letter_grade:\
    \ String = match value {\n                0...gpa.iter().min() => &\"D-\".to_string(),\n\
    \                gpa.iter().max()..gpa.iter().min() => &\"D+\".to_string(),\n\
    \                gpa.iter().min()..gpa.iter().max() => &\"C\".to_string(),\n \
    \               gpa.iter().max()..gpa.iter().max() => &\"C+\".to_string(),\n \
    \               gpa.iter().min()..gpa.iter().max() => &\"B\".to_string(),\n  \
    \              gpa.iter().max()..gpa.iter().max() => &\"B+\".to_string(),\n  \
    \              gpa.iter().min()..gpa.iter().max() => &\"A\".to_string(),\n   \
    \             gpa.iter().max()..gpa.iter().max() => &\"A+\".to_string(),\n   \
    \             gpa.iter().min()..gpa.iter().max() => &\"A\".to_string(),\n    \
    \            _ => \"\".to_string(),\n            };\n            letter_grades.push(letter_grade);\n\
    \        } else {\n            let letter_grade: String = match value {\n    \
    \            0...gpa.iter().min() => &\"E\".to_string(),\n                gpa.iter().max()..gpa.iter().min()\
    \ => &\"D\".to_string(),\n                gpa.iter().min()..gpa.iter().max() =>\
    \ &\"D+\".to_string(),\n                gpa.iter().min()..gpa.iter().max() =>\
    \ &\"C\".to_string(),\n                gpa.iter().max()..gpa.iter().max() => &\"\
    C+\".to_string(),\n                gpa.iter().min()..gpa.iter().max() => &\"B\"\
    .to_string(),\n                gpa.iter().max()..gpa.iter().max() => &\"B+\".to_string(),\n\
    \                gpa.iter().min()..gpa.iter().max() => &\"A\".to_string(),\n \
    \               gpa.iter().max()..gpa.iter().max() => &\"A+\".to_string(),\n \
    \               gpa.iter().min()..gpa.iter().max() => &\"A\".to_string(),\n  \
    \              _ => \"\".to_string(),\n            };\n            letter_grades.push(letter_grade);\n\
    \        }\n    }\n    return \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `::`, `=>`, `if`, or `|`, found `.`\n  --> /tmp/tmpzoj5lxbj.rs:31:24\n\
    \   |\n31 |                 0...gpa.iter().min() => &\"D-\".to_string(),\n   |\
    \                        ^ expected one of `::`, `=>`, `if`, or `|`\n\nerror:\
    \ expected one of `::`, `=>`, `if`, or `|`, found `.`\n  --> /tmp/tmpzoj5lxbj.rs:45:24\n\
    \   |\n45 |                 0...gpa.iter().min() => &\"E\".to_string(),\n   |\
    \                        ^ expected one of `::`, `=>`, `if`, or `|`\n\nerror[E0425]:\
    \ cannot find value `grade` in this scope\n  --> /tmp/tmpzoj5lxbj.rs:26:18\n \
    \  |\n26 |     for value in grade {\n   |                  ^^^^^ help: a local\
    \ variable with a similar name exists: `grades`\n\nerror[E0277]: the trait bound\
    \ `f64: Ord` is not satisfied\n    --> /tmp/tmpzoj5lxbj.rs:27:31\n     |\n27 \
    \  |         if value < gpa.iter().min() {\n     |                           \
    \    ^^^ the trait `Ord` is not implemented for `f64`\n     |\n     = help: the\
    \ following other types implement trait `Ord`:\n               i128\n        \
    \       i16\n               i32\n               i64\n               i8\n     \
    \          isize\n               u128\n               u16\n             and 4\
    \ others\n     = note: required because of the requirements on the impl of `Ord`\
    \ for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzoj5lxbj.rs:28:32\n   |\n28 |             letter_grades.push(\"\
    \");\n   |                                ^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                                |\n   |                \
    \                expected struct `String`, found `&str`\n\nerror[E0277]: the trait\
    \ bound `f64: Ord` is not satisfied\n    --> /tmp/tmpzoj5lxbj.rs:29:38\n     |\n\
    29   |         } else if value < gpa.iter().max() {\n     |                  \
    \                    ^^^ the trait `Ord` is not implemented for `f64`\n     |\n\
    \     = help: the following other types implement trait `Ord`:\n             \
    \  i128\n               i16\n               i32\n               i64\n        \
    \       i8\n               isize\n            "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = Vec::new();\n    grades.iter().for_each(|x|\
    \ {\n        if x <= 3.5 {\n            grades_vec.push(\"A+\".to_string());\n\
    \        } else if x <= 3.0 {\n            grades_vec.push(\"A\".to_string());\n\
    \        } else if x <= 2.7 {\n            grades_vec.push(\"B+\".to_string());\n\
    \        } else if x <= 2.3 {\n            grades_vec.push(\"B\".to_string());\n\
    \        } else if x <= 2.0 {\n            grades_vec.push(\"B-\".to_string());\n\
    \        } else if x <= 1.7 {\n            grades_vec.push(\"C+\".to_string());\n\
    \        } else if x <= 1.3 {\n            grades_vec.push(\"C\".to_string());\n\
    \        } else if x <= 1.0 {\n            grades_vec.push(\"C-\".to_string());\n\
    \        } else if x <= 0.7 {\n            grades_vec.push(\"D+\".to_string());\n\
    \        } else if x <= 0.3 {\n            grades_vec.push(\"D\".to_string());\n\
    \        } else if x <= 0.0 {\n            grades_vec.push(\"D-\".to_string());\n\
    \        } else {\n            grades_vec.push(\"E\".to_string());\n        }\n\
    \    });\n    return grades_vec;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpthjd1na6.rs:25:17\n   |\n\
    25 |         if x <= 3.5 {\n   |                 ^^^\n   |                 |\n\
    \   |                 expected `&f64`, found floating-point number\n   |     \
    \            help: consider borrowing here: `&3.5`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpthjd1na6.rs:27:24\n   |\n27 |         } else if x <= 3.0\
    \ {\n   |                        ^^^\n   |                        |\n   |    \
    \                    expected `&f64`, found floating-point number\n   |      \
    \                  help: consider borrowing here: `&3.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpthjd1na6.rs:29:24\n   |\n29 |         } else if x <= 2.7\
    \ {\n   |                        ^^^\n   |                        |\n   |    \
    \                    expected `&f64`, found floating-point number\n   |      \
    \                  help: consider borrowing here: `&2.7`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpthjd1na6.rs:31:24\n   |\n31 |         } else if x <= 2.3\
    \ {\n   |                        ^^^\n   |                        |\n   |    \
    \                    expected `&f64`, found floating-point number\n   |      \
    \                  help: consider borrowing here: `&2.3`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpthjd1na6.rs:33:24\n   |\n33 |         } else if x <= 2.0\
    \ {\n   |                        ^^^\n   |                        |\n   |    \
    \                    expected `&f64`, found floating-point number\n   |      \
    \                  help: consider borrowing here: `&2.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpthjd1na6.rs:35:24\n   |\n35 |         } else if x <= 1.7\
    \ {\n   |                        ^^^\n   |                        |\n   |    \
    \                    expected `&f64`, found floating-point number\n   |      \
    \                  help: consider borrowing here: `&1.7`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpthjd1na6.rs:37:24\n   |\n37 |         } else if x <= 1.3\
    \ {\n   |                        ^^^\n   |                        |\n   |    \
    \                    expected `&f64`, found floating-point number\n   |      \
    \            "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades: Vec<String> = vec![];\n\n    let mut prev_gpa = -1.0_f64;\n\
    \    let mut gpa = -1.0_f64;\n    let mut letter_grade = \"A+\"; // default letter\
    \ grade\n    let mut count = 0;\n\n    // iterate through grades\n    for grade\
    \ in grades_copy {\n        // if current gpa = 0\n        if gpa <= 0.0_f64 {\n\
    \            prev_gpa = grade;\n            gpa = 0.0;\n        } else {\n   \
    \         // else if current gpa > 0 but < current gpa\n            if gpa > 0.0_f64\
    \ && gpa < prev_gpa {\n                // check if current gpa is more than previous\
    \ gpa\n                if gpa > prev_gpa {\n                    // if gpa > previous\
    \ gpa, add '+'\n                    letter_grade = \"A+\".to_string();\n     \
    \           } else {\n                    // else add '-' since gpa < previous\
    \ gpa\n                    letter_grade = \"A-\".to_string();\n              \
    \  }\n            } else {\n                // else add '-' since gpa < previous\
    \ gpa\n                letter_grade = \"B-\".to_string();\n            }\n   \
    \     }\n\n        // add grade\n        letter_grades.push(letter_grade);\n \
    \       // reset letter grade\n        letter_grade = \"A+\".to_string();\n  \
    \      // increment count\n        count += 1;\n\n        // update gpa and previous\
    \ gpa\n        gpa += grade;\n        prev_gpa = grade;\n    }\n\n    // if grades\
    \ array was empty\n    if count == 0 {\n        // add letter grade\n        letter_grades.push(letter_grade);\n\
    \    }\n\n    // return list of letter grades\n    letter_grades\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmps1jmi_65.rs:24:17\n\
    \    |\n24  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps1jmi_65.rs:44:36\n\
    \   |\n29 |     let mut letter_grade = \"A+\"; // default letter grade\n   | \
    \                           ---- expected due to this value\n...\n44 |       \
    \              letter_grade = \"A+\".to_string();\n   |                      \
    \              ^^^^^^^^^^^^^^^^\n   |                                    |\n \
    \  |                                    expected `&str`, found struct `String`\n\
    \   |                                    help: consider borrowing here: `&\"A+\"\
    .to_string()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps1jmi_65.rs:47:36\n\
    \   |\n29 |     let mut letter_grade = \"A+\"; // default letter grade\n   | \
    \                           ---- expected due to this value\n...\n47 |       \
    \              letter_grade = \"A-\".to_string();\n   |                      \
    \              ^^^^^^^^^^^^^^^^\n   |                                    |\n \
    \  |                                    expected `&str`, found struct `String`\n\
    \   |                                    help: consider borrowing here: `&\"A-\"\
    .to_string()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps1jmi_65.rs:51:32\n\
    \   |\n29 |     let mut letter_grade = \"A+\"; // default letter grade\n   | \
    \                           ---- expected due to this value\n...\n51 |       \
    \          letter_grade = \"B-\".to_string();\n   |                          \
    \      ^^^^^^^^^^^^^^^^\n   |                                |\n   |         \
    \                       expected `&str`, found struct `String`\n   |         \
    \                       help: consider borrowing here: `&\"B-\".to_string("
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_str = Vec::new();\n    grades.iter().for_each(|grade|\
    \ {\n        grades_str.push(\n            match grade {\n                4.0\
    \  => \"A+\".to_string(),\n                3.7  => \"A\".to_string(),\n      \
    \          3.3  => \"A\".to_string(),\n                3.0  => \"B+\".to_string(),\n\
    \                2.7  => \"B\".to_string(),\n                2.3  => \"B\".to_string(),\n\
    \                2.0  => \"C+\".to_string(),\n                1.7  => \"C\".to_string(),\n\
    \                1.3  => \"C\".to_string(),\n                1.0  => \"D+\".to_string(),\n\
    \                0.7  => \"D\".to_string(),\n                0.0  => \"D-\".to_string(),\n\
    \                0.0  => \"E\".to_string(),\n                _ => \"\".to_string(),\n\
    \            }\n        );\n    });\n    grades_str\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmpx0up4qqh.rs:49:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut total_gpa = grades.sum();\n    let mut letter_grades\
    \ = vec![\"\"; grade_limit];\n    for i in 0..grade_limit {\n        let mut grade_point\
    \ = grades.len() as f64 * i / grade_limit;\n        while grade_point < total_gpa{\n\
    \            grade_point += grades.len() as f64;\n        }\n        letter_grades[i]\
    \ = grade_point.to_string();\n    }\n    letter_grades\n}\n\nfn main() {\n   \
    \ let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `grade_limit` in this scope\n  --> /tmp/tmpm2xzsj37.rs:24:38\n\
    \   |\n24 |     let mut letter_grades = vec![\"\"; grade_limit];\n   |       \
    \                               ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `grade_limit` in this scope\n  --> /tmp/tmpm2xzsj37.rs:25:17\n\
    \   |\n25 |     for i in 0..grade_limit {\n   |                 ^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `grade_limit` in this\
    \ scope\n  --> /tmp/tmpm2xzsj37.rs:26:57\n   |\n26 |         let mut grade_point\
    \ = grades.len() as f64 * i / grade_limit;\n   |                             \
    \                            ^^^^^^^^^^^ not found in this scope\n\nerror[E0599]:\
    \ `Vec<f64>` is not an iterator\n   --> /tmp/tmpm2xzsj37.rs:23:32\n    |\n23 \
    \ |       let mut total_gpa = grades.sum();\n    |                           \
    \       ^^^ `Vec<f64>` is not an iterator\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `Vec<f64>: Iterator`\n            which\
    \ is required by `&mut Vec<f64>: Iterator`\n            `[f64]: Iterator`\n  \
    \          which is required by `&mut [f64]: Iterator`\n\nerror[E0277]: cannot\
    \ multiply `f64` by `{integer}`\n  --> /tmp/tmpm2xzsj37.rs:26:51\n   |\n26 | \
    \        let mut grade_point = grades.len() as f64 * i / grade_limit;\n   |  \
    \                                                 ^ no implementation for `f64\
    \ * {integer}`\n   |\n   = help: the trait `Mul<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm2xzsj37.rs:32:5\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                ----------- expected"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_map = HashMap::new();\n\n    // add all\
    \ the grades in `grades` to a map where the key is the grade and the value \n\
    \    // is the numerical grade\n    for grade in grades.iter() {\n        grades_map.insert(grade,\
    \ grade - f64::from(grade));\n    }\n\n    // convert the map to a vector\n  \
    \  let mut grades_vector = Vec::new();\n    grades_map.iter().for_each(|(_, value)|\
    \ {\n        grades_vector.push(value);\n    });\n\n    // calculate the final\
    \ grade for each student\n    let mut result = Vec::new();\n    for grade in grades_vector\
    \ {\n        let mut final_grade = String::new();\n\n        // the grade is negative\
    \ if the grade is below 3.0; \n        // the grade is negative if the grade is\
    \ between 2.9 and 3.0\n        let negative = grade < f64::from(3.0);\n\n    \
    \    // the grade is greater than 2.0 and the grade is less or equal to 3.0\n\
    \        let negative_between = grade > f64::from(2.9)\n                     \
    \        && grade <= f64::from(3.0);\n\n        // if the grade is between 2.9\
    \ and 3.0 and the grade is greater than 2.0, \n        // then we output B+ if\
    \ the grade is less than 3.0 then we output B- \n        // otherwise, output\
    \ the letter grade\n        if negative_between {\n            final_grade.push_str(\"\
    B+\");\n        } else if negative {\n            final_grade.push_str(\"B-\"\
    );\n        } else {\n            final_grade.push_str(\"B\");\n        }\n\n\
    \        result.push(final_grade);\n    }\n\n    result\n}\n\nfn main() {\n  \
    \  let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpewys98jv.rs:23:26\n   |\n23 |     let mut grades_map = HashMap::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0277]:\
    \ the trait bound `f64: From<&f64>` is not satisfied\n  --> /tmp/tmpewys98jv.rs:28:52\n\
    \   |\n28 |         grades_map.insert(grade, grade - f64::from(grade));\n   |\
    \                                          --------- ^^^^^ expected an implementor\
    \ of trait `From<&f64>`\n   |                                          |\n   |\
    \                                          required by a bound introduced by this\
    \ call\n   |\nhelp: consider borrowing here\n   |\n28 |         grades_map.insert(grade,\
    \ grade - f64::from(&grade));\n   |                                          \
    \          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades;\n    for i in 0..grades_copy.len()\
    \ {\n        let value = grades_copy[i];\n        let gpa = grades_copy[..i].iter().sum();\n\
    \        let letter;\n        if gpa < 4.0 {\n            letter = \"E\";\n  \
    \      } else if gpa < 3.7 {\n            letter = \"A\";\n        } else if gpa\
    \ < 3.3 {\n            letter = \"A-\";\n        } else if gpa < 3.0 {\n     \
    \       letter = \"B+\";\n        } else if gpa < 2.7 {\n            letter =\
    \ \"B\";\n        } else if gpa < 2.3 {\n            letter = \"B-\";\n      \
    \  } else if gpa < 2.0 {\n            letter = \"C+\";\n        } else if gpa\
    \ < 1.7 {\n            letter = \"C\";\n        } else if gpa < 1.3 {\n      \
    \      letter = \"C-\";\n        } else if gpa < 1.0 {\n            letter = \"\
    D+\";\n        } else if gpa < 0.7 {\n            letter = \"D\";\n        } else\
    \ {\n            letter = \"D-\";\n        }\n        grades_copy.swap(i, grades_copy.len()\
    \ - 1, &letter);\n    }\n    grades_copy\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n\
    \   --> /tmp/tmphtmn4x2d.rs:53:21\n    |\n53  |         grades_copy.swap(i, grades_copy.len()\
    \ - 1, &letter);\n    |                     ^^^^ -  ---------------------  -------\
    \ supplied 3 arguments\n    |                     |\n    |                   \
    \  expected 2 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphtmn4x2d.rs:55:5\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \     ----------- expected `Vec<String>` because of return type\n...\n55 |   \
    \  grades_copy\n   |     ^^^^^^^^^^^ expected struct `String`, found `f64`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<f64>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    \n    // Initialization\n    let mut grades_str = \"\"\
    .to_vec();\n    let mut letter_grade = \"\".to_vec();\n    let mut gps = vec![4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0];\n    \n    // Loop through the\
    \ grades and calculate the letter grade\n    for grade in grades {\n        if\
    \ gps.iter().all(|item| grade >= item) {\n            // Grade is greater than\
    \ all the gpas in the list\n            letter_grade += \"A+\";\n            gps.retain(|item|\
    \ grade >= item);\n        } else {\n            // Grade is not greater than\
    \ all the gpas in the list\n            letter_grade += \"A-\";\n            gps.retain(|item|\
    \ grade <= item);\n        }\n    }\n\n    grades_str.append(&letter_grade);\n\
    \    grades_str\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_vec` found for reference `&'static str`\
    \ in the current scope\n  --> /tmp/tmppwbxjpvv.rs:25:29\n   |\n25 |     let mut\
    \ grades_str = \"\".to_vec();\n   |                             ^^^^^^ method\
    \ not found in `&'static str`\n\nerror[E0599]: no method named `to_vec` found\
    \ for reference `&'static str` in the current scope\n  --> /tmp/tmppwbxjpvv.rs:26:31\n\
    \   |\n26 |     let mut letter_grade = \"\".to_vec();\n   |                  \
    \             ^^^^^^ method not found in `&'static str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppwbxjpvv.rs:31:43\n   |\n31 |         if gps.iter().all(|item|\
    \ grade >= item) {\n   |                                           ^^^^ expected\
    \ `f64`, found `&{float}`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    31 |         if gps.iter().all(|item| grade >= *item) {\n   |                \
    \                           +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppwbxjpvv.rs:34:40\n\
    \   |\n34 |             gps.retain(|item| grade >= item);\n   |              \
    \                          ^^^^ expected `f64`, found `&{float}`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n34 |             gps.retain(|item|\
    \ grade >= *item);\n   |                                        +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppwbxjpvv.rs:38:40\n   |\n38 |             gps.retain(|item|\
    \ grade <= item);\n   |                                        ^^^^ expected `f64`,\
    \ found `&{float}`\n   |\nhelp: consider dereferencing the borrow\n   |\n38 |\
    \             gps.retain(|item| grade <= *item);\n   |                       \
    \                 +\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades\n    .iter()\n    .enumerate()\n    .map(|(idx,\
    \ grade)| {\n        match grade {\n            0.0 => match idx {\n         \
    \       0 => \"E\",\n                _ => \"D-\",\n            },\n          \
    \  _ => match idx {\n                0 => \"D+\",\n                _ => \"B-\"\
    ,\n            },\n            1 => match idx {\n                0 => \"C+\",\n\
    \                _ => \"B-\",\n            },\n            2 => match idx {\n\
    \                0 => \"B+\",\n                _ => \"B-\",\n            },\n\
    \            3 => match idx {\n                0 => \"B-\",\n                _\
    \ => \"B-\",\n            },\n            4 => match idx {\n                0\
    \ => \"B-\",\n                _ => \"B\",\n            },\n            5 => match\
    \ idx {\n                0 => \"B\",\n                _ => \"B-\",\n         \
    \   },\n            6 => match idx {\n                0 => \"B\",\n          \
    \      _ => \"B\",\n            },\n            7 => match idx {\n           \
    \     0 => \"B\",\n                _ => \"B+\",\n            },\n            8\
    \ => match idx {\n                0 => \"B+\",\n                _ => \"B\",\n\
    \            },\n            9 => match idx {\n                0 => \"B\",\n \
    \               _ => \"B+\",\n            },\n            _ => \"A+\",\n     \
    \   }\n    })\n    .collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg7uwv0if.rs:36:13\n   |\n\
    27 |         match grade {\n   |               ----- this expression has type\
    \ `&f64`\n...\n36 |             1 => match idx {\n   |             ^\n   |   \
    \          |\n   |             expected `f64`, found integer\n   |           \
    \  help: use a float literal: `1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg7uwv0if.rs:40:13\n\
    \   |\n27 |         match grade {\n   |               ----- this expression has\
    \ type `&f64`\n...\n40 |             2 => match idx {\n   |             ^\n  \
    \ |             |\n   |             expected `f64`, found integer\n   |      \
    \       help: use a float literal: `2.0`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpg7uwv0if.rs:44:13\n   |\n27 |         match grade {\n   |      \
    \         ----- this expression has type `&f64`\n...\n44 |             3 => match\
    \ idx {\n   |             ^\n   |             |\n   |             expected `f64`,\
    \ found integer\n   |             help: use a float literal: `3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpg7uwv0if.rs:48:13\n   |\n27 |         match\
    \ grade {\n   |               ----- this expression has type `&f64`\n...\n48 |\
    \             4 => match idx {\n   |             ^\n   |             |\n   | \
    \            expected `f64`, found integer\n   |             help: use a float\
    \ literal: `4.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg7uwv0if.rs:52:13\n\
    \   |\n27 |         match grade {\n   |               ----- this expression has\
    \ type `&f64`\n...\n52 |             5 => match idx {\n   |             ^\n  \
    \ |             |\n   |             expected `f64`, found integer\n   |      \
    \       help: use a float literal: `5.0`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpg7uwv0if.rs:56:13\n   |\n27 |         match grade {\n   |      \
    \         ----- this expression has type `&f64`\n...\n56 |             6 => match\
    \ idx {\n   |             ^\n   |             |\n   |             expected `f64`,\
    \ found integer\n   |             help: use a float literal: `6.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpg7uwv0if.rs:60:13\n   |\n27 |         match\
    \ grade"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let grades_min = grades.min();\n    let grades_max = grades.max();\n\
    \    let mut letter_grades: Vec<String> = vec![];\n    if grades_min < 4.0 {\n\
    \        letter_grades.push(\"A+\");\n    } else if grades_min < 3.7 {\n     \
    \   letter_grades.push(\"A\");\n    } else if grades_min < 3.3 {\n        letter_grades.push(\"\
    A-\");\n    } else if grades_min < 3.0 {\n        letter_grades.push(\"B+\");\n\
    \    } else if grades_min < 2.7 {\n        letter_grades.push(\"B\");\n    } else\
    \ if grades_min < 2.3 {\n        letter_grades.push(\"B-\");\n    } else if grades_min\
    \ < 2.0 {\n        letter_grades.push(\"C+\");\n    } else if grades_min < 1.7\
    \ {\n        letter_grades.push(\"C\");\n    } else if grades_min < 1.3 {\n  \
    \      letter_grades.push(\"C-\");\n    } else if grades_min < 1.0 {\n       \
    \ letter_grades.push(\"D+\");\n    } else if grades_min < 0.7 {\n        letter_grades.push(\"\
    D\");\n    } else if grades_min < 0.0 {\n        letter_grades.push(\"D-\");\n\
    \    } else {\n        letter_grades.push(\"E\");\n    }\n    for i in (0..grades.len()\
    \ - 1).rev() {\n        let grade = grades[i];\n        if grade < 4.0 {\n   \
    \         letter_grades.push(\"A+\");\n        } else if grade < 3.7 {\n     \
    \       letter_grades.push(\"A\");\n        } else if grade < 3.3 {\n        \
    \    letter_grades.push(\"A-\");\n        } else if grade < 3.0 {\n          \
    \  letter_grades.push(\"B+\");\n        } else if grade < 2.7 {\n            letter_grades.push(\"\
    B\");\n        } else if grade < 2.3 {\n            letter_grades.push(\"B-\"\
    );\n        } else if grade < 2.0 {\n            letter_grades.push(\"C+\");\n\
    \        } else if grade < 1.7 {\n            letter_grades.push(\"C\");\n   \
    \     } else if grade < 1.3 {\n            letter_grades.push(\"C-\");\n     \
    \   } else if grade < 1.0 {\n            letter_grades.push(\"D+\");\n       \
    \ } else if grade < 0.7 {\n            letter_grades.push(\"D\");\n        } else\
    \ if grade < 0.0 {\n            letter_grades.push(\"D-\");\n        } else {\n\
    \            letter_grades.push(\"E\");\n        }\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `min` exists for struct `Vec<f64>`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmpbv5ginq0.rs:23:29\n    |\n23  |  \
    \     let grades_min = grades.min();\n    |                               ^^^\
    \ method cannot be called on `Vec<f64>` due to unsatisfied trait bounds\n    |\n\
    \    = note: the following trait bounds were not satisfied:\n            `f64:\
    \ Ord`\n            which is required by `Vec<f64>: Ord`\n            `Vec<f64>:\
    \ Ord`\n            which is required by `&Vec<f64>: Ord`\n            `Vec<f64>:\
    \ Ord`\n            which is required by `&mut Vec<f64>: Ord`\n            `Vec<f64>:\
    \ Iterator`\n            which is required by `&mut Vec<f64>: Iterator`\n    \
    \        `f64: Ord`\n            which is required by `[f64]: Ord`\n         \
    \   `[f64]: Ord`\n            which is required by `&[f64]: Ord`\n           \
    \ `[f64]: Ord`\n            which is required by `&mut [f64]: Ord`\n         \
    \   `[f64]: Iterator`\n            which is required by `&mut [f64]: Iterator`\n\
    \nerror[E0599]: the method `max` exists for struct `Vec<f64>`, but its trait bounds\
    \ were not satisfied\n   --> /tmp/tmpbv5ginq0.rs:24:29\n    |\n24  |       let\
    \ grades_max = grades.max();\n    |                               ^^^ method cannot\
    \ be called on `Vec<f64>` due to unsatisfied trait bounds\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `f64: Ord`\n   \
    \         which is required by `Vec<f64>: Ord`\n            `Vec<f64>: Ord`\n\
    \            which is required by `&Vec<f64>: Ord`\n            `Vec<f64>: Ord`\n\
    \            which is required by `&mut Vec<f64>: Ord`\n            `Vec<f64>:\
    \ Iterator`\n            which is required by `&mut Vec<f64>: Iterator`\n    \
    \        `f64: Ord`\n            which is required by `[f64]: Ord`\n         \
    \   `[f64]: Ord`\n            which is required by `&[f64]: Ord`\n           \
    \ `[f64]: Ord`\n            which is required by `&mut [f64]: Ord`\n         \
    \   `[f64]: Iterator`\n            which is required by `&mut [f64]: Iterator`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbv5ginq0.rs:27:28\n   |\n27 |\
    \    "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|grade| {\n        let gpa = grade as\
    \ f64;\n        match gpa {\n            4.0 => \"+\",\n            3.7 => \"\
    +\",\n            3.3 => \"+\",\n            3.0 => \"-\",\n            2.7 =>\
    \ \"-\",\n            2.3 => \"-\",\n            2.0 => \"-\",\n            1.7\
    \ => \"C\",\n            1.3 => \"C\",\n            1.0 => \"D\",\n          \
    \  0.7 => \"D\",\n            0.0 => \"E\",\n            _ => \"\".to_string(),\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpopr_1lq5.rs:38:18\n\
    \   |\n25 | /         match gpa {\n26 | |             4.0 => \"+\",\n27 | |  \
    \           3.7 => \"+\",\n28 | |             3.3 => \"+\",\n...  |\n37 | |  \
    \           0.0 => \"E\",\n   | |                    --- this and all prior arms\
    \ are found to be of type `&str`\n38 | |             _ => \"\".to_string(),\n\
    \   | |                  ^^^^^^^^^^^^^^\n   | |                  |\n   | |   \
    \               expected `&str`, found struct `String`\n   | |               \
    \   help: consider borrowing here: `&\"\".to_string()`\n39 | |         }\n   |\
    \ |_________- `match` arms have incompatible types\n\nerror[E0606]: casting `&f64`\
    \ as `f64` is invalid\n  --> /tmp/tmpopr_1lq5.rs:24:19\n   |\n24 |         let\
    \ gpa = grade as f64;\n   |                   -----^^^^^^^\n   |             \
    \      |\n   |                   cannot cast `&f64` as `f64`\n   |           \
    \        help: dereference the expression: `*grade`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0308, E0606.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    let max_grade_point\
    \ = grades.iter().max();\n    for grade in grades {\n        if grade <= max_grade_point\
    \ {\n            letter_grades.push(format!(\"{}+\", grade));\n        } else\
    \ {\n            letter_grades.push(format!(\"{}\", grade));\n        }\n    }\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpbuo4m_bv.rs:24:41\n\
    \     |\n24   |     let max_grade_point = grades.iter().max();\n     |       \
    \                                  ^^^ the trait `Ord` is not implemented for\
    \ `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbuo4m_bv.rs:26:21\n   |\n26 |\
    \         if grade <= max_grade_point {\n   |                     ^^^^^^^^^^^^^^^\
    \ expected `f64`, found enum `Option`\n   |\n   = note: expected type `f64`\n\
    \              found enum `Option<&f64>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grade_letters = Vec::new();\n    for grade in\
    \ grades {\n        match grade {\n            0..=3 => grade_letters.push(\"\
    E\"),\n            4..=6 => grade_letters.push(\"A+\"),\n            7..=9 =>\
    \ grade_letters.push(\"A\"),\n            10..=12 => grade_letters.push(\"A-\"\
    ),\n            13..=16 => grade_letters.push(\"B+\"),\n            17..=19 =>\
    \ grade_letters.push(\"B\"),\n            20..=24 => grade_letters.push(\"B-\"\
    ),\n            25..=29 => grade_letters.push(\"C+\"),\n            30..=34 =>\
    \ grade_letters.push(\"C\"),\n            35..=39 => grade_letters.push(\"C-\"\
    ),\n            40..=44 => grade_letters.push(\"D+\"),\n            45..=49 =>\
    \ grade_letters.push(\"D\"),\n            50..=54 => grade_letters.push(\"D-\"\
    ),\n            _ => grade_letters.push(\"F\"),\n        }\n    }\n    grade_letters\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_on51gvc.rs:26:13\n   |\n\
    25 |         match grade {\n   |               ----- this expression has type\
    \ `f64`\n26 |             0..=3 => grade_letters.push(\"E\"),\n   |          \
    \   ^   - this is of type `{integer}`\n   |             |\n   |             expected\
    \ `f64`, found integer\n   |             help: use a float literal: `0.0`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp_on51gvc.rs:26:17\n   |\n25 |  \
    \       match grade {\n   |               ----- this expression has type `f64`\n\
    26 |             0..=3 => grade_letters.push(\"E\"),\n   |             -   ^\n\
    \   |             |   |\n   |             |   expected `f64`, found integer\n\
    \   |             |   help: use a float literal: `3.0`\n   |             this\
    \ is of type `{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_on51gvc.rs:27:13\n\
    \   |\n25 |         match grade {\n   |               ----- this expression has\
    \ type `f64`\n26 |             0..=3 => grade_letters.push(\"E\"),\n27 |     \
    \        4..=6 => grade_letters.push(\"A+\"),\n   |             ^   - this is\
    \ of type `{integer}`\n   |             |\n   |             expected `f64`, found\
    \ integer\n   |             help: use a float literal: `4.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_on51gvc.rs:27:17\n   |\n25 |         match\
    \ grade {\n   |               ----- this expression has type `f64`\n26 |     \
    \        0..=3 => grade_letters.push(\"E\"),\n27 |             4..=6 => grade_letters.push(\"\
    A+\"),\n   |             -   ^\n   |             |   |\n   |             |   expected\
    \ `f64`, found integer\n   |             |   help: use a float literal: `6.0`\n\
    \   |             this is of type `{integer}`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_on51gvc.rs:28:13\n   |\n25 |         match grade {\n   |     \
    \          ----- this expression has type `f64`\n...\n28 |             7..=9 =>\
    \ grade_letters.push(\"A\"),\n   |             ^   - this is of type `{integer}`\n\
    \   |             |\n   |             expected `f64`, found integer\n   |    \
    \         help: use a float literal: `7.0`\n\nerror[E0308]: mismatched types\n\
    \ "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_letters = Vec::new();\n    let gpa: f64\
    \ = grades.sum();\n    let mut grade: f64 = grades.len();\n    while grade !=\
    \ 0 {\n        if grade % 3.0 == 0 {\n            grades_letters.push('a');\n\
    \            grade /= 3.0;\n        } else if grade % 3.0 == 1.0 && grade > 1.0\
    \ {\n            grades_letters.push('a');\n            grade /= 3.0;\n      \
    \  } else if grade % 3.0 == 1.0 && grade < 1.0 {\n            grades_letters.push('b');\n\
    \            grade /= 3.0;\n        } else if grade % 3.0 == 2.0 && grade > 1.0\
    \ {\n            grades_letters.push('b');\n            grade /= 3.0;\n      \
    \  } else if grade % 3.0 == 2.0 && grade < 1.0 {\n            grades_letters.push('c');\n\
    \            grade /= 3.0;\n        } else if grade % 3.0 == 3.0 && grade > 1.0\
    \ {\n            grades_letters.push('c');\n            grade /= 3.0;\n      \
    \  } else if grade % 3.0 == 3.0 && grade < 1.0 {\n            grades_letters.push('d');\n\
    \            grade /= 3.0;\n        } else {\n            grades_letters.push('e');\n\
    \            grade /= 3.0;\n        }\n    }\n    grades_letters.push(format!(\"\
    {:?}\", gpa));\n    grades_letters\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmp9qblpxnq.rs:24:27\n\
    \    |\n24  |       let gpa: f64 = grades.sum();\n    |                      \
    \       ^^^ `Vec<f64>` is not an iterator\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `Vec<f64>: Iterator`\n            which\
    \ is required by `&mut Vec<f64>: Iterator`\n            `[f64]: Iterator`\n  \
    \          which is required by `&mut [f64]: Iterator`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9qblpxnq.rs:25:26\n   |\n25 |     let mut grade: f64 =\
    \ grades.len();\n   |                    ---   ^^^^^^^^^^^^ expected `f64`, found\
    \ `usize`\n   |                    |\n   |                    expected due to\
    \ this\n   |\nhelp: you can cast a `usize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n25 |     let\
    \ mut grade: f64 = grades.len() as f64;\n   |                                \
    \       ++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9qblpxnq.rs:26:20\n\
    \   |\n26 |     while grade != 0 {\n   |                    ^\n   |          \
    \          |\n   |                    expected `f64`, found integer\n   |    \
    \                help: use a float literal: `0.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9qblpxnq.rs:27:27\n   |\n27 |         if grade % 3.0 ==\
    \ 0 {\n   |                           ^\n   |                           |\n  \
    \ |                           expected `f64`, found integer\n   |            \
    \               help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9qblpxnq.rs:53:25\n   |\n53 |     grades_letters.push(format!(\"\
    {:?}\", gpa));\n   |                         ^^^^^^^^^^^^^^^^^^^^ expected `char`,\
    \ found struct `String`\n   |\n   = note: this error originates in the macro `format`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9qblpxnq.rs:54:5\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \     ----------- expected `Vec<String>` because of re"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    \n    if\
    \ grades.len() != 5 {\n        return grades_vec;\n    }\n    \n    // Create\
    \ a HashMap using key as GPA value and value as letter grade\n    let mut letter_grade_map:\
    \ HashMap<f64, &str> = HashMap::new();\n    letter_grade_map.insert(0.0, \"E\"\
    );\n    \n    // Create empty array to store grades\n    let mut temp_array: Vec<f64>\
    \ = vec![];\n    \n    for gpa: f64 in grades.iter() {\n        // Check if the\
    \ current GPA is smaller than the smallest GPA \n        // we have. If not then\
    \ the grade is E\n        if gpa > min(&mut temp_array.iter().min().unwrap())\
    \ {\n            letter_grade_map.insert(gpa, \"E\");\n        }\n        \n \
    \       // Check if the GPA is in the map using the get_value method and \n  \
    \      // if its value is not E then add the GPA and its value to the array\n\
    \        if !letter_grade_map.contains_key(&gpa) {\n            letter_grade_map.insert(gpa,\
    \ get_value(gpa));\n        }\n    }\n    \n    // For each GPA in the HashMap\
    \ sort the GPA from smallest to largest\n    // and print out the letter grade\
    \ associated with that GPA\n    for (key, value) in letter_grade_map.iter() {\n\
    \        temp_array.push(key);\n    }\n    temp_array.sort_unstable();\n    \n\
    \    for val in temp_array {\n        grades_vec.push(letter_grade_map.get(val).unwrap());\n\
    \    }\n    \n    return grades_vec;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `@` or `|`, found `:`\n  --> /tmp/tmpi525lo4x.rs:36:12\n\
    \   |\n36 |     for gpa: f64 in grades.iter() {\n   |            ^\n   |     \
    \       |\n   |            expected one of `@` or `|`\n   |            help: maybe\
    \ write a path separator here: `::`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared crate or module `gpa`\n  --> /tmp/tmpi525lo4x.rs:36:9\n   |\n36 |\
    \     for gpa: f64 in grades.iter() {\n   |         ^^^ use of undeclared crate\
    \ or module `gpa`\n\nerror[E0412]: cannot find type `HashMap` in this scope\n\
    \  --> /tmp/tmpi525lo4x.rs:30:31\n   |\n30 |     let mut letter_grade_map: HashMap<f64,\
    \ &str> = HashMap::new();\n   |                               ^^^^^^^ not found\
    \ in this scope\n   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n \
    \ --> /tmp/tmpi525lo4x.rs:30:52\n   |\n30 |     let mut letter_grade_map: HashMap<f64,\
    \ &str> = HashMap::new();\n   |                                              \
    \      ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0425]: cannot find\
    \ value `gpa` in this scope\n  --> /tmp/tmpi525lo4x.rs:39:12\n   |\n39 |     \
    \    if gpa > min(&mut temp_array.iter().min().unwrap()) {\n   |            ^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `min` in this\
    \ scope\n  --> /tmp/tmpi525lo4x.rs:39:18\n   |\n39 |         if gpa > min(&mut\
    \ temp_array.iter().min().unwrap()) {\n   |                  ^^^\n...\n64 | fn\
    \ main() {\n   | --------- similarly named function `main` defined here\n   |\n\
    help: a function with a similar name exists\n   |\n39 |         if gpa > main(&mut\
    \ temp_array.iter().min().unwrap()) {\n   |                  ~~~~\nhelp: consider\
    \ importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]:\
    \ cannot find value `gpa` in this scope\n  --> /tmp/tmpi525lo4x.rs:40:37\n   |\n\
    40 |             letter_grade_map.insert(gpa, \"E\");\n   |                  \
    \                   ^^^ not found in this scope\n\ner"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades: Vec<String> = Vec::new();\n   \
    \ let mut current_grade: f64 = grades.first().unwrap();\n\n    for grade in grades\
    \ {\n        if grade < current_grade {\n            letter_grades.push(format!(\"\
    {}-\", current_grade));\n            current_grade = grade;\n        }\n\n   \
    \     letter_grades.push(format!(\"{}+\", current_grade));\n        current_grade\
    \ = grade;\n    }\n\n    letter_grades.push(format!(\"{}\", current_grade));\n\
    \n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl7s52oj0.rs:24:34\n   |\n\
    24 |     let mut current_grade: f64 = grades.first().unwrap();\n   |         \
    \                   ---   ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `&f64`\n\
    \   |                            |\n   |                            expected due\
    \ to this\n   |\nhelp: consider dereferencing the borrow\n   |\n24 |     let mut\
    \ current_grade: f64 = *grades.first().unwrap();\n   |                       \
    \           +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_map = HashMap::new();\n    let mut total_grade:\
    \ f64 = 0.0;\n    let mut letter_grade: Vec<String> = Vec::new();\n\n    for grade\
    \ in grades {\n        total_grade += grade;\n        let grade = grades_map.entry(grade).or_insert(0.0);\n\
    \        grades_map.entry(grade).or_insert(grade);\n\n        if total_grade >=\
    \ 4.0 {\n            letter_grade.push(\"A+\");\n            total_grade -= 4.0;\n\
    \        } else if total_grade > 3.0 {\n            letter_grade.push(\"B+\");\n\
    \            total_grade -= 3.0;\n        } else if total_grade > 2.0 {\n    \
    \        letter_grade.push(\"C+\");\n            total_grade -= 2.0;\n       \
    \ } else if total_grade > 1.0 {\n            letter_grade.push(\"D+\");\n    \
    \        total_grade -= 1.0;\n        } else if total_grade > 0.0 {\n        \
    \    letter_grade.push(\"D-\");\n            total_grade -= 0.0;\n        } else\
    \ {\n            letter_grade.push(\"E\");\n            total_grade = 0.0;\n \
    \       }\n    }\n    return letter_grade;\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpdoh216jy.rs:23:26\n   |\n23 |     let mut grades_map = HashMap::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdoh216jy.rs:33:31\n   |\n33 |             letter_grade.push(\"\
    A+\");\n   |                               ^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                               |\n   |         \
    \                      expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdoh216jy.rs:36:31\n   |\n36 |             letter_grade.push(\"\
    B+\");\n   |                               ^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                               |\n   |         \
    \                      expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdoh216jy.rs:39:31\n   |\n39 |             letter_grade.push(\"\
    C+\");\n   |                               ^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                               |\n   |         \
    \                      expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdoh216jy.rs:42:31\n   |\n42 |             letter_grade.push(\"\
    D+\");\n   |                               ^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                               |\n   |         \
    \                      expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdoh216jy.rs:45:31\n   |\n45 |             letter_grade.push(\"\
    D-\");\n   |                               ^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                               |\n   |         \
    \                      expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdoh216jy.rs:48:31\n   |\n48 |             letter_grade.push(\"\
    E\");\n   |                               ^^^- help: try using a conver"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades\n        .iter()\n        .enumerate()\n      \
    \  .filter_map(|(i, grade)| {\n            let gpa = grade;\n            let letter\
    \ = match gpa {\n                0.0 <= gpa && gpa <= 3.0 => \"A+\",\n       \
    \         3.0 <= gpa && gpa <= 4.0 => \"A\",\n                4.0 <= gpa && gpa\
    \ <= 5.0 => \"A-\",\n                5.0 <= gpa && gpa <= 6.0 => \"B+\",\n   \
    \             6.0 <= gpa && gpa <= 7.0 => \"B\",\n                7.0 <= gpa &&\
    \ gpa <= 8.0 => \"B-\",\n                8.0 <= gpa && gpa <= 9.0 => \"C+\",\n\
    \                9.0 <= gpa && gpa <= 10.0 => \"C\",\n                10.0 <=\
    \ gpa && gpa <= 11.0 => \"C-\",\n                11.0 <= gpa && gpa <= 12.0 =>\
    \ \"D+\",\n                12.0 <= gpa && gpa <= 13.0 => \"D\",\n            \
    \    13.0 <= gpa && gpa <= 14.0 => \"D-\",\n                _ => \"E\",\n    \
    \        };\n            (i, grade as f64, letter)\n        })\n        .collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `...`, `..=`, `..`, `=>`, `if`, or `|`, found `<=`\n\
    \  --> /tmp/tmpl20mkuz6.rs:29:21\n   |\n29 |                 0.0 <= gpa && gpa\
    \ <= 3.0 => \"A+\",\n   |                     ^^ expected one of `...`, `..=`,\
    \ `..`, `=>`, `if`, or `|`\n\nwarning: unreachable expression\n  --> /tmp/tmpl20mkuz6.rs:43:13\n\
    \   |\n28 |               let letter = match gpa {\n   |  __________________________-\n\
    29 | |                 0.0 <= gpa && gpa <= 3.0 => \"A+\",\n30 | |           \
    \      3.0 <= gpa && gpa <= 4.0 => \"A\",\n31 | |                 4.0 <= gpa &&\
    \ gpa <= 5.0 => \"A-\",\n...  |\n41 | |                 _ => \"E\",\n42 | |  \
    \           };\n   | |_____________- any code following this expression is unreachable\n\
    43 |               (i, grade as f64, letter)\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ unreachable expression\n   |\n   = note: `#[warn(unreachable_code)]` on by default\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl20mkuz6.rs:43:13\n   |\n43 |\
    \             (i, grade as f64, letter)\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found tuple\n   |\n   = note: expected enum `Option<_>`\n\
    \             found tuple `(usize, f64, _)`\nhelp: try wrapping the expression\
    \ in `Some`\n   |\n43 |             Some((i, grade as f64, letter))\n   |    \
    \         +++++                         +\n\nerror[E0606]: casting `&f64` as `f64`\
    \ is invalid\n  --> /tmp/tmpl20mkuz6.rs:43:17\n   |\n43 |             (i, grade\
    \ as f64, letter)\n   |                 -----^^^^^^^\n   |                 |\n\
    \   |                 cannot cast `&f64` as `f64`\n   |                 help:\
    \ dereference the expression: `*grade`\n\nerror: aborting due to 3 previous errors;\
    \ 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0606.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut gpa = grades.iter().sum();\n\
    \n    for grade in grades.iter() {\n        if gpa >= grade {\n            letter_grades.push(&format!(\"\
    {}+\", gpa));\n            gpa -= grade;\n        } else {\n            letter_grades.push(&format!(\"\
    {}\", grade));\n        }\n    }\n    letter_grades.push(&format!(\"{}\", gpa));\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_8ajnla6.rs:35:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n35 |     letter_grades\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<&String>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    // Your code goes here\n    \n    return vec![\"\".to_string()]\
    \ + grades.iter().cloned().take(5).map(|x| {\n        match x {\n            0.0\
    \ => \"D\".to_string(),\n            0.1 => \"C-\".to_string(),\n            0.2\
    \ => \"B-\".to_string(),\n            0.3 => \"B-\".to_string(),\n           \
    \ 0.4 => \"B-\".to_string(),\n            0.5 => \"B-\".to_string(),\n       \
    \     0.6 => \"B-\".to_string(),\n            0.7 => \"B-\".to_string(),\n   \
    \         0.8 => \"B-\".to_string(),\n            0.9 => \"B-\".to_string(),\n\
    \            1.0 => \"B+\".to_string(),\n            1.1 => \"B+\".to_string(),\n\
    \            1.2 => \"B+\".to_string(),\n            1.3 => \"B+\".to_string(),\n\
    \            1.4 => \"B+\".to_string(),\n            1.5 => \"B+\".to_string(),\n\
    \            1.6 => \"B+\".to_string(),\n            1.7 => \"B+\".to_string(),\n\
    \            1.8 => \"B+\".to_string(),\n            1.9 => \"B+\".to_string(),\n\
    \            2.0 => \"C\".to_string(),\n            2.1 => \"C\".to_string(),\n\
    \            2.2 => \"C\".to_string(),\n            2.3 => \"C\".to_string(),\n\
    \            2.4 => \"C\".to_string(),\n            2.5 => \"C\".to_string(),\n\
    \            2.6 => \"C\".to_string(),\n            2.7 => \"C\".to_string(),\n\
    \            2.8 => \"C\".to_string(),\n            2.9 => \"C\".to_string(),\n\
    \            3.0 => \"C\".to_string(),\n            3.1 => \"C\".to_string(),\n\
    \            3.2 => \"C\".to_string(),\n            3.3 => \"C\".to_string(),\n\
    \            3.4 => \"C\".to_string(),\n            3.5 => \"C\".to_string(),\n\
    \            3.6 => \"C\".to_string(),\n            3.7 => \"C\".to_string(),\n\
    \            3.8 => \"C\".to_string(),\n            3.9 => \"C\".to_string(),\n\
    \            4.0 => \"C\".to_string(),\n            4.1 => \"C\".to_string(),\n\
    \            4.2 => \"C\".to_string(),\n            4.3 => \"C\".to_string(),\n\
    \            4.4 => \"C\".to_string(),\n            4.5 => \"C\".to_string(),\n\
    \            4.6 => \"C\".to_string(),\n            4.7 => \"C\".to_string(),\n\
    \            4.8 => \"C\".to_string(),\n            4.9 => \"C\".to_string(),\n\
    \            5.0 => \"C\".to_string(),\n            5.1 => \"C\".to_string(),\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpc5cftd10.rs:89:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n25 |     return vec![\"\".to_string()] + grades.iter().cloned().take(5).map(|x|\
    \ {\n   |                                                                    \
    \ -    - unclosed delimiter\n   |                                            \
    \                         |\n   |                                            \
    \                         unclosed delimiter\n26 |         match x {\n   |   \
    \              - this delimiter might not be properly closed...\n...\n79 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n89 | }\n\
    \   |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc5cftd10.rs:26:9\n\
    \   |\n26 | /         match x {\n27 | |             0.0 => \"D\".to_string(),\n\
    28 | |             0.1 => \"C-\".to_string(),\n29 | |             0.2 => \"B-\"\
    .to_string(),\n...  |\n78 | |             5.1 => \"C\".to_string(),\n79 | | }\n\
    \   | | ^- help: consider using a semicolon here\n   | |_|\n   |   expected `()`,\
    \ found struct `String`\n\nerror[E0369]: cannot add `Map<std::iter::Take<Cloned<std::slice::Iter<'_,\
    \ f64>>>, [closure@/tmp/tmpc5cftd10.rs:25:70: 89:3]>` to `Vec<String>`\n  -->\
    \ /tmp/tmpc5cftd10.rs:25:33\n   |\n25 |       return vec![\"\".to_string()] +\
    \ grades.iter().cloned().take(5).map(|x| {\n   |  ____________--------------------_^_-\n\
    \   | |            |\n   | |            Vec<String>\n26 | |         match x {\n\
    27 | |             0.0 => \"D\".to_string(),\n28 | |             0.1 => \"C-\"\
    .to_string(),\n...  |\n88 | |     assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"\
    E\"), String::from(\"D-\")]);\n89 | | }\n   | |__- Map<std::iter::Take<Cloned<std::slice::Iter<'_,\
    \ f64>>>, [closure@/tmp/tmpc5cftd10.rs:25:70: 89:3]>\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_letters = Vec::new();\n    let mut grade_sum:\
    \ f64 = 0.0;\n    let mut lowest_grade: f64 = grades.iter().min().unwrap();\n\
    \    let mut highest_grade: f64 = grades.iter().max().unwrap();\n    let mut current_grade:\
    \ f64 = grades.iter().next().unwrap();\n    let mut current_letter: &'static str\
    \ = String::from(\"D\");\n    \n    for grade in grades.iter() {\n        grade_sum\
    \ += grade;\n        if grade_sum > highest_grade {\n            grade_sum = highest_grade;\n\
    \            highest_grade = grade;\n        }\n        if grade_sum < lowest_grade\
    \ {\n            grade_sum = lowest_grade;\n            lowest_grade = grade;\n\
    \        }\n    }\n    \n    for grade in grades.iter() {\n        if current_grade\
    \ - grade > 0.0 && current_letter != \"D\" {\n            current_letter = \"\
    D\";\n        }\n        if current_grade - grade <= 0.0 && current_letter !=\
    \ \"E\" {\n            current_letter = \"E\";\n        }\n        if current_grade\
    \ - grade > 0.0 && current_letter != \"D\" && current_letter != \"E\" {\n    \
    \        if grade - current_grade > 0.0 {\n                current_letter = String::from(\"\
    C\");\n            }\n            else if grade - current_grade <= 0.0 {\n   \
    \             current_letter = String::from(\"B\");\n            }\n         \
    \   else {\n                current_letter = String::from(\"A\");\n          \
    \  }\n        }\n        current_grade -= grade;\n        grades_letters.push(current_letter);\n\
    \    }\n    grades_letters.reverse();\n    return grades_letters;\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpst11tuv8.rs:25:47\n\
    \     |\n25   |     let mut lowest_grade: f64 = grades.iter().min().unwrap();\n\
    \     |                                               ^^^ the trait `Ord` is not\
    \ implemented for `f64`\n     |\n     = help: the following other types implement\
    \ trait `Ord`:\n               i128\n               i16\n               i32\n\
    \               i64\n               i8\n               isize\n               u128\n\
    \               u16\n             and 4 others\n     = note: required because\
    \ of the requirements on the impl of `Ord` for `&f64`\nnote: required by a bound\
    \ in `std::iter::Iterator::min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpst11tuv8.rs:25:33\n\
    \   |\n25 |     let mut lowest_grade: f64 = grades.iter().min().unwrap();\n  \
    \ |                           ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `&f64`\n   |                           |\n   |                       \
    \    expected due to this\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    25 |     let mut lowest_grade: f64 = *grades.iter().min().unwrap();\n   |    \
    \                             +\n\nerror[E0277]: the trait bound `f64: Ord` is\
    \ not satisfied\n    --> /tmp/tmpst11tuv8.rs:26:48\n     |\n26   |     let mut\
    \ highest_grade: f64 = grades.iter().max().unwrap();\n     |                 \
    \                               ^^^ the trait `Ord` is not implemented for `f64`\n\
    \     |\n     = help: the following other types implement trait `Ord`:\n     \
    \          i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpst11tuv8.rs:26:34\n   |\n26 |\
    \     let mut highest_grade: f64 = grades.iter().max().unwrap();\n   |       \
    \                     ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ `&f64`\n   |                   "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.pop();\n\
    \    let mut letter_grades = vec![];\n    let grades_len = grades.len();\n   \
    \ \n    // find the index for the max value in the given vector\n    let max_index\
    \ = get_max_index(grades_copy);\n    \n    grades_copy.sort_unstable();\n    \n\
    \    // if the max is 0, it has to be the last element\n    if max_index == grades_len\
    \ - 1 {\n        letter_grades.push(vec![\"E\"]);\n        return letter_grades;\n\
    \    }\n    \n    let current_index = 0;\n    let mut current_grade = grades_copy[current_index];\n\
    \    \n    let mut total_grade = current_grade;\n    \n    while current_index\
    \ < grades_len - 1 {\n        if current_index == max_index {\n            letter_grades.push(vec![current_grade\
    \ as char]);\n            break;\n        }\n        \n        current_grade +=\
    \ grades_copy[current_index + 1];\n        \n        total_grade += grades_copy[current_index\
    \ + 1];\n        \n        current_index += 1;\n    }\n    \n    for grade in\
    \ &mut total_grade {\n        letter_grades.push(vec![grade as char]);\n    }\n\
    \    \n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `get_max_index` in this scope\n  -->\
    \ /tmp/tmp6ivlh16a.rs:29:21\n   |\n29 |     let max_index = get_max_index(grades_copy);\n\
    \   |                     ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp6ivlh16a.rs:31:17\n\
    \     |\n31   |     grades_copy.sort_unstable();\n     |                 ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n     |\n     = help: the following\
    \ other types implement trait `Ord`:\n               i128\n               i16\n\
    \               i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6ivlh16a.rs:36:16\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \     ----------- expected `Vec<String>` because of return type\n...\n36 |   \
    \      return letter_grades;\n   |                ^^^^^^^^^^^^^ expected struct\
    \ `String`, found struct `Vec`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<Vec<&str>>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6ivlh16a.rs:46:37\n   |\n46 |             letter_grades.push(vec![current_grade\
    \ as char]);\n   |                                     ^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found `char`\n\nerror[E0277]: `f64` is not an iterator\n  --> /tmp/tmp6ivlh16a.rs:57:18\n\
    \   |\n57 |     for grade in &mut total_grade {\n   |                  ^^^^^^^^^^^^^^^^\
    \ `f64` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `f64`\n   = note: required because of the requirements on the impl of `Iterator`\
    \ for `&mut f64`\n   = note: required because of the requirements on the impl\
    \ of `IntoIterator` for `&mut f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6ivlh16a.rs:58:33\n\
    \   |\n58 |         letter_grades.push(vec![grade as char]);\n   |           \
    \                      ^^^^^^^^^^^^^ exp"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    \n    // Get the min and max of the given vector.\n  \
    \  let max_grade = grades.iter().max().unwrap();\n    let min_grade = grades.iter().min().unwrap();\n\
    \n    // If the vector's values are the same, just return an empty vector.\n \
    \   if max_grade == min_grade {\n        return vec![];\n    }\n\n    // Set the\
    \ length of the grade vector.\n    let len_grade = grades.len();\n\n    // Create\
    \ an empty string.\n    let mut letter_grades = vec![];\n\n    // Add \"E\" at\
    \ the end of the string.\n    letter_grades.push('E');\n\n    // Iterate over\
    \ each grade.\n    for grade in grades {\n\n        // Iterate over each grade\
    \ and each grade length.\n        for grade_len in 0..len_grade {\n\n        \
    \    // Check if the grade is greater than or equal to the given grade.\n    \
    \        if grade >= grade_len {\n\n                // Iterate over each grade\
    \ and add letter grade for each of the grade length.\n                for grade_num\
    \ in 0..grade_len - grade {\n                    letter_grades.push(format!(\"\
    {:2.0f}\", grade_num + grade + 1));\n                }\n\n                // Break\
    \ the loop since we have found the grade.\n                break;\n          \
    \  }\n        }\n    }\n\n    // Return the letter grades vector.\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: unknown format trait `f`\n  --> /tmp/tmpnk6g6sfj.rs:53:54\n   |\n\
    53 |                     letter_grades.push(format!(\"{:2.0f}\", grade_num + grade\
    \ + 1));\n   |                                                      ^\n   |\n\
    \   = note: the only appropriate formatting traits are:\n           - ``, which\
    \ uses the `Display` trait\n           - `?`, which uses the `Debug` trait\n \
    \          - `e`, which uses the `LowerExp` trait\n           - `E`, which uses\
    \ the `UpperExp` trait\n           - `o`, which uses the `Octal` trait\n     \
    \      - `p`, which uses the `Pointer` trait\n           - `b`, which uses the\
    \ `Binary` trait\n           - `x`, which uses the `LowerHex` trait\n        \
    \   - `X`, which uses the `UpperHex` trait\n\nerror[E0277]: the trait bound `f64:\
    \ Ord` is not satisfied\n    --> /tmp/tmpnk6g6sfj.rs:25:35\n     |\n25   |   \
    \  let max_grade = grades.iter().max().unwrap();\n     |                     \
    \              ^^^ the trait `Ord` is not implemented for `f64`\n     |\n    \
    \ = help: the following other types implement trait `Ord`:\n               i128\n\
    \               i16\n               i32\n               i64\n               i8\n\
    \               isize\n               u128\n               u16\n             and\
    \ 4 others\n     = note: required because of the requirements on the impl of `Ord`\
    \ for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpnk6g6sfj.rs:26:35\n\
    \     |\n26   |     let min_grade = grades.iter().min().unwrap();\n     |    \
    \                               ^^^ the trait `Ord` is not implemented for `f64`\n\
    \     |\n     = help: the following other types implement trait `Ord`:\n     \
    \          i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpnk6g6sfj.rs:49:2"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let grades_sum = grades.iter().sum();\n    if grades_sum\
    \ < 0.5 {\n        vec![format!(\"E\")]\n    } else if grades_sum > 1.0 {\n  \
    \      vec![format!(\"D-\")]\n    } else if grades_sum == 0.0 {\n        vec![format!(\"\
    D\")]\n    } else {\n        let mut letter_grades = vec![];\n        for grade\
    \ in grades {\n            if grade > 1.0 {\n                break;\n        \
    \    }\n            letter_grades.push(format!(\"{}+\", grade + 0.5));\n     \
    \   }\n        for grade in grades {\n            if grade < 0.0 {\n         \
    \       break;\n            }\n            letter_grades.push(format!(\"{}\",\
    \ grade - 0.5));\n        }\n        letter_grades\n    }\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpcl0h_1ms.rs:23:9\n\
    \   |\n23 |     let grades_sum = grades.iter().sum();\n   |         ^^^^^^^^^^\
    \ consider giving `grades_sum` a type\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grade = vec![];\n    for grade in grades\
    \ {\n        letter_grade.push(match grade {\n            0.0 => \"D-\",\n   \
    \         0.1 => \"D\",\n            0.2 => \"D+\",\n            0.3 => \"D+\"\
    ,\n            0.4 => \"D\",\n            0.5 => \"D-\",\n            0.6 => \"\
    D+\",\n            0.7 => \"D+\",\n            0.8 => \"D\",\n            0.9\
    \ => \"D+\",\n            1.0 => \"D\",\n            _ => match grade {\n    \
    \            0.1 <= grade <= 1.3 => \"B-\",\n                1.3 <= grade <= 1.7\
    \ => \"B-\",\n                1.7 <= grade <= 2.0 => \"B-\",\n               \
    \ 2.0 <= grade <= 2.3 => \"B-\",\n                2.3 <= grade <= 2.7 => \"B-\"\
    ,\n                2.7 <= grade <= 3.0 => \"B-\",\n                3.0 <= grade\
    \ <= 3.3 => \"B-\",\n                3.3 <= grade <= 3.7 => \"B-\",\n        \
    \        3.7 <= grade <= 4.0 => \"B-\",\n                4.0 <= grade <= 4.3 =>\
    \ \"B-\",\n                4.3 <= grade => \"B-\",\n                _ => \"B-\"\
    ,\n            },\n        });\n    }\n    letter_grade\n}\n\nfn main() {\n  \
    \  let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `...`, `..=`, `..`, `=>`, `if`, or `|`, found `<=`\n\
    \  --> /tmp/tmpf8ehkze8.rs:38:21\n   |\n38 |                 0.1 <= grade <= 1.3\
    \ => \"B-\",\n   |                     ^^ expected one of `...`, `..=`, `..`,\
    \ `=>`, `if`, or `|`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf8ehkze8.rs:53:5\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                ----------- expected `Vec<String>`\
    \ because of return type\n...\n53 |     letter_grade\n   |     ^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = Vec::new();\n    for grade in\
    \ grades.iter() {\n        if grade >= 4.0 { grades_string.push(\"A+\"); }\n \
    \       else if grade > 3.7 { grades_string.push(\"A\"); }\n        else if grade\
    \ > 3.3 { grades_string.push(\"A-\"); }\n        else if grade > 3.0 { grades_string.push(\"\
    B+\"); }\n        else if grade > 2.7 { grades_string.push(\"B\"); }\n       \
    \ else if grade > 2.3 { grades_string.push(\"B-\"); }\n        else if grade >\
    \ 2.0 { grades_string.push(\"C+\"); }\n        else if grade > 1.7 { grades_string.push(\"\
    C\"); }\n        else if grade > 1.3 { grades_string.push(\"C-\"); }\n       \
    \ else if grade > 1.0 { grades_string.push(\"D+\"); }\n        else if grade >\
    \ 0.7 { grades_string.push(\"D\"); }\n        else if grade > 0.0 { grades_string.push(\"\
    D-\"); }\n        else { grades_string.push(\"E\"); }\n    }\n    return grades_string;\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplffwy3ca.rs:25:21\n   |\n\
    25 |         if grade >= 4.0 { grades_string.push(\"A+\"); }\n   |           \
    \          ^^^\n   |                     |\n   |                     expected\
    \ `&f64`, found floating-point number\n   |                     help: consider\
    \ borrowing here: `&4.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplffwy3ca.rs:26:25\n\
    \   |\n26 |         else if grade > 3.7 { grades_string.push(\"A\"); }\n   | \
    \                        ^^^\n   |                         |\n   |           \
    \              expected `&f64`, found floating-point number\n   |            \
    \             help: consider borrowing here: `&3.7`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplffwy3ca.rs:27:25\n   |\n27 |         else if grade > 3.3\
    \ { grades_string.push(\"A-\"); }\n   |                         ^^^\n   |    \
    \                     |\n   |                         expected `&f64`, found floating-point\
    \ number\n   |                         help: consider borrowing here: `&3.3`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplffwy3ca.rs:28:25\n   |\n28 |\
    \         else if grade > 3.0 { grades_string.push(\"B+\"); }\n   |          \
    \               ^^^\n   |                         |\n   |                    \
    \     expected `&f64`, found floating-point number\n   |                     \
    \    help: consider borrowing here: `&3.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmplffwy3ca.rs:29:25\n   |\n29 |         else if grade > 2.7 { grades_string.push(\"\
    B\"); }\n   |                         ^^^\n   |                         |\n  \
    \ |                         expected `&f64`, found floating-point number\n   |\
    \                         help: consider borrowing here: `&2.7`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplffwy3ca.rs:30:25\n   |\n30 |         else if\
    \ grade > 2.3 { grades_string.push(\"B-\"); }\n   |                         ^^^\n\
    \   |                         |\n   |                         expected `&f64`,\
    \ found floating-point number\n   |                         help: consider borrowing\
    \ here: `&2.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplff"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    \n    let mut grades_vec = Vec::new();\n    grades_vec.push(\"\
    \");\n    \n    let mut prev_grade = -1.0f64;\n    let mut max_grade = -1.0f64;\n\
    \    for grade in grades {\n        if grade < prev_grade {\n            grades_vec.push(\"\
    \");\n            prev_grade = grade;\n        } else if grade > max_grade {\n\
    \            max_grade = grade;\n        }\n        grades_vec.push(format!(\"\
    {:+}\", (grade - prev_grade) as f64 as String));\n        prev_grade = grade;\n\
    \    }\n    if max_grade > 0.0f64 {\n        grades_vec.push(format!(\"{:+}\"\
    , max_grade as f64 as String));\n    }\n    grades_vec\n}\n\nfn main() {\n   \
    \ let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd0m9drys.rs:36:25\n   |\n\
    36 |         grades_vec.push(format!(\"{:+}\", (grade - prev_grade) as f64 as\
    \ String));\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `String`\n   |\n   = note: this error originates\
    \ in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd0m9drys.rs:40:25\n \
    \  |\n40 |         grades_vec.push(format!(\"{:+}\", max_grade as f64 as String));\n\
    \   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n   |\n   = note: this error originates in the\
    \ macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpd0m9drys.rs:42:5\n   |\n22 | fn\
    \ numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |            \
    \                                    ----------- expected `Vec<String>` because\
    \ of return type\n...\n42 |     grades_vec\n   |     ^^^^^^^^^^ expected struct\
    \ `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n   \
    \           found struct `Vec<&str>`\n\nerror[E0605]: non-primitive cast: `f64`\
    \ as `String`\n  --> /tmp/tmpd0m9drys.rs:36:41\n   |\n36 |         grades_vec.push(format!(\"\
    {:+}\", (grade - prev_grade) as f64 as String));\n   |                       \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can\
    \ only be used to convert between primitive types or to coerce to a specific trait\
    \ object\n\nerror[E0605]: non-primitive cast: `f64` as `String`\n  --> /tmp/tmpd0m9drys.rs:40:41\n\
    \   |\n40 |         grades_vec.push(format!(\"{:+}\", max_grade as f64 as String));\n\
    \   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as`\
    \ expression can only be used to convert between primitive types or to coerce\
    \ to a specific trait object\n\nerror: aborting due to 5 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0605.\nFor more information about\
    \ an error, try `"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let mut grades:\
    \ Vec<String> = vec![];\n    let max_val = grades.max();\n    while grades_iter.any()\
    \ && grades_iter.next().unwrap() >= max_val {\n        grades.push(String::from(\"\
    D-\"));\n    }\n    if grades_iter.any() && grades_iter.next().unwrap() < max_val\
    \ {\n        grades.push(String::from(\"E\"));\n    }\n    grades_iter.for_each(|x|\
    \ {\n        if x <= 3.0 {\n            grades.push(String::from(\"A+\"));\n \
    \       }\n        if x > 3.0 && x <= 3.7 {\n            grades.push(String::from(\"\
    A\"));\n        }\n        if x > 3.7 && x <= 3.3 {\n            grades.push(String::from(\"\
    A-\"));\n        }\n        if x > 3.3 && x <= 3.0 {\n            grades.push(String::from(\"\
    B+\"));\n        }\n        if x > 3.0 && x <= 3.7 {\n            grades.push(String::from(\"\
    B\"));\n        }\n        if x > 3.7 && x <= 3.3 {\n            grades.push(String::from(\"\
    B-\"));\n        }\n        if x > 3.3 && x <= 3.0 {\n            grades.push(String::from(\"\
    C+\"));\n        }\n        if x > 3.0 && x <= 3.7 {\n            grades.push(String::from(\"\
    C\"));\n        }\n        if x > 3.7 && x <= 3.3 {\n            grades.push(String::from(\"\
    C-\"));\n        }\n        if x > 3.3 && x <= 3.0 {\n            grades.push(String::from(\"\
    D+\"));\n        }\n        if x > 3.0 && x <= 3.7 {\n            grades.push(String::from(\"\
    D\"));\n        }\n        if x > 3.7 && x <= 3.3 {\n            grades.push(String::from(\"\
    D-\"));\n        }\n    })\n    grades\n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `grades`\n  --> /tmp/tmpxynk721y.rs:69:7\n \
    \  |\n69 |     })\n   |       ^ help: add `;` here\n70 |     grades\n   |    \
    \ ------ unexpected token\n\nerror[E0061]: this function takes 1 argument but\
    \ 0 arguments were supplied\n   --> /tmp/tmpxynk721y.rs:25:26\n    |\n25  |  \
    \   let max_val = grades.max();\n    |                          ^^^- supplied\
    \ 0 arguments\n    |                          |\n    |                       \
    \   expected 1 argument\n    |\nnote: associated function defined here\n\nerror[E0061]:\
    \ this function takes 1 argument but 0 arguments were supplied\n    --> /tmp/tmpxynk721y.rs:26:23\n\
    \     |\n26   |     while grades_iter.any() && grades_iter.next().unwrap() >=\
    \ max_val {\n     |                       ^^^- supplied 0 arguments\n     |  \
    \                     |\n     |                       expected 1 argument\n  \
    \   |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxynk721y.rs:26:63\n   |\n26 |     while grades_iter.any() && grades_iter.next().unwrap()\
    \ >= max_val {\n   |                                                         \
    \      ^^^^^^^ expected `&f64`, found struct `Vec`\n   |\n   = note: expected\
    \ reference `&f64`\n                 found struct `Vec<String>`\n\nerror[E0061]:\
    \ this function takes 1 argument but 0 arguments were supplied\n    --> /tmp/tmpxynk721y.rs:29:20\n\
    \     |\n29   |     if grades_iter.any() && grades_iter.next().unwrap() < max_val\
    \ {\n     |                    ^^^- supplied 0 arguments\n     |             \
    \       |\n     |                    expected 1 argument\n     |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxynk721y.rs:29:59\n\
    \   |\n29 |     if grades_iter.any() && grades_iter.next().unwrap() < max_val\
    \ {\n   |                                                           ^^^^^^^ expected\
    \ `&f64`, found struct `Vec`\n   |\n   = note: expected reference `&f64`\n   \
    \              found struct `Vec<String>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxynk721y.rs:33:17\n   |\n33 |         if x <= 3.0 {\n   |     \
    \            ^^^\n   |"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_strings = Vec::new();\n    for i in grades.iter()\
    \ {\n        let i = i as f64;\n        grades_strings.push((\n            if((i\
    \ % 4.0) == 0.0 && i != 0.0 || i >= 0.0 && (i % 3.0) == 0.0 && i != 0.0\n    \
    \            || (i % 3.0) == 0.0 && i != 0.0 || (i % 2.0) == 0.0 && i != 0.0\n\
    \                || (i % 2.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 0.7) == 0.0 && i != 0.0 || (i % 0.7) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && \n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp0j5_lu1r.rs:64:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    23 |     let mut grades_strings = Vec::new();\n24 |     for i in grades.iter()\
    \ {\n   |                            - this delimiter might not be properly closed...\n\
    ...\n54 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    64 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp0j5_lu1r.rs:27:15\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - closing delimiter\
    \ possibly meant for this\n...\n27 |             if((i % 4.0) == 0.0 && i != 0.0\
    \ || i >= 0.0 && (i % 3.0) == 0.0 && i != 0.0\n   |               ^ unclosed delimiter\n\
    ...\n54 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmp0j5_lu1r.rs:54:1\n   |\n54 | }\n   | ^ expected expression\n\
    \nerror: expected `{`, found `)`\n  --> /tmp/tmp0j5_lu1r.rs:54:1\n   |\n27 | \
    \            if((i % 4.0) == 0.0 && i != 0.0 || i >= 0.0 && (i % 3.0) == 0.0 &&\
    \ i != 0.0\n   |             -- this `if` expression has a condition, but no block\n\
    ...\n54 | }\n   | ^ expected `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0j5_lu1r.rs:24:5\n\
    \   |\n22 |   fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \  |                                                  ----------- expected `Vec<String>`\
    \ because of return type\n23 |       let mut grades_strings = Vec::new();\n24\
    \ | /     for i in grades.iter() {\n25 | |         let i = i as f64;\n26 | | \
    \        grades_strings.push((\n27 | |             if((i % 4.0) == 0.0 && i !=\
    \ 0.0 || i >= 0.0 && (i % 3.0) == 0.0 && i != 0.0\n...  |\n63 | |     assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n64 | | }\n   | |__^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<String>`\n\
    \           found unit type `()`\n\nerror[E0606]: casti"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        letter_grades.push(match grade {\n            4.0 => \"A+\"\
    .to_string(),\n            3.7 => \"A\".to_string(),\n            3.3 => \"A-\
    \ \".to_string(),\n            3.0 => \"B+\".to_string(),\n            2.7 =>\
    \ \"B\".to_string(),\n            2.3 => \"B-\".to_string(),\n            2.0\
    \ => \"C+\".to_string(),\n            1.7 => \"C\".to_string(),\n            1.3\
    \ => \"C-\".to_string(),\n            1.0 => \"D+\".to_string(),\n           \
    \ 0.7 => \"D\".to_string(),\n            0.0 => \"D-\".to_string(),\n        \
    \    0.0 => \"E\".to_string(),\n            _ => \"E\".to_string()\n        });\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"E\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmp0npi6d9d.rs:47:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades\n        .iter()\n        .map(|x| {\n        \
    \    if x >= 4.0 {\n                \"A+\"\n            } else if x >= 3.7 {\n\
    \                \"A\"\n            } else if x >= 3.3 {\n                \"A-\"\
    \n            } else if x >= 3.0 {\n                \"B+\"\n            } else\
    \ if x >= 2.7 {\n                \"B\"\n            } else if x >= 2.3 {\n   \
    \             \"B-\"\n            } else if x >= 2.0 {\n                \"C+\"\
    \n            } else if x >= 1.7 {\n                \"C\"\n            } else\
    \ if x >= 1.3 {\n                \"C-\"\n            } else if x >= 1.0 {\n  \
    \              \"D+\"\n            } else if x >= 0.7 {\n                \"D\"\
    \n            } else if x >= 0.0 {\n                \"D-\"\n            } else\
    \ if x == 0.0 {\n                \"E\"\n            } else {\n               \
    \ \"\"\n            }\n        })\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpujjpdic_.rs:26:21\n   |\n\
    26 |             if x >= 4.0 {\n   |                     ^^^\n   |           \
    \          |\n   |                     expected `&f64`, found floating-point number\n\
    \   |                     help: consider borrowing here: `&4.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpujjpdic_.rs:28:28\n   |\n28 |             }\
    \ else if x >= 3.7 {\n   |                            ^^^\n   |              \
    \              |\n   |                            expected `&f64`, found floating-point\
    \ number\n   |                            help: consider borrowing here: `&3.7`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpujjpdic_.rs:30:28\n   |\n30 |\
    \             } else if x >= 3.3 {\n   |                            ^^^\n   |\
    \                            |\n   |                            expected `&f64`,\
    \ found floating-point number\n   |                            help: consider\
    \ borrowing here: `&3.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpujjpdic_.rs:32:28\n\
    \   |\n32 |             } else if x >= 3.0 {\n   |                           \
    \ ^^^\n   |                            |\n   |                            expected\
    \ `&f64`, found floating-point number\n   |                            help: consider\
    \ borrowing here: `&3.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpujjpdic_.rs:34:28\n\
    \   |\n34 |             } else if x >= 2.7 {\n   |                           \
    \ ^^^\n   |                            |\n   |                            expected\
    \ `&f64`, found floating-point number\n   |                            help: consider\
    \ borrowing here: `&2.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpujjpdic_.rs:36:28\n\
    \   |\n36 |             } else if x >= 2.3 {\n   |                           \
    \ ^^^\n   |                            |\n   |                            expected\
    \ `&f64`, found floating-point number\n   |                            help: consider\
    \ borrowing here: `&2.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpujjpdic_.rs:38:28\n\
    \   |\n38 |             } else if x >= 2.0 {\n   |                           \
    \ ^"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![String::new(); grades.len()];\n\
    \    let mut total_sum: f64 = 0.0;\n    for grade in grades {\n        total_sum\
    \ += grade;\n        for index in range(grades.len()) {\n            if grade\
    \ < grades[index] {\n                break;\n            }\n            letter_grades[index]\
    \ += &str::from_utf8(&\"FDCBA+\").unwrap();\n        }\n    }\n    for index in\
    \ range(grades.len()) {\n        let grade = grades[index];\n        letter_grades[index]\
    \ = &str::from_utf8(&letter_grades[index][..])\n            .unwrap().to_string();\n\
    \    }\n    for index in range(grades.len()) {\n        letter_grades[index] +=\
    \ &str::from_utf8(&\"FEDCBA-\").unwrap();\n    }\n    for index in range(grades.len())\
    \ {\n        letter_grades[index] += &str::from_utf8(&\"FEDCBA\").unwrap();\n\
    \    }\n    for index in range(grades.len()) {\n        letter_grades[index] +=\
    \ &str::from_utf8(&\"FEDCBA\").unwrap();\n    }\n    for index in range(grades.len())\
    \ {\n        letter_grades[index] += &str::from_utf8(&\"FEDCBA\").unwrap();\n\
    \    }\n    for index in range(grades.len()) {\n        letter_grades[index] +=\
    \ &str::from_utf8(&\"FEDCBA\").unwrap();\n    }\n    for index in range(grades.len())\
    \ {\n        letter_grades[index] += &str::from_utf8(&\"FEDCBA\").unwrap();\n\
    \    }\n    for index in range(grades.len()) {\n        letter_grades[index] +=\
    \ &str::from_utf8(&\"FEDCBA\").unwrap();\n    }\n    for index in range(grades.len())\
    \ {\n        letter_grades[index] += &str::from_utf8(&\"FEDCBA\").unwrap();\n\
    \    }\n    for index in range(grades.len()) {\n        letter_grades[index] +=\
    \ &str::from_utf8(&\"FEDCBA\").unwrap();\n    }\n    for index in range(grades.len())\
    \ {\n        letter_grades[index] += &str::from_utf8(&\"FEDCBA\").unwrap();\n\
    \    }\n    for index in range(grades.len()) {\n        letter_grades[index] +=\
    \ &str::from_utf8(&\"FEDCBA\").unwrap();\n    }\n    for index in range(grades.len())\
    \ {\n        letter_grades[index] += &str::from_utf8(&\"FEDCBA\").unwrap();\n\
    \    }\n    for index in range(grades.len()) {\n        letter_grades[index] +=\
    \ &str::from_utf8(&\"FEDCBA\").unwrap();\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpe1d812z_.rs:87:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n75 |     for index in range(grades.len()) {\n   |                       \
    \               - this delimiter might not be properly closed...\n76 |       \
    \  letter_grades[index] += &str::from_utf8(&\"FEDCBA\").unwrap();\n77 | }\n  \
    \ | - ...as it matches this but it has different indentation\n...\n87 | }\n  \
    \ |   ^\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpe1d812z_.rs:27:22\n\
    \   |\n27 |         for index in range(grades.len()) {\n   |                 \
    \     ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n\
    \   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function\
    \ `range` in this scope\n  --> /tmp/tmpe1d812z_.rs:34:18\n   |\n34 |     for index\
    \ in range(grades.len()) {\n   |                  ^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n\
    \   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpe1d812z_.rs:39:18\n\
    \   |\n39 |     for index in range(grades.len()) {\n   |                  ^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this function\n   |\n\
    1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range`\
    \ in this scope\n  --> /tmp/tmpe1d812z_.rs:42:18\n   |\n42 |     for index in\
    \ range(grades.len()) {\n   |                  ^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n\
    \   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpe1d812z_.rs:45:18\n\
    \   |\n45 |     for index in range(grades.len()) {\n   |                  ^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this function\n   |\n\
    1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range`\
    \ in this scope\n  --> /tmp/tmpe1d812z_.rs:48:18\n   |\n48 |     for index in\
    \ range(grades.len()) {"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let mut letter_grades\
    \ = Vec::new();\n    let mut prev_grade_letter = String::new();\n    let mut current_grade:\
    \ f64 = grades.iter().sum();\n    if current_grade < 0.0 {\n        grades_iter\
    \ = grades.iter().rev();\n        current_grade = grades.iter().sum();\n    }\n\
    \    grades_iter.fold(\n        prev_grade_letter,\n        |prev_grade_letter,\
    \ grade| {\n            let letter = grade < 2.3 ? \"-\" : (grade >= 2.3 && grade\
    \ < 3.0 ? \"B+\" : (grade >= 3.0 && grade < 3.7 ? \"B\" : \"B-\"\n           \
    \                                                                            \
    \     ));\n            let new_letter = prev_grade_letter + letter;\n        \
    \    prev_grade_letter = new_letter;\n            letter_grades.push(new_letter);\n\
    \        });\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `\"\
    -\"`\n  --> /tmp/tmpc6sgccuj.rs:34:40\n   |\n34 |             let letter = grade\
    \ < 2.3 ? \"-\" : (grade >= 2.3 && grade < 3.0 ? \"B+\" : (grade >= 3.0 && grade\
    \ < 3.7 ? \"B\" : \"B-\"\n   |                                        ^^^ expected\
    \ one of `.`, `;`, `?`, `else`, or an operator\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpc6sgccuj.rs:28:23\n   |\n23 |     let mut grades_iter = grades.iter();\n\
    \   |                           ------------- expected due to this value\n...\n\
    28 |         grades_iter = grades.iter().rev();\n   |                       ^^^^^^^^^^^^^^^^^^^\
    \ expected struct `std::slice::Iter`, found struct `Rev`\n   |\n   = note: expected\
    \ struct `std::slice::Iter<'_, _>`\n              found struct `Rev<std::slice::Iter<'_,\
    \ _>>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    if grades.len() != 5 {\n        return vec![\"E\".to_string()];\n\
    \    }\n    let mut numerical_grade = grades.iter().sum();\n    let mut letter_grade:\
    \ Vec<String> = vec![];\n    \n    for grade in grades {\n        if grade < 3.0\
    \ {\n            numerical_grade += 0.1;\n        } else if grade < 3.3 {\n  \
    \          numerical_grade += 0.01;\n        } else if grade < 3.7 {\n       \
    \     numerical_grade += 0.001;\n        }\n        if numerical_grade < 5.0 {\n\
    \            letter_grade.push(\"E\".to_string());\n            break;\n     \
    \   }\n        let letter_grade = match numerical_grade {\n            0 => \"\
    D\".to_string(),\n            1 => \"C\".to_string(),\n            2 => \"B\"\
    .to_string(),\n            3 => \"B\".to_string(),\n            4 => \"A\".to_string(),\n\
    \            _ => {\n                if grade < 3.0 {\n                    numerical_grade\
    \ += 0.1;\n                } else if grade < 3.3 {\n                    numerical_grade\
    \ += 0.01;\n                } else if grade < 3.7 {\n                    numerical_grade\
    \ += 0.001;\n                }\n                match numerical_grade {\n    \
    \                0 => \"D\".to_string(),\n                    1 => \"C\".to_string(),\n\
    \                    2 => \"B\".to_string(),\n                    3 => \"B\".to_string(),\n\
    \                    4 => \"A\".to_string(),\n                    _ => \"E\".to_string()\n\
    \                }\n            }\n        };\n        \n        numerical_grade\
    \ -= 0.1;\n    }\n    letter_grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `{float}` to `{integer}`\n  --> /tmp/tmpeajuv044.rs:31:29\n\
    \   |\n31 |             numerical_grade += 0.1;\n   |                        \
    \     ^^ no implementation for `{integer} += {float}`\n   |\n   = help: the trait\
    \ `AddAssign<{float}>` is not implemented for `{integer}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot add-assign\
    \ `{float}` to `{integer}`\n  --> /tmp/tmpeajuv044.rs:33:29\n   |\n33 |      \
    \       numerical_grade += 0.01;\n   |                             ^^ no implementation\
    \ for `{integer} += {float}`\n   |\n   = help: the trait `AddAssign<{float}>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `{float}` to `{integer}`\n\
    \  --> /tmp/tmpeajuv044.rs:35:29\n   |\n35 |             numerical_grade += 0.001;\n\
    \   |                             ^^ no implementation for `{integer} += {float}`\n\
    \   |\n   = help: the trait `AddAssign<{float}>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy: Vec<f64> = grades.clone();\n    let\
    \ mut grades_copy_reversed: Vec<f64> = grades.clone();\n    grades_copy_reversed.reverse();\n\
    \    grades_copy.sort_unstable_by_key(|x| x.partial_cmp(x.unwrap()) as isize);\n\
    \    grades_copy_reversed.sort_unstable_by_key(|x| x.partial_cmp(x.unwrap()) as\
    \ isize);\n    let mut letter_grades: Vec<String> = vec![];\n    let mut gpa:\
    \ f64 = 0.0;\n    let mut gpa_reversed: f64 = 0.0;\n    let mut index = 0;\n \
    \   let mut is_grade = String::new();\n    loop {\n        gpa_reversed = grades_copy_reversed[index];\n\
    \        if grades_copy[index] == grades_copy_reversed[index] {\n            gpa\
    \ = grades_copy[index];\n            break;\n        } else {\n            gpa\
    \ = grades_copy[index];\n            index += 1;\n        }\n    }\n    loop {\n\
    \        gpa_reversed = grades_copy_reversed[index];\n        letter_grades.push(format!(\"\
    {:?}\", gpa_reversed).to_string());\n        if grades_copy[index] == grades_copy_reversed[index]\
    \ {\n            break;\n        } else {\n            index += 1;\n        }\n\
    \    }\n    letter_grades.sort_unstable_by_key(|x| x.partial_cmp(x.unwrap()) as\
    \ isize);\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for reference `&f64` in the\
    \ current scope\n  --> /tmp/tmpyfi09viu.rs:26:58\n   |\n26 |     grades_copy.sort_unstable_by_key(|x|\
    \ x.partial_cmp(x.unwrap()) as isize);\n   |                                 \
    \                         ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no\
    \ method named `unwrap` found for reference `&f64` in the current scope\n  -->\
    \ /tmp/tmpyfi09viu.rs:27:67\n   |\n27 |     grades_copy_reversed.sort_unstable_by_key(|x|\
    \ x.partial_cmp(x.unwrap()) as isize);\n   |                                 \
    \                                  ^^^^^^ method not found in `&f64`\n\nerror[E0599]:\
    \ no method named `unwrap` found for reference `&String` in the current scope\n\
    \  --> /tmp/tmpyfi09viu.rs:52:60\n   |\n52 |     letter_grades.sort_unstable_by_key(|x|\
    \ x.partial_cmp(x.unwrap()) as isize);\n   |                                 \
    \                           ^^^^^^ method not found in `&String`\n\nerror[E0605]:\
    \ non-primitive cast: `Option<std::cmp::Ordering>` as `isize`\n  --> /tmp/tmpyfi09viu.rs:26:42\n\
    \   |\n26 |     grades_copy.sort_unstable_by_key(|x| x.partial_cmp(x.unwrap())\
    \ as isize);\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror[E0605]: non-primitive cast: `Option<std::cmp::Ordering>`\
    \ as `isize`\n  --> /tmp/tmpyfi09viu.rs:27:51\n   |\n27 |     grades_copy_reversed.sort_unstable_by_key(|x|\
    \ x.partial_cmp(x.unwrap()) as isize);\n   |                                 \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can only\
    \ be used to convert between primitive types or to coerce to a specific trait\
    \ object\n\nerror[E0605]: non-primitive cast: `Option<std::cmp::Ordering>` as\
    \ `isize`\n  --> /tmp/tmpyfi09viu.rs:52:44\n   |\n52 |     letter_grades.sort_unstable_by_key(|x|\
    \ x.partial_cmp(x.unwrap()) as isize);\n   |                                 \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can only be\
    \ used t"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|x| x.to_string()).collect::<Vec<_>>().windows(4).map(|w|\
    \ {\n        w.iter().map(|x| x.to_string()).collect::<Vec<_>>().join(\"\").to_string()\n\
    \    }).collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"431.72\", \"31.723.5\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]`', /tmp/tmphvct1tq9.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_slice = grades.as_slice();\n\n    // The\
    \ first element is the letter grade for the first GPA, just make sure\n    //\
    \ it's A+ since that's what our first GPA is.\n    grades_slice.insert(0, 0.0);\n\
    \n    // We subtract the first element from all the remaining elements to get\
    \ \n    // the difference between them.\n    for grade in grades_slice.iter().rev()\
    \ {\n        let grades_diff = grade - grades_slice[0];\n\n        // The GPA\
    \ difference is greater than zero so we can add a '+'\n        if grades_diff\
    \ > 0.0 {\n            grades_slice.insert(0, grades_diff + 1.0);\n        } else\
    \ {\n            // The GPA difference is less than zero so we can subtract a\
    \ '-'\n            if grades_diff < 0.0 {\n                grades_slice.insert(0,\
    \ grades_diff - 1.0);\n            }\n        }\n    }\n\n    // We return the\
    \ reversed slice.\n    grades_slice.iter().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `insert` found for reference `&[f64]` in\
    \ the current scope\n  --> /tmp/tmphn_dw3t_.rs:27:18\n   |\n27 |     grades_slice.insert(0,\
    \ 0.0);\n   |                  ^^^^^^ help: there is an associated function with\
    \ a similar name: `iter`\n\nerror[E0599]: no method named `insert` found for reference\
    \ `&[f64]` in the current scope\n  --> /tmp/tmphn_dw3t_.rs:36:26\n   |\n36 | \
    \            grades_slice.insert(0, grades_diff + 1.0);\n   |                \
    \          ^^^^^^ help: there is an associated function with a similar name: `iter`\n\
    \nerror[E0599]: no method named `insert` found for reference `&[f64]` in the current\
    \ scope\n  --> /tmp/tmphn_dw3t_.rs:40:30\n   |\n40 |                 grades_slice.insert(0,\
    \ grades_diff - 1.0);\n   |                              ^^^^^^ help: there is\
    \ an associated function with a similar name: `iter`\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&f64`\n    --> /tmp/tmphn_dw3t_.rs:46:31\n     |\n46   |     grades_slice.iter().rev().collect()\n\
    \     |                               ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&f64>`\n     |\n     = help: the trait\
    \ `FromIterator<&f64>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    // Your code goes here\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp79nlmqfa.rs:22:48\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades: Vec<String> = vec![];\n\n    let\
    \ mut prev_gpa = grades.nth(1);\n    for i in 0..grades.len() {\n        let curr_gpa\
    \ = grades[i];\n        if i == 0 {\n            let letter_grade = if curr_gpa\
    \ >= 3.0 * prev_gpa { \"+\" } else { \"-\" };\n            letter_grades.push(String::from(&letter_grade));\n\
    \        } else {\n            let letter_grade = if curr_gpa < prev_gpa { \"\
    +\" } else { if curr_gpa - prev_gpa > 1.0 { \"A+\" } else { \"A-\" } };\n    \
    \        letter_grades.push(String::from(&letter_grade));\n        }\n\n     \
    \   prev_gpa = curr_gpa;\n    }\n    letter_grades.push(String::from(\"E\"));\n\
    \n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `nth` found for struct `Vec<f64>` in the\
    \ current scope\n  --> /tmp/tmpknujer89.rs:25:31\n   |\n25 |     let mut prev_gpa\
    \ = grades.nth(1);\n   |                               ^^^ method not found in\
    \ `Vec<f64>`\n\nerror[E0277]: the trait bound `String: From<&&str>` is not satisfied\n\
    \  --> /tmp/tmpknujer89.rs:30:32\n   |\n30 |             letter_grades.push(String::from(&letter_grade));\n\
    \   |                                ^^^^^^^^^^^^ the trait `From<&&str>` is not\
    \ implemented for `String`\n   |\n   = help: the following other types implement\
    \ trait `From<T>`:\n             <String as From<&String>>\n             <String\
    \ as From<&mut str>>\n             <String as From<&str>>\n             <String\
    \ as From<Box<str>>>\n             <String as From<Cow<'a, str>>>\n          \
    \   <String as From<char>>\n\nerror[E0277]: the trait bound `String: From<&&str>`\
    \ is not satisfied\n  --> /tmp/tmpknujer89.rs:33:32\n   |\n33 |             letter_grades.push(String::from(&letter_grade));\n\
    \   |                                ^^^^^^^^^^^^ the trait `From<&&str>` is not\
    \ implemented for `String`\n   |\n   = help: the following other types implement\
    \ trait `From<T>`:\n             <String as From<&String>>\n             <String\
    \ as From<&mut str>>\n             <String as From<&str>>\n             <String\
    \ as From<Box<str>>>\n             <String as From<Cow<'a, str>>>\n          \
    \   <String as From<char>>\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades: Vec<String> = vec![];\n    let\
    \ mut max_grade = grades.iter().max().unwrap();\n    max_grade = max_grade / 10.0;\n\
    \    for (grade, idx) in grades.iter().enumerate() {\n        if grade > max_grade\
    \ {\n            max_grade = grade;\n        }\n    }\n    let mut min_grade =\
    \ grades.iter().min().unwrap();\n    min_grade = min_grade / 10.0;\n    for (grade,\
    \ idx) in grades.iter().enumerate() {\n        if grade < min_grade {\n      \
    \      min_grade = grade;\n        }\n    }\n    for (grade, idx) in grades.iter().enumerate()\
    \ {\n        let grade_str = (grade as f32).to_string();\n        if idx < min_grade\
    \ || idx > max_grade {\n            letter_grades.push(grade_str);\n        }\
    \ else {\n            letter_grades.push(grade_str + \"+\");\n        }\n    }\n\
    \    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpj2_k5ihu.rs:24:39\n\
    \     |\n24   |     let mut max_grade = grades.iter().max().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpj2_k5ihu.rs:25:17\n   |\n24 |\
    \     let mut max_grade = grades.iter().max().unwrap();\n   |                \
    \         ---------------------------- expected due to this value\n25 |     max_grade\
    \ = max_grade / 10.0;\n   |                 ^^^^^^^^^^^^^^^^\n   |           \
    \      |\n   |                 expected `&f64`, found `f64`\n   |            \
    \     help: consider borrowing here: `&(max_grade / 10.0)`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj2_k5ihu.rs:27:20\n   |\n27 |         if grade > max_grade\
    \ {\n   |                    ^^^^^^^^^ expected `usize`, found `&f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpj2_k5ihu.rs:28:25\n   |\n24 |     let mut max_grade\
    \ = grades.iter().max().unwrap();\n   |                         ----------------------------\
    \ expected due to this value\n...\n28 |             max_grade = grade;\n   | \
    \                        ^^^^^ expected `&f64`, found `usize`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpj2_k5ihu.rs:31:39\n\
    \     |\n31   |     let mut min_grade = grades.iter().min().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_as_string = String::new();\n    for i in\
    \ grades.iter() {\n        let fraction = i as f64;\n        let grade_string\
    \ = grade_formula(fraction);\n        grades_as_string.push_str(grade_string);\n\
    \    }\n    grades_as_string.split_whitespace().collect::<Vec<String>>()\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `grade_formula` in this scope\n  -->\
    \ /tmp/tmpqy_vpxi1.rs:26:28\n   |\n26 |         let grade_string = grade_formula(fraction);\n\
    \   |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&str`\n    --> /tmp/tmpqy_vpxi1.rs:29:41\n     |\n29   |     grades_as_string.split_whitespace().collect::<Vec<String>>()\n\
    \     |                                         ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0606]: casting `&f64` as `f64` is invalid\n\
    \  --> /tmp/tmpqy_vpxi1.rs:25:24\n   |\n25 |         let fraction = i as f64;\n\
    \   |                        -^^^^^^^\n   |                        |\n   |   \
    \                     cannot cast `&f64` as `f64`\n   |                      \
    \  help: dereference the expression: `*i`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0425, E0606.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_strings = Vec::new();\n    let mut max_gpa\
    \ = grades.iter().max().unwrap();\n    max_gpa = max_gpa - 0.6;\n    let mut min_gpa\
    \ = grades.iter().min().unwrap();\n    min_gpa = min_gpa - 0.6;\n    for grade\
    \ in grades.iter() {\n        if grade >= max_gpa {\n            grades_strings.push(\"\
    A-\");\n        }\n        if grade >= min_gpa {\n            grades_strings.push(\"\
    B-\");\n        }\n        if grade >= 3.0 {\n            grades_strings.push(\"\
    C+\");\n        }\n        if grade >= 2.7 {\n            grades_strings.push(\"\
    C\");\n        }\n        if grade >= 2.3 {\n            grades_strings.push(\"\
    C-\");\n        }\n        if grade >= 2.0 {\n            grades_strings.push(\"\
    D+\");\n        }\n        if grade >= 1.7 {\n            grades_strings.push(\"\
    D\");\n        }\n        if grade >= 1.3 {\n            grades_strings.push(\"\
    D-\");\n        }\n        if grade >= 1.0 {\n            grades_strings.push(\"\
    E\");\n        }\n        if grade <= 0.7 {\n            grades_strings.push(\"\
    D\");\n        }\n        if grade <= 0.3 {\n            grades_strings.push(\"\
    B-\");\n        }\n        if grade <= 0.2 {\n            grades_strings.push(\"\
    B-\");\n        }\n        if grade <= 0.1 {\n            grades_strings.push(\"\
    B-\");\n        }\n        if grade <= 0.0{\n            grades_strings.push(\"\
    B-\");\n        }\n        if grade == 0.0 {\n            grades_strings.push(\"\
    B-\");\n        }\n    }\n    grades_strings\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpwmke88kb.rs:24:37\n\
    \     |\n24   |     let mut max_gpa = grades.iter().max().unwrap();\n     |  \
    \                                   ^^^ the trait `Ord` is not implemented for\
    \ `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwmke88kb.rs:25:15\n   |\n24 |\
    \     let mut max_gpa = grades.iter().max().unwrap();\n   |                  \
    \     ---------------------------- expected due to this value\n25 |     max_gpa\
    \ = max_gpa - 0.6;\n   |               ^^^^^^^^^^^^^\n   |               |\n \
    \  |               expected `&f64`, found `f64`\n   |               help: consider\
    \ borrowing here: `&(max_gpa - 0.6)`\n\nerror[E0277]: the trait bound `f64: Ord`\
    \ is not satisfied\n    --> /tmp/tmpwmke88kb.rs:26:37\n     |\n26   |     let\
    \ mut min_gpa = grades.iter().min().unwrap();\n     |                        \
    \             ^^^ the trait `Ord` is not implemented for `f64`\n     |\n     =\
    \ help: the following other types implement trait `Ord`:\n               i128\n\
    \               i16\n               i32\n               i64\n               i8\n\
    \               isize\n               u128\n               u16\n             and\
    \ 4 others\n     = note: required because of the requirements on the impl of `Ord`\
    \ for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwmke88kb.rs:27:15\n   |\n26 |     let mut min_gpa\
    \ = grades.iter().min().unwrap();\n   |                       ----------------------------\
    \ expected due to this value\n27 |     min_gpa = min_gpa - 0.6;\n   |        \
    \       ^^^^^^^^^^^^^\n   |               |\n   |               expected `&f64`,\
    \ found `f64`\n   |        "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = Vec::new();\n    let\
    \ mut grades_vec: Vec<String> = Vec::new();\n    let mut grades_vec: Vec<String>\
    \ = Vec::new();\n    let mut grades_vec: Vec<String> = Vec::new();\n    let mut\
    \ grades_vec: Vec<String> = Vec::new();\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd3ivudbj.rs:28:21\n   |\n\
    28 |     grades_vec.push(\"\");\n   |                     ^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                     |\n   |      \
    \               expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpd3ivudbj.rs:29:21\n   |\n29 |     grades_vec.push(\"\"\
    );\n   |                     ^^- help: try using a conversion method: `.to_string()`\n\
    \   |                     |\n   |                     expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd3ivudbj.rs:30:21\n\
    \   |\n30 |     grades_vec.push(\"\");\n   |                     ^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                     |\n   |\
    \                     expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd3ivudbj.rs:31:21\n   |\n31 |     grades_vec.push(\"\
    \");\n   |                     ^^- help: try using a conversion method: `.to_string()`\n\
    \   |                     |\n   |                     expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd3ivudbj.rs:32:21\n\
    \   |\n32 |     grades_vec.push(\"\");\n   |                     ^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                     |\n   |\
    \                     expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd3ivudbj.rs:34:21\n   |\n34 |     grades_vec.push(\"\
    \");\n   |                     ^^- help: try using a conversion method: `.to_string()`\n\
    \   |                     |\n   |                     expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd3ivudbj.rs:35:21\n\
    \   |\n35 |     grades_vec.push(\"\");\n   |                     ^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                     |\n   |\
    \                     expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd3ivudbj.rs:36:21\n   |\n36 |     grades_vec.push(\"\
    \");\n   |                     ^^- help: try using a conver"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_chars = grades.into_iter().map(|grade|\
    \ {\n        let num = grade as f64;\n        match num {\n            > 3.0 =>\
    \ \"B+\".to_owned(),\n            > 2.7 => \"B\".to_owned(),\n            > 2.3\
    \ => \"B-\".to_owned(),\n            > 2.0 => \"C+\".to_owned(),\n           \
    \ > 1.7 => \"C\".to_owned(),\n            > 1.3 => \"C-\".to_owned(),\n      \
    \      > 1.0 => \"D+\".to_owned(),\n            > 0.7 => \"D\".to_owned(),\n \
    \           0.0 => \"D-\".to_owned(),\n            > 3.0 => \"A+\".to_owned(),\n\
    \            > 2.7 => \"A\".to_owned(),\n            > 2.3 => \"A-\".to_owned(),\n\
    \            > 2.0 => \"B+\".to_owned(),\n            > 1.7 => \"B\".to_owned(),\n\
    \            > 1.3 => \"B-\".to_owned(),\n            > 1.0 => \"C+\".to_owned(),\n\
    \            > 0.7 => \"C\".to_owned(),\n            0.0 => \"C-\".to_owned(),\n\
    \            > 3.0 => \"A+\".to_owned(),\n            > 3.7 => \"A\".to_owned(),\n\
    \            _ => \"E\".to_owned(),\n        }\n    }).collect();\n    let mut\
    \ grades_len = grades.len();\n    grades_chars[grades_len - 1].push('A');\n  \
    \  grades_chars.reverse();\n    grades_chars\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected pattern, found `>`\n  --> /tmp/tmpa1_a5omi.rs:26:13\n \
    \  |\n26 |             > 3.0 => \"B+\".to_owned(),\n   |             ^ expected\
    \ pattern\n\nerror[E0282]: type annotations needed\n  --> /tmp/tmpa1_a5omi.rs:50:5\n\
    \   |\n23 |     let mut grades_chars = grades.into_iter().map(|grade| {\n   |\
    \         ---------------- consider giving `grades_chars` a type\n...\n50 |  \
    \   grades_chars[grades_len - 1].push('A');\n   |     ^^^^^^^^^^^^ cannot infer\
    \ type\n   |\n   = note: type must be known at this point\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let len = grades.len();\n    let mut letter_grades = Vec::with_capacity(len\
    \ + 1);\n    for grade in grades {\n        if grade >= 3.0 {\n            letter_grades.push(format!(\"\
    C+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(format!(\"\
    C\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if grade >= 0.3 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if grade >= 0.1 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if grade >= -0.1 {\n            letter_grades.push(format!(\"\
    B\"));\n        } else if grade >= -0.3 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if grade >= -0.7 {\n            letter_grades.push(format!(\"\
    B\"));\n        } else if grade >= -1.0 {\n            letter_grades.push(format!(\"\
    B+\"));\n        } else if grade >= -1.7 {\n            letter_grades.push(format!(\"\
    C\"));\n        } else if grade >= -2.0 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if grade >= -3.0 {\n            letter_grades.push(format!(\"\
    B\"));\n        } else if grade >= -3.7 {\n            letter_grades.push(format!(\"\
    A\"));\n        } else if grade >= -4.0 {\n            letter_grades.push(format!(\"\
    A+\"));\n        } else if grade >= -4.7 {\n            letter_grades.push(format!(\"\
    A\"));\n        } else {\n            letter_grades.push(format!(\"A\"));\n  \
    \      }\n    }\n    letter_grades.truncate(letter_grades.len() - 1);\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"C+\", \"C+\", \"B-\", \"B-\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"]`', /tmp/tmp3gp8izu_.rs:74:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter = vec![];\n\n    for grade in grades {\n\
    \        if grade < 4.0 {\n            letter.push('A+');\n        } else if grade\
    \ >= 3.0 && grade < 3.7 {\n            letter.push('A');\n        } else if grade\
    \ >= 3.7 && grade < 3.3 {\n            letter.push('A-');\n        } else if grade\
    \ >= 3.3 && grade < 3.0 {\n            letter.push('B+');\n        } else if grade\
    \ >= 3.0 && grade < 2.7 {\n            letter.push('B');\n        } else if grade\
    \ >= 2.7 && grade < 2.3 {\n            letter.push('B-');\n        } else if grade\
    \ >= 2.3 && grade < 2.0 {\n            letter.push('C+');\n        } else if grade\
    \ >= 2.0 && grade < 1.7 {\n            letter.push('C');\n        } else if grade\
    \ >= 1.7 && grade < 1.3 {\n            letter.push('C-');\n        } else if grade\
    \ >= 1.3 && grade < 1.0 {\n            letter.push('D+');\n        } else if grade\
    \ >= 1.0 && grade < 0.7 {\n            letter.push('D');\n        } else if grade\
    \ >= 0.7 && grade < 0.0 {\n            letter.push('D-');\n        } else {\n\
    \            letter.push('E');\n        }\n    }\n    letter\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpywm92eu4.rs:27:28\n\
    \   |\n27 |             letter.push('A+');\n   |                            ^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = vec![];\n    grades.sort_unstable_by(|a,\
    \ b| b.partial_cmp(a).unwrap());\n    for i in grades.iter() {\n        let letter\
    \ = match i {\n            0 => \"E\",\n            i if i > 5.0 => \"D-\",\n\
    \            i if i > 3.0 => \"C-\",\n            i if i > 2.0 => \"B-\",\n  \
    \          i if i > 1.7 => \"B-\",\n            i if i > 1.3 => \"B-\",\n    \
    \        i if i > 1.0 => \"B-\",\n            i if i > 0.7 => \"B-\",\n      \
    \      i if i > 0.3 => \"B-\",\n            i if i > 0.2 => \"B-\",\n        \
    \    i if i > 0.1 => \"B-\",\n            i if i > 0.0 => \"B-\",\n          \
    \  i if i > -1.0 => \"B-\",\n            i if i > -2.0 => \"B-\",\n          \
    \  i if i > -3.0 => \"B-\",\n            i if i > -4.0 => \"B-\",\n          \
    \  i if i > -5.0 => \"B-\",\n            i if i > -6.0 => \"B-\",\n          \
    \  i if i > -7.0 => \"B-\",\n            i if i > -8.0 => \"B-\",\n          \
    \  i if i > -9.0 => \"B-\",\n            i if i > -10.0 => \"B-\",\n         \
    \   i if i > -11.0 => \"B-\",\n            i if i > -12.0 => \"B-\",\n       \
    \     i if i > -13.0 => \"B-\",\n            i if i > -14.0 => \"B-\",\n     \
    \       i if i > -15.0 => \"B-\",\n            i if i > -16.0 => \"B-\",\n   \
    \         i if i > -17.0 => \"B-\",\n            i if i > -18.0 => \"B-\",\n \
    \           i if i > -19.0 => \"B-\",\n            i if i > -20.0 => \"B-\",\n\
    \            i if i > -21.0 => \"B-\",\n            i if i > -22.0 => \"B-\",\n\
    \            i if i > -23.0 => \"B-\",\n            i if i > -24.0 => \"B-\",\n\
    \            i if i > -25.0 => \"B-\",\n            i if i > -26.0 => \"B-\",\n\
    \            i if i > -27.0 => \"B-\",\n            i if i > -28.0 => \"B-\",\n\
    \            i if i > -29.0 => \"B-\",\n            i if i > -30.0 => \"B-\",\n\
    \            i if i > -31.0 => \"B-\",\n            i if i > -32.0 => \"B-\",\n\
    \            i if i > -33.0 => \"B-\",\n            i \n}\n\nfn main() {\n   \
    \ let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp3qskrthb.rs:83:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n25 |     for i in grades.iter() {\n   |                            - unclosed\
    \ delimiter\n26 |         let letter = match i {\n   |                       \
    \       - this delimiter might not be properly closed...\n...\n73 | }\n   | -\
    \ ...as it matches this but it has different indentation\n...\n83 | }\n   |  \
    \ ^\n\nerror: expected one of `=>`, `@`, `if`, or `|`, found `}`\n  --> /tmp/tmp3qskrthb.rs:73:1\n\
    \   |\n72 |             i \n   |              - expected one of `=>`, `@`, `if`,\
    \ or `|`\n73 | }\n   | ^ unexpected token\n\nerror: expected one of `.`, `;`,\
    \ `?`, `else`, or an operator, found keyword `fn`\n  --> /tmp/tmp3qskrthb.rs:75:1\n\
    \   |\n73 | }\n   |  - expected one of `.`, `;`, `?`, `else`, or an operator\n\
    74 | \n75 | fn main() {\n   | ^^ unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3qskrthb.rs:25:5\n   |\n22 |   fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \       ----------- expected `Vec<String>` because of return type\n...\n25 | /\
    \     for i in grades.iter() {\n26 | |         let letter = match i {\n27 | |\
    \             0 => \"E\",\n28 | |             i if i > 5.0 => \"D-\",\n...  |\n\
    82 | |     assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"\
    D-\")]);\n83 | | }\n   | |__^ expected struct `Vec`, found `()`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let grades_len\
    \ = grades_copy.len();\n\n    if grades_len == 0 {\n        grades_copy = vec![0.0f64];\n\
    \    }\n\n    if grades_len % 2 == 0 {\n        grades_copy = grades_copy.to_owned();\n\
    \    }\n\n    let mut letter_grades = vec![];\n\n    for grade in grades_copy\
    \ {\n        let mut min_grade = grade;\n        let mut max_grade = grade;\n\n\
    \        for _ in 0..(grades_len / 2) {\n            match min_grade {\n     \
    \           Some(min_grade) => { min_grade = Some(min_grade + 1.0); },\n     \
    \           None => { min_grade = None; },\n            };\n\n            match\
    \ max_grade {\n                Some(max_grade) => { max_grade = Some(max_grade\
    \ - 1.0); },\n                None => { max_grade = None; },\n            };\n\
    \        }\n\n        if min_grade < 0.0 || max_grade < 0.0 || min_grade > max_grade\
    \ {\n            letter_grades.push(String::from(\"E\"));\n        } else {\n\
    \            match min_grade {\n                Some(min_grade) => { letter_grades.push(String::from(\"\
    D+\")); },\n                None => { letter_grades.push(String::from(\"D-\"));\
    \ },\n            };\n\n            match max_grade {\n                Some(max_grade)\
    \ => { letter_grades.push(String::from(\"D+\")); },\n                None => {\
    \ letter_grades.push(String::from(\"D-\")); },\n            };\n\n           \
    \ match min_grade {\n                Some(min_grade) => { letter_grades.push(String::from(\"\
    C+\")); },\n                None => { letter_grades.push(String::from(\"C\"));\
    \ },\n            };\n\n            match max_grade {\n                Some(max_grade)\
    \ => { letter_grades.push(String::from(\"C-\")); },\n                None => {\
    \ letter_grades.push(String::from(\"C\")); },\n            };\n\n            match\
    \ min_grade {\n                Some(min_grade) => { letter_grades.push(String::from(\"\
    B+\")); },\n                None => { letter_grades.push(String::from(\"B\"));\
    \ },\n            };\n\n            match max_grade {\n                Some(max_grade)\
    \ => { letter_grades.push(String::from(\"B-\")); },\n                None => {\
    \ letter_grades.push(String::from(\"B\")); },\n            };\n\n            match\
    \ min_grade {\n                Some(min_grade) => { letter_grades.push(String::from(\"\
    A\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmple8bhbwv.rs:96:83\n\
    \   |\n96 |       assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"\
    ), String::from(\"D-\")]);\n   |  ___________________________________________________________________________________^\n\
    97 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        let mut i = 0;\n        while i < grade.len() {\n        \
    \    let mut min_gpa = grade[0];\n            for i in 1..grade.len() {\n    \
    \            let mut gpa = grade[i];\n                if gpa < min_gpa {\n   \
    \                 min_gpa = gpa;\n                }\n            }\n         \
    \   letter_grades.push(min_gpa + \"+\");\n            if min_gpa > grade[0] {\n\
    \                letter_grades.push(min_gpa - \"-\");\n            }\n       \
    \     i += 1;\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmp_gxkdpud.rs:26:25\n   |\n26 |         while i < grade.len()\
    \ {\n   |                         ^^^ help: there is an associated function with\
    \ a similar name: `ln`\n\nerror[E0608]: cannot index into a value of type `f64`\n\
    \  --> /tmp/tmp_gxkdpud.rs:27:31\n   |\n27 |             let mut min_gpa = grade[0];\n\
    \   |                               ^^^^^^^^\n\nerror[E0599]: no method named\
    \ `len` found for type `f64` in the current scope\n  --> /tmp/tmp_gxkdpud.rs:28:31\n\
    \   |\n28 |             for i in 1..grade.len() {\n   |                      \
    \         ^^^ help: there is an associated function with a similar name: `ln`\n\
    \nerror[E0608]: cannot index into a value of type `f64`\n  --> /tmp/tmp_gxkdpud.rs:29:31\n\
    \   |\n29 |                 let mut gpa = grade[i];\n   |                    \
    \           ^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `f64`\n\
    \  --> /tmp/tmp_gxkdpud.rs:35:26\n   |\n35 |             if min_gpa > grade[0]\
    \ {\n   |                          ^^^^^^^^\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec = vec![\"E\"];\n    for grade in grades\
    \ {\n        let mut grades_vec_temp = vec![];\n        for gp in (0..=grade).step_by(4)\
    \ {\n            let mut grades_vec_temp2 = vec![];\n            match gp%4{\n\
    \                0 => grades_vec_temp2.push(String::from(\"D-\")),\n         \
    \       1 => grades_vec_temp2.push(String::from(\"D+\")),\n                2 =>\
    \ grades_vec_temp2.push(String::from(\"D\")),\n                3 => grades_vec_temp2.push(String::from(\"\
    C\")),\n                _ => grades_vec_temp2.push(String::from(\"B\")),\n   \
    \         }\n            match gp/4{\n                0 => grades_vec_temp2.push(String::from(\"\
    B+\")),\n                1 => grades_vec_temp2.push(String::from(\"B\")),\n  \
    \              2 => grades_vec_temp2.push(String::from(\"B-\")),\n           \
    \     3 => grades_vec_temp2.push(String::from(\"B-\")),\n            }\n     \
    \       match gp/4+2{\n                0 => grades_vec_temp2.push(String::from(\"\
    A-\")),\n                1 => grades_vec_temp2.push(String::from(\"A+\")),\n \
    \               2 => grades_vec_temp2.push(String::from(\"A\")),\n           \
    \     3 => grades_vec_temp2.push(String::from(\"A\")),\n            }\n      \
    \      grades_vec_temp.push(grades_vec_temp2.join(\"\"));\n        }\n       \
    \ grades_vec.push(grades_vec_temp.join(\"\"));\n    }\n    grades_vec\n}\n\nfn\
    \ main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpik0tzohx.rs:26:24\n   |\n\
    26 |         for gp in (0..=grade).step_by(4) {\n   |                        ^^^^^\
    \ expected integer, found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpik0tzohx.rs:49:25\n\
    \   |\n49 |         grades_vec.push(grades_vec_temp.join(\"\"));\n   |       \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^\n   |                         |\n\
    \   |                         expected `&str`, found struct `String`\n   |   \
    \                      help: consider borrowing here: `&grades_vec_temp.join(\"\
    \")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpik0tzohx.rs:51:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n51 |     grades_vec\n   |     ^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\n    for i\
    \ in 0..grades.len() {\n        if grades[i] != 0.0f64 {\n            grades_vec.push(numerical_letter_grade(grades.subvec(i).unwrap()));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `subvec` found for struct `Vec<f64>` in the\
    \ current scope\n  --> /tmp/tmptcqp464i.rs:27:59\n   |\n27 |             grades_vec.push(numerical_letter_grade(grades.subvec(i).unwrap()));\n\
    \   |                                                           ^^^^^^ method\
    \ not found in `Vec<f64>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptcqp464i.rs:27:29\n\
    \   |\n27 |             grades_vec.push(numerical_letter_grade(grades.subvec(i).unwrap()));\n\
    \   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found struct `Vec`\n   |\n   = note: expected struct\
    \ `String`\n              found struct `Vec<String>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut gpas = grades.iter().map(|x| x / 4.0f64).collect::<Vec<f64>>();\n\
    \    gpas = gpas.iter().cloned().collect::<Vec<f64>>();\n    gpas.sort();\n  \
    \  let mut letter_grade = vec![];\n    for i in 0..gpas.len() {\n        if i\
    \ > 0 {\n            if gpas[i] > gpas[i-1] {\n                letter_grade.push(i);\n\
    \            }\n        }\n    }\n    for _ in 0..gpas.len() {\n        letter_grade.push(\"\
    E\");\n    }\n    letter_grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpez8c3icp.rs:25:10\n\
    \    |\n25  |     gpas.sort();\n    |          ^^^^ the trait `Ord` is not implemented\
    \ for `f64`\n    |\n    = help: the following other types implement trait `Ord`:\n\
    \              i128\n              i16\n              i32\n              i64\n\
    \              i8\n              isize\n              u128\n              u16\n\
    \            and 4 others\nnote: required by a bound in `slice::<impl [T]>::sort`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpez8c3icp.rs:35:27\n   |\n35 |\
    \         letter_grade.push(\"E\");\n   |                           ^^^ expected\
    \ `usize`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpez8c3icp.rs:37:5\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                ----------- expected `Vec<String>`\
    \ because of return type\n...\n37 |     letter_grade\n   |     ^^^^^^^^^^^^ expected\
    \ struct `String`, found `usize`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<usize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let gpa: f64 = grades.sum();\n    let mut grades: Vec<String>\
    \ = vec![];\n    let mut prev: f64;\n    let mut next: f64;\n    let mut count:\
    \ u32 = 0;\n    for grade in grades.iter() {\n        if prev != grade {\n   \
    \         if let Ok(mut prev) = prev {\n                if grade >= prev {\n \
    \                   grades.push(format!(\"{}+\", count));\n                } else\
    \ {\n                    grades.push(format!(\"{}-\", count));\n             \
    \   }\n            } else {\n                grades.push(format!(\"{}\", count));\n\
    \            }\n            prev = grade;\n            count = 1;\n        } else\
    \ if grade >= prev {\n            count += 1;\n        }\n        next = grade;\n\
    \    }\n    if let Ok(mut prev) = prev {\n        if grade >= prev {\n       \
    \     grades.push(format!(\"{}+\", count));\n        } else {\n            grades.push(format!(\"\
    {}-\", count));\n        }\n    } else {\n        grades.push(format!(\"{}\",\
    \ count));\n    }\n    grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `grade` in this scope\n  --> /tmp/tmpick3dzas.rs:47:12\n\
    \   |\n47 |         if grade >= prev {\n   |            ^^^^^ help: a local variable\
    \ with a similar name exists: `grades`\n\nerror[E0599]: `Vec<f64>` is not an iterator\n\
    \   --> /tmp/tmpick3dzas.rs:23:27\n    |\n23  |       let gpa: f64 = grades.sum();\n\
    \    |                             ^^^ `Vec<f64>` is not an iterator\n    |\n\
    \    = note: the following trait bounds were not satisfied:\n            `Vec<f64>:\
    \ Iterator`\n            which is required by `&mut Vec<f64>: Iterator`\n    \
    \        `[f64]: Iterator`\n            which is required by `&mut [f64]: Iterator`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpick3dzas.rs:29:20\n   |\n29 |\
    \         if prev != grade {\n   |                    ^^^^^ expected `f64`, found\
    \ `&String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpick3dzas.rs:30:20\n\
    \   |\n30 |             if let Ok(mut prev) = prev {\n   |                   \
    \ ^^^^^^^^^^^^   ---- this expression has type `f64`\n   |                   \
    \ |\n   |                    expected `f64`, found enum `Result`\n   |\n   = note:\
    \ expected type `f64`\n              found enum `Result<_, _>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpick3dzas.rs:39:20\n   |\n25 |     let mut prev:\
    \ f64;\n   |                   --- expected due to this type\n...\n39 |      \
    \       prev = grade;\n   |                    ^^^^^ expected `f64`, found `&String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpick3dzas.rs:41:28\n   |\n41 |\
    \         } else if grade >= prev {\n   |                            ^^^^ expected\
    \ `&String`, found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpick3dzas.rs:44:16\n\
    \   |\n26 |     let mut next: f64;\n   |                   --- expected due to\
    \ this type\n...\n44 |         next = grade;\n   |                ^^^^^ expected\
    \ `f64`, found `&String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpick3dzas.rs:46:12\n\
    \   |\n46 |     if let Ok(mut prev) = prev {\n   |            ^^^^^^^^^^^^   ----\
    \ this expression has type `f64`\n   |            |\n   |            expected\
    \ `f64`, found"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ min_grade: f64 = grades.iter().min().unwrap();\n    let mut max_grade: f64 =\
    \ grades.iter().max().unwrap();\n    \n    if min_grade == 0.0 {\n        // the\
    \ min_grade is 0.0 that means no grade\n        // So just return empty vector\n\
    \        return grades_vec;\n    }\n    \n    // to find the number of students\
    \ she will grade for each grade\n    let mut count_of_students: f64 = min_grade;\n\
    \    let mut count_of_students_half: f64 = count_of_students / 2;\n    let mut\
    \ count_of_students_quarter: f64 = count_of_students / 4;\n    let mut count_of_students_half_quarter:\
    \ f64 = count_of_students_half / 2;\n\n    // to store the letter grade for each\
    \ student\n    let mut letter_grade: Vec<String> = vec![];\n    for grade in grades\
    \ {\n        if count_of_students > 0 {\n            if count_of_students_half\
    \ > 0 {\n                // to find grade for each quarter\n                if\
    \ count_of_students_quarter > 0 {\n                    let grade = grade - min_grade\
    \ + count_of_students_quarter;\n                    if grade < 0.0 {\n       \
    \                 grade = grade + 10.0;\n                    }\n             \
    \       letter_grade.push(\"A+\");\n                    if grade < 3.0 {\n   \
    \                     letter_grade.push(\"A\");\n                    } else if\
    \ grade < 3.7 {\n                        letter_grade.push(\"A-\");\n        \
    \            } else if grade < 4.0 {\n                        letter_grade.push(\"\
    B+\");\n                    } else if grade < 4.3 {\n                        letter_grade.push(\"\
    B\");\n                    } else if grade < 4.6 {\n                        letter_grade.push(\"\
    B-\");\n                    } else if grade < 5.0 {\n                        letter_grade.push(\"\
    C+\");\n                    } else if grade < 5.3 {\n                        letter_grade.push(\"\
    C\");\n                    } else if grade < 5.6 {\n                        letter_grade.push(\"\
    C-\");\n                    } else if grade < 6.0 {\n                        letter_grade.push(\"\
    D+\");\n                    } else if grade < 6.3 {\n                        letter_grade.push(\"\
    D\");\n                    } else if grade < 6.6 {\n                        letter_grade.push(\"\
    D-\");\n                    } else {\n                        letter_grade.push(\"\
    E\");\n                    }\n                    count_of_students = count_of_student\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpgrkc3gpc.rs:87:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n41 |     for grade in grades {\n   |                         - unclosed delimiter\n\
    42 |         if count_of_students > 0 {\n   |                                \
    \  - unclosed delimiter\n43 |             if count_of_students_half > 0 {\n  \
    \ |                                           - unclosed delimiter\n44 |     \
    \            // to find grade for each quarter\n45 |                 if count_of_students_quarter\
    \ > 0 {\n   |                                                  - this delimiter\
    \ might not be properly closed...\n...\n77 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n87 | }\n   |   ^\n\nerror[E0425]: cannot\
    \ find value `count_of_student` in this scope\n  --> /tmp/tmpgrkc3gpc.rs:76:41\n\
    \   |\n76 |                     count_of_students = count_of_student\n   |   \
    \                                      ^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `count_of_students`\n\nerror[E0277]: the trait bound\
    \ `f64: Ord` is not satisfied\n    --> /tmp/tmpgrkc3gpc.rs:24:44\n     |\n24 \
    \  |     let mut min_grade: f64 = grades.iter().min().unwrap();\n     |      \
    \                                      ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgrkc3gpc.rs:24:30\n   |\n24 |\
    \     let mut min_grade: f64 = grades.iter().min().unwrap();\n   |           \
    \             ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `&f64`\n\
    \   |                        |"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_sorted = grades.iter().sorted();\n    let\
    \ mut letter_grades = Vec::new();\n    \n    let mut previous_grade: f64 = 0.0;\n\
    \    let mut current_grade: f64 = 0.0;\n    \n    for grade in grades_sorted {\n\
    \        if current_grade == 0.0 { // first grade of the semester\n          \
    \  letter_grades.push(format!(\"{}\", grade));\n            current_grade = grade;\n\
    \            continue;\n        }\n        \n        if grade > previous_grade\
    \ { // continuing current grade\n            letter_grades.push(format!(\"{}+\"\
    , current_grade));\n            current_grade = grade;\n        } else { // beginning\
    \ a new grade\n            letter_grades.push(format!(\"{}\", current_grade));\n\
    \            current_grade = grade;\n        }\n        \n        previous_grade\
    \ = grade;\n    }\n    \n    // last letter grade\n    letter_grades.push(format!(\"\
    {}\", current_grade));\n    \n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpdw9dqo9b.rs:23:43\n   |\n23 |     let mut\
    \ grades_sorted = grades.iter().sorted();\n   |                              \
    \             ^^^^^^ method not found in `std::slice::Iter<'_, f64>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_letter = vec![];\n    for grade in grades\
    \ {\n        if grade >= 3.0 {\n            grades_letter.append(format!(\"A+\"\
    , grade));\n        } else if grade >= 2.0 {\n            grades_letter.append(format!(\"\
    B+\", grade));\n        } else if grade >= 1.4 {\n            grades_letter.append(format!(\"\
    B-\", grade));\n        } else if grade >= 1.0 {\n            grades_letter.append(format!(\"\
    C+\", grade));\n        } else if grade >= 0.7 { \n            grades_letter.append(format!(\"\
    C\", grade));\n        } else if grade >= 0.0 { \n            grades_letter.append(format!(\"\
    D-\", grade));\n        } else {\n            grades_letter.append(format!(\"\
    D\", grade));\n        }\n    }\n    return grades_letter;\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: argument never used\n  --> /tmp/tmpnd3_6rrx.rs:26:48\n   |\n26 |\
    \             grades_letter.append(format!(\"A+\", grade));\n   |            \
    \                              ----  ^^^^^ argument never used\n   |         \
    \                                 |\n   |                                    \
    \      formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpnd3_6rrx.rs:28:48\n\
    \   |\n28 |             grades_letter.append(format!(\"B+\", grade));\n   |  \
    \                                        ----  ^^^^^ argument never used\n   |\
    \                                          |\n   |                           \
    \               formatting specifier missing\n\nerror: argument never used\n \
    \ --> /tmp/tmpnd3_6rrx.rs:30:48\n   |\n30 |             grades_letter.append(format!(\"\
    B-\", grade));\n   |                                          ----  ^^^^^ argument\
    \ never used\n   |                                          |\n   |          \
    \                                formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmpnd3_6rrx.rs:32:48\n   |\n32 |             grades_letter.append(format!(\"\
    C+\", grade));\n   |                                          ----  ^^^^^ argument\
    \ never used\n   |                                          |\n   |          \
    \                                formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmpnd3_6rrx.rs:34:47\n   |\n34 |             grades_letter.append(format!(\"\
    C\", grade));\n   |                                          ---  ^^^^^ argument\
    \ never used\n   |                                          |\n   |          \
    \                                formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmpnd3_6rrx.rs:36:48\n   |\n36 |             grades_letter.append(format!(\"\
    D-\", grade));\n   |                                          ----  ^^^^^ argument\
    \ never used\n   |                                          |\n   |          \
    \                                formatting specifier missing\n\nerror: argument\
    \ never used\n  --> /tmp/tmpnd3_6rrx.rs:38:47\n   |\n38 |             grades_"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let grades = grades.iter().cloned();\n    let mut grades_iter\
    \ = grades.peekable();\n    let mut letter_grades = Vec::new();\n    grades_iter.try_fold(0.0,\
    \ |mut previous_grade, current_grade| {\n        let letter_grade = if current_grade\
    \ >= 4.0\n                            && previous_grade <= 3.7 \n            \
    \                    { 0 }\n                            else if current_grade\
    \ >= 3.7\n                            && previous_grade <= 3.3\n             \
    \                   { 1 }\n                            else if current_grade >=\
    \ 3.3 \n                            && previous_grade <= 3.0\n               \
    \                 { 2 }\n                            else if current_grade >=\
    \ 3.0\n                            && previous_grade <= 2.7 \n               \
    \                 { 3 }\n                            else if current_grade >=\
    \ 2.7\n                            && previous_grade <= 2.3\n                \
    \                { 4 }\n                            else if current_grade >= 2.3\n\
    \                            && previous_grade <= 2.0\n                      \
    \          { 5 }\n                            else if current_grade >= 2.0\n \
    \                           && previous_grade <= 1.7 \n                      \
    \          { 6 }\n                            else if current_grade >= 1.7\n \
    \                           && previous_grade <= 1.3\n                       \
    \         { 7 }\n                            else if current_grade >= 1.3\n  \
    \                          && previous_grade <= 1.0\n                        \
    \        { 8 }\n                            else { 9}; \n        letter_grades.push(&letter_grade\
    \ as char);\n        previous_grade\n    }).map(|x| x.to_string());\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `{float}: Try` is not satisfied\n    -->\
    \ /tmp/tmpqfh0ym4a.rs:26:17\n     |\n26   |     grades_iter.try_fold(0.0, |mut\
    \ previous_grade, current_grade| {\n     |                 ^^^^^^^^ the trait\
    \ `Try` is not implemented for `{float}`\n     |\nnote: required by a bound in\
    \ `try_fold`\n\nerror[E0689]: can't call method `map` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmpqfh0ym4a.rs:57:8\n   |\n57 |     }).map(|x| x.to_string());\n\
    \   |        ^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqfh0ym4a.rs:58:5\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                ----------- expected `Vec<String>`\
    \ because of return type\n...\n58 |     letter_grades\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `char`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<char>`\n\nerror[E0606]: casting `&{integer}`\
    \ as `char` is invalid\n  --> /tmp/tmpqfh0ym4a.rs:55:28\n   |\n55 |         letter_grades.push(&letter_grade\
    \ as char);\n   |                            -------------^^^^^^^^\n   |     \
    \                       |\n   |                            cannot cast `&{integer}`\
    \ as `char`\n   |                            help: dereference the expression:\
    \ `*&letter_grade`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308, E0606, E0689.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut highest_grade\
    \ = grades[0];\n    for grade in grades.iter() {\n        if grade > highest_grade\
    \ {\n            highest_grade = grade;\n        }\n    }\n    for grade in grades.iter()\
    \ {\n        if grade > highest_grade {\n            highest_grade = grade;\n\
    \        }\n    }\n    let mut letter_grade_level = highest_grade / 4.0;\n   \
    \ highest_grade -= (letter_grade_level * 4.0);\n    while letter_grade_level <\
    \ highest_grade {\n        letter_grade_level += 3.0;\n    }\n    if letter_grade_level\
    \ >= highest_grade {\n        letter_grade_level -= 3.0;\n    }\n    for grade\
    \ in grades.iter() {\n        if grade > letter_grade_level {\n            letter_grades.push(format!(\"\
    {}-\", grade - letter_grade_level));\n        }\n        if grade > letter_grade_level\
    \ {\n            letter_grades.push(format!(\"+{}\", grade - letter_grade_level));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpbasy4sil.rs:36:22\n\
    \   |\n36 |     highest_grade -= (letter_grade_level * 4.0);\n   |           \
    \           ^                        ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n36 -     highest_grade\
    \ -= (letter_grade_level * 4.0);\n36 +     highest_grade -= letter_grade_level\
    \ * 4.0;\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbasy4sil.rs:26:20\n\
    \   |\n26 |         if grade > highest_grade {\n   |                    ^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    expected `&f64`, found `f64`\n\
    \   |                    help: consider borrowing here: `&highest_grade`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbasy4sil.rs:27:29\n   |\n24 |     let mut highest_grade\
    \ = grades[0];\n   |                             --------- expected due to this\
    \ value\n...\n27 |             highest_grade = grade;\n   |                  \
    \           ^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n27 |             highest_grade = *grade;\n   |           \
    \                  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbasy4sil.rs:31:20\n\
    \   |\n31 |         if grade > highest_grade {\n   |                    ^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    expected `&f64`, found `f64`\n\
    \   |                    help: consider borrowing here: `&highest_grade`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbasy4sil.rs:32:29\n   |\n24 |     let mut highest_grade\
    \ = grades[0];\n   |                             --------- expected due to this\
    \ value\n...\n32 |             highest_grade = grade;\n   |                  \
    \           ^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n32 |             highest_grade = *grade;\n   |           \
    \                  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbasy4sil.rs:44:20\n\
    \   |\n44 |         if grade > letter_grade_level {\n   |                    ^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    e"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades\n        .iter()\n        .filter_map(|x| if x\
    \ <= 3.0 { \"A+\" } else if x >= 3.3 { \"A-\" } else { \"B+\" } else if x >= 2.7\
    \ { \"B\" } else if x >= 2.3 { \"B-\" } else if x >= 1.7 { \"C\" } else if x >=\
    \ 1.3 { \"C-\" } else if x >= 1.0 { \"D+\" } else if x >= 0.7 { \"D\" } else {\
    \ \"D-\" } else { \"E\" } else { \"E+\" })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found keyword\
    \ `else`\n  --> /tmp/tmpodkdggsi.rs:25:86\n   |\n25 | ...lse if x >= 3.3 { \"\
    A-\" } else { \"B+\" } else if x >= 2.7 { \"B\" } else if x >= 2.3 { \"B-\" }\
    \ else if x >= 1.7 { \"C\" } else if x >= 1.3 { ...\n   |                    \
    \                       ^^^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grade = vec![];\n    for grade in grades\
    \ {\n        let mut letter_grade_result = vec![];\n        let mut total_grades\
    \ = 0;\n        let mut previous_grade = 0;\n        let mut total_grades_result\
    \ = 0;\n        for grade_num in 0..grade.len() {\n            previous_grade\
    \ = grades[grade_num];\n            total_grades += grades[grade_num];\n     \
    \       total_grades_result += grades[grade_num] * grades[grade_num];\n      \
    \      if grade_num != grade.len() - 1 {\n                letter_grade_result.push(\"\
    A+\");\n            } else {\n                letter_grade_result.push(\"E\");\n\
    \            }\n        }\n        letter_grade.push(total_grades_result.to_string());\n\
    \        for grade_num in 0..grade.len() {\n            let total_grades = grades[grade_num];\n\
    \            let total_grades_result = total_grades * total_grades;\n        \
    \    if grade_num != grade.len() - 1 {\n                if total_grades == 0 {\n\
    \                    let letter_grade = String::from(\"D+\");\n              \
    \      letter_grade.to_lowercase();\n                    letter_grade.push(previous_grade.to_string());\n\
    \                    letter_grade.push(total_grades_result.to_string());\n   \
    \                 letter_grade.push(\"D-\");\n                } else {\n     \
    \               let letter_grade = String::from(\"D-\");\n                   \
    \ letter_grade.push(previous_grade.to_string());\n                    letter_grade.push(total_grades_result.to_string());\n\
    \                    letter_grade.push(\"D+\");\n                }\n         \
    \   } else {\n                if total_grades == 0 {\n                    let\
    \ letter_grade = String::from(\"D-\");\n                    letter_grade.to_lowercase();\n\
    \                    letter_grade.push(previous_grade.to_string());\n        \
    \            letter_grade.push(\"D+\");\n                } else {\n          \
    \          let letter_grade = String::from(\"D+\");\n                    letter_grade.push(previous_grade.to_string());\n\
    \                    letter_grade.push(\"D-\");\n                }\n         \
    \   }\n        }\n    }\n    letter_grade\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmp85o3mot1.rs:29:35\n   |\n29 |         for grade_num in\
    \ 0..grade.len() {\n   |                                   ^^^ help: there is\
    \ an associated function with a similar name: `ln`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp85o3mot1.rs:30:30\n   |\n27 |         let mut previous_grade\
    \ = 0;\n   |                                  - expected due to this value\n...\n\
    30 |             previous_grade = grades[grade_num];\n   |                   \
    \           ^^^^^^^^^^^^^^^^^ expected integer, found `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmp85o3mot1.rs:31:26\n   |\n31 |\
    \             total_grades += grades[grade_num];\n   |                       \
    \   ^^ no implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp85o3mot1.rs:32:33\n   |\n32 |             total_grades_result +=\
    \ grades[grade_num] * grades[grade_num];\n   |                               \
    \  ^^ no implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0599]: no method named `len` found for type\
    \ `f64` in the current scope\n  "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut output: Vec<String> = vec![];\n    let mut max_grade\
    \ = grades.max();\n    let mut min_grade = grades.min();\n    \n    let mut student_grades:\
    \ Vec<f64> = grades;\n    student_grades.sort();\n    \n    let mut current_grade:\
    \ f64 = grades[0];\n    \n    let mut student_grades_sum: f64 = student_grades[0]\
    \ + student_grades[1] + student_grades[2];\n    \n    let mut max_grade_percent:\
    \ f64 = grade_percentage(max_grade);\n    let mut min_grade_percent: f64 = grade_percentage(min_grade);\n\
    \    \n    let mut current_grade_percent: f64 = grade_percentage(current_grade);\n\
    \    \n    let mut current_grade_letter_grade: f64 = current_grade;\n    \n  \
    \  while current_grade_percent < 0.0 && student_grades_sum < 1.0\n    {\n    \
    \    current_grade_percent += current_grade_percent;\n        current_grade_letter_grade\
    \ += current_grade_letter_grade;\n        student_grades_sum += student_grades[2]\
    \ - student_grades[1] - student_grades[0];\n    }\n    \n    while student_grades_sum\
    \ > 1.0 {\n        let mut student_grade_sum: f64 = student_grades[0] + student_grades[1]\
    \ + student_grades[2];\n        \n        let mut grade_percent: f64 = grade_percentage(student_grade_sum);\n\
    \        \n        while grade_percent < 0.0 {\n            grade_percent += grade_percent;\n\
    \            \n            student_grade_sum += student_grades[2] - student_grades[1]\
    \ - student_grades[0];\n        }\n        \n        let mut grade_letter_grade:\
    \ f64 = grade_percentage(student_grade_sum);\n        \n        if grade_letter_grade\
    \ < current_grade_letter_grade {\n            current_grade_letter_grade = grade_letter_grade;\n\
    \        }\n        \n        student_grades_sum -= student_grade_sum;\n    }\n\
    \    \n    for i in 0..grades.len()\n    {\n        if student_grades[i] < 0.0\
    \ {\n            student_grades_sum += student_grades[i] - student_grades[i +\
    \ 1] - student_grades[i + 2];\n        }\n    }\n    \n    while student_grades_sum\
    \ > 0.0 {\n        let mut student_grade_sum: f64 = student_grade\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpwxv3yaem.rs:87:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n75 |     while student_grades_sum > 0.0 {\n   |                         \
    \           - this delimiter might not be properly closed...\n76 |         let\
    \ mut student_grade_sum: f64 = student_grade\n77 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n87 | }\n   |   ^\n\nerror: expected\
    \ `;`, found `}`\n  --> /tmp/tmpwxv3yaem.rs:76:55\n   |\n76 |         let mut\
    \ student_grade_sum: f64 = student_grade\n   |                               \
    \                        ^ help: add `;` here\n77 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find function `grade_percentage` in this scope\n  --> /tmp/tmpwxv3yaem.rs:34:38\n\
    \   |\n34 |     let mut max_grade_percent: f64 = grade_percentage(max_grade);\n\
    \   |                                      ^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `grade_percentage` in this scope\n\
    \  --> /tmp/tmpwxv3yaem.rs:35:38\n   |\n35 |     let mut min_grade_percent: f64\
    \ = grade_percentage(min_grade);\n   |                                      ^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `grade_percentage`\
    \ in this scope\n  --> /tmp/tmpwxv3yaem.rs:37:42\n   |\n37 |     let mut current_grade_percent:\
    \ f64 = grade_percentage(current_grade);\n   |                               \
    \           ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `grade_percentage` in this scope\n  --> /tmp/tmpwxv3yaem.rs:51:38\n\
    \   |\n51 |         let mut grade_percent: f64 = grade_percentage(student_grade_sum);\n\
    \   |                                      ^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `grade_percentage` in this scope\n\
    \  --> /tmp/tmpwxv3yaem.rs:59:43\n   |\n59 |         let mut grade_letter_grade:\
    \ f64 = grade_percentage(student_grade_sum);\n   |                           \
    \        "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = vec![];\n    let mut gpa_sum:\
    \ f64 = 0.0;\n    for grade in grades {\n        gpa_sum += grade;\n        if\
    \ gpa_sum > 9.0 {\n            result.push(\"A-\");\n            gpa_sum -= 9.0;\n\
    \        } else if gpa_sum > 6.0 {\n            result.push(\"B-\");\n       \
    \     gpa_sum -= 6.0;\n        } else if gpa_sum > 3.0 {\n            result.push(\"\
    B-\");\n            gpa_sum -= 3.0;\n        } else if gpa_sum > 0.0 {\n     \
    \       result.push(\"B-\");\n            gpa_sum -= 0.0;\n        } else if gpa_sum\
    \ < 0.3 {\n            result.push(\"C-\");\n            gpa_sum += 0.3;\n   \
    \     } else if gpa_sum < 0.7 {\n            result.push(\"C+\");\n          \
    \  gpa_sum += 0.7;\n        } else if gpa_sum < 1.1 {\n            result.push(\"\
    C-\");\n            gpa_sum += 1.1;\n        } else if gpa_sum < 1.7 {\n     \
    \       result.push(\"C+\");\n            gpa_sum += 1.7;\n        } else if gpa_sum\
    \ < 2.3 {\n            result.push(\"B-\");\n            gpa_sum += 2.3;\n   \
    \     } else if gpa_sum < 2.7 {\n            result.push(\"B+\");\n          \
    \  gpa_sum += 2.7;\n        } else if gpa_sum < 3.0 {\n            result.push(\"\
    B+\");\n            gpa_sum += 3.0;\n        } else if gpa_sum < 3.3 {\n     \
    \       result.push(\"B+\");\n            gpa_sum += 3.3;\n        } else if gpa_sum\
    \ < 3.7 {\n            result.push(\"A+\");\n            gpa_sum += 3.7;\n   \
    \     } else if gpa_sum < 4.0 {\n            result.push(\"A+\");\n          \
    \  gpa_sum += 4.0;\n        } else if gpa_sum < 4.3 {\n            result.push(\"\
    A+\");\n            gpa_sum += 4.3;\n        } else if gpa_sum < 4.7 {\n     \
    \       result.push(\"A+\");\n            gpa_sum += 4.7;\n        } else if gpa_sum\
    \ < 5.0 {\n            result.push(\"A+\");\n            gpa_sum += 5.0;\n   \
    \     } else if gpa_sum < 5.3 {\n            result.push(\"A+\");\n          \
    \  gpa_sum += 5.3;\n        } else if gpa_sum < 5.7 {\n            result.push(\"\
    A+\");\n            gpa_sum += 5.7;\n        } else if gpa_sum < 6.0 {\n     \
    \       result.push(\"A+\");\n            gpa_sum += 6.0;\n        } else if gpa_sum\
    \ < 6.3 {\n            result.push(\"A\n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmp_758inyg.rs:98:83\n\
    \   |\n98 |       assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"\
    ), String::from(\"D-\")]);\n   |  ___________________________________________________________________________________^\n\
    99 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades = grades.clone();\n    let mut letter_grades\
    \ = vec![String::new(); grades.len()];\n    \n    let mut gpa = min(grades);\n\
    \    let mut a = gpa;\n    while a > 0.0 {\n        \n        if a >= 4.0 {\n\
    \            letter_grades[0] += \"+\";\n        }\n        \n        if a >=\
    \ 3.7 {\n            letter_grades[0] += \"A\";\n        }\n        \n       \
    \ if a >= 3.3 {\n            letter_grades[0] += \"A-\";\n        }\n        \n\
    \        if a >= 3.0 {\n            letter_grades[1] += \"B+\";\n        }\n \
    \       \n        if a >= 2.7 {\n            letter_grades[1] += \"B\";\n    \
    \    }\n        \n        if a >= 2.3 {\n            letter_grades[1] += \"B-\"\
    ;\n        }\n        \n        if a >= 2.0 {\n            letter_grades[2] +=\
    \ \"C+\";\n        }\n        \n        if a >= 1.7 {\n            letter_grades[2]\
    \ += \"C\";\n        }\n        \n        if a >= 1.3 {\n            letter_grades[3]\
    \ += \"C-\";\n        }\n        \n        if a >= 1.0 {\n            letter_grades[4]\
    \ += \"D+\";\n        }\n        \n        if a >= 0.7 {\n            letter_grades[4]\
    \ += \"D\";\n        }\n        \n        if a >= 0.0 {\n            letter_grades[4]\
    \ += \"D-\";\n        }\n        \n        a -= gpa;\n        gpa -= 1.0; // gpa\
    \ = gpa - 1;\n    }\n    \n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpnl6vzrfd.rs:26:19\n\
    \   |\n26 |     let mut gpa = min(grades);\n   |                   ^^^\n...\n\
    85 | fn main() {\n   | --------- similarly named function `main` defined here\n\
    \   |\nhelp: a function with a similar name exists\n   |\n26 |     let mut gpa\
    \ = main(grades);\n   |                   ~~~~\nhelp: consider importing this\
    \ function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_sorted = grades.iter().cloned().collect::<Vec<f64>>();\n\
    \    grades_sorted.sort_unstable();\n    let mut grades_sorted_str = grades_sorted.to_string();\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpx7229ynv.rs:78:1\n   |\n78\
    \ | }\n   | ^\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n \
    \   --> /tmp/tmpx7229ynv.rs:24:19\n     |\n24   |     grades_sorted.sort_unstable();\n\
    \     |                   ^^^^^^^^^^^^^ the trait `Ord` is not implemented for\
    \ `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\nnote: required by a bound in `core::slice::<impl\
    \ [T]>::sort_unstable`\n\nerror[E0599]: `Vec<f64>` doesn't implement `std::fmt::Display`\n\
    \   --> /tmp/tmpx7229ynv.rs:25:47\n    |\n25  |       let mut grades_sorted_str\
    \ = grades_sorted.to_string();\n    |                                        \
    \         ^^^^^^^^^ `Vec<f64>` cannot be formatted with the default formatter\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Vec<f64>: std::fmt::Display`\n            which is required by `Vec<f64>:\
    \ ToString`\n            `[f64]: std::fmt::Display`\n            which is required\
    \ by `[f64]: ToString`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letters = vec![\"\".to_string()];\n    for grade\
    \ in grades {\n        if grade < 3.0 {\n            letters.push(format!(\"A+\"\
    , grade));\n        } else if grade < 3.3 {\n            letters.push(format!(\"\
    A\", grade));\n        } else if grade < 3.7 {\n            letters.push(format!(\"\
    A-\", grade));\n        } else if grade < 4.0 {\n            letters.push(format!(\"\
    B+\", grade));\n        } else if grade < 4.3 {\n            letters.push(format!(\"\
    B\", grade));\n        } else if grade < 4.7 {\n            letters.push(format!(\"\
    B-\", grade));\n        } else if grade < 5.0 {\n            letters.push(format!(\"\
    C+\", grade));\n        } else if grade < 5.3 {\n            letters.push(format!(\"\
    C\", grade));\n        } else if grade < 5.7 {\n            letters.push(format!(\"\
    C-\", grade));\n        } else if grade < 6.0 {\n            letters.push(format!(\"\
    D+\", grade));\n        } else if grade < 6.3 {\n            letters.push(format!(\"\
    D\", grade));\n        } else if grade < 6.7 {\n            letters.push(format!(\"\
    D-\", grade));\n        } else if grade < 7.0 {\n            letters.push(format!(\"\
    E\", grade));\n        } else {\n            letters.push(format!(\"F\", grade));\n\
    \        }\n    }\n    letters\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: argument never used\n  --> /tmp/tmp8p_z83kj.rs:26:40\n   |\n26 |\
    \             letters.push(format!(\"A+\", grade));\n   |                    \
    \              ----  ^^^^^ argument never used\n   |                         \
    \         |\n   |                                  formatting specifier missing\n\
    \nerror: argument never used\n  --> /tmp/tmp8p_z83kj.rs:28:39\n   |\n28 |    \
    \         letters.push(format!(\"A\", grade));\n   |                         \
    \         ---  ^^^^^ argument never used\n   |                               \
    \   |\n   |                                  formatting specifier missing\n\n\
    error: argument never used\n  --> /tmp/tmp8p_z83kj.rs:30:40\n   |\n30 |      \
    \       letters.push(format!(\"A-\", grade));\n   |                          \
    \        ----  ^^^^^ argument never used\n   |                               \
    \   |\n   |                                  formatting specifier missing\n\n\
    error: argument never used\n  --> /tmp/tmp8p_z83kj.rs:32:40\n   |\n32 |      \
    \       letters.push(format!(\"B+\", grade));\n   |                          \
    \        ----  ^^^^^ argument never used\n   |                               \
    \   |\n   |                                  formatting specifier missing\n\n\
    error: argument never used\n  --> /tmp/tmp8p_z83kj.rs:34:39\n   |\n34 |      \
    \       letters.push(format!(\"B\", grade));\n   |                           \
    \       ---  ^^^^^ argument never used\n   |                                 \
    \ |\n   |                                  formatting specifier missing\n\nerror:\
    \ argument never used\n  --> /tmp/tmp8p_z83kj.rs:36:40\n   |\n36 |           \
    \  letters.push(format!(\"B-\", grade));\n   |                               \
    \   ----  ^^^^^ argument never used\n   |                                  |\n\
    \   |                                  formatting specifier missing\n\nerror:\
    \ argument never used\n  --> /tmp/tmp8p_z83kj.rs:38:40\n   |\n38 |           \
    \  letters.push(format!(\"C+\", grade));\n   |                               \
    \   ----  ^^^^^ argument never used\n   |                                  |\n\
    \   |                                  formatting specif"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades: Vec<String> = vec![];\n    for\
    \ grade in grades {\n        let mut grades_letter = vec![];\n        let mut\
    \ counter = 1;\n        for grade_char in \"AC+\"[grade as usize] {\n        \
    \    if grade > grade_char {\n                grade -= grade_char;\n         \
    \       grades_letter.push(\"D\");\n            } else {\n                grades_letter.push(\"\
    C\");\n                if counter == 1 { letter_grades.push(\"E\"); }\n      \
    \          counter = 0;\n            }\n        }\n        letter_grades.push(grade_letters);\n\
    \    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `grade_letters` in this scope\n  --> /tmp/tmpfk3zym_4.rs:37:28\n\
    \   |\n37 |         letter_grades.push(grade_letters);\n   |                 \
    \           ^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_letter`\n\
    \nerror[E0277]: the type `str` cannot be indexed by `usize`\n  --> /tmp/tmpfk3zym_4.rs:27:27\n\
    \   |\n27 |         for grade_char in \"AC+\"[grade as usize] {\n   |        \
    \                   ^^^^^^^^^^^^^^^^^^^^^ string indices are ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<str>` is not implemented for `usize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<usize>` for `str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfk3zym_4.rs:33:54\n   |\n33 |\
    \                 if counter == 1 { letter_grades.push(\"E\"); }\n   |       \
    \                                               ^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                               \
    \       |\n   |                                                      expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades = grades.clone();\n    \n    // Get the\
    \ number of grades needed \n    let num_grades = grades.iter().filter(|&x| x ==\
    \ x).count() + 1;\n    // Calculate the average of the grades\n    let avg_grade\
    \ = grades.iter().filter(|&x| x == x).sum() / num_grades;\n    \n    // Create\
    \ a Vec<String> and return the grade \n    grades.iter().filter(|&x| x == x).fold(\"\
    \".to_string(), |mut grade_str, &x| {\n        if x < avg_grade {\n          \
    \  grade_str += \"A\";\n        } else if x < avg_grade * 0.8 {\n            grade_str\
    \ += \"B\";\n        } else if x < avg_grade * 0.7 {\n            grade_str +=\
    \ \"C\";\n        } else if x < avg_grade * 0.6 {\n            grade_str += \"\
    D\";\n        } else if x < avg_grade * 0.5 {\n            grade_str += \"E\"\
    ;\n        } else {\n            grade_str += \"F\";\n        }\n        grade_str\n\
    \    });\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaionf02s.rs:22:48\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grade = String::new();\n    for grade in\
    \ grades {\n        match grade {\n            0 => letter_grade.push(\"E\"),\n\
    \            1 => letter_grade.push(\"F\"),\n            2 => letter_grade.push(\"\
    F\"),\n            3 | 4 => letter_grade.push(\"F\"),\n            5 => letter_grade.push(\"\
    F\"),\n            _ => {\n                let letter_grade = grade as char;\n\
    \                letter_grade.to_string().chars().for_each(|c| {\n           \
    \         match c {\n                        'A' => letter_grade.push(\"+\"),\n\
    \                        'B' => letter_grade.push(\"-\"),\n                  \
    \      'C' => letter_grade.push(\"+\"),\n                        'D' => letter_grade.push(\"\
    -\"),\n                        'E' => letter_grade.push(\"+\"),\n            \
    \            'F' => letter_grade.push(\"0\"),\n                        _ => unimplemented!()\n\
    \                    }\n                });\n            }\n        }\n    }\n\
    \    vec![letter_grade]\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphsj410we.rs:26:13\n   |\n\
    25 |         match grade {\n   |               ----- this expression has type\
    \ `f64`\n26 |             0 => letter_grade.push(\"E\"),\n   |             ^\n\
    \   |             |\n   |             expected `f64`, found integer\n   |    \
    \         help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphsj410we.rs:27:13\n   |\n25 |         match grade {\n   |     \
    \          ----- this expression has type `f64`\n26 |             0 => letter_grade.push(\"\
    E\"),\n27 |             1 => letter_grade.push(\"F\"),\n   |             ^\n \
    \  |             |\n   |             expected `f64`, found integer\n   |     \
    \        help: use a float literal: `1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphsj410we.rs:28:13\n   |\n25 |         match grade {\n   |     \
    \          ----- this expression has type `f64`\n...\n28 |             2 => letter_grade.push(\"\
    F\"),\n   |             ^\n   |             |\n   |             expected `f64`,\
    \ found integer\n   |             help: use a float literal: `2.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphsj410we.rs:29:13\n   |\n25 |         match\
    \ grade {\n   |               ----- this expression has type `f64`\n...\n29 |\
    \             3 | 4 => letter_grade.push(\"F\"),\n   |             ^\n   |   \
    \          |\n   |             expected `f64`, found integer\n   |           \
    \  help: use a float literal: `3.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphsj410we.rs:29:17\n\
    \   |\n25 |         match grade {\n   |               ----- this expression has\
    \ type `f64`\n...\n29 |             3 | 4 => letter_grade.push(\"F\"),\n   | \
    \                ^\n   |                 |\n   |                 expected `f64`,\
    \ found integer\n   |                 help: use a float literal: `4.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphsj410we.rs:30:13\n   |\n25 |         match\
    \ grade {\n   |               ----- this expression has type `f64`\n...\n30 |\
    \             5 => letter_grade.push(\"F\"),\n   |             ^\n   |       \
    \      |\n   |             expected `f64`, found integer\n   |           "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letters: Vec<String> = Vec::new();\n\n    for\
    \ grade in grades {\n        if grade < 4.0 {\n            letters.push(format!(\"\
    A+\", grade));\n        } else if grade < 3.7 {\n            letters.push(format!(\"\
    A\", grade));\n        } else if grade < 3.3 {\n            letters.push(format!(\"\
    A-\", grade));\n        } else if grade < 3.0 {\n            letters.push(format!(\"\
    B+\", grade));\n        } else if grade < 2.7 {\n            letters.push(format!(\"\
    B\", grade));\n        } else if grade < 2.3 {\n            letters.push(format!(\"\
    B-\", grade));\n        } else if grade < 2.0 {\n            letters.push(format!(\"\
    C+\", grade));\n        } else if grade < 1.7 {\n            letters.push(format!(\"\
    C\", grade));\n        } else if grade < 1.3 {\n            letters.push(format!(\"\
    C-\", grade));\n        } else if grade < 1.0 {\n            letters.push(format!(\"\
    D+\", grade));\n        } else if grade < 0.7 {\n            letters.push(format!(\"\
    D\", grade));\n        } else if grade < 0.0 {\n            letters.push(format!(\"\
    D-\", grade));\n        } else {\n            letters.push(format!(\"E\", grade));\n\
    \        }\n    }\n\n    return letters;\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: argument never used\n  --> /tmp/tmp7s5es3e0.rs:27:40\n   |\n27 |\
    \             letters.push(format!(\"A+\", grade));\n   |                    \
    \              ----  ^^^^^ argument never used\n   |                         \
    \         |\n   |                                  formatting specifier missing\n\
    \nerror: argument never used\n  --> /tmp/tmp7s5es3e0.rs:29:39\n   |\n29 |    \
    \         letters.push(format!(\"A\", grade));\n   |                         \
    \         ---  ^^^^^ argument never used\n   |                               \
    \   |\n   |                                  formatting specifier missing\n\n\
    error: argument never used\n  --> /tmp/tmp7s5es3e0.rs:31:40\n   |\n31 |      \
    \       letters.push(format!(\"A-\", grade));\n   |                          \
    \        ----  ^^^^^ argument never used\n   |                               \
    \   |\n   |                                  formatting specifier missing\n\n\
    error: argument never used\n  --> /tmp/tmp7s5es3e0.rs:33:40\n   |\n33 |      \
    \       letters.push(format!(\"B+\", grade));\n   |                          \
    \        ----  ^^^^^ argument never used\n   |                               \
    \   |\n   |                                  formatting specifier missing\n\n\
    error: argument never used\n  --> /tmp/tmp7s5es3e0.rs:35:39\n   |\n35 |      \
    \       letters.push(format!(\"B\", grade));\n   |                           \
    \       ---  ^^^^^ argument never used\n   |                                 \
    \ |\n   |                                  formatting specifier missing\n\nerror:\
    \ argument never used\n  --> /tmp/tmp7s5es3e0.rs:37:40\n   |\n37 |           \
    \  letters.push(format!(\"B-\", grade));\n   |                               \
    \   ----  ^^^^^ argument never used\n   |                                  |\n\
    \   |                                  formatting specifier missing\n\nerror:\
    \ argument never used\n  --> /tmp/tmp7s5es3e0.rs:39:40\n   |\n39 |           \
    \  letters.push(format!(\"C+\", grade));\n   |                               \
    \   ----  ^^^^^ argument never used\n   |                                  |\n\
    \   |                                  formatting specif"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_sorted = grades.iter().cloned().sorted();\n\
    \    let mut result = vec![];\n\n    let mut min_grade : Option<f64> = None;\n\
    \    let mut max_grade : Option<f64> = None;\n    let mut gpa_max = grades_sorted.last().unwrap();\n\
    \    let mut gpa_min = grades_sorted.first().unwrap();\n\n    for grade in grades_sorted\
    \ {\n        let mut temp_gpa = grade;\n        let mut temp_letter = \"\";\n\n\
    \        // Calculate the gpa.\n        if temp_grade > gpa_max {\n          \
    \  temp_gpa = gpa_max;\n        }\n\n        if temp_grade < gpa_min {\n     \
    \       temp_gpa = gpa_min;\n        }\n\n        // Calculate the letter grade.\n\
    \        if temp_grade > gpa_min {\n            temp_letter = \"A+\";\n      \
    \  } else if temp_grade < gpa_max {\n            temp_letter = \"A\";\n      \
    \  } else if temp_grade == gpa_max {\n            temp_letter = \"E\";\n     \
    \   } else {\n            temp_letter = \"D-\";\n        }\n\n        // Add grade\
    \ to result.\n        result.push(temp_letter);\n    }\n\n    result\n}\n\nfn\
    \ main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `temp_grade` in this scope\n  --> /tmp/tmpdmct0c0p.rs:36:12\n\
    \   |\n36 |         if temp_grade > gpa_max {\n   |            ^^^^^^^^^^ help:\
    \ a local variable with a similar name exists: `temp_gpa`\n\nerror[E0425]: cannot\
    \ find value `temp_grade` in this scope\n  --> /tmp/tmpdmct0c0p.rs:40:12\n   |\n\
    40 |         if temp_grade < gpa_min {\n   |            ^^^^^^^^^^ help: a local\
    \ variable with a similar name exists: `temp_gpa`\n\nerror[E0425]: cannot find\
    \ value `temp_grade` in this scope\n  --> /tmp/tmpdmct0c0p.rs:45:12\n   |\n45\
    \ |         if temp_grade > gpa_min {\n   |            ^^^^^^^^^^ help: a local\
    \ variable with a similar name exists: `temp_gpa`\n\nerror[E0425]: cannot find\
    \ value `temp_grade` in this scope\n  --> /tmp/tmpdmct0c0p.rs:47:19\n   |\n47\
    \ |         } else if temp_grade < gpa_max {\n   |                   ^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `temp_gpa`\n\nerror[E0425]:\
    \ cannot find value `temp_grade` in this scope\n  --> /tmp/tmpdmct0c0p.rs:49:19\n\
    \   |\n49 |         } else if temp_grade == gpa_max {\n   |                  \
    \ ^^^^^^^^^^ help: a local variable with a similar name exists: `temp_gpa`\n\n\
    error[E0599]: no method named `sorted` found for struct `Cloned` in the current\
    \ scope\n  --> /tmp/tmpdmct0c0p.rs:23:52\n   |\n23 |     let mut grades_sorted\
    \ = grades.iter().cloned().sorted();\n   |                                   \
    \                 ^^^^^^ method not found in `Cloned<std::slice::Iter<'_, f64>>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdmct0c0p.rs:59:5\n   |\n22 | fn\
    \ numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |            \
    \                                    ----------- expected `Vec<String>` because\
    \ of return type\n...\n59 |     result\n   |     ^^^^^^ expected struct `String`,\
    \ found `&str`\n   |\n   = note: expected struct `Vec<String>`\n             \
    \ found struct `Vec<&str>`\n\nerror: aborting due to 7 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades: Vec<String> = vec![];\n    for\
    \ grade in grades {\n        match grade {\n            4.0 => letter_grades.push(\"\
    A+\".to_string()),\n            > 3.7 => letter_grades.push(\"A\".to_string()),\n\
    \            > 3.3 => letter_grades.push(\"A-\".to_string()),\n            > 3.0\
    \ => letter_grades.push(\"B+\".to_string()),\n            > 2.7 => letter_grades.push(\"\
    B\".to_string()),\n            > 2.3 => letter_grades.push(\"B-\".to_string()),\n\
    \            > 2.0 => letter_grades.push(\"C+\".to_string()),\n            > 1.7\
    \ => letter_grades.push(\"C\".to_string()),\n            > 1.3 => letter_grades.push(\"\
    C-\".to_string()),\n            > 1.0 => letter_grades.push(\"D+\".to_string()),\n\
    \            > 0.7 => letter_grades.push(\"D\".to_string()),\n            > 0.0\
    \ => letter_grades.push(\"D-\".to_string()),\n            0.0 => letter_grades.push(\"\
    E\".to_string()),\n            _ => panic!(\"Something went wrong...\"),\n   \
    \     }\n    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected pattern, found `>`\n  --> /tmp/tmp5m70e8qk.rs:27:13\n \
    \  |\n27 |             > 3.7 => letter_grades.push(\"A\".to_string()),\n   | \
    \            ^ expected pattern\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = grades.iter().map(|f|\
    \ \n        if f > 0.0 {\n            if f < 3.0 {\n                format!(\"\
    A+\", f)\n            } else if f < 3.3 {\n                format!(\"A\", f)\n\
    \            } else if f < 3.7 {\n                format!(\"A-\", f)\n       \
    \     } else if f < 4.0 {\n                format!(\"B+\", f)\n            } else\
    \ if f < 2.7 {\n                format!(\"B\", f)\n            } else if f < 2.3\
    \ {\n                format!(\"B-\", f)\n            } else if f < 2.0 {\n   \
    \             format!(\"C+\", f)\n            } else if f < 1.7 {\n          \
    \      format!(\"C\", f)\n            } else if f < 1.3 {\n                format!(\"\
    C-\", f)\n            } else if f < 1.0 {\n                format!(\"D+\", f)\n\
    \            } else if f < 0.7 {\n                format!(\"D\", f)\n        \
    \    } else {\n                format!(\"D-\", f)\n            }\n        } else\
    \ {\n            format!(\"E\", f)\n        }\n    ).collect();\n    grades_vec.pop();\n\
    \    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: argument never used\n  --> /tmp/tmpr54at_c_.rs:26:31\n   |\n26 |\
    \                 format!(\"A+\", f)\n   |                         ----  ^ argument\
    \ never used\n   |                         |\n   |                         formatting\
    \ specifier missing\n\nerror: argument never used\n  --> /tmp/tmpr54at_c_.rs:28:30\n\
    \   |\n28 |                 format!(\"A\", f)\n   |                         ---\
    \  ^ argument never used\n   |                         |\n   |               \
    \          formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpr54at_c_.rs:30:31\n\
    \   |\n30 |                 format!(\"A-\", f)\n   |                         ----\
    \  ^ argument never used\n   |                         |\n   |               \
    \          formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpr54at_c_.rs:32:31\n\
    \   |\n32 |                 format!(\"B+\", f)\n   |                         ----\
    \  ^ argument never used\n   |                         |\n   |               \
    \          formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpr54at_c_.rs:34:30\n\
    \   |\n34 |                 format!(\"B\", f)\n   |                         ---\
    \  ^ argument never used\n   |                         |\n   |               \
    \          formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpr54at_c_.rs:36:31\n\
    \   |\n36 |                 format!(\"B-\", f)\n   |                         ----\
    \  ^ argument never used\n   |                         |\n   |               \
    \          formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpr54at_c_.rs:38:31\n\
    \   |\n38 |                 format!(\"C+\", f)\n   |                         ----\
    \  ^ argument never used\n   |                         |\n   |               \
    \          formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpr54at_c_.rs:40:30\n\
    \   |\n40 |                 format!(\"C\", f)\n   |                         ---\
    \  ^ argument never used\n   |                         |\n   |               \
    \          formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpr54at_c_.rs:42:31\n\
    \   "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let len = grades.len();\n    let mut grades = grades.iter().cloned();\n\
    \    grades.sort();\n    grades.reverse();\n\n    let mut letter_grades = Vec::new();\n\
    \    let mut gpas = Vec::new();\n\n    // We need to get gpas and letter_grades\n\
    \    // For this we are using an auxiliary array for both gpas and letter_grades\n\
    \    let mut grades_sum = 0;\n    let mut gpa_sum = 0.0;\n\n    for grade in grades\
    \ {\n        grades_sum += grade;\n        gpa_sum += grade * grade;\n    }\n\n\
    \    for grade in grades {\n        if grades_sum != 0.0 {\n            gpas.push(grade\
    \ / grades_sum);\n            letter_grades.push(match grade {\n             \
    \   0 => \"D\",\n                1 => \"D\",\n                2 => \"D\",\n  \
    \              3 => \"D-\", \n                4 => \"D-\", \n                5\
    \ => \"D-\", \n                6 => \"D-\", \n                7 => \"D-\", \n\
    \                8 => \"D-\", \n                9 => \"D-\", \n              \
    \  10 => \"D-\", \n                11 => \"D-\", \n                12 => \"D-\"\
    , \n                13 => \"D-\", \n                14 => \"D-\", \n         \
    \       15 => \"D-\", \n                16 => \"D-\", \n                17 =>\
    \ \"D-\", \n                18 => \"D-\", \n                19 => \"D-\", \n \
    \               20 => \"D-\", \n                21 => \"D-\", \n             \
    \   22 => \"D-\", \n                23 => \"D-\", \n                24 => \"D-\"\
    , \n                25 => \"D-\", \n                26 => \"D-\", \n         \
    \       27 => \"D-\", \n                28 => \"D-\", \n                29 =>\
    \ \"D-\", \n                30 => \"D-\", \n                31 => \"D-\", \n \
    \               32 => \"D-\", \n                33 => \"D-\", \n             \
    \   34 => \"D-\", \n                35 => \"D-\", \n                36 => \"D-\"\
    , \n                37 => \"D-\", \n                38 => \"D-\", \n         \
    \       39 => \"D-\", \n                40 => \"D-\", \n                41 =>\
    \ \"D-\", \n                42 => \"D-\", \n                43 => \"D-\", \n \
    \               44 => \"D-\", \n                45 => \"D-\", \n             \
    \   46 => \"D-\", \n                47 => \"D-\", \n                48 => \"D-\"\
    , \n                49 \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpqkuyqib7.rs:105:3\n\
    \    |\n22  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n41  |     for grade in grades {\n    |                         - unclosed\
    \ delimiter\n42  |         if grades_sum != 0.0 {\n    |                     \
    \         - unclosed delimiter\n43  |             gpas.push(grade / grades_sum);\n\
    44  |             letter_grades.push(match grade {\n    |                    \
    \           - unclosed delimiter\n...\n105 | }\n    |   ^\n\nerror: expected one\
    \ of `...`, `..=`, `..`, `=>`, `if`, or `|`, found `}`\n  --> /tmp/tmpqkuyqib7.rs:95:1\n\
    \   |\n94 |                 49 \n   |                   - expected one of `...`,\
    \ `..=`, `..`, `=>`, `if`, or `|`\n95 | }\n   | ^ unexpected token\n\nerror: expected\
    \ one of `)`, `,`, `.`, `?`, or an operator, found keyword `fn`\n  --> /tmp/tmpqkuyqib7.rs:97:1\n\
    \   |\n95 | }\n   |  - expected one of `)`, `,`, `.`, `?`, or an operator\n96\
    \ | \n97 | fn main() {\n   | ^^ unexpected token\n\nerror: aborting due to 3 previous\
    \ errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let gpa = grades.iter().map(|x| *x).sum();\n    let mut\
    \ letter_grades = vec![];\n    let mut i = 1;\n    while i < gpa.trunc() + 1 {\n\
    \        letter_grades.push(format!(\"{}+\", i));\n        i += 1;\n    }\n  \
    \  i = 1;\n    while i <= gpa.trunc() + 1 {\n        if i <= gpa {\n         \
    \   letter_grades.push(format!(\"{}\", i));\n        }\n        i += 1;\n    }\n\
    \    letter_grades.push(format!(\"{}\", 0));\n    letter_grades\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp39n4vwou.rs:26:15\n\
    \   |\n23 |     let gpa = grades.iter().map(|x| *x).sum();\n   |         --- consider\
    \ giving `gpa` a type\n...\n26 |     while i < gpa.trunc() + 1 {\n   |       \
    \        ^^^ cannot infer type\n   |\n   = note: type must be known at this point\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string: Vec<String> = vec![\"\".to_string()];\n\
    \    let mut grades_num: Vec<f64> = grades.clone();\n\n    // TODO: write your\
    \ solution here\n    grades_string.push(\"E\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpqv9678go.rs:79:83\n\
    \   |\n79 |       assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"\
    ), String::from(\"D-\")]);\n   |  ___________________________________________________________________________________^\n\
    80 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = String::new();\n    for grade\
    \ in grades.iter() {\n        let grade = match grade {\n            4.0 => \"\
    A+\",\n            > 3.7 => \"A\",\n            > 3.3 => \"A-\",\n           \
    \ > 3.0 => \"B+\",\n            > 2.7 => \"B\",\n            > 2.3 => \"B-\",\n\
    \            > 2.0 => \"C+\",\n            > 1.7 => \"C\",\n            > 1.3\
    \ => \"C-\",\n            > 1.0 => \"D+\",\n            > 0.7 => \"D\",\n    \
    \        > 0.0 => \"D-\",\n            0.0 => \"E\"\n        };\n        grades_string.push_str(&grade);\n\
    \    }\n    grades_string.chars().collect()\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected pattern, found `>`\n  --> /tmp/tmpb5xvq0a3.rs:27:13\n \
    \  |\n27 |             > 3.7 => \"A\",\n   |             ^ expected pattern\n\n\
    error[E0277]: a value of type `Vec<String>` cannot be built from an iterator over\
    \ elements of type `char`\n    --> /tmp/tmpb5xvq0a3.rs:42:27\n     |\n42   | \
    \    grades_string.chars().collect()\n     |                           ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=char>`\n\
    \     |\n     = help: the trait `FromIterator<char>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut total_grade = 0.0; \n    let mut total_letter_grade\
    \ = String::new(); \n\n    for grade in grades {\n        if grade < 3.0 {\n \
    \           total_grade += grade as f64;\n        }\n    }\n\n    if total_grade\
    \ < 0.0 {\n        total_grade += 0.0;\n    }\n\n    let mut current_grade = 0.0;\n\
    \n    for grade in grades {\n        current_grade += grade as f64;\n\n      \
    \  if current_grade > total_grade {\n            let letter_grade = total_letter_grade\
    \ + &\"-\";\n            total_grade = current_grade;\n            total_letter_grade\
    \ = letter_grade;\n        } else {\n            let letter_grade = total_letter_grade\
    \ + &\"+\";\n            total_grade = current_grade;\n            total_letter_grade\
    \ = letter_grade;\n        }\n    }\n\n    vec![total_letter_grade]\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `grades`\n   --> /tmp/tmpytdtctdi.rs:38:18\n\
    \    |\n22  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                           ------ move occurs because `grades` has type `Vec<f64>`,\
    \ which does not implement the `Copy` trait\n...\n26  |     for grade in grades\
    \ {\n    |                  ------ `grades` moved due to this implicit call to\
    \ `.into_iter()`\n...\n38  |     for grade in grades {\n    |                \
    \  ^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `grades`\nhelp: consider iterating over\
    \ a slice of the `Vec<f64>`'s content to avoid moving into the `for` loop\n  \
    \  |\n26  |     for grade in &grades {\n    |                  +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().filter(|f| f >= 0.0).step(1.0).map(|grade|\
    \ {\n        match grade {\n            0..1.0 => String::from(\"D\"),\n     \
    \       1.0 => String::from(\"C\"),\n            2.0 => String::from(\"B\"),\n\
    \            3.0 => String::from(\"A\"),\n            3.1 => String::from(\"A-\"\
    ),\n            3.2 => String::from(\"B+\"),\n            3.3 => String::from(\"\
    B\"),\n            3.4 => String::from(\"B-\"),\n            3.5 => String::from(\"\
    C+\"),\n            3.6 => String::from(\"C\"),\n            3.7 => String::from(\"\
    C+\"),\n            3.8 => String::from(\"C-\"),\n            3.9 => String::from(\"\
    D+\"),\n            4.0 => String::from(\"E\"),\n            _ => String::from(\"\
    unknown\")\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmp91pmvqr4.rs:25:13\n\
    \   |\n25 |             0..1.0 => String::from(\"D\"),\n   |             ^^^^^^\n\
    \   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp91pmvqr4.rs:23:35\n\
    \   |\n23 |     grades.iter().filter(|f| f >= 0.0).step(1.0).map(|grade| {\n \
    \  |                                   ^^^ expected `&&f64`, found floating-point\
    \ number\n\nerror[E0599]: no method named `step` found for struct `Filter` in\
    \ the current scope\n  --> /tmp/tmp91pmvqr4.rs:23:40\n   |\n23 |     grades.iter().filter(|f|\
    \ f >= 0.0).step(1.0).map(|grade| {\n   |                                    \
    \    ^^^^ method not found in `Filter<std::slice::Iter<'_, f64>, [closure@/tmp/tmp91pmvqr4.rs:23:26:\
    \ 23:38]>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp91pmvqr4.rs:25:16\n\
    \   |\n24 |         match grade {\n   |               ----- this expression has\
    \ type `{integer}`\n25 |             0..1.0 => String::from(\"D\"),\n   |    \
    \         -  ^^^ expected integer, found floating-point number\n   |         \
    \    |\n   |             this is of type `{integer}`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp91pmvqr4.rs:26:13\n   |\n24 |         match grade {\n \
    \  |               ----- this expression has type `{integer}`\n25 |          \
    \   0..1.0 => String::from(\"D\"),\n26 |             1.0 => String::from(\"C\"\
    ),\n   |             ^^^ expected integer, found floating-point number\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp91pmvqr4.rs:27:13\n   |\n24 |         match\
    \ grade {\n   |               ----- this expression has type `{integer}`\n...\n\
    27 |             2.0 => String::from(\"B\"),\n   |             ^^^ expected integer,\
    \ found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp91pmvqr4.rs:28:13\n\
    \   |\n24 |         match grade {\n   |               ----- this expression has\
    \ type `{integer}`\n...\n28 |             3.0 => String::from(\"A\"),\n   |  \
    \           ^^^ expected integer, found floating-point number\n\nerror[E0308]:\
    \ m"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    let gpas = grades.clone();\n\
    \n    // First we check for grade < 0 since it wouldn't make sense\n    if grade_is_negative(grades.clone())\
    \ {\n        gpas.push(0.0);\n    }\n\n    // Then we check if grade > 0 and if\
    \ so push letter grade\n    if grade_is_positive(gpas.clone()) {\n        let\
    \ mut first_letter = String::from(\"A\");\n        let mut last_letter = String::from(\"\
    A\");\n\n        // If the grade is between 3.0 and 3.7, we can use the letter\
    \ grade\n        // of the students\n        if grades.iter().any(|x| x >= 3.0\
    \ && x < 3.7) {\n            first_letter = match grades.iter().find(|x| x > 3.0\
    \ && x < 3.7) {\n                Some(x) => String::from(\"A\" + x.to_string()),\n\
    \                None => String::from(\"A\"),\n            };\n        }\n\n \
    \       // If the grade is between 3.3 to 3.7, we can use the letter grade\n \
    \       // of the students\n        if grades.iter().any(|x| x >= 3.3 && x < 3.7)\
    \ {\n            last_letter = match grades.iter().find(|x| x > 3.3 && x < 3.7)\
    \ {\n                Some(x) => String::from(\"A\" + x.to_string()),\n       \
    \         None => String::from(\"A\"),\n            };\n        }\n\n        //\
    \ If the grade is between 3.0 to 3.3, we can use the letter grade\n        //\
    \ of the students\n        if grades.iter().any(|x| x >= 3.0 && x < 3.3) {\n \
    \           first_letter = match grades.iter().find(|x| x > 3.0 && x < 3.3) {\n\
    \                Some(x) => String::from(\"B\" + x.to_string()),\n           \
    \     None => String::from(\"B\"),\n            };\n        }\n\n        // If\
    \ the grade is between 2.7 and 2.3, we can use the letter grade\n        // of\
    \ the students\n        if grades.iter().any(|x| x >= 2.7 && x < 2.3) {\n    \
    \        last_letter = match grades.iter().find(|x| x > 2.7 && x < 2.3) {\n  \
    \              Some(x) => String::from(\"B\" + x.to_string()),\n             \
    \   None => String::from(\"B\"),\n            };\n        }\n\n        // If the\
    \ grade is between 2.3 to 2.0, we can use the letter grade\n        // of the\
    \ students\n        if grades.iter().any(|x| x >= 2.3 && x < 2.7) {\n        \
    \    first_letter = match grades.iter().find(|x| x > 2.3 && x < 2.7) {\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpgekiy528.rs:86:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n32 |     if grade_is_positive(gpas.clone()) {\n   |                     \
    \                   - unclosed delimiter\n...\n74 |         if grades.iter().any(|x|\
    \ x >= 2.3 && x < 2.7) {\n   |                                               \
    \        - unclosed delimiter\n75 |             first_letter = match grades.iter().find(|x|\
    \ x > 2.3 && x < 2.7) {\n   |                                                \
    \                             - this delimiter might not be properly closed...\n\
    76 | }\n   | - ...as it matches this but it has different indentation\n...\n86\
    \ | }\n   |   ^\n\nerror: expected one of `.`, `;`, `?`, `}`, or an operator,\
    \ found keyword `fn`\n  --> /tmp/tmpgekiy528.rs:22:60\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \                 ^ unclosed delimiter\n...\n76 | }\n   |  -\n   |  |\n   |  expected\
    \ one of `.`, `;`, `?`, `}`, or an operator\n   |  help: `}` may belong here\n\
    77 | \n78 | fn main() {\n   | ^^ unexpected token\n\nerror[E0425]: cannot find\
    \ function `grade_is_negative` in this scope\n  --> /tmp/tmpgekiy528.rs:27:8\n\
    \   |\n27 |     if grade_is_negative(grades.clone()) {\n   |        ^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `grade_is_positive`\
    \ in this scope\n  --> /tmp/tmpgekiy528.rs:32:8\n   |\n32 |     if grade_is_positive(gpas.clone())\
    \ {\n   |        ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgekiy528.rs:38:39\n   |\n38 |         if grades.iter().any(|x|\
    \ x >= 3.0 && x < 3.7) {\n   |                                       ^^^\n   |\
    \                                       |\n   |                              \
    \         expected `&f64`, found floating-point number\n   |                 \
    \                      help: consider borrowing here: `&3.0`\n\nerror[E0308]: "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades: Vec<String> = vec![];\n    let\
    \ mut gpas = grades.iter().map(|f| f * 4.0).collect::<Vec<f64>>();\n    let mut\
    \ i = 0;\n    loop {\n        let index = gpas.len() - i;\n        if index <\
    \ 0 {\n            break;\n        }\n        let mut gpa = gpas[index].abs();\n\
    \        if gpa < 3.0 {\n            gpa += 4.0;\n        }\n        let letter_grade\
    \ = match gpa {\n            2.7 => \"A+\".to_string(),\n            2.3 => \"\
    A-\".to_string(),\n            2.0 => \"B+\".to_string(),\n            2.7 =>\
    \ \"B\".to_string(),\n            2.3 => \"B-\".to_string(),\n            2.0\
    \ => \"C+\".to_string(),\n            1.7 => \"C\".to_string(),\n            1.3\
    \ => \"C-\".to_string(),\n            1.0 => \"D+\".to_string(),\n           \
    \ 0.7 => \"D\".to_string(),\n            0.0 => \"D-\".to_string(),\n        \
    \    _ => \"E\".to_string(),\n        };\n        letter_grades.push(letter_grade);\n\
    \        i += 1;\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 5 but the index\
    \ is 5', /tmp/tmpygku88g0.rs:31:23\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    // Write your code here\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbryyee0x.rs:22:48\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    let mut temp_grade\
    \ = grades.clone();\n    let mut cur_gpa : f64 = grades.iter().sum();\n    \n\
    \    let mut cur_letter_grade : String;\n    \n    // Iterate over all the grades\n\
    \    for cur_grade in grades {\n        // Get the current GPA\n        cur_gpa\
    \ /= cur_grade;\n\n        // The current letter grade is based on the GPA\n \
    \       let cur_letter_grade = match cur_grade {\n            0 => \"E\",\n  \
    \          1 => \"D-\", // Falls through\n            2 => \"D\",\n          \
    \  3 => \"C-\", // Falls through\n            4 => \"C\",\n            5 => \"\
    B-\", // Falls through\n            6 => \"B\",\n            7 => \"A-\", // Falls\
    \ through\n            8 => \"A\",\n            9 => \"A+\", // Falls through\n\
    \            10 => \"A\",\n            11 => \"A+\", // Falls through\n      \
    \      12 => \"A\",\n            13 => \"A+\", // Falls through\n            14\
    \ => \"A\",\n            15 => \"A+\", // Falls through\n            16 => \"\
    A\",\n            17 => \"A+\", // Falls through\n            18 => \"A\",\n \
    \           19 => \"A+\", // Falls through\n            20 => \"A\",\n       \
    \     21 => \"A+\", // Falls through\n            22 => \"A\",\n            23\
    \ => \"A+\", // Falls through\n            24 => \"A\",\n            25 => \"\
    A+\", // Falls through\n            26 => \"A\",\n            _ => \"A\",\n  \
    \      };\n\n        // If the current GPA is greater than the previous one\n\
    \        // the letter grade for the current GPA is appended to the\n        //\
    \ letter_grades vector\n        if cur_gpa > temp_grade.iter().sum() {\n     \
    \       temp_grade.pop();\n            letter_grades.push(cur_letter_grade);\n\
    \        }\n\n        // If the current GPA is less than the previous one\n  \
    \      // the letter grade for the current GPA is appended to the\n        //\
    \ letter_grades vector\n        if cur_gpa < temp_grade.iter().sum() {\n     \
    \       temp_grade.pop();\n            letter_grades.push(cur_letter_grade);\n\
    \        }\n\n        // Append the current GPA to the temp_grade\n        temp_grade.push(cur_gpa);\n\
    \    }\n\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8qakcyq3.rs:36:13\n   |\n\
    35 |         let cur_letter_grade = match cur_grade {\n   |                  \
    \                    --------- this expression has type `f64`\n36 |          \
    \   0 => \"E\",\n   |             ^\n   |             |\n   |             expected\
    \ `f64`, found integer\n   |             help: use a float literal: `0.0`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp8qakcyq3.rs:37:13\n   |\n35 |  \
    \       let cur_letter_grade = match cur_grade {\n   |                       \
    \               --------- this expression has type `f64`\n36 |             0 =>\
    \ \"E\",\n37 |             1 => \"D-\", // Falls through\n   |             ^\n\
    \   |             |\n   |             expected `f64`, found integer\n   |    \
    \         help: use a float literal: `1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8qakcyq3.rs:38:13\n   |\n35 |         let cur_letter_grade = match\
    \ cur_grade {\n   |                                      --------- this expression\
    \ has type `f64`\n...\n38 |             2 => \"D\",\n   |             ^\n   |\
    \             |\n   |             expected `f64`, found integer\n   |        \
    \     help: use a float literal: `2.0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp8qakcyq3.rs:39:13\n   |\n35 |         let cur_letter_grade = match cur_grade\
    \ {\n   |                                      --------- this expression has type\
    \ `f64`\n...\n39 |             3 => \"C-\", // Falls through\n   |           \
    \  ^\n   |             |\n   |             expected `f64`, found integer\n   |\
    \             help: use a float literal: `3.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8qakcyq3.rs:40:13\n   |\n35 |         let cur_letter_grade = match\
    \ cur_grade {\n   |                                      --------- this expression\
    \ has type `f64`\n...\n40 |             4 => \"C\",\n   |             ^\n   |\
    \             |\n   |             expected `f64`, found integer\n   |        \
    \     help: use a float literal: `4.0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp8qakcyq3.rs:41:13\n   |\n35 |         let cur_letter_grade = match cur_grade\
    \ {\n   |       "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = Vec::new();\n    let mut grades_counter\
    \ = Vec::new();\n    let mut gpa_index = 0;\n    let mut letter_grade_index =\
    \ 0;\n    for grade in grades {\n        grades_string.push(\"E\");\n        grades_counter.push(0);\n\
    \        if gpa_index <= grades_string.len() {\n            grades_counter[gpa_index]\
    \ += 1;\n        }\n        gpa_index += 1;\n    }\n    let mut counter = 1;\n\
    \    let mut letter_grade_index = 0;\n    let mut letter_grade = vec![\"E\"];\n\
    \    for grade in grades {\n        while grades_counter[letter_grade_index] >=\
    \ counter {\n            letter_grade.push(\"+\");\n            counter += 1;\n\
    \        }\n        if letter_grade_index < letter_grade.len() {\n           \
    \ letter_grade[letter_grade_index] += grade;\n            counter += 1;\n    \
    \        letter_grade_index += 1;\n        }\n    }\n    letter_grade\n}\n\nfn\
    \ main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmpxxiwrzdr.rs:44:13\n   |\n44 |             letter_grade[letter_grade_index]\
    \ += grade;\n   |             --------------------------------^^^^^^^^^\n   |\
    \             |\n   |             cannot use `+=` on type `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxxiwrzdr.rs:49:5\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \     ----------- expected `Vec<String>` because of return type\n...\n49 |   \
    \  letter_grade\n   |     ^^^^^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grade = grades.first();\n    let mut result =\
    \ Vec::new();\n    loop {\n        if grade == 0.0 {\n            result.push(\"\
    E\");\n            break;\n        }\n        let grade = grade - grades.first();\n\
    \        if grade >= 0.5 {\n            result.push(\"B-\");\n        } else if\
    \ grade >= 0.3 {\n            result.push(\"B-\");\n        } else if grade >=\
    \ 0.1 {\n            result.push(\"B-\");\n        } else if grade >= 0.02 {\n\
    \            result.push(\"B-\");\n        } else if grade >= 0.005 {\n      \
    \      result.push(\"B-\");\n        } else if grade >= 0.001 {\n            result.push(\"\
    B-\");\n        } else if grade >= 0.0005 {\n            result.push(\"B-\");\n\
    \        } else if grade >= 0.0001 {\n            result.push(\"B-\");\n     \
    \   } else if grade >= 0.00005 {\n            result.push(\"B-\");\n        }\
    \ else if grade >= 0.00001 {\n            result.push(\"B-\");\n        } else\
    \ {\n            result.push(\"B-\");\n        }\n        grade += 0.5;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n \
    \   assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf49lngij.rs:26:21\n   |\n\
    26 |         if grade == 0.0 {\n   |                     ^^^ expected enum `Option`,\
    \ found floating-point number\n   |\n   = note: expected enum `Option<&f64>`\n\
    \              found type `{float}`\n\nerror[E0369]: cannot subtract `Option<&f64>`\
    \ from `Option<&f64>`\n  --> /tmp/tmpf49lngij.rs:30:27\n   |\n30 |         let\
    \ grade = grade - grades.first();\n   |                     ----- ^ --------------\
    \ Option<&f64>\n   |                     |\n   |                     Option<&f64>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpf49lngij.rs:56:5\n   |\n22 | fn\
    \ numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |            \
    \                                    ----------- expected `Vec<String>` because\
    \ of return type\n...\n56 |     result\n   |     ^^^^^^ expected struct `String`,\
    \ found `&str`\n   |\n   = note: expected struct `Vec<String>`\n             \
    \ found struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for i in 0..grades.len()\
    \ {\n        let x = grades[i];\n        let mut y = x;\n        for j in 0..2\
    \ {\n            let z = j / 2;\n            let w = (x - z * x) / y;\n      \
    \      if w*w > 0.000000001 {\n                y = z;\n            } else {\n\
    \                break;\n            }\n        }\n        if y != x {\n     \
    \       letter_grades.push(String::from(format!(\"{}+\", i)));\n        } else\
    \ {\n            letter_grades.push(String::from(format!(\"{}\", i)));\n     \
    \   }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `{integer}` by `f64`\n  --> /tmp/tmpug3dhd00.rs:29:28\n\
    \   |\n29 |             let w = (x - z * x) / y;\n   |                       \
    \     ^ no implementation for `{integer} * f64`\n   |\n   = help: the trait `Mul<f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpug3dhd00.rs:31:21\n\
    \   |\n26 |         let mut y = x;\n   |                     - expected due to\
    \ this value\n...\n31 |                 y = z;\n   |                     ^ expected\
    \ `f64`, found integer\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = String::new();\n    for i in 0..grades.len()-1\
    \ {\n        if grades[i] > 0.0 {\n            let grade = grades[i];\n      \
    \      let grade_string = grade.to_string();\n            grades_string.push_str(grade_string);\n\
    \        } else {\n            grades_string.push_str(\"E\");\n        }\n   \
    \ }\n    return grades_string.split_whitespace().collect();\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpah4fm25i.rs:28:36\n   |\n\
    28 |             grades_string.push_str(grade_string);\n   |                 \
    \                   ^^^^^^^^^^^^\n   |                                    |\n\
    \   |                                    expected `&str`, found struct `String`\n\
    \   |                                    help: consider borrowing here: `&grade_string`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpah4fm25i.rs:33:45\n     |\n33\
    \   |     return grades_string.split_whitespace().collect();\n     |         \
    \                                    ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    if grades.len() == 0 {\n        return vec![\"E\"];\n\
    \    }\n    let mut grades: Vec<String> = vec![\"E\"];\n    let mut grade = grades[0]\
    \ as f64;\n    let mut temp_grade = grade;\n    for grade in grades {\n      \
    \  if grade > temp_grade {\n            temp_grade = grade;\n        }\n    }\n\
    \    for grade in grades {\n        if grade > temp_grade {\n            grades.push(format!(\"\
    {}+\", grade / temp_grade));\n        }\n    }\n    grades\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzf99ao4t.rs:24:21\n   |\n\
    24 |         return vec![\"E\"];\n   |                     ^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                     |\n   |      \
    \               expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzf99ao4t.rs:26:40\n   |\n26 |     let mut grades: Vec<String>\
    \ = vec![\"E\"];\n   |                                        ^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                                  \
    \      |\n   |                                        expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzf99ao4t.rs:30:20\n\
    \   |\n30 |         if grade > temp_grade {\n   |                    ^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \  |\n   |                    expected struct `String`, found `f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzf99ao4t.rs:31:26\n   |\n28 |     let mut temp_grade\
    \ = grade;\n   |                          ----- expected due to this value\n...\n\
    31 |             temp_grade = grade;\n   |                          ^^^^^ expected\
    \ `f64`, found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzf99ao4t.rs:35:20\n\
    \   |\n35 |         if grade > temp_grade {\n   |                    ^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \  |\n   |                    expected struct `String`, found `f64`\n\nerror[E0369]:\
    \ cannot divide `String` by `f64`\n  --> /tmp/tmpzf99ao4t.rs:36:46\n   |\n36 |\
    \             grades.push(format!(\"{}+\", grade / temp_grade));\n   |       \
    \                                 ----- ^ ---------- f64\n   |               \
    \                         |\n   |                                        String\n\
    \nerror[E0605]: non-primitive cast: `String` as `f64`\n  --> /tmp/tmpzf99ao4t.rs:27:21\n\
    \   |\n27 |     let mut grade = grades[0] as f64;\n   |                     ^^^^^^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a s"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string = String::new();\n    let mut current_letter\
    \ = \"\";\n    for grade in grades {\n        if grade > 3.0 {\n            grades_string.push_str(\"\
    D+\");\n        } else {\n            if grade > 2.0 {\n                grades_string.push_str(\"\
    D\");\n            } else {\n                if grade > 1.2 {\n              \
    \      grades_string.push_str(\"C-\");\n                } else {\n           \
    \         if grade > 1.0 {\n                        grades_string.push_str(\"\
    C\");\n                    } else {\n                        if grade > 0.7 {\n\
    \                            grades_string.push_str(\"B-\");\n               \
    \         } else {\n                            if grade > 0.4 {\n           \
    \                     grades_string.push_str(\"B\");\n                       \
    \     } else {\n                                if grade > 0.3 {\n           \
    \                         grades_string.push_str(\"B-\");\n                  \
    \              } else {\n                                    if grade > 0.2 {\n\
    \                                        grades_string.push_str(\"B+\");\n   \
    \                                 } else {\n                                 \
    \       grades_string.push_str(\"A\");\n                                    }\n\
    \                                }\n                            }\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n    }\n    grades_string.to_string().trim_end();\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx3agwvu7.rs:22:48\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades\n        .iter()\n        .enumerate()\n      \
    \  .filter_map(|(i, grade_) -> grade_ >= 2.0 || grade_ < 0.0 || grade_ > 3.0)\n\
    \        .filter(|grade_| grade_ >= 0.0 || grade_ < 1.0)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `,` or `:`, found `->`\n  --> /tmp/tmpnsfvrsb7.rs:26:34\n\
    \   |\n26 |         .filter_map(|(i, grade_) -> grade_ >= 2.0 || grade_ < 0.0\
    \ || grade_ > 3.0)\n   |                                  ^^ expected one of `,`\
    \ or `:`\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades\n        .iter()\n        .map(|grade| {\n    \
    \        if grade < 3.0 {\n                return \"A+\" as String;\n        \
    \    }\n            if grade < 3.3 {\n                return \"A\" as String;\n\
    \            }\n            if grade < 3.7 {\n                return \"A-\" as\
    \ String;\n            }\n            if grade < 4.0 {\n                return\
    \ \"B+\" as String;\n            }\n            if grade < 4.3 {\n           \
    \     return \"B\" as String;\n            }\n            if grade < 4.7 {\n \
    \               return \"B-\" as String;\n            }\n            if grade\
    \ < 5.0 {\n                return \"C+\" as String;\n            }\n         \
    \   if grade < 5.3 {\n                return \"C\" as String;\n            }\n\
    \            if grade < 5.7 {\n                return \"C-\" as String;\n    \
    \        }\n            if grade < 6.0 {\n                return \"D+\" as String;\n\
    \            }\n            if grade < 6.3 {\n                return \"D\" as\
    \ String;\n            }\n            if grade < 6.7 {\n                return\
    \ \"D-\" as String;\n            }\n            if grade < 7.0 {\n           \
    \     return \"E\" as String;\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz1yz6cf1.rs:26:24\n   |\n\
    26 |             if grade < 3.0 {\n   |                        ^^^\n   |     \
    \                   |\n   |                        expected `&f64`, found floating-point\
    \ number\n   |                        help: consider borrowing here: `&3.0`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpz1yz6cf1.rs:29:24\n   |\n29 |  \
    \           if grade < 3.3 {\n   |                        ^^^\n   |          \
    \              |\n   |                        expected `&f64`, found floating-point\
    \ number\n   |                        help: consider borrowing here: `&3.3`\n\
    \   |\nnote: return type inferred to be `&f64` here\n  --> /tmp/tmpz1yz6cf1.rs:27:24\n\
    \   |\n27 |                 return \"A+\" as String;\n   |                   \
    \     ^^^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz1yz6cf1.rs:32:24\n\
    \   |\n32 |             if grade < 3.7 {\n   |                        ^^^\n  \
    \ |                        |\n   |                        expected `&f64`, found\
    \ floating-point number\n   |                        help: consider borrowing\
    \ here: `&3.7`\n   |\nnote: return type inferred to be `&f64` here\n  --> /tmp/tmpz1yz6cf1.rs:27:24\n\
    \   |\n27 |                 return \"A+\" as String;\n   |                   \
    \     ^^^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz1yz6cf1.rs:35:24\n\
    \   |\n35 |             if grade < 4.0 {\n   |                        ^^^\n  \
    \ |                        |\n   |                        expected `&f64`, found\
    \ floating-point number\n   |                        help: consider borrowing\
    \ here: `&4.0`\n   |\nnote: return type inferred to be `&f64` here\n  --> /tmp/tmpz1yz6cf1.rs:27:24\n\
    \   |\n27 |                 return \"A+\" as String;\n   |                   \
    \     ^^^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz1yz6cf1.rs:38:24\n\
    \   |\n38 |             if grade < 4.3 {\n   |                        ^^^\n  \
    \ |                        |\n   |                        expected `&f64`, found\
    \ floating-point number\n   |                        help: consider borrowing\
    \ here: `&4.3`\n   |\nno"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_sorted: Vec<f64> = grades.into_iter().sorted().collect();\n\
    \    \n    let mut counter = 0;\n    let mut letter_grade = String::new();\n \
    \   for i in grades_sorted {\n        if i >= 4.0 && counter <= grades.len() -\
    \ 1 {\n            letter_grade += \"+\";\n            counter++;\n        }\n\
    \        if i >= 3.7 && counter <= grades.len() - 1 {\n            letter_grade\
    \ += \"A\";\n            counter++;\n        }\n        if i >= 3.3 && counter\
    \ <= grades.len() - 1 {\n            letter_grade += \"A-\";\n            counter++;\n\
    \        }\n        if i >= 3.0 && counter <= grades.len() - 1 {\n           \
    \ letter_grade += \"B+\";\n            counter++;\n        }\n        if i >=\
    \ 2.7 && counter <= grades.len() - 1 {\n            letter_grade += \"B\";\n \
    \           counter++;\n        }\n        if i >= 2.3 && counter <= grades.len()\
    \ - 1 {\n            letter_grade += \"B-\";\n            counter++;\n       \
    \ }\n        if i >= 2.0 && counter <= grades.len() - 1 {\n            letter_grade\
    \ += \"C+\";\n            counter++;\n        }\n        if i >= 1.7 && counter\
    \ <= grades.len() - 1 {\n            letter_grade += \"C\";\n            counter++;\n\
    \        }\n        if i >= 1.3 && counter <= grades.len() - 1 {\n           \
    \ letter_grade += \"C-\";\n            counter++;\n        }\n        if i >=\
    \ 1.0 && counter <= grades.len() - 1 {\n            letter_grade += \"D+\";\n\
    \            counter++;\n        }\n        if i >= 0.7 && counter <= grades.len()\
    \ - 1 {\n            letter_grade += \"D\";\n            counter++;\n        }\n\
    \        if i >= 0.0 && counter <= grades.len() - 1 {\n            letter_grade\
    \ += \"D-\";\n            counter++;\n        }\n        if i >= 0.0 {\n     \
    \       letter_grade += \"E\";\n            counter = 0;\n        }\n    }\n \
    \   return vec![letter_grade];\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpbz0iycxy.rs:30:20\n\
    \   |\n30 |             counter++;\n   |                    ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n30 |             { let tmp =\
    \ counter; counter += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n\
    30 -             counter++;\n30 +             counter += 1;\n   | \n\nerror: Rust\
    \ has no postfix increment operator\n  --> /tmp/tmpbz0iycxy.rs:34:20\n   |\n34\
    \ |             counter++;\n   |                    ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n34 |             { let tmp = counter; counter\
    \ += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n34\
    \ -             counter++;\n34 +             counter += 1;\n   | \n\nerror: Rust\
    \ has no postfix increment operator\n  --> /tmp/tmpbz0iycxy.rs:38:20\n   |\n38\
    \ |             counter++;\n   |                    ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n38 |             { let tmp = counter; counter\
    \ += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n38\
    \ -             counter++;\n38 +             counter += 1;\n   | \n\nerror: Rust\
    \ has no postfix increment operator\n  --> /tmp/tmpbz0iycxy.rs:42:20\n   |\n42\
    \ |             counter++;\n   |                    ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n42 |             { let tmp = counter; counter\
    \ += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n42\
    \ -             counter++;\n42 +             counter += 1;\n   | \n\nerror: Rust\
    \ has no postfix increment operator\n  --> /tmp/tmpbz0iycxy.rs:46:20\n   |\n46\
    \ |             counter++;\n   |                    ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n46 |             { let tmp = counter; counter\
    \ += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n46\
    \ -             counter++;\n46 +             counter += 1;\n   | \n\nerror: Rust\
    \ has no postfix increment operator\n  --> /tmp/tmpbz0iycxy.rs:50:20\n   |\n50\
    \ |             counter++;\n   |        "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_str = vec![];\n    for grade in grades.iter()\
    \ {\n        if grade < 3.0 { grades_str.push(\"E\".to_string()); }\n        if\
    \ grade < 2.0 { grades_str.push(\"B-\".to_string()); }\n        if grade < 1.7\
    \ {\n            if grade < 1.3 { grades_str.push(\"A-\".to_string()); }\n   \
    \         if grade < 1.0 { grades_str.push(\"A-\".to_string()); }\n          \
    \  if grade < 0.7 { grades_str.push(\"B-\".to_string()); }\n            if grade\
    \ < 0.3 { grades_str.push(\"C-\".to_string()); }\n            if grade < 0.0 {\
    \ grades_str.push(\"C-\".to_string()); }\n            if grade < 0.1 { grades_str.push(\"\
    D-\".to_string()); }\n            if grade < 0.7 { grades_str.push(\"D+\".to_string());\
    \ }\n        }\n        if grade < 1.7 { grades_str.push(\"B+\".to_string());\
    \ }\n        if grade < 2.0 { grades_str.push(\"B\".to_string()); }\n        if\
    \ grade < 3.0 { grades_str.push(\"C\".to_string()); }\n        if grade < 4.0\
    \ { grades_str.push(\"A+\".to_string()); }\n    }\n    grades_str\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbdivdf0p.rs:25:20\n   |\n\
    25 |         if grade < 3.0 { grades_str.push(\"E\".to_string()); }\n   |    \
    \                ^^^\n   |                    |\n   |                    expected\
    \ `&f64`, found floating-point number\n   |                    help: consider\
    \ borrowing here: `&3.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbdivdf0p.rs:26:20\n\
    \   |\n26 |         if grade < 2.0 { grades_str.push(\"B-\".to_string()); }\n\
    \   |                    ^^^\n   |                    |\n   |                \
    \    expected `&f64`, found floating-point number\n   |                    help:\
    \ consider borrowing here: `&2.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbdivdf0p.rs:27:20\n\
    \   |\n27 |         if grade < 1.7 {\n   |                    ^^^\n   |      \
    \              |\n   |                    expected `&f64`, found floating-point\
    \ number\n   |                    help: consider borrowing here: `&1.7`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbdivdf0p.rs:28:24\n   |\n28 |             if\
    \ grade < 1.3 { grades_str.push(\"A-\".to_string()); }\n   |                 \
    \       ^^^\n   |                        |\n   |                        expected\
    \ `&f64`, found floating-point number\n   |                        help: consider\
    \ borrowing here: `&1.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbdivdf0p.rs:29:24\n\
    \   |\n29 |             if grade < 1.0 { grades_str.push(\"A-\".to_string());\
    \ }\n   |                        ^^^\n   |                        |\n   |    \
    \                    expected `&f64`, found floating-point number\n   |      \
    \                  help: consider borrowing here: `&1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbdivdf0p.rs:30:24\n   |\n30 |             if grade < 0.7\
    \ { grades_str.push(\"B-\".to_string()); }\n   |                        ^^^\n\
    \   |                        |\n   |                        expected `&f64`, found\
    \ floating-point number\n   |                        help: consider borrowing\
    \ here: `&0.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbdivdf0p.rs:31:24\n\
    \   |\n31 |             if grade < 0.3 "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let max_grade = grades.max();\n    let min_grade = grades.min();\n\
    \    let grades_range = max_grade - min_grade as f64;\n    grades\n        .iter()\n\
    \        .enumerate()\n        .map(|(index, grade)| {\n            let diff =\
    \ grade - min_grade;\n            diff\n                .abs()\n             \
    \   .checked_mul(grades_range as f64)\n                .unwrap_or(0.0f64)\n  \
    \      })\n        .filter(|grade| grade > 0.0f64)\n        .collect::<Vec<String>>()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `max` exists for struct `Vec<f64>`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmplon1m4ez.rs:23:28\n    |\n23  |  \
    \     let max_grade = grades.max();\n    |                              ^^^ method\
    \ cannot be called on `Vec<f64>` due to unsatisfied trait bounds\n    |\n    =\
    \ note: the following trait bounds were not satisfied:\n            `f64: Ord`\n\
    \            which is required by `Vec<f64>: Ord`\n            `Vec<f64>: Ord`\n\
    \            which is required by `&Vec<f64>: Ord`\n            `Vec<f64>: Ord`\n\
    \            which is required by `&mut Vec<f64>: Ord`\n            `Vec<f64>:\
    \ Iterator`\n            which is required by `&mut Vec<f64>: Iterator`\n    \
    \        `f64: Ord`\n            which is required by `[f64]: Ord`\n         \
    \   `[f64]: Ord`\n            which is required by `&[f64]: Ord`\n           \
    \ `[f64]: Ord`\n            which is required by `&mut [f64]: Ord`\n         \
    \   `[f64]: Iterator`\n            which is required by `&mut [f64]: Iterator`\n\
    \nerror[E0599]: the method `min` exists for struct `Vec<f64>`, but its trait bounds\
    \ were not satisfied\n   --> /tmp/tmplon1m4ez.rs:24:28\n    |\n24  |       let\
    \ min_grade = grades.min();\n    |                              ^^^ method cannot\
    \ be called on `Vec<f64>` due to unsatisfied trait bounds\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `f64: Ord`\n   \
    \         which is required by `Vec<f64>: Ord`\n            `Vec<f64>: Ord`\n\
    \            which is required by `&Vec<f64>: Ord`\n            `Vec<f64>: Ord`\n\
    \            which is required by `&mut Vec<f64>: Ord`\n            `Vec<f64>:\
    \ Iterator`\n            which is required by `&mut Vec<f64>: Iterator`\n    \
    \        `f64: Ord`\n            which is required by `[f64]: Ord`\n         \
    \   `[f64]: Ord`\n            which is required by `&[f64]: Ord`\n           \
    \ `[f64]: Ord`\n            which is required by `&mut [f64]: Ord`\n         \
    \   `[f64]: Iterator`\n            which is required by `&mut [f64]: Iterator`\n\
    \nerror[E0277]: can't compare `&_` with `f64`\n  --> /tmp/tmplon1m4ez.rs:36:31\n\
    \   |"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = vec![];\n    let grade =\
    \ grades.min();\n    let mut index = 0;\n    while index < grades.len() {\n  \
    \      let mut new_grade: Vec<String> = vec![];\n        let mut max_grade: usize\
    \ = 0;\n        for grade in grades {\n            if grade > grade {\n      \
    \          new_grade.push('-');\n            } else if grade > max_grade {\n \
    \               max_grade = grade;\n            }\n        }\n        new_grade.push('C');\n\
    \        new_grade.push('C');\n        new_grade.push(numerical_letter_grade(grades)[index].clone());\n\
    \        let mut min_index: usize = 0;\n        for grade in grades {\n      \
    \      if grade < grade {\n                new_grade.push('-');\n            }\
    \ else if grade < min_index {\n                min_index = grade;\n          \
    \  }\n        }\n        let mut min_grade: usize = grades[min_index];\n     \
    \   for grade in grades {\n            if grade < grade && grade != min_grade\
    \ {\n                new_grade.push('-');\n            } else if grade < min_grade\
    \ && grade != min_index {\n                new_grade.push('-');\n            }\n\
    \        }\n        result .= new_grade;\n        index++;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: unexpected token: `=`\n  --> /tmp/tmpzphfqyus.rs:55:17\n   |\n55\
    \ |         result .= new_grade;\n   |                 ^\n\nerror: Rust has no\
    \ postfix increment operator\n  --> /tmp/tmpzphfqyus.rs:56:14\n   |\n56 |    \
    \     index++;\n   |              ^^ not a valid postfix operator\n   |\nhelp:\
    \ use `+= 1` instead\n   |\n56 |         { let tmp = index; index += 1; tmp };\n\
    \   |         +++++++++++      ~~~~~~~~~~~~~~~~~~~\n56 -         index++;\n56\
    \ +         index += 1;\n   | \n\nerror[E0599]: the method `min` exists for struct\
    \ `Vec<f64>`, but its trait bounds were not satisfied\n   --> /tmp/tmpzphfqyus.rs:24:24\n\
    \    |\n24  |       let grade = grades.min();\n    |                         \
    \ ^^^ method cannot be called on `Vec<f64>` due to unsatisfied trait bounds\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `f64: Ord`\n            which is required by `Vec<f64>: Ord`\n           \
    \ `Vec<f64>: Ord`\n            which is required by `&Vec<f64>: Ord`\n       \
    \     `Vec<f64>: Ord`\n            which is required by `&mut Vec<f64>: Ord`\n\
    \            `Vec<f64>: Iterator`\n            which is required by `&mut Vec<f64>:\
    \ Iterator`\n            `f64: Ord`\n            which is required by `[f64]:\
    \ Ord`\n            `[f64]: Ord`\n            which is required by `&[f64]: Ord`\n\
    \            `[f64]: Ord`\n            which is required by `&mut [f64]: Ord`\n\
    \            `[f64]: Iterator`\n            which is required by `&mut [f64]:\
    \ Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzphfqyus.rs:31:32\n\
    \   |\n31 |                 new_grade.push('-');\n   |                       \
    \         ^^^- help: try using a conversion method: `.to_string()`\n   |     \
    \                           |\n   |                                expected struct\
    \ `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzphfqyus.rs:32:31\n\
    \   |\n32 |             } else if grade > max_grade {\n   |                  \
    \             ^^^^^^^^^ expected `f64`, found `usize`\n   |\nhelp: you can cast\
    \ a `usize` to an `f64`, producing the floating point representation of th"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string: Vec<String> = Vec::new();\n   \
    \ grades.iter().enumerate().for_each(|(index, grade)| {\n        if grade < 4.0\
    \ {\n            grades_string.push(format!(\"A+\"));\n        }\n        else\
    \ if grade >= 4.0 && grade < 3.7 {\n            grades_string.push(format!(\"\
    A\"));\n        }\n        else if grade >= 3.7 && grade < 3.3 {\n           \
    \ grades_string.push(format!(\"A-\"));\n        }\n        else if grade >= 3.3\
    \ && grade < 3.0 {\n            grades_string.push(format!(\"B+\"));\n       \
    \ }\n        else if grade >= 3.0 && grade < 2.7 {\n            grades_string.push(format!(\"\
    B\"));\n        }\n        else if grade >= 2.7 && grade < 2.3 {\n           \
    \ grades_string.push(format!(\"B-\"));\n        }\n        else if grade >= 2.3\
    \ && grade < 2.0 {\n            grades_string.push(format!(\"C+\"));\n       \
    \ }\n        else if grade >= 2.0 && grade < 1.7 {\n            grades_string.push(format!(\"\
    C\"));\n        }\n        else if grade >= 1.7 && grade < 1.3 {\n           \
    \ grades_string.push(format!(\"C-\"));\n        }\n        else if grade >= 1.3\
    \ && grade < 1.0 {\n            grades_string.push(format!(\"D+\"));\n       \
    \ }\n        else if grade >= 1.0 && grade < 0.7 {\n            grades_string.push(format!(\"\
    D\"));\n        }\n        else {\n            grades_string.push(format!(\"D-\"\
    ));\n        }\n    });\n    grades_string.push(\"E\");\n    grades_string\n}\n\
    \nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf0vexx1l.rs:25:20\n   |\n\
    25 |         if grade < 4.0 {\n   |                    ^^^\n   |             \
    \       |\n   |                    expected `&f64`, found floating-point number\n\
    \   |                    help: consider borrowing here: `&4.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpf0vexx1l.rs:28:26\n   |\n28 |         else if\
    \ grade >= 4.0 && grade < 3.7 {\n   |                          ^^^\n   |     \
    \                     |\n   |                          expected `&f64`, found\
    \ floating-point number\n   |                          help: consider borrowing\
    \ here: `&4.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf0vexx1l.rs:28:41\n\
    \   |\n28 |         else if grade >= 4.0 && grade < 3.7 {\n   |              \
    \                           ^^^\n   |                                        \
    \ |\n   |                                         expected `&f64`, found floating-point\
    \ number\n   |                                         help: consider borrowing\
    \ here: `&3.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf0vexx1l.rs:31:26\n\
    \   |\n31 |         else if grade >= 3.7 && grade < 3.3 {\n   |              \
    \            ^^^\n   |                          |\n   |                      \
    \    expected `&f64`, found floating-point number\n   |                      \
    \    help: consider borrowing here: `&3.7`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpf0vexx1l.rs:31:41\n   |\n31 |         else if grade >= 3.7 && grade\
    \ < 3.3 {\n   |                                         ^^^\n   |            \
    \                             |\n   |                                        \
    \ expected `&f64`, found floating-point number\n   |                         \
    \                help: consider borrowing here: `&3.3`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf0vexx1l.rs:34:26\n   |\n34 |         else if grade >=\
    \ 3.3 && grade < 3.0 {\n   |                          ^^^\n   |              \
    \            |\n   |                          expected `&f64`, found floating-point\
    \ number\n   |                          help: consider borrowing here: `&3.3`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades: Vec<String> = Vec::new();\n\n \
    \   // Find the highest grade in the array\n    let mut max_grade: f64 = grades.iter().max().unwrap();\n\
    \    // If the array has only one grade, return an empty vector\n    if grades.len()\
    \ == 1 {\n        return Vec::new();\n    }\n    // If the array has multiple\
    \ grades find the smallest grade\n    if grades.len() > 1 {\n        let mut min_grade:\
    \ f64 = grades.iter().min().unwrap();\n        // If the smallest grade is less\
    \ than the highest grade, set max_grade to the highest grade\n        if min_grade\
    \ < max_grade {\n            max_grade = min_grade;\n        }\n    }\n    \n\
    \    // Iterate over the grades and apply the letter grade formulas\n    for (index,\
    \ grade) in grades.iter().enumerate() {\n        if grade < max_grade {\n    \
    \        // Grade is less than max_grade, apply A-\n            letter_grades.push(format!(\"\
    A-\", index));\n        }\n        \n        if grade >= max_grade {\n       \
    \     // Grade is greater than max_grade, apply B+ \n            letter_grades.push(format!(\"\
    B+\", index));\n        }\n\n        if grade < min_grade {\n            // Grade\
    \ is less than min_grade, apply C- \n            letter_grades.push(format!(\"\
    C-\", index));\n        }\n\n        if grade >= min_grade {\n            // Grade\
    \ is greater than min_grade, apply C\n            letter_grades.push(format!(\"\
    C\", index));\n        }\n\n        if grade == 0.0 {\n            // Grade is\
    \ 0.0, apply D- \n            letter_grades.push(format!(\"D-\", index));\n  \
    \      }\n\n        if grade > 0.0 {\n            // Grade is greater than 0.0,\
    \ apply D\n            letter_grades.push(format!(\"D\", index));\n        }\n\
    \n        if grade == min_grade {\n            // Grade is equal to min_grade,\
    \ apply E\n            letter_grades.push(format!(\"E\", index));\n        }\n\
    \    }\n    \n    return letter_grades;\n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: argument never used\n  --> /tmp/tmp238_sh7f.rs:44:46\n   |\n44 |\
    \             letter_grades.push(format!(\"A-\", index));\n   |              \
    \                          ----  ^^^^^ argument never used\n   |             \
    \                           |\n   |                                        formatting\
    \ specifier missing\n\nerror: argument never used\n  --> /tmp/tmp238_sh7f.rs:49:46\n\
    \   |\n49 |             letter_grades.push(format!(\"B+\", index));\n   |    \
    \                                    ----  ^^^^^ argument never used\n   |   \
    \                                     |\n   |                                \
    \        formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmp238_sh7f.rs:54:46\n\
    \   |\n54 |             letter_grades.push(format!(\"C-\", index));\n   |    \
    \                                    ----  ^^^^^ argument never used\n   |   \
    \                                     |\n   |                                \
    \        formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmp238_sh7f.rs:59:45\n\
    \   |\n59 |             letter_grades.push(format!(\"C\", index));\n   |     \
    \                                   ---  ^^^^^ argument never used\n   |     \
    \                                   |\n   |                                  \
    \      formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmp238_sh7f.rs:64:46\n\
    \   |\n64 |             letter_grades.push(format!(\"D-\", index));\n   |    \
    \                                    ----  ^^^^^ argument never used\n   |   \
    \                                     |\n   |                                \
    \        formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmp238_sh7f.rs:69:45\n\
    \   |\n69 |             letter_grades.push(format!(\"D\", index));\n   |     \
    \                                   ---  ^^^^^ argument never used\n   |     \
    \                                   |\n   |                                  \
    \      formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmp238_sh7f.rs:74:45\n\
    \   |\n74 |             letter_grades.push(format!(\"E\", index));\n   |     \
    \       "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    if grades.len() == 0 {\n        return Vec::new();\n \
    \   }\n    let mut ret: Vec<String> = Vec::new();\n    \n    for i in grades.iter()\
    \ {\n        if i > 1.0 {\n            ret.push(\"D+\");\n            break;\n\
    \        } else if i > 0.7 {\n            ret.push(\"D\");\n            break;\n\
    \        } else if i > 0.3 {\n            ret.push(\"C-\");\n            break;\n\
    \        } else if i > 0.1 {\n            ret.push(\"C\");\n            break;\n\
    \        } else if i > 0.0 {\n            ret.push(\"B-\");\n            break;\n\
    \        } else if i > -0.7 {\n            ret.push(\"B\");\n            break;\n\
    \        } else if i > -0.3 {\n            ret.push(\"B-\");\n            break;\n\
    \        } else if i > -0.1 {\n            ret.push(\"B\");\n            break;\n\
    \        } else if i > -0.0 {\n            ret.push(\"A+\");\n            break;\n\
    \        } else if i < -0.7 {\n            ret.push(\"A\");\n            break;\n\
    \        } else if i < -0.3 {\n            ret.push(\"A-\");\n            break;\n\
    \        } else if i < -0.1 {\n            ret.push(\"A\");\n            break;\n\
    \        } else if i < -0.0 {\n            ret.push(\"E\");\n            break;\n\
    \        } else {\n            ret.push(\"A\");\n            break;\n        }\n\
    \    }\n    \n    ret\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpss2md4ys.rs:29:16\n   |\n\
    29 |         if i > 1.0 {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&f64`, found floating-point number\n   |        \
    \        help: consider borrowing here: `&1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpss2md4ys.rs:30:22\n   |\n30 |             ret.push(\"D+\");\n \
    \  |                      ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                      |\n   |                      expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpss2md4ys.rs:32:23\n\
    \   |\n32 |         } else if i > 0.7 {\n   |                       ^^^\n   |\
    \                       |\n   |                       expected `&f64`, found floating-point\
    \ number\n   |                       help: consider borrowing here: `&0.7`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpss2md4ys.rs:33:22\n   |\n33 |  \
    \           ret.push(\"D\");\n   |                      ^^^- help: try using a\
    \ conversion method: `.to_string()`\n   |                      |\n   |       \
    \               expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpss2md4ys.rs:35:23\n   |\n35 |         } else if i > 0.3\
    \ {\n   |                       ^^^\n   |                       |\n   |      \
    \                 expected `&f64`, found floating-point number\n   |         \
    \              help: consider borrowing here: `&0.3`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpss2md4ys.rs:36:22\n   |\n36 |             ret.push(\"C-\"\
    );\n   |                      ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                      |\n   |                      expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpss2md4ys.rs:38:23\n\
    \   |\n38 |         } else if i > 0.1 {\n   |                       ^^^\n   |\
    \                       |\n   |                       expected `&f64`, found floating-point\
    \ number\n   |                       help: consider borrowing here: `&0.1`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpss2md4y"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut letter_grades = vec![];\n    let mut grade = grades_copy.first().unwrap();\n\
    \    for grade in grades_copy {\n        if grade > grade {\n            let mut\
    \ i = 0;\n            while grade - grade * grade >= grade {\n               \
    \ i += 1;\n                grade -= grade * grade;\n            }\n          \
    \  letter_grades.push(format!(\"{}-\", i));\n        } else {\n            letter_grades.push(format!(\"\
    +{}\", grade));\n        }\n    }\n    return letter_grades;\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmps0qy6jgu.rs:24:17\n\
    \     |\n24   |     grades_copy.sort_unstable();\n     |                 ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n     |\n     = help: the following\
    \ other types implement trait `Ord`:\n               i128\n               i16\n\
    \               i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grade = vec![];\n\n    for grade in grades\
    \ {\n        let mut gpa = grade as f64;\n\n        // If the GPA is lower than\
    \ 3.0 it is considered \"A\"\n        // If the GPA is between 4.0 and 3.7 it\
    \ is considered \"A+\"\n        // If the GPA is between 3.3 and 3.0 it is considered\
    \ \"A-\"\n        // If the GPA is between 2.7 and 2.3 it is considered \"B+\"\
    \n        // If the GPA is between 2.3 and 2.0 it is considered \"B\"\n      \
    \  // If the GPA is between 1.7 and 1.3 it is considered \"B-\"\n        // If\
    \ the GPA is between 1.0 and 0.7 it is considered \"C+\"\n        // If the GPA\
    \ is between 0.7 and 1.0 it is considered \"C\"\n        // If the GPA is higher\
    \ than 1.0 it is considered \"C-\"\n        // If the GPA is between 0.0 (not\
    \ included) and 0.7 it is considered \"D+\"\n        // If the GPA is higher than\
    \ 0.7 it is considered \"D\"\n        // If the GPA is higher than 1.0 it is considered\
    \ \"D-\"\n        // If the GPA is 0.0 it is considered \"E\"\n\n        // A\
    \ + -> 4, A -> 3, 4 - -> 2, B + -> 3, B -> 2, B - -> 1\n        // C+ -> 4, C\
    \ -> 3, C- -> 2, D+ -> 3, D -> 2, D- -> 1\n        // D+ -> 4, D -> 3, D- -> 2,\
    \ E\n        // E\n\n        let mut letter_grade_base = (gpa - 3.0).ceil() as\
    \ usize;\n\n        // A -> A+\n        // B -> B+\n        // C -> C+\n     \
    \   // D -> D+\n        // D+ -> D\n        // E -> E\n        for index in 0..letter_grade_base\
    \ {\n            let letter = match index {\n                0 => \"A\",\n   \
    \             1 => \"A+\",\n                2 => \"A-\",\n                3 =>\
    \ \"B+\",\n                4 => \"B\",\n                5 => \"B-\",\n       \
    \         6 => \"C+\",\n                7 => \"C\",\n                8 => \"C-\"\
    ,\n                9 => \"D+\",\n                10 => \"D\",\n              \
    \  11 => \"D-\",\n                _ => \"E\",\n            };\n            letter_grade.push(letter);\n\
    \        }\n    }\n\n    letter_grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpel4h02_g.rs:75:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n75 |     letter_grade\n   |     ^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter()\n        .enumerate()\n        .filter(|(_,\
    \ x)| x > 3.0)\n        .map(|(_, x)| {\n            match x {\n             \
    \   4.0 => \"A+\",\n                > 3.0 => \"A\",\n                > 3.7 =>\
    \ \"A-\",\n                > 3.3 => \"B+\",\n                > 2.7 => \"B\",\n\
    \                > 2.3 => \"B-\",\n                > 2.0 => \"C+\",\n        \
    \        > 1.7 => \"C\",\n                > 1.3 => \"C-\",\n                >\
    \ 1.0 => \"D+\",\n                > 0.7 => \"D\",\n                _ => \"D-\"\
    ,\n                0.0 => \"E\",\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected pattern, found `>`\n  --> /tmp/tmpmzrnfcnn.rs:29:17\n \
    \  |\n29 |                 > 3.0 => \"A\",\n   |                 ^ expected pattern\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmzrnfcnn.rs:25:30\n   |\n25 |\
    \         .filter(|(_, x)| x > 3.0)\n   |                              ^^^ expected\
    \ `&&f64`, found floating-point number\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&str`\n    --> /tmp/tmpmzrnfcnn.rs:43:10\n\
    \     |\n43   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let mut letter_grades\
    \ = vec![];\n    \n    if grades.len() == 0 {\n        return vec![];\n    }\n\
    \    \n    // TODO: Implement a more efficient algorithm\n    grades_iter.next();\n\
    \    grades_iter.next();\n    grades_iter.next();\n    grades_iter.next();\n \
    \   grades_iter.next();\n    grades_iter.next();\n    grades_iter.next();\n  \
    \  grades_iter.next();\n    \n    grades_iter.fold(0.0, |acc, grade| {\n     \
    \   let gpa = grade - acc;\n        let letter_grade = if gpa < 0.0 {\n      \
    \      \"D-\"\n        } else {\n            match gpa % 1.0 {\n             \
    \   0.0 <= gpa/1.0 => {\n                    let grade = gpa - gpa/1.0 + 5.0;\n\
    \                    match gpa / 10.0 {\n                        0.0 <= gpa/10.0\
    \ => {\n                            if let (Some(a), Some(b), Some(c), Some(d),\
    \ Some(e)) = \n                                grades.windows_partition() {\n\
    \                                a <= grade &&\n                             \
    \   (b > grade || b == grade && e > grade) &&\n                              \
    \  b <= c &&\n                                c <= d &&\n                    \
    \            d <= e &&\n                                a < grade &&\n       \
    \                         grade > 0.0 && \n                                e >\
    \ 0.0 =>\n                                Some(b as f64 + d as f64 - b as f64\
    \ + e as f64 + 0.2)\n                                \n                      \
    \          _ => None\n                            }\n                        }\
    \ \n                        _ => None\n                    }\n               \
    \     \n                    \n                }\n                _ => {\n    \
    \                if gpa/10.0 > 0.0 {\n                        let grade = gpa\
    \ - gpa/10.0 + 5.0;\n                        \n                        match gpa\
    \ / 10.0 {\n                            0.0 <= gpa/10.0 => {\n               \
    \                 if let (Some(a), Some(b), Some(c), Some(d), Some(e)) = \n  \
    \                                  grades.windows_partition() {\n            \
    \                        a <= grade &&\n                                    (b\
    \ > grade || b == grade && e > grade) &&\n                                   \
    \ b <= c &&\n                                    c <= d &&\n                 \
    \                   d <= e &&\n                                    a < grade &&\n\
    \                                    grade > 0.0 && \n                       \
    \             e > 0.0 =>\n                                    Some(b as f64 +\
    \ d as f64 - b as f64 + e as f64 + 0.2)\n                                    \n\
    \                                    _ => None\n                             \
    \   }\n                            } \n                            _ => None\n\
    \                        }\n                        \n                       \
    \ \n                    }\n                    \n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpo_jkbexs.rs:107:3\n\
    \    |\n22  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n40  |     grades_iter.fold(0.0, |acc, grade| {\n    |                   \
    \  -                  - unclosed delimiter\n    |                     |\n    |\
    \                     unclosed delimiter\n...\n44  |         } else {\n    | \
    \               - unclosed delimiter\n45  |             match gpa % 1.0 {\n  \
    \  |                             - unclosed delimiter\n...\n51  |            \
    \                     grades.windows_partition() {\n    |                    \
    \                                        - this delimiter might not be properly\
    \ closed...\n...\n63  |                             }\n    |                 \
    \            - ...as it matches this but it has different indentation\n...\n107\
    \ | }\n    |   ^\n\nerror: expected one of `...`, `..=`, `..`, `=>`, `if`, or\
    \ `|`, found `<=`\n  --> /tmp/tmpo_jkbexs.rs:46:21\n   |\n46 |               \
    \  0.0 <= gpa/1.0 => {\n   |                     ^^ expected one of `...`, `..=`,\
    \ `..`, `=>`, `if`, or `|`\n\nerror: expected one of `.`, `;`, `?`, `else`, or\
    \ an operator, found `}`\n   --> /tmp/tmpo_jkbexs.rs:107:3\n    |\n107 | }\n \
    \   |   ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpo_jkbexs.rs:40:22\n   |\n40 |     grades_iter.fold(0.0,\
    \ |acc, grade| {\n   |                      ^^^ expected struct `Vec`, found floating-point\
    \ number\n   |\n   = note: expected struct `Vec<String>`\n                found\
    \ type `{float}`\n\nerror[E0277]: cannot subtract `Vec<String>` from `&f64`\n\
    \  --> /tmp/tmpo_jkbexs.rs:41:25\n   |\n41 |         let gpa = grade - acc;\n\
    \   |                         ^ no implementation for `&f64 - Vec<String>`\n \
    \  |\n   = help: the trait `Sub<Vec<String>>` is not implemented for `&f64`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n       "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades: Vec<String> = vec![];\n    let\
    \ mut total_grade = grades.iter().sum();\n    let mut grade_divisor: f64 = 2.0;\n\
    \n    for i in grades {\n        let grade: f64 = i / grade_divisor;\n       \
    \ if grade > 4.0\n            || (i > 3.0\n                && grade < 3.7)\n \
    \           || (i > 2.0\n                && grade < 2.7)\n            || (i >\
    \ 1.0\n                && grade < 1.7)\n            || (i > 0.0\n            \
    \    && grade < 0.7)) {\n            grade_divisor -= 0.1;\n        } else {\n\
    \            letter_grades.push(format!(\"{}\", grade - 0.4).to_string());\n \
    \       }\n    }\n    letter_grades.push(format!(\"{}\", total_grade).to_string());\n\
    \    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: unexpected closing delimiter: `}`\n  --> /tmp/tmp76ur51e2.rs:45:1\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - this opening brace...\n\
    ...\n42 |     }\n   |     - ...matches this closing brace\n...\n45 | }\n   | ^\
    \ unexpected closing delimiter\n\nerror: mismatched closing delimiter: `)`\n \
    \ --> /tmp/tmp76ur51e2.rs:27:21\n   |\n27 |     for i in grades {\n   |      \
    \               ^ unclosed delimiter\n...\n37 |                 && grade < 0.7))\
    \ {\n   |                                ^ mismatched closing delimiter\n\nerror:\
    \ aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_array = vec![0.0; grades.len()];\n    let\
    \ mut total_gpa = 0.0;\n    for grade in grades {\n        if grade > 4.0 {\n\
    \            grades_array[0] += 1.0;\n            total_gpa = grade - 4.0;\n \
    \       } else if grade < 3.7 {\n            grades_array[1] += 1.0;\n       \
    \     total_gpa = 4.0 - grade;\n        } else if grade < 3.3 {\n            grades_array[2]\
    \ += 1.0;\n            total_gpa = 3.0 - grade;\n        } else if grade < 3.0\
    \ {\n            grades_array[3] += 1.0;\n            total_gpa = 3.0 - grade;\n\
    \        } else if grade < 2.7 {\n            grades_array[4] += 1.0;\n      \
    \      total_gpa = 2.0 - grade;\n        } else if grade < 2.3 {\n           \
    \ grades_array[5] += 1.0;\n            total_gpa = 2.0 - grade;\n        } else\
    \ if grade < 2.0 {\n            grades_array[6] += 1.0;\n            total_gpa\
    \ = 2.0 - grade;\n        } else if grade < 1.7 {\n            grades_array[7]\
    \ += 1.0;\n            total_gpa = 1.0 - grade;\n        } else if grade < 1.3\
    \ {\n            grades_array[8] += 1.0;\n            total_gpa = 1.0 - grade;\n\
    \        } else if grade < 1.0 {\n            grades_array[9] += 1.0;\n      \
    \      total_gpa = 1.0 - grade;\n        } else {\n            grades_array[10]\
    \ += 1.0;\n            total_gpa = 1.0 - grade;\n        }\n    }\n    let mut\
    \ grades_array2 = vec![0.0; grades.len()];\n    let mut total_gpa2 = 0.0;\n  \
    \  for grade in grades {\n        if grade > 4.0 {\n            grades_array2[0]\
    \ += 1.0;\n            total_gpa2 = grade - 4.0;\n        } else if grade < 3.7\
    \ {\n            grades_array2[1] += 1.0;\n            total_gpa2 = 4.0 - grade;\n\
    \        } else if grade < 3.3 {\n            grades_array2[2] += 1.0;\n     \
    \       total_gpa2 = 3.0 - grade;\n        } else if grade < 3.0 {\n         \
    \   grades_array2[3] += 1.0;\n            total_gpa2 = 3.0 - grade;\n        }\
    \ else if grade < 2.7 {\n            grades_array2[4] += 1.0;\n            total_gpa2\
    \ = 2.0 - grade;\n        } else if grade < 2.3 {\n            grades_array2\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpts79wt_o.rs:91:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n63 |     for grade in grades {\n   |                         - unclosed delimiter\n\
    ...\n79 |         } else if grade < 2.3 {\n   |                              \
    \ - this delimiter might not be properly closed...\n80 |             grades_array2\n\
    81 | }\n   | - ...as it matches this but it has different indentation\n...\n91\
    \ | }\n   |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpts79wt_o.rs:80:13\n\
    \   |\n79 |           } else if grade < 2.3 {\n   |  ________________-\n80 | |\
    \             grades_array2\n   | |             ^^^^^^^^^^^^^ expected `()`, found\
    \ struct `Vec`\n81 | | }\n   | |_- expected this to be `()`\n   |\n   = note:\
    \ expected unit type `()`\n                 found struct `Vec<{float}>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpts79wt_o.rs:63:5\n   |\n22 |   fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \       ----------- expected `Vec<String>` because of return type\n...\n63 | /\
    \     for grade in grades {\n64 | |         if grade > 4.0 {\n65 | |         \
    \    grades_array2[0] += 1.0;\n66 | |             total_gpa2 = grade - 4.0;\n\
    ...  |\n90 | |     assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"\
    E\"), String::from(\"D-\")]);\n91 | | }\n   | |__^ expected struct `Vec`, found\
    \ `()`\n   |\n   = note: expected struct `Vec<String>`\n           found unit\
    \ type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().fold(Vec::new(), |v, grade| {\n        v.push((grade\
    \ as f64 - 1.0).floor() as String);\n        v.push(\"+\");\n        if grade\
    \ > 3.5 {\n            v.push(\"A\");\n        } else if grade > 2.3 {\n     \
    \       v.push(\"A-\");\n        } else if grade > 1.7 {\n            v.push(\"\
    B+\");\n        } else if grade > 1.3 {\n            v.push(\"B\");\n        }\
    \ else if grade > 0.7 {\n            v.push(\"B-\");\n        } else if grade\
    \ > 0.3 {\n            v.push(\"C+\");\n        } else if grade > 0.07 {\n   \
    \         v.push(\"C\");\n        } else if grade > 0.03 {\n            v.push(\"\
    C-\");\n        } else if grade > 0.01 {\n            v.push(\"D+\");\n      \
    \  } else if grade > 0.007 {\n            v.push(\"D\");\n        } else if grade\
    \ > 0.003 {\n            v.push(\"D-\");\n        } else if grade > 0.001 {\n\
    \            v.push(\"E\");\n        } else {\n            v.push(\"F\");\n  \
    \      }\n        v.push(\"\\n\");\n        v\n    });\n}\n\nfn main() {\n   \
    \ let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp95cy09h2.rs:25:16\n   |\n\
    25 |         v.push(\"+\");\n   |                ^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                |\n   |                expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp95cy09h2.rs:26:20\n\
    \   |\n26 |         if grade > 3.5 {\n   |                    ^^^\n   |      \
    \              |\n   |                    expected `&f64`, found floating-point\
    \ number\n   |                    help: consider borrowing here: `&3.5`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp95cy09h2.rs:27:20\n   |\n27 |             v.push(\"\
    A\");\n   |                    ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                    |\n   |                    expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp95cy09h2.rs:28:27\n\
    \   |\n28 |         } else if grade > 2.3 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&2.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp95cy09h2.rs:29:20\n\
    \   |\n29 |             v.push(\"A-\");\n   |                    ^^^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                    |\n   | \
    \                   expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp95cy09h2.rs:30:27\n   |\n30 |         } else if grade >\
    \ 1.7 {\n   |                           ^^^\n   |                           |\n\
    \   |                           expected `&f64`, found floating-point number\n\
    \   |                           help: consider borrowing here: `&1.7`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp95cy09h2.rs:31:20\n   |\n31 |             v.push(\"\
    B+\");\n   |                    ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                    |\n   |                    expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp95cy09h2.rs:32:27"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades: Vec<String> = vec![];\n    for\
    \ grade in grades {\n        match grade {\n            0.0     => letter_grades.push(String::from(\"\
    E\")),\n            1.0     => letter_grades.push(String::from(\"D+\")),\n   \
    \         2.0     => letter_grades.push(String::from(\"D-\")),\n            3.0\
    \     => letter_grades.push(String::from(\"C+\")),\n            4.0     => letter_grades.push(String::from(\"\
    C-\")),\n            5.0     => letter_grades.push(String::from(\"B+\")),\n  \
    \          6.0     => letter_grades.push(String::from(\"B-\")),\n            7.0\
    \     => letter_grades.push(String::from(\"A+\")),\n            8.0     => letter_grades.push(String::from(\"\
    A\")),\n            9.0     => letter_grades.push(String::from(\"A- \")),\n  \
    \          10.0    => letter_grades.push(String::from(\"B+\")),\n            11.0\
    \    => letter_grades.push(String::from(\"B\")),\n            12.0    => letter_grades.push(String::from(\"\
    B-\")),\n            13.0    => letter_grades.push(String::from(\"C+\")),\n  \
    \          14.0    => letter_grades.push(String::from(\"C\")),\n            15.0\
    \    => letter_grades.push(String::from(\"C-\")),\n            16.0    => letter_grades.push(String::from(\"\
    D+\")),\n            17.0    => letter_grades.push(String::from(\"D\")),\n   \
    \         18.0    => letter_grades.push(String::from(\"D-\")),\n            19.0\
    \    => letter_grades.push(String::from(\"E\")),\n            _ => { \n      \
    \          let x = grade as f64;\n                let letter_grade = if x > 4.0\
    \ { String::from(\"A+\") } else if x > 3.7 { String::from(\"A\") } else if x >\
    \ 3.3 { String::from(\"A-\") } else if x > 3.0 { String::from(\"B+\") } else if\
    \ x > 2.7 { String::from(\"B\") } else if x > 2.3 { String::from(\"B-\") } else\
    \ if x > 2.0 { String::from(\"C+\") } else if x > 1.7 { String::from(\"C\") }\
    \ else if x > 1.3 { String::from(\"C-\") } else { String::from(\"D+\") } else\
    \ if x > 1.0 { String::from(\"D\") } else if x > 0.7 { String::from(\"D-\") }\
    \ else { String::from(\"E\") };\n                letter_grades.push(letter_grade);\n\
    \            }\n        }\n\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp_1a4c2_h.rs:63:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    23 |     let mut letter_grades: Vec<String> = vec![];\n24 |     for grade in grades\
    \ {\n   |                         - this delimiter might not be properly closed...\n\
    ...\n53 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    63 | }\n   |   ^\n\nerror: conditional `else if` is not supported for `let...else`\n\
    \  --> /tmp/tmp_1a4c2_h.rs:48:412\n   |\n48 | ....3 { String::from(\"C-\") } else\
    \ { String::from(\"D+\") } else if x > 1.0 { String::from(\"D\") } else if x >\
    \ 0.7 { String::from(\"D-\") } els...\n   |                                  \
    \                             ^^ expected `{`\n   |\nhelp: try placing this code\
    \ inside a block\n   |\n48 |                 let letter_grade = if x > 4.0 { String::from(\"\
    A+\") } else if x > 3.7 { String::from(\"A\") } else if x > 3.3 { String::from(\"\
    A-\") } else if x > 3.0 { String::from(\"B+\") } else if x > 2.7 { String::from(\"\
    B\") } else if x > 2.3 { String::from(\"B-\") } else if x > 2.0 { String::from(\"\
    C+\") } else if x > 1.7 { String::from(\"C\") } else if x > 1.3 { String::from(\"\
    C-\") } else { String::from(\"D+\") } else { if x > 1.0 { String::from(\"D\")\
    \ } else if x > 0.7 { String::from(\"D-\") } else { String::from(\"E\") } };\n\
    \   |                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                    +                                       \
    \                                                             +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1a4c2_h.rs:22:48\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    // Your code here\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7qklrhjm.rs:22:48\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades: Vec<String> = vec![];\n    for\
    \ (i, grade) in grades.iter().enumerate() {\n        let mut grade_decimal: f64\
    \ = grade as f64;\n        match grade {\n            > 3.7 => grade_decimal =\
    \ grade_decimal - 1;\n            > 3.3 => grade_decimal = grade_decimal + 1;\n\
    \            > 3.0 => grade_decimal = grade_decimal - 1;\n            > 2.7 =>\
    \ grade_decimal = grade_decimal - 1;\n            > 2.3 => grade_decimal = grade_decimal\
    \ + 1;\n            > 2.0 => grade_decimal = grade_decimal + 1;\n            >\
    \ 1.7 => grade_decimal = grade_decimal + 1;\n            > 1.3 => grade_decimal\
    \ = grade_decimal + 1;\n            > 1.0 => grade_decimal = grade_decimal - 1;\n\
    \            > 0.7 => grade_decimal = grade_decimal + 1;\n            > 0.0 =>\
    \ grade_decimal = grade_decimal + 1;\n            _ => {}\n        }\n       \
    \ letter_grades.push(format!(\"{:.1}\", grade_decimal).to_string());\n    }\n\
    \    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected pattern, found `>`\n  --> /tmp/tmpzdmqf40y.rs:27:13\n \
    \  |\n27 |             > 3.7 => grade_decimal = grade_decimal - 1;\n   |     \
    \        ^ expected pattern\n\nwarning: unreachable statement\n  --> /tmp/tmpzdmqf40y.rs:40:9\n\
    \   |\n26 | /         match grade {\n27 | |             > 3.7 => grade_decimal\
    \ = grade_decimal - 1;\n28 | |             > 3.3 => grade_decimal = grade_decimal\
    \ + 1;\n29 | |             > 3.0 => grade_decimal = grade_decimal - 1;\n...  |\n\
    38 | |             _ => {}\n39 | |         }\n   | |_________- any code following\
    \ this expression is unreachable\n40 |           letter_grades.push(format!(\"\
    {:.1}\", grade_decimal).to_string());\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ unreachable statement\n   |\n   = note: `#[warn(unreachable_code)]` on by default\n\
    \nerror[E0606]: casting `&f64` as `f64` is invalid\n  --> /tmp/tmpzdmqf40y.rs:25:38\n\
    \   |\n25 |         let mut grade_decimal: f64 = grade as f64;\n   |         \
    \                             -----^^^^^^^\n   |                             \
    \         |\n   |                                      cannot cast `&f64` as `f64`\n\
    \   |                                      help: dereference the expression: `*grade`\n\
    \nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0606`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_grade = grades.iter().cloned();\n    for\
    \ grade& in grades_grade {\n        let mut numerator = grade as f64;\n      \
    \  let mut denominator = 1;\n        let mut remainder = 0;\n        while numerator\
    \ > remainder {\n            let remainder = numerator % remainder;\n        \
    \    numerator /= remainder;\n            denominator += 1;\n        }\n     \
    \   if denominator > 1 {\n            grades_grade.filter_map(|x| if x < 0.95\
    \ { Some(x.to_string()) } else { None }).collect();\n        } else {\n      \
    \      grades_grade.filter_map(|x| if x < 3.0 { Some(x.to_string()) } else { None\
    \ }).collect();\n        }\n    }\n    grades_grade.filter_map(|x| if x <= 0.5\
    \ { Some(x.to_string()) } else { None }).collect();\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: missing `in` in `for` loop\n  --> /tmp/tmpxy8px3w9.rs:24:14\n  \
    \ |\n24 |     for grade& in grades_grade {\n   |              ^ help: try adding\
    \ `in` here\n\nerror: expected expression, found keyword `in`\n  --> /tmp/tmpxy8px3w9.rs:24:16\n\
    \   |\n24 |     for grade& in grades_grade {\n   |                ^^ expected\
    \ expression\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    // Your code goes here\n    let mut total_grade = grades.iter().sum();\
    \ // Find the total of the grades\n    if total_grade < 4.0\n        || (total_grade\
    \ - 4.0) * 10 >= grades.iter().count()\n    {\n        return vec![\"\"];\n  \
    \  }\n    let mut letter_grade = vec![];\n    for i in 0..grades.len() - 1 {\n\
    \        if total_grade - grades[i] >= 3.0 {\n            letter_grade.push(\"\
    B+\");\n            total_grade -= 3.0;\n        }\n        if total_grade - grades[i]\
    \ >= 2.7 {\n            letter_grade.push(\"B\");\n            total_grade -=\
    \ 2.7;\n        }\n        if total_grade - grades[i] >= 2.3 {\n            letter_grade.push(\"\
    B-\");\n            total_grade -= 2.3;\n        }\n        if total_grade - grades[i]\
    \ >= 2.0 {\n            letter_grade.push(\"C+\");\n            total_grade -=\
    \ 2.0;\n        }\n        if total_grade - grades[i] >= 1.7 {\n            letter_grade.push(\"\
    C\");\n            total_grade -= 1.7;\n        }\n        if total_grade - grades[i]\
    \ >= 1.3{\n            letter_grade.push(\"C-\");\n            total_grade -=\
    \ 1.3;\n        }\n        if total_grade - grades[i] >= 1.0{\n            letter_grade.push(\"\
    D+\");\n            total_grade -= 1.0;\n        }\n        if total_grade - grades[i]\
    \ >= 0.7{\n            letter_grade.push(\"D\");\n            total_grade -= 0.7;\n\
    \        }\n        if total_grade - grades[i] >= 0.0{\n            letter_grade.push(\"\
    D-\");\n            total_grade -= 0.0;\n        }\n        if total_grade - grades[i]\
    \ > -3.0 {\n            letter_grade.push(\"E\");\n            total_grade -=\
    \ -3.0;\n        }\n    }\n    letter_grade.reverse();\n    letter_grade\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6dpyv5ay.rs:28:21\n   |\n\
    28 |         return vec![\"\"];\n   |                     ^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                     |\n   |      \
    \               expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6dpyv5ay.rs:74:5\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \     ----------- expected `Vec<String>` because of return type\n...\n74 |   \
    \  letter_grade\n   |     ^^^^^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let grades_sum = grades.iter().sum();\n    let mut letter_grades:\
    \ Vec<String> = vec![];\n    for i in 0..grades.len() {\n        if grades[i]\
    \ > 0.0 && grades_sum - grades[i] < 5.0 {\n            letter_grades.push(format!(\"\
    {}+\", grades[i]));\n        } else {\n            letter_grades.push(format!(\"\
    {}\", grades[i]));\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n  \
    \  let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpucwp3x4g.rs:23:9\n\
    \   |\n23 |     let grades_sum = grades.iter().sum();\n   |         ^^^^^^^^^^\
    \ consider giving `grades_sum` a type\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades = grades.clone();\n    grades.pop();\n\
    \    let mut total: f64 = 0.0;\n    for grade in grades {\n        total += grade;\n\
    \    }\n    let grades_length = grades.len();\n    let mut letters: Vec<String>\
    \ = vec![\"\".to_string(); grades_length];\n    for grade in grades {\n      \
    \  if grade > 0.0 {\n            letters[grades_length - grade - 1] = format!(\"\
    {}+\", grade);\n        } else {\n            letters[grades_length - grade -\
    \ 1] = format!(\"{}\", grade);\n        }\n    }\n    for grade in grades {\n\
    \        if grade <= 0.0 {\n            letters[grades_length - grade - 1] = format!(\"\
    {}\", grade);\n        }\n    }\n    letters.reverse();\n    letters\n}\n\nfn\
    \ main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot subtract `f64` from `usize`\n  --> /tmp/tmp_owcq6ha.rs:33:35\n\
    \   |\n33 |             letters[grades_length - grade - 1] = format!(\"{}+\",\
    \ grade);\n   |                                   ^ no implementation for `usize\
    \ - f64`\n   |\n   = help: the trait `Sub<f64>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot subtract `f64` from `usize`\n  --> /tmp/tmp_owcq6ha.rs:35:35\n   |\n\
    35 |             letters[grades_length - grade - 1] = format!(\"{}\", grade);\n\
    \   |                                   ^ no implementation for `usize - f64`\n\
    \   |\n   = help: the trait `Sub<f64>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: cannot\
    \ subtract `f64` from `usize`\n  --> /tmp/tmp_owcq6ha.rs:40:35\n   |\n40 |   \
    \          letters[grades_length - grade - 1] = format!(\"{}\", grade);\n   |\
    \                                   ^ no implementation for `usize - f64`\n  \
    \ |\n   = help: the trait `Sub<f64>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\ne"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|x| {\n        match x {\n         \
    \   0.0 => String::new(),\n            _ => match x {\n                4.0 =>\
    \ \"A+\".to_string(),\n                _ => \"A-\".to_string(),\n            \
    \    3.7 => \"A\".to_string(),\n                3.3 => \"A-\".to_string(),\n \
    \               3.0 => \"B+\".to_string(),\n                _ => \"B-\".to_string(),\n\
    \                2.7 => \"B\".to_string(),\n                2.3 => \"B-\".to_string(),\n\
    \                2.0 => \"C+\".to_string(),\n                _ => \"C-\".to_string(),\n\
    \                1.7 => \"C\".to_string(),\n                1.3 => \"C-\".to_string(),\n\
    \                1.0 => \"D+\".to_string(),\n                _ => \"D-\".to_string(),\n\
    \                0.7 => \"D\".to_string(),\n                0.0 => \"D-\".to_string(),\n\
    \                _ => \"E\".to_string(),\n            },\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"A-\", \"A-\", \"A-\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpv25isj9t.rs:51:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades\
    \ {\n        let letter = match grade {\n            4.0 => \"A+\",\n        \
    \    3.7 => \"A\",\n            3.3 => \"A-\",\n            3.0 => \"B+\",\n \
    \           2.7 => \"B\",\n            2.3 => \"B-\",\n            2.0 => \"C+\"\
    ,\n            1.7 => \"C\",\n            1.3 => \"C-\",\n            1.0 => \"\
    D+\",\n            0.7 => \"D\",\n            _ => \"D-\",\n            0.0 =>\
    \ \"E\",\n        };\n        letter_grades.push(letter);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpatbrkn0k.rs:42:5\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n42 |     letter_grades\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().filter(|x| *x > 0f64).map(|x| {\n      \
    \  match x {\n            0...2.7 => \"D-\",\n            2.7...3.7 => \"D\",\n\
    \            3.7...3.3 => \"D+ \",\n            3.3...3.0 => \"D\",\n        \
    \    3.0...2.7 => \"D+ \",\n            2.7...2.3 => \"D- \",\n            2.3...2.0\
    \ => \"D+ \",\n            2.0...1.7 => \"C\",\n            1.7...1.3 => \"C-\
    \ \",\n            1.3...1.0 => \"C+ \",\n            1.0...0.7 => \"C \",\n \
    \           0.7...0.0 => \"D-\",\n            0.0f64 => \"E\",\n            _\
    \ => \"\"\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "warning: `...` range patterns are deprecated\n  --> /tmp/tmpslnbh3mr.rs:25:14\n\
    \   |\n25 |             0...2.7 => \"D-\",\n   |              ^^^ help: use `..=`\
    \ for an inclusive range\n   |\n   = note: `#[warn(ellipsis_inclusive_range_patterns)]`\
    \ on by default\n   = warning: this is accepted in the current edition (Rust 2015)\
    \ but is a hard error in Rust 2021!\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    \nwarning: `...` range patterns are deprecated\n  --> /tmp/tmpslnbh3mr.rs:26:16\n\
    \   |\n26 |             2.7...3.7 => \"D\",\n   |                ^^^ help: use\
    \ `..=` for an inclusive range\n   |\n   = warning: this is accepted in the current\
    \ edition (Rust 2015) but is a hard error in Rust 2021!\n   = note: for more information,\
    \ see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    \nwarning: `...` range patterns are deprecated\n  --> /tmp/tmpslnbh3mr.rs:27:16\n\
    \   |\n27 |             3.7...3.3 => \"D+ \",\n   |                ^^^ help: use\
    \ `..=` for an inclusive range\n   |\n   = warning: this is accepted in the current\
    \ edition (Rust 2015) but is a hard error in Rust 2021!\n   = note: for more information,\
    \ see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    \nwarning: `...` range patterns are deprecated\n  --> /tmp/tmpslnbh3mr.rs:28:16\n\
    \   |\n28 |             3.3...3.0 => \"D\",\n   |                ^^^ help: use\
    \ `..=` for an inclusive range\n   |\n   = warning: this is accepted in the current\
    \ edition (Rust 2015) but is a hard error in Rust 2021!\n   = note: for more information,\
    \ see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    \nwarning: `...` range patterns are deprecated\n  --> /tmp/tmpslnbh3mr.rs:29:16\n\
    \   |\n29 |             3.0...2.7 => \"D+ \",\n   |                ^^^ help: use\
    \ `..=` for an inclusive range\n   |\n   = warning: this is accepted in the current\
    \ edition (Rust 2015) but is a hard error in Rust 2021!\n   = note: for more information,"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades\n        .iter()\n        .enumerate()\n      \
    \  .filter_map(|(i, grade)| {\n            if grade <= 3.0 {\n               \
    \ Some(grade as usize)\n            } else {\n                None\n         \
    \   }\n        })\n        .fold(vec![], |mut grades, (i, grade)| {\n        \
    \    grades\n                .push((grade as usize).to_string())\n           \
    \     .append(i)\n                .join()\n        });\n}\n\nfn main() {\n   \
    \ let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjdms20hf.rs:27:25\n   |\n\
    27 |             if grade <= 3.0 {\n   |                         ^^^\n   |   \
    \                      |\n   |                         expected `&f64`, found\
    \ floating-point number\n   |                         help: consider borrowing\
    \ here: `&3.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjdms20hf.rs:33:36\n\
    \   |\n33 |         .fold(vec![], |mut grades, (i, grade)| {\n   |           \
    \                         ^^^^^^^^^-\n   |                                   \
    \ |        |\n   |                                    |        expected due to\
    \ this\n   |                                    expected `usize`, found tuple\n\
    \   |\n   = note: expected type `usize`\n             found tuple `(_, _)`\n\n\
    error[E0599]: no method named `append` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpjdms20hf.rs:36:18\n   |\n36 |                 .append(i)\n\
    \   |                  ^^^^^^ method not found in `()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjdms20hf.rs:22:48\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n...\n38 |     \
    \    });\n   |           - help: remove this semicolon\n   |\n   = note: expected\
    \ struct `Vec<String>`\n           found unit type `()`\n\nerror[E0606]: casting\
    \ `&f64` as `usize` is invalid\n  --> /tmp/tmpjdms20hf.rs:28:22\n   |\n28 |  \
    \               Some(grade as usize)\n   |                      -----^^^^^^^^^\n\
    \   |                      |\n   |                      cannot cast `&f64` as\
    \ `usize`\n   |                      help: dereference the expression: `*grade`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599, E0606.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for i in 0..grades.len()\
    \ {\n        if grades[i] > 0.0 {\n            letter_grades.push((grades[i] /\
    \ 4.0) as char);\n        } else if grades[i] < 0.0 {\n            letter_grades.push((-(grades[i]\
    \ / 4.0) as char));\n        } else {\n            letter_grades.push(0);\n  \
    \      }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around method argument\n  --> /tmp/tmpx87t3nh2.rs:28:32\n\
    \   |\n28 |             letter_grades.push((-(grades[i] / 4.0) as char));\n  \
    \ |                                ^                          ^\n   |\n   = note:\
    \ `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n\
    28 -             letter_grades.push((-(grades[i] / 4.0) as char));\n28 +     \
    \        letter_grades.push(-(grades[i] / 4.0) as char);\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpx87t3nh2.rs:30:32\n   |\n30 |             letter_grades.push(0);\n\
    \   |                                ^ expected `char`, found `u8`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpx87t3nh2.rs:33:5\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \     ----------- expected `Vec<String>` because of return type\n...\n33 |   \
    \  letter_grades\n   |     ^^^^^^^^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror[E0604]: only `u8` can be cast as `char`, not `f64`\n  --> /tmp/tmpx87t3nh2.rs:26:32\n\
    \   |\n26 |             letter_grades.push((grades[i] / 4.0) as char);\n   | \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n   |\n\
    help: try `char::from_u32` instead (via a `u32`)\n  --> /tmp/tmpx87t3nh2.rs:26:32\n\
    \   |\n26 |             letter_grades.push((grades[i] / 4.0) as char);\n   | \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0604]: only\
    \ `u8` can be cast as `char`, not `f64`\n  --> /tmp/tmpx87t3nh2.rs:28:32\n   |\n\
    28 |             letter_grades.push((-(grades[i] / 4.0) as char));\n   |     \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n   |\n\
    help: try `char::from_u32` instead (via a `u32`)\n  --> /tmp/tmpx87t3nh2.rs:28:32\n\
    \   |\n28 |             letter_grades.push((-(grades[i] / 4.0) as char));\n  \
    \ |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to 4 previous errors; 1 warning emitted\n\nSome errors have detailed"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_result = Vec::new();\n    let mut grades_sorted\
    \ = grades.clone();\n    grades_sorted.sort();\n\n    let mut sum_grade_result\
    \ = 0;\n    for grade in grades_sorted {\n        let grade = grades.iter().rev().find(|&grade|\
    \ grade == grade).unwrap();\n        let grades_result = grade - &grades_sorted[0];\n\
    \        grades_result.to_string().push(\"+\");\n        grades_result += &grade;\n\
    \        grades_result += &grades_sorted[0];\n        grades_result += \"+\";\n\
    \        grades_result.push(\"E\");\n        grades_result.push(\"\");\n\n   \
    \     grades_result.push(grades_result.chars().collect::<Vec<_>>().as_slice().to_string());\n\
    \        sum_grade_result += &grades_result;\n    }\n    grades_result.push(\"\
    D-\");\n    grades_result.push(\"\");\n    grades_result.push(&sum_grade_result.to_string());\n\
    \n    return grades_result;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpu63okn73.rs:25:19\n\
    \    |\n25  |     grades_sorted.sort();\n    |                   ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu63okn73.rs:31:40\n\
    \   |\n31 |         grades_result.to_string().push(\"+\");\n   |             \
    \                           ^^^ expected `char`, found `&str`\n   |\nhelp: if\
    \ you meant to write a `char` literal, use single quotes\n   |\n31 |         grades_result.to_string().push('+');\n\
    \   |                                        ~~~\n\nerror[E0277]: cannot add-assign\
    \ `&&f64` to `f64`\n  --> /tmp/tmpu63okn73.rs:32:23\n   |\n32 |         grades_result\
    \ += &grade;\n   |                       ^^ no implementation for `f64 += &&f64`\n\
    \   |\n   = help: the trait `AddAssign<&&f64>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0599]: no method named `push` found for type `f64` in the current scope\n\
    \  --> /tmp/tmpu63okn73.rs:35:23\n   |\n35 |         grades_result.push(\"E\"\
    );\n   |                       ^^^^ method not found in `f64`\n\nerror[E0277]:\
    \ cannot add-assign `&str` to `f64`\n  --> /tmp/tmpu63okn73.rs:34:23\n   |\n34\
    \ |         grades_result += \"+\";\n   |                       ^^ no implementation\
    \ for `f64 += &str`\n   |\n   = help: the trait `AddAssign<&str>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `AddAssign<"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_string: Vec<String> = Vec::new();\n   \
    \ let mut total_gpa = grades.sum();\n    let mut gpa: f64 = grades.sum();\n  \
    \  \n    while total_gpa >= 0.0 {\n        if gpa > 9.0 {\n            grades_string.push(\"\
    A-\");\n            gpa -= 9.0;\n            \n        } else if gpa > 8.0 {\n\
    \            grades_string.push(\"B-\");\n            gpa -= 8.0;\n          \
    \  \n        } else if gpa > 7.0 {\n            grades_string.push(\"C-\");\n\
    \            gpa -= 7.0;\n            \n        } else if gpa > 6.0 {\n      \
    \      grades_string.push(\"D-\");\n            gpa -= 6.0;\n            \n  \
    \      } else if gpa > 5.0 {\n            grades_string.push(\"D+\");\n      \
    \      gpa -= 5.0;\n            \n        } else if gpa > 4.0 {\n            grades_string.push(\"\
    D\");\n            gpa -= 4.0;\n            \n        } else if gpa > 3.0 {\n\
    \            grades_string.push(\"E\");\n            gpa -= 3.0;\n           \
    \ \n        } else if gpa > 2.0 {\n            grades_string.push(\"F\");\n  \
    \          gpa -= 2.0;\n            \n        } else {\n            grades_string.push(\"\
    F\");\n        }\n        total_gpa -= gpa;\n    }\n    grades_string.push(\"\
    D\");\n    grades_string\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmpw11n8hhr.rs:24:32\n\
    \    |\n24  |       let mut total_gpa = grades.sum();\n    |                 \
    \                 ^^^ `Vec<f64>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<f64>: Iterator`\n       \
    \     which is required by `&mut Vec<f64>: Iterator`\n            `[f64]: Iterator`\n\
    \            which is required by `&mut [f64]: Iterator`\n\nerror[E0599]: `Vec<f64>`\
    \ is not an iterator\n   --> /tmp/tmpw11n8hhr.rs:25:31\n    |\n25  |       let\
    \ mut gpa: f64 = grades.sum();\n    |                                 ^^^ `Vec<f64>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<f64>: Iterator`\n            which is required by `&mut Vec<f64>:\
    \ Iterator`\n            `[f64]: Iterator`\n            which is required by `&mut\
    \ [f64]: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw11n8hhr.rs:29:32\n\
    \   |\n29 |             grades_string.push(\"A-\");\n   |                    \
    \            ^^^^- help: try using a conversion method: `.to_string()`\n   | \
    \                               |\n   |                                expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw11n8hhr.rs:33:32\n\
    \   |\n33 |             grades_string.push(\"B-\");\n   |                    \
    \            ^^^^- help: try using a conversion method: `.to_string()`\n   | \
    \                               |\n   |                                expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw11n8hhr.rs:37:32\n\
    \   |\n37 |             grades_string.push(\"C-\");\n   |                    \
    \            ^^^^- help: try using a conversion method: `.to_string()`\n   | \
    \                               |\n   |                                expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw11n8hhr.rs:41:32\n\
    \   |\n41 |             grades_string.push(\"D-\");\n   |                    \
    \            ^^^^- help: try using a conversion method: `.to_string"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_slice: Vec<f64> = grades.iter().cloned().collect();\n\
    \    let mut letter_grades_vec: Vec<String> = vec![];\n    while grades_slice.len()\
    \ > 0 {\n        let grade = grades_slice.pop().unwrap();\n        if grade <\
    \ 4.0 {\n            letter_grades_vec.push(\"A+\");\n        } else if grade\
    \ < 4.3 {\n            letter_grades_vec.push(\"A\");\n        } else if grade\
    \ < 4.6 {\n            letter_grades_vec.push(\"A-\");\n        } else if grade\
    \ < 5.0 {\n            letter_grades_vec.push(\"B+\");\n        } else if grade\
    \ < 5.3 {\n            letter_grades_vec.push(\"B\");\n        } else if grade\
    \ < 5.6 {\n            letter_grades_vec.push(\"B-\");\n        } else if grade\
    \ < 6.0 {\n            letter_grades_vec.push(\"C+\");\n        } else if grade\
    \ < 6.3 {\n            letter_grades_vec.push(\"C\");\n        } else if grade\
    \ < 6.6 {\n            letter_grades_vec.push(\"C-\");\n        } else if grade\
    \ < 7.0 {\n            letter_grades_vec.push(\"D+\");\n        } else if grade\
    \ < 7.3 {\n            letter_grades_vec.push(\"D\");\n        } else if grade\
    \ < 7.6 {\n            letter_grades_vec.push(\"D-\");\n        } else {\n   \
    \         letter_grades_vec.push(\"E\");\n        }\n    }\n    letter_grades_vec\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_sh9ghu6.rs:28:36\n   |\n\
    28 |             letter_grades_vec.push(\"A+\");\n   |                       \
    \             ^^^^- help: try using a conversion method: `.to_string()`\n   |\
    \                                    |\n   |                                 \
    \   expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_sh9ghu6.rs:30:36\n   |\n30 |             letter_grades_vec.push(\"\
    A\");\n   |                                    ^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                    |\n   |    \
    \                                expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_sh9ghu6.rs:32:36\n   |\n32 |             letter_grades_vec.push(\"\
    A-\");\n   |                                    ^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                    |\n   |    \
    \                                expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_sh9ghu6.rs:34:36\n   |\n34 |             letter_grades_vec.push(\"\
    B+\");\n   |                                    ^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                    |\n   |    \
    \                                expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_sh9ghu6.rs:36:36\n   |\n36 |             letter_grades_vec.push(\"\
    B\");\n   |                                    ^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                    |\n   |    \
    \                                expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_sh9ghu6.rs:38:36\n   |\n38 |             letter_grades_vec.push(\"\
    B-\");\n   |                                    ^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                    |\n   |    \
    \                                expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let grades_with_zero = grades.iter().cloned().map(|x|\
    \ if x==0.0 { 0.0 } else { x }).collect();\n    grades_with_zero.sort();\n   \
    \ let mut grades = vec![];\n    grades_with_zero.iter().take(8).for_each(|grade|\
    \ {\n        if grade == 0.0 {\n            grades.push(\"E\");\n            return;\n\
    \        }\n        let mut current_grade = vec![];\n        let mut current_gpa\
    \ = vec![];\n        current_gpa.push(grade / 4.0);\n        current_grade.push(current_gpa.last().unwrap().to_ascii().to_string());\n\
    \        let mut index = grades_with_zero.iter().position(|x| x == grade).unwrap();\n\
    \        if index > 0 {\n            let mut previous_gpa = vec![];\n        \
    \    let mut previous_gpa = grades_with_zero[index - 3].to_ascii_string();\n \
    \           current_gpa.push(previous_gpa - previous_gpa.chars().nth(1).unwrap());\n\
    \            current_gpa.push(current_gpa[0] + \"-\".to_string());\n         \
    \   current_grade.push(current_gpa.join(\"\"));\n        }\n        grades.push(current_grade.join(\"\
    \"));\n    });\n    grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmphif3rmtv.rs:24:5\n\
    \   |\n23 |     let grades_with_zero = grades.iter().cloned().map(|x| if x==0.0\
    \ { 0.0 } else { x }).collect();\n   |         ---------------- consider giving\
    \ `grades_with_zero` a type\n24 |     grades_with_zero.sort();\n   |     ^^^^^^^^^^^^^^^^\
    \ cannot infer type\n   |\n   = note: type must be known at this point\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphif3rmtv.rs:43:21\n   |\n43 |         grades.push(current_grade.join(\"\
    \"));\n   |                     ^^^^^^^^^^^^^^^^^^^^^^\n   |                 \
    \    |\n   |                     expected `&str`, found struct `String`\n   |\
    \                     help: consider borrowing here: `&current_grade.join(\"\"\
    )`\n   |\nnote: return type inferred to be `&str` here\n  --> /tmp/tmphif3rmtv.rs:29:13\n\
    \   |\n29 |             return;\n   |             ^^^^^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphif3rmtv.rs:45:5\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \     ----------- expected `Vec<String>` because of return type\n...\n45 |   \
    \  grades\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0282, E0308.\nFor more information about an error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades = grades.to_owned();\n    grades.sort_unstable_by_key(|a|\
    \ a.partial_cmp(&a));\n    let mut letter_grade = String::new();\n    for i in\
    \ grades.iter() {\n        if i > 0.0 {\n            letter_grade += i.to_string();\n\
    \            if i.partial_cmp(&grades.last()) == 0 {\n                break;\n\
    \            }\n        }\n    }\n    letter_grade.split(' ')\n        .filter_map(|s|\
    \ s.parse::<i32>().ok())\n        .collect::<Vec<String>>()\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd6ra4d47.rs:27:16\n   |\n\
    27 |         if i > 0.0 {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&f64`, found floating-point number\n   |        \
    \        help: consider borrowing here: `&0.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd6ra4d47.rs:28:29\n   |\n28 |             letter_grade += i.to_string();\n\
    \   |                             ^^^^^^^^^^^^^\n   |                        \
    \     |\n   |                             expected `&str`, found struct `String`\n\
    \   |                             help: consider borrowing here: `&i.to_string()`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpd6ra4d47.rs:29:30\n   |\n29 |\
    \             if i.partial_cmp(&grades.last()) == 0 {\n   |                  \
    \            ^^^^^^^^^^^^^^ expected `f64`, found enum `Option`\n   |\n   = note:\
    \ expected reference `&f64`\n              found reference `&Option<&f64>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpd6ra4d47.rs:29:49\n   |\n29 |  \
    \           if i.partial_cmp(&grades.last()) == 0 {\n   |                    \
    \                             ^ expected enum `Option`, found integer\n   |\n\
    \   = note: expected enum `Option<std::cmp::Ordering>`\n              found type\
    \ `{integer}`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `i32`\n    --> /tmp/tmpd6ra4d47.rs:36:10\n\
    \     |\n36   |         .collect::<Vec<String>>()\n     |          ^^^^^^^ value\
    \ of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=i32>`\n\
    \     |\n     = help: the trait `FromIterator<i32>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 5 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n    let mut\
    \ last_gp: f64 = grades.last().unwrap();\n    let mut counter = 0;\n    let mut\
    \ total_gp: f64 = 0.0;\n    while counter < grades.len() {\n        if grades[counter]\
    \ >= last_gp {\n            grades_vec.push(format!(\"{}+\", &(grades[counter]\
    \ - last_gp).abs()));\n            last_gp = grades[counter];\n            total_gp\
    \ += grades[counter];\n        }\n        counter += 1;\n    }\n    if total_gp\
    \ >= 0.0 && total_gp < last_gp {\n        grades_vec.push(format!(\"{}\", &(total_gp\
    \ - last_gp).abs()));\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkxiuvsnn.rs:24:28\n   |\n\
    24 |     let mut last_gp: f64 = grades.last().unwrap();\n   |                \
    \      ---   ^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `&f64`\n   |       \
    \               |\n   |                      expected due to this\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n24 |     let mut last_gp: f64 = *grades.last().unwrap();\n\
    \   |                            +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n\n    for grade\
    \ in grades {\n        if grade > 4.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            result.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"B\", \"C-\", \"C\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmpumraxkh3.rs:60:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    if grades.len() <= 2 {\n        grades\n            .iter()\n\
    \            .enumerate()\n            .map(|(i, grade)| (grade >= 3.0 && grade\
    \ <= 4.0) || (grade >= 2.0 && grade <= 3.7))\n            .filter(|b| b)\n   \
    \         .cloned()\n            .collect()\n    } else {\n        grades\n  \
    \          .iter()\n            .enumerate()\n            .map(|(i, grade)| (grade\
    \ >= 3.0 && grade <= 3.7) || (grade >= 2.0 && grade <= 2.3))\n            .filter(|b|\
    \ b)\n            .cloned()\n            .collect()\n    }\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm0rha3vt.rs:27:41\n   |\n\
    27 |             .map(|(i, grade)| (grade >= 3.0 && grade <= 4.0) || (grade >=\
    \ 2.0 && grade <= 3.7))\n   |                                         ^^^\n  \
    \ |                                         |\n   |                          \
    \               expected `&f64`, found floating-point number\n   |           \
    \                              help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm0rha3vt.rs:27:57\n   |\n27 |             .map(|(i,\
    \ grade)| (grade >= 3.0 && grade <= 4.0) || (grade >= 2.0 && grade <= 3.7))\n\
    \   |                                                         ^^^\n   |      \
    \                                                   |\n   |                  \
    \                                       expected `&f64`, found floating-point\
    \ number\n   |                                                         help: consider\
    \ borrowing here: `&4.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm0rha3vt.rs:27:75\n\
    \   |\n27 |             .map(|(i, grade)| (grade >= 3.0 && grade <= 4.0) || (grade\
    \ >= 2.0 && grade <= 3.7))\n   |                                             \
    \                              ^^^\n   |                                     \
    \                                      |\n   |                               \
    \                                            expected `&f64`, found floating-point\
    \ number\n   |                                                               \
    \            help: consider borrowing here: `&2.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpm0rha3vt.rs:27:91\n   |\n27 |             .map(|(i, grade)|\
    \ (grade >= 3.0 && grade <= 4.0) || (grade >= 2.0 && grade <= 3.7))\n   |    \
    \                                                                            \
    \           ^^^\n   |                                                        \
    \                                   |\n   |                                  \
    \                                                         expected `&f64`, found\
    \ floating-point number\n   |                      "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut temp = 0.0;\n\
    \    for i in grades.iter() {\n        let numerical_grade = numerical(i);\n \
    \       if numerical_grade > temp {\n            temp = numerical_grade;\n   \
    \     }\n    }\n    for i in grades.iter() {\n        let numerical_grade = numerical(i);\n\
    \        if numerical_grade == temp {\n            if numerical_grade < 3.0 {\n\
    \                letter_grades.push(\"A+\");\n            } else {\n         \
    \       if numerical_grade < 4.0 {\n                    letter_grades.push(\"\
    A\");\n                } else {\n                    if numerical_grade < 4.6\
    \ {\n                        letter_grades.push(\"A-\");\n                   \
    \ } else {\n                        if numerical_grade < 5.0 {\n             \
    \               letter_grades.push(\"B+\");\n                        } else {\n\
    \                            if numerical_grade < 5.6 {\n                    \
    \            letter_grades.push(\"B\");\n                            } else {\n\
    \                                if numerical_grade < 6.0 {\n                \
    \                    letter_grades.push(\"B-\");\n                           \
    \     } else {\n                                    if numerical_grade < 6.6 {\n\
    \                                        letter_grades.push(\"C+\");\n       \
    \                             } else {\n                                     \
    \   if numerical_grade < 7.0 {\n                                            letter_grades.push(\"\
    C\");\n                                        } else {\n                    \
    \                        if numerical_grade < 7.6 {\n                        \
    \                        letter_grades.push(\"C-\");\n                       \
    \                     } else {\n                                             \
    \   if numerical_grade < 8.0 {\n                                             \
    \       letter_grades.push(\"D+\");\n                                        \
    \        } else {\n                                                    if numerical_grade\
    \ < 8.6 {\n                                                        letter_grades.push(\"\
    D\");\n                                                    } else {\n        \
    \                                                if numerical_grade < 9.0 {\n\
    \                                                            letter_grades.push(\"\
    D-\");\n                                                        } else {\n   \
    \                                                         letter_grades.push(\"\
    E\");\n                                                        }\n           \
    \                                         }\n                                \
    \                }\n                                            }\n          \
    \                              }\n                                    }\n    \
    \                            }\n                            }\n              \
    \          }\n                    }\n                }\n            }\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `numerical` in this scope\n  --> /tmp/tmprpdo8igz.rs:26:31\n\
    \   |\n26 |         let numerical_grade = numerical(i);\n   |                \
    \               ^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `numerical` in this scope\n  --> /tmp/tmprpdo8igz.rs:32:31\n   |\n\
    32 |         let numerical_grade = numerical(i);\n   |                       \
    \        ^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprpdo8igz.rs:85:5\n   |\n22 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \     ----------- expected `Vec<String>` because of return type\n...\n85 |   \
    \  letter_grades\n   |     ^^^^^^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let grades: Vec<f64> = grades.into_iter().map(|x| x.ln()).collect();\n\
    \    let mut output: Vec<String> = Vec::new();\n    let mut prev_grade_letter:\
    \ Vec<f64> = Vec::new();\n    let mut prev_grade_number: Vec<f64> = Vec::new();\n\
    \    let mut current_grade_letter: Vec<f64> = Vec::new();\n    let mut current_grade_number:\
    \ Vec<f64> = Vec::new();\n    for i in 0..grades.len() - 1 {\n        let mut\
    \ current_grade_letter: Vec<f64> = Vec::new();\n        let mut current_grade_number:\
    \ Vec<f64> = Vec::new();\n        for j in 0..grades.len() - 1 {\n           \
    \ if i != j {\n                if grades[j].ln() == grades[i].ln() || grades[j].ln()\
    \ <= grades[i].ln() && grades[j].ln() >= grades[i].ln() - 1.0 {\n            \
    \        current_grade_letter.push(grades[j]);\n                    current_grade_number.push(grades[i].ln());\n\
    \                } else {\n                    current_grade_letter.push(grades[j]);\n\
    \                    current_grade_number.push(grades[j].ln());\n            \
    \    }\n            }\n        }\n        for j in 0..current_grade_letter.len()\
    \ {\n            if current_grade_number[j] > prev_grade_number[j] {\n       \
    \         let index = current_grade_letter.iter().position(|&x| x == current_grade_letter[j]).unwrap();\n\
    \                output.push(format!(\"{}\", current_grade_letter[j]));\n    \
    \            if index != 0 {\n                    output.push(\"+\");\n      \
    \          }\n                output.push(format!(\"{}\", current_grade_number[j]));\n\
    \            } else {\n                output.push(\"-\");\n                if\
    \ index != 0 {\n                    output.push(\"+\");\n                }\n \
    \               output.push(format!(\"{}\", current_grade_number[j]));\n     \
    \       }\n        }\n        prev_grade_number = current_grade_number;\n    \
    \    prev_grade_letter = current_grade_letter;\n    }\n    output\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `index` in this scope\n  --> /tmp/tmplf8ubvcg.rs:53:20\n\
    \   |\n53 |                 if index != 0 {\n   |                    ^^^^^ not\
    \ found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplf8ubvcg.rs:48:33\n\
    \   |\n48 |                     output.push(\"+\");\n   |                    \
    \             ^^^- help: try using a conversion method: `.to_string()`\n   | \
    \                                |\n   |                                 expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplf8ubvcg.rs:52:29\n\
    \   |\n52 |                 output.push(\"-\");\n   |                        \
    \     ^^^- help: try using a conversion method: `.to_string()`\n   |         \
    \                    |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplf8ubvcg.rs:54:33\n\
    \   |\n54 |                     output.push(\"+\");\n   |                    \
    \             ^^^- help: try using a conversion method: `.to_string()`\n   | \
    \                                |\n   |                                 expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades\
    \ {\n        if grade < 4.0 {\n            letter_grades.push(\"A+\");\n     \
    \   } else if grade < 3.7 {\n            letter_grades.push(\"A\");\n        }\
    \ else if grade < 3.3 {\n            letter_grades.push(\"A-\");\n        } else\
    \ if grade < 3.0 {\n            letter_grades.push(\"B+\");\n        } else if\
    \ grade < 2.7 {\n            letter_grades.push(\"B\");\n        } else if grade\
    \ < 2.3 {\n            letter_grades.push(\"B-\");\n        } else if grade <\
    \ 2.0 {\n            letter_grades.push(\"C+\");\n        } else if grade < 1.7\
    \ {\n            letter_grades.push(\"C\");\n        } else if grade < 1.3 {\n\
    \            letter_grades.push(\"C-\");\n        } else if grade < 1.0 {\n  \
    \          letter_grades.push(\"D+\");\n        } else if grade < 0.7 {\n    \
    \        letter_grades.push(\"D\");\n        } else if grade < 0.0 {\n       \
    \     letter_grades.push(\"D-\");\n        } else {\n            letter_grades.push(\"\
    E\");\n        }\n    }\n    return letter_grades;\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpygbsdwbk.rs:53:12\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n53 |     return letter_grades;\n   |          \
    \  ^^^^^^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades.iter()\
    \ {\n        if grade > 3.0 { \n            letter_grades.push(&format!(\"A+\"\
    ));\n        } else if grade > 2.7 { \n            letter_grades.push(&format!(\"\
    B+\"));\n        } else if grade > 2.3 { \n            letter_grades.push(&format!(\"\
    B-\"));\n        } else if grade > 2.0 { \n            letter_grades.push(&format!(\"\
    C+\"));\n        } else if grade > 1.7 { \n            letter_grades.push(&format!(\"\
    C\"));\n        } else if grade > 1.3 { \n            letter_grades.push(&format!(\"\
    C-\"));\n        } else if grade > 1.0 { \n            letter_grades.push(&format!(\"\
    D+\"));\n        } else if grade > 0.7 { \n            letter_grades.push(&format!(\"\
    D\"));\n        } else { \n            letter_grades.push(&format!(\"D-\"));\n\
    \        }\n    }\n    letter_grades.push(&format!(\"E\"));\n    return letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8womoi31.rs:25:20\n   |\n\
    25 |         if grade > 3.0 { \n   |                    ^^^\n   |            \
    \        |\n   |                    expected `&f64`, found floating-point number\n\
    \   |                    help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8womoi31.rs:27:27\n   |\n27 |         } else\
    \ if grade > 2.7 { \n   |                           ^^^\n   |                \
    \           |\n   |                           expected `&f64`, found floating-point\
    \ number\n   |                           help: consider borrowing here: `&2.7`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8womoi31.rs:29:27\n   |\n29 |\
    \         } else if grade > 2.3 { \n   |                           ^^^\n   | \
    \                          |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&2.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8womoi31.rs:31:27\n\
    \   |\n31 |         } else if grade > 2.0 { \n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&2.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8womoi31.rs:33:27\n\
    \   |\n33 |         } else if grade > 1.7 { \n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&1.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8womoi31.rs:35:27\n\
    \   |\n35 |         } else if grade > 1.3 { \n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&1.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8womoi31.rs:37:27\n\
    \   |\n37 |         } else if grade > 1.0 { \n   |                           ^^^\n\
    \   |                  "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let grades_array = grades.to_owned();\n\n    // Initialize\
    \ variables\n    let mut student_grades: Vec<String> = vec![];\n    let mut student_gpa:\
    \ Vec<f64> = vec![];\n    let mut student_avg_gpa: Vec<f64> = vec![];\n    let\
    \ mut student_avg: f64 = 0.0;\n    let mut student_gpa_sum: f64 = 0.0;\n    let\
    \ mut student_grades_sum: f64 = 0.0;\n    let mut student_grades_count: usize\
    \ = 0;\n    let mut student_grade_percentage: f64 = 0.0;\n    let mut student_gpa_count\
    \ = 0.0;\n    let mut student_gpa_percentage = 0.0;\n\n    // Calculate the average\
    \ GPA\n    for i in 0..grades_array.len() {\n        student_grade_percentage\
    \ += grades_array[i];\n        student_grades_sum += grades_array[i];\n      \
    \  student_grades_count += 1;\n    }\n\n    if student_grades_count > 0 {\n  \
    \      student_grades_percentage = student_grades_sum / student_grades_count;\n\
    \    }\n\n    for i in 0..grades_array.len() {\n        student_avg_gpa.push(grades_array[i]);\n\
    \        student_gpa_sum += grades_array[i];\n        student_gpa_count += 1;\n\
    \    }\n\n    if student_gpa_count > 0 {\n        student_avg_gpa.sort();\n  \
    \      student_avg_gpa = student_avg_gpa.iter().map(|x| x as f64).collect::<Vec<f64>>();\n\
    \        student_avg_gpa = student_avg_gpa.pop();\n        student_gpa_percentage\
    \ = student_gpa_sum / student_gpa_count;\n    }\n\n    // Calculate the letter\
    \ for each GPA\n    for i in 0..grades_array.len() {\n        if grades_array[i]\
    \ < 4.0 {\n            student_grades.push(\"A+\");\n        } else if grades_array[i]\
    \ < 3.7 {\n            student_grades.push(\"A\");\n        } else if grades_array[i]\
    \ < 3.3 {\n            student_grades.push(\"A-\");\n        } else if grades_array[i]\
    \ < 3.0 {\n            student_grades.push(\"B+\");\n        } else if grades_array[i]\
    \ < 2.7 {\n            student_grades.push(\"B\");\n        } else if grades_array[i]\
    \ < 2.3 {\n            student_grades.push(\"B-\");\n        } else if grades_array[i]\
    \ < 2.0 {\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n   \
    \ assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"\
    ), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpvkkz5srd.rs:86:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n62 |     for i in 0..grades_array.len() {\n   |                         \
    \           - unclosed delimiter\n...\n75 |         } else if grades_array[i]\
    \ < 2.0 {\n   |                                         - this delimiter might\
    \ not be properly closed...\n76 | }\n   | - ...as it matches this but it has different\
    \ indentation\n...\n86 | }\n   |   ^\n\nerror[E0425]: cannot find value `student_grades_percentage`\
    \ in this scope\n  --> /tmp/tmpvkkz5srd.rs:45:9\n   |\n45 |         student_grades_percentage\
    \ = student_grades_sum / student_grades_count;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `student_grade_percentage`\n\
    \nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpvkkz5srd.rs:45:56\n\
    \   |\n45 |         student_grades_percentage = student_grades_sum / student_grades_count;\n\
    \   |                                                        ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot add-assign `{integer}` to `{float}`\n  -->\
    \ /tmp/tmpvkkz5srd.rs:51:27\n   |\n51 |         student_gpa_count += 1;\n   |\
    \                           ^^ no implementation for `{float} += {integer}`\n\
    \   |\n   = help: the trait `AddAssign<{integer}>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 a"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|&grade| {\n        match grade {\n\
    \            0.0    => \"E\",\n            5.0    => \"D\",\n            10.0\
    \   => \"C-\",\n            15.0   => \"C\",\n            20.0   => \"B-\",\n\
    \            25.0   => \"B\",\n            30.0   => \"A-\",\n            35.0\
    \   => \"A\",\n            40.0   => \"A+\",\n            50.0   => \"B+\",\n\
    \            60.0   => \"B-\",\n            70.0   => \"B\",\n            80.0\
    \   => \"C+\",\n            90.0   => \"C\",\n            100.0  => \"C-\",\n\
    \            _ => \"F\"\n        }\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmphhz2n08d.rs:42:8\n     |\n42 \
    \  |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = Vec::new();\n    let\
    \ mut min_value = grades.min();\n    let mut max_value = grades.max();\n    for\
    \ value in grades {\n        if value < min_value {\n            min_value = value;\n\
    \        }\n        if value > max_value {\n            max_value = value;\n \
    \       }\n    }\n    for value in grades {\n        let mut letter_grade: String\
    \ = \"Z\";\n        if value < min_value {\n            letter_grade = \"C\";\n\
    \        } else if value <= min_value + 0.4 {\n            letter_grade = \"A\"\
    ;\n        } else if value <= min_value + 0.3 and value >= min_value + 0.2 {\n\
    \            letter_grade = \"B\";\n        } else if value <= min_value + 0.2\
    \ and value >= min_value + 0.1 {\n            letter_grade = \"A\";\n        }\
    \ else if value <= min_value + 0.1 and value >= min_value + 0.07 {\n         \
    \   letter_grade = \"B\";\n        } else if value <= min_value + 0.06 and value\
    \ >= min_value + 0.05 {\n            letter_grade = \"C\";\n        } else if\
    \ value <= min_value + 0.05 and value >= min_value + 0.04 {\n            letter_grade\
    \ = \"D\";\n        } else if value <= min_value + 0.04 and value >= min_value\
    \ + 0.03 {\n            letter_grade = \"C\";\n        } else if value <= min_value\
    \ + 0.03 and value >= min_value + 0.02 {\n            letter_grade = \"D\";\n\
    \        } else if value <= min_value + 0.02 and value >= min_value + 0.01 {\n\
    \            letter_grade = \"E\";\n        } else if value <= min_value + 0.01\
    \ and value >= min_value + 0.007 {\n            letter_grade = \"D\";\n      \
    \  } else if value <= min_value + 0.006 and value >= min_value + 0.005 {\n   \
    \         letter_grade = \"E\";\n        } else if value <= min_value + 0.005\
    \ and value >= min_value + 0.004 {\n            letter_grade = \"F\";\n      \
    \  } else if value <= min_value + 0.004 and value >= min_value + 0.003 {\n   \
    \         letter_grade = \"F\";\n        } else if value <= min_value + 0.003\
    \ and value >= min_value + 0.002 {\n            letter_grade = \"F\";\n      \
    \  } else if value <= min_value + 0.002 and value >= min_value + 0.001 {\n   \
    \         letter_grade = \"F\";\n        } else if value <= min_value + 0.001\
    \ and value >= min_value + 0.0005 {\n            letter_grade = \"F\";\n     \
    \   } else if value <= min_value + 0.0005 and value >= \n}\n\nfn main() {\n  \
    \  let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpn2qqjhx1.rs:81:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n34 |     for value in grades {\n   |                         - this delimiter\
    \ might not be properly closed...\n...\n71 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n81 | }\n   |   ^\n\nerror: `and` is not a\
    \ logical operator\n  --> /tmp/tmpn2qqjhx1.rs:40:44\n   |\n40 |         } else\
    \ if value <= min_value + 0.3 and value >= min_value + 0.2 {\n   |           \
    \                                 ^^^ help: use `&&` to perform logical conjunction\n\
    \   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical\
    \ operators\n\nerror: `and` is not a logical operator\n  --> /tmp/tmpn2qqjhx1.rs:42:44\n\
    \   |\n42 |         } else if value <= min_value + 0.2 and value >= min_value\
    \ + 0.1 {\n   |                                            ^^^ help: use `&&`\
    \ to perform logical conjunction\n   |\n   = note: unlike in e.g., python and\
    \ PHP, `&&` and `||` are used for logical operators\n\nerror: `and` is not a logical\
    \ operator\n  --> /tmp/tmpn2qqjhx1.rs:44:44\n   |\n44 |         } else if value\
    \ <= min_value + 0.1 and value >= min_value + 0.07 {\n   |                   \
    \                         ^^^ help: use `&&` to perform logical conjunction\n\
    \   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical\
    \ operators\n\nerror: `and` is not a logical operator\n  --> /tmp/tmpn2qqjhx1.rs:46:45\n\
    \   |\n46 |         } else if value <= min_value + 0.06 and value >= min_value\
    \ + 0.05 {\n   |                                             ^^^ help: use `&&`\
    \ to perform logical conjunction\n   |\n   = note: unlike in e.g., python and\
    \ PHP, `&&` and `||` are used for logical operators\n\nerror: `and` is not a logical\
    \ operator\n  --> /tmp/tmpn2qqjhx1.rs:48:45\n   |\n48 |         } else if value\
    \ <= min_value + 0.05 and value >= min_value + 0.04 {\n   |                  \
    \                           ^^^ help"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades\n        .iter()\n        .enumerate()\n      \
    \  .map(|(idx, grade)| {\n            match grade {\n                2.7 => \"\
    B+\",\n                2.3 => \"B\",\n                2.0 => \"C+\",\n       \
    \         1.7 => \"C\",\n                1.3 => \"C-\",\n                1.0 =>\
    \ \"D+\",\n                0.7 => \"D\",\n                0.0 => \"D-\",\n   \
    \             _ => \"E\",\n            }\n        })\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp4y1u_xj0.rs:39:10\n     |\n39\
    \   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_letter = vec![];\n    for grade in grades\
    \ {\n        match grade {\n            0..2 => {\n                grades_letter.push(\"\
    +\");\n            }\n            3..4 => grades_letter.push(\"A\");\n       \
    \     5..6 => grades_letter.push(\"B+\");\n            7..8 => grades_letter.push(\"\
    B\");\n            9..10 => grades_letter.push(\"B-\");\n            11..12 =>\
    \ grades_letter.push(\"C\");\n            13..14 => grades_letter.push(\"C+\"\
    );\n            15..16 => grades_letter.push(\"D\");\n            17..18 => grades_letter.push(\"\
    D+\");\n            19..20 => grades_letter.push(\"D-\");\n            _ => {\n\
    \                grades_letter.push(\"E\");\n            }\n        }\n    }\n\
    \    grades_letter\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: `match` arm body without braces\n  --> /tmp/tmp0yqclano.rs:29:21\n\
    \   |\n29 |             3..4 => grades_letter.push(\"A\");\n   |             \
    \     -- ^^^^^^^^^^^^^^^^^^^^^^^- help: use a comma to end a `match` arm expression:\
    \ `,`\n   |                  |  |\n   |                  |  this statement is\
    \ not surrounded by a body\n   |                  while parsing the `match` arm\
    \ starting here\n\nerror: `match` arm body without braces\n  --> /tmp/tmp0yqclano.rs:30:21\n\
    \   |\n30 |             5..6 => grades_letter.push(\"B+\");\n   |            \
    \      -- ^^^^^^^^^^^^^^^^^^^^^^^^- help: use a comma to end a `match` arm expression:\
    \ `,`\n   |                  |  |\n   |                  |  this statement is\
    \ not surrounded by a body\n   |                  while parsing the `match` arm\
    \ starting here\n\nerror: `match` arm body without braces\n  --> /tmp/tmp0yqclano.rs:31:21\n\
    \   |\n31 |             7..8 => grades_letter.push(\"B\");\n   |             \
    \     -- ^^^^^^^^^^^^^^^^^^^^^^^- help: use a comma to end a `match` arm expression:\
    \ `,`\n   |                  |  |\n   |                  |  this statement is\
    \ not surrounded by a body\n   |                  while parsing the `match` arm\
    \ starting here\n\nerror: `match` arm body without braces\n  --> /tmp/tmp0yqclano.rs:32:22\n\
    \   |\n32 |             9..10 => grades_letter.push(\"B-\");\n   |           \
    \        -- ^^^^^^^^^^^^^^^^^^^^^^^^- help: use a comma to end a `match` arm expression:\
    \ `,`\n   |                   |  |\n   |                   |  this statement is\
    \ not surrounded by a body\n   |                   while parsing the `match` arm\
    \ starting here\n\nerror: `match` arm body without braces\n  --> /tmp/tmp0yqclano.rs:33:23\n\
    \   |\n33 |             11..12 => grades_letter.push(\"C\");\n   |           \
    \         -- ^^^^^^^^^^^^^^^^^^^^^^^- help: use a comma to end a `match` arm expression:\
    \ `,`\n   |                    |  |\n   |                    |  this statement\
    \ is not surrounded by a body\n   |                    while parsing the `match`\
    \ arm starting here\n\nerror: `match` arm body without braces\n  --> /tmp/tmp0yqclano.rs"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let grades_sum = grades.iter().sum(); // sum of all the\
    \ GPA\n    let grades_div = grades_sum / 5; // divide each GPA by 5 to get the\
    \ average GPA\n    let mut letter_grades = Vec::new(); // empty vector of strings\n\
    \    for grade in grades {\n        if grade < grades_div {\n            letter_grades.push('C+');\n\
    \        } else if grade >= grades_div && grade < grades_sum {\n            letter_grades.push('B+');\n\
    \        } else if grade >= grades_sum && grade < grades_div * 2 {\n         \
    \   letter_grades.push('B');\n        } else if grade >= grades_div * 2 && grade\
    \ < grades_div * 3 {\n            letter_grades.push('A+');\n        } else if\
    \ grade >= grades_div * 3 && grade < grades_div * 4 {\n            letter_grades.push('A');\n\
    \        } else if grade >= grades_div * 4 && grade < grades_div * 5 {\n     \
    \       letter_grades.push('A- ');\n        } else if grade >= grades_div * 5\
    \ && grade < grades_sum {\n            letter_grades.push('B-');\n        } else\
    \ if grade >= grades_sum {\n            letter_grades.push('F');\n        } else\
    \ {\n            letter_grades.push('E');\n        }\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpuw3t9kbj.rs:28:35\n\
    \   |\n28 |             letter_grades.push('C+');\n   |                      \
    \             ^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades = grades.clone(); // We want to modify\
    \ this vector\n    // This section will do the actual grades. We'll make a temporary\
    \ vector of\n    // the grades which we'll manipulate as we go. We'll iterate\
    \ over the \n    // original vector, grabbing the grades one at a time, making\
    \ \n    // the necessary changes to grades and adding them to a new vector which\
    \ will\n    // contain the grades we're about to output. \n    let mut grades_vec\
    \ = grades.clone();\n    grades_vec.sort();\n    let mut letter_grades = vec![];\n\
    \    for grade in grades_vec {\n        let letter_grade = match grade {\n   \
    \         4.0 => 'A+',\n            > 3.7 => 'A',\n            > 3.3 => 'A-',\n\
    \            > 3.0 => 'B+',\n            > 2.7 => 'B',\n            > 2.3 => 'B-',\n\
    \            > 2.0 => 'C+',\n            > 1.7 => 'C',\n            > 1.3 => 'C-',\n\
    \            > 1.0 => 'D+',\n            > 0.7 => 'D',\n            > 0.0 => 'D-',\n\
    \            0.0 => 'E',\n        };\n        letter_grades.push(letter_grade);\n\
    \    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpjn5af5dy.rs:34:23\n\
    \   |\n34 |             4.0 => 'A+',\n   |                       ^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_strings = vec![];\n\n    for grade in grades.iter()\
    \ {\n        if grade >= 4.0 {\n            grades_strings.push(format!(\"A+\"\
    ));\n        } else if grade >= 3.7 {\n            grades_strings.push(format!(\"\
    A\"));\n        } else if grade >= 3.3 {\n            grades_strings.push(format!(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            grades_strings.push(format!(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            grades_strings.push(format!(\"\
    B\"));\n        } else if grade >= 2.3 {\n            grades_strings.push(format!(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            grades_strings.push(format!(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            grades_strings.push(format!(\"\
    C\"));\n        } else if grade >= 1.3 {\n            grades_strings.push(format!(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            grades_strings.push(format!(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            grades_strings.push(format!(\"\
    D\"));\n        } else {\n            grades_strings.push(format!(\"D-\"));\n\
    \        }\n    }\n\n    grades_strings\n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplctz_wek.rs:26:21\n   |\n\
    26 |         if grade >= 4.0 {\n   |                     ^^^\n   |           \
    \          |\n   |                     expected `&f64`, found floating-point number\n\
    \   |                     help: consider borrowing here: `&4.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplctz_wek.rs:28:28\n   |\n28 |         } else\
    \ if grade >= 3.7 {\n   |                            ^^^\n   |               \
    \             |\n   |                            expected `&f64`, found floating-point\
    \ number\n   |                            help: consider borrowing here: `&3.7`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplctz_wek.rs:30:28\n   |\n30 |\
    \         } else if grade >= 3.3 {\n   |                            ^^^\n   |\
    \                            |\n   |                            expected `&f64`,\
    \ found floating-point number\n   |                            help: consider\
    \ borrowing here: `&3.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplctz_wek.rs:32:28\n\
    \   |\n32 |         } else if grade >= 3.0 {\n   |                           \
    \ ^^^\n   |                            |\n   |                            expected\
    \ `&f64`, found floating-point number\n   |                            help: consider\
    \ borrowing here: `&3.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplctz_wek.rs:34:28\n\
    \   |\n34 |         } else if grade >= 2.7 {\n   |                           \
    \ ^^^\n   |                            |\n   |                            expected\
    \ `&f64`, found floating-point number\n   |                            help: consider\
    \ borrowing here: `&2.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplctz_wek.rs:36:28\n\
    \   |\n36 |         } else if grade >= 2.3 {\n   |                           \
    \ ^^^\n   |                            |\n   |                            expected\
    \ `&f64`, found floating-point number\n   |                            help: consider\
    \ borrowing here: `&2.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplctz_wek.rs:38:28\n\
    \   |\n38 |         } else if grade >= 2.0 {\n   |                           \
    \ ^"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let grades_copy = grades.clone();\n    let mut grades_copy2\
    \ = grades_copy;\n    let mut result = vec![];\n\n    for i in grades_copy.iter()\
    \ {\n        let grade_num = i as f64;\n        let mut letter = String::new();\n\
    \        let mut grade_num = grade_num as f64;\n\n        if grade_num > 3.0 {\n\
    \            grade_num = grade_num - 3.0;\n            letter = \"B-\";\n    \
    \    } else if grade_num > 2.7 {\n            grade_num = grade_num - 2.7;\n \
    \           letter = \"B-\";\n        } else if grade_num > 2.3 {\n          \
    \  grade_num = grade_num - 2.3;\n            letter = \"B-\";\n        } else\
    \ if grade_num > 1.7 {\n            grade_num = grade_num - 1.7;\n           \
    \ letter = \"C+\";\n        } else if grade_num > 1.3 {\n            grade_num\
    \ = grade_num - 1.3;\n            letter = \"C+\";\n        } else if grade_num\
    \ > 0.7 {\n            grade_num = grade_num - 0.7;\n            letter = \"C+\"\
    ;\n        } else if grade_num > 0.0 {\n            grade_num = grade_num - 0.0;\n\
    \            letter = \"C+\";\n        } else if grade_num > -1.0 {\n        \
    \    grade_num = grade_num - -1.0;\n            letter = \"D+\";\n        } else\
    \ if grade_num > -2.7 {\n            grade_num = grade_num - -2.7;\n         \
    \   letter = \"D+\";\n        } else if grade_num > -3.0 {\n            grade_num\
    \ = grade_num - -3.0;\n            letter = \"D+\";\n        } else if grade_num\
    \ > -3.7 {\n            grade_num = grade_num - -3.7;\n            letter = \"\
    D+\";\n        } else if grade_num > -4.0 {\n            grade_num = grade_num\
    \ - -4.0;\n            letter = \"D+\";\n        } else if grade_num > -4.7 {\n\
    \            grade_num = grade_num - -4.7;\n            letter = \"D+\";\n   \
    \     } else if grade_num > -5.0 {\n            grade_num = grade_num - -5.0;\n\
    \            letter = \"D+\";\n        } else if grade_num > -5.7 {\n        \
    \    grade_num = grade_num - -5.7;\n            letter = \"D+\";\n        } else\
    \ if grade_num > -6.0 {\n            grade_num = grade_num - -6.0;\n         \
    \   letter\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n  \
    \  assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"\
    ), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpvqlhi_r7.rs:90:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n27 |     for i in grades_copy.iter() {\n   |                            \
    \     - unclosed delimiter\n...\n77 |         } else if grade_num > -6.0 {\n \
    \  |                                    - this delimiter might not be properly\
    \ closed...\n...\n80 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n90 | }\n   |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvqlhi_r7.rs:34:22\n\
    \   |\n29 |         let mut letter = String::new();\n   |                    \
    \      ------------- expected due to this value\n...\n34 |             letter\
    \ = \"B-\";\n   |                      ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                      |\n   |                      expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvqlhi_r7.rs:37:22\n\
    \   |\n29 |         let mut letter = String::new();\n   |                    \
    \      ------------- expected due to this value\n...\n37 |             letter\
    \ = \"B-\";\n   |                      ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                      |\n   |                      expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvqlhi_r7.rs:40:22\n\
    \   |\n29 |         let mut letter = String::new();\n   |                    \
    \      ------------- expected due to this value\n...\n40 |             letter\
    \ = \"B-\";\n   |                      ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                      |\n   |                      expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvqlhi_r7.rs:43:22\n\
    \   |\n29 |         let mut letter = String::new();\n   |                    \
    \      ------------- expected due to this value\n...\n43 |             letter\
    \ = \"C+\";\n   |                      ^^^^- help: try using a conversion method: "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.push(format!(\"A+\"\
    ));\n        } else if grade > 3.0 && grade < 4.0 {\n            letter_grades.push(format!(\"\
    A\"));\n        } else if grade > 3.0 && grade > 2.0 && grade < 3.0 {\n      \
    \      letter_grades.push(format!(\"A-\"));\n        } else if grade > 2.0 &&\
    \ grade < 3.0 {\n            letter_grades.push(format!(\"B+\"));\n        } else\
    \ if grade > 2.0 && grade < 2.0 {\n            letter_grades.push(format!(\"B\"\
    ));\n        } else if grade > 1.7 && grade < 2.0 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if grade > 1.7 && grade < 1.0 {\n            letter_grades.push(format!(\"\
    C+\"));\n        } else if grade > 1.3 && grade < 1.7 {\n            letter_grades.push(format!(\"\
    C\"));\n        } else if grade > 1.3 && grade > 1.0 {\n            letter_grades.push(format!(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(format!(\"\
    D+\"));\n        } else if grade > 0.7 && grade < 1.0 {\n            letter_grades.push(format!(\"\
    D\"));\n        } else if grade > 0.0 && grade < 0.7 {\n            letter_grades.push(format!(\"\
    D-\"));\n        } else {\n            letter_grades.push(format!(\"E\"));\n \
    \       }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"C-\", \"C-\", \"C-\", \"A\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp78yn5a4w.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade in grades.iter()\
    \ {\n        if grade > 0 && grade < 4 {\n            letter_grades.push(format!(\"\
    A+\", grade));\n        } else if grade > 4 && grade < 7 {\n            letter_grades.push(format!(\"\
    A\", grade));\n        } else if grade > 7 && grade < 10 {\n            letter_grades.push(format!(\"\
    B+\", grade));\n        } else if grade > 10 && grade < 13 {\n            letter_grades.push(format!(\"\
    B\", grade));\n        } else if grade > 13 && grade < 16 {\n            letter_grades.push(format!(\"\
    B-\", grade));\n        } else if grade > 16 && grade < 20 {\n            letter_grades.push(format!(\"\
    C+\", grade));\n        } else if grade > 20 && grade < 24 {\n            letter_grades.push(format!(\"\
    C\", grade));\n        } else if grade > 24 && grade < 28 {\n            letter_grades.push(format!(\"\
    C-\", grade));\n        } else if grade > 28 && grade < 32 {\n            letter_grades.push(format!(\"\
    D+\", grade));\n        } else if grade > 32 && grade < 37 {\n            letter_grades.push(format!(\"\
    D\", grade));\n        } else if grade > 37 && grade < 42 {\n            letter_grades.push(format!(\"\
    D-\", grade));\n        } else if grade > 42 && grade < 47 {\n            letter_grades.push(format!(\"\
    E\", grade));\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: argument never used\n  --> /tmp/tmpgtj7llda.rs:26:46\n   |\n26 |\
    \             letter_grades.push(format!(\"A+\", grade));\n   |              \
    \                          ----  ^^^^^ argument never used\n   |             \
    \                           |\n   |                                        formatting\
    \ specifier missing\n\nerror: argument never used\n  --> /tmp/tmpgtj7llda.rs:28:45\n\
    \   |\n28 |             letter_grades.push(format!(\"A\", grade));\n   |     \
    \                                   ---  ^^^^^ argument never used\n   |     \
    \                                   |\n   |                                  \
    \      formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpgtj7llda.rs:30:46\n\
    \   |\n30 |             letter_grades.push(format!(\"B+\", grade));\n   |    \
    \                                    ----  ^^^^^ argument never used\n   |   \
    \                                     |\n   |                                \
    \        formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpgtj7llda.rs:32:45\n\
    \   |\n32 |             letter_grades.push(format!(\"B\", grade));\n   |     \
    \                                   ---  ^^^^^ argument never used\n   |     \
    \                                   |\n   |                                  \
    \      formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpgtj7llda.rs:34:46\n\
    \   |\n34 |             letter_grades.push(format!(\"B-\", grade));\n   |    \
    \                                    ----  ^^^^^ argument never used\n   |   \
    \                                     |\n   |                                \
    \        formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpgtj7llda.rs:36:46\n\
    \   |\n36 |             letter_grades.push(format!(\"C+\", grade));\n   |    \
    \                                    ----  ^^^^^ argument never used\n   |   \
    \                                     |\n   |                                \
    \        formatting specifier missing\n\nerror: argument never used\n  --> /tmp/tmpgtj7llda.rs:38:45\n\
    \   |\n38 |             letter_grades.push(format!(\"C\", grade));\n   |     \
    \       "
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_as_string = Vec::new();\n    for grade\
    \ in grades {\n        if grade < 3 {\n            grades_as_string.push(\"E\"\
    );\n        } else if grade < 6 {\n            grades_as_string.push(\"D-\");\n\
    \        } else if grade < 9 {\n            grades_as_string.push(\"C-\");\n \
    \       } else if grade < 12 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 15 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 18 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 21 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 24 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 27 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 30 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 33 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 36 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 39 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 42 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 45 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 48 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 51 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 54 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 57 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 60 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 63 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 66 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 69 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 72 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 75 {\n            grades_as_string.push(\"B-\");\n \
    \       } else if grade < 78 {\n            grades_as_string.push(\"B-\");\n \
    \       \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpbrzbnw4p.rs:88:3\n\
    \   |\n22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    23 |     let mut grades_as_string = Vec::new();\n24 |     for grade in grades\
    \ {\n   |                         - unclosed delimiter\n...\n75 |         } else\
    \ if grade < 78 {\n   |                              - this delimiter might not\
    \ be properly closed...\n...\n78 | }\n   | - ...as it matches this but it has\
    \ different indentation\n...\n88 | }\n   |   ^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbrzbnw4p.rs:25:20\n   |\n25 |         if grade < 3 {\n   |    \
    \                ^\n   |                    |\n   |                    expected\
    \ `f64`, found integer\n   |                    help: use a float literal: `3.0`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbrzbnw4p.rs:27:27\n   |\n27 |\
    \         } else if grade < 6 {\n   |                           ^\n   |      \
    \                     |\n   |                           expected `f64`, found\
    \ integer\n   |                           help: use a float literal: `6.0`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpbrzbnw4p.rs:29:27\n   |\n29 |  \
    \       } else if grade < 9 {\n   |                           ^\n   |        \
    \                   |\n   |                           expected `f64`, found integer\n\
    \   |                           help: use a float literal: `9.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbrzbnw4p.rs:31:27\n   |\n31 |         } else\
    \ if grade < 12 {\n   |                           ^^\n   |                   \
    \        |\n   |                           expected `f64`, found integer\n   |\
    \                           help: use a float literal: `12.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbrzbnw4p.rs:33:27\n   |\n33 |         } else\
    \ if grade < 15 {\n   |                           ^^\n   |                   \
    \        |\n   |                           expected `f64`, found integer\n   |\
    \                           help: use a float literal: `15.0`\n\nerror[E0308]:\
    \ mismatc"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_vec: Vec<String> = grades.into_iter().map(|x|\
    \ format!(\"{:.2}\", x).to_string()).collect();\n    if grades_vec.len() == 0\
    \ {\n        grades_vec.push(\"E\");\n    }\n    grades_vec[0] += \"-\";\n   \
    \ grades_vec[grades_vec.len() - 1] += \"+\"\n    let mut i = 0;\n    let mut current_grade\
    \ = 0;\n    while i < grades_vec.len() - 1 {\n        if current_grade > grades_vec[i\
    \ + 1] {\n            current_grade -= grades_vec[i + 1];\n        } else {\n\
    \            current_grade += grades_vec[i + 1];\n        }\n        i += 1;\n\
    \    }\n    grades_vec[i] = format!(\"{:.2}\", current_grade).to_string();\n \
    \   grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmplvvnj03a.rs:28:44\n\
    \   |\n28 |     grades_vec[grades_vec.len() - 1] += \"+\"\n   |              \
    \                              ^ help: add `;` here\n29 |     let mut i = 0;\n\
    \   |     --- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplvvnj03a.rs:25:25\n\
    \   |\n25 |         grades_vec.push(\"E\");\n   |                         ^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \       |\n   |                         expected struct `String`, found `&str`\n\
    \nerror[E0277]: can't compare `{integer}` with `String`\n  --> /tmp/tmplvvnj03a.rs:32:26\n\
    \   |\n32 |         if current_grade > grades_vec[i + 1] {\n   |             \
    \             ^ no implementation for `{integer} < String` and `{integer} > String`\n\
    \   |\n   = help: the trait `PartialOrd<String>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `PartialOrd<Rhs>`:\n   \
    \          f32\n             f64\n             i128\n             i16\n      \
    \       i32\n             i64\n             i8\n             isize\n         \
    \  and 6 others\n\nerror[E0277]: cannot subtract-assign `String` from `{integer}`\n\
    \  --> /tmp/tmplvvnj03a.rs:33:27\n   |\n33 |             current_grade -= grades_vec[i\
    \ + 1];\n   |                           ^^ no implementation for `{integer} -=\
    \ String`\n   |\n   = help: the trait `SubAssign<String>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `SubAssign<Rhs>`:\n\
    \             <f32 as SubAssign<&f32>>\n             <f32 as SubAssign>\n    \
    \         <f64 as SubAssign<&f64>>\n             <f64 as SubAssign>\n        \
    \     <i128 as SubAssign<&i128>>\n             <i128 as SubAssign>\n         \
    \    <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `String` to `{integer}`\n  -->\
    \ /tmp/tmplvvnj03a.rs:35:27\n   |\n35 |             current_grade += grades_vec[i\
    \ + 1];\n   |                           ^^ no implementation for `{integer} +=\
    \ String`\n   |\n   = help: the trait `AddAs"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    let mut gpas_sum\
    \ = 0;\n    for grade in grades {\n        let gpas_this_grade = grade as f64;\n\
    \        let sum = gpas_sum + gpas_this_grade;\n        if sum < 3.3 {\n     \
    \       letter_grades.push('A+');\n        } else if sum < 3.7 {\n           \
    \ letter_grades.push('A');\n        } else if sum < 4.0 {\n            letter_grades.push('A-');\n\
    \        } else if sum < 3.0 {\n            letter_grades.push('B+');\n      \
    \  } else if sum < 2.7 {\n            letter_grades.push('B');\n        } else\
    \ if sum < 2.3 {\n            letter_grades.push('B-');\n        } else if sum\
    \ < 2.0 {\n            letter_grades.push('C+');\n        } else if sum < 1.7\
    \ {\n            letter_grades.push('C');\n        } else if sum < 1.3 {\n   \
    \         letter_grades.push('C-');\n        } else if sum < 1.0 {\n         \
    \   letter_grades.push('D+');\n        } else if sum < 0.7 {\n            letter_grades.push('D');\n\
    \        } else {\n            letter_grades.push('D-');\n        }\n        gpas_sum\
    \ = sum;\n    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp537fnsno.rs:29:35\n\
    \   |\n29 |             letter_grades.push('A+');\n   |                      \
    \             ^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut ret: Vec<String> = vec![];\n    for i in grades\
    \ {\n        let grade = String::from(numerical_grade(i - 4.0));\n        \n \
    \       if grade.chars().all(|&c| c.is_digit()) {\n            if let Some(idx)\
    \ = grades.iter().position(|&i| i < &i) {\n                ret.push(*grades[idx].to_string().to_string()\
    \ + grade);\n            }\n        } else {\n            ret.push(*grade.to_string()\
    \ + grade);\n        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `numerical_grade` in this scope\n  -->\
    \ /tmp/tmp8f4vy9p7.rs:25:34\n   |\n25 |         let grade = String::from(numerical_grade(i\
    \ - 4.0));\n   |                                  ^^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8f4vy9p7.rs:27:31\n\
    \   |\n27 |         if grade.chars().all(|&c| c.is_digit()) {\n   |          \
    \                     ^--\n   |                               ||\n   |       \
    \                        |expected due to this\n   |                         \
    \      expected `char`, found reference\n   |                               help:\
    \ did you mean `c`: `&char`\n   |\n   = note:   expected type `char`\n       \
    \    found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8f4vy9p7.rs:28:64\n\
    \   |\n28 |             if let Some(idx) = grades.iter().position(|&i| i < &i)\
    \ {\n   |                                                                ^^ expected\
    \ `f64`, found `&f64`\n   |\nhelp: consider removing the borrow\n   |\n28 -  \
    \           if let Some(idx) = grades.iter().position(|&i| i < &i) {\n28 +   \
    \          if let Some(idx) = grades.iter().position(|&i| i < i) {\n   | \n\n\
    error[E0369]: cannot add `String` to `str`\n  --> /tmp/tmp8f4vy9p7.rs:29:63\n\
    \   |\n29 |                 ret.push(*grades[idx].to_string().to_string() + grade);\n\
    \   |                          ------------------------------------ ^ ----- String\n\
    \   |                          |\n   |                          str\n\nerror[E0369]:\
    \ cannot add `String` to `str`\n  --> /tmp/tmp8f4vy9p7.rs:32:41\n   |\n32 |  \
    \           ret.push(*grade.to_string() + grade);\n   |                      ------------------\
    \ ^ ----- String\n   |                      |\n   |                      str\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369, E0425.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let num_grades = grades.len();\n    if num_grades == 0\
    \ { return Vec::new(); };\n    let mut letter_grade = String::new();\n    let\
    \ mut current_gpa : f64 = grades[0];\n    let mut temp : f64 = grades[0];\n  \
    \  for i in 1..num_grades {\n        current_gpa += grades[i-1];\n        if current_gpa\
    \ > 3.0 { temp_grade = \"B+\";  current_gpa = temp; };\n        if current_gpa\
    \ > 2.7 { temp_grade = \"B\";   current_gpa = temp; };\n        if current_gpa\
    \ > 2.0 { temp_grade = \"B-\";  current_gpa = temp; };\n        if current_gpa\
    \ > 1.7 { temp_grade = \"C+\";  current_gpa = temp; };\n        if current_gpa\
    \ > 1.0 { temp_grade = \"C\";   current_gpa = temp; };\n        if current_gpa\
    \ > 0.7 { temp_grade = \"C-\";  current_gpa = temp; };\n        if current_gpa\
    \ > 0.3 { temp_grade = \"D+\";  current_gpa = temp; };\n        if current_gpa\
    \ > 0.0 { temp_grade = \"D\";   current_gpa = temp; };\n        if current_gpa\
    \ < 0.0 { temp_grade = \"D-\";  current_gpa = temp; };\n        if current_gpa\
    \ < 0.3 { temp_grade = \"F\";   current_gpa = temp; };\n        letter_grade +=\
    \ temp_grade;\n        temp += grades[i-1];\n    };\n    letter_grade.chars().collect();\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `temp_grade` in this scope\n  --> /tmp/tmp9myzfvry.rs:30:32\n\
    \   |\n30 |         if current_gpa > 3.0 { temp_grade = \"B+\";  current_gpa =\
    \ temp; };\n   |                                ^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `temp_grade` in this scope\n  --> /tmp/tmp9myzfvry.rs:31:32\n\
    \   |\n31 |         if current_gpa > 2.7 { temp_grade = \"B\";   current_gpa =\
    \ temp; };\n   |                                ^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `temp_grade` in this scope\n  --> /tmp/tmp9myzfvry.rs:32:32\n\
    \   |\n32 |         if current_gpa > 2.0 { temp_grade = \"B-\";  current_gpa =\
    \ temp; };\n   |                                ^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `temp_grade` in this scope\n  --> /tmp/tmp9myzfvry.rs:33:32\n\
    \   |\n33 |         if current_gpa > 1.7 { temp_grade = \"C+\";  current_gpa =\
    \ temp; };\n   |                                ^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `temp_grade` in this scope\n  --> /tmp/tmp9myzfvry.rs:34:32\n\
    \   |\n34 |         if current_gpa > 1.0 { temp_grade = \"C\";   current_gpa =\
    \ temp; };\n   |                                ^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `temp_grade` in this scope\n  --> /tmp/tmp9myzfvry.rs:35:32\n\
    \   |\n35 |         if current_gpa > 0.7 { temp_grade = \"C-\";  current_gpa =\
    \ temp; };\n   |                                ^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `temp_grade` in this scope\n  --> /tmp/tmp9myzfvry.rs:36:32\n\
    \   |\n36 |         if current_gpa > 0.3 { temp_grade = \"D+\";  current_gpa =\
    \ temp; };\n   |                                ^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `temp_grade` in this scope\n  --> /tmp/tmp9myzfvry.rs:37:32\n\
    \   |\n37 |         if current_gpa > 0.0 { temp_grade = \"D\";   current_gpa =\
    \ temp; };\n   |                                ^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `temp_grade` in this scope\n  --> /tmp/tm"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = vec![\"E\"];\n    let mut last_gpa\
    \ : f64 = 0.0;\n\n    for grade in grades {\n        let gpa = grade as f64;\n\
    \n        if last_gpa < gpa {\n            letter_grades.push((gpa - last_gpa).to_string());\n\
    \        }\n\n        last_gpa = gpa as f64;\n    }\n\n    letter_grades\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpckdouflv.rs:30:32\n   |\n\
    30 |             letter_grades.push((gpa - last_gpa).to_string());\n   |     \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |               \
    \                 |\n   |                                expected `&str`, found\
    \ struct `String`\n   |                                help: consider borrowing\
    \ here: `&(gpa - last_gpa).to_string()`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpckdouflv.rs:36:5\n   |\n22 | fn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n   |                                                -----------\
    \ expected `Vec<String>` because of return type\n...\n36 |     letter_grades\n\
    \   |     ^^^^^^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx7s1bdkf.rs:22:48\n   |\n\
    22 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|x| x.to_string()).collect()\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"4\", \"3\", \"1.7\", \"2\", \"3.5\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmplg33uc78.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut grades_copy: Vec<f64> = grades.clone();\n    let\
    \ mut letter_grades: Vec<String> = Vec::new();\n    let mut current_grade: f64\
    \ = grades_copy[0];\n    let mut current_index = 0;\n    let mut current_grade_index\
    \ = 0;\n    \n    while current_grade != 0 {\n        current_grade_index += 1;\n\
    \        if current_grade_index > grades_copy.len() {\n            break;\n  \
    \      }\n        current_grade = grades_copy[current_grade_index];\n        let\
    \ index = grades.iter().position(|&grade| grade > current_grade).unwrap();\n \
    \       let letter_grade = grades[index] + '+';\n        letter_grades.push(letter_grade);\n\
    \        grades_copy.remove(&grades[index]);\n    }\n    \n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0c3cpwki.rs:29:28\n   |\n\
    29 |     while current_grade != 0 {\n   |                            ^\n   | \
    \                           |\n   |                            expected `f64`,\
    \ found integer\n   |                            help: use a float literal: `0.0`\n\
    \nerror[E0277]: cannot add `char` to `f64`\n  --> /tmp/tmp0c3cpwki.rs:36:42\n\
    \   |\n36 |         let letter_grade = grades[index] + '+';\n   |            \
    \                              ^ no implementation for `f64 + char`\n   |\n  \
    \ = help: the trait `Add<char>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n\
    \             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n  \
    \           <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n      \
    \       <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n            \
    \ <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0c3cpwki.rs:38:28\n   |\n38 |         grades_copy.remove(&grades[index]);\n\
    \   |                            ^^^^^^^^^^^^^^ expected `usize`, found `&f64`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    if grades.len() > 0 {\n        let mut letter_grades =\
    \ Vec::new();\n        let mut min_gpa = grades.iter().min().unwrap();\n     \
    \   let mut max_gpa = grades.iter().max().unwrap();\n        let mut total_gpa\
    \ = 0;\n        let mut count_a = 0;\n        let mut count_b = 0;\n        let\
    \ mut count_c = 0;\n        let mut count_d = 0;\n        let mut count_e = 0;\n\
    \        for i in grades {\n            total_gpa += i;\n            if i == min_gpa\
    \ {\n                count_a++;\n            } else if i == max_gpa {\n      \
    \          count_b++;\n            } else if i < min_gpa && i > max_gpa {\n  \
    \              count_c++;\n            } else if i <= min_gpa && i >=  max_gpa\
    \ {\n                count_d++;\n            } else {\n                count_e++;\n\
    \            }\n        }\n        for i in (0..count_a).rev() {\n           \
    \ letter_grades.push(format!(\"A+\", total_gpa));\n        }\n        for i in\
    \ (0..count_b).rev() {\n            letter_grades.push(format!(\"B\", total_gpa));\n\
    \        }\n        for i in (0..count_c).rev() {\n            letter_grades.push(format!(\"\
    C\", total_gpa));\n        }\n        for i in (0..count_d).rev() {\n        \
    \    letter_grades.push(format!(\"D\", total_gpa));\n        }\n        for i\
    \ in (0..count_e).rev() {\n            letter_grades.push(format!(\"D\", total_gpa));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmph_ocs0r1.rs:36:24\n\
    \   |\n36 |                 count_a++;\n   |                        ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n36 |               \
    \  { let tmp = count_a; count_a += 1; tmp };\n   |                 +++++++++++\
    \        ~~~~~~~~~~~~~~~~~~~~~\n36 -                 count_a++;\n36 +        \
    \         count_a += 1;\n   | \n\nerror: Rust has no postfix increment operator\n\
    \  --> /tmp/tmph_ocs0r1.rs:38:24\n   |\n38 |                 count_b++;\n   |\
    \                        ^^ not a valid postfix operator\n   |\nhelp: use `+=\
    \ 1` instead\n   |\n38 |                 { let tmp = count_b; count_b += 1; tmp\
    \ };\n   |                 +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n38 -    \
    \             count_b++;\n38 +                 count_b += 1;\n   | \n\nerror:\
    \ Rust has no postfix increment operator\n  --> /tmp/tmph_ocs0r1.rs:40:24\n  \
    \ |\n40 |                 count_c++;\n   |                        ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n40 |               \
    \  { let tmp = count_c; count_c += 1; tmp };\n   |                 +++++++++++\
    \        ~~~~~~~~~~~~~~~~~~~~~\n40 -                 count_c++;\n40 +        \
    \         count_c += 1;\n   | \n\nerror: Rust has no postfix increment operator\n\
    \  --> /tmp/tmph_ocs0r1.rs:42:24\n   |\n42 |                 count_d++;\n   |\
    \                        ^^ not a valid postfix operator\n   |\nhelp: use `+=\
    \ 1` instead\n   |\n42 |                 { let tmp = count_d; count_d += 1; tmp\
    \ };\n   |                 +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n42 -    \
    \             count_d++;\n42 +                 count_d += 1;\n   | \n\nerror:\
    \ Rust has no postfix increment operator\n  --> /tmp/tmph_ocs0r1.rs:44:24\n  \
    \ |\n44 |                 count_e++;\n   |                        ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n44 |               \
    \  { let tmp = count_e; count_e += 1; tmp };\n   |                 +++++++++++\
    \        ~~~~~~~~~~~~~~~~~~~~~\n44 -                 count_e++;\n44 +        \
    \         count_e += 1;\n   | \n\nerr"
  exit_code: 1
  status: SyntaxError
