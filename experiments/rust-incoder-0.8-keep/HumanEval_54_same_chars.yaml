name: HumanEval_54_same_chars
language: rust
prompt: "/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n///\
  \ True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
  \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
  /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfn same_chars(s0:\
  \ String, s1: String) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
  eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
  abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
  dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
  eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
  abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
  eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
  aabb\"), String::from(\"aaccc\")), false);\n}\n"
completions: []
stop_tokens:
- "\n}"
