name: HumanEval_100_make_a_pile
language: rust
results:
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut num_stones = Vec::new();\n    if n % 2 == 0 {\n\
    \        num_stones.push(n / 2);\n    } else {\n        for _ in 0..n / 2 {\n\
    \            num_stones.push(n - num_stones.len());\n        }\n    }\n    num_stones.extend(num_stones);\n\
    \    num_stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5x_p7ld0.rs:17:33\n   |\n\
    17 |             num_stones.push(n - num_stones.len());\n   |                \
    \                 ^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot subtract `usize` from `isize`\n  --> /tmp/tmp5x_p7ld0.rs:17:31\n   |\n\
    17 |             num_stones.push(n - num_stones.len());\n   |                \
    \               ^ no implementation for `isize - usize`\n   |\n   = help: the\
    \ trait `Sub<usize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n\n    for _ in\
    \ 0..n {\n        result.push(n);\n        if n % 2 == 0 {\n            n += 1;\n\
    \        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpv1wibwn0.rs:17:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n17 |             n += 1;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    let next_odd_stones =\
    \ if n % 2 == 0 {\n        n + 1\n    } else {\n        n + 1\n    };\n    for\
    \ i in 0..(n + 1).ceil() {\n        stones.push(i as isize);\n    }\n    for i\
    \ in 0..(n + 1).ceil() {\n        if i % 2 == 0 {\n            stones.push((stones.last()\
    \ + stones.pop().unwrap()) as isize);\n        } else {\n            stones.push((next_odd_stones\
    \ as isize) - stones.pop().unwrap());\n        }\n    }\n    stones\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `ceil` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpvu3gkd4v.rs:18:25\n   |\n18 |     for i in 0..(n + 1).ceil()\
    \ {\n   |                         ^^^^ help: there is an associated function with\
    \ a similar name: `div_ceil`\n\nerror[E0599]: no method named `ceil` found for\
    \ type `isize` in the current scope\n  --> /tmp/tmpvu3gkd4v.rs:21:25\n   |\n21\
    \ |     for i in 0..(n + 1).ceil() {\n   |                         ^^^^ help:\
    \ there is an associated function with a similar name: `div_ceil`\n\nerror[E0369]:\
    \ cannot add `isize` to `Option<&isize>`\n  --> /tmp/tmpvu3gkd4v.rs:23:40\n  \
    \ |\n23 |             stones.push((stones.last() + stones.pop().unwrap()) as isize);\n\
    \   |                          ------------- ^ --------------------- isize\n \
    \  |                          |\n   |                          Option<&isize>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0369, E0599.\nFor more information about an error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        make_odd_pile(n)\n    } else {\n\
    \        make_even_pile(n)\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `make_odd_pile` in this scope\n  -->\
    \ /tmp/tmpfch0yw0r.rs:13:9\n   |\n13 |         make_odd_pile(n)\n   |        \
    \ ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `make_even_pile` in this scope\n  --> /tmp/tmpfch0yw0r.rs:15:9\n   |\n15 | \
    \        make_even_pile(n)\n   |         ^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n    let mut\
    \ pile = vec![];\n\n    // We need to add the odd number if the number is odd.\n\
    \    if n % 2 == 0 {\n        pile.push(n % 2);\n    }\n\n    // We need to add\
    \ the even number if the number is even.\n    if n % 2 == 1 {\n        pile.push(n\
    \ / 2);\n    }\n\n    // If n is even, the number of stones in the next level\
    \ will be the next\n    // even number, so we add it to the end of the pile.\n\
    \    if n % 2 == 0 {\n        pile.push((n / 2) * 2);\n    }\n    pile.push((n\
    \ / 2) * 3);\n\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpocbdxoy3.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut arr: Vec<isize> = vec![];\n    for level in 0..n\
    \ {\n        if n % 2 == 1 {\n            arr.push(level + 1);\n        } else\
    \ if n % 2 == 0 {\n            arr.push(level + 2);\n        }\n    }\n    arr\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpz1voasi4.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut counter = vec![0; n + 1];\n\n    counter [n - 1]\
    \ += 1;\n    for i in 1 .. n {\n        if i % 2 == 0 {\n            counter [n\
    \ - 1] += 2;\n        } else {\n            counter [n - 1] += 1;\n        }\n\
    \    }\n\n    counter\n}\n\nfn main() {\n    let candidate = make_a_pile;\n  \
    \  assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7jxb891x.rs:12:31\n   |\n\
    12 |     let mut counter = vec![0; n + 1];\n   |                             \
    \  ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |     let\
    \ mut counter = vec![0; (n + 1).try_into().unwrap()];\n   |                  \
    \             +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp7jxb891x.rs:14:5\n   |\n14 |   \
    \  counter [n - 1] += 1;\n   |     ^^^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp7jxb891x.rs:17:13\n   |\n17 |  \
    \           counter [n - 1] += 2;\n   |             ^^^^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp7jxb891x.rs:19:13\n   |\n19 |  \
    \           counter [n - 1] += 1;\n   |             ^^^^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        odd_level(n)\n    } else {\n \
    \       even_level(n)\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `odd_level` in this scope\n  --> /tmp/tmpyx0ynwdj.rs:13:9\n\
    \   |\n13 |         odd_level(n)\n   |         ^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `even_level` in this scope\n  --> /tmp/tmpyx0ynwdj.rs:15:9\n\
    \   |\n15 |         even_level(n)\n   |         ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n < 1 {\n        return vec![];\n    }\n\n    let mut\
    \ v = vec![n as isize];\n    let mut current = 1;\n    let mut last_odd = n /\
    \ 2;\n    let mut last_even = (n - 1) / 2;\n    if n % 2 == 0 {\n        last_odd\
    \ = last_even + 1;\n    }\n\n    loop {\n        if current == n {\n         \
    \   break;\n        }\n\n        current = current * 2 + 1;\n\n        if current\
    \ > last_even {\n            current -= last_odd;\n        }\n\n        v.push(current);\n\
    \        last_even = last_even * 2;\n    }\n\n    v\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to multiply with overflow', /tmp/tmpzrmx4kkx.rs:29:19\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut ans = Vec::new();\n    let mut level = vec![n];\n\
    \n    if n % 2 == 0 {\n        while n != 0 {\n            level += 2;\n     \
    \       n -= 2;\n        }\n    } else {\n        while n != 0 {\n           \
    \ level += 1;\n            n -= 1;\n        }\n    }\n\n    for i in 0..level.len()\
    \ {\n        ans.push(i);\n    }\n\n    ans\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<isize>`\n  --> /tmp/tmph6huwukm.rs:17:13\n   |\n17 |             level\
    \ += 2;\n   |             -----^^^^^\n   |             |\n   |             cannot\
    \ use `+=` on type `Vec<isize>`\n\nerror[E0368]: binary assignment operation `+=`\
    \ cannot be applied to type `Vec<isize>`\n  --> /tmp/tmph6huwukm.rs:22:13\n  \
    \ |\n22 |             level += 1;\n   |             -----^^^^^\n   |         \
    \    |\n   |             cannot use `+=` on type `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmph6huwukm.rs:31:5\n   |\n11 | fn make_a_pile(n:\
    \ isize) -> Vec<isize> {\n   |                             ---------- expected\
    \ `Vec<isize>` because of return type\n...\n31 |     ans\n   |     ^^^ expected\
    \ `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \          found struct `Vec<usize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    assert!(n >= 1);\n    let mut result = Vec::new();\n  \
    \  if n % 2 == 0 {\n        for i in 0..n {\n            result.push(i);\n   \
    \     }\n    } else {\n        for i in 0..n {\n            result.push(i + (n\
    \ / 2));\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[3, 5, 7]`', /tmp/tmp6701s6dd.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut ans = vec![0; n + 1];\n    if n % 2 == 1 {\n  \
    \      ans[1] = n - 1;\n    } else {\n        ans[1] = n;\n    }\n\n    for i\
    \ in 2..n {\n        if i & 1 == 1 {\n            ans[i + 1] = ans[i / 2] + 1;\n\
    \        } else {\n            ans[i + 1] = ans[i / 2];\n        }\n    }\n  \
    \  ans\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgetr_xkm.rs:12:27\n   |\n\
    12 |     let mut ans = vec![0; n + 1];\n   |                           ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut ans = vec![0;\
    \ (n + 1).try_into().unwrap()];\n   |                           +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpgetr_xkm.rs:21:13\n\
    \   |\n21 |             ans[i + 1] = ans[i / 2] + 1;\n   |             ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpgetr_xkm.rs:21:26\n\
    \   |\n21 |             ans[i + 1] = ans[i / 2] + 1;\n   |                   \
    \       ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  \
    \ |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpgetr_xkm.rs:23:13\n\
    \   |\n23 |             ans[i + 1] = ans[i / 2];\n   |             ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpgetr_xkm.rs:23:26\n\
    \   |\n23 |             ans[i + 1] = ans[i / 2];\n   |                       \
    \   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usiz"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    pile.push(n);\n    let mut\
    \ next_even = 0;\n    let mut next_odd = 0;\n\n    while pile.len() > 0 {\n  \
    \      let next = pile.pop().unwrap();\n        pile.push(*next_even);\n     \
    \   pile.push(*next_odd);\n        next_even = next;\n        next_odd += next\
    \ % 2;\n    }\n\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpv04uq24i.rs:19:19\n\
    \   |\n19 |         pile.push(*next_even);\n   |                   ^^^^^^^^^^\n\
    \nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpv04uq24i.rs:20:19\n\
    \   |\n20 |         pile.push(*next_odd);\n   |                   ^^^^^^^^^\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile: Vec<isize> = vec![0; n + 1];\n    pile[1]\
    \ = n+1;\n    for i in 2..n+1 {\n        pile[i] = if n % 2 == 0 {\n         \
    \   pile[i-1] + 1\n        } else {\n            pile[i-2] + 1\n        };\n \
    \   }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaahqsjl3.rs:12:40\n   |\n\
    12 |     let mut pile: Vec<isize> = vec![0; n + 1];\n   |                    \
    \                    ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut pile: Vec<isize> = vec![0; (n + 1).try_into().unwrap()];\n\
    \   |                                        +     +++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpaahqsjl3.rs:15:9\n\
    \   |\n15 |         pile[i] = if n % 2 == 0 {\n   |         ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpaahqsjl3.rs:16:13\n   |\n16 |            \
    \ pile[i-1] + 1\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpaahqsjl3.rs:18:13\n   |\n18 |            \
    \ pile[i-2] + 1\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n    if n ==\
    \ 1 {\n        return vec![n, n];\n    }\n    let mut stones = Vec::new();\n \
    \   if n % 2 == 0 {\n        for i in (1..=n).step_by(2) {\n            stones.push(i);\n\
    \        }\n    } else {\n        for i in (1..=n).step_by(2) {\n            stones.push(i\
    \ * 2);\n        }\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 6]`,\n right: `[3, 5, 7]`', /tmp/tmpjscgwwp4.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 1 {\n        make_a_pile(n + 1)\n    } else\
    \ {\n        vec![n, n, n]\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 4]`,\n right: `[3, 5, 7]`', /tmp/tmpri9h84x5.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    fn next_odd(n: isize) -> isize {\n        let mut even\
    \ = n;\n        even += if even % 2 == 0 {\n            1\n        } else {\n\
    \            0\n        };\n        even\n    }\n\n    fn next_even(n: isize)\
    \ -> isize {\n        let mut odd = n;\n        odd += if odd % 2 == 0 {\n   \
    \         1\n        } else {\n            0\n        };\n        odd\n    }\n\
    \n    let mut result = Vec::new();\n    let mut curr_level = 0;\n\n    loop {\n\
    \        result[curr_level] = curr_level;\n\n        if n == 0 {\n           \
    \ break;\n        }\n\n        let next_odd = next_odd(n);\n\n        if n & 1\
    \ == 1 {\n            result[curr_level] += next_odd;\n        }\n\n        n\
    \ >>= 1;\n\n        curr_level += 1;\n    }\n\n    result\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp797jur0n.rs:45:35\n   |\n\
    45 |             result[curr_level] += next_odd;\n   |                       \
    \            ^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `usize`\n  --> /tmp/tmp797jur0n.rs:45:32\n   |\n45 | \
    \            result[curr_level] += next_odd;\n   |                           \
    \     ^^ no implementation for `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp797jur0n.rs:53:5\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                   \
    \          ---------- expected `Vec<isize>` because of return type\n...\n53 |\
    \     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    let mut last_odd = n\
    \ % 2 == 0;\n    let mut last_even = n % 2 == 1;\n\n    for _ in 0..n {\n    \
    \    if last_odd && !last_even {\n            stones.push((last_odd * 2) + 1);\n\
    \            last_even = true;\n            last_odd = false;\n        } else\
    \ if last_even {\n            stones.push((last_even * 2) + 1);\n            last_even\
    \ = false;\n        } else {\n            last_odd = !last_odd;\n            last_even\
    \ = !last_even;\n        }\n    }\n\n    stones\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `bool` by `{integer}`\n  --> /tmp/tmpe1rx7s08.rs:18:35\n\
    \   |\n18 |             stones.push((last_odd * 2) + 1);\n   |               \
    \           -------- ^ - {integer}\n   |                          |\n   |    \
    \                      bool\n\nerror[E0369]: cannot multiply `bool` by `{integer}`\n\
    \  --> /tmp/tmpe1rx7s08.rs:22:36\n   |\n22 |             stones.push((last_even\
    \ * 2) + 1);\n   |                          --------- ^ - {integer}\n   |    \
    \                      |\n   |                          bool\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::with_capacity(n + 1);\n    for i\
    \ in 0..n {\n        if i % 2 == 0 {\n            stones.push(1 + i / 2);\n  \
    \      } else {\n            stones.push(i % 2);\n        }\n    }\n    stones\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwsmd59h3.rs:12:41\n   |\n\
    12 |     let mut stones = Vec::with_capacity(n + 1);\n   |                   \
    \                      ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n12 |     let mut stones = Vec::with_capacity((n + 1).try_into().unwrap());\n\
    \   |                                         +     +++++++++++++++++++++\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    make_a_pile_naive(n)\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `make_a_pile_naive` in this scope\n\
    \  --> /tmp/tmpmdu9uml6.rs:12:5\n   |\n12 |     make_a_pile_naive(n)\n   |   \
    \  ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..n {\n   \
    \     if n % 2 == 0 {\n            result.push(i as isize);\n        }\n     \
    \   n /= 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpswztwe21.rs:17:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n17 |         n /= 2;\n \
    \  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    // Create a stack\n    let mut stack = Vec::new();\n  \
    \  // Add the first level of stones\n    stack.push(n);\n    let mut count = 0;\n\
    \    // Go through the stack adding one level at a time\n    while !stack.is_empty()\
    \ {\n        // Pop the top level off\n        let level = stack.pop();\n    \
    \    // Count stones in that level\n        count += level;\n        // If the\
    \ level is even push the next level of stones\n        if level % 2 == 0 {\n \
    \           stack.push(level + 1);\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `Option<isize>` to `{integer}`\n  --> /tmp/tmpa33zzclr.rs:22:15\n\
    \   |\n22 |         count += level;\n   |               ^^ no implementation for\
    \ `{integer} += Option<isize>`\n   |\n   = help: the trait `AddAssign<Option<isize>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0369]: cannot mod `Option<isize>` by `{integer}`\n\
    \  --> /tmp/tmpa33zzclr.rs:24:18\n   |\n24 |         if level % 2 == 0 {\n   |\
    \            ----- ^ - {integer}\n   |            |\n   |            Option<isize>\n\
    \nerror[E0369]: cannot add `{integer}` to `Option<isize>`\n  --> /tmp/tmpa33zzclr.rs:25:30\n\
    \   |\n25 |             stack.push(level + 1);\n   |                        -----\
    \ ^ - {integer}\n   |                        |\n   |                        Option<isize>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa33zzclr.rs:28:5\n   |\n11 | fn\
    \ make_a_pile(n: isize) -> Vec<isize> {\n   |                             ----------\
    \ expected `Vec<isize>` because of return type\n...\n28 |     count\n   |    \
    \ ^^^^^ expected struct `Vec`, found integer\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n                found type `{integer}`\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0369.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n\n    while n != 0 {\n    \
    \    if n % 2 != 0 {\n            pile.push(n / 2);\n        }\n\n        n =\
    \ n / 2;\n    }\n\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmppnuf3lgp.rs:19:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n19 |         n = n / 2;\n\
    \   |         ^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 1 {\n        [n, ..]\n    } else {\n      \
    \  [n, (n + 1), (n + 2)]\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkc05l_o6.rs:13:13\n   |\n\
    13 |         [n, ..]\n   |             ^^ expected `isize`, found struct `RangeFull`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkc05l_o6.rs:15:9\n   |\n11 | fn\
    \ make_a_pile(n: isize) -> Vec<isize> {\n   |                             ----------\
    \ expected `Vec<isize>` because of return type\n...\n15 |         [n, (n + 1),\
    \ (n + 2)]\n   |         ^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_vec()`\n   |         |\n   |         expected struct `Vec`, found array\
    \ `[isize; 3]`\n   |\n   = note: expected struct `Vec<isize>`\n              \
    \ found array `[isize; 3]`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n%2 == 1 {\n        let mut result = vec![n/2, n/2,\
    \ n/2];\n        for i in result.iter_mut() {\n            *i = 1;\n        }\n\
    \        result\n    } else {\n        let mut result = vec![n/2, n/2, n/2];\n\
    \        for i in result.iter_mut() {\n            *i = 1;\n        }\n      \
    \  result\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp5tjd3ygx.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    make_pile(n / 2, n % 2).to_vec()\n}\n\nfn main() {\n  \
    \  let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `make_pile` in this scope\n  --> /tmp/tmp7rge4sl1.rs:12:5\n\
    \   |\n12 |     make_pile(n / 2, n % 2).to_vec()\n   |     ^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 1 {\n        return vec![n / 2, n / 2 + 1]\n\
    \    } else {\n        return vec![n / 2, n / 2]\n    }\n}\n\nfn main() {\n  \
    \  let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpwrpn7_jt.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut ans = Vec::new();\n    ans.push(1);\n    ans.push(2\
    \ * n); // odd number of stones\n    if n % 2 == 0 {\n        ans.push(2 * n);\
    \ // even number of stones\n    }\n    ans.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 6]`,\n right: `[3, 5, 7]`', /tmp/tmpnyahut1u.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    for i in 0..n / 2 {\n     \
    \   pile.push(i + 1);\n    }\n    if n % 2 == 0 {\n        pile.push(i + 1);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp98wnpwix.rs:17:19\n\
    \   |\n17 |         pile.push(i + 1);\n   |                   ^ help: a local\
    \ variable with a similar name exists: `n`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n < 1 {\n        vec![0]\n    } else if n <= 3 {\n \
    \       vec![n - 1]\n    } else {\n        let mut ns: Vec<isize> = vec![n - 1];\n\
    \        for _ in 0..n / 2 {\n            ns.push(n);\n        }\n        if n\
    \ % 2 == 0 {\n            ns.push(n + 2)\n        } else {\n            ns.push(n)\n\
    \        }\n        ns\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[3, 5, 7]`', /tmp/tmpsdj9awbx.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n    let mut\
    \ a = vec![n, n];\n    for _ in 0..n {\n        a[0] = n * (n + 1) / 2;\n    \
    \    a[1] = n * (n - 1) / 2;\n    }\n    a\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 3]`,\n right: `[3, 5, 7]`', /tmp/tmp3v6ggp09.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![];\n    for _ in 0..n {\n        v.push(n);\n\
    \    }\n    if n % 2 != 0 {\n        // if n is odd, add the next odd number\n\
    \        let next_odd = n / 2;\n        v.push(next_odd);\n    }\n    if n % 2\
    \ == 0 {\n        // if n is even, add the next even number\n        let next_even\
    \ = n / 2;\n        v.push(next_even);\n    }\n    v\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp0iqizcb5.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut list = Vec::new();\n    for _ in 0..n {\n     \
    \   list.push(0);\n    }\n    if n % 2 == 0 {\n        for _ in 0..n {\n     \
    \       list.push(list.last().unwrap() + 1);\n        }\n    } else {\n      \
    \  for _ in 0..n {\n            list.push(list.last().unwrap());\n        }\n\
    \    }\n    list\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmg9fs_bq.rs:22:23\n   |\n\
    22 |             list.push(list.last().unwrap());\n   |                      \
    \ ^^^^^^^^^^^^^^^^^^^^ expected integer, found `&{integer}`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n22 |             list.push(*list.last().unwrap());\n\
    \   |                       +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 1 {\n        pile.push(2\
    \ * n + (n - 1) / 2);\n    } else {\n        pile.push((n - 1) / 2);\n    }\n\
    \    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 7]`,\n right: `[3, 5, 7]`', /tmp/tmpuolqfq40.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    make_a_pile_helper(n, 0)\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `make_a_pile_helper` in this scope\n\
    \  --> /tmp/tmp3hmfdfnp.rs:12:5\n   |\n12 |     make_a_pile_helper(n, 0)\n   |\
    \     ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut vec: Vec<isize> = Vec::new();\n    for i in 0..n\
    \ {\n        if i & 1 != 0 {\n            vec.push(i);\n        } else {\n   \
    \         if i % 2 != 0 {\n                vec.push(i + 2);\n            } else\
    \ {\n                vec.push(i + 1);\n            }\n        }\n    }\n    return\
    \ vec;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpxct2zdac.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n - 1];\n    pile[0] = n;\n    for\
    \ i in 1..(n + 1) {\n        if n % 2 == 0 {\n            pile[i] = pile[i - 1]\
    \ + 1;\n        } else {\n            pile[i] = pile[i - 1] + 1;\n           \
    \ pile[i - 1] += 1;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpt6c14qgm.rs:16:13\n\
    \   |\n16 |             pile[i] = pile[i - 1] + 1;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpt6c14qgm.rs:16:23\n   |\n16 |  \
    \           pile[i] = pile[i - 1] + 1;\n   |                       ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpt6c14qgm.rs:18:13\n\
    \   |\n18 |             pile[i] = pile[i - 1] + 1;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpt6c14qgm.rs:18:23\n   |\n18 |  \
    \           pile[i] = pile[i - 1] + 1;\n   |                       ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpt6c14qgm.rs:19:13\n\
    \   |\n19 |             pile[i - 1] += 1;\n   |             ^^^^^^^^^^^ s"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n\n    if n % 2 == 0 {\n   \
    \     for i in 0..n / 2 {\n            pile.push(i + 1);\n        }\n    } else\
    \ {\n        for i in 0..n / 2 {\n            pile.push(i + 2);\n        }\n \
    \   }\n\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[3, 5, 7]`', /tmp/tmpzd9lhm6z.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut ret = Vec::new();\n    for _ in 0..n {\n      \
    \  ret.push(0);\n    }\n    for i in 0..n {\n        if i % 2 == 0 {\n       \
    \     ret[(i + 1) as usize] += 1;\n        } else {\n            ret[(i + 1) as\
    \ usize] += 2;\n        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 3 but the index\
    \ is 3', /tmp/tmpcgw3s4is.rs:18:13\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 1 {\n        // The last level\n        return\
    \ vec![n - 1, n - 2];\n    }\n    let mut ret = vec![n - 1];\n    if n & 1 ==\
    \ 0 {\n        // Even number\n        let next = n / 2;\n        for _i in 0..next\
    \ {\n            ret.append(1);\n        }\n    } else {\n        // Odd number\n\
    \        let next = n + 1;\n        for _i in 0..next {\n            ret.append(1);\n\
    \        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi7bem7z6.rs:21:24\n   |\n\
    21 |             ret.append(1);\n   |                        ^ expected `&mut\
    \ Vec<isize>`, found integer\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<isize>`\n                           found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpi7bem7z6.rs:27:24\n   |\n27 |             ret.append(1);\n\
    \   |                        ^ expected `&mut Vec<isize>`, found integer\n   |\n\
    \   = note: expected mutable reference `&mut Vec<isize>`\n                   \
    \        found type `{integer}`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    for _ in 0..n {\n   \
    \     if n % 2 == 0 {\n            stones.push(n - 1);\n        } else {\n   \
    \         stones.push((n - 1) / 2);\n        }\n    }\n    stones\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmphzbc88vi.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return vec![0];\n    }\n    if n %\
    \ 2 == 0 {\n        let mut next_odd = 0;\n        let mut next_even = n;\n  \
    \      for i in 0..n {\n            if i % 2 == 0 {\n                next_even\
    \ += i;\n            } else {\n                next_odd += i;\n            }\n\
    \        }\n        return vec![next_odd, next_even];\n    } else {\n        let\
    \ mut next_odd = 0;\n        let mut next_even = n-1;\n        for i in 0..n {\n\
    \            if i % 2 == 0 {\n                next_even += i;\n            } else\
    \ {\n                next_odd += i;\n            }\n        }\n        return\
    \ vec![next_even, next_odd];\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpfb4t19k9.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut res = vec![0];\n    for _ in 0..n {\n        res.push(0);\n\
    \    }\n    let mut pile = vec![res.last().unwrap() + 1];\n    for _ in 0..n {\n\
    \        for _ in 1..=pile.last().unwrap() {\n            pile.push(match n %\
    \ 2 {\n                0 => res.last().unwrap() + 1,\n                _ => res.last().unwrap(),\n\
    \            });\n        }\n        n = n / 2;\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4q12okr.rs:18:22\n   |\n\
    18 |         for _ in 1..=pile.last().unwrap() {\n   |                      ^^^^^^^^^^^^^^^^^^^^\
    \ expected integer, found `&{integer}`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n18 |         for _ in 1..=*pile.last().unwrap() {\n   |      \
    \                +\n\nerror[E0308]: `match` arms have incompatible types\n  -->\
    \ /tmp/tmpp4q12okr.rs:21:22\n   |\n19 |               pile.push(match n % 2 {\n\
    \   |  _______________________-\n20 | |                 0 => res.last().unwrap()\
    \ + 1,\n   | |                      ----------------------- this is found to be\
    \ of type `{integer}`\n21 | |                 _ => res.last().unwrap(),\n   |\
    \ |                      ^^^^^^^^^^^^^^^^^^^ expected integer, found `&{integer}`\n\
    22 | |             });\n   | |_____________- `match` arms have incompatible types\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n21 |                 _ =>\
    \ *res.last().unwrap(),\n   |                      +\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n\n    let\
    \ mut result = vec![];\n\n    for i in 0..n {\n        if i % 2 == 0 {\n     \
    \       result.push(n - i);\n        } else {\n            result.push(n - i +\
    \ 1);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpnrx1ffsv.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut p = vec![0; n];\n    for _ in 0..n {\n        p[p.len()\
    \ - 1] += 1;\n    }\n    p\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfesa0cec.rs:12:25\n   |\n\
    12 |     let mut p = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut p = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    fn odd_or_even(n: isize) -> bool {\n        n % 2 == 0\n\
    \    }\n\n    let mut list = vec![];\n    list.push(n);\n\n    // loop through\
    \ the levels\n    for i in 1..(n + 1).into() {\n        // find odd or even level\n\
    \        let even = if odd_or_even(i) {\n            i\n        } else {\n   \
    \         i + 2\n        };\n        // add all the remaining stones\n       \
    \ for j in even..(i + 1) {\n            list.push(j);\n        }\n    }\n\n  \
    \  list\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpw7_qtjfj.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n\n    // Handle odd n.\n  \
    \  if n % 2 == 0 {\n        for i in 0..(n / 2) {\n            pile.push(i + 1);\n\
    \        }\n        pile.push(n - 1);\n    }\n\n    // Handle even n.\n    else\
    \ {\n        for i in 0..n / 2 {\n            pile.push(i + 1);\n        }\n \
    \   }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[3, 5, 7]`', /tmp/tmp3z7uu4i0.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    Vec::new()\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[3, 5, 7]`', /tmp/tmpbizebbrd.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n < 0 {\n        panic!(\n            \"make_a_pile:\
    \ invalid argument, value {} must be greater than 0\",\n            n\n      \
    \  )\n    }\n    let mut stones: Vec<isize> = Vec::new();\n    if n % 2 == 0 {\n\
    \        for _ in 0..n {\n            stones.push(n);\n        }\n    } else if\
    \ n != 1 {\n        let odds_idx = n + 1;\n        let evens_idx = odds_idx +\
    \ 1;\n        for _ in 0..odds_idx {\n            stones.push(n);\n        }\n\
    \        for _ in 0..evens_idx {\n            stones.push(n);\n        }\n   \
    \ }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 3, 3, 3, 3, 3, 3, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpw14i82oc.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut levels = [0; n + 1];\n    levels[0] += 1;\n\n \
    \   for i in 2..=levels[0] {\n        levels[i] = levels[i - 1] * 2 + 1\n    }\n\
    \    levels\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp94yudty1.rs:12:26\n   |\n11 | fn make_a_pile(n: isize) -> Vec<isize>\
    \ {\n   |                - this would need to be a `const`\n12 |     let mut levels\
    \ = [0; n + 1];\n   |                          ^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0435`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.push(n as isize);\n\
    \    let mut next_odd = 0;\n    let mut next_even = 0;\n    if n % 2 == 1 {\n\
    \        next_odd = 1;\n    }\n    if n % 2 == 0 {\n        next_even = 2;\n \
    \   }\n    for i in 0..n {\n        stones.push((stones.last().unwrap() + next_odd)\
    \ % 3);\n        stones.push((stones.last().unwrap() + next_even) % 3);\n    }\n\
    \    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 1, 2, 2, 0, 0]`,\n right: `[3, 5, 7]`', /tmp/tmpyz5nkoc_.rs:31:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut count = 0;\n    loop\
    \ {\n        if n == 0 {\n            break;\n        }\n        if n % 2 == 1\
    \ {\n            count += 1;\n        }\n        n /= 2;\n    }\n    for i in\
    \ (0..count).rev() {\n        pile.push(count + i);\n    }\n    pile\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpam_m2z3g.rs:21:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n21 |         n /= 2;\n \
    \  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut res = vec![];\n    match n {\n        0 => vec![1],\n\
    \        _ => {\n            for _ in 0..n / 2 {\n                res.append(1);\n\
    \            }\n            if n % 2 == 0 {\n                res.append(n - 1);\n\
    \            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphegiqw3j.rs:17:28\n   |\n\
    17 |                 res.append(1);\n   |                            ^ expected\
    \ `&mut Vec<_>`, found integer\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<_>`\n                           found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphegiqw3j.rs:20:28\n   |\n20 |              \
    \   res.append(n - 1);\n   |                            ^^^^^ expected `&mut Vec<_>`,\
    \ found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n \
    \                          found type `isize`\n\nerror[E0308]: `match` arms have\
    \ incompatible types\n  --> /tmp/tmphegiqw3j.rs:19:13\n   |\n13 |       match\
    \ n {\n   |       ------- `match` arms have incompatible types\n14 |         \
    \  0 => vec![1],\n   |                ------- this is found to be of type `Vec<{integer}>`\n\
    ...\n19 | /             if n % 2 == 0 {\n20 | |                 res.append(n -\
    \ 1);\n21 | |             }\n   | |_____________^ expected struct `Vec`, found\
    \ `()`\n   |\n   = note: expected struct `Vec<{integer}>`\n           found unit\
    \ type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut vec =\n        vec![0; std::cmp::min(2*n, std::i32::MAX\
    \ as usize) as usize];\n    vec[0] = n;\n    for i in 1..vec.len() {\n       \
    \ let next_odd = if n % 2 == 1 { n+1 } else { n*2 };\n        let next_even =\
    \ if n % 2 == 0 { n*2 } else { n+1 };\n        vec[i] = vec[i-1] + next_odd +\
    \ next_even;\n    }\n    vec\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgm9o2c99.rs:13:36\n   |\n\
    13 |         vec![0; std::cmp::min(2*n, std::i32::MAX as usize) as usize];\n \
    \  |                                    ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n13 |         vec![0; std::cmp::min(2*n,\
    \ (std::i32::MAX as usize).try_into().unwrap()) as usize];\n   |             \
    \                       +                      +++++++++++++++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    let even = if n % 2 ==\
    \ 0 {\n        n\n    } else {\n        n + 1\n    };\n    let odd = n - even;\n\
    \    for _ in 0..even {\n        stones.push(0);\n    }\n    for _ in 0..odd {\n\
    \        stones.push(1);\n    }\n    for _ in 1..n {\n        stones.push(stones.len()\
    \ + 1);\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdlt421pk.rs:28:5\n   |\n\
    11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                          \
    \   ---------- expected `Vec<isize>` because of return type\n...\n28 |     stones\n\
    \   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.push(if n % 2\
    \ == 0 { n } else { n + 1 });\n    for i in 2..n / 2 {\n        let n = stones.len();\n\
    \        stones.push(stones.last().unwrap() + if n % 2 == 0 { (i + 1) } else {\
    \ i + 1 });\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[3, 5, 7]`', /tmp/tmpv56403cp.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones: Vec<isize> = vec![];\n    let mut even:\
    \ isize = 0;\n    let mut odd: isize = 0;\n    for i in 0..n {\n        if n %\
    \ 2 == 0 {\n            stones.push(even);\n            even += 1;\n        }\
    \ else {\n            stones.push(odd);\n            odd += 1;\n        }\n  \
    \  }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpjz6p16fo.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 0 { vec![0] }\n    else {\n        if n % 2 ==\
    \ 0 {\n            vec![n - 1, n - 1 + make_a_pile(n / 2)]\n        } else {\n\
    \            vec![n - 1, n - 1, n - 1 + make_a_pile(n / 2)]\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `Vec<isize>` to `isize`\n  --> /tmp/tmp6bw4jooy.rs:15:31\n\
    \   |\n15 |             vec![n - 1, n - 1 + make_a_pile(n / 2)]\n   |        \
    \                       ^ no implementation for `isize + Vec<isize>`\n   |\n \
    \  = help: the trait `Add<Vec<isize>>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]: cannot\
    \ add `Vec<isize>` to `isize`\n  --> /tmp/tmp6bw4jooy.rs:17:38\n   |\n17 |   \
    \          vec![n - 1, n - 1, n - 1 + make_a_pile(n / 2)]\n   |              \
    \                        ^ no implementation for `isize + Vec<isize>`\n   |\n\
    \   = help: the trait `Add<Vec<isize>>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        let mut vec: Vec<isize> = Vec::new();\n\
    \        for _ in 0..n {\n            vec.push(n);\n        }\n        vec\n \
    \   } else {\n        let mut vec: Vec<isize> = Vec::new();\n        for _ in\
    \ 0..n {\n            vec.push(2 * n);\n        }\n        vec\n    }\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 6, 6]`,\n right: `[3, 5, 7]`', /tmp/tmpactdryhg.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![1; 1];\n    }\n\n    let\
    \ mut result = vec![0; n + 1];\n    let mut current = 1;\n\n    for _ in 0..n\
    \ {\n        if n % 2 == 0 {\n            result[current] += 1;\n        }\n\n\
    \        if n % 2 == 1 {\n            current += 2;\n        }\n\n        n -=\
    \ 1;\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps7jk82bx.rs:16:30\n   |\n\
    16 |     let mut result = vec![0; n + 1];\n   |                              ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n16 |     let mut\
    \ result = vec![0; (n + 1).try_into().unwrap()];\n   |                       \
    \       +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut num_stones: isize\
    \ = 0;\n    let mut odd_num = false;\n\n    while n != 0 {\n        if odd_num\
    \ {\n            odd_num = false;\n            pile.push(n - 1);\n        } else\
    \ {\n            odd_num = true;\n            pile.push((n - (n & 1)) + 1);\n\
    \        }\n        n -= 1;\n        num_stones += 1;\n    }\n\n    pile\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "warning: variable `num_stones` is assigned to, but never used\n  --> /tmp/tmpilj71bjh.rs:13:13\n\
    \   |\n13 |     let mut num_stones: isize = 0;\n   |             ^^^^^^^^^^\n\
    \   |\n   = note: `#[warn(unused_variables)]` on by default\n   = note: consider\
    \ using `_num_stones` instead\n\nerror[E0384]: cannot assign to immutable argument\
    \ `n`\n  --> /tmp/tmpilj71bjh.rs:24:9\n   |\n11 | fn make_a_pile(n: isize) ->\
    \ Vec<isize> {\n   |                - help: consider making this binding mutable:\
    \ `mut n`\n...\n24 |         n -= 1;\n   |         ^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 0 {\n        return vec![];\n    }\n\n    if n\
    \ % 2 == 0 {\n        let num_even = n / 2;\n        let num_odd = n - num_even;\n\
    \n        vec![num_even, num_odd]\n    } else {\n        let mut num_even = n\
    \ / 2;\n        let mut num_odd = n - num_even;\n        num_even = num_even *\
    \ 2 + 1;\n        num_odd += num_even;\n\n        vec![num_even, num_odd]\n  \
    \  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5]`,\n right: `[3, 5, 7]`', /tmp/tmpmhzar_uj.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        let mut v = Vec::new();\n    \
    \    v.append(n);\n        for _ in 1..n / 2 {\n            v.push((v.pop() as\
    \ isize + v.pop() as isize) / 2);\n        }\n        v\n    } else {\n      \
    \  let mut v = Vec::new();\n        v.append(n);\n        for _ in 0..((v.pop()\
    \ as isize + v.pop() as isize) / 2) {\n            v.push((v.pop() as isize +\
    \ v.pop() as isize) / 2);\n        }\n        v\n    }\n}\n\nfn main() {\n   \
    \ let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj_qgyehk.rs:14:18\n   |\n\
    14 |         v.append(n);\n   |                  ^ expected `&mut Vec<_>`, found\
    \ `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n       \
    \                    found type `isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpj_qgyehk.rs:21:18\n   |\n21 |         v.append(n);\n   |           \
    \       ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable\
    \ reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0605]:\
    \ non-primitive cast: `Option<isize>` as `isize`\n  --> /tmp/tmpj_qgyehk.rs:16:21\n\
    \   |\n16 |             v.push((v.pop() as isize + v.pop() as isize) / 2);\n \
    \  |                     ^^^^^^^^^^^^^^^^ an `as` expression can only be used\
    \ to convert between primitive types or to coerce to a specific trait object\n\
    \nerror[E0605]: non-primitive cast: `Option<isize>` as `isize`\n  --> /tmp/tmpj_qgyehk.rs:16:40\n\
    \   |\n16 |             v.push((v.pop() as isize + v.pop() as isize) / 2);\n \
    \  |                                        ^^^^^^^^^^^^^^^^ an `as` expression\
    \ can only be used to convert between primitive types or to coerce to a specific\
    \ trait object\n\nerror[E0605]: non-primitive cast: `Option<isize>` as `isize`\n\
    \  --> /tmp/tmpj_qgyehk.rs:22:23\n   |\n22 |         for _ in 0..((v.pop() as\
    \ isize + v.pop() as isize) / 2) {\n   |                       ^^^^^^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror[E0605]: non-primitive cast: `Option<isize>`\
    \ as `isize`\n  --> /tmp/tmpj_qgyehk.rs:22:42\n   |\n22 |         for _ in 0..((v.pop()\
    \ as isize + v.pop() as isize) / 2) {\n   |                                  \
    \        ^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between\
    \ primitive types or to coerce to a specific trait object\n\nerror[E0605]: non-primitive\
    \ cast: `Option<isize>` as `isize`\n  --> /tmp/tmpj_qgyehk.rs:23:21\n   |\n23\
    \ |             v.push((v.pop() as isize + v.pop() as isize) / 2);\n   |     \
    \                ^^^^^^^^^"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    if n % 2 == 1 {\n   \
    \     stones.push(n % 2);\n    }\n    for i in 1..n / 2 {\n        stones.push(i\
    \ % 2 + 1);\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[3, 5, 7]`', /tmp/tmp4yhxwn47.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        vec![3]\n    } else if n % 2 == 1\
    \ {\n        vec![3, make_a_pile(n / 2)].iter().cloned().collect::<Vec<_>>()\n\
    \    } else {\n        vec![make_a_pile(n / 2)].iter().cloned().collect::<Vec<_>>()\n\
    \            + [n - make_a_pile(n / 2)].iter().cloned().collect::<Vec<_>>()\n\
    \    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0ur3rg_6.rs:15:17\n   |\n\
    15 |         vec![3, make_a_pile(n / 2)].iter().cloned().collect::<Vec<_>>()\n\
    \   |                 ^^^^^^^^^^^^^^^^^^ expected integer, found struct `Vec`\n\
    \   |\n   = note: expected type `{integer}`\n            found struct `Vec<isize>`\n\
    \nerror[E0277]: cannot subtract `Vec<isize>` from `isize`\n  --> /tmp/tmp0ur3rg_6.rs:18:18\n\
    \   |\n18 |             + [n - make_a_pile(n / 2)].iter().cloned().collect::<Vec<_>>()\n\
    \   |                  ^ no implementation for `isize - Vec<isize>`\n   |\n  \
    \ = help: the trait `Sub<Vec<isize>>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0369]: cannot\
    \ add `Vec<_>` to `Vec<Vec<isize>>`\n  --> /tmp/tmp0ur3rg_6.rs:18:13\n   |\n17\
    \ |         vec![make_a_pile(n / 2)].iter().cloned().collect::<Vec<_>>()\n   |\
    \         ------------------------------------------------------------ Vec<Vec<isize>>\n\
    18 |             + [n - make_a_pile(n / 2)].iter().cloned().collect::<Vec<_>>()\n\
    \   |             ^ ------------------------------------------------------------\
    \ Vec<_>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0369.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 1 {\n        vec![n, n - 1]\n    } else {\n\
    \        vec![n - 1]\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpv008n3dq.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 0 {\n        return vec![];\n    }\n    let mut\
    \ counts = vec![n];\n    counts.push(0);\n    counts.push(0);\n    counts.push(1);\n\
    \n    for n in counts {\n        if n % 2 == 0 {\n            counts[n] = counts[n]\
    \ + 1;\n        }\n        else {\n            counts[n] = counts[n] + counts[n\
    \ + 1];\n        }\n    }\n    counts\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp88up_vwv.rs:22:13\n\
    \   |\n22 |             counts[n] = counts[n] + 1;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp88up_vwv.rs:22:25\n\
    \   |\n22 |             counts[n] = counts[n] + 1;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp88up_vwv.rs:25:13\n\
    \   |\n25 |             counts[n] = counts[n] + counts[n + 1];\n   |         \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp88up_vwv.rs:25:25\n\
    \   |\n25 |             counts[n] = counts[n] + counts[n + 1];\n   |         \
    \                ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp88up_vwv.rs:25:37\n\
    \   |\n25 |             counts[n] = counts[n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    make_pile(n, false)\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `make_pile` in this scope\n  --> /tmp/tmp_05s3p0o.rs:12:5\n\
    \   |\n12 |     make_pile(n, false)\n   |     ^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    make_a_pile_iter(n).collect()\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `make_a_pile_iter` in this scope\n \
    \ --> /tmp/tmpan5se2vr.rs:12:5\n   |\n12 |     make_a_pile_iter(n).collect()\n\
    \   |     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![0; n + 1];\n    let mut count = 0;\n\
    \    let mut n = n % 2;\n    for &mut n in stones.iter_mut() {\n        *n = 0;\n\
    \        for _ in 0..n {\n            count += 1;\n        }\n    }\n    if n\
    \ == 0 {\n        stones[0] += 1;\n    }\n    stones\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmj4ggzp1.rs:12:30\n   |\n\
    12 |     let mut stones = vec![0; n + 1];\n   |                              ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ stones = vec![0; (n + 1).try_into().unwrap()];\n   |                       \
    \       +     +++++++++++++++++++++\n\nerror[E0614]: type `{integer}` cannot be\
    \ dereferenced\n  --> /tmp/tmpmj4ggzp1.rs:16:9\n   |\n16 |         *n = 0;\n \
    \  |         ^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![];\n    if n % 2 == 0 {\n        v.append(n\
    \ + 1);\n        v.append(n);\n    } else {\n        v.append(n + 2);\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppl3krm8f.rs:14:18\n   |\n\
    14 |         v.append(n + 1);\n   |                  ^^^^^ expected `&mut Vec<_>`,\
    \ found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n \
    \                          found type `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppl3krm8f.rs:15:18\n   |\n15 |         v.append(n);\n   |      \
    \            ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected\
    \ mutable reference `&mut Vec<_>`\n                           found type `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmppl3krm8f.rs:17:18\n   |\n17 |\
    \         v.append(n + 2);\n   |                  ^^^^^ expected `&mut Vec<_>`,\
    \ found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n \
    \                          found type `isize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    debug_assert_eq!(n % 2, 0);\n    let mut result = vec![];\n\
    \    for _ in 0..n {\n        match n % 2 {\n            0 => result.push(n /\
    \ 2),\n            1 => result.push((n + 1) / (2 * 2)),\n            _ => result.push((n\
    \ + 1) / (2 * 2)),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjuc9j3jr.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 1 {\n        return vec![1..n];\n    }\n    let\
    \ even = make_a_pile(n/2);\n    let odd = make_a_pile(n/2);\n    let mut list\
    \ = vec![0; even.len()+odd.len()];\n    for x in even.iter().cloned() {\n    \
    \    list[(x+1)/2] += x;\n    }\n    for x in odd.iter().cloned() {\n        list[x/2]\
    \ += x;\n    }\n    return list;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph3__l4v2.rs:13:21\n   |\n\
    13 |         return vec![1..n];\n   |                     ^^^^ expected `isize`,\
    \ found struct `std::ops::Range`\n   |\n   = note: expected type `isize`\n   \
    \         found struct `std::ops::Range<isize>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmph3__l4v2.rs:19:9\n   |\n19 |   \
    \      list[(x+1)/2] += x;\n   |         ^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmph3__l4v2.rs:22:9\n   |\n22 |   \
    \      list[x/2] += x;\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile: Vec<isize> = Vec::new();\n    pile.push(n);\n\
    \    pile.push((n / 2).ceil() as isize);\n    pile.push((n % 2).floor() as isize);\n\
    \    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `ceil` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpf1cc6f9d.rs:14:23\n   |\n14 |     pile.push((n / 2).ceil()\
    \ as isize);\n   |                       ^^^^ help: there is an associated function\
    \ with a similar name: `div_ceil`\n\nerror[E0599]: no method named `floor` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpf1cc6f9d.rs:15:23\n   |\n\
    15 |     pile.push((n % 2).floor() as isize);\n   |                       ^^^^^\
    \ help: there is an associated function with a similar name: `div_floor`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    if n % 2 == 0 {\n   \
    \     stones.push(2 * n);\n    } else {\n        stones.push(2 * n + 1);\n   \
    \ }\n    for i in 0..n {\n        stones.push(i);\n    }\n    stones\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 0, 1, 2]`,\n right: `[3, 5, 7]`', /tmp/tmp7gmkx8a5.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut counts = Vec::new();\n    if n <= 0 {\n       \
    \ counts.push(n);\n    } else {\n        let low = n / 2;\n        if n % 2 ==\
    \ 0 {\n            counts.push(low);\n        } else {\n            counts.push(low\
    \ + 1);\n        }\n    }\n    for i in 1..=n {\n        if i % 2 == 0 {\n   \
    \         counts.push(counts[i-1] + 2);\n        } else {\n            counts.push(counts[i-1]\
    \ + 1);\n        }\n    }\n    counts\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpi_3g7z2c.rs:25:25\n\
    \   |\n25 |             counts.push(counts[i-1] + 2);\n   |                  \
    \       ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpi_3g7z2c.rs:27:25\n\
    \   |\n27 |             counts.push(counts[i-1] + 1);\n   |                  \
    \       ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        make_odd_pile(n)\n    } else {\n\
    \        make_even_pile(n)\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `make_odd_pile` in this scope\n  -->\
    \ /tmp/tmpif6gfj8e.rs:13:9\n   |\n13 |         make_odd_pile(n)\n   |        \
    \ ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `make_even_pile` in this scope\n  --> /tmp/tmpif6gfj8e.rs:15:9\n   |\n15 | \
    \        make_even_pile(n)\n   |         ^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.reserve(n);\n\
    \    if n % 2 == 1 {\n        for _ in 0..n {\n            stones.push(n / 2);\n\
    \            n -= n / 2;\n        }\n    } else {\n        for _ in 0..n {\n \
    \           stones.push(n);\n            n -= n;\n        }\n    }\n    stones\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpezka59qs.rs:13:20\n   |\n\
    13 |     stones.reserve(n);\n   |                    ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n13 |     stones.reserve(n.try_into().unwrap());\n\
    \   |                     ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    if n % 2\
    \ == 0 {\n        for i in 0..n {\n            if i % 2 == 0 {\n             \
    \   result.push((i + 1) as isize);\n            } else {\n                result.push((n\
    \ - i) as isize);\n            }\n        }\n    } else {\n        for i in 0..n\
    \ {\n            if i % 2 == 0 {\n                result.push((n - i) as isize);\n\
    \            } else {\n                result.push((i + 1) as isize);\n      \
    \      }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp3qcyx3tl.rs:35:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![0; 2 * n + 1];\n    let mut last_odd\
    \ = n * (n / 2);\n    let mut last_even = n - last_odd;\n    for i in 0..stones.len()\
    \ {\n        stones[i] = if i % 2 == 0 {\n            last_even\n        } else\
    \ {\n            last_odd\n        };\n        last_odd = if last_odd % 2 == 0\
    \ {\n            last_odd / 2\n        } else {\n            last_odd / 2 + 1\n\
    \        };\n        last_even = if last_even % 2 == 0 {\n            last_even\
    \ / 2\n        } else {\n            last_even / 2 + 1\n        };\n    }\n  \
    \  stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpisi0t5a2.rs:12:30\n   |\n\
    12 |     let mut stones = vec![0; 2 * n + 1];\n   |                          \
    \    ^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an\
    \ `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n12\
    \ |     let mut stones = vec![0; (2 * n + 1).try_into().unwrap()];\n   |     \
    \                         +         +++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut arr = vec![0; n + 1];\n    for i in 0..n {\n  \
    \      if i % 2 == 0 {\n            arr[i] = 2;\n        } else {\n          \
    \  arr[i] = 1;\n        }\n    }\n    arr\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1nn5gpsc.rs:12:27\n   |\n\
    12 |     let mut arr = vec![0; n + 1];\n   |                           ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut arr = vec![0;\
    \ (n + 1).try_into().unwrap()];\n   |                           +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp1nn5gpsc.rs:15:13\n\
    \   |\n15 |             arr[i] = 2;\n   |             ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp1nn5gpsc.rs:17:13\n   |\n17 |  \
    \           arr[i] = 1;\n   |             ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 2];\n    for i in 0..n {\n \
    \       let next_odd = if n % 2 == 0 {\n            i + 3\n        } else {\n\
    \            i + 1\n        };\n        let next_even = if i % 2 == 0 {\n    \
    \        i + 3\n        } else {\n            i + 1\n        };\n        pile[next_odd\
    \ as usize] += 1;\n        pile[next_even as usize] += 1;\n    }\n    pile\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5rech0zo.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 2];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 2).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::with_capacity(n);\n    let mut levels\
    \ = Vec::new();\n    while n >= 2 {\n        stones.push(n - 1);\n        n =\
    \ n - 2;\n    }\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    stones.push(1);\n    stone\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `stone` in this scope\n   --> /tmp/tmpjpeok2i_.rs:112:5\n\
    \    |\n112 |     stone\n    |     ^^^^^ help: a local variable with a similar\
    \ name exists: `stones`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjpeok2i_.rs:12:41\n\
    \   |\n12 |     let mut stones = Vec::with_capacity(n);\n   |                \
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut stones = Vec::with_capacity(n.try_into().unwrap());\n\
    \   |                                          ++++++++++++++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut arr: Vec<isize> = vec![];\n    let mut cur = 0;\n\
    \    for i in 1..(n / 2) {\n        arr.push(cur);\n        cur += 1;\n    }\n\
    \    if n % 2 == 0 {\n        arr.push(cur);\n    }\n    arr\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[3, 5, 7]`', /tmp/tmpym3bb8kj.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        for\
    \ _ in 0..n {\n            pile += [n];\n        }\n    } else {\n        let\
    \ n = n / 2;\n        for _ in 0..n {\n            pile += [n];\n        }\n \
    \   }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<_>`\n  --> /tmp/tmpsjj3ugz6.rs:15:13\n   |\n15 |             pile += [n];\n\
    \   |             ----^^^^^^^\n   |             |\n   |             cannot use\
    \ `+=` on type `Vec<_>`\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `Vec<_>`\n  --> /tmp/tmpsjj3ugz6.rs:20:13\n   |\n20 |   \
    \          pile += [n];\n   |             ----^^^^^^^\n   |             |\n  \
    \ |             cannot use `+=` on type `Vec<_>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut first_level = true;\n\
    \    for i in 1..n {\n        if first_level {\n            pile.push(i);\n  \
    \          first_level = false;\n            continue;\n        }\n        if\
    \ i % 2 == 0 {\n            pile.push(i);\n        } else {\n            pile.push(i\
    \ / 2);\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpkktnuemo.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    result.push((n\
    \ as isize) as isize);\n\n    if n % 2 == 1 {\n        result.push((n as isize)\
    \ * 2 as isize);\n    }\n\n    for i in 0..(n-1) as isize {\n        result[i]\
    \ += 2;\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3zyq_8qf.rs:20:9\n\
    \   |\n20 |         result[i] += 2;\n   |         ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for _ in range(n - 1)\
    \ {\n        result.push((n & 1).wrapping_add(n % 2));\n        n = n / 2;\n \
    \   }\n    result.push(n);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpngwf7nae.rs:13:14\n\
    \   |\n13 |     for _ in range(n - 1) {\n   |              ^^^^^ not found in\
    \ this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    if n % 2 == 0 {\n   \
    \     result.push(n - 1);\n    } else {\n        for i in 1..n {\n           \
    \ result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpn5ia0iqt.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut answer = vec![];\n    if n % 2 == 0 {\n       \
    \ answer.push(n / 2);\n        answer.push((n / 2) - 1);\n    } else {\n     \
    \   answer.push(n / 2);\n    }\n    answer\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[3, 5, 7]`', /tmp/tmpmzxmt0sb.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n < 1 {\n        vec![]\n    } else {\n        let odd\
    \ = n % 2;\n        let even = (n - odd) / 2;\n        let mut levels = vec![];\n\
    \        for i in 0..n {\n            if i % 2 == 0 {\n                levels.push(even);\n\
    \            } else {\n                levels.push(odd);\n            }\n    \
    \    }\n        levels.into_iter().collect()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp8cow0jke.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile : Vec<isize> = Vec::with_capacity(n as usize\
    \ + 1);\n\n    if n % 2 == 0 {\n        pile.push((n + 1) / 2);\n    } else {\n\
    \        pile.push(n / 2);\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[3, 5, 7]`', /tmp/tmpiqmv_ypv.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut nums: Vec<isize> = Vec::new();\n    if n % 2 ==\
    \ 0 {\n        nums.push(n / 2);\n    } else {\n        nums.push((n + 1) / (2\
    \ * 2));\n    }\n    for i in 1..(n / 2 + 1) {\n        nums.push((i as i32 +\
    \ 1) * 2);\n    }\n    nums\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeu0sagbr.rs:19:19\n   |\n\
    19 |         nums.push((i as i32 + 1) * 2);\n   |                   ^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n19 |         nums.push(((i\
    \ as i32 + 1) * 2).try_into().unwrap());\n   |                   +           \
    \       +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 0 {\n        return vec![];\n    }\n    if n %\
    \ 2 == 0 {\n        let mut pile = vec![0; n + 1];\n        for i in 0..n {\n\
    \            pile[i] = pile[i + 1] + 2;\n        }\n        pile\n    } else {\n\
    \        let mut pile = vec![1; n + 1];\n        for i in 0..n {\n           \
    \ pile[i] = pile[i + 1] + 1;\n        }\n        pile\n    }\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp709nx9s3.rs:16:32\n   |\n\
    16 |         let mut pile = vec![0; n + 1];\n   |                            \
    \    ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n16 |      \
    \   let mut pile = vec![0; (n + 1).try_into().unwrap()];\n   |               \
    \                 +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp709nx9s3.rs:18:13\n   |\n18 |  \
    \           pile[i] = pile[i + 1] + 2;\n   |             ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp709nx9s3.rs:18:23\n   |\n18 |  \
    \           pile[i] = pile[i + 1] + 2;\n   |                       ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp709nx9s3.rs:22:32\n   |\n22 |         let mut\
    \ pile = vec![1; n + 1];\n   |                                ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n22 |         let mut pile = vec![1;\
    \ (n + 1).try_into().unwrap()];\n   |                                +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp709nx9s3.rs:24:13\n\
    \   |\n24 |             pile[i] = pile[i + 1] + 1;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0];\n\n    while pile.len() < n {\n\
    \        pile.push((pile.len() + 1) % 2 != 0);\n    }\n\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl_5u9_nl.rs:14:24\n   |\n\
    14 |     while pile.len() < n {\n   |                        ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |     while pile.len() < n.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl_5u9_nl.rs:15:19\n   |\n15 |         pile.push((pile.len()\
    \ + 1) % 2 != 0);\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected integer,\
    \ found `bool`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    for i in 1..=n {\n    \
    \    if i % 2 == 0 {\n            pile.push(i);\n        } else {\n          \
    \  pile.push(i + 1);\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 4]`,\n right: `[3, 5, 7]`', /tmp/tmpmrvcutba.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    fn next_odd(n: isize) -> isize {\n        n.checked_add(1).expect(\"\
    odd - even error\")\n    }\n\n    fn next_even(n: isize) -> isize {\n        (n\
    \ - 2).checked_add(1).expect(\"odd - even error\")\n    }\n\n    let mut result:\
    \ Vec<isize> = Vec::new();\n    for i in 0..n {\n        let stones = if n % 2\
    \ == 0 {\n            next_even(i)\n        } else {\n            next_odd(i)\n\
    \        };\n        result.push(stones);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[3, 5, 7]`', /tmp/tmp_ioiaavy.rs:34:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut nums = vec![0; n + 2];\n    if n % 2 == 0 {\n \
    \       nums[1..].push(2 * (n - 1) as isize);\n    } else {\n        nums[1..].push(n);\n\
    \    }\n    for n in nums.iter().skip(2) {\n        *n += 1;\n    }\n    nums\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmjxaf7s5.rs:12:28\n   |\n\
    12 |     let mut nums = vec![0; n + 2];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ nums = vec![0; (n + 2).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0599]: no method named `push` found\
    \ for slice `[{integer}]` in the current scope\n  --> /tmp/tmpmjxaf7s5.rs:14:19\n\
    \   |\n14 |         nums[1..].push(2 * (n - 1) as isize);\n   |              \
    \     ^^^^ method not found in `[{integer}]`\n\nerror[E0599]: no method named\
    \ `push` found for slice `[{integer}]` in the current scope\n  --> /tmp/tmpmjxaf7s5.rs:16:19\n\
    \   |\n16 |         nums[1..].push(n);\n   |                   ^^^^ method not\
    \ found in `[{integer}]`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 1 {\n        return vec![n];\n    }\n    let mut\
    \ pile = vec![n];\n    let mut count = 0;\n    let next_odd = n * (n + 1) / 2;\n\
    \    if n % 2 == 0 {\n        pile.push(next_odd);\n        count += 1;\n    }\n\
    \    let mut next_even = next_odd;\n    pile.push(next_even);\n    count += 1;\n\
    \    while pile.len() >= 2 {\n        let mut n = pile.pop().unwrap();\n     \
    \   let mut m = pile.pop().unwrap();\n        if n % 2 == 0 {\n            pile.push(m);\n\
    \            count += 1;\n        } else {\n            pile.push(n);\n      \
    \      count += 1;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmp0swa7692.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    for _ in 0..n {\n   \
    \     stones.push(0);\n    }\n    if n % 2 == 0 {\n        stones.push(stones.len());\n\
    \    } else {\n        let n = n / 2;\n        stones.push(stones.len() as isize);\n\
    \        for _ in 0..n {\n            let n = stones.pop().unwrap();\n       \
    \     if n % 2 == 0 {\n                stones.push(n);\n            } else {\n\
    \                stones.push((n + 2) as isize);\n            }\n        }\n  \
    \  }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsav_qksu.rs:20:21\n   |\n\
    20 |         stones.push(stones.len() as isize);\n   |                     ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n20 |         stones.push((stones.len()\
    \ as isize).try_into().unwrap());\n   |                     +                \
    \     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsav_qksu.rs:26:29\n\
    \   |\n26 |                 stones.push((n + 2) as isize);\n   |             \
    \                ^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n26 |                 stones.push(((n + 2) as isize).try_into().unwrap());\n\
    \   |                             +                +++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsav_qksu.rs:30:5\n   |\n11 | fn make_a_pile(n:\
    \ isize) -> Vec<isize> {\n   |                             ---------- expected\
    \ `Vec<isize>` because of return type\n...\n30 |     stones\n   |     ^^^^^^ expected\
    \ `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \          found struct `Vec<usize>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    debug_assert!(n >= 0);\n    let mut nums = vec![0; n +\
    \ 1];\n    if n % 2 == 0 {\n        nums[1..].push(nums[2..].iter().cloned().next().unwrap());\n\
    \    } else {\n        nums[1..].push(nums[1..].iter().cloned().next().unwrap());\n\
    \    }\n    nums\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7r_vyw37.rs:13:28\n   |\n\
    13 |     let mut nums = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n13 |     let mut\
    \ nums = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0599]: no method named `push` found\
    \ for slice `[{integer}]` in the current scope\n  --> /tmp/tmp7r_vyw37.rs:15:19\n\
    \   |\n15 |         nums[1..].push(nums[2..].iter().cloned().next().unwrap());\n\
    \   |                   ^^^^ method not found in `[{integer}]`\n\nerror[E0599]:\
    \ no method named `push` found for slice `[{integer}]` in the current scope\n\
    \  --> /tmp/tmp7r_vyw37.rs:17:19\n   |\n17 |         nums[1..].push(nums[1..].iter().cloned().next().unwrap());\n\
    \   |                   ^^^^ method not found in `[{integer}]`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n    if n ==\
    \ 1 {\n        return vec![n - 1];\n    }\n    let mut i = 0;\n    if n % 2 ==\
    \ 0 {\n        i += 1;\n    }\n    let mut ret = vec![i];\n    for i in 1..n /\
    \ 2 {\n        if i % 2 == 0 {\n            i += 1;\n        } else {\n      \
    \      i += 2;\n        }\n        ret.push(i - 1);\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp347m129s.rs:25:13\n\
    \   |\n23 |     for i in 1..n / 2 {\n   |         -\n   |         |\n   |    \
    \     first assignment to `i`\n   |         help: consider making this binding\
    \ mutable: `mut i`\n24 |         if i % 2 == 0 {\n25 |             i += 1;\n \
    \  |             ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]:\
    \ cannot assign twice to immutable variable `i`\n  --> /tmp/tmp347m129s.rs:27:13\n\
    \   |\n23 |     for i in 1..n / 2 {\n   |         -\n   |         |\n   |    \
    \     first assignment to `i`\n   |         help: consider making this binding\
    \ mutable: `mut i`\n...\n27 |             i += 2;\n   |             ^^^^^^ cannot\
    \ assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    vec![n, n, n]\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpaqwq05j_.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n\n    let mut\
    \ levels = vec![Vec::new()];\n    let mut next_odd_number = next_odd_number_for(n\
    \ - 1);\n    let mut next_even_number = next_even_number_for(n - 1);\n\n    loop\
    \ {\n        let level = levels.last().unwrap();\n        levels.push(level.clone());\n\
    \n        let odd_number = next_odd_number;\n        let even_number = next_even_number;\n\
    \n        next_odd_number = next_odd_number + odd_number % 2;\n        next_even_number\
    \ = next_even_number + even_number % 2;\n\n        if n & 1 == 0 {\n         \
    \   next_odd_number = next_odd_number + 1;\n        }\n\n        if n & 2 == 0\
    \ {\n            next_even_number = next_even_number + 1;\n        }\n\n     \
    \   n /= 2;\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `next_odd_number_for` in this scope\n\
    \  --> /tmp/tmpnw25_zxo.rs:17:31\n   |\n17 |     let mut next_odd_number = next_odd_number_for(n\
    \ - 1);\n   |                               ^^^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `next_even_number_for` in this scope\n\
    \  --> /tmp/tmpnw25_zxo.rs:18:32\n   |\n18 |     let mut next_even_number = next_even_number_for(n\
    \ - 1);\n   |                                ^^^^^^^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n < 0 {\n        vec![0]\n    } else {\n        let\
    \ mut vec: Vec<isize> = Vec::new();\n        let mut odd = n % 2 == 1;\n     \
    \   let mut n = n;\n        while n > 0 {\n            vec.push(n / 2);\n    \
    \        if odd {\n                odd *= 2;\n            } else {\n         \
    \       odd *= 2;\n                odd += 1;\n            }\n            n /=\
    \ 2;\n        }\n        vec\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `*=` cannot be applied to type\
    \ `bool`\n  --> /tmp/tmp4_nq8v68.rs:21:17\n   |\n21 |                 odd *= 2;\n\
    \   |                 ---^^^^^\n   |                 |\n   |                 cannot\
    \ use `*=` on type `bool`\n\nerror[E0368]: binary assignment operation `*=` cannot\
    \ be applied to type `bool`\n  --> /tmp/tmp4_nq8v68.rs:23:17\n   |\n23 |     \
    \            odd *= 2;\n   |                 ---^^^^^\n   |                 |\n\
    \   |                 cannot use `*=` on type `bool`\n\nerror[E0368]: binary assignment\
    \ operation `+=` cannot be applied to type `bool`\n  --> /tmp/tmp4_nq8v68.rs:24:17\n\
    \   |\n24 |                 odd += 1;\n   |                 ---^^^^^\n   |   \
    \              |\n   |                 cannot use `+=` on type `bool`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    while n != 0 {\n    \
    \    if n % 2 == 0 {\n            stones.push(n - 1);\n        } else {\n    \
    \        stones.push(n - 1);\n            stones.push(n - 1);\n        }\n   \
    \     n -= 1;\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp0khzn0xa.rs:20:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n20 |         n -= 1;\n \
    \  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n\n    let mut\
    \ pile = Vec::new();\n    if n % 2 == 0 {\n        pile.push(n - 1);\n    } else\
    \ {\n        let mut next_odd = 0;\n        let mut next_even = n + 1;\n     \
    \   while n != 0 {\n            pile.push(next_odd);\n            next_odd +=\
    \ next_even;\n            next_even += 2;\n            n -= 1;\n        }\n  \
    \  }\n\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmplsg1qu6x.rs:26:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n26 |             n -= 1;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut first_level = [n];\n    loop {\n        let mut\
    \ next_level = [n];\n        for stones in next_level {\n            if stones\
    \ % 2 == 0 {\n                next_level.push(stones + 1);\n            } else\
    \ {\n                next_level.push(stones + 3);\n            }\n        }\n\
    \        if next_level.len() == 1 {\n            break;\n        }\n        first_level.push(next_level.len());\n\
    \    }\n    first_level\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for array `[isize; 1]` in the\
    \ current scope\n  --> /tmp/tmpu3_ru3jk.rs:17:28\n   |\n17 |                 next_level.push(stones\
    \ + 1);\n   |                            ^^^^ method not found in `[isize; 1]`\n\
    \nerror[E0599]: no method named `push` found for array `[isize; 1]` in the current\
    \ scope\n  --> /tmp/tmpu3_ru3jk.rs:19:28\n   |\n19 |                 next_level.push(stones\
    \ + 3);\n   |                            ^^^^ method not found in `[isize; 1]`\n\
    \nerror[E0599]: no method named `push` found for array `[isize; 1]` in the current\
    \ scope\n  --> /tmp/tmpu3_ru3jk.rs:25:21\n   |\n25 |         first_level.push(next_level.len());\n\
    \   |                     ^^^^ method not found in `[isize; 1]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu3_ru3jk.rs:27:5\n   |\n11 | fn make_a_pile(n:\
    \ isize) -> Vec<isize> {\n   |                             ---------- expected\
    \ `Vec<isize>` because of return type\n...\n27 |     first_level\n   |     ^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_vec()`\n   |     |\n   |     expected\
    \ struct `Vec`, found array `[isize; 1]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \               found array `[isize; 1]`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 1 {\n        vec![n - 1, n, n + 1 as usize]\n\
    \    } else {\n        vec![n - 1, n as usize, n as usize + 1]\n    }\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2wlsx2fg.rs:13:28\n   |\n\
    13 |         vec![n - 1, n, n + 1 as usize]\n   |                            ^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot add `usize` to `isize`\n\
    \  --> /tmp/tmp2wlsx2fg.rs:13:26\n   |\n13 |         vec![n - 1, n, n + 1 as usize]\n\
    \   |                          ^ no implementation for `isize + usize`\n   |\n\
    \   = help: the trait `Add<usize>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2wlsx2fg.rs:15:21\n   |\n15 |         vec![n - 1, n as\
    \ usize, n as usize + 1]\n   |                     ^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n15 |         vec![n - 1, (n as usize).try_into().unwrap(),\
    \ n as usize + 1]\n   |                     +          +++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n\n    if n\
    \ % 2 == 0 {\n        // even\n        return vec![n - 2, n - 1, n - 1];\n   \
    \ }\n\n    // odd\n    return vec![n - 1, n - 1, n - 1];\n}\n\nfn main() {\n \
    \   let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpzyq8c6r5.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 1 {\n        vec![n, n - 1]\n    } else {\n\
    \        vec![n - 1, n - 3]\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpztpg3yco.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n    let mut\
    \ pile = vec![n - 1];\n    if n % 2 == 0 {\n        pile.resize(n / 2 + 1, n /\
    \ 2);\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n \
    \   assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp90hzrfh4.rs:17:21\n   |\n\
    17 |         pile.resize(n / 2 + 1, n / 2);\n   |                     ^^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n17 |         pile.resize((n\
    \ / 2 + 1).try_into().unwrap(), n / 2);\n   |                     +         +++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    assert!(n % 2 == 1);\n    let mut result = vec![0; n];\n\
    \    let mut current_level = vec![0; n];\n    let mut next_level = 0;\n    for\
    \ i in 0..n {\n        result[i] = next_level;\n        let mut current_level_len\
    \ = next_level;\n        if i % 2 == 0 {\n            current_level_len = next_level;\n\
    \            next_level += 1;\n        }\n        for _ in 0..current_level_len\
    \ {\n            current_level[next_level] += 1;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_z8qkstn.rs:13:30\n   |\n\
    13 |     let mut result = vec![0; n];\n   |                              ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n13 |     let mut result\
    \ = vec![0; n.try_into().unwrap()];\n   |                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_z8qkstn.rs:14:37\n   |\n14 |\
    \     let mut current_level = vec![0; n];\n   |                              \
    \       ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n14 |     let\
    \ mut current_level = vec![0; n.try_into().unwrap()];\n   |                  \
    \                    ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp_z8qkstn.rs:17:9\n   |\n17 |   \
    \      result[i] = next_level;\n   |         ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return Vec::new();\n    }\n    if\
    \ n == 1 {\n        return vec![n - 1];\n    }\n    let mut count = vec![n - 1];\n\
    \    for i in 2..=n {\n        let next_odd = i as usize - 2;\n        let next_even\
    \ = i as usize - 1;\n        if n % i == 0 {\n            count = count.append(next_odd\
    \ + 1);\n        } else {\n            count = count.append(next_even + 1);\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpllnas0gj.rs:23:34\n   |\n\
    23 |             count = count.append(next_odd + 1);\n   |                   \
    \               ^^^^^^^^^^^^ expected `&mut Vec<isize>`, found `usize`\n   |\n\
    \   = note: expected mutable reference `&mut Vec<isize>`\n                   \
    \        found type `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpllnas0gj.rs:23:21\n\
    \   |\n18 |     let mut count = vec![n - 1];\n   |                     -----------\
    \ expected due to this value\n...\n23 |             count = count.append(next_odd\
    \ + 1);\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ unit type `()`\nnote: method `append` modifies its receiver in-place\n  -->\
    \ /tmp/tmpllnas0gj.rs:23:27\n   |\n23 |             count = count.append(next_odd\
    \ + 1);\n   |                     ----- ^^^^^^ this call modifies `count` in-place\n\
    \   |                     |\n   |                     you probably want to use\
    \ this value after calling the method...\n   = note: ...instead of the `()` output\
    \ of method `append`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpllnas0gj.rs:25:34\n\
    \   |\n25 |             count = count.append(next_even + 1);\n   |           \
    \                       ^^^^^^^^^^^^^ expected `&mut Vec<isize>`, found `usize`\n\
    \   |\n   = note: expected mutable reference `&mut Vec<isize>`\n             \
    \              found type `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpllnas0gj.rs:25:21\n\
    \   |\n18 |     let mut count = vec![n - 1];\n   |                     -----------\
    \ expected due to this value\n...\n25 |             count = count.append(next_even\
    \ + 1);\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n         \
    \  found unit type `()`\nnote: method `append` modifies its receiver in-place\n\
    \  --> /tmp/tmpllnas0gj.rs:25:27\n   |\n25 |             count = count.append(next_even\
    \ + 1);\n   |                     ----- ^^^^^^ this call modifies `count` in-place\n\
    \   |    "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n    let mut\
    \ pile: Vec<isize> = vec![];\n    pile.push(0);\n    if n % 2 == 1 {\n       \
    \ for _ in 0..n / 2 {\n            pile.push(pile.last().unwrap() + 1);\n    \
    \    }\n    } else {\n        for _ in 0..n / 2 {\n            pile.push(pile.last().unwrap()\
    \ + 2);\n        }\n    }\n    return pile;\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpcg9mskas.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    match n % 2 {\n        0 => vec![n, n / 2, n / 4],\n  \
    \      1 => vec![n, n / 2],\n        _ => vec![n, n / 3, n / 4, n / 5, n / 6],\n\
    \    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpoafzccd4.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut levels = vec![];\n    for i in 0..n {\n       \
    \ if n % 2 == 0 {\n            levels.push(1 + i);\n        } else {\n       \
    \     levels.push((i + 1) + i * 2);\n        }\n    }\n    levels\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 7]`,\n right: `[3, 5, 7]`', /tmp/tmpvhxye23m.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.extend_from_slice(\n\
    \        n.iter()\n            .take_while(|&x| x > 0 && x < n)\n            .filter(|&x|\
    \ x % 2 != 0)\n            .map(|x| x + 1)\n            .collect::<Vec<_>>()\n\
    \    );\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmppufuukg2.rs:14:11\n   |\n14 |         n.iter()\n   |  \
    \         ^^^^ method not found in `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    let mut cur_level = stones.len();\n\
    \n    stones.push(0);\n\n    for _ in 0..n {\n        let mut next_level = 0;\n\
    \n        if n % 2 == 0 {\n            next_level = stones[cur_level];\n     \
    \   } else {\n            next_level = (stones[cur_level] * 3) + 1usize;\n   \
    \     }\n\n        if cur_level != stones.len() {\n            stones.push(next_level);\n\
    \        }\n\n        cur_level = cur_level + 1;\n    }\n\n    stones\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgkr5w9k5.rs:33:5\n   |\n\
    11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                          \
    \   ---------- expected `Vec<isize>` because of return type\n...\n33 |     stones\n\
    \   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut a = vec![];\n    let mut level = vec![];\n    let\
    \ mut count = 1;\n    let mut even = n;\n    let mut odd = n;\n\n    while even\
    \ > 0 {\n        level.push(count);\n        count += even;\n        even = even\
    \ / 2;\n    }\n\n    while odd > 0 {\n        level.push(count);\n        count\
    \ += odd;\n        odd = odd / 2;\n    }\n\n    for i in 0..level.len() {\n  \
    \      a.push(level[i]);\n    }\n    a\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 5, 8]`,\n right: `[3, 5, 7]`', /tmp/tmp2lv9k8mr.rs:38:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut vect = vec![0; n];\n    let mut current_level =\
    \ vec![1; n];\n    for i in 0..n {\n        if i % 2 == 0 {\n            vect[i]\
    \ = current_level[i / 2];\n        } else {\n            vect[i] = current_level[i\
    \ / 2];\n            current_level[i] = current_level[i / 2] + 1;\n        }\n\
    \    }\n    vect\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpspi253ui.rs:12:28\n   |\n\
    12 |     let mut vect = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut vect =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpspi253ui.rs:13:37\n   |\n13 |\
    \     let mut current_level = vec![1; n];\n   |                              \
    \       ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n13 |     let\
    \ mut current_level = vec![1; n.try_into().unwrap()];\n   |                  \
    \                    ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpspi253ui.rs:16:13\n   |\n16 |  \
    \           vect[i] = current_level[i / 2];\n   |             ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpspi253ui.rs:16:23\n   |\n16 |  \
    \           vect[i] = current_level[i / 2];\n   |                       ^^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpspi253ui.rs:18:13\n\
    \   |\n18 |             vect[i] = current_level[i / 2];\n   |             ^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `Slic"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    make_a_pile_iter(n).collect()\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `make_a_pile_iter` in this scope\n \
    \ --> /tmp/tmpaiq0jb8n.rs:12:5\n   |\n12 |     make_a_pile_iter(n).collect()\n\
    \   |     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones_left: Vec<isize> = vec![0; n + 1];\n   \
    \ stones_left[..] = vec![2 * (n % 2)..];\n    for &stones in stones_left {\n \
    \       if stones % 2 == 0 {\n            stones -= 1;\n        } else {\n   \
    \         stones += 1;\n        }\n    }\n    stones_left\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbnghwlm7.rs:12:47\n   |\n\
    12 |     let mut stones_left: Vec<isize> = vec![0; n + 1];\n   |             \
    \                                  ^^^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n12 |     let mut stones_left: Vec<isize> = vec![0; (n + 1).try_into().unwrap()];\n\
    \   |                                               +     +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbnghwlm7.rs:13:23\n   |\n13 |\
    \     stones_left[..] = vec![2 * (n % 2)..];\n   |     ---------------   ^^^^^^^^^^^^^^^^^^^\
    \ expected slice `[isize]`, found struct `Vec`\n   |     |\n   |     expected\
    \ due to the type of this binding\n   |\n   = note: expected slice `[isize]`\n\
    \             found struct `Vec<RangeFrom<isize>>`\n   = note: this error originates\
    \ in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror[E0277]: the size for values of type `[isize]` cannot be known\
    \ at compilation time\n  --> /tmp/tmpbnghwlm7.rs:13:5\n   |\n13 |     stones_left[..]\
    \ = vec![2 * (n % 2)..];\n   |     ^^^^^^^^^^^^^^^ doesn't have a size known at\
    \ compile-time\n   |\n   = help: the trait `Sized` is not implemented for `[isize]`\n\
    \   = note: the left-hand-side of an assignment must have a statically known size\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbnghwlm7.rs:14:9\n   |\n14 | \
    \    for &stones in stones_left {\n   |         ^^^^^^^    ----------- this expression\
    \ has type `Option<isize>`\n   |         |\n   |         expected `isize`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `stones`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![n, n / 2, n / 2 + 1]\n  \
    \  } else {\n        vec![n]\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpeainmevx.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut a = vec![0; n / 2];\n    let mut count = 1;\n \
    \   for &s in &a[..] {\n        if n % 2 == 0 {\n            count += s;\n   \
    \     } else {\n            count += s * 2;\n        }\n    }\n    a[..(n % 2)].iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_cjhcmuh.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n / 2];\n   |                         ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0;\
    \ (n / 2).try_into().unwrap()];\n   |                         +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmp_cjhcmuh.rs:21:5\n   |\n21 |     a[..(n % 2)].iter().cloned().collect()\n\
    \   |     ^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `RangeTo<isize>`\n\
    \   = help: the following other types implement trait `SliceIndex<T>`:\n     \
    \        <RangeTo<usize> as SliceIndex<[T]>>\n             <RangeTo<usize> as\
    \ SliceIndex<str>>\n   = note: required because of the requirements on the impl\
    \ of `Index<RangeTo<isize>>` for `Vec<{integer}>`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 2];\n    pile[0] = n + 1;\n\
    \    pile[1] = if n % 2 == 0 { (n - 1) as isize } else { 0 };\n    for i in 2..(n\
    \ + 1) {\n        pile[i] = pile[i - 1] + if i % 2 == 0 { (n - i) as isize } else\
    \ { 0 };\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp14mhu4os.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 2];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 2).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp14mhu4os.rs:16:9\n   |\n16 |         pile[i]\
    \ = pile[i - 1] + if i % 2 == 0 { (n - i) as isize } else { 0 };\n   |       \
    \  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   =\
    \ help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp14mhu4os.rs:16:19\n\
    \   |\n16 |         pile[i] = pile[i - 1] + if i % 2 == 0 { (n - i) as isize }\
    \ else { 0 };\n   |                   ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n%2 == 0 {\n        let mut vec = vec![vec![]];\n  \
    \      let mut cur = vec![];\n        for i in 1..n {\n            cur.push(vec![i]);\n\
    \            if i % 2 == 0 {\n                vec.push(cur);\n               \
    \ cur = vec![];\n            } else {\n                cur.push(1);\n        \
    \    }\n        }\n        vec\n    } else {\n        let mut vec = vec![vec![]];\n\
    \        let mut cur = vec![];\n        for i in 1..n {\n            cur.push(vec![i]);\n\
    \            if i % 2 == 0 {\n                vec.push(cur);\n               \
    \ cur = vec![];\n            } else {\n                cur.push(1);\n        \
    \    }\n        }\n        cur\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp32u5zsg5.rs:21:26\n   |\n\
    21 |                 cur.push(1);\n   |                          ^ expected struct\
    \ `Vec`, found integer\n   |\n   = note: expected struct `Vec<isize>`\n      \
    \          found type `{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp32u5zsg5.rs:24:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                   \
    \          ---------- expected `Vec<isize>` because of return type\n...\n24 |\
    \         vec\n   |         ^^^ expected `isize`, found struct `Vec`\n   |\n \
    \  = note: expected struct `Vec<isize>`\n              found struct `Vec<Vec<Vec<isize>>>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp32u5zsg5.rs:34:26\n   |\n34 |\
    \                 cur.push(1);\n   |                          ^ expected struct\
    \ `Vec`, found integer\n   |\n   = note: expected struct `Vec<isize>`\n      \
    \          found type `{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp32u5zsg5.rs:37:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                   \
    \          ---------- expected `Vec<isize>` because of return type\n...\n37 |\
    \         cur\n   |         ^^^ expected `isize`, found struct `Vec`\n   |\n \
    \  = note: expected struct `Vec<isize>`\n              found struct `Vec<Vec<isize>>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n\n    for i in 0..n {\n       \
    \ if i % 2 == 0 {\n            pile.push((i + 1) as isize);\n        } else {\n\
    \            pile.push((i * 3 + (i + 1)) as isize);\n        }\n    }\n\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 5, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpsaybrprd.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..n {\n   \
    \     if n % 2 == 0 {\n            result.push((i + 1) * 2)\n        } else {\n\
    \            result.push((i + 1) * 1)\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpte_nnjh3.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n\n    for i in 0..n {\n\
    \        if i % 2 == 0 {\n            pile[i as usize] += 1;\n        } else {\n\
    \            pile[i as usize] += 2;\n        }\n    }\n\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeyp3ouy4.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n\n    if n %\
    \ 2 == 0 {\n        for i in 0..n {\n            result.push(i + 1);\n       \
    \ }\n    } else {\n        for i in 0..n {\n            result.push(i + 1 + (n\
    \ - 1) / 2);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4]`,\n right: `[3, 5, 7]`', /tmp/tmpscs4o0pw.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n    pile[0] += n;\n    for\
    \ i in 1..=n {\n        if n % 2 == 0 {\n            pile[i] += i + 1;\n     \
    \   } else if n % 2 == 1 {\n            pile[i] += i + 3;\n        }\n    }\n\
    \    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprpg5kt68.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprpg5kt68.rs:16:13\n\
    \   |\n16 |             pile[i] += i + 1;\n   |             ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmprpg5kt68.rs:18:13\n   |\n18 |            \
    \ pile[i] += i + 3;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::with_capacity(n + 1);\n    stones.push(1);\n\
    \    stones.push(1);\n    stones.push(1);\n    if n % 2 == 0 {\n        stones.iter_mut().skip(1).for_each(|stone|\
    \ stone += 2);\n    }\n    if n % 2 == 1 {\n        stones.iter_mut().skip(1).for_each(|stone|\
    \ stone += 3);\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1jbpic1u.rs:12:41\n   |\n\
    12 |     let mut stones = Vec::with_capacity(n + 1);\n   |                   \
    \                      ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n12 |     let mut stones = Vec::with_capacity((n + 1).try_into().unwrap());\n\
    \   |                                         +     +++++++++++++++++++++\n\n\
    error[E0368]: binary assignment operation `+=` cannot be applied to type `&mut\
    \ {integer}`\n  --> /tmp/tmp1jbpic1u.rs:17:52\n   |\n17 |         stones.iter_mut().skip(1).for_each(|stone|\
    \ stone += 2);\n   |                                                    -----^^^^^\n\
    \   |                                                    |\n   |             \
    \                                       cannot use `+=` on type `&mut {integer}`\n\
    \   |\nhelp: `+=` can be used on `{integer}`, you can dereference `stone`\n  \
    \ |\n17 |         stones.iter_mut().skip(1).for_each(|stone| *stone += 2);\n \
    \  |                                                    +\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `&mut {integer}`\n  -->\
    \ /tmp/tmp1jbpic1u.rs:20:52\n   |\n20 |         stones.iter_mut().skip(1).for_each(|stone|\
    \ stone += 3);\n   |                                                    -----^^^^^\n\
    \   |                                                    |\n   |             \
    \                                       cannot use `+=` on type `&mut {integer}`\n\
    \   |\nhelp: `+=` can be used on `{integer}`, you can dereference `stone`\n  \
    \ |\n20 |         stones.iter_mut().skip(1).for_each(|stone| *stone += 3);\n \
    \  |                                                    +\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    match n {\n        0 => vec![0],\n        1 => vec![1],\n\
    \        _ => {\n            let even = n / 2;\n            let odd = n % 2;\n\
    \n            vec![odd, even]\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpxmv4kdvk.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    if n % 2 == 1 {\n   \
    \     stones.push(n % 2);\n        stones.push(n / 2);\n    } else {\n       \
    \ let odd = n / 2;\n        stones.push(odd);\n        stones.push(n - odd);\n\
    \    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpqhgpn47z.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut levels = vec![0; n];\n    let mut i = 0;\n    while\
    \ i + 1 < n {\n        if n % 2 == 0 {\n            levels[i] = levels[i + 1];\n\
    \        } else {\n            levels[i + 1] = levels[i];\n        }\n       \
    \ i += 2;\n    }\n    levels[i..]\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjboy8nv_.rs:12:30\n   |\n\
    12 |     let mut levels = vec![0; n];\n   |                              ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut levels\
    \ = vec![0; n.try_into().unwrap()];\n   |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpjboy8nv_.rs:16:13\n\
    \   |\n16 |             levels[i] = levels[i + 1];\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpjboy8nv_.rs:16:25\n\
    \   |\n16 |             levels[i] = levels[i + 1];\n   |                     \
    \    ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  \
    \ |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpjboy8nv_.rs:18:13\n\
    \   |\n18 |             levels[i + 1] = levels[i];\n   |             ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpjboy8nv_.rs:18:29\n\
    \   |\n18 |             levels[i + 1] = levels[i];\n   |                     \
    \        ^^^^^^^^^ slice indices "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for _ in 0..n {\n   \
    \     result.push(0);\n    }\n    for _ in 1..n {\n        let nextEven = if n\
    \ % 2 == 0 {\n            n / 2\n        } else {\n            n + 1\n       \
    \ };\n        let nextOdd = (n / 2)\n            .checked_add(1)\n           \
    \ .ok_or(Error::Other(\"Integer division by 2\"))?;\n        result[nextEven]\
    \ += 1;\n        result[nextOdd] += 1;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Error`\n  -->\
    \ /tmp/tmpqm0aupku.rs:24:20\n   |\n24 |             .ok_or(Error::Other(\"Integer\
    \ division by 2\"))?;\n   |                    ^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing one of these items\n   |\n1  | use std::error::Error;\n\
    \   |\n1  | use std::fmt::Error;\n   |\n1  | use std::io::Error;\n   |\n\nerror[E0277]:\
    \ the `?` operator can only be used in a function that returns `Result` or `Option`\
    \ (or another type that implements `FromResidual`)\n  --> /tmp/tmpqm0aupku.rs:24:58\n\
    \   |\n11 | / fn make_a_pile(n: isize) -> Vec<isize> {\n12 | |     let mut result\
    \ = Vec::new();\n13 | |     for _ in 0..n {\n14 | |         result.push(0);\n\
    ...  |\n24 | |             .ok_or(Error::Other(\"Integer division by 2\"))?;\n\
    \   | |                                                          ^ cannot use\
    \ the `?` operator in a function that returns `Vec<isize>`\n...  |\n28 | |   \
    \  result\n29 | | }\n   | |_- this function should return `Result` or `Option`\
    \ to accept `?`\n   |\n   = help: the trait `FromResidual<Result<Infallible, _>>`\
    \ is not implemented for `Vec<isize>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpqm0aupku.rs:25:9\n   |\n25 |   \
    \      result[nextEven] += 1;\n   |         ^^^^^^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpqm0aupku.rs:26:9\n   |\n26 |   \
    \      result[nextOdd] += 1;\n   |         ^^^^^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{intege"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut ans = Vec::new();\n    let mut level = Vec::new();\n\
    \    let mut next_odd = 1;\n    let mut next_even = n + 1;\n\n    while next_odd\
    \ != 0 {\n        level.append(next_odd);\n        next_odd *= 2;\n    }\n   \
    \ while next_even != 0 {\n        level.append(next_even);\n        next_even\
    \ *= 2;\n    }\n    for i in 0..level.len() {\n        ans.append(level[i]);\n\
    \    }\n    ans\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpant2z59f.rs:18:22\n   |\n\
    18 |         level.append(next_odd);\n   |                      ^^^^^^^^ expected\
    \ `&mut Vec<_>`, found integer\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<_>`\n                           found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpant2z59f.rs:22:22\n   |\n22 |         level.append(next_even);\n\
    \   |                      ^^^^^^^^^ expected `&mut Vec<_>`, found `isize`\n \
    \  |\n   = note: expected mutable reference `&mut Vec<_>`\n                  \
    \         found type `isize`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        vec![n, n, n]\n    } else {\n    \
    \    let n2 = n % 2 == 0 ? n : n + 1;\n        let mut result = vec![n, n, n];\n\
    \        if n2 != 0 {\n            result.push(n2);\n        }\n        result\n\
    \    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `n`\n\
    \  --> /tmp/tmp9b5hliq8.rs:15:31\n   |\n15 |         let n2 = n % 2 == 0 ? n :\
    \ n + 1;\n   |                               ^ expected one of `.`, `;`, `?`,\
    \ `else`, or an operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    let mut level = Vec::new();\n\
    \n    if n % 2 == 0 {\n        for _ in 0..n {\n            stones.push(0);\n\
    \        }\n    } else {\n        for _ in 0..n {\n            stones.push(1);\n\
    \        }\n    }\n\n    for i in 0..n {\n        level.push(stones.pop());\n\
    \    }\n\n    level\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6s_em9qq.rs:29:5\n   |\n\
    11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                          \
    \   ---------- expected `Vec<isize>` because of return type\n...\n29 |     level\n\
    \   |     ^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<Option<{integer}>>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::with_capacity(n);\n    stones.push(n\
    \ as isize);\n    for _ in 0..n as usize {\n        stones.push(stones.last().unwrap()\
    \ + 1);\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvtlz6j3z.rs:12:41\n   |\n\
    12 |     let mut stones = Vec::with_capacity(n);\n   |                       \
    \                  ^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    12 |     let mut stones = Vec::with_capacity(n.try_into().unwrap());\n   |   \
    \                                       ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile : Vec<isize> = Vec::new();\n    if n%2 ==\
    \ 1 {\n        pile += n / 2;\n    }\n    else if n % 2 == 0 {\n        pile +=\
    \ n + 1;\n    }\n    else {\n        pile += n + 1;\n    }\n    \n    return pile;\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<isize>`\n  --> /tmp/tmpo0ggi7yj.rs:14:9\n   |\n14 |         pile += n /\
    \ 2;\n   |         ----^^^^^^^^^\n   |         |\n   |         cannot use `+=`\
    \ on type `Vec<isize>`\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `Vec<isize>`\n  --> /tmp/tmpo0ggi7yj.rs:17:9\n   |\n17 |\
    \         pile += n + 1;\n   |         ----^^^^^^^^^\n   |         |\n   |   \
    \      cannot use `+=` on type `Vec<isize>`\n\nerror[E0368]: binary assignment\
    \ operation `+=` cannot be applied to type `Vec<isize>`\n  --> /tmp/tmpo0ggi7yj.rs:20:9\n\
    \   |\n20 |         pile += n + 1;\n   |         ----^^^^^^^^^\n   |         |\n\
    \   |         cannot use `+=` on type `Vec<isize>`\n\nerror: aborting due to 3\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut levels = vec![];\n    for _ in 0..n {\n       \
    \ let mut level = vec![];\n        for _ in 0..n {\n            level.push(0);\n\
    \        }\n        levels.push(level);\n    }\n    for _ in 1..n {\n        let\
    \ mut level = levels.pop().unwrap();\n        let mut level = level.clone();\n\
    \        if n % 2 == 1 {\n            level.push(level[0].clone() + 1);\n    \
    \    } else {\n            level.push(level[0].clone());\n        }\n        levels.push(level);\n\
    \    }\n    levels\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsixh6s01.rs:30:5\n   |\n\
    11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                          \
    \   ---------- expected `Vec<isize>` because of return type\n...\n30 |     levels\n\
    \   |     ^^^^^^ expected `isize`, found struct `Vec`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<Vec<{integer}>>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile: Vec<isize> = Vec::new();\n    if n%2 == 0\
    \ {\n        for _ in 0..n {\n            pile += [n];\n        }\n    } else\
    \ {\n        let mut sum: isize = 0;\n        for _ in 0..n {\n            pile\
    \ += [n];\n            sum += n;\n        }\n        for _ in 0..n {\n       \
    \     pile += [n];\n        }\n        pile += [n];\n        pile += vec![sum];\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<isize>`\n  --> /tmp/tmpvev_cu_u.rs:15:13\n   |\n15 |             pile +=\
    \ [n];\n   |             ----^^^^^^^\n   |             |\n   |             cannot\
    \ use `+=` on type `Vec<isize>`\n\nerror[E0368]: binary assignment operation `+=`\
    \ cannot be applied to type `Vec<isize>`\n  --> /tmp/tmpvev_cu_u.rs:20:13\n  \
    \ |\n20 |             pile += [n];\n   |             ----^^^^^^^\n   |       \
    \      |\n   |             cannot use `+=` on type `Vec<isize>`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `Vec<isize>`\n  -->\
    \ /tmp/tmpvev_cu_u.rs:24:13\n   |\n24 |             pile += [n];\n   |       \
    \      ----^^^^^^^\n   |             |\n   |             cannot use `+=` on type\
    \ `Vec<isize>`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Vec<isize>`\n  --> /tmp/tmpvev_cu_u.rs:26:9\n   |\n26 |         pile\
    \ += [n];\n   |         ----^^^^^^^\n   |         |\n   |         cannot use `+=`\
    \ on type `Vec<isize>`\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `Vec<isize>`\n  --> /tmp/tmpvev_cu_u.rs:27:9\n   |\n27 |\
    \         pile += vec![sum];\n   |         ----^^^^^^^^^^^^^\n   |         |\n\
    \   |         cannot use `+=` on type `Vec<isize>`\n\nerror: aborting due to 5\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut levels = vec![];\n    for _ in 0..n {\n       \
    \ levels.push(0);\n    }\n\n    levels.clone_from_slice(vec![\n        n % 2 ==\
    \ 0 ? n + 1 : n - 1,\n        n % 2 == 0 ? n : n - 1,\n        n % 2 == 0 ? n\
    \ + 1 : n - 1,\n    ]);\n\n    levels\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error: no rules expected the token `n`\n  --> /tmp/tmp3uitxg36.rs:18:22\n\
    \   |\n18 |         n % 2 == 0 ? n + 1 : n - 1,\n   |                      ^ no\
    \ rules expected this token in macro call\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    // 1. Construct a list that stores how many stones are\
    \ in each level. Return it.\n    let mut stones: Vec<isize> = Vec::new();\n  \
    \  let mut current_level = 0;\n    let mut next_level = current_level;\n    while\
    \ next_level < n {\n        stones.push(next_level);\n        if next_level %\
    \ 2 != 0 {\n            next_level += 2;\n        } else {\n            next_level\
    \ += 1;\n        }\n        current_level = next_level;\n    }\n    stones\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpdqv4cu6a.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    for _ in 0..n {\n     \
    \   if n % 2 == 0 {\n            pile.push(n / 2);\n        } else {\n       \
    \     pile.push(n / 2 + 1);\n        }\n        n -= pile.len() as isize;\n  \
    \  }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpchv1mna9.rs:19:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n19 |         n -= pile.len()\
    \ as isize;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 0 {\n        panic!(\"n must be positive\");\n\
    \    }\n    let mut pile = vec![];\n    pile.push(1);\n    if n % 2 == 0 {\n \
    \       for i in 2..=n {\n            if i % 2 == 0 {\n                pile.push(2\
    \ * pile[i - 1] + 1);\n            }\n        }\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmplt_23dqd.rs:20:31\n   |\n20 |                 pile.push(2 * pile[i -\
    \ 1] + 1);\n   |                               ^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        let mut pile = Vec::new();\n \
    \       for i in 0..n / 2 {\n            pile.push(i + 1 + (n % 2 == 0));\n  \
    \      }\n        pile.push(i + 1 - (n % 2 == 0));\n        pile\n    } else {\n\
    \        let mut pile = Vec::new();\n        for i in 0..n / 2 {\n           \
    \ pile.push(i + 1 + (n % 2 != 0));\n        }\n        pile.push(i + 1 - (n %\
    \ 2 != 0));\n        pile\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5jpok8pw.rs:17:19\n\
    \   |\n17 |         pile.push(i + 1 - (n % 2 == 0));\n   |                   ^\
    \ help: a local variable with a similar name exists: `n`\n\nerror[E0425]: cannot\
    \ find value `i` in this scope\n  --> /tmp/tmp5jpok8pw.rs:24:19\n   |\n24 |  \
    \       pile.push(i + 1 - (n % 2 != 0));\n   |                   ^ help: a local\
    \ variable with a similar name exists: `n`\n\nerror[E0277]: cannot add `bool`\
    \ to `isize`\n  --> /tmp/tmp5jpok8pw.rs:15:29\n   |\n15 |             pile.push(i\
    \ + 1 + (n % 2 == 0));\n   |                             ^ no implementation for\
    \ `isize + bool`\n   |\n   = help: the trait `Add<bool>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `bool` to `isize`\n  --> /tmp/tmp5jpok8pw.rs:22:29\n\
    \   |\n22 |             pile.push(i + 1 + (n % 2 != 0));\n   |               \
    \              ^ no implementation for `isize + bool`\n   |\n   = help: the trait\
    \ `Add<bool>` is not implemented for `isize`\n   = help: the following other types\
    \ implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n          \
    \   <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n            \
    \ <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a\
    \ i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a isize\
    \ as Add<isize>>\n           and 48 others\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut levels = vec![0; n+1];\n    if n % 2 == 0 {\n \
    \       levels[0] = n;\n        for level in &mut levels[1..] {\n            *level\
    \ = level + 2;\n        }\n    } else {\n        levels[0] = n - 1;\n        for\
    \ level in &mut levels[1..] {\n            *level = level + 1;\n        }\n  \
    \  }\n    return levels\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn227usqy.rs:12:30\n   |\n\
    12 |     let mut levels = vec![0; n+1];\n   |                              ^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ levels = vec![0; (n+1).try_into().unwrap()];\n   |                         \
    \     +   +++++++++++++++++++++\n\nerror[E0369]: cannot add `{integer}` to `&mut\
    \ isize`\n  --> /tmp/tmpn227usqy.rs:16:28\n   |\n16 |             *level = level\
    \ + 2;\n   |                      ----- ^ - {integer}\n   |                  \
    \    |\n   |                      &mut isize\n   |\nhelp: `+` can be used on `isize`,\
    \ you can dereference `level`\n   |\n16 |             *level = *level + 2;\n \
    \  |                      +\n\nerror[E0369]: cannot add `{integer}` to `&mut isize`\n\
    \  --> /tmp/tmpn227usqy.rs:21:28\n   |\n21 |             *level = level + 1;\n\
    \   |                      ----- ^ - {integer}\n   |                      |\n\
    \   |                      &mut isize\n   |\nhelp: `+` can be used on `isize`,\
    \ you can dereference `level`\n   |\n21 |             *level = *level + 1;\n \
    \  |                      +\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    if n % 2 == 0 {\n   \
    \     stones.push(n - 1); // first level has n stones\n    } else {\n        let\
    \ mut odd = n - 1;\n        while odd % 2 == 0 {\n            odd /= 2;\n    \
    \    }\n        stones.push(odd);\n    }\n\n    stones.into_iter().map(move |stone|\
    \ {\n        if stone % 2 == 0 {\n            stone / 2\n        } else {\n  \
    \          stone + 1\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[3, 5, 7]`', /tmp/tmpofd1a5z1.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        n.to_owned().into_iter().take_while(|&x|\
    \ *x % 2 == 1).collect()\n    } else {\n        n.to_owned().into_iter().take_while(|&x|\
    \ *x % 2 == 0).collect()\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `isize` is not an iterator\n  --> /tmp/tmp9ay4yh41.rs:13:22\n\
    \   |\n13 |         n.to_owned().into_iter().take_while(|&x| *x % 2 == 1).collect()\n\
    \   |                      ^^^^^^^^^ `isize` is not an iterator\n   |\n   = note:\
    \ the following trait bounds were not satisfied:\n           `isize: Iterator`\n\
    \           which is required by `isize: IntoIterator`\n           `&isize: Iterator`\n\
    \           which is required by `&isize: IntoIterator`\n           `&mut isize:\
    \ Iterator`\n           which is required by `&mut isize: IntoIterator`\n\nerror[E0599]:\
    \ `isize` is not an iterator\n  --> /tmp/tmp9ay4yh41.rs:15:22\n   |\n15 |    \
    \     n.to_owned().into_iter().take_while(|&x| *x % 2 == 0).collect()\n   |  \
    \                    ^^^^^^^^^ `isize` is not an iterator\n   |\n   = note: the\
    \ following trait bounds were not satisfied:\n           `isize: Iterator`\n \
    \          which is required by `isize: IntoIterator`\n           `&isize: Iterator`\n\
    \           which is required by `&isize: IntoIterator`\n           `&mut isize:\
    \ Iterator`\n           which is required by `&mut isize: IntoIterator`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile: Vec<isize> = vec![0; n];\n    for i in 0..pile.len()\
    \ {\n        let mut even: isize = 0;\n        let mut odd: isize = 1;\n     \
    \   while odd <= n {\n            if n % 2 == 1 {\n                odd += even;\n\
    \                even += even;\n            } else {\n                odd += odd;\n\
    \            }\n            odd += even;\n            even += even;\n        }\n\
    \        pile[i] = odd;\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzuhv1mry.rs:12:40\n   |\n\
    12 |     let mut pile: Vec<isize> = vec![0; n];\n   |                        \
    \                ^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    12 |     let mut pile: Vec<isize> = vec![0; n.try_into().unwrap()];\n   |    \
    \                                     ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n < 0 {\n        panic!(\"Negative numbers are not allowed\"\
    );\n    }\n    if n == 0 {\n        return vec![];\n    }\n    let mut pile =\
    \ vec![n as isize];\n\n    if n % 2 == 0 {\n        for i in 0..n {\n        \
    \    if i % 2 != 0 {\n                pile[i - 1] += 1;\n            }\n     \
    \   }\n    } else {\n        for i in 0..n {\n            if i % 2 == 0 {\n  \
    \              pile[i - 1] += 1;\n            }\n        }\n    }\n\n    return\
    \ pile;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmps42mylu9.rs:23:17\n\
    \   |\n23 |                 pile[i - 1] += 1;\n   |                 ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmps42mylu9.rs:29:17\n\
    \   |\n29 |                 pile[i - 1] += 1;\n   |                 ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return Vec::new();\n    }\n    if\
    \ n % 2 == 0 {\n        return make_a_pile_helper(n, 2);\n    } else {\n     \
    \   return make_a_pile_helper(n, 3);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `make_a_pile_helper` in this scope\n\
    \  --> /tmp/tmpl2yv3lmh.rs:16:16\n   |\n16 |         return make_a_pile_helper(n,\
    \ 2);\n   |                ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `make_a_pile_helper` in this scope\n  --> /tmp/tmpl2yv3lmh.rs:18:16\n\
    \   |\n18 |         return make_a_pile_helper(n, 3);\n   |                ^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n%2 == 0 {\n        let mut n = n-1;\n        let mut\
    \ ret = vec![n];\n        let mut current = n;\n        while current > 0 {\n\
    \            if current%2 != 0 {\n                ret.push(current);\n       \
    \         current += 1;\n            }\n            current -= 1;\n        }\n\
    \        ret\n    } else {\n        let mut ret = vec![n];\n        let mut current\
    \ = n;\n        while current > 0 {\n            if current%2 == 0 {\n       \
    \         ret.push(current);\n                current += 1;\n            }\n \
    \           current -= 1;\n        }\n        ret\n    }\n}\n\nfn main() {\n \
    \   let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = vec![];\n    let mut level\
    \ = 1;\n    while n != 0 {\n        if n % 2 == 1 {\n            level += 1;\n\
    \        }\n        if level == 2 {\n            result.push(n);\n           \
    \ level = 1;\n        }\n        n -= 1;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp8heyw81b.rs:22:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n22 |         n -= 1;\n \
    \  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile: Vec<isize> = vec![0; n];\n    let mut num:\
    \ isize = 0;\n    for i in 0..n {\n        if n % 2 == 0 {\n            pile[i]\
    \ = num;\n            num += 1;\n        } else {\n            pile[i] = num;\n\
    \            num += 1;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvbdqaxzw.rs:12:40\n   |\n\
    12 |     let mut pile: Vec<isize> = vec![0; n];\n   |                        \
    \                ^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    12 |     let mut pile: Vec<isize> = vec![0; n.try_into().unwrap()];\n   |    \
    \                                     ++++++++++++++++++++\n\nerror[E0277]: the\
    \ type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvbdqaxzw.rs:16:13\n\
    \   |\n16 |             pile[i] = num;\n   |             ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpvbdqaxzw.rs:19:13\n   |\n19 |            \
    \ pile[i] = num;\n   |             ^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut n = n.checked_add(1, \"n is odd\".to_string());\n\
    \    let mut counts = vec![0; n + 1];\n    let mut next = 1;\n    while next <=\
    \ n {\n        let next = next + next % 2;\n        counts[next] += 1;\n    }\n\
    \    counts\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \   --> /tmp/tmpjetahhcx.rs:12:19\n    |\n12  |     let mut n = n.checked_add(1,\
    \ \"n is odd\".to_string());\n    |                   ^^^^^^^^^^^ -  ----------------------\
    \ supplied 2 arguments\n    |                   |\n    |                   expected\
    \ 1 argument\n    |\nnote: associated function defined here\n    = note: this\
    \ error originates in the macro `int_impl` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror[E0369]: cannot add `{integer}` to `Option<isize>`\n\
    \  --> /tmp/tmpjetahhcx.rs:13:32\n   |\n13 |     let mut counts = vec![0; n +\
    \ 1];\n   |                              - ^ - {integer}\n   |               \
    \               |\n   |                              Option<isize>\n\nerror[E0277]:\
    \ can't compare `{integer}` with `Option<isize>`\n  --> /tmp/tmpjetahhcx.rs:15:16\n\
    \   |\n15 |     while next <= n {\n   |                ^^ no implementation for\
    \ `{integer} < Option<isize>` and `{integer} > Option<isize>`\n   |\n   = help:\
    \ the trait `PartialOrd<Option<isize>>` is not implemented for `{integer}`\n \
    \  = help: the following other types implement trait `PartialOrd<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0061, E0277, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut levels = [n];\n    for _ in 0..n {\n        levels.push(levels.last().checked_add::<isize>()).unwrap();\n\
    \    }\n    levels.into_iter().map(|n| n as isize)\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for array `[isize; 1]` in the\
    \ current scope\n  --> /tmp/tmpr6rxafkb.rs:14:16\n   |\n14 |         levels.push(levels.last().checked_add::<isize>()).unwrap();\n\
    \   |                ^^^^ method not found in `[isize; 1]`\n\nerror[E0599]: no\
    \ method named `checked_add` found for enum `Option` in the current scope\n  -->\
    \ /tmp/tmpr6rxafkb.rs:14:35\n   |\n14 |         levels.push(levels.last().checked_add::<isize>()).unwrap();\n\
    \   |                                   ^^^^^^^^^^^ method not found in `Option<&isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpr6rxafkb.rs:16:5\n   |\n11 | fn\
    \ make_a_pile(n: isize) -> Vec<isize> {\n   |                             ----------\
    \ expected `Vec<isize>` because of return type\n...\n16 |     levels.into_iter().map(|n|\
    \ n as isize)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found struct `Map`\n   |\n   = note: expected struct `Vec<isize>`\n \
    \             found struct `Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmpr6rxafkb.rs:16:28:\
    \ 16:42]>`\n\nerror[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmpr6rxafkb.rs:16:32\n\
    \   |\n16 |     levels.into_iter().map(|n| n as isize)\n   |                 \
    \               -^^^^^^^^^\n   |                                |\n   |      \
    \                          cannot cast `&isize` as `isize`\n   |             \
    \                   help: dereference the expression: `*n`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599,\
    \ E0606.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    if n % 2 == 0 {\n   \
    \     for _ in 0..n {\n            stones.push(n - 1);\n        }\n    } else\
    \ {\n        let mut level = stones.len();\n        for _ in 0..n {\n        \
    \    stones.push(level);\n            if level % 2 == 0 {\n                level\
    \ += 1;\n            } else {\n                level += 2;\n            }\n  \
    \      }\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph2n6_3q0.rs:20:25\n   |\n\
    20 |             stones.push(level);\n   |                         ^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n20 |             stones.push(level.try_into().unwrap());\n\
    \   |                              ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n%2 == 1 {\n        vec![n, n/2]\n    } else {\n   \
    \     vec![n, 3*n/2]\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpwqrw1srr.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 1 {\n        return vec![n];\n    }\n    let odd\
    \ = n%2 == 0;\n    let even = (n - odd) as usize;\n\n    vec![n, odd, even]\n\
    \        .iter()\n        .map(|&x| if x == 0 { x } else { x - 1 })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: cannot subtract `bool` from `isize`\n  --> /tmp/tmp73xifk4i.rs:16:19\n\
    \   |\n16 |     let even = (n - odd) as usize;\n   |                   ^ no implementation\
    \ for `isize - bool`\n   |\n   = help: the trait `Sub<bool>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp73xifk4i.rs:18:13\n\
    \   |\n18 |     vec![n, odd, even]\n   |             ^^^ expected `isize`, found\
    \ `bool`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut vect = Vec::new();\n    let mut current_level_size\
    \ = n;\n    let mut current_level_number = 1;\n    while current_level_number\
    \ <= n {\n        if current_level_number % 2 == 0 {\n            current_level_size\
    \ += current_level_number / 2;\n        } else {\n            current_level_size\
    \ += current_level_number / 2;\n            current_level_size += current_level_number\
    \ % 2;\n        }\n        vect.push(current_level_size);\n        current_level_number++;\n\
    \    }\n    vect\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp5no55eaw.rs:23:29\n\
    \   |\n23 |         current_level_number++;\n   |                            \
    \ ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n23 |\
    \         { let tmp = current_level_number; current_level_number += 1; tmp };\n\
    \   |         +++++++++++                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    23 -         current_level_number++;\n23 +         current_level_number += 1;\n\
    \   | \n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n    let mut\
    \ n2 = n * 2;\n    let mut n3 = n2 * 3;\n    let mut n4 = n3 * 4;\n    let mut\
    \ n5 = n4 * 5;\n    let mut n6 = n5 * 6;\n    let mut n7 = n6 * 7;\n    let mut\
    \ n8 = n7 * 8;\n    let mut n9 = n8 * 9;\n    let mut n10 = n9 * 10;\n    let\
    \ mut n11 = n10 * 11;\n    let mut n12 = n11 * 12;\n    let mut n13 = n12 * 13;\n\
    \    let mut n14 = n13 * 14;\n    let mut n15 = n14 * 15;\n\n    let mut pill_list\
    \ = vec![0; n];\n\n    if n % 2 == 1 {\n        pill_list.push(n2);\n    }\n \
    \   if n % 3 == 1 {\n        pill_list.push(n3);\n    }\n    if n % 4 == 1 {\n\
    \        pill_list.push(n4);\n    }\n    if n % 5 == 1 {\n        pill_list.push(n5);\n\
    \    }\n    if n % 6 == 1 {\n        pill_list.push(n6);\n    }\n    if n % 7\
    \ == 1 {\n        pill_list.push(n7);\n    }\n    if n % 8 == 1 {\n        pill_list.push(n8);\n\
    \    }\n    if n % 9 == 1 {\n        pill_list.push(n9);\n    }\n    if n % 10\
    \ == 1 {\n        pill_list.push(n10);\n    }\n    if n % 11 == 1 {\n        pill_list.push(n11);\n\
    \    }\n    if n % 12 == 1 {\n        pill_list.push(n12);\n    }\n    if n %\
    \ 13 == 1 {\n        pill_list.push(n13);\n    }\n    if n % 14 == 1 {\n     \
    \   pill_list.push(n14);\n    }\n    if n % 15 == 1 {\n        pill_list.push(n15);\n\
    \    }\n\n    pill_list\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp80arvsn6.rs:30:33\n   |\n\
    30 |     let mut pill_list = vec![0; n];\n   |                               \
    \  ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n   |\n30 |     let mut\
    \ pill_list = vec![0; n.try_into().unwrap()];\n   |                          \
    \        ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile: Vec<isize> = vec![];\n    if n == 1 { pile\
    \ += vec![0; 1] }\n    else if n % 2 == 1 {\n        pile += vec![n / 2] + vec![n\
    \ / 2];\n    } else {\n        pile += vec![n / 2] + vec![n / 2..=n - 1];\n  \
    \  }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<isize>`\n  --> /tmp/tmppobxrob1.rs:13:17\n   |\n13 |     if n == 1 { pile\
    \ += vec![0; 1] }\n   |                 ----^^^^^^^^^^^^^^\n   |             \
    \    |\n   |                 cannot use `+=` on type `Vec<isize>`\n\nerror[E0369]:\
    \ cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmppobxrob1.rs:15:29\n \
    \  |\n15 |         pile += vec![n / 2] + vec![n / 2];\n   |                 -----------\
    \ ^ ----------- Vec<isize>\n   |                 |\n   |                 Vec<isize>\n\
    \nerror[E0369]: cannot add `Vec<RangeInclusive<isize>>` to `Vec<isize>`\n  -->\
    \ /tmp/tmppobxrob1.rs:17:29\n   |\n17 |         pile += vec![n / 2] + vec![n /\
    \ 2..=n - 1];\n   |                 ----------- ^ ------------------- Vec<RangeInclusive<isize>>\n\
    \   |                 |\n   |                 Vec<isize>\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0368, E0369.\n\
    For more information about an error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = 0;\n    if n % 2 == 0 {\n        stones\
    \ += n;\n    }\n    while stones < n {\n        let next = stones.next_odd();\n\
    \        if next % 2 == 0 {\n            stones += next;\n        } else {\n \
    \           stones += next;\n        }\n    }\n    stones.into_iter().take(n +\
    \ 1).collect()\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `next_odd` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmps4yxn9ne.rs:17:27\n   |\n17 |         let next\
    \ = stones.next_odd();\n   |                           ^^^^^^^^ method not found\
    \ in `isize`\n\nerror[E0599]: `isize` is not an iterator\n  --> /tmp/tmps4yxn9ne.rs:24:12\n\
    \   |\n24 |     stones.into_iter().take(n + 1).collect()\n   |            ^^^^^^^^^\
    \ `isize` is not an iterator\n   |\n   = note: the following trait bounds were\
    \ not satisfied:\n           `isize: Iterator`\n           which is required by\
    \ `isize: IntoIterator`\n           `&isize: Iterator`\n           which is required\
    \ by `&isize: IntoIterator`\n           `&mut isize: Iterator`\n           which\
    \ is required by `&mut isize: IntoIterator`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n    if n % 2 == 0 {\n     \
    \   for _ in 0..(n/2 - 1) {\n            pile.push(pile.iter().skip(2).count());\n\
    \        }\n    } else {\n        for _ in 0..(n/2 - 1) {\n            pile.push(pile.iter().skip(3).count());\n\
    \        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkbq2bk3e.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkbq2bk3e.rs:22:5\n   |\n11 | fn\
    \ make_a_pile(n: isize) -> Vec<isize> {\n   |                             ----------\
    \ expected `Vec<isize>` because of return type\n...\n22 |     pile\n   |     ^^^^\
    \ expected `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<usize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = vec![n];\n    if n % 2 == 1 {\n      \
    \  result[1] = n / 2;\n    } else {\n        result[1] = n;\n    }\n    for &mut\
    \ i in &mut result[1..] {\n        let x = i as isize;\n        let y = x + 1;\n\
    \        if y <= n {\n            result[y] = i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp64yo2buy.rs:22:13\n\
    \   |\n22 |             result[y] = i;\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut num_stones = Vec::new();\n    let mut pile = vec![0;\
    \ n];\n    for i in 0..n {\n        if i % 2 == 0 {\n            pile[i] = num_stones;\n\
    \        } else {\n            num_stones += i + 1;\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsjd3ulip.rs:13:28\n   |\n\
    13 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n13 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsjd3ulip.rs:16:13\n\
    \   |\n16 |             pile[i] = num_stones;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `Vec<_>`\n  --> /tmp/tmpsjd3ulip.rs:18:13\n\
    \   |\n18 |             num_stones += i + 1;\n   |             ----------^^^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `Vec<_>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n    if n % 2 == 0 {\n     \
    \   pile.push(1);\n    }\n\n    for i in 1..n {\n        if i % 2 == 0 {\n   \
    \         pile[i] = pile[i / 2];\n        } else {\n            pile[i] = pile[i\
    \ / 2] + 1;\n        }\n    }\n\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv9lvpach.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpv9lvpach.rs:19:13\n\
    \   |\n19 |             pile[i] = pile[i / 2];\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpv9lvpach.rs:19:23\n\
    \   |\n19 |             pile[i] = pile[i / 2];\n   |                       ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpv9lvpach.rs:21:13\n\
    \   |\n21 |             pile[i] = pile[i / 2] + 1;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpv9lvpach.rs:21:23\n\
    \   |\n21 |             pile[i] = pile[i / 2] + 1;\n   |                     \
    \  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    stones.push(n / 2);\n\
    \    stones.push(n % 2);\n\n    if n < 3 {\n        return stones\n    }\n   \
    \ let mut counts = [0; n - 1];\n    for i in 1..(n-1) as usize {\n        let\
    \ n = stones[i];\n        let m = stones[i + 1];\n        let a = ((n + m) / 2);\n\
    \        let b = ((n + 1) / 2);\n\n        if n % 2 == 0 {\n            counts[a\
    \ - b - 1] += 1;\n        } else {\n            counts[a - b + 1] += 1;\n    \
    \    }\n    }\n\n    stones.iter_mut().for_each(|p| {\n        *p += counts[(*p\
    \ + 1) / 2];\n    });\n\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpvd4l3xs9.rs:19:26\n   |\n11 | fn make_a_pile(n: isize) -> Vec<isize>\
    \ {\n   |                - this would need to be a `const`\n...\n19 |     let\
    \ mut counts = [0; n - 1];\n   |                          ^\n\nwarning: unnecessary\
    \ parentheses around assigned value\n  --> /tmp/tmpvd4l3xs9.rs:23:17\n   |\n23\
    \ |         let a = ((n + m) / 2);\n   |                 ^           ^\n   |\n\
    \   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n23 -         let a = ((n + m) / 2);\n23 +         let a = (n + m) / 2;\n\
    \   | \n\nwarning: unnecessary parentheses around assigned value\n  --> /tmp/tmpvd4l3xs9.rs:24:17\n\
    \   |\n24 |         let b = ((n + 1) / 2);\n   |                 ^           ^\n\
    \   |\nhelp: remove these parentheses\n   |\n24 -         let b = ((n + 1) / 2);\n\
    24 +         let b = (n + 1) / 2;\n   | \n\nerror: aborting due to previous error;\
    \ 2 warnings emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0435`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 1 {\n        vec![n, n / 2, n / 2 + 1]\n  \
    \  } else {\n        vec![n]\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpgs9jt_9c.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 1 {\n        return vec![n]\n    }\n\n    let mut\
    \ i = vec![n - 1];\n\n    if n % 2 == 1 {\n        i += vec![n - 1];\n    }\n\n\
    \    i += vec![i + 1..];\n\n    i.iter().cloned().collect()\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<isize>`\n  --> /tmp/tmpr1jqnxkq.rs:19:9\n   |\n19 |         i += vec![n\
    \ - 1];\n   |         -^^^^^^^^^^^^^^^\n   |         |\n   |         cannot use\
    \ `+=` on type `Vec<isize>`\n\nerror[E0369]: cannot add `{integer}` to `Vec<isize>`\n\
    \  --> /tmp/tmpr1jqnxkq.rs:22:17\n   |\n22 |     i += vec![i + 1..];\n   |   \
    \            - ^ - {integer}\n   |               |\n   |               Vec<isize>\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `Vec<isize>`\n\
    \  --> /tmp/tmpr1jqnxkq.rs:22:5\n   |\n22 |     i += vec![i + 1..];\n   |    \
    \ -^^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0368, E0369.\nFor more information about an error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut v = vec![];\n    for i in 1..n+1 {\n        if\
    \ n % 2 == 0 {\n            v.push(i as isize);\n        } else {\n          \
    \  v.push((i-1)/2 as isize);\n        }\n    }\n    v\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp37bgbiof.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n\n    let mut levels = vec![Vec::new();\
    \ n]; // the levels themselves\n    let mut num_stones = n; // the number of stones\
    \ in each level\n\n    for i in 0..n {\n        if i % 2 == 0 {\n            levels[i].push(num_stones);\
    \ // first level has n stones\n            num_stones *= 2; // next level: 2 stones\n\
    \        } else {\n            levels[i].push(num_stones); // first level has\
    \ n stones\n            num_stones *= 3; // next level: 3 stones\n        }\n\
    \    }\n\n    // Add the number of stones in last level\n    result.push(levels[0].last().unwrap());\n\
    \n    for i in 1..n {\n        let level_size = levels[i].len();\n        // Add\
    \ next level's stones\n        result.push(levels[i].last().unwrap() * level_size);\n\
    \        // Move on to next level\n        for j in 0..level_size - 1 {\n    \
    \        result[levels[i].len() - 1] += result[levels[i].len() - j - 1];\n   \
    \     }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmsrd6sfj.rs:14:39\n   |\n\
    14 |     let mut levels = vec![Vec::new(); n]; // the levels themselves\n   |\
    \                                       ^ expected `usize`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n14 |     let mut levels = vec![Vec::new(); n.try_into().unwrap()];\
    \ // the levels themselves\n   |                                        ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[Vec<_>]` cannot be indexed by `isize`\n  --> /tmp/tmpmsrd6sfj.rs:19:13\n\
    \   |\n19 |             levels[i].push(num_stones); // first level has n stones\n\
    \   |             ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[Vec<_>]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<Vec<_>>`\n\
    \nerror[E0277]: the type `[Vec<_>]` cannot be indexed by `isize`\n  --> /tmp/tmpmsrd6sfj.rs:22:13\n\
    \   |\n22 |             levels[i].push(num_stones); // first level has n stones\n\
    \   |             ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[Vec<_>]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<Vec<_>>`\n\
    \nerror[E0277]: the type `[Vec<_>]` cannot be indexed by `isize`\n  --> /tmp/tmpmsrd6sfj.rs:31:26\n\
    \   |\n31 |         let level_size = levels[i].len();\n   |                  \
    \        ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  \
    \ |\n   = help: the trait `SliceIndex<[Vec<_>]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<Vec<_>>`\n\
    \nerror[E0277]: the type `[Vec<_>]` cannot be indexed by `isize`\n  --> /tmp/tmpmsrd6sfj.rs:33"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut last_odd = 1;\n\
    \    let mut last_even = 1;\n    for i in 0..n {\n        let stones = if i %\
    \ 2 == 0 {\n            last_even\n        } else {\n            last_odd\n  \
    \      };\n        pile.push(stones);\n        if i % 2 == 0 {\n            last_even\
    \ = 1;\n        } else {\n            last_odd = 1;\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp0_wuek_d.rs:33:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    pile.push(n);\n    while pile.len()\
    \ < n {\n        let next_odd = (n + 1) % 2 != 0;\n        let next_even = (n\
    \ - 1) % 2 == 0;\n        pile.push(next_odd || next_even ? n - 1 : n);\n    }\n\
    \    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `n`\n\
    \  --> /tmp/tmpw5az9sa5.rs:17:43\n   |\n17 |         pile.push(next_odd || next_even\
    \ ? n - 1 : n);\n   |                                          -^ expected one\
    \ of `)`, `,`, `.`, `?`, or an operator\n   |                                \
    \          |\n   |                                          help: missing `,`\n\
    \nerror[E0573]: expected type, found local variable `n`\n  --> /tmp/tmpw5az9sa5.rs:17:51\n\
    \   |\n17 |         pile.push(next_odd || next_even ? n - 1 : n);\n   |      \
    \                                             ^ expecting a type here because\
    \ of type ascription\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw5az9sa5.rs:14:24\n\
    \   |\n14 |     while pile.len() < n {\n   |                        ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n14 |     while pile.len()\
    \ < n.try_into().unwrap() {\n   |                         ++++++++++++++++++++\n\
    \nerror[E0277]: the `?` operator can only be applied to values that implement\
    \ `Try`\n  --> /tmp/tmpw5az9sa5.rs:17:31\n   |\n17 |         pile.push(next_odd\
    \ || next_even ? n - 1 : n);\n   |                               ^^^^^^^^^^^ the\
    \ `?` operator cannot be applied to type `bool`\n   |\n   = help: the trait `Try`\
    \ is not implemented for `bool`\n\nerror[E0277]: the `?` operator can only be\
    \ used in a function that returns `Result` or `Option` (or another type that implements\
    \ `FromResidual`)\n  --> /tmp/tmpw5az9sa5.rs:17:41\n   |\n11 | / fn make_a_pile(n:\
    \ isize) -> Vec<isize> {\n12 | |     let mut pile = vec![];\n13 | |     pile.push(n);\n\
    14 | |     while pile.len() < n {\n...  |\n17 | |         pile.push(next_odd ||\
    \ next_even ? n - 1 : n);\n   | |                                         ^ cannot\
    \ use the `?` operator in a function that returns `Vec<isize>`\n18 | |     }\n\
    19 | |     pile\n20 | | }\n   | |_- this function should return `Result` or `Option`\
    \ to accept `?`\n   |\n   = help: the trait `FromResidual<_>` is not implemented\
    \ for `Vec<isize>`\n\nerror[E006"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    use std::cmp::Ordering;\n    use std::cmp::PartialOrd;\n\
    \    use std::cmp::PartialEq;\n    let mut list = vec![0usize; n + 1];\n    list[0]\
    \ += 1;\n    list.sort_unstable_by(move |a, b| a.partial_cmp(&b).unwrap());\n\
    \    list\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmpdw66shjd.rs:12:9\n\
    \   |\n12 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nwarning: the item `PartialOrd`\
    \ is imported redundantly\n   --> /tmp/tmpdw66shjd.rs:13:9\n    |\n13  |     use\
    \ std::cmp::PartialOrd;\n    |         ^^^^^^^^^^^^^^^^^^^^\n\nwarning: the item\
    \ `PartialEq` is imported redundantly\n   --> /tmp/tmpdw66shjd.rs:14:9\n    |\n\
    14  |     use std::cmp::PartialEq;\n    |         ^^^^^^^^^^^^^^^^^^^\n\nwarning:\
    \ unused import: `std::cmp::PartialEq`\n  --> /tmp/tmpdw66shjd.rs:14:9\n   |\n\
    14 |     use std::cmp::PartialEq;\n   |         ^^^^^^^^^^^^^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdw66shjd.rs:15:33\n   |\n15 |     let mut list\
    \ = vec![0usize; n + 1];\n   |                                 ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n15 |     let mut list =\
    \ vec![0usize; (n + 1).try_into().unwrap()];\n   |                           \
    \      +     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdw66shjd.rs:18:5\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                   \
    \          ---------- expected `Vec<isize>` because of return type\n...\n18 |\
    \     list\n   |     ^^^^ expected `isize`, found `usize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror: aborting\
    \ due to 2 previous errors; 4 warnings emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    pile.pop();\n    for i in\
    \ 0..n {\n        let mut add = pile.last().unwrap();\n        if i % 2 == 0 {\n\
    \            add = add + i;\n        } else {\n            add = add - i;\n  \
    \      }\n        pile.push(add);\n    }\n    return pile\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe89huw0m.rs:17:19\n   |\n\
    15 |         let mut add = pile.last().unwrap();\n   |                       --------------------\
    \ expected due to this value\n16 |         if i % 2 == 0 {\n17 |             add\
    \ = add + i;\n   |                   ^^^^^^^\n   |                   |\n   | \
    \                  expected `&isize`, found `isize`\n   |                   help:\
    \ consider borrowing here: `&(add + i)`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpe89huw0m.rs:19:19\n   |\n15 |         let mut add = pile.last().unwrap();\n\
    \   |                       -------------------- expected due to this value\n\
    ...\n19 |             add = add - i;\n   |                   ^^^^^^^\n   |   \
    \                |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(add - i)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe89huw0m.rs:21:19\n   |\n21 |         pile.push(add);\n\
    \   |                   ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n21 |         pile.push(*add);\n   |        \
    \           +\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones_at_each: Vec<isize> = vec![0; n+1];\n  \
    \  let mut next_level: Vec<isize> = vec![0; n];\n    for i in 0..n {\n       \
    \ // next_level contains stones of level i (i+1).\n        if i % 2 == 0 {\n \
    \           next_level[i] = stones_at_each[i as usize - 1];\n        } else {\n\
    \            next_level[i] = stones_at_each[i as usize - 2];\n        }\n    \
    \    stones_at_each[i as usize - 1] += next_level[i];\n    }\n    stones_at_each\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpufswx3ed.rs:12:50\n   |\n\
    12 |     let mut stones_at_each: Vec<isize> = vec![0; n+1];\n   |            \
    \                                      ^^^ expected `usize`, found `isize`\n \
    \  |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n12 |     let mut stones_at_each: Vec<isize> = vec![0;\
    \ (n+1).try_into().unwrap()];\n   |                                          \
    \        +   +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpufswx3ed.rs:13:46\n\
    \   |\n13 |     let mut next_level: Vec<isize> = vec![0; n];\n   |           \
    \                                   ^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n13 |     let mut next_level: Vec<isize> = vec![0; n.try_into().unwrap()];\n\
    \   |                                               ++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpufswx3ed.rs:17:13\n\
    \   |\n17 |             next_level[i] = stones_at_each[i as usize - 1];\n   |\
    \             ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpufswx3ed.rs:19:13\n\
    \   |\n19 |             next_level[i] = stones_at_each[i as usize - 2];\n   |\
    \             ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpufswx3ed.rs:21:43\n\
    \   |\n21 |         stones_at_each[i a"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n < 0 {\n        vec![]\n    } else if n == 1 {\n  \
    \      vec![n - 1]\n    } else {\n        let mut pile = vec![n - 1];\n      \
    \  let mut odd;\n        if n & 1 != 0 {\n            odd = n;\n            n\
    \ -= 1;\n        } else {\n            odd = n >> 1;\n        }\n\n        for\
    \ i in 2..(n - 1) {\n            pile[i] = pile[i - 1] + odd;\n        }\n   \
    \ }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpv22ljwmz.rs:27:13\n\
    \   |\n27 |             pile[i] = pile[i - 1] + odd;\n   |             ^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpv22ljwmz.rs:27:23\n\
    \   |\n27 |             pile[i] = pile[i - 1] + odd;\n   |                   \
    \    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpv22ljwmz.rs:26:9\n   |\n11 | \
    \  fn make_a_pile(n: isize) -> Vec<isize> {\n   |                            \
    \   ---------- expected `Vec<isize>` because of return type\n...\n26 | /     \
    \    for i in 2..(n - 1) {\n27 | |             pile[i] = pile[i - 1] + odd;\n\
    28 | |         }\n   | |_________^ expected struct `Vec`, found `()`\n   |\n \
    \  = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut nums = Vec::new();\n    while n > 0 {\n       \
    \ let next_odd = if n % 2 == 1 { Some(n / 2) } else { None };\n        let next_even\
    \ = if n % 2 == 0 { Some(n / 2) } else { None };\n        let next_odd_or_even\
    \ = if next_odd != None {\n            if next_even == None {\n              \
    \  next_odd.clone()\n            } else {\n                next_even.clone()\n\
    \            }\n        } else {\n            Some(next_even.clone())\n      \
    \  };\n\n        if nums.is_empty() {\n            nums.push(next_odd_or_even.clone());\n\
    \        } else {\n            let n2 = nums.last().unwrap() + next_odd_or_even.unwrap();\n\
    \            nums.push(n2);\n        }\n\n        n -= 1;\n    }\n\n    nums\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmpr0yu76ry.rs:23:13\n\
    \   |\n16 |            let next_odd_or_even = if next_odd != None {\n   |   ________________________________-\n\
    17 |  |             if next_even == None {\n   |  |_____________-\n18 | ||   \
    \              next_odd.clone()\n19 | ||             } else {\n20 | ||       \
    \          next_even.clone()\n21 | ||             }\n   | ||_____________- expected\
    \ because of this\n22 |  |         } else {\n23 |  |             Some(next_even.clone())\n\
    \   |  |             ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n\
    24 |  |         };\n   |  |_________- `if` and `else` have incompatible types\n\
    \   |\n   = note: expected enum `Option<isize>`\n              found enum `Option<Option<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    use std::cmp::Ordering::*;\n    let mut levels = Vec::new();\n\
    \    let mut num_stones = n.into();\n    let mut curr_level = levels.len();\n\
    \    while curr_level > 0 {\n        if num_stones % 2 == 1 {\n            curr_level\
    \ += 1;\n        } else {\n            curr_level += 2;\n        }\n        num_stones\
    \ /= 2;\n        levels.push(num_stones);\n    }\n    levels\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[3, 5, 7]`', /tmp/tmp5f_xyj6h.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    // Create a vector to hold the final count.\n    let mut\
    \ count: Vec<isize> = Vec::new();\n    // Create a vector to hold the next level\
    \ of stones.\n    let mut level: Vec<isize> = Vec::new();\n\n    // If n is odd,\
    \ then the first level of stones is n.\n    if n & 1 != 0 {\n        level.push(1);\
    \ // One stone.\n    }\n\n    // If n is even, add two to the first level.\n \
    \   // This allows the next level of stones to have even number of stones.\n \
    \   // We then add one to the last level of stones.\n    if n & 1 == 0 {\n   \
    \     level.push(2);\n    }\n\n    count.push(level.len()); // Add the last level\
    \ of stones to count.\n\n    // If n is not odd, add the next level of stones.\n\
    \    while n > 0 {\n        // If the next level of stones has even number of\
    \ stones, add two to it.\n        // This allows the next level of stones to have\
    \ odd number of stones.\n        // If it is odd, then add one to the last level\
    \ of stones.\n        if n % 2 == 0 {\n            level.push(2);\n        } else\
    \ {\n            level.push(1);\n        }\n\n        // Add the level of stones\
    \ to count.\n        count.push(level.len());\n\n        // Divide the number\
    \ of stones in the next level by 2.\n        n = n / 2;\n    }\n\n    count\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp86k1pjls.rs:29:16\n   |\n\
    29 |     count.push(level.len()); // Add the last level of stones to count.\n\
    \   |                ^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n29 |     count.push(level.len().try_into().unwrap()); // Add the\
    \ last level of stones to count.\n   |                           ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp86k1pjls.rs:43:20\n   |\n43 |\
    \         count.push(level.len());\n   |                    ^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n43 |         count.push(level.len().try_into().unwrap());\n\
    \   |                               ++++++++++++++++++++\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut n = n;\n    while n\
    \ != 1 {\n        if n % 2 == 1 {\n            pile.push(n - 1);\n           \
    \ n /= 2;\n        } else {\n            pile.push(n - 1);\n            n /= 2;\n\
    \            pile.push(n);\n        }\n    }\n    pile\n}\n\nfn main() {\n   \
    \ let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[3, 5, 7]`', /tmp/tmpaku6sxv8.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut a = Vec::new();\n    for _ in 0..n {\n        a.push(n\
    \ % 2);\n        n /= 2;\n    }\n    a\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpwq5p4r3d.rs:15:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n15 |         n /= 2;\n \
    \  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![n, 2 * n - 1]\n    } else\
    \ {\n        vec![n, 2 * (n - 1) + 1]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5]`,\n right: `[3, 5, 7]`', /tmp/tmpt1eh8750.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n\n    let mut pile_size\
    \ = n;\n    let mut next_odd_num = 1;\n\n    while pile_size > 0 {\n        let\
    \ mut next_even_num = next_odd_num;\n\n        if pile_size % 2 == 0 {\n     \
    \       next_even_num *= 2;\n        }\n\n        pile[pile_size - 1] = next_even_num;\n\
    \        pile_size--;\n        next_odd_num += 2;\n    }\n\n    pile\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpq19jiqif.rs:25:20\n\
    \   |\n25 |         pile_size--;\n   |                    ^ expected expression\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpq19jiqif.rs:12:28\n   |\n12 |\
    \     let mut pile = vec![0; n + 1];\n   |                            ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; (n + 1).try_into().unwrap()];\n   |                            +   \
    \  +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpq19jiqif.rs:24:9\n   |\n24 |         pile[pile_size\
    \ - 1] = next_even_num;\n   |         ^^^^^^^^^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 1 {\n        pile[1] += (n / 2).floor() as isize;\n    } else {\n\
    \        pile[1] += n / 2;\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbl0j99b5.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0599]: no method named `floor` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpbl0j99b5.rs:15:28\n   |\n\
    15 |         pile[1] += (n / 2).floor() as isize;\n   |                      \
    \      ^^^^^ help: there is an associated function with a similar name: `div_floor`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n\n    // First level\n    if\
    \ n % 2 == 0 {\n        pile.push(n);\n    }\n\n    // Next level\n    let mut\
    \ next_odd = n;\n    let mut next_even = n;\n\n    while next_odd > 1 || next_even\
    \ > 1 {\n        if next_odd % 2 == 1 {\n            next_odd -= 1;\n        }\
    \ else {\n            next_even -= 1;\n        }\n        pile.push(next_odd);\n\
    \        pile.push(next_even);\n    }\n\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return Vec::new();\n    }\n    let\
    \ mut counters = Vec::new();\n    if n % 2 == 0 {\n        let mut num = 1;\n\
    \        let mut next_num: isize = 2;\n        while next_num % 2 == 0 {\n   \
    \         counter += 1;\n            next_num = next_num + next_num + num;\n \
    \       }\n    } else {\n        let mut num = 1;\n        let mut next_num: isize\
    \ = 3;\n        while next_num % 3 == 0 {\n            counter += 1;\n       \
    \     next_num = next_num + next_num + num;\n        }\n    }\n    counters.push(counter);\n\
    \    for i in 0..n / 2 {\n        counters.push(counter);\n    }\n    counters\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `counter` in this scope\n  --> /tmp/tmp63l0_ax1.rs:20:13\n\
    \   |\n20 |             counter += 1;\n   |             ^^^^^^^ help: a local\
    \ variable with a similar name exists: `counters`\n\nerror[E0425]: cannot find\
    \ value `counter` in this scope\n  --> /tmp/tmp63l0_ax1.rs:27:13\n   |\n27 | \
    \            counter += 1;\n   |             ^^^^^^^ help: a local variable with\
    \ a similar name exists: `counters`\n\nerror[E0425]: cannot find value `counter`\
    \ in this scope\n  --> /tmp/tmp63l0_ax1.rs:31:19\n   |\n31 |     counters.push(counter);\n\
    \   |                   ^^^^^^^ help: a local variable with a similar name exists:\
    \ `counters`\n\nerror[E0425]: cannot find value `counter` in this scope\n  -->\
    \ /tmp/tmp63l0_ax1.rs:33:23\n   |\n33 |         counters.push(counter);\n   |\
    \                       ^^^^^^^ help: a local variable with a similar name exists:\
    \ `counters`\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n < 1 {\n        vec![0]\n    } else {\n        let\
    \ mut stones_in_next_level = vec![n - 1];\n\n        if n % 2 != 0 {\n       \
    \     stones_in_next_level += vec![n - 2 - (n / 2)];\n        }\n\n        stones_in_next_level\n\
    \    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<isize>`\n  --> /tmp/tmpqylg2soo.rs:18:13\n   |\n18 |             stones_in_next_level\
    \ += vec![n - 2 - (n / 2)];\n   |             --------------------^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `Vec<isize>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut pile_size = n;\n\
    \    if n & 1 != 0 {\n        pile.push(n / 2);\n        pile_size -= pile.len()\
    \ as isize;\n    }\n    for _ in 0..(n * 2 - 1) {\n        let mut next = if pile_size\
    \ & 1 != 0 {\n            pile.pop().unwrap() * 2 + pile.pop().unwrap()\n    \
    \    } else {\n            pile.pop().unwrap()\n        };\n        if pile.pop().unwrap()\
    \ > 0 {\n            next += 1;\n        }\n        pile.push(next);\n       \
    \ pile_size -= next;\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmplmgfnfu2.rs:24:23\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut answer = vec![0; n + 1];\n    if n % 2 == 0 {\n\
    \        answer[n/2] += 1;\n    }\n    for i in 2..=n+1 {\n        if i % 2 ==\
    \ 0 {\n            answer[i/2] += 1;\n        }\n    }\n    answer\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphicb6rkc.rs:12:30\n   |\n\
    12 |     let mut answer = vec![0; n + 1];\n   |                              ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ answer = vec![0; (n + 1).try_into().unwrap()];\n   |                       \
    \       +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmphicb6rkc.rs:14:9\n   |\n14 |         answer[n/2]\
    \ += 1;\n   |         ^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmphicb6rkc.rs:18:13\n   |\n18 |             answer[i/2]\
    \ += 1;\n   |             ^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile =\n        Vec::with_capacity(n + std::cmp::min(n\
    \ + 2, std::i32::MAX as usize));\n\n    for _ in 0..n {\n        pile += vec![n\
    \ - 1, n - 2];\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy1bg9zes.rs:13:53\n   |\n\
    13 |         Vec::with_capacity(n + std::cmp::min(n + 2, std::i32::MAX as usize));\n\
    \   |                                                     ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n13 |         Vec::with_capacity(n\
    \ + std::cmp::min(n + 2, (std::i32::MAX as usize).try_into().unwrap()));\n   |\
    \                                                     +                      +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpy1bg9zes.rs:13:28\n   |\n13 |\
    \         Vec::with_capacity(n + std::cmp::min(n + 2, std::i32::MAX as usize));\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n13 |         Vec::with_capacity((n\
    \ + std::cmp::min(n + 2, std::i32::MAX as usize)).try_into().unwrap());\n   |\
    \                            +                                               \
    \ +++++++++++++++++++++\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `Vec<_>`\n  --> /tmp/tmpy1bg9zes.rs:16:9\n   |\n16 |    \
    \     pile += vec![n - 1, n - 2];\n   |         ----^^^^^^^^^^^^^^^^^^^^^^\n \
    \  |         |\n   |         cannot use `+=` on type `Vec<_>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![0; n];\n    for _ in 0..n {\n   \
    \     stones.push((stones.len() % 2 == 0) + (stones.len() % 2 == 1) * 2);\n  \
    \  }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnrws7g8f.rs:12:30\n   |\n\
    12 |     let mut stones = vec![0; n];\n   |                              ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut stones\
    \ = vec![0; n.try_into().unwrap()];\n   |                               ++++++++++++++++++++\n\
    \nerror[E0369]: cannot multiply `bool` by `{integer}`\n  --> /tmp/tmpnrws7g8f.rs:14:71\n\
    \   |\n14 |         stones.push((stones.len() % 2 == 0) + (stones.len() % 2 ==\
    \ 1) * 2);\n   |                                               -----------------------\
    \ ^ - {integer}\n   |                                               |\n   |  \
    \                                             bool\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut num_stones = Vec::new();\n    for _ in 0..n {\n\
    \        num_stones.push(1);\n    }\n    num_stones.push(1);\n    num_stones.push(*std::cmp::min(n\
    \ - 1, n * 2));\n    num_stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp3phlw8l1.rs:17:21\n\
    \   |\n17 |     num_stones.push(*std::cmp::min(n - 1, n * 2));\n   |         \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n <= 0 {\n        return vec![];\n    }\n\n    let mut\
    \ ret = vec![n as isize];\n\n    let mut odd_pile = false;\n    let mut even_pile\
    \ = false;\n\n    // add odd stones\n    while n > 0 {\n        if n % 2 == 1\
    \ {\n            ret.push(n % 2 as isize);\n            n /= 2;\n        } else\
    \ {\n            odd_pile = true;\n            n /= 2;\n        }\n    }\n\n \
    \   // add even stones\n    while n > 0 {\n        if n % 2 == 0 {\n         \
    \   ret.push(n % 2 as isize);\n            n /= 2;\n        } else {\n       \
    \     even_pile = true;\n            n /= 2;\n        }\n    }\n\n    if odd_pile\
    \ {\n        ret.push(n as isize);\n    }\n\n    if even_pile {\n        ret.push(n\
    \ as isize);\n    }\n\n    ret\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpseky0q6p.rs:25:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n25 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmpseky0q6p.rs:28:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n28 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmpseky0q6p.rs:36:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n36 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmpseky0q6p.rs:39:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n39 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 1 {\n        return vec![];\n    }\n\n    let mut\
    \ pile = vec![];\n    pile.push(n - 1);\n    for i in 1..n / 2 {\n        if n\
    \ % 2 == 0 {\n            pile.push(2 * n - i);\n        }\n        else {\n \
    \           pile.push(i);\n        }\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[3, 5, 7]`', /tmp/tmp_vc_0kvl.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
