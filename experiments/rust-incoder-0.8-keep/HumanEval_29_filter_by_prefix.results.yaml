name: HumanEval_29_filter_by_prefix
language: rust
results:
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = Vec::new();\n    for string in strings.iter() {\n        if string.starts_with(prefix)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpmnj4hz15.rs:9:31\n     |\n9    |         if string.starts_with(prefix)\
    \ {\n     |                   ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if\
    \ string.starts_with(&prefix) {\n     |                               +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmnj4hz15.rs:13:5\n   |\n6  | fn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n   |                        \
    \                                      ----------- expected `Vec<String>` because\
    \ of return type\n...\n13 |     filtered_strings\n   |     ^^^^^^^^^^^^^^^^ expected\
    \ struct `String`, found `&String`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&String>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut output = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(prefix) {\n            output.push(s);\n\
    \        }\n    }\n    output\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6s3kmm_b.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() {\n\
    \        return vec![];\n    }\n    if strings.len() < 2 {\n        return strings;\n\
    \    }\n    if prefix.len() < 2 {\n        return vec![];\n    }\n\n    // TODO:\
    \ use a hash table to map prefix to index (maybe use String::contains)\n    let\
    \ mut prefix = prefix.to_lowercase();\n    let mut strings = strings.into_iter().map(|s|\
    \ s.to_lowercase());\n    let mut result = vec![];\n    for (i, s) in strings.into_iter().enumerate()\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp3iivtm8z.rs:22:26\n     |\n22   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n22   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let prefix_len = prefix.len();\n\
    \    let len = strings.len();\n    if len == 0 || strings[0].is_empty() {\n  \
    \      return Vec::new();\n    }\n    let mut result = Vec::new();\n    let mut\
    \ cur = strings.iter().next().unwrap();\n    while !cur.ends_with(&prefix) {\n\
    \        let cur = cur.clone();\n        result.push(cur);\n        cur = strings.iter().next().unwrap();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9t5nqw0p.rs:17:15\n   |\n\
    15 |         let cur = cur.clone();\n   |                   ----------- expected\
    \ due to this value\n16 |         result.push(cur);\n17 |         cur = strings.iter().next().unwrap();\n\
    \   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |               |\n   |               expected struct\
    \ `String`, found `&String`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| {\n            if s.starts_with(prefix) {\n         \
    \       Some(s)\n            } else {\n                None\n            }\n \
    \       })\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp4l6s9bmv.rs:10:30\n     |\n10   |             if s.starts_with(prefix)\
    \ {\n     |                  ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n10   |          \
    \   if s.starts_with(&prefix) {\n     |                              +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmp4l6s9bmv.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut strings_copy = strings.clone();\n\
    \    strings_copy.sort_by_key(|s| s.len() as i32);\n    strings_copy.dedup();\n\
    \    for s in strings_copy {\n        if s.starts_with(prefix) {\n           \
    \ strings.remove(s);\n        }\n    }\n    strings\n}\n\nfn main() {\n    let\
    \ candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpecw3keen.rs:11:26\n     |\n11   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n11   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpecw3keen.rs:12:28\n   |\n12 |             strings.remove(s);\n   | \
    \                           ^ expected `usize`, found struct `String`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() {\n\
    \        return vec![];\n    }\n\n    if prefix.is_empty() {\n        return strings;\n\
    \    }\n\n    if strings[0].is_empty() {\n        return strings;\n    }\n\n \
    \   let mut string_iter = strings.iter().skip(1);\n    let mut prefix_iter = prefix.chars().skip(1);\n\
    \n    if prefix_iter.any() {\n        string_iter.for_each(|s| {\n           \
    \ if s.starts_with(prefix) {\n                string_iter.next();\n          \
    \      true\n            } else {\n                false\n            }\n    \
    \    });\n    } else {\n        string_iter.filter(|s| s.starts_with(prefix));\n\
    \    }\n\n    string_iter.collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpwpa6o_ts.rs:22:20\n     |\n22   |     if prefix_iter.any() {\n\
    \     |                    ^^^- supplied 0 arguments\n     |                 \
    \   |\n     |                    expected 1 argument\n     |\nnote: associated\
    \ function defined here\n\nerror[E0277]: expected a `FnMut<(char,)>` closure,\
    \ found `String`\n    --> /tmp/tmpwpa6o_ts.rs:24:30\n     |\n24   |          \
    \   if s.starts_with(prefix) {\n     |                  ----------- ^^^^^^ expected\
    \ an implementor of trait `Pattern<'_>`\n     |                  |\n     |   \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n24   |             if s.starts_with(&prefix) {\n   \
    \  |                              +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwpa6o_ts.rs:26:17\n\
    \   |\n24 | /             if s.starts_with(prefix) {\n25 | |                 string_iter.next();\n\
    26 | |                 true\n   | |                 ^^^^ expected `()`, found\
    \ `bool`\n27 | |             } else {\n28 | |                 false\n29 | |  \
    \           }\n   | |_____________- expected this to be `()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwpa6o_ts.rs:28:17\n   |\n24 | /            \
    \ if s.starts_with(prefix) {\n25 | |                 string_iter.next();\n26 |\
    \ |                 true\n27 | |             } else {\n28 | |                \
    \ false\n   | |                 ^^^^^ expected `()`, found `bool`\n29 | |    \
    \         }\n   | |_____________- expected this to be `()`\n\nerror[E0277]: expected\
    \ a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpwpa6o_ts.rs:32:46\n\
    \     |\n32   |         string_iter.filter(|s| s.starts_with(prefix));\n     |\
    \                                  ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                  "
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            filtered_strings.push(s);\n        }\n    }\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpdst6ukdy.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpfe2pf4p3.rs:9:30\n     |\n9    |             if s.starts_with(prefix)\
    \ {\n     |                  ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |          \
    \   if s.starts_with(&prefix) {\n     |                              +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpfe2pf4p3.rs:15:10\n     |\n15   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut filtered = Vec::new();\n\
    \    for s in strings.iter() {\n        if s.starts_with(prefix) {\n         \
    \   filtered.push(s);\n        }\n    }\n    filtered\n}\n\nfn main() {\n    let\
    \ candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpfcpqsvbf.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpfcpqsvbf.rs:13:5\n   |\n6  | fn filter_by_prefix(strings: Vec<String>,\
    \ prefix: String) -> Vec<String> {\n   |                                     \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n13 |     filtered\n   |     ^^^^^^^^ expected struct `String`, found\
    \ `&String`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&String>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut prefixed: Vec<String>\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            prefixed.push(s);\n        }\n    }\n    prefixed\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppkjpolk_.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmprr7lltdy.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmprr7lltdy.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() {\n\
    \        return Vec::new();\n    }\n\n    let mut prefix_len = prefix.len();\n\
    \    let mut prefix_is_prefix = false;\n    let mut prefix_index = -1;\n\n   \
    \ for &s in strings {\n        match s.len() {\n            // The prefix itself\
    \ is always included in the filtered list.\n            0 => {}\n            //\
    \ The prefix may only match the beginning of a string.\n            prefix_len\
    \ if prefix_is_prefix => {}\n            // A match may be found at the first\
    \ letter of the string.\n            0 => if s[prefix_index] == prefix {\n   \
    \             prefix_is_prefix = true;\n                prefix_index = -1;\n \
    \           }\n            // A match may be found anywhere in the string.\n \
    \           len => {\n                prefix_index += len;\n                if\
    \ prefix_index >= prefix_len {\n                    prefix_index = -1;\n     \
    \           }\n            }\n        }\n    }\n\n    strings\n        .into_iter()\n\
    \        .filter(|&s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm99sw8xl.rs:15:9\n   |\n\
    15 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0600]: cannot apply unary operator `-` to type `usize`\n  --> /tmp/tmpm99sw8xl.rs:30:36\n\
    \   |\n30 |                     prefix_index = -1;\n   |                     \
    \               ^^\n   |                                    |\n   |          \
    \                          cannot apply unary operator `-`\n   |             \
    \                       help: you may have meant the maximum value of `usize`:\
    \ `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpm99sw8xl.rs:13:28\n\
    \   |\n13 |     let mut prefix_index = -1;\n   |                            ^^\
    \ the trait `Neg` is not implemented for `usize`\n   |\n   = help: the following\
    \ other types implement trait `Neg`:\n             &f32\n             &f64\n \
    \            &i128\n             &i16\n             &i32\n             &i64\n\
    \             &i8\n             &isize\n           and 8 others\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpm99sw8xl.rs:24:32\n\
    \   |\n24 |                 prefix_index = -1;\n   |                         \
    \       ^^ the trait `Neg` is not implemented for `usize`\n   |\n   = help: the\
    \ following other types implement trait `Neg`:\n             &f32\n          \
    \   &f64\n             &i128\n             &i16\n             &i32\n         \
    \    &i64\n             &i8\n             &isize\n           and 8 others\n\n\
    error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpm99sw8xl.rs:38:36\n\
    \     |\n38   |         .filter(|&s| s.starts_with(prefix))\n     |          \
    \              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |                        |\n     |          "
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let prefix_len = prefix.len();\n\
    \    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n  \
    \      .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpdv2_rrcn.rs:10:35\n     |\n10   |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n10   |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpdv2_rrcn.rs:11:10\n\
    \     |\n11   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpzx45j2i2.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpe8xqdvs0.rs:8:39\n     |\n8    |         .filter_map(|s| s.starts_with(prefix))\n\
    \     |                           ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n8    |         .filter_map(|s| s.starts_with(&prefix))\n\
    \     |                                       +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpe8xqdvs0.rs:8:25\n  |\n8 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n8 |         .filter_map(|s|\
    \ Some(s.starts_with(prefix)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.chars().any(|c| c.is_ascii_lowercase()) && s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpaesf1dzp.rs:9:84\n     |\n9    |         .filter_map(|s| s.chars().any(|c|\
    \ c.is_ascii_lowercase()) && s.starts_with(prefix))\n     |                  \
    \                                                      ----------- ^^^^^^ expected\
    \ an implementor of trait `Pattern<'_>`\n     |                              \
    \                                          |\n     |                         \
    \                                               required by a bound introduced\
    \ by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is\
    \ not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         .filter_map(|s|\
    \ s.chars().any(|c| c.is_ascii_lowercase()) && s.starts_with(&prefix))\n     |\
    \                                                                            \
    \        +\n\nerror[E0308]: mismatched types\n --> /tmp/tmpaesf1dzp.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.chars().any(|c| c.is_ascii_lowercase()) &&\
    \ s.starts_with(prefix))\n  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n9 |         .filter_map(|s| Some(s.chars().any(|c| c.is_ascii_lowercase())\
    \ && s.starts_with(prefix)))\n  |                         +++++              \
    \                                                    +\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppvyd21vj.rs:7:45\n     |\n7    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmppvyd21vj.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp9o7rxz24.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmp9o7rxz24.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let prefix_len = prefix.len();\n\
    \    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n  \
    \      .collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpbe3yxpi2.rs:10:35\n     |\n10   |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n10   |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbe3yxpi2.rs:8:5\n\
    \   |\n6  |   fn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n   |                                                                -----------\
    \ expected `Vec<String>` because of return type\n7  |       let prefix_len = prefix.len();\n\
    8  | /     strings\n9  | |         .iter()\n10 | |         .filter(|s| s.starts_with(prefix))\n\
    11 | |         .collect::<Vec<_>>()\n   | |____________________________^ expected\
    \ struct `String`, found `&String`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&String>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|string| string.starts_with(prefix))\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpfr7qznu9.rs:9:45\n     |\n9    |         .filter(|string| string.starts_with(prefix))\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.starts_with(&prefix))\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmpfr7qznu9.rs:10:10\n     |\n10   |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut filtered = Vec::new();\n\
    \    let mut i = 0;\n    while i < strings.len() {\n        let s = &strings[i];\n\
    \        if s.starts_with(prefix) {\n            i += prefix.len() as i32;\n \
    \           filtered.push(s);\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpy5hfxei6.rs:11:26\n     |\n11   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n11   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpy5hfxei6.rs:12:18\n   |\n12 |             i += prefix.len() as i32;\n\
    \   |                  ^^^^^^^^^^^^^^^^^^^ expected `usize`, found `i32`\n\nerror[E0277]:\
    \ cannot add-assign `i32` to `usize`\n  --> /tmp/tmpy5hfxei6.rs:12:15\n   |\n\
    12 |             i += prefix.len() as i32;\n   |               ^^ no implementation\
    \ for `usize += i32`\n   |\n   = help: the trait `AddAssign<i32>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5hfxei6.rs:18:5\n\
    \   |\n6  | fn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n   |                                                              -----------\
    \ expected `Vec<String>` because of return type\n...\n18 |     filtered\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&String`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&String>`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more inform"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp4l24ly9h.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmp4l24ly9h.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for str in strings {\n        if str.starts_with(prefix) {\n            result.push(str);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp3_rmp2dn.rs:9:28\n     |\n9    |         if str.starts_with(prefix)\
    \ {\n     |                ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                |\n     |                required by a\
    \ bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if\
    \ str.starts_with(&prefix) {\n     |                            +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.starts_with(prefix))\n        .collect::<Vec<String>>()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpnhgv1n7j.rs:9:39\n     |\n9    |         .filter_map(|s| s.starts_with(prefix))\n\
    \     |                           ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n9    |         .filter_map(|s| s.starts_with(&prefix))\n\
    \     |                                       +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpnhgv1n7j.rs:9:25\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.starts_with(prefix)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let prefix_len = prefix.len();\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpt8an9ep1.rs:8:45\n     |\n8    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n8    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmpt8an9ep1.rs:8:54\n     |\n8    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() {\n\
    \        strings\n    } else {\n        let prefix_len = prefix.len();\n     \
    \   let first = strings[0];\n        let mut index = prefix_len;\n        let\
    \ mut found = false;\n        let mut result = Vec::new();\n        for s in strings\
    \ {\n            if index == prefix_len {\n                if found {\n      \
    \              result.push(s);\n                }\n            } else {\n    \
    \            if s.starts_with(prefix)[index..].is_empty() {\n                \
    \    result.push(s);\n                }\n            }\n            index = s.len()\
    \ - 1;\n            if index == 0 && !found {\n                found = true;\n\
    \            }\n        }\n        result\n    }\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpd50pvkti.rs:21:34\n     |\n21   |                 if s.starts_with(prefix)[index..].is_empty()\
    \ {\n     |                      ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                      |\n     |                 \
    \     required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n21   |                 if s.starts_with(&prefix)[index..].is_empty()\
    \ {\n     |                                  +\n\nerror[E0608]: cannot index into\
    \ a value of type `bool`\n  --> /tmp/tmpd50pvkti.rs:21:20\n   |\n21 |        \
    \         if s.starts_with(prefix)[index..].is_empty() {\n   |               \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpv55u74fm.rs:9:39\n     |\n9    |         .filter_map(|s| s.starts_with(prefix))\n\
    \     |                           ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n9    |         .filter_map(|s| s.starts_with(&prefix))\n\
    \     |                                       +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpv55u74fm.rs:9:25\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.starts_with(prefix)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n \
    \       .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpj_3pdhde.rs:9:51\n     |\n9    |         .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \     |                                          -------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         .filter_map(|s|\
    \ s.to_lowercase().contains(&prefix.to_lowercase()))\n     |                 \
    \                                  +\n\nerror[E0308]: mismatched types\n --> /tmp/tmpj_3pdhde.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n9 |         .filter_map(|s| Some(s.to_lowercase().contains(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \     +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut res = String::new();\n\
    \    for s in strings {\n        if s.starts_with(prefix) {\n            res.extend(s);\n\
    \        }\n    }\n    res.into_owned()\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpesj1lj3_.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0277]: `String` is not an iterator\n\
    \   --> /tmp/tmpesj1lj3_.rs:10:24\n    |\n10  |             res.extend(s);\n \
    \   |                 ------ ^ `String` is not an iterator; try calling `.chars()`\
    \ or `.bytes()`\n    |                 |\n    |                 required by a\
    \ bound introduced by this call\n    |\n    = help: the trait `Iterator` is not\
    \ implemented for `String`\n    = note: required because of the requirements on\
    \ the impl of `IntoIterator` for `String`\nnote: required by a bound in `extend`\n\
    \nerror[E0599]: no method named `into_owned` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpesj1lj3_.rs:13:9\n   |\n13 |     res.into_owned()\n\
    \   |         ^^^^^^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() {\n\
    \        return strings;\n    }\n    let mut result = Vec::with_capacity(strings.len());\n\
    \    let mut prefix_iter = prefix.chars().peekable();\n    for i in strings.len()\
    \ {\n        let j = prefix_iter.peek().unwrap().unwrap();\n        if i >= prefix.len()\
    \ || prefix_iter.peek().is_none() {\n            result.push(strings[i]);\n  \
    \      }\n        if j != prefix[i] {\n            prefix_iter.next();\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: `usize` is not an iterator\n  --> /tmp/tmpx9inv2qf.rs:12:14\n\
    \   |\n12 |     for i in strings.len() {\n   |              ^^^^^^^^^^^^^ `usize`\
    \ is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `usize`\n   = note: if you want to iterate between `start` until a value\
    \ `end`, use the exclusive range syntax `start..end` or the inclusive range syntax\
    \ `start..=end`\n   = note: required because of the requirements on the impl of\
    \ `IntoIterator` for `usize`\n\nerror[E0599]: no method named `unwrap` found for\
    \ reference `&char` in the current scope\n  --> /tmp/tmpx9inv2qf.rs:13:45\n  \
    \ |\n13 |         let j = prefix_iter.peek().unwrap().unwrap();\n   |        \
    \                                     ^^^^^^ method not found in `&char`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() {\n\
    \        return strings;\n    }\n\n    if strings.len() <= prefix.len() {\n  \
    \      return strings;\n    }\n\n    let mut out = vec![];\n    for i in 0..strings.len()\
    \ {\n        if strings.starts_with(prefix.to_string(), i) {\n            out.push(strings[i]);\n\
    \        }\n    }\n\n    out\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmptuv511zn.rs:17:20\n     |\n17   |         if strings.starts_with(prefix.to_string(),\
    \ i) {\n     |                    ^^^^^^^^^^^ ------------------  - supplied 2\
    \ arguments\n     |                    |\n     |                    expected 1\
    \ argument\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut strings = strings.clone();\n\
    \    strings.sort_unstable();\n    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .cloned()\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpzm5rru7_.rs:11:35\n     |\n11   |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n11   |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0271]: type mismatch resolving `<Filter<std::vec::IntoIter<String>,\
    \ [closure@/tmp/tmpzm5rru7_.rs:11:17: 11:42]> as Iterator>::Item == &_`\n    -->\
    \ /tmp/tmpzm5rru7_.rs:12:10\n     |\n12   |         .cloned()\n     |        \
    \  ^^^^^^ expected reference, found struct `String`\n     |\n     = note: expected\
    \ reference `&_`\n                   found struct `String`\nnote: required by\
    \ a bound in `cloned`\n\nerror[E0599]: the method `collect` exists for struct\
    \ `Cloned<Filter<std::vec::IntoIter<String>, [closure@/tmp/tmpzm5rru7_.rs:11:17:\
    \ 11:42]>>`, but its trait bounds were not satisfied\n  --> /tmp/tmpzm5rru7_.rs:13:10\n\
    \   |\n13 |            .collect()\n   |             ^^^^^^^ method cannot be called\
    \ on `Cloned<Filter<std::vec::IntoIter<String>, [closure@/tmp/tmpzm5rru7_.rs:11:17:\
    \ 11:42]>>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<Filter<std::vec::IntoIter<String>,\
    \ [closure@/tmp/tmpzm5rru7_.rs:11:17: 11:42]> as Iterator>::Item = &_`\n     \
    \      which is required by `Cloned<Filter<std::vec::IntoIter<String>, [closure@/tmp/tmpzm5rru7_.rs:11:17:\
    \ 11:42]>>: Iterator`\n           `Cloned<Filter<std::vec::IntoIter<String>, [closure@/tmp/tmpzm5rru7_.rs:11:17:\
    \ 11:42]>>: Iterator`\n           which is required by `&mut Cloned<Filter<std::vec::IntoIter<String>,\
    \ [closu"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for s in strings.iter() {\n        if s.starts_with(prefix) {\n         \
    \   result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpg69xsisx.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpg69xsisx.rs:13:5\n   |\n6  | fn filter_by_prefix(strings: Vec<String>,\
    \ prefix: String) -> Vec<String> {\n   |                                     \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n13 |     result\n   |     ^^^^^^ expected struct `String`, found\
    \ `&String`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&String>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let prefix_len = prefix.len();\n\
    \    let mut strings = strings.clone();\n    strings.sort_unstable_by_key(|s|\
    \ s.len());\n    loop {\n        let first_occurrence = strings.iter().position(|s|\
    \ s.starts_with(prefix));\n        if first_occurrence == strings::npos {\n  \
    \          break;\n        }\n        strings = strings\n            .iter()\n\
    \            .skip(first_occurrence)\n            .take(prefix_len)\n        \
    \    .collect();\n    }\n    strings\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `strings`\n\
    \  --> /tmp/tmpf9xnhl3b.rs:12:32\n   |\n12 |         if first_occurrence == strings::npos\
    \ {\n   |                                ^^^^^^^ use of undeclared crate or module\
    \ `strings`\n\nerror[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n\
    \    --> /tmp/tmpf9xnhl3b.rs:11:74\n     |\n11   |         let first_occurrence\
    \ = strings.iter().position(|s| s.starts_with(prefix));\n     |              \
    \                                                ----------- ^^^^^^ expected an\
    \ implementor of trait `Pattern<'_>`\n     |                                 \
    \                             |\n     |                                      \
    \                        required by a bound introduced by this call\n     |\n\
    \     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    note: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n11   |         let first_occurrence = strings.iter().position(|s|\
    \ s.starts_with(&prefix));\n     |                                           \
    \                               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf9xnhl3b.rs:17:19\n\
    \   |\n17 |             .skip(first_occurrence)\n   |                   ^^^^^^^^^^^^^^^^\
    \ expected `usize`, found enum `Option`\n   |\n   = note: expected type `usize`\n\
    \              found enum `Option<usize>`\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf9xnhl3b.rs:19:14\n\
    \     |\n19   |             .collect();\n     |              ^^^^^^^ value of\
    \ type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explana"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let len = prefix.len();\n\
    \    strings\n        .iter()\n        .filter(|s| s.len() >= len)\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpgl3jx14b.rs:11:35\n     |\n11   |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n11   |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpgl3jx14b.rs:12:10\n\
    \     |\n12   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() {\n\
    \        return strings\n    }\n    if prefix.is_empty() {\n        return strings\n\
    \    }\n    strings.iter().filter(|s| s.starts_with(prefix)).collect()\n}\n\n\
    fn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp7ncqpy1e.rs:13:45\n     |\n13   |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                 -----------\
    \ ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              \
    \                   |\n     |                                 required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n13   |     strings.iter().filter(|s|\
    \ s.starts_with(&prefix)).collect()\n     |                                  \
    \           +\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n    --> /tmp/tmp7ncqpy1e.rs:13:54\n\
    \     |\n13   |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                                      ^^^^^^^ value of\
    \ type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut output = Vec::new();\n\
    \    let mut input = strings.to_vec();\n\n    while let Some(index) = input.iter().position(|&s|\
    \ s.starts_with(prefix)) {\n        output.push(input.remove(0));\n    }\n\n \
    \   output\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpiu8ekbcr.rs:10:70\n     |\n10   |     while let Some(index) = input.iter().position(|&s|\
    \ s.starts_with(prefix)) {\n     |                                           \
    \               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |                                                          |\n     |   \
    \                                                       required by a bound introduced\
    \ by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is\
    \ not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n10   |     while\
    \ let Some(index) = input.iter().position(|&s| s.starts_with(&prefix)) {\n   \
    \  |                                                                      +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpi9macu2w.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpi9macu2w.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|&s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpzos8u111.rs:9:36\n     |\n9    |         .filter(|&s| s.starts_with(prefix))\n\
    \     |                        ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                        |\n     |                     \
    \   required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|&s| s.starts_with(&prefix))\n     |  \
    \                                  +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter_map(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp1o3bceos.rs:9:39\n     |\n9    |         .filter_map(|s| s.starts_with(prefix))\n\
    \     |                           ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n9    |         .filter_map(|s| s.starts_with(&prefix))\n\
    \     |                                       +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp1o3bceos.rs:9:25\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.starts_with(prefix)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpug0hekw3.rs:7:45\n     |\n7    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmpug0hekw3.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.chars().filter(|c| c.is_alphabetic()).take(prefix.len()).collect())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Option<_>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmp1d8hy6d1.rs:9:84\n     |\n9  \
    \  |         .filter_map(|s| s.chars().filter(|c| c.is_alphabetic()).take(prefix.len()).collect())\n\
    \     |                                                                      \
    \              ^^^^^^^ value of type `Option<_>` cannot be built from `std::iter::Iterator<Item=char>`\n\
    \     |\n     = help: the trait `FromIterator<char>` is not implemented for `Option<_>`\n\
    \     = help: the trait `FromIterator<Option<A>>` is implemented for `Option<V>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut result: Vec<String>\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpx5z9_vu4.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let prefix_len = prefix.len();\n\
    \    strings\n        .iter()\n        .filter_map(|s| s.len() as i32 + prefix_len)\n\
    \        .filter(|n| n > 0)\n        .filter(|n| s.starts_with(prefix))\n    \
    \    .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n   \
    \ assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `s` in this scope\n  --> /tmp/tmp4d3l1kon.rs:12:21\n\
    \   |\n12 |         .filter(|n| s.starts_with(prefix))\n   |                 \
    \    ^ help: a local variable with a similar name exists: `n`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4d3l1kon.rs:10:42\n   |\n10 |         .filter_map(|s|\
    \ s.len() as i32 + prefix_len)\n   |                                         \
    \ ^^^^^^^^^^ expected `i32`, found `usize`\n\nerror[E0277]: cannot add `usize`\
    \ to `i32`\n  --> /tmp/tmp4d3l1kon.rs:10:40\n   |\n10 |         .filter_map(|s|\
    \ s.len() as i32 + prefix_len)\n   |                                        ^\
    \ no implementation for `i32 + usize`\n   |\n   = help: the trait `Add<usize>`\
    \ is not implemented for `i32`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4d3l1kon.rs:10:25\n\
    \   |\n10 |         .filter_map(|s| s.len() as i32 + prefix_len)\n   |       \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found `i32`\n\
    \   |\n   = note: expected enum `Option<_>`\n              found type `i32`\n\
    help: try wrapping the expression in `Some`\n   |\n10 |         .filter_map(|s|\
    \ Some(s.len() as i32 + prefix_len))\n   |                         +++++     \
    \                      +\n\nerror[E0277]: can't compare `&_` with `{integer}`\n\
    \  --> /tmp/tmp4d3l1kon.rs:11:23\n   |\n11 |         .filter(|n| n > 0)\n   |\
    \                       ^ no implementation for `&_ < {integer}` and `&_ > {integer}`\n\
    \   |\n   = help: the trait `PartialOrd<{integer}>` is not implemented for `&_`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0425.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp55_7htu8.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmp55_7htu8.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let prefix_len = prefix.len();\n\
    \    strings\n        .into_iter()\n        .filter_map(|str| {\n            str.starts_with(&prefix[..prefix_len])\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7rqftlde.rs:11:13\n   |\n\
    11 |             str.starts_with(&prefix[..prefix_len])\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n   |\n   = note: expected enum `Option<_>`\n\
    \              found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n11 |             Some(str.starts_with(&prefix[..prefix_len]))\n   |   \
    \          +++++                                      +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = Vec::new();\n    for str in strings.iter() {\n        if str.starts_with(prefix)\
    \ {\n            filtered_strings.push(str);\n        }\n    }\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp0u2fn4pz.rs:9:28\n     |\n9    |         if str.starts_with(prefix)\
    \ {\n     |                ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                |\n     |                required by a\
    \ bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if\
    \ str.starts_with(&prefix) {\n     |                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0u2fn4pz.rs:13:5\n   |\n6  | fn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n   |                        \
    \                                      ----------- expected `Vec<String>` because\
    \ of return type\n...\n13 |     filtered_strings\n   |     ^^^^^^^^^^^^^^^^ expected\
    \ struct `String`, found `&String`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&String>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.to_lowercase())\n        .filter(|s| s.starts_with(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_6hteys6.rs:9:25\n  |\n9 |\
    \         .filter_map(|s| s.to_lowercase())\n  |                         ^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum\
    \ `Option<_>`\n           found struct `String`\nhelp: try wrapping the expression\
    \ in `Some`\n  |\n9 |         .filter_map(|s| Some(s.to_lowercase()))\n  |   \
    \                      +++++                +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let prefix_len = prefix.len();\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp1nv0q5sm.rs:8:45\n     |\n8    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n8    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmp1nv0q5sm.rs:8:54\n     |\n8    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|string| string.starts_with(prefix))\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpzo0_ser3.rs:9:45\n     |\n9    |         .filter(|string| string.starts_with(prefix))\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.starts_with(&prefix))\n\
    \     |                                             +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut strings = strings.clone();\n\
    \    for (i, s) in strings.iter().enumerate() {\n        if s.starts_with(prefix)\
    \ {\n            strings.remove(&s[i]);\n        }\n    }\n    strings\n}\n\n\
    fn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpi9defmn0.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0277]: the type `String` cannot\
    \ be indexed by `usize`\n  --> /tmp/tmpi9defmn0.rs:10:29\n   |\n10 |         \
    \    strings.remove(&s[i]);\n   |                             ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi9defmn0.rs:10:28\n\
    \   |\n10 |             strings.remove(&s[i]);\n   |                         \
    \   ^^^^^ expected `usize`, found reference\n   |\n   = note:   expected type\
    \ `usize`\n           found reference `&_`\nhelp: consider removing the borrow\n\
    \   |\n10 -             strings.remove(&s[i]);\n10 +             strings.remove(s[i]);\n\
    \   | \n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut results = Vec::with_capacity(strings.len());\n\
    \n    for s in strings {\n        if s.starts_with(prefix) {\n            results.push(s);\n\
    \        }\n    }\n\n    results\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp17plv25k.rs:10:26\n     |\n10   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n10   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut iter = strings.into_iter();\n\
    \    iter.for_each(|str| {\n        if str.starts_with(prefix) {\n           \
    \ iter.next();\n        }\n    });\n    let mut result: Vec<String> = vec![];\n\
    \    iter.collect::<Vec<_>>().reverse().into_iter().for_each(|str| {\n       \
    \ result.push(str);\n    });\n    result\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxq9j0w7z.rs:9:28\n     |\n9    |         if str.starts_with(prefix)\
    \ {\n     |                ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                |\n     |                required by a\
    \ bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if\
    \ str.starts_with(&prefix) {\n     |                            +\n\nerror[E0599]:\
    \ `()` is not an iterator\n  --> /tmp/tmpxq9j0w7z.rs:14:40\n   |\n14 |     iter.collect::<Vec<_>>().reverse().into_iter().for_each(|str|\
    \ {\n   |                                        ^^^^^^^^^ `()` is not an iterator\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `():\
    \ Iterator`\n           which is required by `(): IntoIterator`\n           `&():\
    \ Iterator`\n           which is required by `&(): IntoIterator`\n           `&mut\
    \ (): Iterator`\n           which is required by `&mut (): IntoIterator`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpnp0jgtu_.rs:7:50\n     |\n7    |     strings.into_iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \   ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |\
    \                                      |\n     |                             \
    \         required by a bound introduced by this call\n     |\n     = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n7    |     strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                                  +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut strings = strings.into_iter();\n\
    \    strings.filter_map(|&str| {\n        if str.starts_with(prefix) {\n     \
    \       Some(str)\n        } else {\n            None\n        }\n    })\n   \
    \ .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprbxf0x41.rs:8:25\n  |\n8 |\
    \     strings.filter_map(|&str| {\n  |                         ^----\n  |    \
    \                     ||\n  |                         |expected due to this\n\
    \  |                         expected struct `String`, found reference\n  |  \
    \                       help: did you mean `str`: `&String`\n  |\n  = note: expected\
    \ struct `String`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() {\n\
    \        strings\n    } else {\n        let mut it = strings.iter();\n       \
    \ let mut prefix = prefix.to_string();\n        let mut has_prefix = false;\n\
    \        loop {\n            let mut next = it.next();\n            if let Some(next)\
    \ = next {\n                if next.starts_with(prefix) {\n                  \
    \  has_prefix = true;\n                    break;\n                }\n       \
    \     }\n            if !has_prefix {\n                break;\n            }\n\
    \        }\n        if !has_prefix {\n            strings\n        } else {\n\
    \            let mut filtered_strings = Vec::new();\n            for s in strings\
    \ {\n                if s.starts_with(prefix) {\n                    filtered_strings.push(*s);\n\
    \                }\n            }\n            filtered_strings\n        }\n \
    \   }\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmps3x3r0ik.rs:16:37\n     |\n16   |                 if next.starts_with(prefix)\
    \ {\n     |                         ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                         |\n     |           \
    \              required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n16   |                 if next.starts_with(&prefix)\
    \ {\n     |                                     +\n\nerror[E0277]: expected a\
    \ `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmps3x3r0ik.rs:30:34\n\
    \     |\n30   |                 if s.starts_with(prefix) {\n     |           \
    \           ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |                      |\n     |                      required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n30   |          \
    \       if s.starts_with(&prefix) {\n     |                                  +\n\
    \nerror[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n   --> /tmp/tmps3x3r0ik.rs:31:43\n    |\n31  |                     filtered_strings.push(*s);\n\
    \    |                                      ---- ^^ doesn't have a size known\
    \ at compile-time\n    |                                      |\n    |       \
    \                               required by a bound introduced by this call\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by a bound in `Vec::<T, A>::push`\n\nerror[E0277]: the size for values of type\
    \ `str` cannot be known at compilation t"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = strings.clone();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            filtered_strings.remove(s);\n        }\n    }\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpnuhfojfl.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpnuhfojfl.rs:10:37\n   |\n10 |             filtered_strings.remove(s);\n\
    \   |                                     ^ expected `usize`, found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() {\n\
    \        return Vec::new();\n    }\n    let mut filtered_strings = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(prefix) {\n            filtered_strings.push(s);\n\
    \        }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpz2an3js9.rs:12:26\n     |\n12   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n12   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n \
    \       .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp3f9ka99s.rs:9:51\n     |\n9    |         .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \     |                                          -------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         .filter_map(|s|\
    \ s.to_lowercase().contains(&prefix.to_lowercase()))\n     |                 \
    \                                  +\n\nerror[E0308]: mismatched types\n --> /tmp/tmp3f9ka99s.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n9 |         .filter_map(|s| Some(s.to_lowercase().contains(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \     +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() {\n\
    \        return vec![];\n    }\n\n    let mut filtered = vec![];\n\n    for s\
    \ in strings.iter() {\n        if !s.starts_with(prefix) {\n            continue;\n\
    \        }\n\n        filtered.push(s);\n    }\n\n    filtered\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpeoyowy7m.rs:14:27\n     |\n14   |         if !s.starts_with(prefix)\
    \ {\n     |               ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |               |\n     |               required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n14   |         if\
    \ !s.starts_with(&prefix) {\n     |                           +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpeoyowy7m.rs:21:5\n   |\n6  | fn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n   |                        \
    \                                      ----------- expected `Vec<String>` because\
    \ of return type\n...\n21 |     filtered\n   |     ^^^^^^^^ expected struct `String`,\
    \ found `&String`\n   |\n   = note: expected struct `Vec<String>`\n          \
    \    found struct `Vec<&String>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut iter = strings.iter().cloned();\n\
    \    let len = prefix.len();\n    iter.for_each(|s| if s.starts_with(prefix) {\
    \ s.drain(len); });\n    iter\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp96hgh6ab.rs:9:40\n     |\n9    |     iter.for_each(|s| if s.starts_with(prefix)\
    \ { s.drain(len); });\n     |                            ----------- ^^^^^^ expected\
    \ an implementor of trait `Pattern<'_>`\n     |                            |\n\
    \     |                            required by a bound introduced by this call\n\
    \     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |     iter.for_each(|s| if s.starts_with(&prefix)\
    \ { s.drain(len); });\n     |                                        +\n\nerror[E0277]:\
    \ the trait bound `usize: RangeBounds<usize>` is not satisfied\n    --> /tmp/tmp96hgh6ab.rs:9:58\n\
    \     |\n9    |     iter.for_each(|s| if s.starts_with(prefix) { s.drain(len);\
    \ });\n     |                                                    ----- ^^^ the\
    \ trait `RangeBounds<usize>` is not implemented for `usize`\n     |          \
    \                                          |\n     |                         \
    \                           required by a bound introduced by this call\n    \
    \ |\n     = help: the following other types implement trait `RangeBounds<T>`:\n\
    \               (Bound<&'a T>, Bound<&'a T>)\n               (Bound<T>, Bound<T>)\n\
    \               RangeFrom<&T>\n               RangeFrom<T>\n               RangeFull\n\
    \               RangeInclusive<&T>\n               RangeInclusive<T>\n       \
    \        RangeTo<&T>\n             and 5 others\nnote: required by a bound in\
    \ `String::drain`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp96hgh6ab.rs:10:5\n\
    \   |\n6  | fn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n   |                                                              -----------\
    \ expected `Vec<String>` because of return type\n...\n10 |     iter\n   |    \
    \ ^^^^ expected struct `Vec`, found struct `Cloned`\n   |\n   = note: expecte"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() {\n\
    \        return vec![];\n    }\n\n    if strings.len() <= prefix.len() {\n   \
    \     return strings;\n    }\n\n    let mut iter = strings.iter().cloned().filter_map(|s|\
    \ {\n        if s.starts_with(prefix) {\n            Some(s)\n        } else {\n\
    \            None\n        }\n    });\n\n    iter\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp5ezc1z6_.rs:16:26\n     |\n16   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n16   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp5ezc1z6_.rs:23:5\n   |\n6  |   fn filter_by_prefix(strings: Vec<String>,\
    \ prefix: String) -> Vec<String> {\n   |                                     \
    \                           ----------- expected `Vec<String>` because of return\
    \ type\n...\n15 |       let mut iter = strings.iter().cloned().filter_map(|s|\
    \ {\n   |  _______________________________________________________-\n16 | |  \
    \       if s.starts_with(prefix) {\n17 | |             Some(s)\n18 | |       \
    \  } else {\n19 | |             None\n20 | |         }\n21 | |     });\n   | |_____-\
    \ the found closure\n22 | \n23 |       iter\n   |       ^^^^ expected struct `Vec`,\
    \ found struct `FilterMap`\n   |\n   = note: expected struct `Vec<String>`\n \
    \             found struct `FilterMap<Cloned<std::slice::Iter<'_, String>>, [closure@/tmp/tmp5ezc1z6_.rs:15:55:\
    \ 21:6]>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|string| string.starts_with(prefix))\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp05160iti.rs:9:45\n     |\n9    |         .filter(|string| string.starts_with(prefix))\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.starts_with(&prefix))\n\
    \     |                                             +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| {\n            if s.starts_with(prefix) {\n         \
    \       Some(s[prefix.len()..])\n            } else {\n                None\n\
    \            }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpb9r6lt0c.rs:10:30\n     |\n10   |             if s.starts_with(prefix)\
    \ {\n     |                  ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n10   |          \
    \   if s.starts_with(&prefix) {\n     |                              +\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmpb9r6lt0c.rs:11:22\n    |\n11  |                 Some(s[prefix.len()..])\n\
    \    |                 ---- ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |                 |\n    |                 required by a bound introduced\
    \ by this call\n    |\n    = help: the trait `Sized` is not implemented for `str`\n\
    note: required by a bound in `Some`\n\nerror[E0277]: the size for values of type\
    \ `str` cannot be known at compilation time\n   --> /tmp/tmpb9r6lt0c.rs:9:10\n\
    \    |\n9   |         .filter_map(|s| {\n    |          ^^^^^^^^^^ doesn't have\
    \ a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented\
    \ for `str`\nnote: required by a bound in `filter_map`\n\nerror[E0277]: the size\
    \ for values of type `str` cannot be known at compilation time\n   --> /tmp/tmpb9r6lt0c.rs:11:17\n\
    \    |\n11  |                 Some(s[prefix.len()..])\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\
    \ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized`\
    \ is not implemented for `str`\nnote: required by a bound in `Option`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmpb9r6lt0c.rs:13:17\n    |\n13  |                 None\n    |        \
    \         ^^^^ doesn't have a size known at compile-ti"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() ||\
    \ prefix.is_empty() {\n        return strings;\n    }\n\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpvm0h06ev.rs:11:45\n     |\n11   |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                 -----------\
    \ ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              \
    \                   |\n     |                                 required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n11   |     strings.iter().filter(|s|\
    \ s.starts_with(&prefix)).collect()\n     |                                  \
    \           +\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n    --> /tmp/tmpvm0h06ev.rs:11:54\n\
    \     |\n11   |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                                      ^^^^^^^ value of\
    \ type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut prefix = prefix.to_owned();\n\
    \    let mut out = Vec::with_capacity(strings.len());\n    for s in strings {\n\
    \        if s.starts_with(prefix) {\n            out.push(s);\n        }\n   \
    \ }\n    out\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmptmdlfa78.rs:10:26\n     |\n10   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n10   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut matches = Vec::with_capacity(strings.len());\n\
    \    for string in strings {\n        if string.starts_with(prefix) {\n      \
    \      matches.push(string);\n        }\n    }\n    matches\n}\n\nfn main() {\n\
    \    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpu406a8ku.rs:9:31\n     |\n9    |         if string.starts_with(prefix)\
    \ {\n     |                   ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if\
    \ string.starts_with(&prefix) {\n     |                               +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() ||\
    \ strings.len() < 2 {\n        return strings;\n    }\n\n    let mut filtered\
    \ = Vec::new();\n    let mut current_prefix = prefix.to_string();\n\n    for s\
    \ in strings.iter() {\n        if s.starts_with(current_prefix) {\n          \
    \  filtered.push(s);\n        } else {\n            current_prefix = current_prefix.chars().next().unwrap();\n\
    \        }\n    }\n\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpa9rr_37s.rs:15:26\n     |\n15   |         if s.starts_with(current_prefix)\
    \ {\n     |              ----------- ^^^^^^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |              |\n     |              required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n15   |         if\
    \ s.starts_with(&current_prefix) {\n     |                          +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpa9rr_37s.rs:18:30\n   |\n12 |     let mut current_prefix\
    \ = prefix.to_string();\n   |                              ------------------\
    \ expected due to this value\n...\n18 |             current_prefix = current_prefix.chars().next().unwrap();\n\
    \   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \      |\n   |                              expected struct `String`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa9rr_37s.rs:22:5\n   |\n6  | fn\
    \ filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  \
    \ |                                                              ----------- expected\
    \ `Vec<String>` because of return type\n...\n22 |     filtered\n   |     ^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<&String>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut indexes = vec![];\n\
    \    let mut len = prefix.len();\n    let mut i = 0;\n    while i < strings.len()\
    \ {\n        if strings[i].starts_with(prefix) {\n            indexes.push(i);\n\
    \            i += len;\n        } else {\n            i += 1;\n        }\n   \
    \ }\n    indexes.drain(..).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpjk3mbvyb.rs:11:35\n     |\n11   |         if strings[i].starts_with(prefix)\
    \ {\n     |                       ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                       |\n     |                \
    \       required by a bound introduced by this call\n     |\n     = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n11   |         if strings[i].starts_with(&prefix) {\n     |  \
    \                                 +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `usize`\n    --> /tmp/tmpjk3mbvyb.rs:18:23\n\
    \     |\n18   |     indexes.drain(..).collect()\n     |                      \
    \ ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=usize>`\n\
    \     |\n     = help: the trait `FromIterator<usize>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = vec![];\n    let mut current_prefix = prefix;\n\n    for string in strings\
    \ {\n        if string.starts_with(current_prefix) {\n            filtered_strings.push(string);\n\
    \        } else {\n            current_prefix = '';\n        }\n    }\n\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error: empty character literal\n  --> /tmp/tmpx146361l.rs:14:31\n   |\n\
    14 |             current_prefix = '';\n   |                               ^ empty\
    \ character literal\n\nerror[E0277]: expected a `FnMut<(char,)>` closure, found\
    \ `String`\n    --> /tmp/tmpx146361l.rs:11:31\n     |\n11   |         if string.starts_with(current_prefix)\
    \ {\n     |                   ----------- ^^^^^^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                   |\n     |                 \
    \  required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n11   |         if string.starts_with(&current_prefix) {\n    \
    \ |                               +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpx_madtz8.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpx_madtz8.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut found_prefix = None;\n\
    \    for s in strings {\n        if s.starts_with(prefix) {\n            found_prefix\
    \ = Some(s);\n            break;\n        }\n    }\n    found_prefix.unwrap_or(strings)\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpv2m7qzgc.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpv2m7qzgc.rs:14:28\n   |\n14 |     found_prefix.unwrap_or(strings)\n\
    \   |                            ^^^^^^^ expected struct `String`, found struct\
    \ `Vec`\n   |\n   = note: expected struct `String`\n              found struct\
    \ `Vec<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv2m7qzgc.rs:14:5\n\
    \   |\n6  | fn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n   |                                                              -----------\
    \ expected `Vec<String>` because of return type\n...\n14 |     found_prefix.unwrap_or(strings)\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found struct\
    \ `String`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() {\n\
    \        return strings;\n    }\n    let mut filtered = Vec::new();\n    for s\
    \ in strings {\n        if s.starts_with(prefix) {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpebbzjiwk.rs:12:26\n     |\n12   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n12   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter_map(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpmbm7f98q.rs:9:39\n     |\n9    |         .filter_map(|s| s.starts_with(prefix))\n\
    \     |                           ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n9    |         .filter_map(|s| s.starts_with(&prefix))\n\
    \     |                                       +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpmbm7f98q.rs:9:25\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.starts_with(prefix)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmplzwp84my.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmplzwp84my.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut new_strings = Vec::new();\n\
    \    let mut iter = strings.iter();\n    iter.for_each(|s| {\n        if !s.starts_with(prefix)\
    \ {\n            new_strings.push(s);\n        }\n    });\n    new_strings\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpltq3p1g_.rs:10:27\n     |\n10   |         if !s.starts_with(prefix)\
    \ {\n     |               ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |               |\n     |               required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n10   |         if\
    \ !s.starts_with(&prefix) {\n     |                           +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpltq3p1g_.rs:14:5\n   |\n6  | fn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n   |                        \
    \                                      ----------- expected `Vec<String>` because\
    \ of return type\n...\n14 |     new_strings\n   |     ^^^^^^^^^^^ expected struct\
    \ `String`, found `&String`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&String>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp3flfzbav.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmp3flfzbav.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n\
    \    prefix.push('_');\n    strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpb47166uj.rs:9:45\n     |\n9    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmpb47166uj.rs:9:54\n     |\n9    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut prefix = prefix.to_owned();\n\
    \    let mut filtered = Vec::new();\n\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            filtered.push(s);\n        }\n    }\n\n    filtered\n}\n\nfn\
    \ main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpdnwdhdng.rs:11:26\n     |\n11   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n11   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpcips5olm.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpcips5olm.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpvcauo9qw.rs:9:54\n     |\n9    |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \     |                                          ----------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         .filter_map(|s|\
    \ s.to_lowercase().starts_with(&prefix.to_lowercase()))\n     |              \
    \                                        +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpvcauo9qw.rs:9:25\n  |\n9 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n9 |         .filter_map(|s| Some(s.to_lowercase().starts_with(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \        +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpni_9elaf.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpni_9elaf.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut iter = strings.iter();\n\
    \    if let Some(first_segment) = iter.next() {\n        if first_segment.starts_with(prefix)\
    \ {\n            iter\n                .filter(|s| !s.starts_with(prefix))\n \
    \               .collect()\n        } else {\n            iter\n             \
    \   .filter(|s| s.starts_with(prefix))\n                .collect()\n        }\n\
    \    } else {\n        iter\n            .filter(|s| s.starts_with(prefix))\n\
    \            .collect()\n    }\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpg1195sjm.rs:9:38\n     |\n9    |         if first_segment.starts_with(prefix)\
    \ {\n     |                          ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                          |\n     |          \
    \                required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n9    |         if first_segment.starts_with(&prefix)\
    \ {\n     |                                      +\n\nerror[E0277]: expected a\
    \ `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpg1195sjm.rs:11:44\n\
    \     |\n11   |                 .filter(|s| !s.starts_with(prefix))\n     |  \
    \                              ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                                |\n     |             \
    \                   required by a bound introduced by this call\n     |\n    \
    \ = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    note: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n11   |                 .filter(|s| !s.starts_with(&prefix))\n\
    \     |                                            +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmpg1195sjm.rs:12:18\n     |\n12   |               \
    \  .collect()\n     |                  ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n     = help:\
    \ the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a\
    \ bound in `collect`\n\nerror[E0277]: expected a `FnMut<"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpd0dklpgw.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpd0dklpgw.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut strings = strings;\n\
    \    strings.retain(|s| s.starts_with(prefix))\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpmle74bls.rs:8:38\n     |\n8    |     strings.retain(|s| s.starts_with(prefix))\n\
    \     |                          ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                          |\n     |             \
    \             required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n8    |     strings.retain(|s| s.starts_with(&prefix))\n\
    \     |                                      +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpmle74bls.rs:8:5\n  |\n6 | fn filter_by_prefix(strings: Vec<String>,\
    \ prefix: String) -> Vec<String> {\n  |                                      \
    \                        ----------- expected `Vec<String>` because of return\
    \ type\n7 |     let mut strings = strings;\n8 |     strings.retain(|s| s.starts_with(prefix))\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found\
    \ `()`\n  |\n  = note: expected struct `Vec<String>`\n          found unit type\
    \ `()`\nnote: method `retain` modifies its receiver in-place\n --> /tmp/tmpmle74bls.rs:8:13\n\
    \  |\n8 |     strings.retain(|s| s.starts_with(prefix))\n  |     ------- ^^^^^^\
    \ this call modifies `strings` in-place\n  |     |\n  |     you probably want\
    \ to use this value after calling the method...\n  = note: ...instead of the `()`\
    \ output of method `retain`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let prefix_len = prefix.len();\n\
    \    let mut filtered_strings = Vec::new();\n\n    for (i, s) in strings.iter().enumerate()\
    \ {\n        if s.len() == prefix_len {\n            filtered_strings.push((i,\
    \ s));\n        }\n    }\n\n    filtered_strings\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv0u5o5s4.rs:16:5\n   |\n\
    6  | fn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n   |                                                              -----------\
    \ expected `Vec<String>` because of return type\n...\n16 |     filtered_strings\n\
    \   |     ^^^^^^^^^^^^^^^^ expected struct `String`, found tuple\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `Vec<(usize, &String)>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = vec![];\n    for s in strings {\n        if s.starts_with(prefix) {\n    \
    \        filtered_strings.push(s);\n        }\n    }\n    filtered_strings\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpey6_7zzm.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let len = prefix.len();\n\
    \    let mut matches = Vec::new();\n    matches.extend(strings.iter().filter(|s|\
    \ {\n        s.starts_with(prefix)\n    }));\n    matches.extend(strings.iter().filter(|s|\
    \ {\n        !s.starts_with(prefix)\n    }));\n    matches\n}\n\nfn main() {\n\
    \    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpv1g6bvbj.rs:10:23\n     |\n10   |         s.starts_with(prefix)\n\
    \     |           ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |           |\n     |           required by a bound introduced by this call\n\
    \     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n10   |         s.starts_with(&prefix)\n\
    \     |                       +\n\nerror[E0277]: expected a `FnMut<(char,)>` closure,\
    \ found `String`\n    --> /tmp/tmpv1g6bvbj.rs:13:24\n     |\n13   |         !s.starts_with(prefix)\n\
    \     |            ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |            |\n     |            required by a bound introduced by this\
    \ call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n13   |         !s.starts_with(&prefix)\n\
    \     |                        +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv1g6bvbj.rs:15:5\n\
    \   |\n6  | fn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n   |                                                              -----------\
    \ expected `Vec<String>` because of return type\n...\n15 |     matches\n   | \
    \    ^^^^^^^ expected struct `String`, found `&String`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&String>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut filtered = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(prefix) {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp87xd1g_3.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let prefix_len = prefix.len();\n\
    \    strings\n        .iter()\n        .filter_map(|s| s.len() as i32)\n     \
    \   .filter(|len| len >= prefix_len && s.starts_with(prefix))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `s` in this scope\n  --> /tmp/tmpgu8ho8g5.rs:11:44\n\
    \   |\n11 |         .filter(|len| len >= prefix_len && s.starts_with(prefix))\n\
    \   |                                            ^ not found in this scope\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpgu8ho8g5.rs:10:25\n   |\n10 |  \
    \       .filter_map(|s| s.len() as i32)\n   |                         ^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `i32`\n   |\n   = note: expected enum `Option<_>`\n\
    \              found type `i32`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n10 |         .filter_map(|s| Some(s.len() as i32))\n   |              \
    \           +++++              +\n\nerror[E0277]: can't compare `&_` with `usize`\n\
    \  --> /tmp/tmpgu8ho8g5.rs:11:27\n   |\n11 |         .filter(|len| len >= prefix_len\
    \ && s.starts_with(prefix))\n   |                           ^^ no implementation\
    \ for `&_ < usize` and `&_ > usize`\n   |\n   = help: the trait `PartialOrd<usize>`\
    \ is not implemented for `&_`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut prefix = prefix.to_owned();\n\
    \    prefix.push_str(\"-\");\n\n    let mut result = Vec::new();\n    for s in\
    \ strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpvrub16g0.rs:12:26\n     |\n12   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n12   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut i = 0;\n    while\
    \ i < strings.len() {\n        if strings[i..].contains(prefix) {\n          \
    \  i += prefix.len();\n            continue;\n        }\n        i += 1;\n   \
    \ }\n    strings.drain(..i)\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6eqfq699.rs:9:34\n  |\n9 |\
    \         if strings[i..].contains(prefix) {\n  |                            \
    \      ^^^^^^\n  |                                  |\n  |                   \
    \               expected `&String`, found struct `String`\n  |               \
    \                   help: consider borrowing here: `&prefix`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6eqfq699.rs:15:5\n   |\n6  | fn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n   |                        \
    \                                      ----------- expected `Vec<String>` because\
    \ of return type\n...\n15 |     strings.drain(..i)\n   |     ^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `std::vec::Drain`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `std::vec::Drain<'_, String>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut prefix = prefix.to_owned();\n\
    \    let mut result = Vec::new();\n\n    for s in strings {\n        if !prefix.starts_with(&s)\
    \ {\n            result.push(s);\n        }\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asd\", \"xxy\", \"john doe\", \"xxxAAA\"]`,\n right: `[\"xxx\", \"xxxAAA\"\
    , \"xxx\"]`', /tmp/tmpf53fehkc.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() {\n\
    \        return vec![];\n    }\n    let mut prefix = prefix.to_owned();\n    prefix.pop();\n\
    \    let mut strings = strings.clone();\n    for &s in strings {\n        if s.starts_with(prefix)\
    \ {\n            strings.remove(s);\n        }\n    }\n    strings\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf07tiwyz.rs:13:9\n   |\n\
    13 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp1az8w036.rs:9:39\n     |\n9    |         .filter_map(|s| s.starts_with(prefix))\n\
    \     |                           ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n9    |         .filter_map(|s| s.starts_with(&prefix))\n\
    \     |                                       +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp1az8w036.rs:9:25\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.starts_with(prefix)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|string| string.starts_with(prefix))\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpqoo43ng8.rs:9:45\n     |\n9    |         .filter(|string| string.starts_with(prefix))\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.starts_with(&prefix))\n\
    \     |                                             +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmps62lfc5p.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmps62lfc5p.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| {\n            if s.starts_with(prefix) {\n         \
    \       Some(s)\n            } else {\n                None\n            }\n \
    \       })\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp2eotkean.rs:10:30\n     |\n10   |             if s.starts_with(prefix)\
    \ {\n     |                  ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n10   |          \
    \   if s.starts_with(&prefix) {\n     |                              +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmp2eotkean.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpzp7e9z12.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpzp7e9z12.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut iterator = strings.iter().filter_map(|s|\
    \ s.starts_with(prefix));\n    iterator.collect::<Vec<String>>()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpdehg3fct.rs:7:68\n     |\n7    |     let mut iterator = strings.iter().filter_map(|s|\
    \ s.starts_with(prefix));\n     |                                            \
    \            ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |                                                        |\n     |     \
    \                                                   required by a bound introduced\
    \ by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is\
    \ not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n7    |     let mut\
    \ iterator = strings.iter().filter_map(|s| s.starts_with(&prefix));\n     |  \
    \                                                                  +\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpdehg3fct.rs:7:54\n  |\n7 |     let mut iterator\
    \ = strings.iter().filter_map(|s| s.starts_with(prefix));\n  |               \
    \                                       ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`,\
    \ found `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type\
    \ `bool`\nhelp: try wrapping the expression in `Some`\n  |\n7 |     let mut iterator\
    \ = strings.iter().filter_map(|s| Some(s.starts_with(prefix)));\n  |         \
    \                                             +++++                     +\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut iter = strings.iter();\n\
    \    iter.filter_map(|&s| s.starts_with(prefix)).collect()\n}\n\nfn main() {\n\
    \    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp47cd72xg.rs:8:40\n     |\n8    |     iter.filter_map(|&s| s.starts_with(prefix)).collect()\n\
    \     |                            ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                            |\n     |        \
    \                    required by a bound introduced by this call\n     |\n   \
    \  = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    note: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n8    |     iter.filter_map(|&s| s.starts_with(&prefix)).collect()\n\
    \     |                                        +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp47cd72xg.rs:8:26\n  |\n8 |     iter.filter_map(|&s| s.starts_with(prefix)).collect()\n\
    \  |                          ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n8 |     iter.filter_map(|&s|\
    \ Some(s.starts_with(prefix))).collect()\n  |                          +++++ \
    \                    +\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut res = Vec::new();\n\
    \    for s in strings.iter() {\n        if s.starts_with(prefix) {\n         \
    \   res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpum2zadlp.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpum2zadlp.rs:13:5\n   |\n6  | fn filter_by_prefix(strings: Vec<String>,\
    \ prefix: String) -> Vec<String> {\n   |                                     \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n13 |     res\n   |     ^^^ expected struct `String`, found `&String`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&String>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.iter().filter_map(|s|\
    \ {\n        if s.starts_with(prefix) {\n            Some(s)\n        } else {\n\
    \            None\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpce7okuu6.rs:8:26\n     |\n8    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n8    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpce7okuu6.rs:13:8\n\
    \     |\n13   |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut out = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(prefix) {\n            out.push(s);\n\
    \        }\n    }\n    out\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp5lpklj38.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut results = Vec::new();\n\
    \    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n  \
    \      .filter(|s| !s.is_empty())\n        .for_each(|s| results.push(s));\n \
    \   results\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpgcy6qxje.rs:10:35\n     |\n10   |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n10   |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgcy6qxje.rs:13:5\n\
    \   |\n6  | fn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n   |                                                              -----------\
    \ expected `Vec<String>` because of return type\n...\n13 |     results\n   | \
    \    ^^^^^^^ expected struct `String`, found `&String`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut iter = strings.iter();\n\
    \    let mut prefix = prefix.to_owned();\n    loop {\n        match iter.next()\
    \ {\n            None => break,\n            Some(prefixed) => if prefixed.starts_with(prefix)\
    \ {\n                iter.push(prefixed);\n            }\n        }\n    }\n \
    \   iter\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpfvl1o9oh.rs:12:55\n     |\n12   |             Some(prefixed) =>\
    \ if prefixed.starts_with(prefix) {\n     |                                  \
    \         ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |                                           |\n     |                  \
    \                         required by a bound introduced by this call\n     |\n\
    \     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    note: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n12   |             Some(prefixed) => if prefixed.starts_with(&prefix)\
    \ {\n     |                                                       +\n\nerror[E0599]:\
    \ no method named `push` found for struct `std::slice::Iter` in the current scope\n\
    \  --> /tmp/tmpfvl1o9oh.rs:13:22\n   |\n13 |                 iter.push(prefixed);\n\
    \   |                      ^^^^ method not found in `std::slice::Iter<'_, String>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfvl1o9oh.rs:17:5\n   |\n6  | fn\
    \ filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  \
    \ |                                                              ----------- expected\
    \ `Vec<String>` because of return type\n...\n17 |     iter\n   |     ^^^^ expected\
    \ struct `Vec`, found struct `std::slice::Iter`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `std::slice::Iter<'_, String>`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmplsx43rj2.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmplsx43rj2.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut prefix = prefix.to_lowercase();\n\
    \    let mut iter: Vec<String> = Vec::new();\n    for s in strings {\n       \
    \ if s.starts_with(prefix) {\n            iter.push(s);\n        }\n    }\n  \
    \  iter\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpi0aqt2jo.rs:10:26\n     |\n10   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n10   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpu7tbtjv9.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpu7tbtjv9.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp38nbo_53.rs:7:49\n     |\n7    |     strings.iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \  ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     | \
    \                                    |\n     |                               \
    \      required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n7    |     strings.iter().filter_map(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                                 +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp38nbo_53.rs:7:35\n  |\n7 |     strings.iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n  |                                   ^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n7 |     strings.iter().filter_map(|s| Some(s.starts_with(prefix))).collect()\n\
    \  |                                   +++++                     +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp_pw9kpe5.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmptjal3z61.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmptjal3z61.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut strings = strings\n\
    \        .iter()\n        .filter(|&s| s.starts_with(prefix))\n        .cloned()\n\
    \        .collect::<Vec<_>>();\n    strings.push(\"*\");\n    strings\n}\n\nfn\
    \ main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpcqne5nrs.rs:9:36\n     |\n9    |         .filter(|&s| s.starts_with(prefix))\n\
    \     |                        ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                        |\n     |                     \
    \   required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|&s| s.starts_with(&prefix))\n     |  \
    \                                  +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpcqne5nrs.rs:12:18\n   |\n12 |     strings.push(\"*\");\n   |       \
    \           ^^^- help: try using a conversion method: `.to_string()`\n   |   \
    \               |\n   |                  expected struct `String`, found `&str`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut filtered = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(prefix) {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp4pwbwy0z.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut strings = strings.clone();\n\
    \    let mut prefix = prefix.to_string();\n    strings.sort_unstable();\n    while\
    \ strings.len() > 0 {\n        let index0 = strings.iter().position(|x| *x ==\
    \ prefix);\n        if index0 == 0 {\n            strings.remove(0)\n        }\
    \ else {\n            strings.remove(index0); // remove prefix\n        }\n  \
    \  }\n    strings\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprr5sgsj7.rs:12:22\n   |\n\
    12 |         if index0 == 0 {\n   |                      ^ expected enum `Option`,\
    \ found integer\n   |\n   = note: expected enum `Option<usize>`\n            \
    \  found type `{integer}`\nhelp: try wrapping the expression in `Some`\n   |\n\
    12 |         if index0 == Some(0) {\n   |                      +++++ +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprr5sgsj7.rs:13:13\n   |\n12 | /         if index0\
    \ == 0 {\n13 | |             strings.remove(0)\n   | |             ^^^^^^^^^^^^^^^^^\
    \ expected `()`, found struct `String`\n14 | |         } else {\n15 | |      \
    \       strings.remove(index0); // remove prefix\n16 | |         }\n   | |_________-\
    \ expected this to be `()`\n   |\nhelp: consider using a semicolon here\n   |\n\
    13 |             strings.remove(0);\n   |                              +\nhelp:\
    \ consider using a semicolon here\n   |\n16 |         };\n   |          +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmprr5sgsj7.rs:15:28\n   |\n15 |  \
    \           strings.remove(index0); // remove prefix\n   |                   \
    \         ^^^^^^ expected `usize`, found enum `Option`\n   |\n   = note: expected\
    \ type `usize`\n              found enum `Option<usize>`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n \
    \       .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp2ds8ettf.rs:9:51\n     |\n9    |         .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \     |                                          -------- ^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                     |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         .filter_map(|s|\
    \ s.to_lowercase().contains(&prefix.to_lowercase()))\n     |                 \
    \                                  +\n\nerror[E0308]: mismatched types\n --> /tmp/tmp2ds8ettf.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n9 |         .filter_map(|s| Some(s.to_lowercase().contains(prefix.to_lowercase())))\n\
    \  |                         +++++                                           \
    \     +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let prefix_len = prefix.len();\n\
    \    let strings_iter = strings.iter().filter(|s| s.len() == prefix_len);\n  \
    \  strings.into_iter().filter(|s| s.starts_with(prefix)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6quzb62q.rs:9:50\n     |\n9    |     strings.into_iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \   ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |\
    \                                      |\n     |                             \
    \         required by a bound introduced by this call\n     |\n     = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |     strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                                  +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut result: Vec<String>\
    \ = vec![];\n    for string in strings {\n        if string.starts_with(prefix)\
    \ {\n            result.push(string);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpdjgt6s79.rs:9:31\n     |\n9    |         if string.starts_with(prefix)\
    \ {\n     |                   ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if\
    \ string.starts_with(&prefix) {\n     |                               +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| {\n            if s.starts_with(prefix) {\n         \
    \       Some(s)\n            } else {\n                None\n            }\n \
    \       })\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp967a19ke.rs:10:30\n     |\n10   |             if s.starts_with(prefix)\
    \ {\n     |                  ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n10   |          \
    \   if s.starts_with(&prefix) {\n     |                              +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmp967a19ke.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.to_ascii_lowercase().contains(prefix.to_ascii_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpd0a15xqd.rs:9:57\n     |\n9    |         .filter_map(|s| s.to_ascii_lowercase().contains(prefix.to_ascii_lowercase()))\n\
    \     |                                                -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                           |\n     |                                        \
    \        required by a bound introduced by this call\n     |\n     = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter_map(|s| s.to_ascii_lowercase().contains(&prefix.to_ascii_lowercase()))\n\
    \     |                                                         +\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpd0a15xqd.rs:9:25\n  |\n9 |         .filter_map(|s|\
    \ s.to_ascii_lowercase().contains(prefix.to_ascii_lowercase()))\n  |         \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n9 |         .filter_map(|s| Some(s.to_ascii_lowercase().contains(prefix.to_ascii_lowercase())))\n\
    \  |                         +++++                                           \
    \                 +\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            filtered_strings.push(*s);\n        }\n    }\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp595xkmq4.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0277]: the size for values of\
    \ type `str` cannot be known at compilation time\n   --> /tmp/tmp595xkmq4.rs:10:35\n\
    \    |\n10  |             filtered_strings.push(*s);\n    |                  \
    \            ---- ^^ doesn't have a size known at compile-time\n    |        \
    \                      |\n    |                              required by a bound\
    \ introduced by this call\n    |\n    = help: the trait `Sized` is not implemented\
    \ for `str`\nnote: required by a bound in `Vec::<T, A>::push`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmp595xkmq4.rs:7:32\n    |\n7   |     let mut filtered_strings = Vec::new();\n\
    \    |                                ^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by a bound in `Vec::<T>::new`\n\nerror[E0277]: the size for values of type `str`\
    \ cannot be known at compilation time\n   --> /tmp/tmp595xkmq4.rs:7:32\n    |\n\
    7   |     let mut filtered_strings = Vec::new();\n    |                      \
    \          ^^^ doesn't have a size known at compile-time\n    |\n    = help: the\
    \ trait `Sized` is not implemented for `str`\nnote: required by a bound in `Vec`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp595xkmq4.rs:13:5\n   |\n6  | fn\
    \ filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  \
    \ |                    "
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut matches = Vec::new();\n\
    \    for &s in strings {\n        if s.starts_with(prefix) {\n            matches.push(s);\n\
    \        }\n    }\n    matches\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb9ukuuua.rs:8:9\n  |\n8 |\
    \     for &s in strings {\n  |         ^^    ------- this expression has type\
    \ `Option<String>`\n  |         |\n  |         expected struct `String`, found\
    \ reference\n  |         help: you can probably remove the explicit borrow: `s`\n\
    \  |\n  = note: expected struct `String`\n          found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    // Create a mutable reference\
    \ to the slice.\n    let mut strings = strings.to_mut_vec();\n    let mut prefix\
    \ = prefix.to_string();\n\n    // Iterate over the input string vector, looking\
    \ for matches.\n    for string in strings {\n        if string.starts_with(prefix)\
    \ {\n            strings.remove(&string);\n        }\n    }\n\n    // Return the\
    \ input vector with only those strings.\n    strings.into_iter().collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_mut_vec` found for struct `Vec<String>`\
    \ in the current scope\n --> /tmp/tmp882fh5ko.rs:8:31\n  |\n8 |     let mut strings\
    \ = strings.to_mut_vec();\n  |                               ^^^^^^^^^^ help:\
    \ there is an associated function with a similar name: `to_vec`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() {\n\
    \        return strings;\n    }\n\n    let mut prefix_len = prefix.len();\n  \
    \  if prefix_len > strings[0][..prefix_len].len() {\n        return strings;\n\
    \    }\n\n    strings.iter().filter(|s| {\n        let start = s.chars().next().unwrap().to_ascii_lowercase();\n\
    \        start.starts_with(&prefix[..prefix_len])\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `starts_with` found for type `char` in the\
    \ current scope\n  --> /tmp/tmp0gnxszzd.rs:18:15\n   |\n18 |         start.starts_with(&prefix[..prefix_len])\n\
    \   |               ^^^^^^^^^^^ method not found in `char`\n\nerror[E0277]: a\
    \ value of type `Vec<String>` cannot be built from an iterator over elements of\
    \ type `&String`\n    --> /tmp/tmp0gnxszzd.rs:19:8\n     |\n19   |     }).collect()\n\
    \     |        ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp5r7t6u93.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmp5r7t6u93.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppvcgb_yk.rs:7:45\n     |\n7    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmppvcgb_yk.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpeyk6fqp9.rs:9:39\n     |\n9    |         .filter_map(|s| s.starts_with(prefix))\n\
    \     |                           ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n9    |         .filter_map(|s| s.starts_with(&prefix))\n\
    \     |                                       +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpeyk6fqp9.rs:9:25\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.starts_with(prefix)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpj7y2mqot.rs:7:49\n     |\n7    |     strings.iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \  ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     | \
    \                                    |\n     |                               \
    \      required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n7    |     strings.iter().filter_map(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                                 +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpj7y2mqot.rs:7:35\n  |\n7 |     strings.iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n  |                                   ^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n7 |     strings.iter().filter_map(|s| Some(s.starts_with(prefix))).collect()\n\
    \  |                                   +++++                     +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for str in strings {\n        if str.starts_with(prefix) {\n            result.push(str);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp3bkqwll3.rs:9:28\n     |\n9    |         if str.starts_with(prefix)\
    \ {\n     |                ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                |\n     |                required by a\
    \ bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if\
    \ str.starts_with(&prefix) {\n     |                            +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n\
    \    prefix.pop();\n    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpjn0eggi0.rs:12:30\n     |\n12   |             if s.starts_with(prefix)\
    \ {\n     |                  ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n12   |          \
    \   if s.starts_with(&prefix) {\n     |                              +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpjn0eggi0.rs:18:10\n     |\n18   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp_yca9i8s.rs:10:26\n     |\n10   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n10   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpwrd6ueio.rs:8:35\n     |\n8    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n8    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpwrd6ueio.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|string| string.starts_with(prefix))\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp5hbvnf72.rs:9:45\n     |\n9    |         .filter(|string| string.starts_with(prefix))\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.starts_with(&prefix))\n\
    \     |                                             +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp13hi45ec.rs:9:39\n     |\n9    |         .filter_map(|s| s.starts_with(prefix))\n\
    \     |                           ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n9    |         .filter_map(|s| s.starts_with(&prefix))\n\
    \     |                                       +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp13hi45ec.rs:9:25\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.starts_with(prefix)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut result: Vec<String>\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp0ewg5l0c.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.as_bytes().starts_with(prefix.as_bytes()))\n      \
    \  .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_x73plnb.rs:9:25\n  |\n9 |\
    \         .filter_map(|s| s.as_bytes().starts_with(prefix.as_bytes()))\n  |  \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n         \
    \    found type `bool`\nhelp: try wrapping the expression in `Some`\n  |\n9 |\
    \         .filter_map(|s| Some(s.as_bytes().starts_with(prefix.as_bytes())))\n\
    \  |                         +++++                                           +\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpfjx69jwk.rs:7:50\n     |\n7    |     strings.into_iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \   ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |\
    \                                      |\n     |                             \
    \         required by a bound introduced by this call\n     |\n     = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n7    |     strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                                  +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.iter().filter_map(|s|\
    \ {\n        if s.starts_with(prefix) {\n            Some(s)\n        } else {\n\
    \            None\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp0xtu3v_g.rs:8:26\n     |\n8    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n8    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmp0xtu3v_g.rs:13:8\n\
    \     |\n13   |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| {\n            if s.starts_with(prefix) {\n         \
    \       Some(s)\n            } else {\n                None\n            }\n \
    \       })\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp2k66bgjj.rs:10:30\n     |\n10   |             if s.starts_with(prefix)\
    \ {\n     |                  ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n10   |          \
    \   if s.starts_with(&prefix) {\n     |                              +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmp2k66bgjj.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.to_ascii_lowercase().contains(prefix.to_ascii_lowercase()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp2wyj3xx_.rs:9:57\n     |\n9    |         .filter_map(|s| s.to_ascii_lowercase().contains(prefix.to_ascii_lowercase()))\n\
    \     |                                                -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \                           |\n     |                                        \
    \        required by a bound introduced by this call\n     |\n     = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter_map(|s| s.to_ascii_lowercase().contains(&prefix.to_ascii_lowercase()))\n\
    \     |                                                         +\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp2wyj3xx_.rs:9:25\n  |\n9 |         .filter_map(|s|\
    \ s.to_ascii_lowercase().contains(prefix.to_ascii_lowercase()))\n  |         \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n9 |         .filter_map(|s| Some(s.to_ascii_lowercase().contains(prefix.to_ascii_lowercase())))\n\
    \  |                         +++++                                           \
    \                 +\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp2iay15yz.rs:7:45\n     |\n7    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmp2iay15yz.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut iter = strings.iter();\n\
    \    iter.by_ref().take_while(|&x| x.starts_with(prefix)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpzht_e_en.rs:8:49\n     |\n8    |     iter.by_ref().take_while(|&x|\
    \ x.starts_with(prefix)).collect()\n     |                                   \
    \  ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     | \
    \                                    |\n     |                               \
    \      required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n8    |     iter.by_ref().take_while(|&x| x.starts_with(&prefix)).collect()\n\
    \     |                                                 +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmpzht_e_en.rs:8:58\n     |\n8    |     iter.by_ref().take_while(|&x|\
    \ x.starts_with(prefix)).collect()\n     |                                   \
    \                       ^^^^^^^ value of type `Vec<String>` cannot be built from\
    \ `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpbi27zyiq.rs:7:45\n     |\n7    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmpbi27zyiq.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = Vec::new();\n\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            filtered_strings.push(*s);\n        }\n    }\n\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpx3s0cob_.rs:10:26\n     |\n10   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n10   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0277]: the size for values of\
    \ type `str` cannot be known at compilation time\n   --> /tmp/tmpx3s0cob_.rs:11:35\n\
    \    |\n11  |             filtered_strings.push(*s);\n    |                  \
    \            ---- ^^ doesn't have a size known at compile-time\n    |        \
    \                      |\n    |                              required by a bound\
    \ introduced by this call\n    |\n    = help: the trait `Sized` is not implemented\
    \ for `str`\nnote: required by a bound in `Vec::<T, A>::push`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmpx3s0cob_.rs:7:32\n    |\n7   |     let mut filtered_strings = Vec::new();\n\
    \    |                                ^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by a bound in `Vec::<T>::new`\n\nerror[E0277]: the size for values of type `str`\
    \ cannot be known at compilation time\n   --> /tmp/tmpx3s0cob_.rs:7:32\n    |\n\
    7   |     let mut filtered_strings = Vec::new();\n    |                      \
    \          ^^^ doesn't have a size known at compile-time\n    |\n    = help: the\
    \ trait `Sized` is not implemented for `str`\nnote: required by a bound in `Vec`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpx3s0cob_.rs:15:5\n   |\n6  | fn\
    \ filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  \
    \ |                   "
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.iter().filter(|string|\
    \ string.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6d_ig5aa.rs:7:55\n     |\n7    |     strings.iter().filter(|string|\
    \ string.starts_with(prefix)).collect()\n     |                              \
    \             ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |                                           |\n     |                  \
    \                         required by a bound introduced by this call\n     |\n\
    \     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    note: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n7    |     strings.iter().filter(|string| string.starts_with(&prefix)).collect()\n\
    \     |                                                       +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmp6d_ig5aa.rs:7:64\n     |\n7    |     strings.iter().filter(|string|\
    \ string.starts_with(prefix)).collect()\n     |                              \
    \                                  ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n     = help:\
    \ the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a\
    \ bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp9ghtvtf8.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmp9ghtvtf8.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() {\n\
    \        return strings;\n    }\n    let mut filtered = Vec::new();\n    let mut\
    \ it = strings.iter();\n    for s in it.next() {\n        if s.starts_with(prefix)\
    \ {\n            filtered.push(s);\n        }\n    }\n    filtered\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxhug2pmf.rs:13:26\n     |\n13   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n13   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxhug2pmf.rs:17:5\n   |\n6  | fn filter_by_prefix(strings: Vec<String>,\
    \ prefix: String) -> Vec<String> {\n   |                                     \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n17 |     filtered\n   |     ^^^^^^^^ expected struct `String`, found\
    \ `&String`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&String>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() {\n\
    \        return strings;\n    }\n    if prefix.len() < 1 || prefix.len() > strings.len()\
    \ {\n        return strings;\n    }\n    let mut result = strings.clone();\n \
    \   for &s in &result {\n        if s.starts_with(prefix) {\n            s.remove(prefix.len());\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpvn6a69hd.rs:15:26\n     |\n15   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n15   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpb_nmv0oz.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpb_nmv0oz.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp2n8clcv7.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmp2n8clcv7.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.to_lowercase())\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4ckdhw2m.rs:9:25\n  |\n9 |\
    \         .filter_map(|s| s.to_lowercase())\n  |                         ^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum\
    \ `Option<_>`\n           found struct `String`\nhelp: try wrapping the expression\
    \ in `Some`\n  |\n9 |         .filter_map(|s| Some(s.to_lowercase()))\n  |   \
    \                      +++++                +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpu_5hckkd.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut filtered = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(prefix) {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppve6s7b3.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut strings = strings.clone();\n\
    \    strings = strings.into_iter().filter(|s| s.starts_with(prefix)).collect();\n\
    \    strings\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpn5qtp6le.rs:8:60\n     |\n8    |     strings = strings.into_iter().filter(|s|\
    \ s.starts_with(prefix)).collect();\n     |                                  \
    \              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |                                                |\n     |             \
    \                                   required by a bound introduced by this call\n\
    \     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n8    |     strings = strings.into_iter().filter(|s|\
    \ s.starts_with(&prefix)).collect();\n     |                                 \
    \                           +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = Vec::new();\n\n    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .for_each(|s| filtered_strings.push(s));\n\n    filtered_strings\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp5826vi3c.rs:11:35\n     |\n11   |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n11   |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5826vi3c.rs:14:5\n\
    \   |\n6  | fn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n   |                                                              -----------\
    \ expected `Vec<String>` because of return type\n...\n14 |     filtered_strings\n\
    \   |     ^^^^^^^^^^^^^^^^ expected struct `String`, found `&String`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `Vec<&String>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp5tvaxzka.rs:7:49\n     |\n7    |     strings.iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \  ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     | \
    \                                    |\n     |                               \
    \      required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n7    |     strings.iter().filter_map(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                                 +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp5tvaxzka.rs:7:35\n  |\n7 |     strings.iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n  |                                   ^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n7 |     strings.iter().filter_map(|s| Some(s.starts_with(prefix))).collect()\n\
    \  |                                   +++++                     +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut filtered = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(prefix) {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxzsmt5mg.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpl4we_d5g.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for s in strings.iter() {\n        if s.starts_with(prefix) {\n         \
    \   result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmptjihean7.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmptjihean7.rs:13:5\n   |\n6  | fn filter_by_prefix(strings: Vec<String>,\
    \ prefix: String) -> Vec<String> {\n   |                                     \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n13 |     result\n   |     ^^^^^^ expected struct `String`, found\
    \ `&String`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&String>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpgknapne6.rs:7:45\n     |\n7    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmpgknapne6.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpe3pb4wny.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmptep7vhey.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmptep7vhey.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.into_iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpo57vpivb.rs:7:54\n     |\n7    |     strings.into_iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \       ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n  \
    \   |                                          |\n     |                     \
    \                     required by a bound introduced by this call\n     |\n  \
    \   = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    note: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n7    |     strings.into_iter().filter_map(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                                      +\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpo57vpivb.rs:7:40\n  |\n7 |     strings.into_iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n  |                                      \
    \  ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found `bool`\n  |\n  = note:\
    \ expected enum `Option<_>`\n             found type `bool`\nhelp: try wrapping\
    \ the expression in `Some`\n  |\n7 |     strings.into_iter().filter_map(|s| Some(s.starts_with(prefix))).collect()\n\
    \  |                                        +++++                     +\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if let Some(ref mut prefix_slice)\
    \ = prefix.as_ref() {\n        if strings.is_empty() {\n            return vec![];\n\
    \        }\n        let prefix_index = strings.iter().position(|&x| x == prefix_slice).unwrap_or(-1);\n\
    \        if prefix_index < 0 {\n            return strings;\n        }\n     \
    \   let mut result = strings.clone();\n        result.remove(0);\n        result.extend(strings.split_at_mut(prefix_index));\n\
    \        result\n    } else {\n        strings\n    }\n}\n\nfn main() {\n    let\
    \ candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `String: AsRef<Option<_>>` is not satisfied\n\
    \ --> /tmp/tmptn5bz4l6.rs:7:48\n  |\n7 |     if let Some(ref mut prefix_slice)\
    \ = prefix.as_ref() {\n  |                                                ^^^^^^\
    \ the trait `AsRef<Option<_>>` is not implemented for `String`\n  |\n  = help:\
    \ the following other types implement trait `AsRef<T>`:\n            <String as\
    \ AsRef<OsStr>>\n            <String as AsRef<Path>>\n            <String as AsRef<[u8]>>\n\
    \            <String as AsRef<str>>\n            <str as AsRef<OsStr>>\n     \
    \       <str as AsRef<Path>>\n            <str as AsRef<[u8]>>\n            <str\
    \ as AsRef<str>>\n\nerror[E0277]: can't compare `String` with `&mut _`\n  -->\
    \ /tmp/tmptn5bz4l6.rs:11:59\n   |\n11 |         let prefix_index = strings.iter().position(|&x|\
    \ x == prefix_slice).unwrap_or(-1);\n   |                                    \
    \                       ^^ no implementation for `String == &mut _`\n   |\n  \
    \ = help: the trait `PartialEq<&mut _>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `PartialEq<Rhs>`:\n        \
    \     <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror[E0600]: cannot apply\
    \ unary operator `-` to type `usize`\n  --> /tmp/tmptn5bz4l6.rs:11:86\n   |\n\
    11 |         let prefix_index = strings.iter().position(|&x| x == prefix_slice).unwrap_or(-1);\n\
    \   |                                                                        \
    \              ^^\n   |                                                      \
    \                                |\n   |                                     \
    \                                                 cannot apply unary operator\
    \ `-`\n   |                                                                  \
    \                    help:"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpkksdkjal.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpkksdkjal.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpbc725ytr.rs:7:50\n     |\n7    |     strings.into_iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \   ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |\
    \                                      |\n     |                             \
    \         required by a bound introduced by this call\n     |\n     = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n7    |     strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                                  +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxgb0861o.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpxgb0861o.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpdaks1erf.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpdaks1erf.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() {\n\
    \        return Vec::new();\n    }\n\n    let mut iter = strings.iter();\n   \
    \ iter.next_back();\n\n    let mut prefix = prefix.to_lowercase();\n    let mut\
    \ first_letter = prefix.chars().next().unwrap();\n\n    loop {\n        let next\
    \ = iter.next();\n\n        if next == Some(prefix) {\n            return strings.iter().cloned().collect();\n\
    \        }\n\n        if let Some(first_letter) = first_letter {\n           \
    \ if !strings.is_empty() && strings.last().starts_with(first_letter) {\n     \
    \           first_letter = prefix.chars().next().unwrap();\n            }\n  \
    \      }\n\n        iter.next_back();\n    }\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2od8bk4y.rs:20:25\n   |\n\
    20 |         if next == Some(prefix) {\n   |                         ^^^^^^\n\
    \   |                         |\n   |                         expected `&String`,\
    \ found struct `String`\n   |                         help: consider borrowing\
    \ here: `&prefix`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2od8bk4y.rs:24:16\n\
    \   |\n24 |         if let Some(first_letter) = first_letter {\n   |         \
    \       ^^^^^^^^^^^^^^^^^^   ------------ this expression has type `char`\n  \
    \ |                |\n   |                expected `char`, found enum `Option`\n\
    \   |\n   = note: expected type `char`\n              found enum `Option<_>`\n\
    \nerror[E0599]: no method named `starts_with` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmp2od8bk4y.rs:25:54\n   |\n25 |             if !strings.is_empty()\
    \ && strings.last().starts_with(first_letter) {\n   |                        \
    \                              ^^^^^^^^^^^ method not found in `Option<&String>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = vec![];\n\
    \    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxoilyhlh.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut filtered = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(prefix) {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp8fs_oi2k.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.len() >= prefix.len() && s.starts_with(prefix))\n \
    \       .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp1kt7065x.rs:9:66\n     |\n9    |         .filter_map(|s| s.len()\
    \ >= prefix.len() && s.starts_with(prefix))\n     |                          \
    \                            ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                                                      |\n\
    \     |                                                      required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         .filter_map(|s|\
    \ s.len() >= prefix.len() && s.starts_with(&prefix))\n     |                 \
    \                                                 +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp1kt7065x.rs:9:25\n  |\n9 |         .filter_map(|s| s.len()\
    \ >= prefix.len() && s.starts_with(prefix))\n  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n9 |         .filter_map(|s| Some(s.len() >= prefix.len() && s.starts_with(prefix)))\n\
    \  |                         +++++                                           \
    \     +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp5nena8no.rs:7:45\n     |\n7    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmp5nena8no.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let prefix_len = prefix.len();\n\
    \    if strings.is_empty() {\n        return strings;\n    }\n\n    let mut strings_iter\
    \ = strings.into_iter();\n    strings_iter.for_each(|string| {\n        if string.starts_with(prefix)\
    \ {\n            strings_iter.next();\n        } else {\n            strings_iter.return();\n\
    \        }\n    });\n    let strings = strings_iter.collect();\n\n    strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found keyword `return`\n  --> /tmp/tmp079td1lo.rs:17:26\n\
    \   |\n17 |             strings_iter.return();\n   |                         \
    \ ^^^^^^ expected identifier, found keyword\n   |\nhelp: escape `return` to use\
    \ it as an identifier\n   |\n17 |             strings_iter.r#return();\n   | \
    \                         ++\n\nerror[E0277]: expected a `FnMut<(char,)>` closure,\
    \ found `String`\n    --> /tmp/tmp079td1lo.rs:14:31\n     |\n14   |         if\
    \ string.starts_with(prefix) {\n     |                   ----------- ^^^^^^ expected\
    \ an implementor of trait `Pattern<'_>`\n     |                   |\n     |  \
    \                 required by a bound introduced by this call\n     |\n     =\
    \ note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n14   |         if string.starts_with(&prefix) {\n  \
    \   |                               +\n\nerror[E0599]: no method named `r#return`\
    \ found for struct `std::vec::IntoIter` in the current scope\n  --> /tmp/tmp079td1lo.rs:17:26\n\
    \   |\n17 |             strings_iter.return();\n   |                         \
    \ ^^^^^^ method not found in `std::vec::IntoIter<String>`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut result: Vec<String>\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpgch6bhcq.rs:9:26\n     |\n9    |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp0a6pwli2.rs:7:45\n     |\n7    |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmp0a6pwli2.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpomd39f52.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpomd39f52.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() {\n\
    \        return strings\n    }\n\n    if strings.len() > 0 {\n        if strings.last().starts_with(prefix)\
    \ {\n            return strings\n        }\n    }\n\n    strings\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `starts_with` found for enum `Option` in\
    \ the current scope\n  --> /tmp/tmp1cdif_dz.rs:12:27\n   |\n12 |         if strings.last().starts_with(prefix)\
    \ {\n   |                           ^^^^^^^^^^^ method not found in `Option<&String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpnwev7068.rs:7:49\n     |\n7    |     strings.iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \  ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     | \
    \                                    |\n     |                               \
    \      required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n7    |     strings.iter().filter_map(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                                 +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpnwev7068.rs:7:35\n  |\n7 |     strings.iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n  |                                   ^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n7 |     strings.iter().filter_map(|s| Some(s.starts_with(prefix))).collect()\n\
    \  |                                   +++++                     +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n\
    \    if prefix.len() < 1 {\n        return Vec::new();\n    }\n    let mut new_list\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            new_list.push(s);\n        }\n    }\n    new_list\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpcouq1a9n.rs:13:26\n     |\n13   |         if s.starts_with(prefix)\
    \ {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n13   |         if s.starts_with(&prefix)\
    \ {\n     |                          +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if strings.is_empty() {\n\
    \        return vec![];\n    }\n\n    if strings.len() <= 1 {\n        return\
    \ vec![];\n    }\n\n    strings.iter()\n        .enumerate()\n        .filter(|(_,\
    \ index)| index == strings.len() - 1 || strings.get(index).starts_with(prefix))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&&String` with `usize`\n  --> /tmp/tmpsudcg1l1.rs:17:36\n\
    \   |\n17 |         .filter(|(_, index)| index == strings.len() - 1 || strings.get(index).starts_with(prefix))\n\
    \   |                                    ^^ no implementation for `&&String ==\
    \ usize`\n   |\n   = help: the trait `PartialEq<usize>` is not implemented for\
    \ `&&String`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror[E0277]: the type\
    \ `[String]` cannot be indexed by `&&String`\n   --> /tmp/tmpsudcg1l1.rs:17:72\n\
    \    |\n17  |         .filter(|(_, index)| index == strings.len() - 1 || strings.get(index).starts_with(prefix))\n\
    \    |                                                                    ---\
    \ ^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |        \
    \                                                            |\n    |        \
    \                                                            required by a bound\
    \ introduced by this call\n    |\n    = help: the trait `SliceIndex<[String]>`\
    \ is not implemented for `&&String`\nnote: required by a bound in `core::slice::<impl\
    \ [T]>::get`\n\nerror[E0599]: no method named `starts_with` found for enum `Option`\
    \ in the current scope\n  --> /tmp/tmpsudcg1l1.rs:17:79\n   |\n17 |         .filter(|(_,\
    \ index)| index == strings.len() - 1 || strings.get(index).starts_with(prefix))\n\
    \   |                                                                        \
    \       ^^^^^^^^^^^ method not found in `Option<&_>`\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `(usize, &String)`\n    --> /tmp/tmpsudcg1l1.rs:18:10\n     |\n18   |      \
    \   .collect()\n     |     "
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpqenecth4.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpqenecth4.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmphf754p0q.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.into_iter().filter_map(|s|\
    \ {\n        s.starts_with(prefix).map(|t| t)\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpyrhm0u5g.rs:8:23\n     |\n8    |         s.starts_with(prefix).map(|t|\
    \ t)\n     |           ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |           |\n     |           required by a bound introduced by this call\n\
    \     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n8    |         s.starts_with(&prefix).map(|t|\
    \ t)\n     |                       +\n\nerror[E0599]: `bool` is not an iterator\n\
    \ --> /tmp/tmpyrhm0u5g.rs:8:31\n  |\n8 |         s.starts_with(prefix).map(|t|\
    \ t)\n  |                               ^^^ `bool` is not an iterator\n  |\n \
    \ = note: the following trait bounds were not satisfied:\n          `bool: Iterator`\n\
    \          which is required by `&mut bool: Iterator`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for string in strings {\n        if string.starts_with(prefix) {\n      \
    \      result.push(string);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpdtzfu_9v.rs:9:31\n     |\n9    |         if string.starts_with(prefix)\
    \ {\n     |                   ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if\
    \ string.starts_with(&prefix) {\n     |                               +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|string| string.starts_with(prefix))\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpqzr8jnd3.rs:9:45\n     |\n9    |         .filter(|string| string.starts_with(prefix))\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.starts_with(&prefix))\n\
    \     |                                             +\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmpqzr8jnd3.rs:10:10\n     |\n10   |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut filtered = Vec::new();\n\
    \    for s in strings.iter() {\n        if !s.starts_with(prefix) {\n        \
    \    continue;\n        }\n        filtered.push(s);\n    }\n    filtered\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpp9y_van8.rs:9:27\n     |\n9    |         if !s.starts_with(prefix)\
    \ {\n     |               ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |               |\n     |               required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if\
    \ !s.starts_with(&prefix) {\n     |                           +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp9y_van8.rs:14:5\n   |\n6  | fn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n   |                        \
    \                                      ----------- expected `Vec<String>` because\
    \ of return type\n...\n14 |     filtered\n   |     ^^^^^^^^ expected struct `String`,\
    \ found `&String`\n   |\n   = note: expected struct `Vec<String>`\n          \
    \    found struct `Vec<&String>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.chars().all(|c| c.is_ascii_lowercase()))\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmbio0ok8.rs:9:25\n  |\n9 |\
    \         .filter_map(|s| s.chars().all(|c| c.is_ascii_lowercase()))\n  |    \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n         \
    \    found type `bool`\nhelp: try wrapping the expression in `Some`\n  |\n9 |\
    \         .filter_map(|s| Some(s.chars().all(|c| c.is_ascii_lowercase())))\n \
    \ |                         +++++                                         +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n\
    \    let mut indexes = Vec::new();\n    let mut i = 0;\n    while i < strings.len()\
    \ {\n        if strings.starts_with(prefix, i) {\n            indexes.push(i);\n\
    \        }\n        i += prefix.len();\n    }\n    indexes.sort_unstable();\n\
    \    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n\
    \    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n\
    \    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n\
    \    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n\
    \    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n\
    \    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n\
    \    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n\
    \    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n\
    \    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n\
    \    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n\
    \    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n\
    \    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n\
    \    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n\
    \    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n\
    \    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n\
    \    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n\
    \    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n\
    \    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n\
    \    indexes.dedup();\n    indexes.dedup();\n    indexes.dedup();\n    indexes.ded\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpsm67950x.rs:11:20\n     |\n11   |         if strings.starts_with(prefix,\
    \ i) {\n     |                    ^^^^^^^^^^^ ------  - supplied 2 arguments\n\
    \     |                    |\n     |                    expected 1 argument\n\
    \     |\nnote: associated function defined here\n\nerror[E0609]: no field `ded`\
    \ on type `Vec<usize>`\n  --> /tmp/tmpsm67950x.rs:92:13\n   |\n92 |     indexes.ded\n\
    \   |             ^^^ unknown field\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0609.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut prefix = prefix.as_str().to_owned();\n\
    \    if prefix.is_empty() {\n        return vec![];\n    }\n    let mut result\
    \ = Vec::with_capacity(strings.len());\n    let mut string = strings.iter().next().expect(\"\
    input should be an iterable\");\n    let mut prefix = prefix.to_owned();\n   \
    \ while string.as_str().to_owned().starts_with(prefix) {\n        result.push(string.clone());\n\
    \        string = strings.iter().next().expect(\"input should be an iterable\"\
    );\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpt573pc0a.rs:14:50\n     |\n14   |     while string.as_str().to_owned().starts_with(prefix)\
    \ {\n     |                                      ----------- ^^^^^^ expected an\
    \ implementor of trait `Pattern<'_>`\n     |                                 \
    \     |\n     |                                      required by a bound introduced\
    \ by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is\
    \ not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n14   |     while\
    \ string.as_str().to_owned().starts_with(&prefix) {\n     |                  \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    if !strings.is_empty() {\n\
    \        let prefix_len = prefix.len();\n        if prefix_len > 0 {\n       \
    \     strings\n                .iter()\n                .filter(|s| s.starts_with(prefix))\n\
    \                .collect()\n        } else {\n            strings\n         \
    \       .iter()\n                .filter(|s| !s.is_empty())\n                .collect()\n\
    \        }\n    } else {\n        Vec::new()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpyql0505_.rs:12:43\n     |\n12   |                 .filter(|s| s.starts_with(prefix))\n\
    \     |                               ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                               |\n     |     \
    \                          required by a bound introduced by this call\n     |\n\
    \     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    note: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n12   |                 .filter(|s| s.starts_with(&prefix))\n\
    \     |                                           +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpyql0505_.rs:13:18\n     |\n13   |                 .collect()\n\
    \     |                  ^^^^^^^ value of type `Vec<String>` cannot be built from\
    \ `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpyql0505_.rs:18:18\n     |\n18   |       \
    \          .collect()\n     |                  ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpswc280qr.rs:7:49\n     |\n7    |     strings.iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n     |                                   \
    \  ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     | \
    \                                    |\n     |                               \
    \      required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n7    |     strings.iter().filter_map(|s| s.starts_with(&prefix)).collect()\n\
    \     |                                                 +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpswc280qr.rs:7:35\n  |\n7 |     strings.iter().filter_map(|s|\
    \ s.starts_with(prefix)).collect()\n  |                                   ^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n7 |     strings.iter().filter_map(|s| Some(s.starts_with(prefix))).collect()\n\
    \  |                                   +++++                     +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.iter().filter_map(|string|\
    \ {\n        if string.starts_with(prefix) {\n            Some(string.to_string())\n\
    \        } else {\n            None\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpjje1sgdx.rs:8:31\n     |\n8    |         if string.starts_with(prefix)\
    \ {\n     |                   ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::starts_with`\nhelp: consider borrowing here\n     |\n8    |         if\
    \ string.starts_with(&prefix) {\n     |                               +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpl97kchwq.rs:9:35\n     |\n9    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpl97kchwq.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut prefix = prefix.to_owned();\n\
    \    let mut iter = strings.iter();\n    iter.skip(prefix.len());\n    iter.filter(|x|\
    \ x.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpbk7ndwo0.rs:10:35\n     |\n10   |     iter.filter(|x| x.starts_with(prefix)).collect()\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n10   |     iter.filter(|x| x.starts_with(&prefix)).collect()\n\
    \     |                                   +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpbk7ndwo0.rs:10:44\n\
    \     |\n10   |     iter.filter(|x| x.starts_with(prefix)).collect()\n     | \
    \                                           ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings.into_iter()\n   \
    \     .filter(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp90csvx15.rs:8:35\n     |\n8    |         .filter(|s| s.starts_with(prefix))\n\
    \     |                       ----------- ^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n8    |         .filter(|s| s.starts_with(&prefix))\n     |   \
    \                                +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|string| string.starts_with(prefix))\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp2yn8egs1.rs:9:45\n     |\n9    |         .filter(|string| string.starts_with(prefix))\n\
    \     |                                 ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.starts_with(&prefix))\n\
    \     |                                             +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.starts_with(prefix))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxr8zhaoj.rs:9:39\n     |\n9    |         .filter_map(|s| s.starts_with(prefix))\n\
    \     |                           ----------- ^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider\
    \ borrowing here\n     |\n9    |         .filter_map(|s| s.starts_with(&prefix))\n\
    \     |                                       +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpxr8zhaoj.rs:9:25\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.starts_with(prefix)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n    let mut prefix = prefix.to_lowercase();\n\
    \    strings = strings.iter().filter(|s| s.to_lowercase().starts_with(prefix)).collect();\n\
    \    strings\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpldwwep0q.rs:8:70\n     |\n8    |     strings = strings.iter().filter(|s|\
    \ s.to_lowercase().starts_with(prefix)).collect();\n     |                   \
    \                                       ----------- ^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                             \
    \             |\n     |                                                      \
    \    required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing\
    \ here\n     |\n8    |     strings = strings.iter().filter(|s| s.to_lowercase().starts_with(&prefix)).collect();\n\
    \     |                                                                      +\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmpldwwep0q.rs:8:79\n     |\n\
    8    |     strings = strings.iter().filter(|s| s.to_lowercase().starts_with(prefix)).collect();\n\
    \     |                                                                      \
    \         ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
