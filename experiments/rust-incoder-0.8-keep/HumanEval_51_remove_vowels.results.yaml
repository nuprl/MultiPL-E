name: HumanEval_51_remove_vowels
language: rust
results:
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| c.is_uppercase()).filter(|c| !c.is_lowercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpipzgwl1j.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_uppercase())\n    \
    \    .collect::<String>()\n        .join(\"\")\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `join` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmph4aehbes.rs:16:10\n   |\n16 |         .join(\"\")\n   |\
    \          ^^^^ method not found in `String`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut out = String::new();\n    for c in text.chars() {\n\
    \        match c {\n            'a' | 'e' | 'i' | 'o' | 'u' => {\n           \
    \     out = out.to_string().replace(c.to_string(), \"\");\n            }\n   \
    \         _ => {\n                out = out.to_string().append(&c.to_string());\n\
    \            }\n        }\n    }\n    out\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   -->\
    \ /tmp/tmpna199_of.rs:17:47\n    |\n17  |                 out = out.to_string().replace(c.to_string(),\
    \ \"\");\n    |                                       ------- ^^^^^^^^^^^^^ expected\
    \ an implementor of trait `Pattern<'_>`\n    |                               \
    \        |\n    |                                       required by a bound introduced\
    \ by this call\n    |\n    = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n    = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `str::<impl str>::replace`\nhelp:\
    \ consider borrowing here\n    |\n17  |                 out = out.to_string().replace(&c.to_string(),\
    \ \"\");\n    |                                               +\n\nerror[E0599]:\
    \ no method named `append` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpna199_of.rs:20:39\n   |\n20 |                 out = out.to_string().append(&c.to_string());\n\
    \   |                                       ^^^^^^ method not found in `String`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text.is_empty() {\n        return text;\n    }\n    text.chars().filter(|x|\n\
    \        x == b'a' || x == b'e' || x == b'i' || x == b'o' || x == b'u'\n    ).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps2kksbtf.rs:17:14\n   |\n\
    17 |         x == b'a' || x == b'e' || x == b'i' || x == b'o' || x == b'u'\n \
    \  |              ^^^^ expected `char`, found `u8`\n\nerror[E0277]: can't compare\
    \ `&char` with `u8`\n  --> /tmp/tmps2kksbtf.rs:17:11\n   |\n17 |         x ==\
    \ b'a' || x == b'e' || x == b'i' || x == b'o' || x == b'u'\n   |           ^^\
    \ no implementation for `&char == u8`\n   |\n   = help: the trait `PartialEq<u8>`\
    \ is not implemented for `&char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps2kksbtf.rs:17:27\n\
    \   |\n17 |         x == b'a' || x == b'e' || x == b'i' || x == b'o' || x == b'u'\n\
    \   |                           ^^^^ expected `char`, found `u8`\n\nerror[E0277]:\
    \ can't compare `&char` with `u8`\n  --> /tmp/tmps2kksbtf.rs:17:24\n   |\n17 |\
    \         x == b'a' || x == b'e' || x == b'i' || x == b'o' || x == b'u'\n   |\
    \                        ^^ no implementation for `&char == u8`\n   |\n   = help:\
    \ the trait `PartialEq<u8>` is not implemented for `&char`\n   = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmps2kksbtf.rs:17:40\n   |\n17 |         x == b'a' || x == b'e' || x ==\
    \ b'i' || x == b'o' || x == b'u'\n   |                                       \
    \ ^^^^ expected `char`, found `u8`\n\nerror[E0277]: can't compare `&char` with\
    \ `u8`\n  --> /tmp/tmps2kksbtf.rs:17:37\n   |\n17 |         x == b'a' || x ==\
    \ b'e' || x == b'i' || x == b'o' || x == b'u'\n   |                          \
    \           ^^ no implementation for `&char == u8`\n   |\n   = help: the trait\
    \ `PartialEq<u8>` is not implemented for `&char`\n   = help: the trait `PartialEq`\
    \ is implemented for `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps2kksbtf.rs:17:53\n\
    \   |\n17 |         x == b'a' || x == b'e' || x == b'i' || x == b'o' || x == b'u'\n\
    \   |                                                     ^^^^ expected `char`,\
    \ found `u8`\n\nerror[E0277]: can't compare `&char` with `u8`\n  --> /tmp/tmps2kksbtf.rs:17:50\n\
    \   |\n17 |         x == b'a' || x == b'"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp9pi74r1h.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter_map(|c| match c {\n        c if c == 'a'\
    \ | 'e' | 'i' | 'o' | 'u' => Some(c as u8),\n        _ => None,\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0369]: no implementation for `char | char`\n  --> /tmp/tmp071xpdyz.rs:14:23\n\
    \   |\n14 |         c if c == 'a' | 'e' | 'i' | 'o' | 'u' => Some(c as u8),\n\
    \   |                   --- ^ --- char\n   |                   |\n   |       \
    \            char\n\nerror[E0277]: a value of type `String` cannot be built from\
    \ an iterator over elements of type `u8`\n    --> /tmp/tmp071xpdyz.rs:16:8\n \
    \    |\n16   |     }).collect()\n     |        ^^^^^^^ value of type `String`\
    \ cannot be built from `std::iter::Iterator<Item=u8>`\n     |\n     = help: the\
    \ trait `FromIterator<u8>` is not implemented for `String`\n     = help: the following\
    \ other types implement trait `FromIterator<A>`:\n               <String as FromIterator<&'a\
    \ char>>\n               <String as FromIterator<&'a str>>\n               <String\
    \ as FromIterator<Box<str>>>\n               <String as FromIterator<Cow<'a, str>>>\n\
    \               <String as FromIterator<String>>\n               <String as FromIterator<char>>\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter_map(|c| if is_vowel(c) {Some(c)}).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp_3231zi0.rs:13:36\n\
    \   |\n13 |     text.chars().filter_map(|c| if is_vowel(c) {Some(c)}).collect()\n\
    \   |                                    ^^^^^^^^ not found in this scope\n\n\
    error[E0317]: `if` may be missing an `else` clause\n  --> /tmp/tmp_3231zi0.rs:13:33\n\
    \   |\n13 |     text.chars().filter_map(|c| if is_vowel(c) {Some(c)}).collect()\n\
    \   |                                 ^^^^^^^^^^^^^^^^-------^\n   |         \
    \                        |               |\n   |                             \
    \    |               found here\n   |                                 expected\
    \ `()`, found enum `Option`\n   |\n   = note: expected unit type `()`\n      \
    \             found enum `Option<char>`\n   = note: `if` expressions without `else`\
    \ evaluate to `()`\n   = help: consider adding an `else` block that evaluates\
    \ to the expected type\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0317, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0317`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text.is_empty() {\n        text\n    } else {\n        let\
    \ mut vowels: HashSet<char> = HashSet::new();\n        for letter in text.chars()\
    \ {\n            if !vowels.contains(&letter) {\n                vowels.insert(letter);\n\
    \            }\n        }\n        text.rev().collect::<String>().filter_map(move\
    \ |c| {\n            if !vowels.contains(&c) {\n                c\n          \
    \  } else {\n                None\n            }\n        }).collect()\n    }\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpdkmv1od6.rs:16:25\n\
    \   |\n16 |         let mut vowels: HashSet<char> = HashSet::new();\n   |    \
    \                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpdkmv1od6.rs:16:41\n\
    \   |\n16 |         let mut vowels: HashSet<char> = HashSet::new();\n   |    \
    \                                     ^^^^^^^ not found in this scope\n   |\n\
    help: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0599]: `String` is not an iterator\n   --> /tmp/tmpdkmv1od6.rs:22:14\n\
    \    |\n22  |           text.rev().collect::<String>().filter_map(move |c| {\n\
    \    |                ^^^ `String` is not an iterator; try calling `.chars()`\
    \ or `.bytes()`\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `String: Iterator`\n            which is required by `&mut String:\
    \ Iterator`\n            `str: Iterator`\n            which is required by `&mut\
    \ str: Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0412, E0433, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| c.is_alphabetic() && c.is_uppercase())\n\
    \        .filter(|c| !vowels.contains(&c))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `vowels` in this scope\n  --> /tmp/tmpag0l0es6.rs:15:22\n\
    \   |\n15 |         .filter(|c| !vowels.contains(&c))\n   |                  \
    \    ^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| vowels.contains(c.to_string()))\n\
    \        .map(|c| c.to_string())\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `vowels` in this scope\n  --> /tmp/tmphund6bng.rs:14:21\n\
    \   |\n14 |         .filter(|c| vowels.contains(c.to_string()))\n   |        \
    \             ^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text == \"\" {\n        return \"\";\n    }\n    let mut\
    \ chars = text.chars();\n    chars.retain(|c| !is_vowel(c));\n    text.remove(chars);\n\
    \    text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp17a5rp48.rs:17:23\n\
    \   |\n17 |     chars.retain(|c| !is_vowel(c));\n   |                       ^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp17a5rp48.rs:14:16\n\
    \   |\n12 | fn remove_vowels(text: String) -> String {\n   |                 \
    \                  ------ expected `String` because of return type\n13 |     if\
    \ text == \"\" {\n14 |         return \"\";\n   |                ^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                |\n   |     \
    \           expected struct `String`, found `&str`\n\nerror[E0599]: no method\
    \ named `retain` found for struct `Chars` in the current scope\n  --> /tmp/tmp17a5rp48.rs:17:11\n\
    \   |\n17 |     chars.retain(|c| !is_vowel(c));\n   |           ^^^^^^ method\
    \ not found in `Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp17a5rp48.rs:18:17\n\
    \   |\n18 |     text.remove(chars);\n   |                 ^^^^^ expected `usize`,\
    \ found struct `Chars`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !VOWELS.contains(&c)).collect()\n}\n\
    \nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `VOWELS` in this scope\n  --> /tmp/tmpl6i58t9z.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !VOWELS.contains(&c)).collect()\n   |\
    \                              ^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    match &text {\n        \"\" => \"\",\n        \"a\" => \"\"\
    ,\n        \"b\" => \"b\",\n        \"c\" => \"c\",\n        \"d\" => \"d\",\n\
    \        \"e\" => \"e\",\n        \"f\" => \"f\",\n        \"g\" => \"g\",\n \
    \       \"h\" => \"h\",\n        \"i\" => \"i\",\n        \"j\" => \"j\",\n  \
    \      \"k\" => \"k\",\n        \"l\" => \"l\",\n        \"m\" => \"m\",\n   \
    \     \"n\" => \"n\",\n        \"o\" => \"o\",\n        \"p\" => \"p\",\n    \
    \    \"q\" => \"q\",\n        \"r\" => \"r\",\n        \"s\" => \"s\",\n     \
    \   \"t\" => \"t\",\n        \"u\" => \"u\",\n        \"v\" => \"v\",\n      \
    \  \"w\" => \"w\",\n        \"x\" => \"x\",\n        \"y\" => \"y\",\n       \
    \ \"z\" => \"z\",\n        _ => \"\",\n    }\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2dscweyl.rs:14:9\n   |\n\
    13 |     match &text {\n   |           ----- this expression has type `&String`\n\
    14 |         \"\" => \"\",\n   |         ^^ expected struct `String`, found `str`\n\
    \   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2dscweyl.rs:15:9\n\
    \   |\n13 |     match &text {\n   |           ----- this expression has type `&String`\n\
    14 |         \"\" => \"\",\n15 |         \"a\" => \"\",\n   |         ^^^ expected\
    \ struct `String`, found `str`\n   |\n   = note: expected reference `&String`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2dscweyl.rs:16:9\n   |\n13 |     match &text {\n   |          \
    \ ----- this expression has type `&String`\n...\n16 |         \"b\" => \"b\",\n\
    \   |         ^^^ expected struct `String`, found `str`\n   |\n   = note: expected\
    \ reference `&String`\n              found reference `&'static str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2dscweyl.rs:17:9\n   |\n13 |     match &text\
    \ {\n   |           ----- this expression has type `&String`\n...\n17 |      \
    \   \"c\" => \"c\",\n   |         ^^^ expected struct `String`, found `str`\n\
    \   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2dscweyl.rs:18:9\n\
    \   |\n13 |     match &text {\n   |           ----- this expression has type `&String`\n\
    ...\n18 |         \"d\" => \"d\",\n   |         ^^^ expected struct `String`,\
    \ found `str`\n   |\n   = note: expected reference `&String`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2dscweyl.rs:19:9\n\
    \   |\n13 |     match &text {\n   |           ----- this expression has type `&String`\n\
    ...\n19 |         \"e\" => \"e\",\n   |         ^^^ expected struct `String`,\
    \ found `str`\n   |\n   = note: expected reference `&String`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2dscweyl.rs:20:9\n\
    \   |\n13 |     match &text {\n   |           ----- "
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter_map(|c| c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u').collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnjgxjand.rs:13:33\n   |\n\
    13 |     text.chars().filter_map(|c| c != 'a' && c != 'e' && c != 'i' && c !=\
    \ 'o' && c != 'u').collect()\n   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n   |\n   = note: expected enum `Option<_>`\n\
    \              found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n13 |     text.chars().filter_map(|c| Some(c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u')).collect()\n   |                              \
    \   +++++                                                        +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut text = text.to_lowercase();\n    let mut vowels = Vowels::new();\n\
    \    let mut non_vowels = NonVowels::new();\n    let mut buffer = String::new();\n\
    \n    for c in text.chars() {\n        if vowels.contains(&c) {\n            buffer.push(c);\n\
    \        } else {\n            non_vowels.push(c);\n        }\n    }\n\n    return\
    \ buffer.to_string();\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Vowels`\n  -->\
    \ /tmp/tmpqflaa6vo.rs:14:22\n   |\n14 |     let mut vowels = Vowels::new();\n\
    \   |                      ^^^^^^ use of undeclared type `Vowels`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `NonVowels`\n  --> /tmp/tmpqflaa6vo.rs:15:26\n\
    \   |\n15 |     let mut non_vowels = NonVowels::new();\n   |                 \
    \         ^^^^^^^^^ use of undeclared type `NonVowels`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut output = text;\n\n    for ch in text.chars() {\n  \
    \      if !is_vowel(ch) {\n            output = output.replace(ch, \"\").to_string();\n\
    \        }\n    }\n\n    output\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpmbiy0ddv.rs:16:13\n\
    \   |\n16 |         if !is_vowel(ch) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpf6k9lyp4.rs:14:22\n\
    \   |\n14 |         .filter(|c| !is_vowel(c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels: Vec<String> = vec![\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n    vowels.sort();\n    for vowel in &vowels {\n        text = text.to_lowercase();\n\
    \        text = text.chars().filter(|c| !vowel.contains(c)).collect();\n    }\n\
    \    text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphosfbgtn.rs:13:40\n   |\n\
    13 |     let mut vowels: Vec<String> = vec![\"a\", \"e\", \"i\", \"o\", \"u\"\
    ];\n   |                                        ^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                        |\n   |\
    \                                        expected struct `String`, found `&str`\n\
    \nerror[E0277]: expected a `Fn<(char,)>` closure, found `char`\n    --> /tmp/tmphosfbgtn.rs:17:56\n\
    \     |\n17   |         text = text.chars().filter(|c| !vowel.contains(c)).collect();\n\
    \     |                                               -------- ^ expected an `Fn<(char,)>`\
    \ closure, found `char`\n     |                                              \
    \ |\n     |                                               required by a bound\
    \ introduced by this call\n     |\n     = help: the trait `Fn<(char,)>` is not\
    \ implemented for `char`\n     = note: required because of the requirements on\
    \ the impl of `FnOnce<(char,)>` for `&char`\n     = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `&char`\nnote: required by\
    \ a bound in `core::str::<impl str>::contains`\nhelp: consider dereferencing here\n\
    \     |\n17   |         text = text.chars().filter(|c| !vowel.contains(*c)).collect();\n\
    \     |                                                        +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u').collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpr0cabvg9.rs:13:31\n\
    \   |\n13 |     text.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u').collect::<String>()\n   |                              \
    \ ^^ no implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpr0cabvg9.rs:13:43\n\
    \   |\n13 |     text.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u').collect::<String>()\n   |                              \
    \             ^^ no implementation for `&char == char`\n   |\n   = help: the trait\
    \ `PartialEq<char>` is not implemented for `&char`\n   = help: the trait `PartialEq`\
    \ is implemented for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpr0cabvg9.rs:13:55\n   |\n13 |     text.chars().filter(|c| c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').collect::<String>()\n \
    \  |                                                       ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpr0cabvg9.rs:13:67\n\
    \   |\n13 |     text.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u').collect::<String>()\n   |                              \
    \                                     ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n  --> /tmp/tmpr0cabvg9.rs:13:79\n   |\n13 |   \
    \  text.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u').collect::<String>()\n   |                                             \
    \                                  ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `P"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = Vec::new();\n    for ch in text.chars() {\n\
    \        if !is_vowel(ch) {\n            vowels.push(ch);\n        }\n    }\n\
    \    let mut result = String::new();\n    for ch in vowels.into_iter() {\n   \
    \     result.append(ch);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpbgzxb4md.rs:15:13\n\
    \   |\n15 |         if !is_vowel(ch) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror[E0599]: no method named `append` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpbgzxb4md.rs:21:16\n   |\n21 |         result.append(ch);\n\
    \   |                ^^^^^^ method not found in `String`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text.len() <= 0 {\n        return text;\n    }\n    let\
    \ mut text = String::new();\n    for ch in text.chars() {\n        match ch {\n\
    \            'a' .. 'z' => text.append(ch),\n            _ => continue,\n    \
    \    }\n    }\n    text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmp8s1l4uvd.rs:19:13\n\
    \   |\n19 |             'a' .. 'z' => text.append(ch),\n   |             ^^^^^^^^^^\n\
    \   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0599]: no method named `append` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmp8s1l4uvd.rs:19:32\n   |\n19 | \
    \            'a' .. 'z' => text.append(ch),\n   |                            \
    \    ^^^^^^ method not found in `String`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0599, E0658.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| c.is_lowercase())\n     \
    \   .filter(|c| !c.is_uppercase())\n        .filter(|c| !c.is_symbol())\n    \
    \    .filter(|c| !c.is_digit())\n        .filter(|c| !c.is_ascii())\n        .filter(|c|\
    \ !c.is_punctuation())\n        .filter(|c| !c.is_whitespace())\n        .filter(|c|\
    \ !c.is_alphabet())\n        .collect::<String>()\n        .into_owned()\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_symbol` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpnvkxjtvr.rs:16:24\n   |\n16 |         .filter(|c|\
    \ !c.is_symbol())\n   |                        ^^^^^^^^^ method not found in `&char`\n\
    \nerror[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpnvkxjtvr.rs:17:24\n    |\n17  |         .filter(|c| !c.is_digit())\n\
    \    |                        ^^^^^^^^- supplied 0 arguments\n    |          \
    \              |\n    |                        expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `is_punctuation`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpnvkxjtvr.rs:19:24\n\
    \   |\n19 |         .filter(|c| !c.is_punctuation())\n   |                   \
    \     ^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii_punctuation`\n\nerror[E0599]: no method named `is_alphabet` found\
    \ for reference `&char` in the current scope\n  --> /tmp/tmpnvkxjtvr.rs:21:24\n\
    \   |\n21 |         .filter(|c| !c.is_alphabet())\n   |                      \
    \  ^^^^^^^^^^^ help: there is an associated function with a similar name: `is_alphabetic`\n\
    \nerror[E0599]: no method named `into_owned` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpnvkxjtvr.rs:23:10\n   |\n23 |         .into_owned()\n\
    \   |          ^^^^^^^^^^ method not found in `String`\n\nerror: aborting due\
    \ to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| c.is_uppercase()).collect::<String>().join(\"\
    \")\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `join` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpu55t24db.rs:13:67\n   |\n13 |     text.chars().filter(|c|\
    \ c.is_uppercase()).collect::<String>().join(\"\")\n   |                     \
    \                                              ^^^^ method not found in `String`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text\n        .chars()\n        .filter(|c| is_vowel(c) &&\
    \ c != ' ')\n        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp4scmofkk.rs:15:21\n\
    \   |\n15 |         .filter(|c| is_vowel(c) && c != ' ')\n   |               \
    \      ^^^^^^^^ not found in this scope\n\nerror[E0277]: can't compare `&char`\
    \ with `char`\n  --> /tmp/tmp4scmofkk.rs:15:38\n   |\n15 |         .filter(|c|\
    \ is_vowel(c) && c != ' ')\n   |                                      ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut index = 0;\n    let mut new_string = String::new();\n\
    \    for c in text.chars() {\n        if index != 0 {\n            if c.is_lowercase()\
    \ {\n                if let Some(index) = get_vowel_index(index, &mut new_string)\
    \ {\n                    new_string = new_string.to_owned() + c.to_owned();\n\
    \                    index += 1;\n                }\n            }\n        }\n\
    \        index += 1;\n    }\n    new_string\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `get_vowel_index` in this scope\n  -->\
    \ /tmp/tmp7_tv5xgj.rs:18:38\n   |\n18 |                 if let Some(index) = get_vowel_index(index,\
    \ &mut new_string) {\n   |                                      ^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7_tv5xgj.rs:19:58\n\
    \   |\n19 |                     new_string = new_string.to_owned() + c.to_owned();\n\
    \   |                                                          ^^^^^^^^^^^^ expected\
    \ `&str`, found `char`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // Create a regular expression to find all the vowels in the\
    \ string\n    // We can also use the unicode.categories() method here\n    //\
    \ to see what it returns.\n    let vowels = R\"([AEIOUYaeiou])\";\n    // The\
    \ pattern will match any character between A and Z.\n    let pattern = String::from(vowels);\n\
    \    let re = Regex::new(pattern).unwrap();\n    // Apply the regex to the string\n\
    \    let re = String::from(re).unwrap();\n    let result = re.find_iter(&text).map(|m|\
    \ m.as_str()).collect();\n    // Remove any matches from the string\n    let result\
    \ = result.filter(|m| !m.is_empty()).collect();\n    // Return the string with\
    \ the vowels removed\n    result.join(\"\")\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator,\
    \ found `\"([AEIOUYaeiou])\"`\n  --> /tmp/tmpc_dz_qr5.rs:16:19\n   |\n16 |   \
    \  let vowels = R\"([AEIOUYaeiou])\";\n   |                   ^^^^^^^^^^^^^^^^^\
    \ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text.is_empty() {\n        return text;\n    }\n\n    let\
    \ mut vowels: Vec<&str> = vec![];\n    let mut i: usize = 0;\n    while i < text.len()\
    \ {\n        if !is_vowel(&text[i]) {\n            vowels.push(&text[i]);\n  \
    \          i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\n\
    \    let mut result = String::new();\n    for v in vowels.into_iter() {\n    \
    \    result = result.push_str(&*v);\n    }\n\n    result\n}\n\nfn main() {\n \
    \   let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp86f9nouf.rs:20:13\n\
    \   |\n20 |         if !is_vowel(&text[i]) {\n   |             ^^^^^^^^ not found\
    \ in this scope\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp86f9nouf.rs:20:23\n   |\n20 |         if !is_vowel(&text[i]) {\n\
    \   |                       ^^^^^^^ `String` cannot be indexed by `usize`\n  \
    \ |\n   = help: the trait `Index<usize>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp86f9nouf.rs:21:26\n   |\n21 |             vowels.push(&text[i]);\n\
    \   |                          ^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp86f9nouf.rs:30:18\n\
    \   |\n28 |     let mut result = String::new();\n   |                      -------------\
    \ expected due to this value\n29 |     for v in vowels.into_iter() {\n30 |   \
    \      result = result.push_str(&*v);\n   |                  ^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `()`\n   |\nnote: method `push_str` modifies\
    \ its receiver in-place\n  --> /tmp/tmp86f9nouf.rs:30:25\n   |\n30 |         result\
    \ = result.push_str(&*v);\n   |     "
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| {\n            if let Some('a')\
    \ = c {\n                let _ = c.ascii_lowercase();\n                true //\
    \ keep this char\n            } else if let Some('e') = c {\n                let\
    \ _ = c.ascii_lowercase();\n                true // keep this char\n         \
    \   } else if let Some('i') = c {\n                let _ = c.ascii_lowercase();\n\
    \                true // keep this char\n            } else if let Some('o') =\
    \ c {\n                let _ = c.ascii_lowercase();\n                true // keep\
    \ this char\n            } else if let Some('u') = c {\n                let _\
    \ = c.ascii_lowercase();\n                true // keep this char\n           \
    \ } else if let Some('Y') = c {\n                let _ = c.ascii_lowercase();\n\
    \                true // keep this char\n            } else if let Some('y') =\
    \ c {\n                let _ = c.ascii_lowercase();\n                true // keep\
    \ this char\n            } else if let Some('K') = c {\n                let _\
    \ = c.ascii_lowercase();\n                true // keep this char\n           \
    \ } else if let Some('k') = c {\n                let _ = c.ascii_lowercase();\n\
    \                true // keep this char\n            } else if let Some('R') =\
    \ c {\n                let _ = c.ascii_lowercase();\n                true // keep\
    \ this char\n            } else if let Some('r') = c {\n                let _\
    \ = c.ascii_lowercase();\n                true // keep this char\n           \
    \ } else if let Some('L') = c {\n                let _ = c.ascii_lowercase();\n\
    \                true // keep this char\n            } else if let Some('l') =\
    \ c {\n                let _ = c.ascii_lowercase();\n                true // keep\
    \ this char\n            } else if let Some('S') = c {\n                let _\
    \ = c.ascii_lowercase();\n                true // keep this char\n           \
    \ } else if let Some('s') = c {\n                let _ = c.ascii_lowercase();\n\
    \                true // keep this char\n            } else if let Some('H') =\
    \ c {\n                let _ = c.ascii_lowercase();\n                true // keep\
    \ this char\n            } else if let Some('h') = c {\n                let _\
    \ = c.ascii_lowercase();\n                true // keep this char\n           \
    \ } else {\n                false // drop this char\n            }\n        })\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3a55qbo_.rs:15:20\n   |\n\
    15 |             if let Some('a') = c {\n   |                    ^^^^^^^^^   -\
    \ this expression has type `&char`\n   |                    |\n   |          \
    \          expected `char`, found enum `Option`\n   |\n   = note: expected type\
    \ `char`\n              found enum `Option<_>`\n\nerror[E0599]: no method named\
    \ `ascii_lowercase` found for reference `&char` in the current scope\n  --> /tmp/tmp3a55qbo_.rs:16:27\n\
    \   |\n16 |                 let _ = c.ascii_lowercase();\n   |               \
    \            ^^^^^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_ascii_lowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3a55qbo_.rs:18:27\n\
    \   |\n18 |             } else if let Some('e') = c {\n   |                  \
    \         ^^^^^^^^^   - this expression has type `&char`\n   |               \
    \            |\n   |                           expected `char`, found enum `Option`\n\
    \   |\n   = note: expected type `char`\n              found enum `Option<_>`\n\
    \nerror[E0599]: no method named `ascii_lowercase` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmp3a55qbo_.rs:19:27\n   |\n19 |          \
    \       let _ = c.ascii_lowercase();\n   |                           ^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii_lowercase`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3a55qbo_.rs:21:27\n   |\n21 |\
    \             } else if let Some('i') = c {\n   |                           ^^^^^^^^^\
    \   - this expression has type `&char`\n   |                           |\n   |\
    \                           expected `char`, found enum `Option`\n   |\n   = note:\
    \ expected type `char`\n              found enum `Option<_>`\n\nerror[E0599]:\
    \ no method named `ascii_lowercase` found for reference `&char` in the current\
    \ scope\n  --> /tmp/tmp3a55qbo_.rs:22:27\n   |\n22 |                 let _ = c.ascii_lowercase();\n\
    \   |                           ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii_lowercase`\n\nerror[E0308]: mismatched types\n\
    \  "
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    vowels.sort_unstable_by_key(|v| v.cmp(&'a'));\n  \
    \  for (char, index) in text.chars().enumerate() {\n        if !vowels.contains(&char)\
    \ {\n            result.push(char);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprzbq1_og.rs:17:29\n   |\n\
    17 |         if !vowels.contains(&char) {\n   |                             ^^^^^\
    \ expected `char`, found `usize`\n   |\n   = note: expected reference `&char`\n\
    \              found reference `&usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmprzbq1_og.rs:18:25\n   |\n18 |             result.push(char);\n   | \
    \                        ^^^^ expected `char`, found `usize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !is_vowel(c) {\n            result.push(c);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpcf143bue.rs:15:13\n\
    \   |\n15 |         if !is_vowel(c) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_uppercase())\n    \
    \    .filter(|c| !c.is_lowercase())\n        .map(|c| c.to_uppercase())\n    \
    \    .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `ToUppercase`\n    --> /tmp/tmpy1sok0th.rs:17:10\n   \
    \  |\n17   |         .collect()\n     |          ^^^^^^^ value of type `String`\
    \ cannot be built from `std::iter::Iterator<Item=ToUppercase>`\n     |\n     =\
    \ help: the trait `FromIterator<ToUppercase>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if !text.contains(&str::from_utf8_lossy(&CHARS_LOWER)) {\n\
    \        return text;\n    }\n    let mut result = String::new();\n    for c in\
    \ text.chars() {\n        if !vowel(c) {\n            result.push(c);\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `CHARS_LOWER` in this scope\n  --> /tmp/tmp11y0ab74.rs:13:46\n\
    \   |\n13 |     if !text.contains(&str::from_utf8_lossy(&CHARS_LOWER)) {\n   |\
    \                                              ^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `vowel` in this scope\n  --> /tmp/tmp11y0ab74.rs:18:13\n\
    \   |\n18 |         if !vowel(c) {\n   |             ^^^^^ not found in this scope\n\
    \nerror[E0599]: no function or associated item named `from_utf8_lossy` found for\
    \ type `str` in the current scope\n  --> /tmp/tmp11y0ab74.rs:13:29\n   |\n13 |\
    \     if !text.contains(&str::from_utf8_lossy(&CHARS_LOWER)) {\n   |         \
    \                    ^^^^^^^^^^^^^^^ function or associated item not found in\
    \ `str`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text.is_empty() {\n        return text;\n    }\n    let\
    \ mut to_remove = Vec::new();\n    for vowel in &vowels {\n        to_remove.push(*vowel);\n\
    \    }\n    for character in &text {\n        if !to_remove.contains(&character)\
    \ {\n            to_remove.push(character);\n        }\n    }\n    let mut removed\
    \ = text;\n    for character in &to_remove {\n        removed = removed.replace(character,\
    \ \"\");\n    }\n    removed\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `vowels` in this scope\n  --> /tmp/tmph6_dw6do.rs:17:19\n\
    \   |\n17 |     for vowel in &vowels {\n   |                   ^^^^^^ not found\
    \ in this scope\n\nerror[E0277]: `&String` is not an iterator\n  --> /tmp/tmph6_dw6do.rs:20:22\n\
    \   |\n20 |     for character in &text {\n   |                      ^^^^^ `&String`\
    \ is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `&String`\n   = note: required because of the requirements on the impl of\
    \ `IntoIterator` for `&String`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];\n\
    \    vowels.sort_unstable();\n    let mut new_text = text;\n    for vowel in vowels\
    \ {\n        new_text = new_text.replace(vowel, \"\");\n    }\n    new_text\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"ae\\ni\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpu_z361st.rs:25:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut output = String::new();\n    for ch in text.chars()\
    \ {\n        if !is_vowel(ch) {\n            output.push(*ch);\n        }\n  \
    \  }\n    output\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp7df94h08.rs:15:13\n\
    \   |\n15 |         if !is_vowel(ch) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp7df94h08.rs:16:25\n\
    \   |\n16 |             output.push(*ch);\n   |                         ^^^\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0614.\nFor more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text.is_empty() {\n        text\n    } else {\n        let\
    \ mut output = String::new();\n        for char in text.chars() {\n          \
    \  if !vowels::contains_key(&char) {\n                output.push(*char);\n  \
    \          }\n        }\n        output\n    }\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `vowels`\n\
    \  --> /tmp/tmpassx_kqz.rs:18:17\n   |\n18 |             if !vowels::contains_key(&char)\
    \ {\n   |                 ^^^^^^ use of undeclared crate or module `vowels`\n\n\
    error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpassx_kqz.rs:19:29\n\
    \   |\n19 |                 output.push(*char);\n   |                        \
    \     ^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0614.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.to_lowercase().chars().filter_map(|c| if c.is_vowel()\
    \ {\n        None\n    } else {\n        Some(c)\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpk0qbyto9.rs:13:53\n   |\n13 |     text.to_lowercase().chars().filter_map(|c|\
    \ if c.is_vowel() {\n   |                                                    \
    \ ^^^^^^^^ method not found in `char`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| c.is_alphabetic() + c.is_upper())\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpempeernl.rs:14:43\n   |\n14 |         .filter(|c|\
    \ c.is_alphabetic() + c.is_upper())\n   |                                    \
    \       ^^^^^^^^ help: there is an associated function with a similar name: `is_uppercase`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    remove_vowels_iterative(text)\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `remove_vowels_iterative` in this scope\n\
    \  --> /tmp/tmp5dynqm2d.rs:13:5\n   |\n13 |     remove_vowels_iterative(text)\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for char in text.chars()\
    \ {\n        if !Vowels::contains(char) {\n            result.push(char);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Vowels`\n  -->\
    \ /tmp/tmp_mq_nmdd.rs:15:13\n   |\n15 |         if !Vowels::contains(char) {\n\
    \   |             ^^^^^^ use of undeclared type `Vowels`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c|\n        matches!(c, \"a..zA..z\".to_vec()).unwrap_or(false))\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: no rules expected the token `.`\n  --> /tmp/tmpywonqh6s.rs:14:31\n\
    \   |\n14 |         matches!(c, \"a..zA..z\".to_vec()).unwrap_or(false))\n   |\
    \                               ^ no rules expected this token in macro call\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|x| !is_vowel(x)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpz5wlc65a.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|x| !is_vowel(x)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut index = text.len();\n    let mut char: char;\n    let\
    \ mut index = 0;\n    while index > -1 {\n        char = text[index];\n      \
    \  if char == ' ' || char == '\\n' || char == '\\r' || char == ',' || char ==\
    \ '.' || char == '!' || char == '?' || char == ';' || char == '-' || char == '_'\
    \ || char == '\\\\' || char == '(' || char == ')' || char == '[' || char == ']'\
    \ || char == '%' || char == '&' || char == '@' || char == '#' || char == '$' ||\
    \ char == '^' || char == '~' || char == '*' || char == '+' || char == '=' || char\
    \ == '\\\\' || char == ';' || char == ':' || char == '<' || char == '>' || char\
    \ == '|' || char == '\\'' || char == '\"' || char == '?' || char == '\"' || char\
    \ == '-' || char == '^' || char == '_' || char == '|' || char == '`' || char ==\
    \ '{' || char == '}' || char == '~' || char == '-' || char == '_' || char == '&'\
    \ || char == '.' || char == '-' || char == '|' || char == ';' || char == '*' ||\
    \ char == '+' || char == '}' || char == ']' || char == '{' || char == ',' || char\
    \ == '<' || char == '>' || char == '/' || char == '.' || char == '?' || char ==\
    \ '!' || char == '$' || char == '^' || char == '%' || char == '*' || char == '/'\
    \ || char == '(' || char == ')' || char == '[' || char == ']' || char == '=' ||\
    \ char == '<' || char == '>' || char == ']' || char == '\"' || char == '<' ||\
    \ char == '>' || char == '\\'' || char == '%' || char == '^' || char == '_' ||\
    \ char == '%' || char == '*' || char == '+' || char == '-' || char == '*' || char\
    \ == '=' || char == '(' || char == ')' || char == '{' || char == ')' || char ==\
    \ '[' || char == ']' || char == '|' || char == '.' || char == '!' || char == '?'\
    \ || char == '{' || char == '}' || char == '~' || char == '@' || char == '#' ||\
    \ char == '$' || char == '\"' || char == '\"' || char == '<' || char == '>' ||\
    \ char == '[' || char == ']' || char == '=' || char == '<' || char == '>' || char\
    \ == '<' || char == '>' || char == '|' || char == '-' || char == '_' || char ==\
    \ '-' || char == '\n}\n\nfn main() {\n    let candidate = remove_vowels;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp0fyedh79.rs:18:1811\n\
    \   |\n18 | ...ar == '|' || char == '-' || char == '_' || char == '-' || char\
    \ == '\n   |                                                                 \
    \     ^\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut newText = text;\n    for (i, c) in newText.chars().enumerate()\
    \ {\n        if !is_vowel(c) {\n            newText.push_str(&text[..i]);\n  \
    \      }\n    }\n    newText\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp09997mwv.rs:15:13\n\
    \   |\n15 |         if !is_vowel(c) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    remove_vowels_impl(text)\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `remove_vowels_impl` in this scope\n\
    \  --> /tmp/tmp4lt12iu_.rs:13:5\n   |\n13 |     remove_vowels_impl(text)\n   |\
    \     ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    match text {\n        \"aeiouAEIOU\" => \"\",\n        \"aeiouAEIOU\"\
    .to_string() => \"A\".to_string(),\n        \"AEIOUaeiou\".to_string() => \"AEIOU\"\
    .to_string(),\n        text.to_string() => text,\n        _ => text.to_lowercase().replace(\"\
    aeiouAEIOU\", \"\").to_string()\n    }\n}\n\nfn main() {\n    let candidate =\
    \ remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `...`, `..=`, `..`, `=>`, `if`, or `|`, found `.`\n\
    \  --> /tmp/tmp_y82qwou.rs:15:21\n   |\n15 |         \"aeiouAEIOU\".to_string()\
    \ => \"A\".to_string(),\n   |                     ^ expected one of `...`, `..=`,\
    \ `..`, `=>`, `if`, or `|`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_y82qwou.rs:14:9\n\
    \   |\n13 |     match text {\n   |           ---- this expression has type `String`\n\
    14 |         \"aeiouAEIOU\" => \"\",\n   |         ^^^^^^^^^^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_y82qwou.rs:14:25\n\
    \   |\n12 | fn remove_vowels(text: String) -> String {\n   |                 \
    \                  ------ expected `String` because of return type\n13 |     match\
    \ text {\n14 |         \"aeiouAEIOU\" => \"\",\n   |                         ^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \       |\n   |                         expected struct `String`, found `&str`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| vowels.contains(&c).unwrap_or(false))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `vowels` in this scope\n  --> /tmp/tmp11jjx4dm.rs:14:21\n\
    \   |\n14 |         .filter(|c| vowels.contains(&c).unwrap_or(false))\n   |  \
    \                   ^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_string = \"\";\n    for ch in text.chars() {\n\
    \        let ch = match ch {\n            'a' | 'e' | 'i' | 't' | '.' => ch as\
    \ char,\n            _ => continue,\n        };\n        if !vowels.contains(&ch)\
    \ {\n            new_string += ch;\n        }\n    }\n    new_string\n}\n\nfn\
    \ main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `vowels` in this scope\n  --> /tmp/tmptl_l5t3h.rs:19:13\n\
    \   |\n19 |         if !vowels.contains(&ch) {\n   |             ^^^^^^ not found\
    \ in this scope\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `&str`\n  --> /tmp/tmptl_l5t3h.rs:20:13\n   |\n20 |             new_string\
    \ += ch;\n   |             ----------^^^^^^\n   |             |\n   |        \
    \     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmptl_l5t3h.rs:23:5\n   |\n12 | fn remove_vowels(text: String) -> String\
    \ {\n   |                                   ------ expected `String` because of\
    \ return type\n...\n23 |     new_string\n   |     ^^^^^^^^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |     |\n   |     expected struct `String`,\
    \ found `&str`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0368, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // TODO: use regex and remove vowels\n    for ch in text {\n\
    \        if ch == 'a' || ch == 'A' || ch == 'e' || ch == 'E' || ch == 'i' || ch\
    \ == 'I' || ch == 'o' || ch == 'O' || ch == 'u' || ch == 'U' {\n            text.swap(ch,\
    \ \"\");\n        }\n    }\n    text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `String` is not an iterator\n  --> /tmp/tmp9gs_syvj.rs:14:15\n\
    \   |\n14 |     for ch in text {\n   |               ^^^^ `String` is not an iterator;\
    \ try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator`\
    \ is not implemented for `String`\n   = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `String`\n\nerror[E0599]: no method named\
    \ `swap` found for struct `String` in the current scope\n  --> /tmp/tmp9gs_syvj.rs:16:18\n\
    \   |\n16 |             text.swap(ch, \"\");\n   |                  ^^^^ method\
    \ not found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for &c in text.chars()\
    \ {\n        if !is_vowel(c) && c != 'z' && c != 'Z' {\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpe8964s2w.rs:15:13\n\
    \   |\n15 |         if !is_vowel(c) && c != 'z' && c != 'Z' {\n   |          \
    \   ^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpe8964s2w.rs:14:9\n   |\n14 |     for &c in text.chars() {\n   |    \
    \     ^^    ------------ this expression has type `Option<char>`\n   |       \
    \  |\n   |         expected `char`, found reference\n   |         help: you can\
    \ probably remove the explicit borrow: `c`\n   |\n   = note:   expected type `char`\n\
    \           found reference `&_`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut chars: Vec<char> = text.chars().collect();\n    for\
    \ (i, c) in chars.iter().enumerate() {\n        match c {\n            'a' | ('B'\
    \ as char) => chars.remove(i);\n            'e' | 'i' | ('J' as char) => chars.remove(i);\n\
    \            'o' | 'u' | ('R' as char) => chars.remove(i);\n            'A' |\
    \ ('b' as char) => chars.remove(i);\n            'E' | ('i' as char) => chars.remove(i);\n\
    \            'O' | ('u' as char) => chars.remove(i);\n            'Z' => chars.remove(i);\n\
    \            _ => ()\n        }\n    }\n    chars.into_iter().collect()\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found keyword `as`\n  --> /tmp/tmp5ml4ap34.rs:16:24\n\
    \   |\n16 |             'a' | ('B' as char) => chars.remove(i);\n   |        \
    \                ^^ expected identifier, found keyword\n\nerror: expected one\
    \ of `)`, `,`, `...`, `..=`, `..`, or `|`, found keyword `as`\n  --> /tmp/tmp5ml4ap34.rs:16:24\n\
    \   |\n16 |             'a' | ('B' as char) => chars.remove(i);\n   |        \
    \               -^^ expected one of `)`, `,`, `...`, `..=`, `..`, or `|`\n   |\
    \                       |\n   |                       help: missing `,`\n\nerror:\
    \ expected one of `)`, `,`, `@`, or `|`, found `char`\n  --> /tmp/tmp5ml4ap34.rs:16:27\n\
    \   |\n16 |             'a' | ('B' as char) => chars.remove(i);\n   |        \
    \                  -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |         \
    \                 |\n   |                          help: missing `,`\n\nerror:\
    \ expected one of `,`, `.`, `?`, `}`, or an operator, found `;`\n  --> /tmp/tmp5ml4ap34.rs:16:51\n\
    \   |\n16 |             'a' | ('B' as char) => chars.remove(i);\n   |        \
    \                         --                ^ expected one of `,`, `.`, `?`, `}`,\
    \ or an operator\n   |                                 |\n   |               \
    \                  while parsing the `match` arm starting here\n\nerror: aborting\
    \ due to 4 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // TODO: Replace this implementation by the standard solution.\n\
    \    text.chars().filter(|c|\n        c.is_lowercase() && c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u'\n    )\n        .chain(|c| c.is_uppercase()\
    \ && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\n        .collect::<String>()\n\
    \        .join(\"\")\n}\n\nfn main() {\n    let candidate = remove_vowels;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp75ezlndm.rs:15:31\n\
    \   |\n15 |         c.is_lowercase() && c != 'a' && c != 'e' && c != 'i' && c\
    \ != 'o' && c != 'u'\n   |                               ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp75ezlndm.rs:15:43\n\
    \   |\n15 |         c.is_lowercase() && c != 'a' && c != 'e' && c != 'i' && c\
    \ != 'o' && c != 'u'\n   |                                           ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp75ezlndm.rs:15:55\n\
    \   |\n15 |         c.is_lowercase() && c != 'a' && c != 'e' && c != 'i' && c\
    \ != 'o' && c != 'u'\n   |                                                   \
    \    ^^ no implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp75ezlndm.rs:15:67\n\
    \   |\n15 |         c.is_lowercase() && c != 'a' && c != 'e' && c != 'i' && c\
    \ != 'o' && c != 'u'\n   |                                                   \
    \                ^^ no implementation for `&char == char`\n   |\n   = help: the\
    \ trait `PartialEq<char>` is not implemented for `&char`\n   = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror[E0277]: can't compare `&char`\
    \ with `char`\n  --> /tmp/tmp75ezlndm.rs:15:79\n   |\n15 |         c.is_lowercase()\
    \ && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'\n   |          \
    \                                                                     ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = String::new();\n    vowels.push_str(&vowels);\n\
    \    remove_vowels_helper(text, &vowels);\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `remove_vowels_helper` in this scope\n\
    \  --> /tmp/tmp0_v822g8.rs:15:5\n   |\n15 |     remove_vowels_helper(text, &vowels);\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0_v822g8.rs:12:35\n   |\n12 | fn remove_vowels(text: String)\
    \ -> String {\n   |    -------------                  ^^^^^^ expected struct `String`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_string = text;\n    new_string\n        .chars()\n\
    \        .filter(|c| !is_vowel(c))\n        .for_each(|c| new_string = new_string.chars().collect::<String>().concat(c));\n\
    \    new_string\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpxszkh9nw.rs:16:22\n\
    \   |\n16 |         .filter(|c| !is_vowel(c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror[E0599]: no method named `concat` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmpxszkh9nw.rs:17:75\n   |\n\
    17 |         .for_each(|c| new_string = new_string.chars().collect::<String>().concat(c));\n\
    \   |                                                                        \
    \   ^^^^^^ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text.chars().any(|c|\n        c.to_ascii_lowercase().contains('a')\
    \ ||\n        c.to_ascii_lowercase().contains('e') ||\n        c.to_ascii_lowercase().contains('i')\
    \ ||\n        c.to_ascii_lowercase().contains('o') ||\n        c.to_ascii_lowercase().contains('u')\
    \ ||\n        c != 'z'\n    ) {\n        text\n    } else {\n        text\n  \
    \          .chars()\n            .filter(|c| c != 'z' && c.to_ascii_lowercase().contains('a')\
    \ ||\n                c.to_ascii_lowercase().contains('e') ||\n              \
    \  c.to_ascii_lowercase().contains('i') ||\n                c.to_ascii_lowercase().contains('o')\
    \ ||\n                c.to_ascii_lowercase().contains('u'))\n            .collect()\n\
    \            .join(\"\")\n    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `contains` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpbl7a52cp.rs:14:32\n   |\n14 |         c.to_ascii_lowercase().contains('a')\
    \ ||\n   |                                ^^^^^^^^ method not found in `char`\n\
    \nerror[E0599]: no method named `contains` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpbl7a52cp.rs:15:32\n   |\n15 |         c.to_ascii_lowercase().contains('e')\
    \ ||\n   |                                ^^^^^^^^ method not found in `char`\n\
    \nerror[E0599]: no method named `contains` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpbl7a52cp.rs:16:32\n   |\n16 |         c.to_ascii_lowercase().contains('i')\
    \ ||\n   |                                ^^^^^^^^ method not found in `char`\n\
    \nerror[E0599]: no method named `contains` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpbl7a52cp.rs:17:32\n   |\n17 |         c.to_ascii_lowercase().contains('o')\
    \ ||\n   |                                ^^^^^^^^ method not found in `char`\n\
    \nerror[E0599]: no method named `contains` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpbl7a52cp.rs:18:32\n   |\n18 |         c.to_ascii_lowercase().contains('u')\
    \ ||\n   |                                ^^^^^^^^ method not found in `char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpbl7a52cp.rs:25:27\n\
    \   |\n25 |             .filter(|c| c != 'z' && c.to_ascii_lowercase().contains('a')\
    \ ||\n   |                           ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0599]: no\
    \ method named `contains` found for type `char` in the current scope\n  --> /tmp/tmpbl7a52cp.rs:25:60\n\
    \   |\n25 |             .filter(|c| c != 'z' && c.to_ascii_lowercase().contains('a')\
    \ ||\n   |                                                            ^^^^^^^^\
    \ method not found in `char`\n\nerror[E0599]: no method named `contains` found\
    \ for type `char` in the current scope\n  --> /tmp/tmpbl7a52cp.rs:26:40\n   |\n\
    26 |            "
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !ascii_vowels.contains(c))\n\
    \        .collect()\n        .collect()\n        .join('')\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: empty character literal\n  --> /tmp/tmpgks_r8rm.rs:17:16\n   |\n\
    17 |         .join('')\n   |                ^ empty character literal\n\nerror[E0425]:\
    \ cannot find value `ascii_vowels` in this scope\n  --> /tmp/tmpgks_r8rm.rs:14:22\n\
    \   |\n14 |         .filter(|c| !ascii_vowels.contains(c))\n   |             \
    \         ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut index = 0;\n    while index < text.len() {\n      \
    \  match &text[index] {\n            \"a\" | \"e\" | \"i\" | \"o\" | \"u\" =>\
    \ index += 1,\n            \"A\" | \"E\" | \"I\" | \"O\" | \"U\" => index += 1,\n\
    \            c => index += 1,\n        }\n    }\n    text\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpcty47p2h.rs:15:16\n\
    \   |\n15 |         match &text[index] {\n   |                ^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c|\n        !(*c as u32 in 0xAC00..0xD7AF)\
    \ ||\n        !(*c as u32 in 0xD7B0..0xD7FF) ||\n        !(*c as u32 in 0xE000..0xFDCF)\
    \ ||\n        !(*c as u32 in 0xFDF0..0xFDEF) ||\n        !(*c as u32 in 0xFE10..0xFE1F))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `(`, `)`, `,`, `.`, `::`, `<`, or `?`, found\
    \ keyword `in`\n  --> /tmp/tmpep23wrq3.rs:14:21\n   |\n14 |         !(*c as u32\
    \ in 0xAC00..0xD7AF) ||\n   |                     ^^ expected one of 8 possible\
    \ tokens\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    String::from(text).chars().filter(|c| {\n        // A \"good\"\
    \ vowel is any character between 'a' and 'o'\n        c >= 'a' && c <= 'o'\n \
    \   }).collect();\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwjplza6s.rs:15:14\n   |\n\
    15 |         c >= 'a' && c <= 'o'\n   |              ^^^\n   |              |\n\
    \   |              expected `&char`, found `char`\n   |              help: consider\
    \ borrowing here: `&'a'`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwjplza6s.rs:15:26\n\
    \   |\n15 |         c >= 'a' && c <= 'o'\n   |                          ^^^\n\
    \   |                          |\n   |                          expected `&char`,\
    \ found `char`\n   |                          help: consider borrowing here: `&'o'`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwjplza6s.rs:12:35\n   |\n12 |\
    \ fn remove_vowels(text: String) -> String {\n   |    -------------          \
    \        ^^^^^^ expected struct `String`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n...\n16 |     }).collect();\n\
    \   |                 - help: remove this semicolon\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut res = String::new();\n    for ch in text {\n      \
    \  if !contains_vowel(ch) {\n            res.push_str(ch);\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `contains_vowel` in this scope\n  -->\
    \ /tmp/tmpvhprunpk.rs:15:13\n   |\n15 |         if !contains_vowel(ch) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0277]: `String`\
    \ is not an iterator\n  --> /tmp/tmpvhprunpk.rs:14:15\n   |\n14 |     for ch in\
    \ text {\n   |               ^^^^ `String` is not an iterator; try calling `.chars()`\
    \ or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for\
    \ `String`\n   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // TODO: Use `is_in_set` to improve this algorithm\n    //\
    \ Hint: check out `is_vowel_in_set`\n    text.chars()\n        .filter(|c| c !='a'\
    \ && c !='A' && c !='e' && c !='E' && c !='i' && c !='I' && c !='o' && c !='O'\
    \ && c !='u' && c !='U')\n        .collect::<String>()\n        .join(\"\")\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpa422h0yk.rs:16:23\n\
    \   |\n16 |         .filter(|c| c !='a' && c !='A' && c !='e' && c !='E' && c\
    \ !='i' && c !='I' && c !='o' && c !='O' && c !='u' && c !='U')\n   |        \
    \               ^^ no implementation for `&char == char`\n   |\n   = help: the\
    \ trait `PartialEq<char>` is not implemented for `&char`\n   = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror[E0277]: can't compare `&char`\
    \ with `char`\n  --> /tmp/tmpa422h0yk.rs:16:34\n   |\n16 |         .filter(|c|\
    \ c !='a' && c !='A' && c !='e' && c !='E' && c !='i' && c !='I' && c !='o' &&\
    \ c !='O' && c !='u' && c !='U')\n   |                                  ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpa422h0yk.rs:16:45\n\
    \   |\n16 |         .filter(|c| c !='a' && c !='A' && c !='e' && c !='E' && c\
    \ !='i' && c !='I' && c !='o' && c !='O' && c !='u' && c !='U')\n   |        \
    \                                     ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n  --> /tmp/tmpa422h0yk.rs:16:56\n   |\n16 |   \
    \      .filter(|c| c !='a' && c !='A' && c !='e' && c !='E' && c !='i' && c !='I'\
    \ && c !='o' && c !='O' && c !='u' && c !='U')\n   |                         \
    \                               ^^ no implementation for `&char == char`\n   |\n\
    \   = help: the trait `PartialEq<char>` is not implemented for `&char`\n   = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't compare\
    \ `&char` with `char`\n  --> /tmp/tmpa422h0yk.rs:16:67\n   |\n16 |         .filter(|c|\
    \ c !='a' && c !='A' && c !='e' && c !='E' && c !='i' && c !='I' && c !='o' &&\
    \ c !='O' && c !='u' && c !='U')\n   |                                       \
    \                            ^^ no imp"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    let mut\
    \ result = String::new();\n    let mut vowels: Vec<&str> = vec!['A', 'B', 'C',\
    \ 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\
    \ 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    let mut c: char = 'a';\n    for c in\
    \ text.chars() {\n        if !vowels.contains(&c) {\n            result.append(&mut\
    \ c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp24dpqorl.rs:14:16\n   |\n\
    12 | fn remove_vowels(text: String) -> String {\n   |                        \
    \           ------ expected `String` because of return type\n13 |     if text\
    \ == \"\" {\n14 |         return \"\"\n   |                ^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                |\n   |           \
    \     expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp24dpqorl.rs:17:38\n   |\n17 |     let mut vowels: Vec<&str> = vec!['A',\
    \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\
    \ 'R', 'S', 'T', ...\n   |                                      ^^^ expected `&str`,\
    \ found `char`\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n17 |     let mut vowels: Vec<&str> = vec![\"A\", 'B', 'C', 'D',\
    \ 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\
    \ 'U', 'V', 'W', 'X', 'Y', 'Z'];\n   |                                      ~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp24dpqorl.rs:20:29\n   |\n20 |\
    \         if !vowels.contains(&c) {\n   |                             ^^ expected\
    \ `&str`, found `char`\n   |\n   = note: expected reference `&&str`\n        \
    \      found reference `&char`\n\nerror[E0599]: no method named `append` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmp24dpqorl.rs:21:20\n\
    \   |\n21 |             result.append(&mut c);\n   |                    ^^^^^^\
    \ method not found in `String`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.to_lowercase().chars().filter(|&c| c !~ _VOWELS.chars().any(|c|\
    \ c == c)).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `(`, `[`, or `{`, found `~`\n  --> /tmp/tmpvg1b1dm6.rs:13:48\n\
    \   |\n13 |     text.to_lowercase().chars().filter(|&c| c !~ _VOWELS.chars().any(|c|\
    \ c == c)).collect()\n   |                                                ^ expected\
    \ one of `(`, `[`, or `{`\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c|\n        (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u')\n    ).collect()\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp1640ce6q.rs:14:12\n\
    \   |\n14 |         (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \   |            ^^ no implementation for `&char == char`\n   |\n   = help: the\
    \ trait `PartialEq<char>` is not implemented for `&char`\n   = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror[E0277]: can't compare `&char`\
    \ with `char`\n  --> /tmp/tmp1640ce6q.rs:14:24\n   |\n14 |         (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u')\n   |                        ^^\
    \ no implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp1640ce6q.rs:14:36\n\
    \   |\n14 |         (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \   |                                    ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n  --> /tmp/tmp1640ce6q.rs:14:48\n   |\n14 |   \
    \      (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n   |      \
    \                                          ^^ no implementation for `&char ==\
    \ char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n  --> /tmp/tmp1640ce6q.rs:14:60\n   |\n14 |   \
    \      (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n   |      \
    \                                                      ^^ no implementation for\
    \ `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error: aborting due to 5 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::with_capacity(text.len());\n    for\
    \ (i, c) in text.chars().enumerate() {\n        if !is_vowel(c) {\n          \
    \  result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpheo71u25.rs:15:13\n\
    \   |\n15 |         if !is_vowel(c) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| {\n            c != 'a' ||\
    \ c != 'e' || c != 'i' || c != 'o' || c != 'u'\n        })\n        .collect()\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp3w34jqpv.rs:15:15\n\
    \   |\n15 |             c != 'a' || c != 'e' || c != 'i' || c != 'o' || c != 'u'\n\
    \   |               ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n   = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror[E0277]: can't compare `&char`\
    \ with `char`\n  --> /tmp/tmp3w34jqpv.rs:15:27\n   |\n15 |             c != 'a'\
    \ || c != 'e' || c != 'i' || c != 'o' || c != 'u'\n   |                      \
    \     ^^ no implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp3w34jqpv.rs:15:39\n\
    \   |\n15 |             c != 'a' || c != 'e' || c != 'i' || c != 'o' || c != 'u'\n\
    \   |                                       ^^ no implementation for `&char ==\
    \ char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n  --> /tmp/tmp3w34jqpv.rs:15:51\n   |\n15 |   \
    \          c != 'a' || c != 'e' || c != 'i' || c != 'o' || c != 'u'\n   |    \
    \                                               ^^ no implementation for `&char\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmp3w34jqpv.rs:15:63\n   |\n15\
    \ |             c != 'a' || c != 'e' || c != 'i' || c != 'o' || c != 'u'\n   |\
    \                                                               ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error: aborting due to 5 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut output = String::new();\n    for c in text.chars()\
    \ {\n        match c {\n            'a' .. 'z' => output.push_str(&c.to_string()),\n\
    \            'A' .. 'Z' => output.push_str(&c.to_string()),\n            _ =>\
    \ output.push_str(&c.to_string()),\n        }\n    }\n    output\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmphqbaycmq.rs:16:13\n\
    \   |\n16 |             'a' .. 'z' => output.push_str(&c.to_string()),\n   | \
    \            ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmphqbaycmq.rs:17:13\n   |\n17 |             'A' .. 'Z' => output.push_str(&c.to_string()),\n\
    \   |             ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0658`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // Your code here\n    if let Some(a) = text.chars().filter(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        return\
    \ String::new();\n    }\n    text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpu7u9kfau.rs:14:48\n\
    \   |\n14 |     if let Some(a) = text.chars().filter(|c| c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n   |                               \
    \                 ^^ no implementation for `&char == char`\n   |\n   = help: the\
    \ trait `PartialEq<char>` is not implemented for `&char`\n   = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror[E0277]: can't compare `&char`\
    \ with `char`\n  --> /tmp/tmpu7u9kfau.rs:14:60\n   |\n14 |     if let Some(a)\
    \ = text.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n   |                                                            ^^\
    \ no implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpu7u9kfau.rs:14:72\n\
    \   |\n14 |     if let Some(a) = text.chars().filter(|c| c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n   |                               \
    \                                         ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n  --> /tmp/tmpu7u9kfau.rs:14:84\n   |\n14 |   \
    \  if let Some(a) = text.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n   |                                              \
    \                                      ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n  --> /tmp/tmpu7u9kfau.rs:14:96\n   |\n14 |   \
    \  if let Some(a) = text.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n   |                                              \
    \                                       "
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut res = String::new();\n    for (i, ch) in text.chars().enumerate()\
    \ {\n        // AA -> A, ZZ -> Z, ...\n        match ch {\n            'A'...'Z'\
    \ => res.push((ch as u32 - 'A' + 1) % 26 + 'A'),\n            'a'...'z' => res.push((ch\
    \ as u32 - 'a' + 1) % 26 + 'a'),\n            'Z'...'z' => res.push((ch as u32\
    \ - 'Z' + 1) % 26 + 'Z'),\n            _ => res.push((ch as u32).to_string()),\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "warning: `...` range patterns are deprecated\n  --> /tmp/tmp1xy89vo7.rs:17:16\n\
    \   |\n17 |             'A'...'Z' => res.push((ch as u32 - 'A' + 1) % 26 + 'A'),\n\
    \   |                ^^^ help: use `..=` for an inclusive range\n   |\n   = note:\
    \ `#[warn(ellipsis_inclusive_range_patterns)]` on by default\n   = warning: this\
    \ is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n\
    \   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    \nwarning: `...` range patterns are deprecated\n  --> /tmp/tmp1xy89vo7.rs:18:16\n\
    \   |\n18 |             'a'...'z' => res.push((ch as u32 - 'a' + 1) % 26 + 'a'),\n\
    \   |                ^^^ help: use `..=` for an inclusive range\n   |\n   = warning:\
    \ this is accepted in the current edition (Rust 2015) but is a hard error in Rust\
    \ 2021!\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    \nwarning: `...` range patterns are deprecated\n  --> /tmp/tmp1xy89vo7.rs:19:16\n\
    \   |\n19 |             'Z'...'z' => res.push((ch as u32 - 'Z' + 1) % 26 + 'Z'),\n\
    \   |                ^^^ help: use `..=` for an inclusive range\n   |\n   = warning:\
    \ this is accepted in the current edition (Rust 2015) but is a hard error in Rust\
    \ 2021!\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    \nerror[E0277]: cannot subtract `char` from `u32`\n  --> /tmp/tmp1xy89vo7.rs:17:46\n\
    \   |\n17 |             'A'...'Z' => res.push((ch as u32 - 'A' + 1) % 26 + 'A'),\n\
    \   |                                              ^ no implementation for `u32\
    \ - char`\n   |\n   = help: the trait `Sub<char>` is not implemented for `u32`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Su"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // Your code here\n    let mut text: String = text;\n    let\
    \ mut vowels: Vec<&str> = vec!['a', 'e', 'i', 'o', 'u'];\n    for letter in &text\
    \ {\n        if vowels.contains(letter) {\n            vowels.remove(letter);\n\
    \        }\n    }\n    for letter in vowels {\n        text = &text.remove(&letter).to_string();\n\
    \    }\n    return text;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp27pq5d8k.rs:15:38\n   |\n\
    15 |     let mut vowels: Vec<&str> = vec!['a', 'e', 'i', 'o', 'u'];\n   |    \
    \                                  ^^^ expected `&str`, found `char`\n   |\nhelp:\
    \ if you meant to write a `str` literal, use double quotes\n   |\n15 |     let\
    \ mut vowels: Vec<&str> = vec![\"a\", 'e', 'i', 'o', 'u'];\n   |             \
    \                         ~~~\n\nerror[E0277]: `&String` is not an iterator\n\
    \  --> /tmp/tmp27pq5d8k.rs:16:19\n   |\n16 |     for letter in &text {\n   | \
    \                  ^^^^^ `&String` is not an iterator\n   |\n   = help: the trait\
    \ `Iterator` is not implemented for `&String`\n   = note: required because of\
    \ the requirements on the impl of `IntoIterator` for `&String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp27pq5d8k.rs:18:27\n   |\n18 |             vowels.remove(letter);\n\
    \   |                           ^^^^^^ expected `usize`, found `&&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp27pq5d8k.rs:22:29\n   |\n22 |         text =\
    \ &text.remove(&letter).to_string();\n   |                             ^^^^^^^\
    \ expected `usize`, found `&&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp27pq5d8k.rs:22:16\n\
    \   |\n14 |     let mut text: String = text;\n   |                   ------ expected\
    \ due to this type\n...\n22 |         text = &text.remove(&letter).to_string();\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `&String`\n   |\nhelp: consider removing the borrow\n   |\n22 -      \
    \   text = &text.remove(&letter).to_string();\n22 +         text = text.remove(&letter).to_string();\n\
    \   | \n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n\n    for c in text {\n  \
    \      if !matches!(is_vowel(c), true) {\n            result.push(c);\n      \
    \  }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp8r5z9x4n.rs:16:22\n\
    \   |\n16 |         if !matches!(is_vowel(c), true) {\n   |                  \
    \    ^^^^^^^^ not found in this scope\n\nerror[E0277]: `String` is not an iterator\n\
    \  --> /tmp/tmp8r5z9x4n.rs:15:14\n   |\n15 |     for c in text {\n   |       \
    \       ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n\
    \   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `String`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text.is_empty() {\n        return text;\n    }\n\n    let\
    \ mut vowels = vec!['A', 'B', 'V', 'Z'];\n    for vowel in vowels {\n        if\
    \ &text[0] == vowel {\n            text = &text[1..];\n        }\n    }\n\n  \
    \  text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmp5bwr6c10.rs:19:13\n   |\n19 |         if &text[0] == vowel {\n   | \
    \            ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help:\
    \ the trait `Index<{integer}>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ can't compare `&_` with `char`\n  --> /tmp/tmp5bwr6c10.rs:19:21\n   |\n19 |\
    \         if &text[0] == vowel {\n   |                     ^^ no implementation\
    \ for `&_ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5bwr6c10.rs:20:20\n\
    \   |\n12 | fn remove_vowels(text: String) -> String {\n   |                 \
    \       ------ expected due to this parameter type\n...\n20 |             text\
    \ = &text[1..];\n   |                    ^^^^^^^^^^ expected struct `String`,\
    \ found `&str`\n   |\nhelp: try using a conversion method\n   |\n20 |        \
    \     text = (&text[1..]).to_string();\n   |                    +          +++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| {\n        matches!(\n            c,\n\
    \            'a'..'z',\n            'A'..'Z',\n            ' '\n        )\n  \
    \  }).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: no rules expected the token `'A'`\n  --> /tmp/tmpecgpb61e.rs:17:13\n\
    \   |\n17 |             'A'..'Z',\n   |             ^^^ no rules expected this\
    \ token in macro call\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text == \"\" {\n        return text;\n    }\n    let mut\
    \ vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for character in text\
    \ {\n        if !vowels.contains(&character) {\n            vowels.push(character);\n\
    \        }\n    }\n    let mut text = String::from(text);\n    for vowel in vowels\
    \ {\n        let index = text.index(vowel);\n        text = &text[..index + 1]\
    \ + &text[index + vowel.len() + 1 .. text.len()];\n    }\n    text\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `String` is not an iterator\n  --> /tmp/tmp5e1i56x9.rs:17:22\n\
    \   |\n17 |     for character in text {\n   |                      ^^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the\
    \ trait `Iterator` is not implemented for `String`\n   = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0599]:\
    \ no method named `index` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmp5e1i56x9.rs:24:26\n   |\n24 |         let index = text.index(vowel);\n\
    \   |                          ^^^^^ method not found in `String`\n   |\n   =\
    \ help: items from traits can only be used if the trait is in scope\nhelp: the\
    \ following trait is implemented but not in scope; perhaps add a `use` for it:\n\
    \   |\n1  | use std::ops::Index;\n   |\n\nerror[E0369]: cannot add `&str` to `&str`\n\
    \  --> /tmp/tmp5e1i56x9.rs:25:35\n   |\n25 |         text = &text[..index + 1]\
    \ + &text[index + vowel.len() + 1 .. text.len()];\n   |                ------------------\
    \ ^ -------------------------------------------- &str\n   |                | \
    \                 |\n   |                |                  `+` cannot be used\
    \ to concatenate two `&str` strings\n   |                &str\n   |\n   = note:\
    \ string concatenation requires an owned `String` on the left\nhelp: remove the\
    \ borrow to obtain an owned `String`\n   |\n25 -         text = &text[..index\
    \ + 1] + &text[index + vowel.len() + 1 .. text.len()];\n25 +         text = text[..index\
    \ + 1] + &text[index + vowel.len() + 1 .. text.len()];\n   | \n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0369,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| {\n        if !(\"AEIOUaeiou\".contains(String::from(c)))\
    \ {\n            true\n        } else {\n            false\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `String: From<&char>` is not satisfied\n\
    \  --> /tmp/tmp2ea8hj2j.rs:14:36\n   |\n14 |         if !(\"AEIOUaeiou\".contains(String::from(c)))\
    \ {\n   |                                    ^^^^^^^^^^^^ the trait `From<&char>`\
    \ is not implemented for `String`\n   |\n   = help: the following other types\
    \ implement trait `From<T>`:\n             <String as From<&String>>\n       \
    \      <String as From<&mut str>>\n             <String as From<&str>>\n     \
    \        <String as From<Box<str>>>\n             <String as From<Cow<'a, str>>>\n\
    \             <String as From<char>>\n\nerror[E0277]: expected a `FnMut<(char,)>`\
    \ closure, found `String`\n    --> /tmp/tmp2ea8hj2j.rs:14:36\n     |\n14   | \
    \        if !(\"AEIOUaeiou\".contains(String::from(c))) {\n     |            \
    \               -------- ^^^^^^^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |                           |\n     |                           required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n14   |         if !(\"\
    AEIOUaeiou\".contains(&String::from(c))) {\n     |                           \
    \         +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut output = String::new();\n\n    for c in text.chars()\
    \ {\n        if !is_vowel(c) {\n            output.push(c);\n        }\n    }\n\
    \n    output\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpa69l5x__.rs:16:13\n\
    \   |\n16 |         if !is_vowel(c) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp08pqyjc0.rs:14:22\n\
    \   |\n14 |         .filter(|c| !is_vowel(c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    remove_vowels_helper(text, true);\n    text\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `remove_vowels_helper` in this scope\n\
    \  --> /tmp/tmpmf79nnsv.rs:13:5\n   |\n13 |     remove_vowels_helper(text, true);\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = Vec::new();\n    vowels.extend_from_slice(\n\
    \        text.chars().filter(|c| !match (c as usize).is_ascii_lowercase()).collect(),\n\
    \    );\n    let mut new_text = String::new();\n    vowels.iter().for_each(|c|\
    \ new_text.push_str(&c.to_string()));\n    new_text\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `?`, `{`, or an operator, found `)`\n  -->\
    \ /tmp/tmpu33164qk.rs:15:73\n   |\n15 |         text.chars().filter(|c| !match\
    \ (c as usize).is_ascii_lowercase()).collect(),\n   |                        \
    \          -----                                  ^ expected one of `.`, `?`,\
    \ `{`, or an operator\n   |                                  |\n   |         \
    \                         while parsing this `match` expression\n\nerror: aborting\
    \ due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = HashSet::new();\n    vowels.insert(\"a\");\n\
    \    vowels.insert(\"e\");\n    vowels.insert(\"i\");\n    vowels.insert(\"o\"\
    );\n    vowels.insert(\"u\");\n\n    let mut newText = String::new();\n    let\
    \ mut len = text.len();\n    let mut pos = 0;\n\n    while pos < len {\n     \
    \   if !vowels.contains(&text[pos]) {\n            newText.push_str(&text[pos]);\n\
    \        }\n        pos += 1;\n    }\n\n    return newText;\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp7qprt8fd.rs:13:22\n   |\n13 |     let mut vowels = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp7qprt8fd.rs:25:30\n\
    \   |\n25 |         if !vowels.contains(&text[pos]) {\n   |                  \
    \            ^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp7qprt8fd.rs:26:31\n   |\n26 |             newText.push_str(&text[pos]);\n\
    \   |                               ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| match c {\n        'a' | 'e' | 'i'\
    \ | 'o' | 'u' => false,\n        _ => true,\n    }).collect::<String>().to_string()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpslltct5x.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut output = String::with_capacity(text.len());\n    let\
    \ mut vowels = HashSet::new();\n    for c in text.chars() {\n        if !vowels.contains(&c)\
    \ {\n            output.push(c);\n        } else {\n            output.push('');\n\
    \        }\n        vowels.insert(c);\n    }\n    output\n}\n\nfn main() {\n \
    \   let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: empty character literal\n  --> /tmp/tmp7wbv067e.rs:19:26\n   |\n\
    19 |             output.push('');\n   |                          ^ empty character\
    \ literal\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n\
    \  --> /tmp/tmp7wbv067e.rs:14:22\n   |\n14 |     let mut vowels = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_text = text.to_string();\n    new_text = new_text.chars().filter(|c|!is_vowel(c)).collect();\n\
    \    new_text.to_owned()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp5otf4rsv.rs:14:44\n\
    \   |\n14 |     new_text = new_text.chars().filter(|c|!is_vowel(c)).collect();\n\
    \   |                                            ^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_str = \"\";\n    for ch in text {\n        if let\
    \ Some(index) = ch_indices.contains(&ch) {\n            new_str += ch;\n     \
    \   } else {\n            new_str += &ch;\n        }\n    }\n    new_str\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `ch_indices` in this scope\n  --> /tmp/tmpqa3mhdf1.rs:15:30\n\
    \   |\n15 |         if let Some(index) = ch_indices.contains(&ch) {\n   |    \
    \                          ^^^^^^^^^^ not found in this scope\n\nerror[E0277]:\
    \ `String` is not an iterator\n  --> /tmp/tmpqa3mhdf1.rs:14:15\n   |\n14 |   \
    \  for ch in text {\n   |               ^^^^ `String` is not an iterator; try\
    \ calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not\
    \ implemented for `String`\n   = note: required because of the requirements on\
    \ the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `&str`\n  --> /tmp/tmpqa3mhdf1.rs:16:13\n   |\n\
    16 |             new_str += ch;\n   |             -------^^^^^^\n   |        \
    \     |\n   |             cannot use `+=` on type `&str`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpqa3mhdf1.rs:18:13\n\
    \   |\n18 |             new_str += &ch;\n   |             -------^^^^^^^\n   |\
    \             |\n   |             cannot use `+=` on type `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqa3mhdf1.rs:21:5\n   |\n12 | fn remove_vowels(text:\
    \ String) -> String {\n   |                                   ------ expected\
    \ `String` because of return type\n...\n21 |     new_str\n   |     ^^^^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |     |\n   |     expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308, E0368, E0425.\nFor more\
    \ information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.to_lowercase().chars()\n        .filter(|c| c.is_vowel())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpmvrwdbns.rs:14:23\n   |\n14 |         .filter(|c|\
    \ c.is_vowel())\n   |                       ^^^^^^^^ method not found in `&char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_string = text;\n    for ch in text.chars() {\n\
    \        if let Some(i) = vowels.find(|c| c == ch) {\n            new_string =\
    \ new_string.chars().filter(|&c| c == i).collect();\n        }\n    }\n    new_string\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `vowels` in this scope\n  --> /tmp/tmpimycg_j6.rs:15:26\n\
    \   |\n15 |         if let Some(i) = vowels.find(|c| c == ch) {\n   |        \
    \                  ^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| *c != 'a' && *c != 'A' &&\
    \ *c != 'e' && *c != 'E' && *c != 'i' && *c != 'I' && *c != 'o' && *c != 'O' &&\
    \ *c != 'u' && *c != 'U')\n        .collect::<String>()\n}\n\nfn main() {\n  \
    \  let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for ch in text.chars()\
    \ {\n        match ch {\n            'a' => {\n                result.push('a');\n\
    \            }\n            'e' => {\n                result.push('e');\n    \
    \        }\n            'i' => {\n                result.push('i');\n        \
    \    }\n            'o' => {\n                result.push('o');\n            }\n\
    \            'u' => {\n                result.push('u');\n            }\n    \
    \        'y' => {\n                result.push('y');\n            }\n        \
    \    _ => continue,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"aei\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmp_bgu2x2p.rs:43:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut index = 0;\n    let mut result: String = String::new();\n\
    \    loop {\n        let index = text.chars().position(|c|\n            c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'y'\n        ).unwrap();\n\
    \        if index == text.len() {\n            break;\n        }\n        result.append(&text[..index]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `append` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpx9jyon53.rs:22:16\n   |\n22 |         result.append(&text[..index]);\n\
    \   |                ^^^^^^ method not found in `String`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut output: String = text;\n    for c in text.chars() {\n\
    \        if !is_vowel(c) {\n            output = output.to_string().chars().filter(|c|\
    \ *c != c).collect::<String>() + c;\n        }\n    }\n    output\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp8zr3opl0.rs:15:13\n\
    \   |\n15 |         if !is_vowel(c) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8zr3opl0.rs:16:66\n\
    \   |\n16 |             output = output.to_string().chars().filter(|c| *c != c).collect::<String>()\
    \ + c;\n   |                                                                 \
    \ ^ expected `char`, found `&char`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             output = output.to_string().chars().filter(|c| *c != *c).collect::<String>()\
    \ + c;\n   |                                                                 \
    \ +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8zr3opl0.rs:16:91\n   |\n\
    16 |             output = output.to_string().chars().filter(|c| *c != c).collect::<String>()\
    \ + c;\n   |                                                                 \
    \                          ^ expected `&str`, found `char`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = Vec::new();\n    vowels.push('a');\n    vowels.push('e');\n\
    \    vowels.push('i');\n    vowels.push('o');\n    vowels.push('u');\n\n    text.chars().filter(|c|\
    \ vowels.iter().any(|v| *v == c)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7vs1_nyp.rs:20:57\n   |\n\
    20 |     text.chars().filter(|c| vowels.iter().any(|v| *v == c)).collect()\n \
    \  |                                                         ^ expected `char`,\
    \ found `&char`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |   \
    \  text.chars().filter(|c| vowels.iter().any(|v| *v == *c)).collect()\n   |  \
    \                                                       +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = vec!['A', 'a', 'E', 'e', 'I', 'i', 'O', 'o', 'U',\
    \ 'u'];\n    for ch in text.chars() {\n        if !vowels.contains(&ch) {\n  \
    \          return text\n        }\n    }\n    text\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpeawu_r33.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // Your code here\n    let mut vowels: Vec<String> = vec![\"\
    \".to_string(), \"\".to_string(), \"\".to_string()];\n    vowels.push(\"a\".to_string());\n\
    \    vowels.push(\"e\".to_string());\n    vowels.push(\"i\".to_string());\n  \
    \  vowels.push(\"o\".to_string());\n    vowels.push(\"u\".to_string());\n\n  \
    \  for c in text.chars() {\n        if c.to_ascii_lowercase().find(|c| vowels.contains(&c).unwrap_or(false))\
    \ {\n            text.push(c);\n        }\n    }\n    text\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `find` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpf8za_nk0.rs:22:35\n   |\n22 |         if c.to_ascii_lowercase().find(|c|\
    \ vowels.contains(&c).unwrap_or(false)) {\n   |                              \
    \     ^^^^ method not found in `char`\n\nerror[E0599]: no method named `unwrap_or`\
    \ found for type `bool` in the current scope\n  --> /tmp/tmpf8za_nk0.rs:22:64\n\
    \   |\n22 |         if c.to_ascii_lowercase().find(|c| vowels.contains(&c).unwrap_or(false))\
    \ {\n   |                                                                ^^^^^^^^^\
    \ method not found in `bool`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels: Vec<&str> = vec![\n        \"a\",\n       \
    \ \"e\",\n        \"i\",\n        \"o\",\n        \"u\",\n    ];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    let mut iter = text.char_indices();\n\
    \    loop {\n        match iter.next() {\n            Some((index, char)) => {\n\
    \                if !vowels.contains(&char) {\n                    result.push_str(&text[index..index]);\n\
    \                }\n            }\n            None => break,\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4f8n0d2f.rs:26:37\n   |\n\
    26 |                 if !vowels.contains(&char) {\n   |                      \
    \               ^^^^^ expected `&str`, found `char`\n   |\n   = note: expected\
    \ reference `&&str`\n              found reference `&char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    lazy_static! {\n        static ref REMOVE_VOWELS: FnvHashSet<_>\
    \ = {\n            FnvHashSet::default()\n        };\n\n        REMOVE_VOWELS.insert(\"\
    aeiou\".to_owned());\n        REMOVE_VOWELS.insert(\"AEIOU\".to_owned());\n  \
    \      REMOVE_VOWELS.insert(\"AEI\".to_owned());\n        REMOVE_VOWELS.insert(\"\
    a\".to_owned());\n        REMOVE_VOWELS.insert(\"A\".to_owned());\n    }\n\n \
    \   // Return an empty string if the string is empty or a single vowel\n    if\
    \ text.is_empty() || REMOVE_VOWELS.contains_key(&text[0]) {\n        return \"\
    \".to_owned();\n    }\n\n    // Loop through the string and remove vowels\n  \
    \  let mut s = text;\n    for c in s.chars() {\n        REMOVE_VOWELS.insert(c);\n\
    \    }\n\n    s\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: cannot find macro `lazy_static` in this scope\n  --> /tmp/tmpn46pe3hk.rs:13:5\n\
    \   |\n13 |     lazy_static! {\n   |     ^^^^^^^^^^^\n\nerror[E0425]: cannot find\
    \ value `REMOVE_VOWELS` in this scope\n  --> /tmp/tmpn46pe3hk.rs:26:27\n   |\n\
    26 |     if text.is_empty() || REMOVE_VOWELS.contains_key(&text[0]) {\n   |  \
    \                         ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `REMOVE_VOWELS` in this scope\n  --> /tmp/tmpn46pe3hk.rs:33:9\n\
    \   |\n33 |         REMOVE_VOWELS.insert(c);\n   |         ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n\
    \  --> /tmp/tmpn46pe3hk.rs:26:55\n   |\n26 |     if text.is_empty() || REMOVE_VOWELS.contains_key(&text[0])\
    \ {\n   |                                                       ^^^^^^^ `String`\
    \ cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // We first split our text by vowels because we want to remove\
    \ vowels one at a time.\n    // We then use a map to remove vowels with their\
    \ corresponding vowel index\n    let vowels = vec!['a'..'z', 'A'..'Z'];\n    let\
    \ mut new_text = text;\n\n    for vowel in vowels.iter() {\n        // We use\
    \ a map with an empty string as value because we don't want to remove our vowel\
    \ yet\n        new_text = new_text.chars()\n            .enumerate()\n       \
    \     .filter_map(|(i, c)| if c == vowel {\n                Some(i.to_string())\n\
    \            } else {\n                None\n            })\n            .collect::<String>(String::new());\n\
    \    }\n    new_text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_uqhxak0.rs:22:42\n   |\n\
    22 |             .filter_map(|(i, c)| if c == vowel {\n   |                  \
    \                        ^^^^^ expected `char`, found reference\n   |\n   = note:\
    \   expected type `char`\n           found reference `&std::ops::Range<char>`\n\
    \nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmp_uqhxak0.rs:27:14\n     |\n27   |             .collect::<String>(String::new());\n\
    \     |              ^^^^^^^           ------------- supplied 1 argument\n   \
    \  |              |\n     |              expected 0 arguments\n     |\nnote: associated\
    \ function defined here\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    remove_vowels_rec(text)\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `remove_vowels_rec` in this scope\n\
    \  --> /tmp/tmpobif7gl1.rs:13:5\n   |\n13 |     remove_vowels_rec(text)\n   |\
    \     ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut s = text;\n    remove_vowels_helper(&mut s);\n    s\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `remove_vowels_helper` in this scope\n\
    \  --> /tmp/tmpaz9k7gvq.rs:14:5\n   |\n14 |     remove_vowels_helper(&mut s);\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    remove_vowels(&text, &[])\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \  --> /tmp/tmpsdb4omsl.rs:13:5\n   |\n13 |     remove_vowels(&text, &[])\n  \
    \ |     ^^^^^^^^^^^^^ -----  --- supplied 2 arguments\n   |     |\n   |     expected\
    \ 1 argument\n   |\nnote: function defined here\n  --> /tmp/tmpsdb4omsl.rs:12:4\n\
    \   |\n12 | fn remove_vowels(text: String) -> String {\n   |    ^^^^^^^^^^^^^\
    \ ------------\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    remove_vowels_impl(text)\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `remove_vowels_impl` in this scope\n\
    \  --> /tmp/tmppqktw8uk.rs:13:5\n   |\n13 |     remove_vowels_impl(text)\n   |\
    \     ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\n    let\
    \ mut result = vec![];\n    for &letter in text.chars() {\n        if vowels.contains(&letter)\
    \ {\n            result.push(letter);\n        } else {\n            result.push(letter);\n\
    \        }\n    }\n    return String::from_utf8_lossy(&result);\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqek2qum1.rs:16:9\n   |\n\
    16 |     for &letter in text.chars() {\n   |         ^^^^^^^    ------------ this\
    \ expression has type `Option<char>`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |         help: you can probably remove the explicit borrow:\
    \ `letter`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqek2qum1.rs:23:36\n  \
    \ |\n23 |     return String::from_utf8_lossy(&result);\n   |                 \
    \                   ^^^^^^^ expected slice `[u8]`, found struct `Vec`\n   |\n\
    \   = note: expected reference `&[u8]`\n              found reference `&Vec<char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpqek2qum1.rs:23:12\n   |\n12 |\
    \ fn remove_vowels(text: String) -> String {\n   |                           \
    \        ------ expected `String` because of return type\n...\n23 |     return\
    \ String::from_utf8_lossy(&result);\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |            |\n   |\
    \            expected struct `String`, found enum `Cow`\n   |\n   = note: expected\
    \ struct `String`\n                found enum `Cow<'_, str>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_text = String::from(text);\n    for c in text.chars()\
    \ {\n        let v = match c {\n            'a' => false,\n            'e' =>\
    \ false,\n            'i' => false,\n            'o' => false,\n            'u'\
    \ => false,\n            _ => true,\n        };\n        if v {\n            new_text\
    \ = new_text.chars().filter(|&b| !b).collect();\n        }\n    }\n    new_text\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0600]: cannot apply unary operator `!` to type `char`\n  --> /tmp/tmpky2ea2fb.rs:24:53\n\
    \   |\n24 |             new_text = new_text.chars().filter(|&b| !b).collect();\n\
    \   |                                                     ^^ cannot apply unary\
    \ operator `!`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0600`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.to_lowercase().chars().filter(|c| !vowels.contains(c)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `vowels` in this scope\n  --> /tmp/tmpqfqnlhxs.rs:13:45\n\
    \   |\n13 |     text.to_lowercase().chars().filter(|c| !vowels.contains(c)).collect()\n\
    \   |                                             ^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !vowels.contains(&c))\n \
    \       .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `vowels` in this scope\n  --> /tmp/tmpivsx0lsb.rs:14:22\n\
    \   |\n14 |         .filter(|c| !vowels.contains(&c))\n   |                  \
    \    ^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if let Some(vowels) = get_vowels(text) {\n        let mut result\
    \ = String::new();\n        for ch in text {\n            if !vowels.contains(ch)\
    \ {\n                result.push(*ch);\n            }\n        }\n        result\n\
    \    } else {\n        text\n    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `get_vowels` in this scope\n  --> /tmp/tmpetbrq0pi.rs:13:27\n\
    \   |\n13 |     if let Some(vowels) = get_vowels(text) {\n   |               \
    \            ^^^^^^^^^^ not found in this scope\n\nerror[E0277]: `String` is not\
    \ an iterator\n  --> /tmp/tmpetbrq0pi.rs:15:19\n   |\n15 |         for ch in text\
    \ {\n   |                   ^^^^ `String` is not an iterator; try calling `.chars()`\
    \ or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for\
    \ `String`\n   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // TODO: Write a function that takes text and returns string\
    \ without vowels.\n    return text;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpffgljzo1.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| is_vowel(c)).collect()\n        .join('')\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: empty character literal\n  --> /tmp/tmp_mzdw87b.rs:14:16\n   |\n\
    14 |         .join('')\n   |                ^ empty character literal\n\nerror[E0425]:\
    \ cannot find function `is_vowel` in this scope\n  --> /tmp/tmp_mzdw87b.rs:13:29\n\
    \   |\n13 |     text.chars().filter(|c| is_vowel(c)).collect()\n   |         \
    \                    ^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    remove_repeated_characters(text, Vowels)\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `remove_repeated_characters` in this\
    \ scope\n  --> /tmp/tmpolyheqst.rs:13:5\n   |\n13 |     remove_repeated_characters(text,\
    \ Vowels)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `Vowels` in this scope\n  --> /tmp/tmpolyheqst.rs:13:38\n\
    \   |\n13 |     remove_repeated_characters(text, Vowels)\n   |               \
    \                       ^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text.is_empty() {\n        return text;\n    }\n\n    let\
    \ mut it = text.char_indices();\n\n    loop {\n        let a = it.next().unwrap();\n\
    \n        if a.0.is_none() {\n            break;\n        }\n\n        let b =\
    \ it.next().unwrap();\n\n        if b.0.is_none() {\n            break;\n    \
    \    }\n\n        let c = it.next().unwrap();\n\n        if c.0.is_none() {\n\
    \            break;\n        }\n\n        let d = it.next().unwrap();\n\n    \
    \    if d.0.is_none() {\n            break;\n        }\n\n        let vowels =\
    \ &[\"a\", \"e\", \"i\", \"o\", \"u\"];\n        let vowels_count = vowels.len();\n\
    \n        if a.1 == b.1 && b.1 == c.1 && c.1 == d.1 && d.1 == a.1 + vowels_count\
    \ {\n            it.next();\n        }\n    }\n\n    let mut result = String::with_capacity(text.len());\n\
    \    let mut it = text.char_indices();\n\n    while let Some(index) = it.next()\
    \ {\n        result.push(text.chars().nth(index).unwrap());\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_none` found for type `usize` in the current\
    \ scope\n  --> /tmp/tmpd7r5v1l3.rs:22:16\n   |\n22 |         if a.0.is_none()\
    \ {\n   |                ^^^^^^^ method not found in `usize`\n\nerror[E0599]:\
    \ no method named `is_none` found for type `usize` in the current scope\n  -->\
    \ /tmp/tmpd7r5v1l3.rs:28:16\n   |\n28 |         if b.0.is_none() {\n   |     \
    \           ^^^^^^^ method not found in `usize`\n\nerror[E0599]: no method named\
    \ `is_none` found for type `usize` in the current scope\n  --> /tmp/tmpd7r5v1l3.rs:34:16\n\
    \   |\n34 |         if c.0.is_none() {\n   |                ^^^^^^^ method not\
    \ found in `usize`\n\nerror[E0599]: no method named `is_none` found for type `usize`\
    \ in the current scope\n  --> /tmp/tmpd7r5v1l3.rs:40:16\n   |\n40 |         if\
    \ d.0.is_none() {\n   |                ^^^^^^^ method not found in `usize`\n\n\
    error[E0369]: cannot add `usize` to `char`\n  --> /tmp/tmpd7r5v1l3.rs:47:65\n\
    \   |\n47 |         if a.1 == b.1 && b.1 == c.1 && c.1 == d.1 && d.1 == a.1 +\
    \ vowels_count {\n   |                                                       \
    \      --- ^ ------------ usize\n   |                                        \
    \                     |\n   |                                                \
    \             char\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd7r5v1l3.rs:56:38\n\
    \   |\n56 |         result.push(text.chars().nth(index).unwrap());\n   |     \
    \                                 ^^^^^ expected `usize`, found tuple\n   |\n\
    \   = note: expected type `usize`\n             found tuple `(usize, char)`\n\n\
    error: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !VOWELS.contains(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `VOWELS` in this scope\n  --> /tmp/tmpiydzqzm4.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !VOWELS.contains(c)).collect()\n   | \
    \                             ^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // Write your code here.\n    let vowels = \"aeiou\";\n   \
    \ let re = &regex::Regex::new(&vowels[..]);\n    re.is_match(text)\n        .unwrap_or_else(||\
    \ {\n            error!(\"Invalid text: {} contains invalid characters: \\\n \
    \                   {}, \\\n                    expected one of {}\",\n      \
    \              text, text, &vowels[..]);\n        })\n        .trim_matches();\n\
    \    match re.captures(text).unwrap() {\n        vec![Some(groups)] => groups.clone(),\n\
    \        _ => text\n    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: cannot find macro `error` in this scope\n  --> /tmp/tmp55tvxooy.rs:18:13\n\
    \   |\n18 |             error!(\"Invalid text: {} contains invalid characters:\
    \ \\\n   |             ^^^^^\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ crate or module `regex`\n  --> /tmp/tmp55tvxooy.rs:15:15\n   |\n15 |     let\
    \ re = &regex::Regex::new(&vowels[..]);\n   |               ^^^^^ use of undeclared\
    \ crate or module `regex`\n\nerror[E0425]: cannot find value `groups` in this\
    \ scope\n  --> /tmp/tmp55tvxooy.rs:25:19\n   |\n25 |         vec![Some(groups)]\
    \ => groups.clone(),\n   |                   ^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find value `groups` in this scope\n  --> /tmp/tmp55tvxooy.rs:25:31\n\
    \   |\n25 |         vec![Some(groups)] => groups.clone(),\n   |              \
    \                 ^^^^^^ not found in this scope\n\nerror: arbitrary expressions\
    \ aren't allowed in patterns\n  --> /tmp/tmp55tvxooy.rs:25:9\n   |\n25 |     \
    \    vec![Some(groups)] => groups.clone(),\n   |         ^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = note: this error originates in the macro `vec` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text.is_empty() {\n        return text;\n    }\n\n    let\
    \ mut output: String = String::new();\n    let mut vowels = \"aeiou\";\n    let\
    \ mut index: usize = 0;\n    let mut ch: char;\n    let mut count: usize = 0;\n\
    \    let mut char_buffer: [&'static str] = text;\n\n    while index < char_buffer.len()\
    \ {\n        ch = char_buffer[index];\n        count = 1;\n        char_buffer.remove(&ch,\
    \ index);\n\n        for vowel in &vowels {\n            if ch == vowel {\n  \
    \              count++;\n            }\n        }\n\n        if count == 0 {\n\
    \            output += ch;\n            index += 1;\n        }\n    }\n\n    output\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpik6qup_7.rs:31:22\n\
    \   |\n31 |                 count++;\n   |                      ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n31 |               \
    \  { let tmp = count; count += 1; tmp };\n   |                 +++++++++++   \
    \   ~~~~~~~~~~~~~~~~~~~\n31 -                 count++;\n31 +                 count\
    \ += 1;\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpik6qup_7.rs:22:43\n\
    \   |\n22 |     let mut char_buffer: [&'static str] = text;\n   |            \
    \              --------------   ^^^^ expected slice `[&'static str]`, found struct\
    \ `String`\n   |                          |\n   |                          expected\
    \ due to this\n\nerror[E0277]: the size for values of type `[&'static str]` cannot\
    \ be known at compilation time\n  --> /tmp/tmpik6qup_7.rs:22:9\n   |\n22 |   \
    \  let mut char_buffer: [&'static str] = text;\n   |         ^^^^^^^^^^^^^^^ doesn't\
    \ have a size known at compile-time\n   |\n   = help: the trait `Sized` is not\
    \ implemented for `[&'static str]`\n   = note: all local variables must have a\
    \ statically known size\n   = help: unsized locals are gated as an unstable feature\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpik6qup_7.rs:25:14\n   |\n20 |\
    \     let mut ch: char;\n   |                 ---- expected due to this type\n\
    ...\n25 |         ch = char_buffer[index];\n   |              ^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found `&str`\n\nerror[E0599]: no method named `remove` found\
    \ for slice `[&'static str]` in the current scope\n  --> /tmp/tmpik6qup_7.rs:27:21\n\
    \   |\n27 |         char_buffer.remove(&ch, index);\n   |                    \
    \ ^^^^^^ method not found in `[&'static str]`\n\nerror[E0277]: `&&str` is not\
    \ an iterator\n  --> /tmp/tmpik6qup_7.rs:29:22\n   |\n29 |         for vowel in\
    \ &vowels {\n   |                      ^^^^^^^ `&&str` is not an iterator\n  \
    \ |\n   = help: the trait `Iterator` is not implemented for `&&str`\n   = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `&&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpik6qup_7"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| c.is_uppercase()).filter(|c| !c.is_lowercase()).collect()\n\
    \        .join()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp9ebypd7e.rs:13:77\n\
    \   |\n13 |     text.chars().filter(|c| c.is_uppercase()).filter(|c| !c.is_lowercase()).collect()\n\
    \   |                                                                        \
    \     ^^^^^^^ cannot infer type for type parameter `B` declared on the associated\
    \ function `collect`\n   |\n   = note: type must be known at this point\nhelp:\
    \ consider specifying the type argument in the method call\n   |\n13 |     text.chars().filter(|c|\
    \ c.is_uppercase()).filter(|c| !c.is_lowercase()).collect::<B>()\n   |       \
    \                                                                            \
    \ +++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    remove_vowels(text).to_string()\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter {\n        char::is_upper($0)\n       \
    \     || char::is_lower($0)\n            || char::is_digit($0)\n            ||\
    \ $0 == '.'\n    }\n    .collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `(`, `.`, `::`, `;`, `?`, `}`, or an operator, found\
    \ `{`\n  --> /tmp/tmprlnnw_cn.rs:13:25\n   |\n13 |     text.chars().filter {\n\
    \   |                         ^ expected one of 7 possible tokens\n\nerror: aborting\
    \ due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `vowel` in this scope\n  --> /tmp/tmp1dw_0mfy.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !vowel(c)).collect()\n   |           \
    \                   ^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n\tlet mut vowels = String::new();\n\tfor ch in text.chars() {\n\
    \t\tmatch ch {\n\t\t\t'a' => vowels.push('a'),\n\t\t\t'A' => vowels.push('A'),\n\
    \t\t\t'b' => vowels.push('b'),\n\t\t\t'B' => vowels.push('B'),\n\t\t\t'c' => vowels.push('c'),\n\
    \t\t\t'C' => vowels.push('C'),\n\t\t\t'd' => vowels.push('d'),\n\t\t\t'D' => vowels.push('D'),\n\
    \t\t\t'e' => vowels.push('e'),\n\t\t\t'E' => vowels.push('E'),\n\t\t\t'f' => vowels.push('f'),\n\
    \t\t\t'F' => vowels.push('F'),\n\t\t\t'g' => vowels.push('g'),\n\t\t\t'G' => vowels.push('G'),\n\
    \t\t\t'h' => vowels.push('h'),\n\t\t\t'H' => vowels.push('H'),\n\t\t\t'i' => vowels.push('i'),\n\
    \t\t\t'I' => vowels.push('I'),\n\t\t\t'j' => vowels.push('j'),\n\t\t\t'J' => vowels.push('J'),\n\
    \t\t\t'k' => vowels.push('k'),\n\t\t\t'K' => vowels.push('K'),\n\t\t\t'l' => vowels.push('l'),\n\
    \t\t\t'L' => vowels.push('L'),\n\t\t\t'm' => vowels.push('m'),\n\t\t\t'M' => vowels.push('M'),\n\
    \t\t\t'n' => vowels.push('n'),\n\t\t\t'N' => vowels.push('N'),\n\t\t\t'o' => vowels.push('o'),\n\
    \t\t\t'O' => vowels.push('O'),\n\t\t\t'p' => vowels.push('p'),\n\t\t\t'P' => vowels.push('P'),\n\
    \t\t\t'q' => vowels.push('q'),\n\t\t\t'Q' => vowels.push('Q'),\n\t\t\t'r' => vowels.push('r'),\n\
    \t\t\t'R' => vowels.push('R'),\n\t\t\t's' => vowels.push('s'),\n\t\t\t't' => vowels.push('t'),\n\
    \t\t\t'T' => vowels.push('T'),\n\t\t\t'u' => vowels.push('u'),\n\t\t\t'U' => vowels.push('U'),\n\
    \t\t\t'v' => vowels.push('v'),\n\t\t\t'V' => vowels.push('V'),\n\t\t\t'w' => vowels.push('w'),\n\
    \t\t\t'W' => vowels.push('W'),\n\t\t\t'x' => vowels.push('x'),\n\t\t\t'X' => vowels.push('X'),\n\
    \t\t\t'y' => vowels.push('y'),\n\t\t\t'Y' => vowels.push('Y'),\n\t\t\t'z' => vowels.push('z'),\n\
    \t\t\t'Z' => vowels.push('Z'),\n\t\t\t_ => (),\n\t\t}\n\t}\n\tvowels\n}\n\nfn\
    \ main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdefghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmp3_vd4lzb.rs:76:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if let Some(text) = text.iter_mut() {\n        let mut iter\
    \ = text.chars().enumerate().skip(1).map(|(i, c)| {\n            c.is_lowercase()\
    \ || c.is_uppercase() || c.is_digit()\n        }).collect::<Vec<_>>();\n     \
    \   let mut counts = iter.rev().cloned().map(|is_vowel| {\n            iter.iter_mut().enumerate().skip(1).filter(|(i,\
    \ _)| {\n                match is_vowel {\n                    true => c.is_lowercase()\
    \ || c.is_uppercase() || c.is_digit(),\n                    false => true\n  \
    \              }\n            }).count()\n        }).collect::<Vec<_>>();\n  \
    \      iter.clear();\n        iter.extend(counts.iter().cloned());\n        iter.for_each(|i|\
    \ {\n            *i += 1;\n        });\n        *iter = iter.into_iter().collect::<String>().iter().cloned().collect();\n\
    \    }\n    text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpjqk_1jwg.rs:20:29\n\
    \   |\n20 |                     true => c.is_lowercase() || c.is_uppercase() ||\
    \ c.is_digit(),\n   |                             ^ help: a local variable with\
    \ a similar name exists: `i`\n\nerror[E0425]: cannot find value `c` in this scope\n\
    \  --> /tmp/tmpjqk_1jwg.rs:20:49\n   |\n20 |                     true => c.is_lowercase()\
    \ || c.is_uppercase() || c.is_digit(),\n   |                                 \
    \                ^ help: a local variable with a similar name exists: `i`\n\n\
    error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpjqk_1jwg.rs:20:69\n\
    \   |\n20 |                     true => c.is_lowercase() || c.is_uppercase() ||\
    \ c.is_digit(),\n   |                                                        \
    \             ^ help: a local variable with a similar name exists: `i`\n\nerror[E0599]:\
    \ no method named `iter_mut` found for struct `String` in the current scope\n\
    \  --> /tmp/tmpjqk_1jwg.rs:13:30\n   |\n13 |     if let Some(text) = text.iter_mut()\
    \ {\n   |                              ^^^^^^^^ method not found in `String`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = String::new();\n\n    for ch in text {\n \
    \       if ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' {\n \
    \           vowels.push(ch);\n        }\n    }\n\n    vowels\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `String` is not an iterator\n  --> /tmp/tmp2jeyk56y.rs:15:15\n\
    \   |\n15 |     for ch in text {\n   |               ^^^^ `String` is not an iterator;\
    \ try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator`\
    \ is not implemented for `String`\n   = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `String`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.to_lowercase()\n        .chars()\n        .filter(|c|\
    \ !is_vowel(c))\n        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpz2eovt67.rs:15:22\n\
    \   |\n15 |         .filter(|c| !is_vowel(c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii())\n        .filter(|c|\
    \ c != 'a')\n        .filter(|c| c != 'e')\n        .filter(|c| c != 'i')\n  \
    \      .filter(|c| c != 'o')\n        .filter(|c| c != 'u')\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpm311fxvk.rs:15:23\n\
    \   |\n15 |         .filter(|c| c != 'a')\n   |                       ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpm311fxvk.rs:16:23\n\
    \   |\n16 |         .filter(|c| c != 'e')\n   |                       ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpm311fxvk.rs:17:23\n\
    \   |\n17 |         .filter(|c| c != 'i')\n   |                       ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpm311fxvk.rs:18:23\n\
    \   |\n18 |         .filter(|c| c != 'o')\n   |                       ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpm311fxvk.rs:19:23\n\
    \   |\n19 |         .filter(|c| c != 'u')\n   |                       ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error: aborting due to 5 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| c.is_vowel())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpw20at_g5.rs:14:23\n   |\n14 |         .filter(|c|\
    \ c.is_vowel())\n   |                       ^^^^^^^^ method not found in `&char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = HashSet::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(&c) {\n            vowels.insert(c);\n      \
    \  }\n    }\n\n    text.chars()\n        .filter(|c| vowels.contains(&c))\n  \
    \      .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp7g44vmqa.rs:13:22\n   |\n13 |     let mut vowels = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for char in text.chars()\
    \ {\n        if !vowels_in_string::<u8, _, _>(&char).any() {\n            result.push(char);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `vowels_in_string` in this scope\n \
    \ --> /tmp/tmpyh586u8u.rs:15:13\n   |\n15 |         if !vowels_in_string::<u8,\
    \ _, _>(&char).any() {\n   |             ^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // check that the input string contains at least one character\n\
    \    if text.is_empty() {\n        return text;\n    }\n\n    // convert the input\
    \ string to lowercase\n    let mut lowercase = text\n        .to_lowercase()\n\
    \        .to_owned();\n\n    // create an empty string to store the result\n \
    \   let mut result = String::new();\n\n    // use an iterator to remove vowels\n\
    \    let mut it = lowercase\n        .chars()\n        .filter(|c| !c.is_vowel())\n\
    \        .map(|c| c.to_string())\n        .collect::<String>();\n\n    // insert\
    \ spaces between vowels\n    it.insert(0, '')\n        .collect::<Vec<_>>()\n\
    \        .iter()\n        .for_each(|c| result.push_str(&c));\n\n    // add space\
    \ between consonants\n    it.insert(0, '')\n        .collect::<Vec<_>>()\n   \
    \     .iter()\n        .for_each(|c| result.push_str(&c.to_string() + ''));\n\n\
    \    // add space between letters\n    it.insert(0, '')\n        .collect::<Vec<_>>()\n\
    \        .iter()\n        .for_each(|c| result.push_str(&c + ''));\n\n    // add\
    \ space between vowels and consonants\n    it.insert(0, '')\n        .collect::<Vec<_>>()\n\
    \        .iter()\n        .for_each(|c| result.push_str(&c + '' + ' '));\n\n \
    \   // add space between letters and vowels\n    it.insert(0, '')\n        .collect::<Vec<_>>()\n\
    \        .iter()\n        .for_each(|c| result.push_str(&c + '' + ' ' + ' '));\n\
    \n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: empty character literal\n  --> /tmp/tmpcmpgy5h2.rs:34:19\n   |\n\
    34 |     it.insert(0, '')\n   |                   ^ empty character literal\n\n\
    error: empty character literal\n  --> /tmp/tmpcmpgy5h2.rs:40:19\n   |\n40 |  \
    \   it.insert(0, '')\n   |                   ^ empty character literal\n\nerror:\
    \ empty character literal\n  --> /tmp/tmpcmpgy5h2.rs:43:57\n   |\n43 |       \
    \  .for_each(|c| result.push_str(&c.to_string() + ''));\n   |                \
    \                                         ^ empty character literal\n\nerror:\
    \ empty character literal\n  --> /tmp/tmpcmpgy5h2.rs:46:19\n   |\n46 |     it.insert(0,\
    \ '')\n   |                   ^ empty character literal\n\nerror: empty character\
    \ literal\n  --> /tmp/tmpcmpgy5h2.rs:49:45\n   |\n49 |         .for_each(|c| result.push_str(&c\
    \ + ''));\n   |                                             ^ empty character\
    \ literal\n\nerror: empty character literal\n  --> /tmp/tmpcmpgy5h2.rs:52:19\n\
    \   |\n52 |     it.insert(0, '')\n   |                   ^ empty character literal\n\
    \nerror: empty character literal\n  --> /tmp/tmpcmpgy5h2.rs:55:45\n   |\n55 |\
    \         .for_each(|c| result.push_str(&c + '' + ' '));\n   |               \
    \                              ^ empty character literal\n\nerror: empty character\
    \ literal\n  --> /tmp/tmpcmpgy5h2.rs:58:19\n   |\n58 |     it.insert(0, '')\n\
    \   |                   ^ empty character literal\n\nerror: empty character literal\n\
    \  --> /tmp/tmpcmpgy5h2.rs:61:45\n   |\n61 |         .for_each(|c| result.push_str(&c\
    \ + '' + ' ' + ' '));\n   |                                             ^ empty\
    \ character literal\n\nerror[E0599]: no method named `is_vowel` found for reference\
    \ `&char` in the current scope\n  --> /tmp/tmpcmpgy5h2.rs:29:24\n   |\n29 |  \
    \       .filter(|c| !c.is_vowel())\n   |                        ^^^^^^^^ method\
    \ not found in `&char`\n\nerror[E0599]: `()` is not an iterator\n  --> /tmp/tmpcmpgy5h2.rs:35:10\n\
    \   |\n35 |         .collect::<Vec<_>>()\n   |          ^^^^^^^ `()` is not an\
    \ iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `(): Iterator`\n           which "
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // remove all vowels from the text\n    if text == \"\" {\n\
    \        text;\n    }\n    else {\n        let mut new_text = text;\n        for\
    \ letter in new_text.chars() {\n            if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n                new_text\
    \ = new_text.replace(letter, \"\").to_string();\n            }\n        }\n  \
    \      new_text\n    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqr50p28h.rs:14:19\n   |\n\
    14 |       if text == \"\" {\n   |  ___________________^\n15 | |         text;\n\
    \   | |             - help: remove this semicolon\n16 | |     }\n   | |_____^\
    \ expected struct `String`, found `()`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !('a' <= c && c <= 'z' ||\
    \ 'A' <= c && c <= 'Z'))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa6mycwa9.rs:14:30\n   |\n\
    14 |         .filter(|c| !('a' <= c && c <= 'z' || 'A' <= c && c <= 'Z'))\n  \
    \ |                              ^ expected `char`, found `&char`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n14 |         .filter(|c| !('a' <= *c\
    \ && c <= 'z' || 'A' <= c && c <= 'Z'))\n   |                              +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa6mycwa9.rs:14:40\n   |\n14 |\
    \         .filter(|c| !('a' <= c && c <= 'z' || 'A' <= c && c <= 'Z'))\n   | \
    \                                       ^^^\n   |                            \
    \            |\n   |                                        expected `&char`,\
    \ found `char`\n   |                                        help: consider borrowing\
    \ here: `&'z'`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa6mycwa9.rs:14:54\n\
    \   |\n14 |         .filter(|c| !('a' <= c && c <= 'z' || 'A' <= c && c <= 'Z'))\n\
    \   |                                                      ^ expected `char`,\
    \ found `&char`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |   \
    \      .filter(|c| !('a' <= c && c <= 'z' || 'A' <= *c && c <= 'Z'))\n   |   \
    \                                                   +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpa6mycwa9.rs:14:64\n   |\n14 |         .filter(|c| !('a'\
    \ <= c && c <= 'z' || 'A' <= c && c <= 'Z'))\n   |                           \
    \                                     ^^^\n   |                              \
    \                                  |\n   |                                   \
    \                             expected `&char`, found `char`\n   |           \
    \                                                     help: consider borrowing\
    \ here: `&'Z'`\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c == 'a'\n            &&\
    \ !c == 'e'\n            && !c == 'i'\n            && !c == 'o'\n            &&\
    \ !c == 'u')\n        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0600]: cannot apply unary operator `!` to type `&char`\n  --> /tmp/tmp6l5f2czw.rs:14:21\n\
    \   |\n14 |         .filter(|c| !c == 'a'\n   |                     ^^ cannot\
    \ apply unary operator `!`\n\nerror[E0600]: cannot apply unary operator `!` to\
    \ type `&char`\n  --> /tmp/tmp6l5f2czw.rs:15:16\n   |\n15 |             && !c\
    \ == 'e'\n   |                ^^ cannot apply unary operator `!`\n\nerror[E0600]:\
    \ cannot apply unary operator `!` to type `&char`\n  --> /tmp/tmp6l5f2czw.rs:16:16\n\
    \   |\n16 |             && !c == 'i'\n   |                ^^ cannot apply unary\
    \ operator `!`\n\nerror[E0600]: cannot apply unary operator `!` to type `&char`\n\
    \  --> /tmp/tmp6l5f2czw.rs:17:16\n   |\n17 |             && !c == 'o'\n   |  \
    \              ^^ cannot apply unary operator `!`\n\nerror[E0600]: cannot apply\
    \ unary operator `!` to type `&char`\n  --> /tmp/tmp6l5f2czw.rs:18:16\n   |\n\
    18 |             && !c == 'u')\n   |                ^^ cannot apply unary operator\
    \ `!`\n\nerror: aborting due to 5 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0600`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z'];\n    vowels.sort();\n\n    for char in text.chars() {\n        if\
    \ vowels.contains(char.to_string()) {\n            let index = vowels.index(char);\n\
    \            vowels.remove(index);\n        }\n    }\n\n    String::from(vowels.join())\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw20gkd01.rs:17:28\n   |\n\
    17 |         if vowels.contains(char.to_string()) {\n   |                    \
    \        ^^^^^^^^^^^^^^^^ expected `&char`, found struct `String`\n\nerror[E0599]:\
    \ no method named `index` found for struct `Vec<char>` in the current scope\n\
    \  --> /tmp/tmpw20gkd01.rs:18:32\n   |\n18 |             let index = vowels.index(char);\n\
    \   |                                ^^^^^ method not found in `Vec<char>`\n \
    \  |\n   = help: items from traits can only be used if the trait is in scope\n\
    help: the following trait is implemented but not in scope; perhaps add a `use`\
    \ for it:\n   |\n1  | use std::ops::Index;\n   |\n\nerror[E0599]: the method `join`\
    \ exists for struct `Vec<char>`, but its trait bounds were not satisfied\n  -->\
    \ /tmp/tmpw20gkd01.rs:23:25\n   |\n23 |     String::from(vowels.join())\n   |\
    \                         ^^^^ method cannot be called on `Vec<char>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `[char]: Join<_>`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|x| vowels.contains(&x)).collect()\n}\n\
    \nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `vowels` in this scope\n  --> /tmp/tmp8zi4chg7.rs:13:29\n\
    \   |\n13 |     text.chars().filter(|x| vowels.contains(&x)).collect()\n   | \
    \                            ^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text.is_empty() {\n        return text;\n    }\n    let\
    \ mut vowels = vec!['a','e','i','o','u'];\n    vowels.retain(|&vowel| text.remove(vowel).is_ok());\n\
    \    text.replace(&vowels, \"\").to_string()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmporknpicu.rs:17:40\n   |\n\
    17 |     vowels.retain(|&vowel| text.remove(vowel).is_ok());\n   |           \
    \                             ^^^^^ expected `usize`, found `char`\n\nerror[E0599]:\
    \ no method named `is_ok` found for type `char` in the current scope\n  --> /tmp/tmporknpicu.rs:17:47\n\
    \   |\n17 |     vowels.retain(|&vowel| text.remove(vowel).is_ok());\n   |    \
    \                                           ^^^^^ method not found in `char`\n\
    \nerror[E0277]: expected a `Fn<(char,)>` closure, found `Vec<char>`\n   --> /tmp/tmporknpicu.rs:18:18\n\
    \    |\n18  |     text.replace(&vowels, \"\").to_string()\n    |          -------\
    \ ^^^^^^^\n    |          |       |\n    |          |       expected an `Fn<(char,)>`\
    \ closure, found `Vec<char>`\n    |          |       help: consider dereferencing\
    \ here: `&*vowels`\n    |          required by a bound introduced by this call\n\
    \    |\n    = help: the trait `Fn<(char,)>` is not implemented for `Vec<char>`\n\
    \    = note: required because of the requirements on the impl of `FnOnce<(char,)>`\
    \ for `&Vec<char>`\n    = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `&Vec<char>`\nnote: required by a bound in `str::<impl\
    \ str>::replace`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')).collect()\n        .join()\n}\n\nfn main() {\n   \
    \ let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpvlf1qgf4.rs:13:33\n\
    \   |\n13 |     text.chars().filter(|c| !(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')).collect()\n   |                                 ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpvlf1qgf4.rs:13:45\n\
    \   |\n13 |     text.chars().filter(|c| !(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')).collect()\n   |                                     \
    \        ^^ no implementation for `&char == char`\n   |\n   = help: the trait\
    \ `PartialEq<char>` is not implemented for `&char`\n   = help: the trait `PartialEq`\
    \ is implemented for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpvlf1qgf4.rs:13:57\n   |\n13 |     text.chars().filter(|c| !(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')).collect()\n   |      \
    \                                                   ^^ no implementation for `&char\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpvlf1qgf4.rs:13:69\n   |\n13\
    \ |     text.chars().filter(|c| !(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')).collect()\n   |                                              \
    \                       ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n   = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror[E0277]: can't compare `&char`\
    \ with `char`\n  --> /tmp/tmpvlf1qgf4.rs:13:81\n   |\n13 |     text.chars().filter(|c|\
    \ !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')).collect()\n   |\
    \                                                                            \
    \     ^^ no implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not im"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text.is_empty() {\n        return text;\n    }\n    text.chars()\n\
    \        .filter(|c| *c !='a' && *c !='e' && *c !='i' && *c !='o' && *c !='u')\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpmgs9k0yu.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !vowels.contains(c))\n  \
    \      .collect()\n        .as_slice()\n}\n\nfn main() {\n    let candidate =\
    \ remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `vowels` in this scope\n  --> /tmp/tmpymb9oc8k.rs:14:22\n\
    \   |\n14 |         .filter(|c| !vowels.contains(c))\n   |                   \
    \   ^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_text = String::with_capacity(text.len());\n   \
    \ let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\n    for i in 0..text.len()\
    \ {\n        if !vowels.contains(&text[i]) {\n            new_text.push(text[i]);\n\
    \        }\n    }\n    new_text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp2i_tkt69.rs:17:30\n\
    \   |\n17 |         if !vowels.contains(&text[i]) {\n   |                    \
    \          ^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp2i_tkt69.rs:18:27\n   |\n18 |             new_text.push(text[i]);\n\
    \   |                           ^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text.is_empty() {\n        text\n    } else {\n        let\
    \ mut new_text = text.clone();\n        let vowels: HashSet<char> = HashSet::new();\n\
    \        for ch in &mut new_text {\n            match ch {\n                'a'\
    \ | 'e' | 'i' | 't' => {}\n                'u' | 'o' => {}\n                'y'\
    \ => {}\n                _ => vowels.insert(*ch),\n            }\n        }\n\
    \        for ch in &mut new_text {\n            if !vowels.contains(&*ch) {\n\
    \                new_text.push(ch);\n            }\n        }\n        new_text\n\
    \    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpale38mx1.rs:17:21\n\
    \   |\n17 |         let vowels: HashSet<char> = HashSet::new();\n   |        \
    \             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpale38mx1.rs:17:37\n\
    \   |\n17 |         let vowels: HashSet<char> = HashSet::new();\n   |        \
    \                             ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0277]:\
    \ `String` is not an iterator\n  --> /tmp/tmpale38mx1.rs:18:19\n   |\n18 |   \
    \      for ch in &mut new_text {\n   |                   ^^^^^^^^^^^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the\
    \ trait `Iterator` is not implemented for `String`\n   = note: required because\
    \ of the requirements on the impl of `Iterator` for `&mut String`\n   = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `&mut\
    \ String`\n\nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpale38mx1.rs:23:36\n\
    \   |\n23 |                 _ => vowels.insert(*ch),\n   |                   \
    \                 ^^^\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpale38mx1.rs:26:19\n\
    \   |\n26 |         for ch in &mut new_text {\n   |                   ^^^^^^^^^^^^^\
    \ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n  \
    \ = help: the trait `Iterator` is not implemented for `String`\n   = note: required\
    \ because of the requirements on the impl of `Iterator` for `&mut String`\n  \
    \ = note: required because of the requirements on the impl of `IntoIterator` for\
    \ `&mut String`\n\nerror: aborting due to 5 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0412, E0433, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !VOWELS.contains(&c) {\n            result.push(c);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `VOWELS` in this scope\n  --> /tmp/tmpubwlmgo9.rs:15:13\n\
    \   |\n15 |         if !VOWELS.contains(&c) {\n   |             ^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| c.is_alphabetic()).collect()\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdefghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpjavaqz4a.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['e', 'a', 'u', 'o', 'O', 'I'];\n    vowels.sort();\n\
    \    let mut index = -1;\n    let mut result = String::new();\n    loop {\n  \
    \      let n = text.len() - index;\n        if n < 0 { break; }\n        if n\
    \ % 2 != 0 { break; }\n        let ch = text[index + n - 1];\n        if ch in\
    \ vowels {\n            vowels.remove(ch);\n        } else {\n            result.push(*ch);\n\
    \        }\n        index += 1; // skip the current character\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found keyword `in`\n  --> /tmp/tmpcrs4n9o3.rs:22:15\n\
    \   |\n22 |         if ch in vowels {\n   |         --    ^^ expected `{`\n  \
    \ |         |\n   |         this `if` expression has a condition, but no block\n\
    \nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpcrs4n9o3.rs:15:21\n\
    \   |\n15 |     let mut index = -1;\n   |                     ^^ the trait `Neg`\
    \ is not implemented for `usize`\n   |\n   = help: the following other types implement\
    \ trait `Neg`:\n             &f32\n             &f64\n             &i128\n   \
    \          &i16\n             &i32\n             &i64\n             &i8\n    \
    \         &isize\n           and 8 others\n\nerror[E0277]: the type `String` cannot\
    \ be indexed by `usize`\n  --> /tmp/tmpcrs4n9o3.rs:21:18\n   |\n21 |         let\
    \ ch = text[index + n - 1];\n   |                  ^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = HashSet::new();\n    let mut input = text.to_string();\n\
    \    while !input.is_empty() {\n        if input.ends_with('a'..'z') && vowels.contains(&input[0..])\
    \ {\n            let last_vowel = &input[..input.len() - 1];\n            if vowels.contains(&last_vowel[..])\
    \ {\n                input = &input[..input.len() - 1];\n            } else {\n\
    \                input = &input[..input.len() - 1];\n                vowels.insert(last_vowel);\n\
    \            }\n        }\n        if input.ends_with('A'..'Z') && vowels.contains(&input[0..])\
    \ {\n            let last_vowel = &input[..input.len() - 1];\n            if vowels.contains(&last_vowel[..])\
    \ {\n                input = &input[..input.len() - 1];\n            } else {\n\
    \                input = &input[..input.len() - 1];\n                vowels.insert(last_vowel);\n\
    \            }\n        }\n        if input.ends_with('0'..'9') && vowels.contains(&input[0..])\
    \ {\n            let last_vowel = &input[..input.len() - 1];\n            if vowels.contains(&last_vowel[..])\
    \ {\n                input = &input[..input.len() - 1];\n            } else {\n\
    \                input = &input[..input.len() - 1];\n                vowels.insert(last_vowel);\n\
    \            }\n        }\n        if input.ends_with('o'..'z') && vowels.contains(&input[0..])\
    \ {\n            let last_vowel = &input[..input.len() - 1];\n            if vowels.contains(&last_vowel[..])\
    \ {\n                input = &input[..input.len() - 1];\n            } else {\n\
    \                input = &input[..input.len() - 1];\n                vowels.insert(last_vowel);\n\
    \            }\n        }\n        if input.ends_with('O'..'Z') && vowels.contains(&input[0..])\
    \ {\n            let last_vowel = &input[..input.len() - 1];\n            if vowels.contains(&last_vowel[..])\
    \ {\n                input = &input[..input.len() - 1];\n            } else {\n\
    \                input = &input[..input.len() - 1];\n                vowels.insert(last_vowel);\n\
    \            }\n        }\n        if input.ends_with('a'..'z') || input.ends_with('A'..'Z')\
    \ || input.ends_with('0'..'9') || input.ends_with('o'..'z') || input.ends_with('O'..'Z')\
    \ {\n            input = &input[..input.len() - 1];\n        } else {\n      \
    \      input = &input[..input.len() - 1];\n            vowels.insert(input[0..]);\n\
    \        }\n    }\n    input\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpswobt3p3.rs:13:22\n   |\n13 |     let mut vowels = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0277]:\
    \ expected a `FnMut<(char,)>` closure, found `std::ops::Range<char>`\n  --> /tmp/tmpswobt3p3.rs:16:28\n\
    \   |\n16 |         if input.ends_with('a'..'z') && vowels.contains(&input[0..])\
    \ {\n   |                  --------- ^^^^^^^^ expected an `FnMut<(char,)>` closure,\
    \ found `std::ops::Range<char>`\n   |                  |\n   |               \
    \   required by a bound introduced by this call\n   |\n   = help: the trait `FnMut<(char,)>`\
    \ is not implemented for `std::ops::Range<char>`\n   = help: the following other\
    \ types implement trait `Pattern<'a>`:\n             &'b String\n            \
    \ &'b [char; N]\n             &'b [char]\n             &'b str\n             &'c\
    \ &'b str\n             [char; N]\n             char\n             pattern::MultiCharEqPattern<C>\n\
    \   = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `std::ops::Range<char>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpswobt3p3.rs:19:25\n\
    \   |\n14 |     let mut input = text.to_string();\n   |                     ----------------\
    \ expected due to this value\n...\n19 |                 input = &input[..input.len()\
    \ - 1];\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `String`, found `&str`\n   |\nhelp: try using a conversion method\n   |\n19\
    \ |                 input = (&input[..input.len() - 1]).to_string();\n   |   \
    \                      +                         +++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpswobt3p3.rs:21:25\n   |\n14 |     let mut input\
    \ = text.to_string();\n   |                     ---------------- expected due\
    \ to this value\n...\n21 |                 input = &input[..input.len() - 1];\n\
    \   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `&str`\n   |\nhelp: try using a conversion metho"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    String::from(text).chars().filter(|c| *c != 'a' && *c != 'e'\
    \ && *c != 'i' && *c != 'o' && *c != 'u')\n        .collect::<String>()\n    \
    \    + String::from(text)\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplpf_adkk.rs:15:11\n   |\n\
    15 |         + String::from(text)\n   |           ^^^^^^^^^^^^^^^^^^\n   |   \
    \        |\n   |           expected `&str`, found struct `String`\n   |      \
    \     help: consider borrowing here: `&String::from(text)`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for ch in text {\n   \
    \     if let 'a' <= ch && ch <= 'z' || 'A' <= ch && ch <= 'Z' {\n            result.push(ch);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `...`, `..=`, `..`, `=`, or `|`, found `<=`\n  -->\
    \ /tmp/tmpviqzyg4_.rs:15:20\n   |\n15 |         if let 'a' <= ch && ch <= 'z'\
    \ || 'A' <= ch && ch <= 'Z' {\n   |                    ^^ expected one of `...`,\
    \ `..=`, `..`, `=`, or `|`\n\nerror[E0277]: `String` is not an iterator\n  -->\
    \ /tmp/tmpviqzyg4_.rs:14:15\n   |\n14 |     for ch in text {\n   |           \
    \    ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n\
    \   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_text = String::new();\n    let mut last_vowel_pos\
    \ = 0;\n    for c in text.chars() {\n        if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' {\n            new_text.push(c);\n        } else {\n\
    \            new_text.push(text[last_vowel_pos]);\n            last_vowel_pos++;\n\
    \        }\n    }\n    new_text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpz2cnleo_.rs:20:27\n\
    \   |\n20 |             last_vowel_pos++;\n   |                           ^^ not\
    \ a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n20 |       \
    \      { let tmp = last_vowel_pos; last_vowel_pos += 1; tmp };\n   |         \
    \    +++++++++++               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n20 -            \
    \ last_vowel_pos++;\n20 +             last_vowel_pos += 1;\n   | \n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpz2cnleo_.rs:19:27\n\
    \   |\n19 |             new_text.push(text[last_vowel_pos]);\n   |           \
    \                ^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n\
    \   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for i in text.chars()\
    \ {\n        match i {\n            'a' => result.push(''),\n            'e' =>\
    \ result.push(''),\n            'i' => result.push(''),\n            'o' => result.push(''),\n\
    \            'u' => result.push(''),\n            c => result.push(c),\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: empty character literal\n  --> /tmp/tmpp00ivlf_.rs:16:33\n   |\n\
    16 |             'a' => result.push(''),\n   |                               \
    \  ^ empty character literal\n\nerror: empty character literal\n  --> /tmp/tmpp00ivlf_.rs:17:33\n\
    \   |\n17 |             'e' => result.push(''),\n   |                        \
    \         ^ empty character literal\n\nerror: empty character literal\n  --> /tmp/tmpp00ivlf_.rs:18:33\n\
    \   |\n18 |             'i' => result.push(''),\n   |                        \
    \         ^ empty character literal\n\nerror: empty character literal\n  --> /tmp/tmpp00ivlf_.rs:19:33\n\
    \   |\n19 |             'o' => result.push(''),\n   |                        \
    \         ^ empty character literal\n\nerror: empty character literal\n  --> /tmp/tmpp00ivlf_.rs:20:33\n\
    \   |\n20 |             'u' => result.push(''),\n   |                        \
    \         ^ empty character literal\n\nerror: aborting due to 5 previous errors\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    remove_vowels_fn(text).to_string()\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `remove_vowels_fn` in this scope\n \
    \ --> /tmp/tmp51t122ud.rs:13:5\n   |\n13 |     remove_vowels_fn(text).to_string()\n\
    \   |     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut s = String::from(text);\n    let mut vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    for &v in vowels.iter() {\n        s.remove_prefix(v);\n\
    \    }\n    s.to_string()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `remove_prefix` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp1g_rc0cb.rs:16:11\n   |\n16 |         s.remove_prefix(v);\n\
    \   |           ^^^^^^^^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text.len() > 0 {\n        let mut s = String::from(text);\n\
    \        for v in &[\"a\", \"e\", \"i\", \"o\", \"u\"] {\n            let i =\
    \ s.find(v);\n            if i != String::npos {\n                s = s.remove(i,\
    \ 1);\n            }\n        }\n        s\n    }\n    else {\n        text\n\
    \    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `npos` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpmwe50b1c.rs:17:29\n   |\n17 | \
    \            if i != String::npos {\n   |                             ^^^^ function\
    \ or associated item not found in `String`\n\nerror[E0061]: this function takes\
    \ 1 argument but 2 arguments were supplied\n    --> /tmp/tmpmwe50b1c.rs:18:23\n\
    \     |\n18   |                 s = s.remove(i, 1);\n     |                  \
    \     ^^^^^^ -  - supplied 2 arguments\n     |                       |\n     |\
    \                       expected 1 argument\n     |\nnote: associated function\
    \ defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmwe50b1c.rs:18:21\n\
    \   |\n14 |         let mut s = String::from(text);\n   |                    \
    \ ------------------ expected due to this value\n...\n18 |                 s =\
    \ s.remove(i, 1);\n   |                     ^^^^^^^^^^^^^^- help: try using a\
    \ conversion method: `.to_string()`\n   |                     |\n   |        \
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text.is_empty() {\n        \"\"\n    } else {\n        let\
    \ mut vowels = \"aeiou\";\n        let mut index = 0;\n        for c in text.chars()\
    \ {\n            if !vowels.contains(&c) {\n                index = text.index(c).unwrap();\n\
    \            }\n        }\n        text.remove(index);\n        text\n    }\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpktudoqgc.rs:14:9\n   |\n\
    12 | fn remove_vowels(text: String) -> String {\n   |                        \
    \           ------ expected `String` because of return type\n13 |     if text.is_empty()\
    \ {\n14 |         \"\"\n   |         ^^- help: try using a conversion method:\
    \ `.to_string()`\n   |         |\n   |         expected struct `String`, found\
    \ `&str`\n\nerror[E0277]: expected a `Fn<(char,)>` closure, found `char`\n   \
    \ --> /tmp/tmpktudoqgc.rs:19:33\n     |\n19   |             if !vowels.contains(&c)\
    \ {\n     |                        -------- ^^ expected an `Fn<(char,)>` closure,\
    \ found `char`\n     |                        |\n     |                      \
    \  required by a bound introduced by this call\n     |\n     = help: the trait\
    \ `Fn<(char,)>` is not implemented for `char`\n     = note: required because of\
    \ the requirements on the impl of `FnOnce<(char,)>` for `&char`\n     = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `&char`\n\
    note: required by a bound in `core::str::<impl str>::contains`\nhelp: consider\
    \ dereferencing here\n     |\n19   |             if !vowels.contains(*&c) {\n\
    \     |                                 +\n\nerror[E0599]: no method named `index`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpktudoqgc.rs:20:30\n\
    \   |\n20 |                 index = text.index(c).unwrap();\n   |            \
    \                  ^^^^^ method not found in `String`\n   |\n   = help: items\
    \ from traits can only be used if the trait is in scope\nhelp: the following trait\
    \ is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use\
    \ std::ops::Index;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut s = text;\n    let mut vowels = vec!['aeiou'];\n  \
    \  while !s.is_empty() {\n        for vowel in vowels {\n            if !s.contains(&vowel)\
    \ {\n                s = s.chars().filter(|c| !c == 'a').collect::<String>();\n\
    \                break;\n            }\n        }\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp0240a6n1.rs:14:27\n\
    \   |\n14 |     let mut vowels = vec!['aeiou'];\n   |                        \
    \   ^^^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double quotes\n\
    \   |\n14 |     let mut vowels = vec![\"aeiou\"];\n   |                      \
    \     ~~~~~~~\n\nerror[E0600]: cannot apply unary operator `!` to type `&char`\n\
    \  --> /tmp/tmp0240a6n1.rs:18:42\n   |\n18 |                 s = s.chars().filter(|c|\
    \ !c == 'a').collect::<String>();\n   |                                      \
    \    ^^ cannot apply unary operator `!`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0600`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.to_lowercase()\n        .chars()\n        .filter(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\n    \
    \    .collect::<String>()\n        .collect::<String>()\n}\n\nfn main() {\n  \
    \  let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmppt40_aoj.rs:15:23\n\
    \   |\n15 |         .filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' || c == 'y')\n   |                       ^^ no implementation for `&char\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmppt40_aoj.rs:15:35\n   |\n15\
    \ |         .filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ || c == 'y')\n   |                                   ^^ no implementation for\
    \ `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmppt40_aoj.rs:15:47\n\
    \   |\n15 |         .filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' || c == 'y')\n   |                                               ^^\
    \ no implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmppt40_aoj.rs:15:59\n\
    \   |\n15 |         .filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' || c == 'y')\n   |                                                \
    \           ^^ no implementation for `&char == char`\n   |\n   = help: the trait\
    \ `PartialEq<char>` is not implemented for `&char`\n   = help: the trait `PartialEq`\
    \ is implemented for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmppt40_aoj.rs:15:71\n   |\n15 |         .filter(|c| c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\n   |              \
    \                                                         ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]:"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter( |c| !is_vowel(c) ).collect()\n}\n\nfn\
    \ main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp9yvyyjv8.rs:13:31\n\
    \   |\n13 |     text.chars().filter( |c| !is_vowel(c) ).collect()\n   |      \
    \                         ^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    String::from_utf8(text.chars().filter(|c| !is_vowel(c)).collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp25s1nj5z.rs:13:48\n\
    \   |\n13 |     String::from_utf8(text.chars().filter(|c| !is_vowel(c)).collect::<String>())\n\
    \   |                                                ^^^^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp25s1nj5z.rs:13:23\n \
    \  |\n13 |     String::from_utf8(text.chars().filter(|c| !is_vowel(c)).collect::<String>())\n\
    \   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `String`\n   |\n   = note: expected struct\
    \ `Vec<u8>`\n              found struct `String`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp25s1nj5z.rs:13:5\n   |\n12 | fn remove_vowels(text: String) ->\
    \ String {\n   |                                   ------ expected `String` because\
    \ of return type\n13 |     String::from_utf8(text.chars().filter(|c| !is_vowel(c)).collect::<String>())\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found enum `Result`\n   |\n   = note: expected struct\
    \ `String`\n                found enum `Result<String, FromUtf8Error>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| {\n        let c: u8 = c;\n       \
    \ match c {\n            'a' => 0,\n            'e' => 0,\n            'i' =>\
    \ 0,\n            'o' => 0,\n            'u' => 0,\n            _ => 1,\n    \
    \    }\n    }).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpclcgvctx.rs:14:21\n   |\n\
    14 |         let c: u8 = c;\n   |                --   ^ expected `u8`, found `&char`\n\
    \   |                |\n   |                expected due to this\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpclcgvctx.rs:16:13\n   |\n15 |         match\
    \ c {\n   |               - this expression has type `u8`\n16 |             'a'\
    \ => 0,\n   |             ^^^ expected `u8`, found `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpclcgvctx.rs:17:13\n   |\n15 |         match c {\n   | \
    \              - this expression has type `u8`\n16 |             'a' => 0,\n17\
    \ |             'e' => 0,\n   |             ^^^ expected `u8`, found `char`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpclcgvctx.rs:18:13\n   |\n15 |  \
    \       match c {\n   |               - this expression has type `u8`\n...\n18\
    \ |             'i' => 0,\n   |             ^^^ expected `u8`, found `char`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpclcgvctx.rs:19:13\n   |\n15 |  \
    \       match c {\n   |               - this expression has type `u8`\n...\n19\
    \ |             'o' => 0,\n   |             ^^^ expected `u8`, found `char`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpclcgvctx.rs:20:13\n   |\n15 |  \
    \       match c {\n   |               - this expression has type `u8`\n...\n20\
    \ |             'u' => 0,\n   |             ^^^ expected `u8`, found `char`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpclcgvctx.rs:16:20\n   |\n16 |  \
    \           'a' => 0,\n   |                    ^ expected `bool`, found integer\n\
    \nerror: aborting due to 7 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|x|\n            x.is_ascii_letter()\
    \ || x.is_ascii_digit() || x.is_ascii_punctuation()\n        )\n        .collect::<Vec<_>>()\n\
    \        .join(\"\")\n}\n\nfn main() {\n    let candidate = remove_vowels;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmph21j9y89.rs:15:15\n   |\n15 |          \
    \   x.is_ascii_letter() || x.is_ascii_digit() || x.is_ascii_punctuation()\n  \
    \ |               ^^^^^^^^^^^^^^^ help: there is an associated function with a\
    \ similar name: `is_ascii`\n\nerror[E0599]: the method `join` exists for struct\
    \ `Vec<char>`, but its trait bounds were not satisfied\n  --> /tmp/tmph21j9y89.rs:18:10\n\
    \   |\n18 |         .join(\"\")\n   |          ^^^^ method cannot be called on\
    \ `Vec<char>` due to unsatisfied trait bounds\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `[char]: Join<_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut s = text;\n    for i in 0..s.len() {\n        if i\
    \ < (s.len() - 1) && s.chars().any(|c| c.to_lowercase() in 'aeiou') {\n      \
    \      s = s.chars().filter(|c| c != s.chars()[s.chars().index(s.chars().last())]).collect::<String>()\
    \ + s.chars()[s.chars().index(s.chars().last())..].to_string();\n        }\n \
    \   }\n    s\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpr78jw25c.rs:15:71\n\
    \   |\n15 |         if i < (s.len() - 1) && s.chars().any(|c| c.to_lowercase()\
    \ in 'aeiou') {\n   |                                                        \
    \               ^^^^^^^\n   |\nhelp: if you meant to write a `str` literal, use\
    \ double quotes\n   |\n15 |         if i < (s.len() - 1) && s.chars().any(|c|\
    \ c.to_lowercase() in \"aeiou\") {\n   |                                     \
    \                                  ~~~~~~~\n\nerror: expected one of `)`, `,`,\
    \ `.`, `?`, or an operator, found keyword `in`\n  --> /tmp/tmpr78jw25c.rs:15:68\n\
    \   |\n15 |         if i < (s.len() - 1) && s.chars().any(|c| c.to_lowercase()\
    \ in 'aeiou') {\n   |                                                        \
    \            ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: expected\
    \ `{`, found keyword `in`\n  --> /tmp/tmpr78jw25c.rs:15:68\n   |\n15 |       \
    \  if i < (s.len() - 1) && s.chars().any(|c| c.to_lowercase() in 'aeiou') {\n\
    \   |         -- this `if` expression has a condition, but no block      ^^ expected\
    \ `{`\n\nerror: aborting due to 3 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = Vec::new();\n    let mut index = 0;\n    while\
    \ index < text.len() {\n        let c = text[index];\n        if !vowels.contains(&c)\
    \ {\n            vowels.push(c);\n            index += 1;\n        }\n    }\n\
    \    let mut result = String::new();\n    for &c in vowels.iter() {\n        result.push(c);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpuglg3n4q.rs:16:17\n\
    \   |\n16 |         let c = text[index];\n   |                 ^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if let Some(vowels) = VOWELS.as_mut() {\n        for vowel\
    \ in vowels {\n            text = text.to_lowercase().replace(vowel.char, \"\"\
    );\n        }\n    }\n    text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `VOWELS` in this scope\n  --> /tmp/tmpmozz5thd.rs:13:27\n\
    \   |\n13 |     if let Some(vowels) = VOWELS.as_mut() {\n   |                \
    \           ^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut s = String::new();\n    for (i, c) in text.chars().enumerate()\
    \ {\n        if !c.is_alphabetic() {\n            if !c.is_vowel() {\n       \
    \         s.push_str(&text.chars().skip(i + 1).collect());\n            }\n  \
    \      }\n    }\n    s\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for type `char` in the current\
    \ scope\n  --> /tmp/tmprrpwogrm.rs:16:19\n   |\n16 |             if !c.is_vowel()\
    \ {\n   |                   ^^^^^^^^ method not found in `char`\n\nerror[E0277]:\
    \ a value of type `str` cannot be built from an iterator over elements of type\
    \ `char`\n    --> /tmp/tmprrpwogrm.rs:17:54\n     |\n17   |                 s.push_str(&text.chars().skip(i\
    \ + 1).collect());\n     |                                                   \
    \   ^^^^^^^ value of type `str` cannot be built from `std::iter::Iterator<Item=char>`\n\
    \     |\n     = help: the trait `FromIterator<char>` is not implemented for `str`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| {\n            if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n                false\n \
    \           } else {\n                true\n            }\n        })\n      \
    \  .collect::<String>()\n        .join(\"\")\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp2f_ho6az.rs:15:18\n\
    \   |\n15 |             if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' {\n   |                  ^^ no implementation for `&char == char`\n   |\n\
    \   = help: the trait `PartialEq<char>` is not implemented for `&char`\n   = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't compare\
    \ `&char` with `char`\n  --> /tmp/tmp2f_ho6az.rs:15:30\n   |\n15 |           \
    \  if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n   |       \
    \                       ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n   = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror[E0277]: can't compare `&char`\
    \ with `char`\n  --> /tmp/tmp2f_ho6az.rs:15:42\n   |\n15 |             if c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n   |                \
    \                          ^^ no implementation for `&char == char`\n   |\n  \
    \ = help: the trait `PartialEq<char>` is not implemented for `&char`\n   = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't compare\
    \ `&char` with `char`\n  --> /tmp/tmp2f_ho6az.rs:15:54\n   |\n15 |           \
    \  if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n   |       \
    \                                               ^^ no implementation for `&char\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmp2f_ho6az.rs:15:66\n   |\n15\
    \ |             if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n\
    \   |                                                                  ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0599]: no method named `join` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp2f_ho6az.rs:22:10\n  "
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // Implement remove_vowels here.\n    if text == \"\" {\n \
    \       return \"\"\n    }\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n    text.split_whitespace().filter(|x| !vowels.contains(&x)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqnrwetv9.rs:15:16\n   |\n\
    12 | fn remove_vowels(text: String) -> String {\n   |                        \
    \           ------ expected `String` because of return type\n...\n15 |       \
    \  return \"\"\n   |                ^^- help: try using a conversion method: `.to_string()`\n\
    \   |                |\n   |                expected struct `String`, found `&str`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = \"aeiouAEIOU\";\n\n    for c in text.chars()\
    \ {\n        if !vowels.contains(&c) {\n            text += &*c;\n        }\n\
    \    }\n    text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `Fn<(char,)>` closure, found `char`\n    --> /tmp/tmpoj7y_n8c.rs:16:29\n\
    \     |\n16   |         if !vowels.contains(&c) {\n     |                    --------\
    \ ^^ expected an `Fn<(char,)>` closure, found `char`\n     |                 \
    \   |\n     |                    required by a bound introduced by this call\n\
    \     |\n     = help: the trait `Fn<(char,)>` is not implemented for `char`\n\
    \     = note: required because of the requirements on the impl of `FnOnce<(char,)>`\
    \ for `&char`\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `&char`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider dereferencing here\n     |\n16   |         if !vowels.contains(*&c)\
    \ {\n     |                             +\n\nerror[E0614]: type `char` cannot\
    \ be dereferenced\n  --> /tmp/tmpoj7y_n8c.rs:17:22\n   |\n17 |             text\
    \ += &*c;\n   |                      ^^\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text\n        .chars()\n        .filter(|c| match c.to_lowercase()\
    \ {\n            'a' => true,\n            'e' => true,\n            'i' => true,\n\
    \            'o' => true,\n            'u' => true,\n            _ => false,\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx4rm7gvt.rs:16:13\n   |\n\
    15 |         .filter(|c| match c.to_lowercase() {\n   |                      \
    \     ---------------- this expression has type `ToLowercase`\n16 |          \
    \   'a' => true,\n   |             ^^^ expected struct `ToLowercase`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpx4rm7gvt.rs:17:13\n   |\n15 |\
    \         .filter(|c| match c.to_lowercase() {\n   |                         \
    \  ---------------- this expression has type `ToLowercase`\n16 |             'a'\
    \ => true,\n17 |             'e' => true,\n   |             ^^^ expected struct\
    \ `ToLowercase`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx4rm7gvt.rs:18:13\n\
    \   |\n15 |         .filter(|c| match c.to_lowercase() {\n   |               \
    \            ---------------- this expression has type `ToLowercase`\n...\n18\
    \ |             'i' => true,\n   |             ^^^ expected struct `ToLowercase`,\
    \ found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx4rm7gvt.rs:19:13\n\
    \   |\n15 |         .filter(|c| match c.to_lowercase() {\n   |               \
    \            ---------------- this expression has type `ToLowercase`\n...\n19\
    \ |             'o' => true,\n   |             ^^^ expected struct `ToLowercase`,\
    \ found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx4rm7gvt.rs:20:13\n\
    \   |\n15 |         .filter(|c| match c.to_lowercase() {\n   |               \
    \            ---------------- this expression has type `ToLowercase`\n...\n20\
    \ |             'u' => true,\n   |             ^^^ expected struct `ToLowercase`,\
    \ found `char`\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // your code goes here\n    let mut result = String::new();\n\
    \    let vowels = \"aeiouAEIOU\";\n    for ch in text.chars() {\n        if !vowels.contains(&ch)\
    \ {\n            result.push(*ch);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `Fn<(char,)>` closure, found `char`\n    --> /tmp/tmp7zpxhigm.rs:17:29\n\
    \     |\n17   |         if !vowels.contains(&ch) {\n     |                   \
    \ -------- ^^^ expected an `Fn<(char,)>` closure, found `char`\n     |       \
    \             |\n     |                    required by a bound introduced by this\
    \ call\n     |\n     = help: the trait `Fn<(char,)>` is not implemented for `char`\n\
    \     = note: required because of the requirements on the impl of `FnOnce<(char,)>`\
    \ for `&char`\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `&char`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider dereferencing here\n     |\n17   |         if !vowels.contains(*&ch)\
    \ {\n     |                             +\n\nerror[E0614]: type `char` cannot\
    \ be dereferenced\n  --> /tmp/tmp7zpxhigm.rs:18:25\n   |\n18 |             result.push(*ch);\n\
    \   |                         ^^^\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut output = String::new();\n    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n\n    for c in text.chars() {\n        if !vowels.contains(c)\
    \ {\n            output.push(c);\n        }\n    }\n    output\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpivfy0m2m.rs:17:29\n   |\n\
    17 |         if !vowels.contains(c) {\n   |                             ^\n  \
    \ |                             |\n   |                             expected `&char`,\
    \ found `char`\n   |                             help: consider borrowing here:\
    \ `&c`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    remove_vowels(&text)\n}\n\nfn main() {\n    let candidate =\
    \ remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwjsywqdy.rs:13:19\n   |\n\
    13 |     remove_vowels(&text)\n   |                   ^^^^^ expected struct `String`,\
    \ found `&String`\n   |\nhelp: consider removing the borrow\n   |\n13 -     remove_vowels(&text)\n\
    13 +     remove_vowels(text)\n   | \n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.to_string().chars().filter_map(|c| match c {\n       \
    \ 'a' | 'e' | 'i' | 'o' | 'u' => Some(c),\n        _ => None,\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"aei\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpw8air2an.rs:22:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| {\n            c.to_ascii_lowercase()\n\
    \                .to_ascii_uppercase()\n                .contains(&b'AEIOU')\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp9q1jtkfe.rs:17:28\n\
    \   |\n17 |                 .contains(&b'AEIOU')\n   |                       \
    \     ^^^^^^^^\n   |\nhelp: if you meant to write a byte string literal, use double\
    \ quotes\n   |\n17 |                 .contains(&b\"AEIOU\")\n   |            \
    \                ~~~~~~~~\n\nerror[E0599]: no method named `contains` found for\
    \ type `char` in the current scope\n  --> /tmp/tmp9q1jtkfe.rs:17:18\n   |\n17\
    \ |                 .contains(&b'AEIOU')\n   |                  ^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text.len() <= 0 {\n        return \"\";\n    }\n\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort_unstable();\n\
    \n    let mut text_without_vowels = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(c) {\n            text_without_vowels.push_str(&c.to_string());\n\
    \        } else {\n            text_without_vowels.push(c);\n        }\n    }\n\
    \    text_without_vowels\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcr3ce7ti.rs:14:16\n   |\n\
    12 | fn remove_vowels(text: String) -> String {\n   |                        \
    \           ------ expected `String` because of return type\n13 |     if text.len()\
    \ <= 0 {\n14 |         return \"\";\n   |                ^^- help: try using a\
    \ conversion method: `.to_string()`\n   |                |\n   |             \
    \   expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcr3ce7ti.rs:22:29\n   |\n22 |         if !vowels.contains(c) {\n\
    \   |                             ^ expected `&&str`, found `char`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| VOWELS.contains(c)).collect()\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `VOWELS` in this scope\n  --> /tmp/tmph1bnq_bp.rs:13:29\n\
    \   |\n13 |     text.chars().filter(|c| VOWELS.contains(c)).collect()\n   |  \
    \                           ^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_text: String = text;\n    for ch in text.chars()\
    \ {\n        if ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u'\
    \ {\n            continue;\n        }\n        new_text.push(ch);\n    }\n   \
    \ new_text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `text`\n  --> /tmp/tmpyd94wjrn.rs:14:15\n\
    \   |\n12 | fn remove_vowels(text: String) -> String {\n   |                 \
    \ ---- move occurs because `text` has type `String`, which does not implement\
    \ the `Copy` trait\n13 |     let mut new_text: String = text;\n   |          \
    \                      ---- value moved here\n14 |     for ch in text.chars()\
    \ {\n   |               ^^^^^^^^^^^^ value borrowed here after move\n   |\n  \
    \ = note: borrow occurs due to deref coercion to `str`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = HashMap::<u8, u8, ()>::new();\n    vowels.insert(b'a',\
    \ b'A');\n    vowels.insert(b'e', b'E');\n    vowels.insert(b'i', b'I');\n   \
    \ vowels.insert(b'o', b'O');\n    vowels.insert(b'u', b'U');\n    vowels.insert(b'y',\
    \ b'Y');\n    vowels.insert(b'b', b'B');\n    vowels.insert(b't', b'T');\n   \
    \ vowels.insert(b'd', b'D');\n    vowels.insert(b'g', b'G');\n    vowels.insert(b'h',\
    \ b'H');\n    vowels.insert(b'z', b'Z');\n    vowels.insert(b's', b'S');\n   \
    \ vowels.insert(b'p', b'P');\n    vowels.insert(b'x', b'X');\n    vowels.insert(b'w',\
    \ b'W');\n    vowels.insert(b'v', b'V');\n    vowels.insert(b'k', b'K');\n   \
    \ vowels.insert(b'm', b'M');\n    vowels.insert(b'j', b'J');\n    vowels.insert(b'r',\
    \ b'R');\n    vowels.insert(b'b', b'B');\n    vowels.insert(b'y', b'Y');\n   \
    \ vowels.insert(b'h', b'H');\n    vowels.insert(b'd', b'D');\n    vowels.insert(b'm',\
    \ b'M');\n    vowels.insert(b'k', b'K');\n    vowels.insert(b'n', b'N');\n   \
    \ vowels.insert(b't', b'T');\n    vowels.insert(b'o', b'O');\n    vowels.insert(b'k',\
    \ b'K');\n    vowels.insert(b'a', b'A');\n\n    let mut res = String::new();\n\
    \    for c in text.bytes() {\n        let c = c.unwrap();\n        if !vowels.contains_key(&c)\
    \ {\n            res.push_str(&c.to_string());\n        } else {\n           \
    \ res.push_str(&vowels.remove_key(&c).unwrap().to_string());\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpday_w_qh.rs:13:22\n   |\n13 |     let mut vowels = HashMap::<u8, u8,\
    \ ()>::new();\n   |                      ^^^^^^^ not found in this scope\n   |\n\
    help: consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror[E0599]: no method named `unwrap` found for type `u8` in the current\
    \ scope\n  --> /tmp/tmpday_w_qh.rs:49:19\n   |\n49 |         let c = c.unwrap();\n\
    \   |                   ^^^^^^ method not found in `u8`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter_map(|c| {\n        if c >= 'a' && c <=\
    \ 'z' {\n            Some(c as u32 + 'a' as u32)\n        } else {\n         \
    \   Some(c)\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1lvaxqj3.rs:17:18\n   |\n\
    17 |             Some(c)\n   |                  ^ expected `u32`, found `char`\n\
    \   |\nhelp: you can cast a `char` to a `u32`, since a `char` always occupies\
    \ 4 bytes\n   |\n17 |             Some(c as u32)\n   |                    ++++++\n\
    \nerror[E0277]: a value of type `String` cannot be built from an iterator over\
    \ elements of type `u32`\n    --> /tmp/tmp1lvaxqj3.rs:19:8\n     |\n19   |   \
    \  }).collect()\n     |        ^^^^^^^ value of type `String` cannot be built\
    \ from `std::iter::Iterator<Item=u32>`\n     |\n     = help: the trait `FromIterator<u32>`\
    \ is not implemented for `String`\n     = help: the following other types implement\
    \ trait `FromIterator<A>`:\n               <String as FromIterator<&'a char>>\n\
    \               <String as FromIterator<&'a str>>\n               <String as FromIterator<Box<str>>>\n\
    \               <String as FromIterator<Cow<'a, str>>>\n               <String\
    \ as FromIterator<String>>\n               <String as FromIterator<char>>\nnote:\
    \ required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| c.is_vowel())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpfdw_sc0l.rs:14:23\n   |\n14 |         .filter(|c|\
    \ c.is_vowel())\n   |                       ^^^^^^^^ method not found in `&char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n        .map(|c| c + '\\0').collect::<String>().to_string()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp_y1zr7jb.rs:13:31\n\
    \   |\n13 |     text.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u')\n   |                               ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp_y1zr7jb.rs:13:43\n\
    \   |\n13 |     text.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u')\n   |                                           ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp_y1zr7jb.rs:13:55\n\
    \   |\n13 |     text.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u')\n   |                                                  \
    \     ^^ no implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp_y1zr7jb.rs:13:67\n\
    \   |\n13 |     text.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u')\n   |                                                  \
    \                 ^^ no implementation for `&char == char`\n   |\n   = help: the\
    \ trait `PartialEq<char>` is not implemented for `&char`\n   = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror[E0277]: can't compare `&char`\
    \ with `char`\n  --> /tmp/tmp_y1zr7jb.rs:13:79\n   |\n13 |     text.chars().filter(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n   |            \
    \                                                                   ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    remove_vowels_func(&text)\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `remove_vowels_func` in this scope\n\
    \  --> /tmp/tmppc_mc6yh.rs:13:5\n   |\n13 |     remove_vowels_func(&text)\n  \
    \ |     ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_text = text;\n    for (i, ch) in text.chars().enumerate()\
    \ {\n        // Avoids some unwanted characters in some languages, like german\
    \ '\xDF'.\n        // In that case we can add an additional check based on a flag\
    \ to ignore it.\n        // It also checks if we are in the first or last position\
    \ and removes them from the string.\n        if ch >= 'a' && ch <= 'z' && !(i\
    \ == 1 || i == text.len() - 1) {\n            new_text = new_text.replace(&ch,\
    \ '');\n        }\n    }\n    new_text\n}\n\nfn main() {\n    let candidate =\
    \ remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: empty character literal\n  --> /tmp/tmpffpyaxgo.rs:19:47\n   |\n\
    19 |             new_text = new_text.replace(&ch, '');\n   |                 \
    \                              ^ empty character literal\n\nerror[E0277]: expected\
    \ a `Fn<(char,)>` closure, found `char`\n   --> /tmp/tmpffpyaxgo.rs:19:41\n  \
    \  |\n19  |             new_text = new_text.replace(&ch, '');\n    |         \
    \                        ------- ^^^ expected an `Fn<(char,)>` closure, found\
    \ `char`\n    |                                 |\n    |                     \
    \            required by a bound introduced by this call\n    |\n    = help: the\
    \ trait `Fn<(char,)>` is not implemented for `char`\n    = note: required because\
    \ of the requirements on the impl of `FnOnce<(char,)>` for `&char`\n    = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `&char`\n\
    note: required by a bound in `str::<impl str>::replace`\nhelp: consider dereferencing\
    \ here\n    |\n19  |             new_text = new_text.replace(*&ch, '');\n    |\
    \                                         +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text.len() == 0 {\n        return text;\n    }\n    let\
    \ mut new_text = text;\n    new_text.remove(b'a');\n    new_text.remove(b'e');\n\
    \    new_text.remove(b'i');\n    new_text.remove(b'o');\n    new_text.remove(b'u');\n\
    \    new_text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf04ujzud.rs:17:21\n   |\n\
    17 |     new_text.remove(b'a');\n   |                     ^^^^ expected `usize`,\
    \ found `u8`\n   |\nhelp: you can convert a `u8` to a `usize`\n   |\n17 |    \
    \ new_text.remove(b'a'.into());\n   |                         +++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpf04ujzud.rs:18:21\n   |\n18 |     new_text.remove(b'e');\n\
    \   |                     ^^^^ expected `usize`, found `u8`\n   |\nhelp: you can\
    \ convert a `u8` to a `usize`\n   |\n18 |     new_text.remove(b'e'.into());\n\
    \   |                         +++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpf04ujzud.rs:19:21\n   |\n19 |     new_text.remove(b'i');\n   |     \
    \                ^^^^ expected `usize`, found `u8`\n   |\nhelp: you can convert\
    \ a `u8` to a `usize`\n   |\n19 |     new_text.remove(b'i'.into());\n   |    \
    \                     +++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf04ujzud.rs:20:21\n\
    \   |\n20 |     new_text.remove(b'o');\n   |                     ^^^^ expected\
    \ `usize`, found `u8`\n   |\nhelp: you can convert a `u8` to a `usize`\n   |\n\
    20 |     new_text.remove(b'o'.into());\n   |                         +++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpf04ujzud.rs:21:21\n   |\n21 |\
    \     new_text.remove(b'u');\n   |                     ^^^^ expected `usize`,\
    \ found `u8`\n   |\nhelp: you can convert a `u8` to a `usize`\n   |\n21 |    \
    \ new_text.remove(b'u'.into());\n   |                         +++++++\n\nerror:\
    \ aborting due to 5 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !VOWELS.contains(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `VOWELS` in this scope\n  --> /tmp/tmpz_u38dus.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !VOWELS.contains(c)).collect()\n   | \
    \                             ^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['b'];\n    match vowels.binary_search(&text[0])\
    \ {\n        None => text,\n        Some(index) => if text[index] == 'a' || text[index]\
    \ == 'e' || text[index] == 'i' || text[index] == 'o' || text[index] == 'u' {\n\
    \            text.to_string()\n        } else {\n            text\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmpbap7p7dt.rs:14:33\n   |\n14 |     match vowels.binary_search(&text[0])\
    \ {\n   |                                 ^^^^^^^ `String` cannot be indexed by\
    \ `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbap7p7dt.rs:15:9\n\
    \   |\n14 |     match vowels.binary_search(&text[0]) {\n   |           ------------------------------\
    \ this expression has type `Result<usize, usize>`\n15 |         None => text,\n\
    \   |         ^^^^ expected enum `Result`, found enum `Option`\n   |\n   = note:\
    \ expected enum `Result<usize, usize>`\n              found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbap7p7dt.rs:16:9\n   |\n14 | \
    \    match vowels.binary_search(&text[0]) {\n   |           ------------------------------\
    \ this expression has type `Result<usize, usize>`\n15 |         None => text,\n\
    16 |         Some(index) => if text[index] == 'a' || text[index] == 'e' || text[index]\
    \ == 'i' || text[index] == 'o' || text[index] == 'u' {\n   |         ^^^^^^^^^^^\
    \ expected enum `Result`, found enum `Option`\n   |\n   = note: expected enum\
    \ `Result<usize, usize>`\n              found enum `Option<_>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    remove_vowels(&text)\n}\n\nfn main() {\n    let candidate =\
    \ remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9f_unagv.rs:13:19\n   |\n\
    13 |     remove_vowels(&text)\n   |                   ^^^^^ expected struct `String`,\
    \ found `&String`\n   |\nhelp: consider removing the borrow\n   |\n13 -     remove_vowels(&text)\n\
    13 +     remove_vowels(text)\n   | \n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // TODO\n    text.to_string()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmp79bp1akx.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = Vec::new();\n    for c in text.chars() {\n\
    \        match c {\n            'a' | 'e' | 'i' | 'o' | 'u' => {}\n          \
    \  _ => vowels.push(c),\n        }\n    }\n    String::from_utf8_lossy(vowels.iter().filter(|&c|\
    \ c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')).into_owned()\n}\n\
    \nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpqsun_he_.rs:20:57\n\
    \   |\n20 |     String::from_utf8_lossy(vowels.iter().filter(|&c| c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u')).into_owned()\n   |          \
    \                                               ^^ no implementation for `&char\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpqsun_he_.rs:20:69\n   |\n20\
    \ |     String::from_utf8_lossy(vowels.iter().filter(|&c| c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u')).into_owned()\n   |                   \
    \                                                  ^^ no implementation for `&char\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpqsun_he_.rs:20:81\n   |\n20\
    \ |     String::from_utf8_lossy(vowels.iter().filter(|&c| c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u')).into_owned()\n   |                   \
    \                                                              ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpqsun_he_.rs:20:93\n\
    \   |\n20 |     String::from_utf8_lossy(vowels.iter().filter(|&c| c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u')).into_owned()\n   |          \
    \                                                                            \
    \       ^^ no implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpqsun_he_.rs:20:105\n\
    \   |\n20 |     String::from_utf8_lossy(vowels.iter().filter(|&c| c != 'a' &&\
    \ c != 'e"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter_map(|c| c.to_ascii_lowercase())\n\
    \        .filter_map(|c| !CHAR_Vowels.contains(c))\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `CHAR_Vowels` in this scope\n  --> /tmp/tmpjniew0_8.rs:15:26\n\
    \   |\n15 |         .filter_map(|c| !CHAR_Vowels.contains(c))\n   |          \
    \                ^^^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjniew0_8.rs:14:25\n   |\n14 |         .filter_map(|c| c.to_ascii_lowercase())\n\
    \   |                         ^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `char`\n   |\n   = note: expected enum `Option<_>`\n              found type\
    \ `char`\nhelp: try wrapping the expression in `Some`\n   |\n14 |         .filter_map(|c|\
    \ Some(c.to_ascii_lowercase()))\n   |                         +++++          \
    \            +\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter_map(|c| {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            None\n        } else\
    \ {\n            Some(c)\n        }\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmp1g6o_28r.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| c.is_uppercase())\n     \
    \   .filter(|c| !c.is_lowercase())\n        .filter(|c| !c.is_vowel())\n     \
    \   .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmp3dajp4mc.rs:16:24\n   |\n16 |         .filter(|c|\
    \ !c.is_vowel())\n   |                        ^^^^^^^^ method not found in `&char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| c.is_alphabetic(Character::Vowel))\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Character`\n \
    \ --> /tmp/tmpwwbaq52q.rs:14:37\n   |\n14 |         .filter(|c| c.is_alphabetic(Character::Vowel))\n\
    \   |                                     ^^^^^^^^^ use of undeclared type `Character`\n\
    \nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpwwbaq52q.rs:14:23\n    |\n14  |         .filter(|c| c.is_alphabetic(Character::Vowel))\n\
    \    |                       ^^^^^^^^^^^^^ ---------------- supplied 1 argument\n\
    \    |                       |\n    |                       expected 0 arguments\n\
    \    |\nnote: associated function defined here\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut output = String::new();\n    text.chars().filter(|c|\
    \ !c.is_lowercase()).for_each(|c| output.push(c));\n    output\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\n\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpw91affk5.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut text = text;\n    let mut buffer = String::new();\n\
    \n    for c in text.chars() {\n        if !is_vowel(&c) {\n            buffer\
    \ += c;\n        }\n    }\n    return buffer;\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpjj6man3o.rs:17:13\n\
    \   |\n17 |         if !is_vowel(&c) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjj6man3o.rs:18:23\n\
    \   |\n18 |             buffer += c;\n   |                       ^ expected `&str`,\
    \ found `char`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // Your code here\n    let mut alphabet = HashMap::new();\n\
    \    alphabet.insert(\"\".to_string(), \"\");\n    alphabet.insert(\"a\"..\"z\"\
    .to_string(), \"\");\n    alphabet.insert(\"A\"..\"Z\".to_string(), \"\");\n\n\
    \    match alphabet.iter().any(|(_, s)| s.contains(text)) {\n        true => text\n\
    \            .chars()\n            .filter(|c| !alphabet.contains_key(&c.to_string()))\n\
    \            .join()\n            .to_string(),\n        false => text,\n    }\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpxy7r147i.rs:14:24\n   |\n14 |     let mut alphabet = HashMap::new();\n\
    \   |                        ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxy7r147i.rs:16:26\n   |\n16 |     alphabet.insert(\"\
    a\"..\"z\".to_string(), \"\");\n   |                          ^^^^^^^^^^^^^^^\n\
    \   |                          |\n   |                          expected `&str`,\
    \ found struct `String`\n   |                          help: consider borrowing\
    \ here: `&\"z\".to_string()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxy7r147i.rs:17:26\n\
    \   |\n17 |     alphabet.insert(\"A\"..\"Z\".to_string(), \"\");\n   |       \
    \                   ^^^^^^^^^^^^^^^\n   |                          |\n   |   \
    \                       expected `&str`, found struct `String`\n   |         \
    \                 help: consider borrowing here: `&\"Z\".to_string()`\n\nerror[E0599]:\
    \ no method named `join` found for struct `Filter` in the current scope\n  -->\
    \ /tmp/tmpxy7r147i.rs:23:14\n   |\n23 |             .join()\n   |            \
    \  ^^^^ method not found in `Filter<Chars<'_>, [closure@/tmp/tmpxy7r147i.rs:22:21:\
    \ 22:63]>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0433, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|x|\n            x.is_ascii_uppercase()\
    \ ||\n            x.is_ascii_lowercase() ||\n            x.to_ascii_lowercase()\
    \ == x\n        )\n        .collect::<Vec<_>>()\n        .filter(|x|\n       \
    \     !is_vowel(x)\n        )\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpmdlxcsal.rs:21:14\n\
    \   |\n21 |             !is_vowel(x)\n   |              ^^^^^^^^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmdlxcsal.rs:17:39\n\
    \   |\n17 |             x.to_ascii_lowercase() == x\n   |                    \
    \                   ^ expected `char`, found `&char`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n17 |             x.to_ascii_lowercase() == *x\n   |      \
    \                                 +\n\nerror[E0599]: `Vec<char>` is not an iterator\n\
    \   --> /tmp/tmpmdlxcsal.rs:20:10\n    |\n20  |           .filter(|x|\n    | \
    \           ^^^^^^ `Vec<char>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<char>: Iterator`\n      \
    \      which is required by `&mut Vec<char>: Iterator`\n            `[char]: Iterator`\n\
    \            which is required by `&mut [char]: Iterator`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter_map(|c| match c {\n        'a'..'z' =>\
    \ Some(c.to_string()),\n        _ => None,\n    })\n    .collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmp9_5osh4u.rs:14:9\n\
    \   |\n14 |         'a'..'z' => Some(c.to_string()),\n   |         ^^^^^^^^\n\
    \   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0658`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::with_capacity(text.len());\n    for\
    \ c in text.chars() {\n        if !Vowels::contains_vowel(c) {\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Vowels`\n  -->\
    \ /tmp/tmpdcqer7_x.rs:15:13\n   |\n15 |         if !Vowels::contains_vowel(c)\
    \ {\n   |             ^^^^^^ use of undeclared type `Vowels`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter()\n        .map(|c| if c.to_ascii_lowercase().is_lowercase()\
    \ || c.to_ascii_uppercase().is_uppercase() {\n            Some(c)\n        } else\
    \ {\n            None\n        })\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmp3at598xk.rs:13:18\n    |\n13  |     text.chars().filter()\n  \
    \  |                  ^^^^^^- supplied 0 arguments\n    |                  |\n\
    \    |                  expected 1 argument\n    |\nnote: associated function\
    \ defined here\n\nerror[E0277]: a value of type `String` cannot be built from\
    \ an iterator over elements of type `Option<char>`\n    --> /tmp/tmp3at598xk.rs:19:10\n\
    \     |\n19   |         .collect()\n     |          ^^^^^^^ value of type `String`\
    \ cannot be built from `std::iter::Iterator<Item=Option<char>>`\n     |\n    \
    \ = help: the trait `FromIterator<Option<char>>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut s: String = \"\";\n    for c in text.chars() {\n  \
    \      if c.is_uppercase() {\n            if s.is_empty() {\n                s\
    \ = c;\n            } else {\n                s += c;\n            }\n       \
    \ } else {\n            if s.is_empty() {\n                s = c;\n          \
    \  }\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpydmgyjhn.rs:13:25\n   |\n\
    13 |     let mut s: String = \"\";\n   |                ------   ^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                |        |\n\
    \   |                |        expected struct `String`, found `&str`\n   |   \
    \             expected due to this\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpydmgyjhn.rs:17:21\n\
    \   |\n13 |     let mut s: String = \"\";\n   |                ------ expected\
    \ due to this type\n...\n17 |                 s = c;\n   |                   \
    \  ^- help: try using a conversion method: `.to_string()`\n   |              \
    \       |\n   |                     expected struct `String`, found `char`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpydmgyjhn.rs:19:22\n   |\n19 |  \
    \               s += c;\n   |                      ^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpydmgyjhn.rs:23:21\n   |\n13 |\
    \     let mut s: String = \"\";\n   |                ------ expected due to this\
    \ type\n...\n23 |                 s = c;\n   |                     ^- help: try\
    \ using a conversion method: `.to_string()`\n   |                     |\n   |\
    \                     expected struct `String`, found `char`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    remove_vowels_naive(text)\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `remove_vowels_naive` in this scope\n\
    \  --> /tmp/tmp93knc1rw.rs:13:5\n   |\n13 |     remove_vowels_naive(text)\n  \
    \ |     ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut iter = text.chars().enumerate();\n    let mut vowels\
    \ = HashSet::new();\n    loop {\n        match iter.next() {\n            None\
    \ => break,\n            Some((i, c)) => if vowels.contains(c) { vowels.remove(&c);\
    \ },\n        }\n    }\n    let mut s = String::with_capacity(text.len());\n \
    \   for (i, c) in vowels {\n        s.append(&text[i..i + 1]);\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpfil87r7o.rs:14:22\n   |\n14 |     let mut vowels = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0599]:\
    \ no method named `append` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpfil87r7o.rs:23:11\n   |\n23 |         s.append(&text[i..i + 1]);\n \
    \  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .cloned()\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<Filter<Chars<'_>, [closure@/tmp/tmp10chfyej.rs:14:17:\
    \ 14:44]> as Iterator>::Item == &_`\n    --> /tmp/tmp10chfyej.rs:15:10\n     |\n\
    15   |         .cloned()\n     |          ^^^^^^ expected reference, found `char`\n\
    \     |\n     = note: expected reference `&_`\n                     found type\
    \ `char`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method `collect`\
    \ exists for struct `Cloned<Filter<Chars<'_>, [closure@/tmp/tmp10chfyej.rs:14:17:\
    \ 14:44]>>`, but its trait bounds were not satisfied\n  --> /tmp/tmp10chfyej.rs:16:10\n\
    \   |\n16 |            .collect::<String>()\n   |             ^^^^^^^ method cannot\
    \ be called on `Cloned<Filter<Chars<'_>, [closure@/tmp/tmp10chfyej.rs:14:17: 14:44]>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<Filter<Chars<'_>, [closure@/tmp/tmp10chfyej.rs:14:17:\
    \ 14:44]> as Iterator>::Item = &_`\n           which is required by `Cloned<Filter<Chars<'_>,\
    \ [closure@/tmp/tmp10chfyej.rs:14:17: 14:44]>>: Iterator`\n           `Cloned<Filter<Chars<'_>,\
    \ [closure@/tmp/tmp10chfyej.rs:14:17: 14:44]>>: Iterator`\n           which is\
    \ required by `&mut Cloned<Filter<Chars<'_>, [closure@/tmp/tmp10chfyej.rs:14:17:\
    \ 14:44]>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut s = text;\n    for c in s.chars() {\n        match\
    \ c {\n            'a' .. 'z' => {}\n            'A' .. 'Z' => {}\n          \
    \  _ => {\n                s = s.chars().filter(|x| *x != *c).collect::<String>();\n\
    \            }\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmp2hv8tquw.rs:16:13\n\
    \   |\n16 |             'a' .. 'z' => {}\n   |             ^^^^^^^^^^\n   |\n\
    \   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmp2hv8tquw.rs:17:13\n   |\n17 |             'A' .. 'Z' => {}\n  \
    \ |             ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0614]: type `char` cannot be dereferenced\n \
    \ --> /tmp/tmp2hv8tquw.rs:19:48\n   |\n19 |                 s = s.chars().filter(|x|\
    \ *x != *c).collect::<String>();\n   |                                       \
    \         ^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0614, E0658.\nFor more information about an error, try `rustc\
    \ --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec![];\n    vowels.push('a', 'e', 'i', 'o',\
    \ 'u');\n    for x in vowels.iter() {\n        if text.contains(&x) {\n      \
    \      text = text.remove(&x);\n        }\n    }\n    text\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 5 arguments were supplied\n\
    \    --> /tmp/tmpumfsk744.rs:14:12\n     |\n14   |     vowels.push('a', 'e', 'i',\
    \ 'o', 'u');\n     |            ^^^^ ---  ---  ---  ---  --- supplied 5 arguments\n\
    \     |            |\n     |            expected 1 argument\n     |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpumfsk744.rs:17:32\n\
    \   |\n17 |             text = text.remove(&x);\n   |                        \
    \        ^^ expected `usize`, found `&&_`\n   |\n   = note:   expected type `usize`\n\
    \           found reference `&&_`\nhelp: consider removing the `&` and dereferencing\
    \ the borrow instead\n   |\n17 |             text = text.remove(*x);\n   |   \
    \                             ~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpumfsk744.rs:17:20\n\
    \   |\n12 | fn remove_vowels(text: String) -> String {\n   |                 \
    \       ------ expected due to this parameter type\n...\n17 |             text\
    \ = text.remove(&x);\n   |                    ^^^^^^^^^^^^^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                    |\n   |       \
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text\n        .chars()\n        .filter(|c| !is_vowel(c))\n\
    \        .collect::<String>(String)\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpn3x__h11.rs:15:22\n\
    \   |\n15 |         .filter(|c| !is_vowel(c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n\
    \   --> /tmp/tmpn3x__h11.rs:16:28\n    |\n16  |           .collect::<String>(String)\n\
    \    |                              ^^^^^^ help: use struct literal syntax instead:\
    \ `String { vec: val }`\n\nerror[E0061]: this function takes 0 arguments but 1\
    \ argument was supplied\n    --> /tmp/tmpn3x__h11.rs:16:10\n     |\n16   |   \
    \      .collect::<String>(String)\n     |          ^^^^^^^           ------ supplied\
    \ 1 argument\n     |          |\n     |          expected 0 arguments\n     |\n\
    note: associated function defined here\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0423, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
