name: HumanEval_130_tri
language: rust
results:
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut seq =\
    \ Vec::new();\n    \n    if n < 3 {\n        seq.push(n);\n    } else {\n    \
    \    seq.push(1);\n        seq.push(n / 2);\n    }\n    for i in 2..(n + 1) {\n\
    \        seq.push(seq[i - 1] + seq[i - 2] + seq[i -1]);\n    }\n    seq\n}\n\n\
    fn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphe18lu0u.rs:26:18\n\
    \   |\n26 |         seq.push(seq[i - 1] + seq[i - 2] + seq[i -1]);\n   |     \
    \             ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphe18lu0u.rs:26:31\n\
    \   |\n26 |         seq.push(seq[i - 1] + seq[i - 2] + seq[i -1]);\n   |     \
    \                          ^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmphe18lu0u.rs:26:44\n   |\n26 |         seq.push(seq[i - 1] + seq[i\
    \ - 2] + seq[i -1]);\n   |                                            ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut ans =\
    \ vec![];\n    if n == 0 || n == 1 {\n        ans.push(3);\n    } else {\n   \
    \     let mut n1 = n - 1;\n        let mut n2 = n + 1;\n        while n2 > 0 {\n\
    \            n1 += 1;\n            n2 -= 1;\n            ans.push(n1);\n     \
    \   }\n        ans.push(n1);\n    }\n    ans\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4, 5, 6, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp7ssnqm9c.rs:35:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    // TODO: implement\
    \ function\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp35an17rl.rs:16:21\n   |\n\
    16 | fn tri(n: isize) -> Vec<isize> {\n   |    ---              ^^^^^^^^^^ expected\
    \ struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    if n % 2 == 0 {\n        let mut a = 1;\n        let mut\
    \ b = 1;\n        let mut c = 1;\n        for i in 1..n / 2 {\n            a +=\
    \ i;\n            b += i;\n            c += i;\n        }\n        result.push(a);\n\
    \        result.push(b);\n        result.push(c);\n    } else {\n        let mut\
    \ a = 1;\n        let mut b = 2;\n        let mut c = 1;\n        for i in 1..n\
    \ / 2 {\n            a += i;\n            b += i;\n            c += i;\n     \
    \   }\n        result.push(a);\n        result.push(b);\n        result.push(c);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpcji07vkn.rs:48:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    match n {\n \
    \       0 => vec![1],\n        1 => vec![3],\n        2 => vec![1, 2, 3],\n  \
    \      3 => vec![2, 3, 5],\n        _ => vec![3, 6, 10, 15],\n    }\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 5]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpy3b4vdxp.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut vec:\
    \ Vec<isize> = Vec::new();\n    for i in (1..n).rev() {\n        vec.push(tri(i\
    \ - 1) + tri(i - 2) + tri(i + 1))\n    }\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpa7ecdguq.rs:19:29\n\
    \   |\n19 |         vec.push(tri(i - 1) + tri(i - 2) + tri(i + 1))\n   |     \
    \             ---------- ^ ---------- Vec<isize>\n   |                  |\n  \
    \ |                  Vec<isize>\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result:\
    \ Vec<isize> = vec![];\n    for i in 1..=n {\n        let tmp: isize = i / 2;\n\
    \        result.push(tmp);\n        i += tmp;\n        result.push(i);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpv3k3pc5q.rs:21:9\n\
    \   |\n18 |     for i in 1..=n {\n   |         -\n   |         |\n   |       \
    \  first assignment to `i`\n   |         help: consider making this binding mutable:\
    \ `mut i`\n...\n21 |         i += tmp;\n   |         ^^^^^^^^ cannot assign twice\
    \ to immutable variable\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut seq =\
    \ Vec::new();\n    for i in 0..n {\n        seq.push(3);\n        if i % 2 ==\
    \ 0 {\n            seq.push(1);\n            seq.push(2);\n        } else {\n\
    \            seq.push(seq.last().unwrap() + seq.last().unwrap() + seq.last().unwrap());\n\
    \        }\n    }\n    seq\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 3, 9, 3, 1, 2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpjk6bedcz.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    vec![1, 1, 1]\n\
    \    .iter()\n    .take_while(|x| x % 2 != 0)\n    .take_while(|x| x < n)\n  \
    \  .map(|x| x * x + x)\n    .collect();\n}\n\nfn main() {\n    let candidate =\
    \ tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&{integer}` by `{integer}`\n  --> /tmp/tmpx091x_n6.rs:19:23\n\
    \   |\n19 |     .take_while(|x| x % 2 != 0)\n   |                     - ^ - {integer}\n\
    \   |                     |\n   |                     &&{integer}\n   |\nhelp:\
    \ `%` can be used on `{integer}`, you can dereference `x`\n   |\n19 |     .take_while(|x|\
    \ *x % 2 != 0)\n   |                     +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpx091x_n6.rs:20:25\n   |\n20 |     .take_while(|x| x < n)\n   |\
    \                         ^ expected `&&_`, found `isize`\n   |\n   = note: expected\
    \ reference `&&_`\n                   found type `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpx091x_n6.rs:16:21\n   |\n16 | fn tri(n: isize) -> Vec<isize>\
    \ {\n   |    ---              ^^^^^^^^^^ expected struct `Vec`, found `()`\n \
    \  |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n...\n22 |     .collect();\n   |               - help: remove this\
    \ semicolon\n   |\n   = note: expected struct `Vec<isize>`\n           found unit\
    \ type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n < 2 {\n\
    \        return vec![];\n    }\n    if n % 2 == 0 {\n        let first_tri = tri(n\
    \ - 1) + tri(n - 2);\n        \n        return first_tri.iter().map(|x| x + 1).collect();\n\
    \    } else {\n        let first_tri = tri(n - 1) + tri(n - 2) + tri(n - 3);\n\
    \        \n        return first_tri.iter().map(|x| x + 1).collect();\n    }\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp4on_713g.rs:21:36\n\
    \   |\n21 |         let first_tri = tri(n - 1) + tri(n - 2);\n   |           \
    \              ---------- ^ ---------- Vec<isize>\n   |                      \
    \   |\n   |                         Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>`\
    \ to `Vec<isize>`\n  --> /tmp/tmp4on_713g.rs:25:36\n   |\n25 |         let first_tri\
    \ = tri(n - 1) + tri(n - 2) + tri(n - 3);\n   |                         ----------\
    \ ^ ---------- Vec<isize>\n   |                         |\n   |              \
    \           Vec<isize>\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut list:\
    \ Vec<isize> = Vec::new();\n    let mut first = 3usize;\n    let mut second =\
    \ 1;\n    let mut third_third = 2;\n\n    for i in 1..n + 2 {\n        if i %\
    \ 2 == 0 {\n            list.push(first + second + third_third);\n           \
    \ first = second;\n            second = third_third;\n            third_third\
    \ = i + 1;\n        } else {\n            list.push(i);\n        }\n    }\n\n\
    \    list\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6mdx38p1.rs:24:23\n   |\n\
    24 |             list.push(first + second + third_third);\n   |              \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n24 |             list.push((first + second + third_third).try_into().unwrap());\n\
    \   |                       +                            +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6mdx38p1.rs:27:27\n   |\n20 |\
    \     let mut third_third = 2;\n   |                           - expected due\
    \ to this value\n...\n27 |             third_third = i + 1;\n   |            \
    \               ^^^^^ expected `usize`, found `isize`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    result.push(3);\n    let mut tri_n = 1;\n    if n % 2 ==\
    \ 0 {\n        result.push(tri_n);\n        tri_n += n / 2;\n    }\n    else {\n\
    \        let n = n - 1;\n        let mut i = 1;\n        while i <= n {\n    \
    \        result.push(tri_n - tri_n + i);\n            i += 2;\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpdhv6i2eq.rs:37:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut a: Vec<isize>\
    \ = vec![];\n    let mut b: Vec<isize> = vec![];\n    let mut c: Vec<isize> =\
    \ vec![];\n    for i in 0..n {\n        if i % 2 == 0 {\n            a.push(i);\n\
    \        } else {\n            b.push(i);\n        }\n        if i % 3 == 0 {\n\
    \            c.push(a + b + i);\n        }\n    }\n    c\n}\n\nfn main() {\n \
    \   let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n  \
    \  assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpfcxa52ta.rs:27:22\n\
    \   |\n27 |             c.push(a + b + i);\n   |                    - ^ - Vec<isize>\n\
    \   |                    |\n   |                    Vec<isize>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    match n % 2 {\n\
    \        0 => vec![1, 1, 1],\n        1 => vec![1, 2, 3],\n        _ => vec![1,\
    \ 1, 2, 3, 5, 8],\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp12lv7r3t.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n % 2 == 0\
    \ {\n        let mut l = vec![1, 1, 1];\n        let mut h = vec![1, 1, 1];\n\
    \        for i in 0..n {\n            l.push(l[..] + l[..]);\n            h.push(h[..]\
    \ + h[..]);\n        }\n        l + h\n    } else {\n        let mut l = vec![1,\
    \ 2, 1];\n        let mut h = vec![2, 2, 1];\n        for i in 0..n {\n      \
    \      l.push(l[..] + l[..]);\n            h.push(h[..] + h[..]);\n        }\n\
    \        l + h\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `[{integer}]` to `[{integer}]`\n  --> /tmp/tmp2l3znxz_.rs:21:26\n\
    \   |\n21 |             l.push(l[..] + l[..]);\n   |                    -----\
    \ ^ ----- [{integer}]\n   |                    |\n   |                    [{integer}]\n\
    \nerror[E0369]: cannot add `[{integer}]` to `[{integer}]`\n  --> /tmp/tmp2l3znxz_.rs:22:26\n\
    \   |\n22 |             h.push(h[..] + h[..]);\n   |                    -----\
    \ ^ ----- [{integer}]\n   |                    |\n   |                    [{integer}]\n\
    \nerror[E0369]: cannot add `Vec<{integer}>` to `Vec<{integer}>`\n  --> /tmp/tmp2l3znxz_.rs:24:11\n\
    \   |\n24 |         l + h\n   |         - ^ - Vec<{integer}>\n   |         |\n\
    \   |         Vec<{integer}>\n\nerror[E0369]: cannot add `[{integer}]` to `[{integer}]`\n\
    \  --> /tmp/tmp2l3znxz_.rs:29:26\n   |\n29 |             l.push(l[..] + l[..]);\n\
    \   |                    ----- ^ ----- [{integer}]\n   |                    |\n\
    \   |                    [{integer}]\n\nerror[E0369]: cannot add `[{integer}]`\
    \ to `[{integer}]`\n  --> /tmp/tmp2l3znxz_.rs:30:26\n   |\n30 |             h.push(h[..]\
    \ + h[..]);\n   |                    ----- ^ ----- [{integer}]\n   |         \
    \           |\n   |                    [{integer}]\n\nerror[E0369]: cannot add\
    \ `Vec<{integer}>` to `Vec<{integer}>`\n  --> /tmp/tmp2l3znxz_.rs:32:11\n   |\n\
    32 |         l + h\n   |         - ^ - Vec<{integer}>\n   |         |\n   |  \
    \       Vec<{integer}>\n\nerror: aborting due to 6 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n\
    \        return vec![];\n    }\n    \n    vec![\n        1 + tri(n - 1),\n   \
    \     tri(n - 1) + tri(n - 2) + tri(n + 1),\n    ]\n}\n\nfn main() {\n    let\
    \ candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `Vec<isize>` to `{integer}`\n  --> /tmp/tmpivsmo5ro.rs:22:11\n\
    \   |\n22 |         1 + tri(n - 1),\n   |           ^ no implementation for `{integer}\
    \ + Vec<isize>`\n   |\n   = help: the trait `Add<Vec<isize>>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpivsmo5ro.rs:23:20\n\
    \   |\n23 |         tri(n - 1) + tri(n - 2) + tri(n + 1),\n   |         ----------\
    \ ^ ---------- Vec<isize>\n   |         |\n   |         Vec<isize>\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0369.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut tri =\
    \ vec![];\n    if n <= 1 {\n        tri.push(n);\n    } else if n % 2 == 0 {\n\
    \        tri.push(1 + n / 2);\n    } else {\n        tri.push(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n    }\n    tri\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0618]: expected function, found `Vec<isize>`\n  --> /tmp/tmp_v8duo_v.rs:23:18\n\
    \   |\n17 |     let mut tri = vec![];\n   |         ------- `tri` has type `Vec<isize>`\n\
    ...\n23 |         tri.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n   |      \
    \            ^^^-------\n   |                  |\n   |                  call expression\
    \ requires function\n\nerror[E0618]: expected function, found `Vec<isize>`\n \
    \ --> /tmp/tmp_v8duo_v.rs:23:31\n   |\n17 |     let mut tri = vec![];\n   |  \
    \       ------- `tri` has type `Vec<isize>`\n...\n23 |         tri.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n   |                               ^^^-------\n\
    \   |                               |\n   |                               call\
    \ expression requires function\n\nerror[E0618]: expected function, found `Vec<isize>`\n\
    \  --> /tmp/tmp_v8duo_v.rs:23:44\n   |\n17 |     let mut tri = vec![];\n   | \
    \        ------- `tri` has type `Vec<isize>`\n...\n23 |         tri.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n   |                                     \
    \       ^^^-------\n   |                                            |\n   |  \
    \                                          call expression requires function\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0618`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut res =\
    \ Vec::new();\n    let mut t0 = 1;\n    let mut t1 = 1;\n    let mut t2 = 2;\n\
    \    for i in 0..=n {\n        t3 = t2 + t1;\n        t0 = t1;\n        t1 = t2;\n\
    \        t2 = t3;\n        res.push(t0);\n    }\n    res\n}\n\nfn main() {\n \
    \   let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n  \
    \  assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `t3` in this scope\n  --> /tmp/tmpieh7g9eo.rs:22:9\n\
    \   |\n22 |         t3 = t2 + t1;\n   |         ^^ help: a local variable with\
    \ a similar name exists: `t0`\n\nerror[E0425]: cannot find value `t3` in this\
    \ scope\n  --> /tmp/tmpieh7g9eo.rs:25:14\n   |\n25 |         t2 = t3;\n   |  \
    \            ^^ help: a local variable with a similar name exists: `t0`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 ||\
    \ n == 1 \n    {\n        return vec![n, n, n];\n    }\n    vec![tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3), tri(n - 2) + tri(n - 1) + tri(n + 1), n - 1]\n}\n\n\
    fn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpyvs_5ib1.rs:21:21\n\
    \   |\n21 |     vec![tri(n - 1) + tri(n - 2) + tri(n - 3), tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1), n - 1]\n   |          ---------- ^ ---------- Vec<isize>\n\
    \   |          |\n   |          Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>`\
    \ to `Vec<isize>`\n  --> /tmp/tmpyvs_5ib1.rs:21:59\n   |\n21 |     vec![tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3), tri(n - 2) + tri(n - 1) + tri(n + 1), n - 1]\n\
    \   |                                                ---------- ^ ---------- Vec<isize>\n\
    \   |                                                |\n   |                 \
    \                               Vec<isize>\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n\
    \        return vec![1, 1, 1];\n    }\n\n    let mut v1 = vec![1, 1, 1];\n   \
    \ let mut v2 = vec![1, 1];\n    let mut v3 = vec![1, 1, 1];\n\n    if n % 2 ==\
    \ 0 {\n        for i in (0..n).rev() {\n            v2 = v2 + v1;\n          \
    \  v1 = v1 + v3;\n            v3 = v1 - v2;\n        }\n    } else {\n       \
    \ for i in (0..n).rev() {\n            v2 = v2 + v3;\n            v3 = v3 + v1;\n\
    \            v1 = v1 + v2;\n        }\n    }\n\n    v1 + v2 + v3\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<{integer}>` to `Vec<{integer}>`\n  --> /tmp/tmpzd81jh6p.rs:27:21\n\
    \   |\n27 |             v2 = v2 + v1;\n   |                  -- ^ -- Vec<{integer}>\n\
    \   |                  |\n   |                  Vec<{integer}>\n\nerror[E0369]:\
    \ cannot add `Vec<{integer}>` to `Vec<{integer}>`\n  --> /tmp/tmpzd81jh6p.rs:28:21\n\
    \   |\n28 |             v1 = v1 + v3;\n   |                  -- ^ -- Vec<{integer}>\n\
    \   |                  |\n   |                  Vec<{integer}>\n\nerror[E0369]:\
    \ cannot subtract `Vec<{integer}>` from `Vec<{integer}>`\n  --> /tmp/tmpzd81jh6p.rs:29:21\n\
    \   |\n29 |             v3 = v1 - v2;\n   |                  -- ^ -- Vec<{integer}>\n\
    \   |                  |\n   |                  Vec<{integer}>\n\nerror[E0369]:\
    \ cannot add `Vec<{integer}>` to `Vec<{integer}>`\n  --> /tmp/tmpzd81jh6p.rs:33:21\n\
    \   |\n33 |             v2 = v2 + v3;\n   |                  -- ^ -- Vec<{integer}>\n\
    \   |                  |\n   |                  Vec<{integer}>\n\nerror[E0369]:\
    \ cannot add `Vec<{integer}>` to `Vec<{integer}>`\n  --> /tmp/tmpzd81jh6p.rs:34:21\n\
    \   |\n34 |             v3 = v3 + v1;\n   |                  -- ^ -- Vec<{integer}>\n\
    \   |                  |\n   |                  Vec<{integer}>\n\nerror[E0369]:\
    \ cannot add `Vec<{integer}>` to `Vec<{integer}>`\n  --> /tmp/tmpzd81jh6p.rs:35:21\n\
    \   |\n35 |             v1 = v1 + v2;\n   |                  -- ^ -- Vec<{integer}>\n\
    \   |                  |\n   |                  Vec<{integer}>\n\nerror[E0369]:\
    \ cannot add `Vec<{integer}>` to `Vec<{integer}>`\n  --> /tmp/tmpzd81jh6p.rs:39:8\n\
    \   |\n39 |     v1 + v2 + v3\n   |     -- ^ -- Vec<{integer}>\n   |     |\n  \
    \ |     Vec<{integer}>\n\nerror: aborting due to 7 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut list\
    \ = vec![];\n    if n < 0 {\n        return list;\n    }\n    let mut current\
    \ = 1;\n    let mut prev = -1;\n    loop {\n        let next = current + prev;\n\
    \        if next > n {\n            break;\n        }\n        list.push(next);\n\
    \        current = next;\n        prev = current;\n    }\n    list\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n\
    \        return vec![];\n    }\n\n    let mut ans = vec![3];\n    ans.push((n\
    \ - 2) as isize);\n    ans.push((n - 1) as isize);\n    ans.push(n as isize);\n\
    \    ans.push(ans.last().unwrap() + ans.last().unwrap() - ans.last().unwrap()\
    \ + 1);\n    ans\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 3, 4]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpjdk2fcvj.rs:31:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n <= 0 {\n\
    \        vec![]\n    }\n    else {\n        let mut result = vec![];\n       \
    \ let mut first = 1;\n        let mut second = 1;\n        let mut third = 1;\n\
    \n        for i in 1..=n {\n            result.push(first);\n            first+=second;\n\
    \            second+=third;\n            third+=first;\n        }\n\n        result\n\
    \    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp27xvf87a.rs:39:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n\
    \        return vec![];\n    }\n    let mut ret = vec![3,1];\n    for i in 1..n{\n\
    \        ret.push(ret[ret.len() - 1] + ret[ret.len() - 2] + ret[ret.len() - 3]);\n\
    \    }\n    ret\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpgjrxpe2p.rs:22:64\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    fn aux(n: isize)\
    \ -> Vec<isize> {\n        if n == 0 {\n            vec![]\n        }\n      \
    \  if n == 1 {\n            vec![3]\n        }\n        if n % 2 == 1 {\n    \
    \        vec![aux(n - 1) + aux(n - 2), aux(n - 1) + aux(n - 2)]\n        } else\
    \ {\n            vec![aux(n - 1) + aux(n - 2), aux(n - 2) + aux(n - 1)]\n    \
    \    }\n    }\n\n    aux(n)\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo39g4e9i.rs:19:13\n   |\n\
    18 | /         if n == 0 {\n19 | |             vec![]\n   | |             ^^^^^^\
    \ expected `()`, found struct `Vec`\n20 | |         }\n   | |_________- expected\
    \ this to be `()`\n   |\n   = note: expected unit type `()`\n                \
    \ found struct `Vec<_>`\n   = note: this error originates in the macro `vec` (in\
    \ Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider using\
    \ a semicolon here\n   |\n20 |         };\n   |          +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpo39g4e9i.rs:22:13\n   |\n21 | /         if n == 1 {\n22\
    \ | |             vec![3]\n   | |             ^^^^^^^ expected `()`, found struct\
    \ `Vec`\n23 | |         }\n   | |_________- expected this to be `()`\n   |\n \
    \  = note: expected unit type `()`\n                 found struct `Vec<{integer}>`\n\
    \   = note: this error originates in the macro `vec` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\nhelp: consider using a semicolon here\n \
    \  |\n23 |         };\n   |          +\n\nerror[E0369]: cannot add `Vec<isize>`\
    \ to `Vec<isize>`\n  --> /tmp/tmpo39g4e9i.rs:25:29\n   |\n25 |             vec![aux(n\
    \ - 1) + aux(n - 2), aux(n - 1) + aux(n - 2)]\n   |                  ----------\
    \ ^ ---------- Vec<isize>\n   |                  |\n   |                  Vec<isize>\n\
    \nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpo39g4e9i.rs:25:54\n\
    \   |\n25 |             vec![aux(n - 1) + aux(n - 2), aux(n - 1) + aux(n - 2)]\n\
    \   |                                           ---------- ^ ---------- Vec<isize>\n\
    \   |                                           |\n   |                      \
    \                     Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n\
    \  --> /tmp/tmpo39g4e9i.rs:27:29\n   |\n27 |             vec![aux(n - 1) + aux(n\
    \ - 2), aux(n - 2) + aux(n - 1)]\n   |                  ---------- ^ ----------\
    \ Vec<isize>\n   |                  |\n   |                  Vec<isize>\n\nerror[E0369]:\
    \ cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpo39g4e9i.rs:27:54\n \
    \  |\n27 |             v"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n % 2 == 0\
    \ {\n        vec![tri(n / 2)]\n    } else {\n        vec![tri(n - 1) + tri(n -\
    \ 2) + tri(n - 3) + tri(n + 1), n + 1]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi1_rlzbw.rs:18:14\n   |\n\
    18 |         vec![tri(n / 2)]\n   |              ^^^^^^^^^^ expected `isize`,\
    \ found struct `Vec`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `Vec<isize>`\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n\
    \  --> /tmp/tmpi1_rlzbw.rs:20:25\n   |\n20 |         vec![tri(n - 1) + tri(n -\
    \ 2) + tri(n - 3) + tri(n + 1), n + 1]\n   |              ---------- ^ ----------\
    \ Vec<isize>\n   |              |\n   |              Vec<isize>\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 { return\
    \ vec![3]; }\n    if n % 2 == 0 { return vec![1 + n/2, (1 + n)/2]; }\n    if n\
    \ % 2 == 1 { return vec![1 + n/2, (1 + n)/2]; }\n    let mut vec = vec![];\n \
    \   for i in 0..(n/2 - 1 + 1) {\n        vec.push(tri(n - i) + tri(n + i - 1));\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpg5q8prla.rs:22:29\n\
    \   |\n22 |         vec.push(tri(n - i) + tri(n + i - 1));\n   |             \
    \     ---------- ^ -------------- Vec<isize>\n   |                  |\n   |  \
    \                Vec<isize>\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    vec![1, 2, 3,\
    \ 5, 8, 13]\n        .iter()\n        .take(n as usize)\n        .collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfnpoefrc.rs:17:5\n   |\n\
    16 |   fn tri(n: isize) -> Vec<isize> {\n   |                       ----------\
    \ expected `Vec<isize>` because of return type\n17 | /     vec![1, 2, 3, 5, 8,\
    \ 13]\n18 | |         .iter()\n19 | |         .take(n as usize)\n20 | |      \
    \   .collect::<Vec<_>>()\n   | |____________________________^ expected `isize`,\
    \ found `&{integer}`\n   |\n   = note: expected struct `Vec<isize>`\n        \
    \      found struct `Vec<&{integer}>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut tri_result\
    \ = vec![0; n + 1];\n    tri_result[0] = 3;\n    tri_result[1] = 1;\n    tri_result[2]\
    \ = 2;\n    tri_result[n + 1] = (tri_result[0] + tri_result[1]) / 2;\n    for\
    \ i in 2..(n + 1) {\n        tri_result[i] = tri_result[i - 2] + tri_result[i\
    \ - 1];\n    }\n    tri_result\n}\n\nfn main() {\n    let candidate = tri;\n \
    \   assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4_54knx5.rs:17:34\n   |\n\
    17 |     let mut tri_result = vec![0; n + 1];\n   |                          \
    \        ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an\
    \ `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n17\
    \ |     let mut tri_result = vec![0; (n + 1).try_into().unwrap()];\n   |     \
    \                             +     +++++++++++++++++++++\n\nerror[E0277]: the\
    \ type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4_54knx5.rs:21:5\n\
    \   |\n21 |     tri_result[n + 1] = (tri_result[0] + tri_result[1]) / 2;\n   |\
    \     ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4_54knx5.rs:23:9\n\
    \   |\n23 |         tri_result[i] = tri_result[i - 2] + tri_result[i - 1];\n \
    \  |         ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4_54knx5.rs:23:25\n\
    \   |\n23 |         tri_result[i] = tri_result[i - 2] + tri_result[i - 1];\n \
    \  |                         ^^^^^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp4_54knx5.rs:23:45\n  "
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n\
    \        return vec![];\n    }\n    if n%2 == 0 {\n        let mut sum = 0;\n\
    \        let mut a = tri(n - 1);\n        let mut b = tri(n - 2);\n        for\
    \ i in 0..=n-1 {\n            sum += a[i];\n            b.push(a[i] + b[i]);\n\
    \        }\n        return vec![sum] + b;\n    } else {\n        let mut sum =\
    \ 0;\n        let mut a = tri(n - 1);\n        let mut b = tri(n - 2);\n     \
    \   for i in 0..=n-1 {\n            sum += b[i];\n            a.push(b[i] + a[i]);\n\
    \        }\n        return vec![sum] + a;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvvoxiefk.rs:25:20\n\
    \   |\n25 |             sum += a[i];\n   |                    ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpvvoxiefk.rs:26:20\n   |\n26 |            \
    \ b.push(a[i] + b[i]);\n   |                    ^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpvvoxiefk.rs:26:27\n   |\n26 |            \
    \ b.push(a[i] + b[i]);\n   |                           ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0369]: cannot add `Vec<isize>` to\
    \ `Vec<{integer}>`\n  --> /tmp/tmpvvoxiefk.rs:28:26\n   |\n28 |         return\
    \ vec![sum] + b;\n   |                --------- ^ - Vec<isize>\n   |         \
    \       |\n   |                Vec<{integer}>\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpvvoxiefk.rs:34:20\n   |\n34 |  \
    \           sum += b[i];\n   |                    ^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<is"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n\
    \        return vec![0];\n    }\n    if n % 2 == 0 {\n        return vec![1, n\
    \ + 1, n / 2];\n    }\n    return vec![\n        tri(n - 1) + tri(n - 2),\n  \
    \      tri(n - 1) + tri(n - 2) + tri(n - 3),\n        tri(n - 1) + tri(n - 2)\
    \ + tri(n - 3) + tri(n - 4),\n    ];\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp19h84usw.rs:24:20\n\
    \   |\n24 |         tri(n - 1) + tri(n - 2),\n   |         ---------- ^ ----------\
    \ Vec<isize>\n   |         |\n   |         Vec<isize>\n\nerror[E0369]: cannot\
    \ add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp19h84usw.rs:25:20\n   |\n25\
    \ |         tri(n - 1) + tri(n - 2) + tri(n - 3),\n   |         ---------- ^ ----------\
    \ Vec<isize>\n   |         |\n   |         Vec<isize>\n\nerror[E0369]: cannot\
    \ add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp19h84usw.rs:26:20\n   |\n26\
    \ |         tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4),\n   |         ----------\
    \ ^ ---------- Vec<isize>\n   |         |\n   |         Vec<isize>\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut fibs\
    \ = vec![0];\n    fibs.push(1);\n    fibs.push(3);\n    \n    for i in 2..=n {\n\
    \        fibs.push(fibs.last().unwrap().unwrap() + fibs.last().unwrap().unwrap()\
    \ + fibs.last().unwrap());\n    }\n    \n    fibs[..]\n}\n\nfn main() {\n    let\
    \ candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for reference `&{integer}`\
    \ in the current scope\n  --> /tmp/tmpmkdo871b.rs:22:40\n   |\n22 |         fibs.push(fibs.last().unwrap().unwrap()\
    \ + fibs.last().unwrap().unwrap() + fibs.last().unwrap());\n   |             \
    \                           ^^^^^^ method not found in `&{integer}`\n\nerror[E0599]:\
    \ no method named `unwrap` found for reference `&{integer}` in the current scope\n\
    \  --> /tmp/tmpmkdo871b.rs:22:72\n   |\n22 |         fibs.push(fibs.last().unwrap().unwrap()\
    \ + fibs.last().unwrap().unwrap() + fibs.last().unwrap());\n   |             \
    \                                                           ^^^^^^ method not\
    \ found in `&{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmkdo871b.rs:25:5\n\
    \   |\n16 | fn tri(n: isize) -> Vec<isize> {\n   |                     ----------\
    \ expected `Vec<isize>` because of return type\n...\n25 |     fibs[..]\n   | \
    \    ^^^^^^^^- help: try using a conversion method: `.to_vec()`\n   |     |\n\
    \   |     expected struct `Vec`, found slice `[{integer}]`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n               found slice `[{integer}]`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    loop {\n    \
    \    let tri1 = 1 + n / 2isize;\n        let tri2 = (n - 1isize) + (n - 2isize)\
    \ + n + 1isize;\n        if n % 2 == 0 {\n            vec![tri1, tri2] \n    \
    \    } else {\n            vec![tri1, tri2, tri1]\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxlzae962.rs:21:13\n   |\n\
    20 | /         if n % 2 == 0 {\n21 | |             vec![tri1, tri2] \n   | | \
    \            ^^^^^^^^^^^^^^^^ expected `()`, found struct `Vec`\n22 | |      \
    \   } else {\n23 | |             vec![tri1, tri2, tri1]\n24 | |         }\n  \
    \ | |_________- expected this to be `()`\n   |\n   = note: expected unit type\
    \ `()`\n                 found struct `Vec<isize>`\n   = note: this error originates\
    \ in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\nhelp: consider using a semicolon here\n   |\n24 |         };\n   |  \
    \        +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxlzae962.rs:23:13\n\
    \   |\n20 | /         if n % 2 == 0 {\n21 | |             vec![tri1, tri2] \n\
    22 | |         } else {\n23 | |             vec![tri1, tri2, tri1]\n   | |   \
    \          ^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Vec`\n24 | |  \
    \       }\n   | |_________- expected this to be `()`\n   |\n   = note: expected\
    \ unit type `()`\n                 found struct `Vec<isize>`\n   = note: this\
    \ error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\nhelp: consider using a semicolon here\n   |\n24 |         };\n\
    \   |          +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut sums\
    \ = [0; 3];\n    let mut current = 1;\n    for _ in 0..n {\n        sums[current\
    \ / 2] += current;\n        current += 1;\n    }\n    let mut result = vec![];\n\
    \    for i in 0..n {\n        result.push(sums[i]);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[usize]` cannot be indexed by `isize`\n  --> /tmp/tmp15ln2asz.rs:25:21\n\
    \   |\n25 |         result.push(sums[i]);\n   |                     ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[usize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `[usize]`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    assert!(n > 0);\n\
    \n    let mut l = [3];\n\n    if n % 2 == 0 {\n        l.push(tri(n - 1) + tri(n\
    \ - 2));\n    } else {\n        l.push(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for array `[{integer}; 1]` in\
    \ the current scope\n  --> /tmp/tmpvdasvmp_.rs:22:11\n   |\n22 |         l.push(tri(n\
    \ - 1) + tri(n - 2));\n   |           ^^^^ method not found in `[{integer}; 1]`\n\
    \nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpvdasvmp_.rs:22:27\n\
    \   |\n22 |         l.push(tri(n - 1) + tri(n - 2));\n   |                ----------\
    \ ^ ---------- Vec<isize>\n   |                |\n   |                Vec<isize>\n\
    \nerror[E0599]: no method named `push` found for array `[{integer}; 1]` in the\
    \ current scope\n  --> /tmp/tmpvdasvmp_.rs:24:11\n   |\n24 |         l.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n   |           ^^^^ method not found in `[{integer};\
    \ 1]`\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpvdasvmp_.rs:24:27\n\
    \   |\n24 |         l.push(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   |       \
    \         ---------- ^ ---------- Vec<isize>\n   |                |\n   |    \
    \            Vec<isize>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvdasvmp_.rs:26:5\n\
    \   |\n16 | fn tri(n: isize) -> Vec<isize> {\n   |                     ----------\
    \ expected `Vec<isize>` because of return type\n...\n26 |     l\n   |     ^- help:\
    \ try using a conversion method: `.to_vec()`\n   |     |\n   |     expected struct\
    \ `Vec`, found array `[{integer}; 1]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \               found array `[{integer}; 1]`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    fn recur(n: isize,\
    \ mut num: isize) -> Vec<isize> {\n        if n == 1 {\n            return vec![1,\
    \ 3];\n        } else {\n            let first = (num + n) / 2;\n            let\
    \ second = tri(n - 1);\n            let third = tri(n - 2);\n            num +=\
    \ third.iter().cloned().fold(first, |mut acc, _| acc).unwrap();\n            num\
    \ += second.iter().cloned().fold(third.iter().cloned().fold(first, |mut acc, _|\
    \ acc), |mut acc, _| acc).unwrap();\n            num\n        }\n    }\n    recur(n,\
    \ 0)\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpm72kqe1y.rs:24:72\n   |\n24 |             num += third.iter().cloned().fold(first,\
    \ |mut acc, _| acc).unwrap();\n   |                                          \
    \                              ^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `unwrap` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpm72kqe1y.rs:25:119\n   |\n25 |             num += second.iter().cloned().fold(third.iter().cloned().fold(first,\
    \ |mut acc, _| acc), |mut acc, _| acc).unwrap();\n   |                       \
    \                                                                            \
    \                    ^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpm72kqe1y.rs:26:13\n   |\n17 |     fn recur(n: isize, mut\
    \ num: isize) -> Vec<isize> {\n   |                                          \
    \ ---------- expected `Vec<isize>` because of return type\n...\n26 |         \
    \    num\n   |             ^^^ expected struct `Vec`, found `isize`\n   |\n  \
    \ = note: expected struct `Vec<isize>`\n                found type `isize`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut a = vec![0;\
    \ n+1];\n    let mut b = vec![0; n+1];\n    let mut c = vec![0; n+1];\n    a[0]\
    \ = a[1] = 1;\n    b[0] = b[1] = 1;\n    c[0] = c[1] = 1;\n    for i in 1..n+1\
    \ {\n        a[i] = b[i-1] + c[i-1];\n        b[i] = b[i-1];\n        c[i] = a[i-1]\
    \ + c[i-1];\n    }\n    a\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyqy6v6g0.rs:17:25\n   |\n\
    17 |     let mut a = vec![0; n+1];\n   |                         ^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     let mut a = vec![0;\
    \ (n+1).try_into().unwrap()];\n   |                         +   +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyqy6v6g0.rs:18:25\n   |\n18 |\
    \     let mut b = vec![0; n+1];\n   |                         ^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n18 |     let mut b = vec![0; (n+1).try_into().unwrap()];\n\
    \   |                         +   +++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyqy6v6g0.rs:19:25\n   |\n19 |     let mut c = vec![0; n+1];\n\
    \   |                         ^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |     let mut c = vec![0; (n+1).try_into().unwrap()];\n   |  \
    \                       +   +++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyqy6v6g0.rs:20:12\n   |\n20 |     a[0] = a[1] = 1;\n  \
    \ |     ----   ^^^^^^^^ expected integer, found `()`\n   |     |\n   |     expected\
    \ due to the type of this binding\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyqy6v6g0.rs:21:12\n\
    \   |\n21 |     b[0] = b[1] = 1;\n   |     ----   ^^^^^^^^ expected integer, found\
    \ `()`\n   |     |\n   |     expected due to the type of this binding\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyqy6v6g0.rs:22:12\n   |\n22 |     c[0] = c[1]\
    \ = 1;\n   |     ----   ^^^^^^^^ expected integer, found `()`\n   |     |\n  \
    \ |     expected due to the type of this binding\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpyqy6v6g0.rs:24:9\n   |\n24 |   \
    \      a[i] = b[i-1] + c[i-1];\n   |         ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not i"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut arr:\
    \ Vec<isize> = vec![1, 1, 1];\n    for i in 1..n+1 {\n        arr.push(arr[i -\
    \ 1] + arr[i - 2] + arr[i - 3]);\n    }\n    arr\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmxom8il9.rs:19:18\n\
    \   |\n19 |         arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n   |    \
    \              ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmxom8il9.rs:19:31\n\
    \   |\n19 |         arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n   |    \
    \                           ^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpmxom8il9.rs:19:44\n   |\n19 |         arr.push(arr[i - 1] + arr[i\
    \ - 2] + arr[i - 3]);\n   |                                            ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    if n % 2 == 0 {\n        result.append(3);\n    } else {\n\
    \        result.push(1);\n        result.append((n / 2).checked_add(1).unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0fy20x9g.rs:19:23\n   |\n\
    19 |         result.append(3);\n   |                       ^ expected `&mut Vec<_>`,\
    \ found integer\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n \
    \                          found type `{integer}`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0fy20x9g.rs:22:23\n   |\n22 |         result.append((n\
    \ / 2).checked_add(1).unwrap());\n   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected mutable reference, found `isize`\n   |\n   = note: expected mutable\
    \ reference `&mut Vec<{integer}>`\n                           found type `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    use std::mem::replace;\n\
    \    if n == 0 || (n % 2 == 0) {\n        vec![]\n    } else {\n        replace(replace\
    \ (vec![1, 1, 2]), |v| v + v + v)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpbu2i3y8h.rs:21:17\n    |\n21  |         replace(replace (vec![1,\
    \ 1, 2]), |v| v + v + v)\n    |                 ^^^^^^^  ------------- supplied\
    \ 1 argument\n    |                 |\n    |                 expected 2 arguments\n\
    \    |\nnote: function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbu2i3y8h.rs:21:42\n\
    \   |\n21 |         replace(replace (vec![1, 1, 2]), |v| v + v + v)\n   |    \
    \                                      ^^^^^^^^^^^^^ expected struct `Vec`, found\
    \ closure\n   |\n   = note: expected struct `Vec<isize>`\n             found closure\
    \ `[closure@/tmp/tmpbu2i3y8h.rs:21:42: 21:55]`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 1 {\n\
    \        vec![3]\n    } else {\n        let low = tri(n - 1);\n        let high\
    \ = tri(n - 2) + low;\n        vec![low, high, low + high]\n    }\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpwuypvm2n.rs:21:31\n\
    \   |\n21 |         let high = tri(n - 2) + low;\n   |                    ----------\
    \ ^ --- Vec<isize>\n   |                    |\n   |                    Vec<isize>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwuypvm2n.rs:22:14\n   |\n22 |\
    \         vec![low, high, low + high]\n   |              ^^^ expected `isize`,\
    \ found struct `Vec`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `Vec<isize>`\n\nerror[E0369]: cannot add `_` to `Vec<isize>`\n  --> /tmp/tmpwuypvm2n.rs:22:29\n\
    \   |\n22 |         vec![low, high, low + high]\n   |                        \
    \ --- ^ ---- _\n   |                         |\n   |                         Vec<isize>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut vec:\
    \ Vec<isize> = vec![0; n + 1];\n    vec[0] = 3;\n    for i in 1..vec.len() {\n\
    \        vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n    }\n    vec\n}\n\n\
    fn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoo9dyl95.rs:17:39\n   |\n\
    17 |     let mut vec: Vec<isize> = vec![0; n + 1];\n   |                     \
    \                  ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n17 |     let mut vec: Vec<isize> = vec![0; (n + 1).try_into().unwrap()];\n\
    \   |                                       +     +++++++++++++++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    use std::cmp::Ordering;\n\
    \    use std::cmp::Ordering::{Equal, Less};\n\n    let mut vec: Vec<isize> = vec![0];\n\
    \    for i in 2..=n {\n        let a = vec[i - 1];\n        let b = vec[i - 2];\n\
    \        let c = vec[i - 3];\n        vec.push(a + b + c);\n    }\n    vec.sort_by(|a,\
    \ b| {\n        if a == b {\n            Less(a.iter().cloned(), b.iter().cloned())\n\
    \        } else {\n            Equal(a.iter().cloned(), b.iter().cloned())\n \
    \       }\n    });\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmp_94v_ut1.rs:17:9\n\
    \   |\n17 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_94v_ut1.rs:22:17\n  \
    \ |\n22 |         let a = vec[i - 1];\n   |                 ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp_94v_ut1.rs:23:17\n   |\n23 |         let\
    \ b = vec[i - 2];\n   |                 ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp_94v_ut1.rs:24:17\n   |\n24 |         let\
    \ c = vec[i - 3];\n   |                 ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0618]: expected function, found enum\
    \ variant `Less`\n  --> /tmp/tmp_94v_ut1.rs:29:13\n   |\n29 |             Less(a.iter().cloned(),\
    \ b.iter().cloned())\n   |             ^^^^--------------------------------------\n\
    \   |             |\n   |             call expression requires function\n   |\n\
    help: `Less` is a unit variant, you need to write it without the parentheses\n\
    \   |\n29 -             Less(a.iter().cloned(), b.iter().cloned())\n29 +     \
    \        Less\n   | \n\nerr"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    \n    let mut\
    \ x = vec![3,1,1,1];\n    let mut y = vec![3,1,2,1];\n    let mut z = vec![3,1,2,1];\n\
    \    \n    for i in 1..n+1 {\n        x.push(x.pop() + y.pop());\n        y.push(y.pop()\
    \ + z.pop());\n        z.push(z.pop() + x.pop());\n    }\n    \n    x\n}\n\nfn\
    \ main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Option<{integer}>` to `Option<{integer}>`\n \
    \ --> /tmp/tmpgpx2rgjw.rs:23:24\n   |\n23 |         x.push(x.pop() + y.pop());\n\
    \   |                ------- ^ ------- Option<{integer}>\n   |               \
    \ |\n   |                Option<{integer}>\n\nerror[E0369]: cannot add `Option<{integer}>`\
    \ to `Option<{integer}>`\n  --> /tmp/tmpgpx2rgjw.rs:24:24\n   |\n24 |        \
    \ y.push(y.pop() + z.pop());\n   |                ------- ^ ------- Option<{integer}>\n\
    \   |                |\n   |                Option<{integer}>\n\nerror[E0369]:\
    \ cannot add `Option<{integer}>` to `Option<{integer}>`\n  --> /tmp/tmpgpx2rgjw.rs:25:24\n\
    \   |\n25 |         z.push(z.pop() + x.pop());\n   |                ------- ^\
    \ ------- Option<{integer}>\n   |                |\n   |                Option<{integer}>\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut lst =\
    \ vec![];\n\n    if n % 2 == 0 {\n        lst.push(3);\n        lst.push(3);\n\
    \    } else {\n        let first = tri(n - 1) + tri(n - 2);\n        lst.push(first);\n\
    \        let second = tri(n - 1) + tri(n + 1);\n        lst.push(second);\n  \
    \  }\n\n    lst\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpj36108b5.rs:23:32\n\
    \   |\n23 |         let first = tri(n - 1) + tri(n - 2);\n   |               \
    \      ---------- ^ ---------- Vec<isize>\n   |                     |\n   |  \
    \                   Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n\
    \  --> /tmp/tmpj36108b5.rs:25:33\n   |\n25 |         let second = tri(n - 1) +\
    \ tri(n + 1);\n   |                      ---------- ^ ---------- Vec<isize>\n\
    \   |                      |\n   |                      Vec<isize>\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut i = 1;\n    loop {\n        if i % 2 != 0 {\n       \
    \     result.push(i);\n            i += 2;\n        } else {\n            result.push(i);\n\
    \            i += 1;\n        }\n        if i == n {\n            break;\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpo8ab_ugj.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    assert!(n >=\
    \ 1);\n    if n % 2 == 0 {\n        return vec![];\n    }\n    let mut res: Vec<isize>\
    \ = vec![];\n    res.push(3);\n    for _ in 0..(n-2) {\n        let next = (res.pop()\
    \ + res.pop() + res.pop()) / 2;\n        res.push(next);\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Option<isize>` to `Option<isize>`\n  --> /tmp/tmpw7r9uada.rs:24:31\n\
    \   |\n24 |         let next = (res.pop() + res.pop() + res.pop()) / 2;\n   |\
    \                     --------- ^ --------- Option<isize>\n   |              \
    \       |\n   |                     Option<isize>\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n <= 2 {\n\
    \        return vec![1, n];\n    }\n\n    let mut s = vec![2, 1];\n    loop {\n\
    \        let mut tri_s = vec![s.last().unwrap() + 1, s.last().unwrap() + 2];\n\
    \        if n % 2 == 0 {\n            tri_s.push(n);\n        } else {\n     \
    \       tri_s.push(*tri_s.pop() + 1);\n        }\n        s = tri_s;\n       \
    \ n += 1;\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `Option<isize>` cannot be dereferenced\n  --> /tmp/tmp5h_fth5d.rs:27:24\n\
    \   |\n27 |             tri_s.push(*tri_s.pop() + 1);\n   |                  \
    \      ^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut ret:\
    \ Vec<isize> = vec![0; 3];\n    ret[1] = ret[2] = 3;\n    for i in 1..n {\n  \
    \      ret[i] = ret[i - 1] + ret[i - 2] + ret[i + 1];\n    }\n    ret\n}\n\nfn\
    \ main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt0h92lzq.rs:18:14\n   |\n\
    18 |     ret[1] = ret[2] = 3;\n   |     ------   ^^^^^^^^^^ expected `isize`,\
    \ found `()`\n   |     |\n   |     expected due to the type of this binding\n\n\
    error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpt0h92lzq.rs:20:9\n\
    \   |\n20 |         ret[i] = ret[i - 1] + ret[i - 2] + ret[i + 1];\n   |     \
    \    ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   =\
    \ help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpt0h92lzq.rs:20:18\n\
    \   |\n20 |         ret[i] = ret[i - 1] + ret[i - 2] + ret[i + 1];\n   |     \
    \             ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpt0h92lzq.rs:20:31\n\
    \   |\n20 |         ret[i] = ret[i - 1] + ret[i - 2] + ret[i + 1];\n   |     \
    \                          ^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpt0h92lzq.rs:20:44\n   |\n20 |         ret[i] = ret[i - 1] + ret[i\
    \ - 2] + ret[i + 1];\n   |                                            ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the "
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut vec =\
    \ Vec::new();\n    vec.push((3 as isize));\n    vec.push((1 + n as isize) / 2);\n\
    \    if n % 2 == 1 {\n        vec.push((tri(n-1) + tri(n-2) + tri(n+1)));\n  \
    \  }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around method argument\n  --> /tmp/tmpexeem6s9.rs:18:14\n\
    \   |\n18 |     vec.push((3 as isize));\n   |              ^          ^\n   |\n\
    \   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n18 -     vec.push((3 as isize));\n18 +     vec.push(3 as isize);\n   |\
    \ \n\nwarning: unnecessary parentheses around method argument\n  --> /tmp/tmpexeem6s9.rs:21:18\n\
    \   |\n21 |         vec.push((tri(n-1) + tri(n-2) + tri(n+1)));\n   |        \
    \          ^                              ^\n   |\nhelp: remove these parentheses\n\
    \   |\n21 -         vec.push((tri(n-1) + tri(n-2) + tri(n+1)));\n21 +        \
    \ vec.push(tri(n-1) + tri(n-2) + tri(n+1));\n   | \n\nerror[E0369]: cannot add\
    \ `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpexeem6s9.rs:21:28\n   |\n21 |  \
    \       vec.push((tri(n-1) + tri(n-2) + tri(n+1)));\n   |                   --------\
    \ ^ -------- Vec<isize>\n   |                   |\n   |                   Vec<isize>\n\
    \nerror: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n\
    \        vec![]\n    } else {\n        if n % 2 == 0 {\n            vec![0, 1,\
    \ 2]\n        } else {\n            vec![1, 3] + tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n        }\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<{integer}>`\n  --> /tmp/tmpvc7d6zvx.rs:23:24\n\
    \   |\n23 |             vec![1, 3] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \ |             ---------- ^ ---------- Vec<isize>\n   |             |\n   | \
    \            Vec<{integer}>\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    fn fib(mut a:\
    \ isize, mut b: isize) -> isize {\n        fn recursive_fib(mut a: isize, mut\
    \ b: isize) -> isize {\n            match b {\n                0 => a,\n     \
    \           _ => recursive_fib(b - 1, a + b),\n            }\n        }\n    \
    \    recursive_fib(a, b)\n    }\n\n    fn fib_iter(b: isize) -> Vec<isize> {\n\
    \        let mut a: isize = 3usize;\n        let mut b: isize = 1usize;\n    \
    \    let mut result: Vec<isize> = vec![0usize; n + 1];\n        for i in 1..=n\
    \ {\n            result.push(a.clone());\n            a = b;\n            b =\
    \ a + b;\n        }\n        result\n    }\n\n    if n == 0 {\n        vec![]\n\
    \    } else if n % 2 == 0 {\n        fib_iter(n / 2)\n    } else {\n        fib(n\
    \ - 1, fib(n - 2, fib(n - 1 + 1)))\n    }\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0434]: can't capture dynamic environment in a fn item\n  --> /tmp/tmpxa6dfn_w.rs:30:51\n\
    \   |\n30 |         let mut result: Vec<isize> = vec![0usize; n + 1];\n   |  \
    \                                                 ^\n   |\n   = help: use the\
    \ `|| { ... }` closure form instead\n\nerror[E0434]: can't capture dynamic environment\
    \ in a fn item\n  --> /tmp/tmpxa6dfn_w.rs:31:22\n   |\n31 |         for i in 1..=n\
    \ {\n   |                      ^\n   |\n   = help: use the `|| { ... }` closure\
    \ form instead\n\nerror[E0061]: this function takes 2 arguments but 1 argument\
    \ was supplied\n  --> /tmp/tmpxa6dfn_w.rs:44:31\n   |\n44 |         fib(n - 1,\
    \ fib(n - 2, fib(n - 1 + 1)))\n   |                               ^^^ ---------\
    \ supplied 1 argument\n   |                               |\n   |            \
    \                   expected 2 arguments\n   |\nnote: function defined here\n\
    \  --> /tmp/tmpxa6dfn_w.rs:17:8\n   |\n17 |     fn fib(mut a: isize, mut b: isize)\
    \ -> isize {\n   |        ^^^ ------------  ------------\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxa6dfn_w.rs:44:9\n   |\n16 | fn tri(n: isize) -> Vec<isize>\
    \ {\n   |                     ---------- expected `Vec<isize>` because of return\
    \ type\n...\n44 |         fib(n - 1, fib(n - 2, fib(n - 1 + 1)))\n   |       \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n                found type `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxa6dfn_w.rs:28:28\n   |\n28 |\
    \         let mut a: isize = 3usize;\n   |                    -----   ^^^^^^ expected\
    \ `isize`, found `usize`\n   |                    |\n   |                    expected\
    \ due to this\n   |\nhelp: change the type of the numeric literal from `usize`\
    \ to `isize`\n   |\n28 |         let mut a: isize = 3isize;\n   |            \
    \                 ~~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxa6dfn_w.rs:29:28\n\
    \   |\n29 |         let mut b: isize = 1usize;\n   |                    -----\
    \   ^^^^^^ expected `isize`, found `usize`\n   |                    |\n   |  \
    \                  expected due "
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut numbers:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        numbers.push(3);\n    }\n\
    \    for i in 1..n / 2 {\n        numbers.push(numbers[i - 1] + numbers[i - 2]\
    \ + numbers[i + 1])\n    }\n    numbers\n}\n\nfn main() {\n    let candidate =\
    \ tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp5juf0utd.rs:22:22\n\
    \   |\n22 |         numbers.push(numbers[i - 1] + numbers[i - 2] + numbers[i +\
    \ 1])\n   |                      ^^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp5juf0utd.rs:22:39\n   |\n22 |         numbers.push(numbers[i\
    \ - 1] + numbers[i - 2] + numbers[i + 1])\n   |                              \
    \         ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp5juf0utd.rs:22:56\n\
    \   |\n22 |         numbers.push(numbers[i - 1] + numbers[i - 2] + numbers[i +\
    \ 1])\n   |                                                        ^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut tri_sequence:\
    \ [[isize; 3]; 3] = [[0, 3, 3], [1, 5, 2], [2, 6, 4], [3, 7, 5]];\n    let mut\
    \ tri_sequence_cur: [[isize; 3]; 3] = tri_sequence.clone();\n    let mut tri_sequence_cur_index:\
    \ isize = 0;\n    let mut tri_sequence_cur_value_prev: isize = tri_sequence_cur[0][0]\
    \ as isize;\n    let mut tri_sequence_cur_value: isize = tri_sequence_cur[0][2]\
    \ as isize;\n    let mut tri_sequence_cur_value_next: isize = 0;\n    let mut\
    \ tri_sequence_cur_value_next_next: isize = 0;\n    loop {\n        if n % 2 ==\
    \ 0 {\n            tri_sequence_cur_value = (tri_sequence_cur_value_prev + tri_sequence_cur_value_next\
    \ + tri_sequence_cur_value) / 3;\n            tri_sequence_cur_value_prev = tri_sequence_cur_value;\n\
    \            tri_sequence_cur_value_next = tri_sequence_cur_value;\n         \
    \   tri_sequence_cur_value_next_next = tri_sequence_cur_value;\n            tri_sequence_cur_index\
    \ += 1;\n        }\n        else {\n            tri_sequence_cur_value = tri_sequence_cur_value_next_next\
    \ + tri_sequence_cur_value_next;\n            tri_sequence_cur_value_next = tri_sequence_cur_value;\n\
    \            tri_sequence_cur_value_next_next = tri_sequence_cur_value;\n    \
    \        tri_sequence_cur_index += 1;\n        }\n        if tri_sequence_cur_index\
    \ >= tri_sequence_cur[0].len() {\n            break;\n        }\n    }\n    tri_sequence.iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph9vsbulk.rs:17:45\n   |\n\
    17 |     let mut tri_sequence: [[isize; 3]; 3] = [[0, 3, 3], [1, 5, 2], [2, 6,\
    \ 4], [3, 7, 5]];\n   |                           ---------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected an array with a fixed size of 3 elements, found one with 4 elements\n\
    \   |                           |\n   |                           expected due\
    \ to this\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph9vsbulk.rs:38:38\n\
    \   |\n38 |         if tri_sequence_cur_index >= tri_sequence_cur[0].len() {\n\
    \   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n38 |         if tri_sequence_cur_index\
    \ >= tri_sequence_cur[0].len().try_into().unwrap() {\n   |                   \
    \                                            ++++++++++++++++++++\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `[isize; 3]`\n    --> /tmp/tmph9vsbulk.rs:42:34\n     |\n42   |    \
    \ tri_sequence.iter().cloned().collect()\n     |                             \
    \     ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=[isize;\
    \ 3]>`\n     |\n     = help: the trait `FromIterator<[isize; 3]>` is not implemented\
    \ for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for\
    \ `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n < 2 {\n\
    \        return vec![1, 1, 1];\n    }\n    let mut result = vec![1, 1, 1];\n \
    \   if n / 2 == 0 {\n        result[1] = 1 + n / 2;\n    } else {\n        result[1]\
    \ = tri(n - 2) + tri(n - 1) + tri(n + 1);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpoe3xxp98.rs:24:32\n\
    \   |\n24 |         result[1] = tri(n - 2) + tri(n - 1) + tri(n + 1);\n   |  \
    \                   ---------- ^ ---------- Vec<isize>\n   |                 \
    \    |\n   |                     Vec<isize>\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n\
    \        return vec![];\n    }\n    if n % 2 == 1 {\n        return vec![1, 1,\
    \ 2, 3];\n    }\n    let mut sum = 1;\n    for i in 0..(n - 1) {\n        let\
    \ sum = sum + i + i + 1;\n        sum = sum % 10;\n    }\n    vec![1, 1, 2, 3]\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "warning: value assigned to `sum` is never read\n  --> /tmp/tmptj_8nby3.rs:26:9\n\
    \   |\n26 |         sum = sum % 10;\n   |         ^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nwarning:\
    \ variable does not need to be mutable\n  --> /tmp/tmptj_8nby3.rs:23:9\n   |\n\
    23 |     let mut sum = 1;\n   |         ----^^^\n   |         |\n   |        \
    \ help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptj_8nby3.rs:26:9\n\
    \   |\n25 |         let sum = sum + i + i + 1;\n   |             ---\n   |   \
    \          |\n   |             first assignment to `sum`\n   |             help:\
    \ consider making this binding mutable: `mut sum`\n26 |         sum = sum % 10;\n\
    \   |         ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror:\
    \ aborting due to previous error; 2 warnings emitted\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n\
    \        return vec![];\n    }\n    if n == 1 {\n        return vec![1];\n   \
    \ }\n    if n % 2 == 1 {\n        let mut first = tri(n - 1) + tri(n - 2);\n \
    \       first.push(first[0] + first[1]);\n        return first;\n    }\n    let\
    \ mut first = tri(n - 1) + tri(n - 2) + tri(n - 3);\n    first.push(first[0] +\
    \ first[1] + first[2]);\n    first.push(first[0] + first[1] + first[2] + first[3]);\n\
    \    first.push(first[0] + first[1] + first[2] + first[3] + first[4]);\n    first.push(first[0]\
    \ + first[1] + first[2] + first[3] + first[4] + first[5]);\n    first.push(first[0]\
    \ + first[1] + first[2] + first[3] + first[4] + first[5] + first[6]);\n    first.push(first[0]\
    \ + first[1] + first[2] + first[3] + first[4] + first[5] + first[6] + first[7]);\n\
    \    first.push(first[0] + first[1] + first[2] + first[3] + first[4] + first[5]\
    \ + first[6] + first[7] + first[8]);\n    first\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpoidfry2u.rs:24:36\n\
    \   |\n24 |         let mut first = tri(n - 1) + tri(n - 2);\n   |           \
    \              ---------- ^ ---------- Vec<isize>\n   |                      \
    \   |\n   |                         Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>`\
    \ to `Vec<isize>`\n  --> /tmp/tmpoidfry2u.rs:28:32\n   |\n28 |     let mut first\
    \ = tri(n - 1) + tri(n - 2) + tri(n - 3);\n   |                     ----------\
    \ ^ ---------- Vec<isize>\n   |                     |\n   |                  \
    \   Vec<isize>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut vec:\
    \ Vec<isize> = vec![1, 1, 1];\n    \n    for i in (1..n).rev() {\n        vec.push(vec[0]\
    \ + vec[1]);\n        vec.pop();\n    }\n\n    vec\n}\n\nfn main() {\n    let\
    \ candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpqon5eh8n.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n\
    \        return vec![3, 1, 1, 2];\n    }\n    if n == 1 {\n        return vec![3,\
    \ 1, 1];\n    }\n    let mut current = 1;\n    let mut previous = 1;\n    let\
    \ mut results = vec![3, 1, 1];\n    while results.len() < n + 1 {\n        results.push(previous\
    \ + current);\n        previous += current;\n        current += previous;\n  \
    \  }\n    results\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5kfgw86o.rs:26:27\n   |\n\
    26 |     while results.len() < n + 1 {\n   |                           ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n26 |     while results.len()\
    \ < (n + 1).try_into().unwrap() {\n   |                           +     +++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut res =\
    \ Vec::new();\n    res.push(n);\n    if n % 2 == 1 {\n        res.push(3);\n \
    \   } else {\n        let mut n1 = tri(n - 1) + tri(n - 2) + tri(n - 3);\n   \
    \     res.push(n1);\n        let mut n2 = tri(n - 4) + tri(n - 5) + tri(n - 6);\n\
    \        res.push(n2);\n    }\n    res\n}\n\nfn main() {\n    let candidate =\
    \ tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpze3wwzmj.rs:22:33\n\
    \   |\n22 |         let mut n1 = tri(n - 1) + tri(n - 2) + tri(n - 3);\n   | \
    \                     ---------- ^ ---------- Vec<isize>\n   |               \
    \       |\n   |                      Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>`\
    \ to `Vec<isize>`\n  --> /tmp/tmpze3wwzmj.rs:24:33\n   |\n24 |         let mut\
    \ n2 = tri(n - 4) + tri(n - 5) + tri(n - 6);\n   |                      ----------\
    \ ^ ---------- Vec<isize>\n   |                      |\n   |                 \
    \     Vec<isize>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n % 2 == 0\
    \ {\n        let mut tri_vec: Vec<isize> = vec![];\n        tri_vec.push(3);\n\
    \        for i in 1..(n / 2){\n            tri_vec.push(tri_vec[i] + tri_vec[n\
    \ - 1 - i]);\n        }\n        tri_vec\n    } else {\n        let mut tri_vec:\
    \ Vec<isize> = vec![];\n        tri_vec.push(1);\n        for i in 1..(n / 2){\n\
    \            tri_vec.push(tri_vec[i] + tri_vec[n - 1 - i]);\n        }\n     \
    \   tri_vec\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun8atnu.rs:21:26\n\
    \   |\n21 |             tri_vec.push(tri_vec[i] + tri_vec[n - 1 - i]);\n   | \
    \                         ^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpsun8atnu.rs:21:39\n   |\n21 |             tri_vec.push(tri_vec[i]\
    \ + tri_vec[n - 1 - i]);\n   |                                       ^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsun8atnu.rs:28:26\n\
    \   |\n28 |             tri_vec.push(tri_vec[i] + tri_vec[n - 1 - i]);\n   | \
    \                         ^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpsun8atnu.rs:28:39\n   |\n28 |             tri_vec.push(tri_vec[i]\
    \ + tri_vec[n - 1 - i]);\n   |                                       ^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror:"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n % 2 == 0\
    \ {\n        return vec![n, tri(n - 1) + tri(n - 2) + tri(n - 3)];\n    } else\
    \ {\n        return vec![n, tri(n - 1) + tri(n - 2) + tri(n + 2)];\n    }\n}\n\
    \nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpb2b4gzjq.rs:18:35\n\
    \   |\n18 |         return vec![n, tri(n - 1) + tri(n - 2) + tri(n - 3)];\n  \
    \ |                        ---------- ^ ---------- Vec<isize>\n   |          \
    \              |\n   |                        Vec<isize>\n\nerror[E0369]: cannot\
    \ add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpb2b4gzjq.rs:20:35\n   |\n20\
    \ |         return vec![n, tri(n - 1) + tri(n - 2) + tri(n + 2)];\n   |      \
    \                  ---------- ^ ---------- Vec<isize>\n   |                  \
    \      |\n   |                        Vec<isize>\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut vec:\
    \ Vec<isize> = vec![];\n    let mut sum = 0;\n    if n % 2 == 0 {\n        for\
    \ i in 0..n / 2 {\n            sum += i as isize;\n            vec.push(sum);\n\
    \        }\n    } else {\n        for i in 0..n / 2 {\n            sum += i as\
    \ isize;\n            vec.push(sum);\n        }\n        for i in 0..n / 2 {\n\
    \            sum += i as isize;\n            vec.push(sum);\n        }\n    }\n\
    \    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp_3357rsn.rs:39:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    assert!(n >=\
    \ 0);\n    let mut res = vec![];\n    if n & 1 == 0 {\n        res.push(3);\n\
    \    } else {\n        res.push(1 + n / 2);\n        res.push(tri(n - 1) + tri(n\
    \ - 2) + tri(n - 1));\n    }\n    res\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpppy5v8iy.rs:23:29\n\
    \   |\n23 |         res.push(tri(n - 1) + tri(n - 2) + tri(n - 1));\n   |    \
    \              ---------- ^ ---------- Vec<isize>\n   |                  |\n \
    \  |                  Vec<isize>\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut fib:\
    \ Vec<isize> = Vec::new();\n    fib.push(3);\n    fib.push(1);\n    for _ in 0..n\
    \ / 2 {\n        fib.push(fib.last().unwrap() + fib.last().unwrap() + fib.last().unwrap());\n\
    \    }\n    if n % 2 == 0 {\n        fib.push(fib.last().unwrap() + fib.last().unwrap());\n\
    \    }\n    fib.into_iter().collect()\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpegljbxqo.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result:\
    \ Vec<isize> = vec![1];\n    if n%2 == 0 {\n        result[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n - 1);\n    } else {\n        result[1] = tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp5wcwzdnj.rs:19:32\n\
    \   |\n19 |         result[1] = tri(n - 1) + tri(n - 2) + tri(n - 1);\n   |  \
    \                   ---------- ^ ---------- Vec<isize>\n   |                 \
    \    |\n   |                     Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>`\
    \ to `Vec<isize>`\n  --> /tmp/tmp5wcwzdnj.rs:21:32\n   |\n21 |         result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1);\n   |                     ----------\
    \ ^ ---------- Vec<isize>\n   |                     |\n   |                  \
    \   Vec<isize>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    result.append(3);\n    for i in 1..(n + 1).min(2) {\n   \
    \     let mut j = i + 1;\n        let mut k = i + 2;\n        result.append(j);\n\
    \        while (k % 2 == 0) {\n            result.append(j + k / 2);\n       \
    \     i += 2;\n            k /= 2;\n        }\n        result.append(j + k);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp3rb9nz22.rs:23:15\n\
    \   |\n23 |         while (k % 2 == 0) {\n   |               ^          ^\n  \
    \ |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n23 -         while (k % 2 == 0) {\n23 +         while k % 2 == 0 {\n  \
    \ | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3rb9nz22.rs:18:19\n   |\n\
    18 |     result.append(3);\n   |                   ^ expected `&mut Vec<_>`, found\
    \ integer\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n       \
    \                    found type `{integer}`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3rb9nz22.rs:22:23\n   |\n22 |         result.append(j);\n   | \
    \                      ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note:\
    \ expected mutable reference `&mut Vec<_>`\n                           found type\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3rb9nz22.rs:24:27\n\
    \   |\n24 |             result.append(j + k / 2);\n   |                      \
    \     ^^^^^^^^^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected\
    \ mutable reference `&mut Vec<_>`\n                           found type `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3rb9nz22.rs:28:23\n   |\n28 |\
    \         result.append(j + k);\n   |                       ^^^^^ expected `&mut\
    \ Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n\
    \                           found type `isize`\n\nerror: aborting due to 4 previous\
    \ errors; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut list\
    \ = Vec::new();\n    list.append(3);\n    if n % 2 == 0 {\n        list.append(1);\n\
    \        list.append(n / 2);\n    } else {\n        list.append(n);\n        list.append(n\
    \ + 1);\n        list.append(1);\n    }\n    return list;\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp64gz8udd.rs:18:17\n   |\n\
    18 |     list.append(3);\n   |                 ^ expected `&mut Vec<_>`, found\
    \ integer\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n       \
    \                    found type `{integer}`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp64gz8udd.rs:20:21\n   |\n20 |         list.append(1);\n   |   \
    \                  ^ expected `&mut Vec<_>`, found integer\n   |\n   = note: expected\
    \ mutable reference `&mut Vec<_>`\n                           found type `{integer}`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp64gz8udd.rs:21:21\n   |\n21 |\
    \         list.append(n / 2);\n   |                     ^^^^^ expected `&mut Vec<_>`,\
    \ found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n \
    \                          found type `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp64gz8udd.rs:23:21\n   |\n23 |         list.append(n);\n   |   \
    \                  ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected\
    \ mutable reference `&mut Vec<_>`\n                           found type `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp64gz8udd.rs:24:21\n   |\n24 |\
    \         list.append(n + 1);\n   |                     ^^^^^ expected `&mut Vec<_>`,\
    \ found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n \
    \                          found type `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp64gz8udd.rs:25:21\n   |\n25 |         list.append(1);\n   |   \
    \                  ^ expected `&mut Vec<_>`, found integer\n   |\n   = note: expected\
    \ mutable reference `&mut Vec<_>`\n                           found type `{integer}`\n\
    \nerror: aborting due to 6 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 ||\
    \ n == 1 {\n        return vec![n, n, n];\n    }\n    if n % 2 == 0 {\n      \
    \  return vec![tri(n - 1) + tri(n - 2) + tri(n + 1), n, n, n, n];\n    } else\
    \ {\n        return vec![tri(n - 1) + tri(n - 2), tri(n + 1), n, n, n];\n    }\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpc4wvypt0.rs:21:32\n\
    \   |\n21 |         return vec![tri(n - 1) + tri(n - 2) + tri(n + 1), n, n, n,\
    \ n];\n   |                     ---------- ^ ---------- Vec<isize>\n   |     \
    \                |\n   |                     Vec<isize>\n\nerror[E0369]: cannot\
    \ add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpc4wvypt0.rs:23:32\n   |\n23\
    \ |         return vec![tri(n - 1) + tri(n - 2), tri(n + 1), n, n, n];\n   | \
    \                    ---------- ^ ---------- Vec<isize>\n   |                \
    \     |\n   |                     Vec<isize>\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut tri =\
    \ [0; 3];\n\n    if n % 2 == 0 {\n        tri[0] = 1;\n        tri[1] = tri[2]\
    \ = tri[3] = n / 2;\n    } else {\n        let mut i = 1;\n        while i < n\
    \ {\n            tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 1];\n            i\
    \ += 1;\n        }\n    }\n\n    tri\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpggn0ct7e.rs:21:27\n   |\n\
    21 |         tri[1] = tri[2] = tri[3] = n / 2;\n   |                  ------ \
    \  ^^^^^^^^^^^^^^ expected `isize`, found `()`\n   |                  |\n   |\
    \                  expected due to the type of this binding\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpggn0ct7e.rs:21:18\n   |\n21 |         tri[1] = tri[2] =\
    \ tri[3] = n / 2;\n   |         ------   ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `()`\n   |         |\n   |         expected due to the type of this binding\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpggn0ct7e.rs:25:13\n\
    \   |\n25 |             tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 1];\n   | \
    \            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `[isize]`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpggn0ct7e.rs:25:22\n\
    \   |\n25 |             tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 1];\n   | \
    \                     ^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `[isize]`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpggn0ct7e.rs:25:35\n   |\n25 |             tri[i] = tri[i - 1] +\
    \ tri[i - 2] + tri[i - 1];\n   |                                   ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `[isize]`\n\nerror[E0277]:\
    \ the type `[isize]"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    assert!(n > 1);\n\
    \    \n    let mut vec: Vec<isize> = Vec::new();\n    if n%2 == 0 {\n        vec.push(3);\n\
    \    } else {\n        let mut tri_0: isize = 3;\n        let mut tri_1: isize\
    \ = 1;\n        let mut tri_2: isize = 2;\n        while n != 0 {\n          \
    \  tri_2 = tri_1 + tri_2;\n            if n&1 == 1 {\n                tri_1 =\
    \ tri_2 + tri_0;\n            } else {\n                tri_0 = tri_1 + tri_2;\n\
    \            }\n            vec.push(tri_2);\n            n -= 1;\n        }\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp_br5ppha.rs:34:13\n\
    \   |\n16 | fn tri(n: isize) -> Vec<isize> {\n   |        - help: consider making\
    \ this binding mutable: `mut n`\n...\n34 |             n -= 1;\n   |         \
    \    ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    if n < 0 {\n        result.append(0);\n        return result;\n\
    \    }\n    if n == 0 {\n        result.append(1);\n        return result;\n \
    \   }\n    if n == 1 {\n        result.append(3);\n        return result;\n  \
    \  }\n\n    if n % 2 == 0 {\n        result.append(1 + n / 2);\n    } else {\n\
    \        let mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n  \
    \      tri_2.push(3);\n        result.append(tri_1 + tri_2);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpis2suve9.rs:19:23\n   |\n\
    19 |         result.append(0);\n   |                       ^ expected `&mut Vec<_>`,\
    \ found integer\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n \
    \                          found type `{integer}`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpis2suve9.rs:23:23\n   |\n23 |         result.append(1);\n\
    \   |                       ^ expected `&mut Vec<isize>`, found integer\n   |\n\
    \   = note: expected mutable reference `&mut Vec<isize>`\n                   \
    \        found type `{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpis2suve9.rs:27:23\n\
    \   |\n27 |         result.append(3);\n   |                       ^ expected `&mut\
    \ Vec<isize>`, found integer\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<isize>`\n                           found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpis2suve9.rs:32:23\n   |\n32 |         result.append(1\
    \ + n / 2);\n   |                       ^^^^^^^^^ expected `&mut Vec<isize>`,\
    \ found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n\
    \                           found type `isize`\n\nerror[E0369]: cannot add `Vec<isize>`\
    \ to `Vec<isize>`\n  --> /tmp/tmpis2suve9.rs:37:29\n   |\n37 |         result.append(tri_1\
    \ + tri_2);\n   |                       ----- ^ ----- Vec<isize>\n   |       \
    \                |\n   |                       Vec<isize>\n\nerror: aborting due\
    \ to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n <= 2 {\n\
    \        return vec![1, 2, 3];\n    }\n    vec![tri(n - 2) + tri(n - 1) + tri(n\
    \ + 1)]\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpwg4sjbfv.rs:20:21\n\
    \   |\n20 |     vec![tri(n - 2) + tri(n - 1) + tri(n + 1)]\n   |          ----------\
    \ ^ ---------- Vec<isize>\n   |          |\n   |          Vec<isize>\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    if n==1 {\n        result=vec![1..3];\n        return result;\n\
    \    }\n    if n==2 {\n        result=vec![2..5];\n        return result;\n  \
    \  }\n    let mut n1 = n-1;\n    let mut n2 = n-2;\n    let mut n3 = n+1;\n  \
    \  result=[n1..3];\n    result.append(n1,n2,n3);\n    return result;\n}\n\nfn\
    \ main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1swett8f.rs:20:16\n   |\n\
    16 | fn tri(n: isize) -> Vec<isize> {\n   |                     ---------- expected\
    \ `Vec<isize>` because of return type\n...\n20 |         return result;\n   |\
    \                ^^^^^^ expected `isize`, found struct `std::ops::Range`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<std::ops::Range<{integer}>>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1swett8f.rs:29:12\n   |\n17 |\
    \     let mut result = Vec::new();\n   |                      ---------- expected\
    \ due to this value\n...\n29 |     result=[n1..3];\n   |            ^^^^^^^- help:\
    \ try using a conversion method: `.to_vec()`\n   |            |\n   |        \
    \    expected struct `Vec`, found array of 1 element\n   |\n   = note: expected\
    \ struct `Vec<std::ops::Range<{integer}>>`\n               found array `[std::ops::Range<isize>;\
    \ 1]`\n\nerror[E0061]: this function takes 1 argument but 3 arguments were supplied\n\
    \    --> /tmp/tmp1swett8f.rs:30:12\n     |\n30   |     result.append(n1,n2,n3);\n\
    \     |            ^^^^^^ -- -- -- supplied 3 arguments\n     |            |\n\
    \     |            expected 1 argument\n     |\nnote: associated function defined\
    \ here\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0061, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n <= 1 {\n\
    \        return vec![n];\n    }\n    let mut l1 = vec![3];\n    let mut l2 = vec![1];\n\
    \    for _ in 0..n {\n        l1 = l1 + l2;\n        l2 = l2 - l1;\n    }\n  \
    \  l1.clone()\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<{integer}>` to `Vec<{integer}>`\n  --> /tmp/tmpyhtzwxsr.rs:23:17\n\
    \   |\n23 |         l1 = l1 + l2;\n   |              -- ^ -- Vec<{integer}>\n\
    \   |              |\n   |              Vec<{integer}>\n\nerror[E0369]: cannot\
    \ subtract `Vec<{integer}>` from `Vec<{integer}>`\n  --> /tmp/tmpyhtzwxsr.rs:24:17\n\
    \   |\n24 |         l2 = l2 - l1;\n   |              -- ^ -- Vec<{integer}>\n\
    \   |              |\n   |              Vec<{integer}>\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut nums:\
    \ Vec<isize> = vec![];\n    if n < 2 {\n        nums.push(3);\n        return\
    \ nums;\n    }\n    if n % 2 == 0 {\n        nums.push(3);\n        nums.push((2\
    \ + n + 1) / 2);\n        return nums;\n    }\n    let num = 1 + (n - 1) / 2;\n\
    \    nums.push(num);\n    nums.push(num + num);\n    nums.push(num + num + 1);\n\
    \    nums\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 5]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp7g0_8nbw.rs:36:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut list\
    \ = vec![];\n    let mut temp1 = 1;\n    let mut temp2 = 2;\n    let mut temp3\
    \ = 1;\n    let mut temp4 = 2;\n    loop {\n        list.push((temp1 + temp2 +\
    \ temp3 + temp4).into());\n        if n & 1 == 1 {\n            temp3 = temp1\
    \ + temp4;\n            temp2 = temp1;\n            temp1 = temp4;\n         \
    \   temp4 += 1;\n        } else {\n            temp4 = temp1 + temp2;\n      \
    \      temp2 = temp3;\n            temp3 = temp1;\n            temp1 += 1;\n \
    \       }\n        n >>= 1;\n        if n == 0 {\n            break;\n       \
    \ }\n    }\n    list\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: From<i32>` is not satisfied\n  -->\
    \ /tmp/tmpk9i_5a3s.rs:23:51\n   |\n23 |         list.push((temp1 + temp2 + temp3\
    \ + temp4).into());\n   |                                                   ^^^^\
    \ the trait `From<i32>` is not implemented for `isize`\n   |\n   = help: the following\
    \ other types implement trait `From<T>`:\n             <f32 as From<i16>>\n  \
    \           <f32 as From<i8>>\n             <f32 as From<u16>>\n             <f32\
    \ as From<u8>>\n             <f64 as From<f32>>\n             <f64 as From<i16>>\n\
    \             <f64 as From<i32>>\n             <f64 as From<i8>>\n           and\
    \ 67 others\n   = note: required because of the requirements on the impl of `Into<isize>`\
    \ for `i32`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut ans =\
    \ Vec::new();\n    ans.push(3);\n    ans.push(1);\n    ans.push(2);\n    if n\
    \ % 2 == 1 {\n        let mut m = n;\n        while m % 2 == 0 {\n           \
    \ m = m / 2;\n            ans.push(m);\n        }\n    }\n    let mut n = 3;\n\
    \    while n < n + 1 {\n        let mut n = n + 1;\n        ans.push(1);\n   \
    \     while n % 2 == 0 {\n            n = n + 2;\n            ans.push(n);\n \
    \       }\n        n += 1;\n    }\n    ans\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut ret:\
    \ Vec<isize> = Vec::new();\n    if n == 3 {\n        ret.push(3);\n    } else\
    \ {\n        ret.push((tri(n - 1) + tri(n - 2) + tri(n - 3)).unwrap());\n    }\n\
    \    return ret;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp8tfzdh91.rs:21:30\n\
    \   |\n21 |         ret.push((tri(n - 1) + tri(n - 2) + tri(n - 3)).unwrap());\n\
    \   |                   ---------- ^ ---------- Vec<isize>\n   |             \
    \      |\n   |                   Vec<isize>\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    match n % 2 {\n\
    \        0 => vec![1, n],\n        1 => vec![3, (n / 2) + 1, (n / 2) + 3, (n /\
    \ 2) + 7],\n        _ => tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n}\n\nfn\
    \ main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpmql_y8w3.rs:20:25\n\
    \   |\n20 |         _ => tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |          \
    \    ---------- ^ ---------- Vec<isize>\n   |              |\n   |           \
    \   Vec<isize>\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut vec =\
    \ vec![0; 3];\n    if n % 2 == 0 {\n        vec[0] = vec[1] = 1;\n        vec[2]\
    \ = 2;\n        for _ in 1..n+1 {\n            vec[3] += vec[2] as isize;\n  \
    \          vec[0] = vec[1] += vec[2] as isize;\n            vec[2] = vec[1] +=\
    \ vec[0] as isize;\n        }\n    } else {\n        vec[0] = vec[1] = 1;\n  \
    \      vec[2] = 1 + n / 2;\n        for _ in 1..n+1 {\n            vec[3] += vec[2]\
    \ as isize;\n            vec[0] = vec[1] += vec[2] as isize;\n            vec[2]\
    \ = vec[1] += vec[0] as isize;\n        }\n    }\n    return vec\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3zfw_9n_.rs:19:18\n   |\n\
    19 |         vec[0] = vec[1] = 1;\n   |         ------   ^^^^^^^^^^ expected integer,\
    \ found `()`\n   |         |\n   |         expected due to the type of this binding\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3zfw_9n_.rs:23:22\n   |\n23 |\
    \             vec[0] = vec[1] += vec[2] as isize;\n   |             ------   ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `()`\n   |             |\n   |             expected\
    \ due to the type of this binding\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3zfw_9n_.rs:24:22\n\
    \   |\n24 |             vec[2] = vec[1] += vec[0] as isize;\n   |            \
    \ ------   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `()`\n   |      \
    \       |\n   |             expected due to the type of this binding\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3zfw_9n_.rs:27:18\n   |\n27 |         vec[0]\
    \ = vec[1] = 1;\n   |         ------   ^^^^^^^^^^ expected `isize`, found `()`\n\
    \   |         |\n   |         expected due to the type of this binding\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3zfw_9n_.rs:31:22\n   |\n31 |             vec[0]\
    \ = vec[1] += vec[2] as isize;\n   |             ------   ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `()`\n   |             |\n   |             expected\
    \ due to the type of this binding\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3zfw_9n_.rs:32:22\n\
    \   |\n32 |             vec[2] = vec[1] += vec[0] as isize;\n   |            \
    \ ------   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `()`\n   |      \
    \       |\n   |             expected due to the type of this binding\n\nerror:\
    \ aborting due to 6 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = vec![3, 1];\n    for _ in 0..n {\n        result.push(result.last().unwrap()\
    \ + result.last().unwrap() + result.last().unwrap());\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 3, 9, 27]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpgophh0lr.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut res =\
    \ Vec::new();\n\n    let mut a = 1;\n    let mut b = 1;\n\n    for _ in 0..(n\
    \ + 1) {\n        res.push(a);\n        if n % 2 == 0 {\n            a += b;\n\
    \        } else {\n            b += a;\n        }\n    }\n\n    res\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpeqjb51l3.rs:36:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result:\
    \ Vec<isize> = Vec::new();\n    if n <= 2 {\n        result.push(n);\n       \
    \ return result;\n    }\n    if n % 2 == 0 {\n        result.push(1);\n      \
    \  result.push(3);\n    } else {\n        result[2] = tri(n - 1) + tri(n - 2)\
    \ + tri(n - 3);\n    }\n    result\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpjaiek1ae.rs:26:32\n\
    \   |\n26 |         result[2] = tri(n - 1) + tri(n - 2) + tri(n - 3);\n   |  \
    \                   ---------- ^ ---------- Vec<isize>\n   |                 \
    \    |\n   |                     Vec<isize>\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut res =\
    \ Vec::new();\n    res.extend_from_slice(&vec![]); //We want to return an empty\
    \ vector\n\n    for i in 1..=n {\n        let prev_3 = tri(3 - i);\n        let\
    \ prev_2 = tri(2 - i);\n        let prev_1 = tri(1 - i);\n\n        res.extend_from_slice(&[prev_3,\
    \ prev_2, prev_1]);\n    }\n\n    res.into_iter().collect()\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `Vec<isize>`\n    --> /tmp/tmp_g858jo7.rs:28:21\n    \
    \ |\n28   |     res.into_iter().collect()\n     |                     ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=Vec<isize>>`\n\
    \     |\n     = help: the trait `FromIterator<Vec<isize>>` is not implemented\
    \ for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for\
    \ `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    if n == 0 {\n        result.push(3);\n    } else if n & 1 ==\
    \ 0 {\n        result.push(n + 1);\n    } else {\n        result.push(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1));\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmplnif7oo3.rs:23:32\n\
    \   |\n23 |         result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n   | \
    \                    ---------- ^ ---------- Vec<isize>\n   |                \
    \     |\n   |                     Vec<isize>\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 1 ||\
    \ n == 2 {\n        return vec![1, 2, 3];\n    }\n    if n % 2 == 0 {\n      \
    \  let tri_mid = tri(n / 2).iter().cloned().collect::<Vec<_>>();\n        let\
    \ tri_start = tri_mid.clone();\n        let tri_end = tri_mid.clone();\n     \
    \   for &i in tri_start.clone() {\n            *i += 2;\n        }\n        for\
    \ &i in tri_end.clone() {\n            *i -= 1;\n        }\n        return tri_start.clone()\
    \ + tri_end.clone() + tri_mid;\n    }\n    if n % 2 == 1 {\n        let tri_mid\
    \ = tri(n / 2).iter().cloned().collect::<Vec<_>>();\n        let tri_start = tri_mid.clone();\n\
    \        let tri_end = tri_mid.clone();\n        for &i in tri_start.clone() {\n\
    \            *i += 1;\n        }\n        for &i in tri_end.clone() {\n      \
    \      *i -= 1;\n        }\n        return tri_start.clone() + tri_end.clone()\
    \ + tri_mid;\n    }\n    let tri_mid = tri(n / 2).iter().cloned().collect::<Vec<_>>();\n\
    \    let tri_start = tri_mid.clone();\n    let tri_end = tri_mid.clone();\n  \
    \  for &i in tri_start.clone() {\n        *i += 1;\n    }\n    for &i in tri_end.clone()\
    \ {\n        *i -= 1;\n    }\n    tri_start.clone() + tri_end.clone() + tri_mid\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_prowmpn.rs:24:13\n   |\n\
    24 |         for &i in tri_start.clone() {\n   |             ^^    -----------------\
    \ this expression has type `Option<isize>`\n   |             |\n   |         \
    \    expected `isize`, found reference\n   |             help: you can probably\
    \ remove the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_prowmpn.rs:27:13\n\
    \   |\n27 |         for &i in tri_end.clone() {\n   |             ^^    ---------------\
    \ this expression has type `Option<isize>`\n   |             |\n   |         \
    \    expected `isize`, found reference\n   |             help: you can probably\
    \ remove the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n\
    \  --> /tmp/tmp_prowmpn.rs:30:34\n   |\n30 |         return tri_start.clone()\
    \ + tri_end.clone() + tri_mid;\n   |                ----------------- ^ ---------------\
    \ Vec<isize>\n   |                |\n   |                Vec<isize>\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_prowmpn.rs:36:13\n   |\n36 |         for &i\
    \ in tri_start.clone() {\n   |             ^^    ----------------- this expression\
    \ has type `Option<isize>`\n   |             |\n   |             expected `isize`,\
    \ found reference\n   |             help: you can probably remove the explicit\
    \ borrow: `i`\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_prowmpn.rs:39:13\n  \
    \ |\n39 |         for &i in tri_end.clone() {\n   |             ^^    ---------------\
    \ this expression has type `Option<isize>`\n   |             |\n   |         \
    \    expected `isize`, found reference\n   |             help: you can probably\
    \ remove the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n\
    \  --> /tmp/tmp_prowmpn.rs:42:34\n   |\n42 |         return tri_start.clone()\
    \ + tri_end.clone("
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n <= 2 {\n\
    \        return vec![1, 1, 2, 3];\n    }\n\n    if n % 2 == 0 {\n        let a\
    \ = tri(n / 2);\n        let b = tri((n - 1) / 2) + tri((n + 1) / 2);\n      \
    \  a + b\n    } else {\n        let a = tri((n - 1) / 2) + tri((n + 1) / 2);\n\
    \        a\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp4wmjjzxe.rs:23:34\n\
    \   |\n23 |         let b = tri((n - 1) / 2) + tri((n + 1) / 2);\n   |       \
    \          ---------------- ^ ---------------- Vec<isize>\n   |              \
    \   |\n   |                 Vec<isize>\n\nerror[E0369]: cannot add `_` to `Vec<isize>`\n\
    \  --> /tmp/tmp4wmjjzxe.rs:24:11\n   |\n24 |         a + b\n   |         - ^ -\
    \ _\n   |         |\n   |         Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>`\
    \ to `Vec<isize>`\n  --> /tmp/tmp4wmjjzxe.rs:26:34\n   |\n26 |         let a =\
    \ tri((n - 1) / 2) + tri((n + 1) / 2);\n   |                 ----------------\
    \ ^ ---------------- Vec<isize>\n   |                 |\n   |                \
    \ Vec<isize>\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut vec:\
    \ Vec<isize> = vec![];\n    if n < 2 {\n        return vec;\n    }\n    vec.push(3);\n\
    \    vec.push(1 + n / 2);\n    vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpcxm_a1om.rs:23:25\n\
    \   |\n23 |     vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n   |        \
    \      ---------- ^ ---------- Vec<isize>\n   |              |\n   |         \
    \     Vec<isize>\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut list\
    \ = Vec::new();\n    list.push((1 + n) / 2);\n    list.push((n / 2));\n    list.push((n\
    \ - 1)); // + the previous number in Tribonacci sequence \n    list\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpgei02u89.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut res =\
    \ Vec::new();\n    res.push(3);\n    let mut tri_counter = 1;\n    for i in 2..n\
    \ + 1 {\n        tri_counter += i / 2;\n        res.push(i);\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpi_ug62ik.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    assert!(n > 0);\n\
    \    let mut vec = vec![3, 1];\n    for _ in 0..n {\n        vec.push(vec[vec.len()-1]\
    \ + vec[vec.len()-2] + vec[vec.len()+1])\n    }\n    vec\n}\n\nfn main() {\n \
    \   let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n  \
    \  assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 2 but the index\
    \ is 3', /tmp/tmpfonk592q.rs:20:56\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    fn tri_helper(n:\
    \ isize, a: isize, b: isize, c: isize) -> isize {\n        if n == 1 {\n     \
    \       return a;\n        }\n        let new_a = tri_helper(n - 1, b, a + b +\
    \ c, c);\n        let new_b = tri_helper(n - 1, a, c, b + a + c);\n        let\
    \ new_c = tri_helper(n - 1, a, b, a + b + c);\n        a + b + c + new_a + new_b\
    \ + new_c\n    }\n\n    let mut a = 1;\n    let mut b = 1;\n    let mut c = 1;\n\
    \    tri_helper(n, a, b, c)\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_m8njkt4.rs:30:5\n   |\n\
    16 | fn tri(n: isize) -> Vec<isize> {\n   |                     ---------- expected\
    \ `Vec<isize>` because of return type\n...\n30 |     tri_helper(n, a, b, c)\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n                found type `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = vec![n + 1];\n    if n == 0 || n == 1 {\n        result[0] = 0;\n        result[1]\
    \ = n + 1;\n    } else {\n        let mut tri_1 = tri(n - 1);\n        let mut\
    \ tri_2 = tri(n - 2);\n        let mut tri_3 = tri(n - 1);\n        tri_1.push(tri_1[0]\
    \ as isize + tri_1[1] as isize + tri_1[2] as isize);\n        tri_2.push(tri_2[0]\
    \ as isize + tri_2[1] as isize + tri_2[2] as isize);\n        tri_3.push(tri_3[0]\
    \ as isize + tri_3[1] as isize + tri_3[2] as isize);\n        result[0] = (tri_1[0]\
    \ as isize + tri_2[0] as isize + tri_3[0] as isize) / 3;\n        result[1] =\
    \ (tri_1[1] as isize + tri_2[1] as isize + tri_3[1] as isize) / 3;\n        result[2]\
    \ = (tri_1[2] as isize + tri_2[2] as isize + tri_3[2] as isize) / 3;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 1 but the index\
    \ is 1', /tmp/tmpkubwr8co.rs:20:9\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n < 2 {\n\
    \        return vec![]\n    }\n\n    if n & 1 == 1 {\n        return vec![tri(n\
    \ - 1) + tri(n - 2)] \n    }\n    else {\n        return vec![tri(n - 1) + tri(n\
    \ - 2), tri(n - 2)] \n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp8_p7kap_.rs:22:32\n\
    \   |\n22 |         return vec![tri(n - 1) + tri(n - 2)] \n   |              \
    \       ---------- ^ ---------- Vec<isize>\n   |                     |\n   | \
    \                    Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n\
    \  --> /tmp/tmp8_p7kap_.rs:25:32\n   |\n25 |         return vec![tri(n - 1) +\
    \ tri(n - 2), tri(n - 2)] \n   |                     ---------- ^ ---------- Vec<isize>\n\
    \   |                     |\n   |                     Vec<isize>\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n <= 2 {\n\
    \        return vec![];\n    }\n    let mut first = 0;\n    let mut second = 1;\n\
    \    if n % 2 == 0 {\n        first = tri(n - 1) + tri(n - 2);\n    } else {\n\
    \        first = tri(n - 1) + tri(n - 2) + tri(n - 3);\n    }\n    let mut result\
    \ = vec![];\n    while n > 1 {\n        result.push(first);\n        n -= 1;\n\
    \        first = second;\n        second = tri(n);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmptuwweump.rs:23:28\n\
    \   |\n23 |         first = tri(n - 1) + tri(n - 2);\n   |                 ----------\
    \ ^ ---------- Vec<isize>\n   |                 |\n   |                 Vec<isize>\n\
    \nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmptuwweump.rs:25:28\n\
    \   |\n25 |         first = tri(n - 1) + tri(n - 2) + tri(n - 3);\n   |      \
    \           ---------- ^ ---------- Vec<isize>\n   |                 |\n   | \
    \                Vec<isize>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptuwweump.rs:32:18\n\
    \   |\n21 |     let mut second = 1;\n   |                      - expected due\
    \ to this value\n...\n32 |         second = tri(n);\n   |                  ^^^^^^\
    \ expected integer, found struct `Vec`\n   |\n   = note: expected type `{integer}`\n\
    \            found struct `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n < 3 { return\
    \ vec![3]; }\n    let mut f = 3.0 as f64;\n    let mut g = 1.0 as f64;\n    \n\
    \    for i in (1..n).rev() {\n        let mut x = f(g) + f(g + g);\n        f\
    \ = (g + g) * (2.0 * x as f64);\n        g = x;\n    }\n    \n    vec![f(g) +\
    \ f(g + g), f]\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0618]: expected function, found `f64`\n  --> /tmp/tmpepmszwiq.rs:22:21\n\
    \   |\n18 |     let mut f = 3.0 as f64;\n   |         ----- `f` has type `f64`\n\
    ...\n22 |         let mut x = f(g) + f(g + g);\n   |                     ^---\n\
    \   |                     |\n   |                     call expression requires\
    \ function\n\nerror[E0618]: expected function, found `f64`\n  --> /tmp/tmpepmszwiq.rs:22:28\n\
    \   |\n18 |     let mut f = 3.0 as f64;\n   |         ----- `f` has type `f64`\n\
    ...\n22 |         let mut x = f(g) + f(g + g);\n   |                         \
    \   ^-------\n   |                            |\n   |                        \
    \    call expression requires function\n\nerror[E0618]: expected function, found\
    \ `f64`\n  --> /tmp/tmpepmszwiq.rs:27:10\n   |\n18 |     let mut f = 3.0 as f64;\n\
    \   |         ----- `f` has type `f64`\n...\n27 |     vec![f(g) + f(g + g), f]\n\
    \   |          ^---\n   |          |\n   |          call expression requires function\n\
    \nerror[E0618]: expected function, found `f64`\n  --> /tmp/tmpepmszwiq.rs:27:17\n\
    \   |\n18 |     let mut f = 3.0 as f64;\n   |         ----- `f` has type `f64`\n\
    ...\n27 |     vec![f(g) + f(g + g), f]\n   |                 ^-------\n   |  \
    \               |\n   |                 call expression requires function\n\n\
    error: aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0618`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    assert!(n >=\
    \ 0);\n    let mut v = Vec::new();\n    let a = n - 1;\n    let b = 2 * n - 1;\n\
    \    let c = n + 1;\n    if n % 2 == 0 {\n        v.resize(3, 1);\n        v[0]\
    \ = a;\n        v[1] = b;\n        v[2] = c;\n    } else {\n        v.resize(2,\
    \ 1);\n        v[0] = a;\n        v[1] = c;\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpt0_fiztq.rs:37:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n\
    \        return vec![];\n    }\n    let mut res = vec![1, 1, 1];\n    let mut\
    \ last_tri = vec![3];\n    for i in 2..n+1 {\n        let num = last_tri[1] +\
    \ last_tri[2];\n        last_tri[0] = last_tri[1]; \n        last_tri[1] = last_tri[2];\n\
    \        last_tri[2] = num;\n        res.push(last_tri[0] as isize);\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 1 but the index\
    \ is 1', /tmp/tmp_s986hfm.rs:23:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut vec =\
    \ vec![3, 1];\n    \n    if n == 0 {\n        return vec;\n    }\n\n    \n   \
    \ if n % 2 == 0 {\n        for i in 1..n-1 {\n            vec.push(vec.last().unwrap()\
    \ + vec.last().unwrap() + vec.last().unwrap());\n        }\n    } else {\n   \
    \     for i in 1..n-1 {\n            vec.push(vec.last().unwrap() + vec.last().unwrap()\
    \ + vec.last().unwrap());\n        }\n    }\n    \n    return vec;\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp3mb5mao_.rs:39:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut res =\
    \ Vec::new();\n    res.push(3);\n    \n    for i in 2..(n as i64).ceil() {\n \
    \       if n % i == 0 {\n            res.push(i as isize);\n            res.push(n\
    \ / i as isize + i / i as isize);\n        }\n    }\n    \n    return res;\n}\n\
    \nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `ceil` found for type `i64` in the current\
    \ scope\n  --> /tmp/tmpot5595bv.rs:20:28\n   |\n20 |     for i in 2..(n as i64).ceil()\
    \ {\n   |                            ^^^^ help: there is an associated function\
    \ with a similar name: `div_ceil`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n\
    \        vec![1, 3]\n    } else if n % 2 == 0 {\n        tri(n-1) + tri(n-2)\n\
    \    } else {\n        tri(n-1) + tri(n-1) + tri(n-2)\n    }\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpyg34jl5m.rs:20:18\n\
    \   |\n20 |         tri(n-1) + tri(n-2)\n   |         -------- ^ -------- Vec<isize>\n\
    \   |         |\n   |         Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>`\
    \ to `Vec<isize>`\n  --> /tmp/tmpyg34jl5m.rs:22:18\n   |\n22 |         tri(n-1)\
    \ + tri(n-1) + tri(n-2)\n   |         -------- ^ -------- Vec<isize>\n   |   \
    \      |\n   |         Vec<isize>\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = vec![3, 1];\n    let mut limit = 0;\n    while limit < n {\n        limit\
    \ += 1;\n        result.push(limit + limit + limit);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 3, 6, 9]`,\n right: `[1, 3, 2, 8]`', /tmp/tmphsgo44d9.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut list:\
    \ Vec<isize> = Vec::new();\n    let mut sum = 0;\n    for i in 1..n+2 {\n    \
    \    if i % 2 == 0 {\n            sum += i / 2;\n        }\n        else {\n \
    \           sum += (i - 3) / 2;\n        }\n        list.push(sum);\n    }\n \
    \   list\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, 0, 0, 2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp9443qjx8.rs:33:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n < 2 {\n\
    \        return vec![];\n    }\n    let mut n2 = n;\n    let mut v1 = vec![1,\
    \ 1, 1];\n    let mut v2 = vec![0, 1, 1];\n    let mut v3 = vec![0, 1, 2];\n\n\
    \    while n2 >= 2 {\n        let v1 = v1;\n        let v2 = v2;\n        let\
    \ v3 = v3;\n\n        let mut v1 = v1 + v2.clone();\n        let mut v2 = v1 -\
    \ v3.clone();\n        let mut v3 = v2 - v1.clone();\n\n        v1.insert(0, 0);\n\
    \        v2.insert(0, 0);\n        v3.insert(0, 0);\n\n        n2 = n2 - 1;\n\
    \    }\n\n    let mut t = vec![0, 0, 0];\n    for &i in v1 {\n        t.insert(0,\
    \ i);\n    }\n    for &i in v2 {\n        t.insert(0, i);\n    }\n    for &i in\
    \ v3 {\n        t.insert(0, i);\n    }\n\n    t\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<{integer}>` to `Vec<{integer}>`\n  --> /tmp/tmps4_lsqhl.rs:30:25\n\
    \   |\n30 |         let mut v1 = v1 + v2.clone();\n   |                      --\
    \ ^ ---------- Vec<{integer}>\n   |                      |\n   |             \
    \         Vec<{integer}>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps4_lsqhl.rs:42:9\n\
    \   |\n42 |     for &i in v1 {\n   |         ^^    -- this expression has type\
    \ `Option<{integer}>`\n   |         |\n   |         expected integer, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `i`\n   |\n \
    \  = note:   expected type `{integer}`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmps4_lsqhl.rs:45:9\n   |\n45 |     for &i in v2\
    \ {\n   |         ^^    -- this expression has type `Option<{integer}>`\n   |\
    \         |\n   |         expected integer, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `{integer}`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmps4_lsqhl.rs:48:9\n   |\n48 |     for &i in v3 {\n   | \
    \        ^^    -- this expression has type `Option<{integer}>`\n   |         |\n\
    \   |         expected integer, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `i`\n   |\n   = note:   expected type `{integer}`\n\
    \           found reference `&_`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n <= 1 {\n\
    \        return vec![];\n    }\n\n    fn aux(n: usize, mut first: usize, mut second:\
    \ usize, mut third: usize) -> Vec<isize> {\n        if n <= 1 {\n            return\
    \ vec![first, second, third];\n        }\n\n        if n % 2 == 1 {\n        \
    \    first += second + third;\n            second = third;\n            third\
    \ = 1;\n        }\n\n        let new_first = third;\n        let new_second =\
    \ second + third;\n        let new_third = first + new_second;\n\n        aux(n\
    \ - 1, new_first, new_second, new_third)\n    }\n\n    aux(n - 1, 2, 1, 3)\n}\n\
    \nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwhsgcocz.rs:39:9\n   |\n\
    39 |     aux(n - 1, 2, 1, 3)\n   |         ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n39 |     aux((n - 1).try_into().unwrap(), 2, 1, 3)\n\
    \   |         +     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwhsgcocz.rs:23:25\n   |\n23 |             return vec![first, second,\
    \ third];\n   |                         ^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n23 |             return vec![first.try_into().unwrap(),\
    \ second, third];\n   |                              ++++++++++++++++++++\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    vec![\n     \
    \   n,\n        1 + n / 2,\n        1 + n / 2 + n / 4,\n        1 + n / 2 + n\
    \ / 4 + n / 8,\n        1 + n / 2 + n / 4 + n / 8 + n / 16,\n        1 + n / 2\
    \ + n / 4 + n / 8 + n / 16 + n / 32,\n        1 + n / 2 + n / 4 + n / 8 + n /\
    \ 16 + n / 32 + n / 64,\n    ]\n}\n\nfn main() {\n    let candidate = tri;\n \
    \   assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 2, 2, 2, 2, 2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpnu8hmyl3.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n < 3 { return\
    \ vec![] };\n    let mut first = vec![];\n    let mut second = vec![];\n    let\
    \ mut result = vec![];\n    let mut temp;\n    if n % 2 == 1 {\n        temp =\
    \ 1;\n    } else {\n        temp = 0;\n    }\n    first.append(temp);\n    result.append(first);\n\
    \    for i in 1..n / 2 {\n        second.append(second[n - 1] + second[n - 2]\
    \ + first[i]);\n        result.append(second);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfziy2dgn.rs:27:18\n   |\n\
    27 |     first.append(temp);\n   |                  ^^^^ expected `&mut Vec<_>`,\
    \ found integer\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n \
    \                          found type `{integer}`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfziy2dgn.rs:28:19\n   |\n28 |     result.append(first);\n\
    \   |                   ^^^^^\n   |                   |\n   |                \
    \   expected `&mut Vec<_>`, found struct `Vec`\n   |                   help: consider\
    \ mutably borrowing here: `&mut first`\n   |\n   = note: expected mutable reference\
    \ `&mut Vec<_>`\n                         found struct `Vec<_>`\n\nerror[E0277]:\
    \ the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpfziy2dgn.rs:30:23\n\
    \   |\n30 |         second.append(second[n - 1] + second[n - 2] + first[i]);\n\
    \   |                       ^^^^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpfziy2dgn.rs:30:39\n   |\n30 |         second.append(second[n -\
    \ 1] + second[n - 2] + first[i]);\n   |                                      \
    \ ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]:\
    \ the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpfziy2dgn.rs:30:55\n\
    \   |\n30 |         second.append(second[n - 1] + second[n - 2] + first[i]);\n\
    \   |                                                       ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `isize`\n   = help: t"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut x = vec![1i32;\
    \ n];\n    x.iter_mut().for_each(|x| *x = 3);\n    x.iter_mut().for_each(|x| *x\
    \ += *x + (*x - 1) / (*x + 1));\n    x\n}\n\nfn main() {\n    let candidate =\
    \ tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwic2dht6.rs:17:28\n   |\n\
    17 |     let mut x = vec![1i32; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     let mut x = vec![1i32;\
    \ n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwic2dht6.rs:20:5\n   |\n16 | fn\
    \ tri(n: isize) -> Vec<isize> {\n   |                     ---------- expected\
    \ `Vec<isize>` because of return type\n...\n20 |     x\n   |     ^ expected `isize`,\
    \ found `i32`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<i32>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    vec![1, 1, 2,\
    \ 3, 5, 8, 13, 21, 34]\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 2, 3, 5, 8, 13, 21, 34]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpufrekohi.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut vec =\
    \ vec![];\n    vec.push(3);\n    \n    if n % 2 == 0 {\n        vec.push((1 +\
    \ n) / 2);\n    } else {\n        let mut n1 = tri(n - 2);\n        let mut n2\
    \ = tri(n - 1);\n        \n        vec.push(1 + n1.pop() + n2.pop() + n1.pop());\n\
    \    }\n    \n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `Option<isize>` to `{integer}`\n  --> /tmp/tmpxo31y_3h.rs:26:20\n\
    \   |\n26 |         vec.push(1 + n1.pop() + n2.pop() + n1.pop());\n   |      \
    \              ^ no implementation for `{integer} + Option<isize>`\n   |\n   =\
    \ help: the trait `Add<Option<isize>>` is not implemented for `{integer}`\n  \
    \ = help: the following other types implement trait `Add<Rhs>`:\n            \
    \ <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 ||\
    \ n == 1 {\n        return vec![1, 1, 1]\n    }\n    let mut vec = [0, 0, 0];\n\
    \    vec[0] = 1 + n / 2; // tri(1) = 3\n    vec[1] = vec[0] + n; // tri(2) = 3\
    \ + 1 = 4\n    vec[2] = vec[1] + 1; // tri(3) = 1 + 4 = 5\n    return vec\n}\n\
    \nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvagn1efw.rs:24:12\n   |\n\
    16 | fn tri(n: isize) -> Vec<isize> {\n   |                     ---------- expected\
    \ `Vec<isize>` because of return type\n...\n24 |     return vec\n   |        \
    \    ^^^- help: try using a conversion method: `.to_vec()`\n   |            |\n\
    \   |            expected struct `Vec`, found array `[isize; 3]`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n               found array `[isize; 3]`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut res =\
    \ vec![0; n + 1];\n    if n & 1 == 0 {\n        res.push(3);\n    }\n    for i\
    \ in (1..n + 1).rev() {\n        let prev1 = res[i - 1];\n        let prev2 =\
    \ res[i - 2];\n        let next = prev1 + prev2;\n        if n % 2 == 0 {\n  \
    \          res.push(i);\n        } else {\n            res.push(next);\n     \
    \   }\n    }\n    res.into_iter().collect()\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkqfyg2d9.rs:17:27\n   |\n\
    17 |     let mut res = vec![0; n + 1];\n   |                           ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     let mut res = vec![0;\
    \ (n + 1).try_into().unwrap()];\n   |                           +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpkqfyg2d9.rs:22:21\n\
    \   |\n22 |         let prev1 = res[i - 1];\n   |                     ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpkqfyg2d9.rs:23:21\n\
    \   |\n23 |         let prev2 = res[i - 2];\n   |                     ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut v: Vec<isize>\
    \ = Vec::new();\n\n    if n % 2 == 0 {\n        let mut sum = 0;\n        for\
    \ _ in 0..n / 2 {\n            sum += 1;\n        }\n        v.append(sum);\n\
    \    } else {\n        for _ in 0..n / 2 {\n            v.append(tri(n - 1) +\
    \ tri(n - 2));\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate =\
    \ tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcemfd4ii.rs:24:18\n   |\n\
    24 |         v.append(sum);\n   |                  ^^^ expected `&mut Vec<isize>`,\
    \ found integer\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n\
    \                           found type `{integer}`\n\nerror[E0369]: cannot add\
    \ `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpcemfd4ii.rs:27:33\n   |\n27 |  \
    \           v.append(tri(n - 1) + tri(n - 2));\n   |                      ----------\
    \ ^ ---------- Vec<isize>\n   |                      |\n   |                 \
    \     Vec<isize>\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0369.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut fib =\
    \ [0, 1, 1];\n    for i in 2..n + 1 {\n        fib[2] += fib[1] as isize;\n  \
    \      fib[1] += fib[0] as isize;\n        fib[0] += fib[2] as isize;\n    }\n\
    \    fib\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnxoi4tkm.rs:23:5\n   |\n\
    16 | fn tri(n: isize) -> Vec<isize> {\n   |                     ---------- expected\
    \ `Vec<isize>` because of return type\n...\n23 |     fib\n   |     ^^^- help:\
    \ try using a conversion method: `.to_vec()`\n   |     |\n   |     expected struct\
    \ `Vec`, found array `[isize; 3]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \               found array `[isize; 3]`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut ret =\
    \ vec![];\n    if n == 0 {\n        ret.push(3);\n    } else {\n        ret.push(1);\n\
    \        for i in 2..=n-1 {\n            if i % 2 == 0 {\n                ret.push(i\
    \ + 1);\n            } else {\n                ret.push(1 + n / 2);\n        \
    \    }\n        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmph1gb9s4_.rs:35:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut ret:\
    \ Vec<isize> = Vec::new();\n    let mut n = if n % 2 == 0 {\n        n + 1\n \
    \   } else {\n        n\n    };\n    let mut a = 1;\n    let mut b = 1;\n    let\
    \ mut c = 1;\n    for i in 1..n {\n        let mut tmp = a;\n        a = b;\n\
    \        b = tmp + c + b;\n        c = a;\n        ret.push(i);\n    }\n    return\
    \ ret;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpeht4gzhw.rs:38:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut tri_vec:\
    \ Vec<isize> = vec![3, 1];\n\n    loop {\n        let tri_sum = tri_vec[0] + tri_vec[1];\n\
    \        tri_vec.push(tri_sum);\n        if tri_vec[0] % 2 == 0 {\n          \
    \  tri_vec.push(tri_vec[1] + tri_vec[2] - tri_vec[0]);\n        } else {\n   \
    \         tri_vec.push(tri_vec[1] - tri_vec[2] + tri_vec[0]);\n        }\n\n \
    \       if tri_vec.len() > n + 1 {\n            return tri_vec[..n + 1];\n   \
    \     }\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkrkmqfxa.rs:28:28\n   |\n\
    28 |         if tri_vec.len() > n + 1 {\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n28 |         if\
    \ tri_vec.len() > (n + 1).try_into().unwrap() {\n   |                        \
    \    +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `RangeTo<isize>`\n  --> /tmp/tmpkrkmqfxa.rs:29:20\n   |\n29 |   \
    \          return tri_vec[..n + 1];\n   |                    ^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `RangeTo<isize>`\n   = help:\
    \ the following other types implement trait `SliceIndex<T>`:\n             <RangeTo<usize>\
    \ as SliceIndex<[T]>>\n             <RangeTo<usize> as SliceIndex<str>>\n   =\
    \ note: required because of the requirements on the impl of `Index<RangeTo<isize>>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    assert!(n > 0,\
    \ \"Input number must be positive\");\n    let mut list = vec![1, 1, 1];\n   \
    \ for _ in 1..n {\n        let tmp = list[0];\n        list[1] = list[2] + (list[0]\
    \ + list[1]);\n        list[2] = tmp;\n        list.push(list[1]);\n    }\n  \
    \  return list\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 5, 1, 3, 5]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp96s45jga.rs:30:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut a = vec![3];\n\
    \    let mut b = vec![3];\n    for i in 0..n {\n        a.push(3);\n        b.push(3);\n\
    \    }\n    for i in 0..n {\n        let mut temp = vec![3];\n        temp.push(1\
    \ + i / 2);\n        temp.push(tri(n - 1) - tri(n - 2));\n        temp.push(tri(n\
    \ + 1) - tri(n + 2));\n        a.push(temp);\n    }\n    b.extend(a);\n    b\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `Vec<isize>` from `Vec<isize>`\n  --> /tmp/tmphbnuhng4.rs:26:30\n\
    \   |\n26 |         temp.push(tri(n - 1) - tri(n - 2));\n   |                \
    \   ---------- ^ ---------- Vec<isize>\n   |                   |\n   |       \
    \            Vec<isize>\n\nerror[E0369]: cannot subtract `Vec<isize>` from `Vec<isize>`\n\
    \  --> /tmp/tmphbnuhng4.rs:27:30\n   |\n27 |         temp.push(tri(n + 1) - tri(n\
    \ + 2));\n   |                   ---------- ^ ---------- Vec<isize>\n   |    \
    \               |\n   |                   Vec<isize>\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphbnuhng4.rs:28:16\n   |\n28 |         a.push(temp);\n \
    \  |                ^^^^ expected integer, found struct `Vec`\n   |\n   = note:\
    \ expected type `{integer}`\n            found struct `Vec<isize>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n < 0 {\n\
    \        return vec![];\n    }\n\n    let mut result = vec![1, 1, 1];\n\n    for\
    \ i in 2..=n {\n        result.append(result[i-2] + result[i-1]);\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp7_sh_8gg.rs:24:23\n   |\n24 |         result.append(result[i-2] + result[i-1]);\n\
    \   |                       ^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp7_sh_8gg.rs:24:37\n   |\n24 |         result.append(result[i-2]\
    \ + result[i-1]);\n   |                                     ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n <= 1 {\n\
    \        return vec![];\n    }\n    let mut tri_vec: Vec<isize> = vec![];\n  \
    \  let tri_vec1 = vec![3, 1];\n    let tri_vec2 = vec![1 + n / 2, n / 2];\n  \
    \  let tri_vec3 = vec![tri_vec1[..], tri_vec2[..]];\n    for tri_vec in tri_vec3\
    \ {\n        tri_vec.push(tri_vec[0] as isize);\n    }\n    return tri_vec;\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[{integer}]` cannot be known\
    \ at compilation time\n   --> /tmp/tmpar447hhr.rs:23:20\n    |\n23  |     let\
    \ tri_vec3 = vec![tri_vec1[..], tri_vec2[..]];\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized`\
    \ is not implemented for `[{integer}]`\nnote: required by a bound in `slice::<impl\
    \ [T]>::into_vec`\n    = note: this error originates in the macro `vec` (in Nightly\
    \ builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the size\
    \ for values of type `[{integer}]` cannot be known at compilation time\n  -->\
    \ /tmp/tmpar447hhr.rs:23:20\n   |\n23 |     let tri_vec3 = vec![tri_vec1[..],\
    \ tri_vec2[..]];\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't\
    \ have a size known at compile-time\n   |\n   = help: the trait `Sized` is not\
    \ implemented for `[{integer}]`\n   = note: slice and array elements must have\
    \ `Sized` type\n   = note: this error originates in the macro `vec` (in Nightly\
    \ builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the size\
    \ for values of type `[isize]` cannot be known at compilation time\n   --> /tmp/tmpar447hhr.rs:23:20\n\
    \    |\n23  |     let tri_vec3 = vec![tri_vec1[..], tri_vec2[..]];\n    |    \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at\
    \ compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[isize]`\n\
    note: required by a bound in `Vec`\n    = note: this error originates in the macro\
    \ `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]:\
    \ the trait bound `Vec<[isize]>: IntoIterator` is not satisfied\n  --> /tmp/tmpar447hhr.rs:24:20\n\
    \   |\n24 |     for tri_vec in tri_vec3 {\n   |                    ^^^^^^^^ the\
    \ trait `IntoIterator` is not implemented for `Vec<[isize]>`\n   |\n   = help:\
    \ the following other types implement trait `IntoIterator`:\n             &'a\
    \ Vec<T, A>\n             &'a mut Vec<T, A>\n             Vec<T, A>\n\nerror[E0277]:\
    \ the size for values of type `[isize]` cannot be known at"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result:\
    \ Vec<isize> = vec![];\n    result.append(3);\n    for _ in 0..n {\n        result.push((*result).pop()\
    \ + 3);\n    }\n    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3m0dh_yz.rs:18:19\n   |\n\
    18 |     result.append(3);\n   |                   ^ expected `&mut Vec<isize>`,\
    \ found integer\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n\
    \                           found type `{integer}`\n\nerror[E0599]: no method\
    \ named `pop` found for slice `[isize]` in the current scope\n  --> /tmp/tmp3m0dh_yz.rs:20:31\n\
    \   |\n20 |         result.push((*result).pop() + 3);\n   |                  \
    \             ^^^ method not found in `[isize]`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    result.reserve(1 + n.checked_div(2).unwrap());\n    result.push(3);\n\
    \    while result.len() < n + 1 {\n        let n1 = result.pop().unwrap();\n \
    \       let n2 = result.pop().unwrap();\n        let n3 = result.pop().unwrap();\n\
    \        result.push(n1 + n2 + n3);\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1hgbw7n_.rs:18:20\n   |\n\
    18 |     result.reserve(1 + n.checked_div(2).unwrap());\n   |                \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     result.reserve((1 + n.checked_div(2).unwrap()).try_into().unwrap());\n\
    \   |                    +                             +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1hgbw7n_.rs:20:26\n   |\n20 |\
    \     while result.len() < n + 1 {\n   |                          ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n20 |     while result.len()\
    \ < (n + 1).try_into().unwrap() {\n   |                          +     +++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut tri =\
    \ [0usize; (1 + n) / 2]; \n    if n % 2 == 0 { \n        tri[0] = 1usize;\n  \
    \  }\n    for i in 2..(n + 1) { \n        tri[i] = tri[i - 1] + tri[i - 2] + tri[i\
    \ - 3];\n    }\n    tri\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp01q_g6vt.rs:17:33\n   |\n16 | fn tri(n: isize) -> Vec<isize> {\n   |\
    \        - this would need to be a `const`\n17 |     let mut tri = [0usize; (1\
    \ + n) / 2]; \n   |                                 ^\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0435`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut vec:\
    \ Vec<isize> = vec![0; n + 1];\n    vec[0] = 1;\n    vec[1] = 1;\n    for i in\
    \ 2..n + 1 {\n        vec[i] = vec[i - 2] + vec[i - 1];\n    }\n    vec\n}\n\n\
    fn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzsbdja0j.rs:17:39\n   |\n\
    17 |     let mut vec: Vec<isize> = vec![0; n + 1];\n   |                     \
    \                  ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n17 |     let mut vec: Vec<isize> = vec![0; (n + 1).try_into().unwrap()];\n\
    \   |                                       +     +++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzsbdja0j.rs:21:9\n\
    \   |\n21 |         vec[i] = vec[i - 2] + vec[i - 1];\n   |         ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpzsbdja0j.rs:21:18\n   |\n21 |  \
    \       vec[i] = vec[i - 2] + vec[i - 1];\n   |                  ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpzsbdja0j.rs:21:31\n   |\n21 |  \
    \       vec[i] = vec[i - 2] + vec[i - 1];\n   |                              \
    \ ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n  \
    \ = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   =\
    \ help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut vec:\
    \ Vec<isize> = Vec::new();\n    if n % 2 == 0 {\n        for i in 0..n / 2 {\n\
    \            vec.push(3 * i + 1);\n        }\n    } else {\n        for i in 0..n\
    \ / 2 {\n            vec.push(1 + i / 2);\n        }\n    }\n    vec\n}\n\nfn\
    \ main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpzfwhnt18.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut list:\
    \ Vec<isize> = vec![0; n + 1];\n\n    list[0] = list[1] = 3;\n    for i in 1..n+1\
    \ {\n        list[*i..=*(i+1)] = tri[*i..=*(i+1)-1] + tri[*i..=*(i+1)+1];\n  \
    \  }\n\n    list\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd1a83d0q.rs:17:40\n   |\n\
    17 |     let mut list: Vec<isize> = vec![0; n + 1];\n   |                    \
    \                    ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n17 |     let mut list: Vec<isize> = vec![0; (n + 1).try_into().unwrap()];\n\
    \   |                                        +     +++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd1a83d0q.rs:19:15\n   |\n19 |     list[0] =\
    \ list[1] = 3;\n   |     -------   ^^^^^^^^^^^ expected `isize`, found `()`\n\
    \   |     |\n   |     expected due to the type of this binding\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpd1a83d0q.rs:21:14\n   |\n\
    21 |         list[*i..=*(i+1)] = tri[*i..=*(i+1)-1] + tri[*i..=*(i+1)+1];\n  \
    \ |              ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n  -->\
    \ /tmp/tmpd1a83d0q.rs:21:19\n   |\n21 |         list[*i..=*(i+1)] = tri[*i..=*(i+1)-1]\
    \ + tri[*i..=*(i+1)+1];\n   |                   ^^^^^^\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmpd1a83d0q.rs:21:33\n   |\n21 |        \
    \ list[*i..=*(i+1)] = tri[*i..=*(i+1)-1] + tri[*i..=*(i+1)+1];\n   |         \
    \                        ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpd1a83d0q.rs:21:38\n   |\n21 |         list[*i..=*(i+1)] = tri[*i..=*(i+1)-1]\
    \ + tri[*i..=*(i+1)+1];\n   |                                      ^^^^^^\n\n\
    error[E0608]: cannot index into a value of type `fn(isize) -> Vec<isize> {tri}`\n\
    \  --> /tmp/tmpd1a83d0q.rs:21:29\n   |\n21 |         list[*i..=*(i+1)] = tri[*i..=*(i+1)-1]\
    \ + tri[*i..=*(i+1)+1];\n   |                             ^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpd1a83d0q.rs:21:54\n\
    \   |\n21 |         list[*i..=*(i+1)] = tri[*i..=*(i+1)-1] + tri[*i..=*(i+1)+1];\n\
    \   |                                                      ^^\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpd1a83d0q.rs:21:59\n   |\n\
    21 |         list[*i..=*(i+1)] = t"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = vec![1usize; n + 1];\n    result[0] = 1 + n / 2;\n    if n % 2 == 0 {\n  \
    \      result[1] = result[0] + result[1];\n    }\n    for i in 2..n {\n      \
    \  result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpol6859qm.rs:17:35\n   |\n\
    17 |     let mut result = vec![1usize; n + 1];\n   |                         \
    \          ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    17 |     let mut result = vec![1usize; (n + 1).try_into().unwrap()];\n   |   \
    \                                +     +++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpol6859qm.rs:18:17\n   |\n18 |     result[0]\
    \ = 1 + n / 2;\n   |     ---------   ^^^^^^^^^ expected `usize`, found `isize`\n\
    \   |     |\n   |     expected due to the type of this binding\n\nerror[E0277]:\
    \ the type `[usize]` cannot be indexed by `isize`\n  --> /tmp/tmpol6859qm.rs:23:9\n\
    \   |\n23 |         result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n\
    \   |         ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[usize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<usize>`\n\
    \nerror[E0277]: the type `[usize]` cannot be indexed by `isize`\n  --> /tmp/tmpol6859qm.rs:23:21\n\
    \   |\n23 |         result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n\
    \   |                     ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[usize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<usize>`\n\nerror[E0277]: the type `[usize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpol6859qm.rs:23:37\n   |\n23 |         result[i] = result[i - 1]\
    \ + result[i - 2] + result[i + 1];\n   |                                     ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[usize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>`"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result:\
    \ Vec<isize> = vec![];\n    if n == 1 {\n        result.append(1);\n        result.extend(vec![2,\
    \ 3]);\n    } else {\n        result.append(1);\n        result.extend(tri(n-1).iter().cloned().collect::<Vec<_>>());\n\
    \        result.push(1);\n        result.extend(tri(n-2).iter().cloned().collect::<Vec<_>>());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb2abm_g3.rs:19:23\n   |\n\
    19 |         result.append(1);\n   |                       ^ expected `&mut Vec<isize>`,\
    \ found integer\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n\
    \                           found type `{integer}`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb2abm_g3.rs:22:23\n   |\n22 |         result.append(1);\n\
    \   |                       ^ expected `&mut Vec<isize>`, found integer\n   |\n\
    \   = note: expected mutable reference `&mut Vec<isize>`\n                   \
    \        found type `{integer}`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n <= 1 {\n\
    \        return vec![1, 1, 1];\n    }\n    let mut ans = vec![1, 1, 1];\n    for\
    \ i in 2..n {\n        ans = ans + vec![i];\n    }\n    return ans;\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<{integer}>`\n  --> /tmp/tmp6ojexrvr.rs:22:19\n\
    \   |\n22 |         ans = ans + vec![i];\n   |               --- ^ ------- Vec<isize>\n\
    \   |               |\n   |               Vec<{integer}>\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    use std::cmp::Ordering;\n\
    \n    let mut tri = [0; 2 + 1 + 1];\n\n    for &n in tri {\n        n *= 2;\n\
    \        match n {\n            2 => tri[2] += 1,\n            _ => tri[2] +=\
    \ n + 1,\n        }\n    }\n    tri.iter().take(n + (1)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmp867q_jdj.rs:17:9\n\
    \   |\n17 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp867q_jdj.rs:21:9\n   |\n21 |     for &n in tri {\n   |\
    \         ^^    --- this expression has type `Option<{integer}>`\n   |       \
    \  |\n   |         expected integer, found reference\n   |         help: you can\
    \ probably remove the explicit borrow: `n`\n   |\n   = note:   expected type `{integer}`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp867q_jdj.rs:28:21\n\
    \   |\n28 |     tri.iter().take(n + (1)).collect()\n   |                     ^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n28 |     tri.iter().take((n\
    \ + (1)).try_into().unwrap()).collect()\n   |                     +       +++++++++++++++++++++\n\
    \nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&{integer}`\n    --> /tmp/tmp867q_jdj.rs:28:30\n    \
    \ |\n28   |     tri.iter().take(n + (1)).collect()\n     |                   \
    \           ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&{integer}>`\n\
    \     |\n     = help: the trait `FromIterator<&{integer}>` is not implemented\
    \ for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for\
    \ `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due to 3\
    \ previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n==0 {\n \
    \       return vec![];\n    }\n    if n==1 {\n        return vec![1];\n    }\n\
    \    if n==2 {\n        return vec![1, 1];\n    }\n    \n    tri(n-1) + tri(n-2)\
    \ + tri(n+1).collect::<Vec<isize>>()\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpywom5pgm.rs:27:14\n\
    \   |\n27 |     tri(n-1) + tri(n-2) + tri(n+1).collect::<Vec<isize>>()\n   | \
    \    -------- ^ -------- Vec<isize>\n   |     |\n   |     Vec<isize>\n\nerror[E0599]:\
    \ `Vec<isize>` is not an iterator\n   --> /tmp/tmpywom5pgm.rs:27:36\n    |\n27\
    \  |       tri(n-1) + tri(n-2) + tri(n+1).collect::<Vec<isize>>()\n    |     \
    \                                 ^^^^^^^ `Vec<isize>` is not an iterator\n  \
    \  |\n    = note: the following trait bounds were not satisfied:\n           \
    \ `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n\
    \            `[isize]: Iterator`\n            which is required by `&mut [isize]:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0369, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 { vec![0]\
    \ }\n    else {\n        let mut result: Vec<isize> = vec![1];\n        if n %\
    \ 2 == 0 {\n            result.append(tri(n - 1));\n            result.append(tri(n\
    \ - 1) + tri(n - 2));\n        } else {\n            result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1));\n        }\n        result\n    }\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1_nf1wlz.rs:21:27\n   |\n\
    21 |             result.append(tri(n - 1));\n   |                           ^^^^^^^^^^\n\
    \   |                           |\n   |                           expected `&mut\
    \ Vec<isize>`, found struct `Vec`\n   |                           help: consider\
    \ mutably borrowing here: `&mut tri(n - 1)`\n   |\n   = note: expected mutable\
    \ reference `&mut Vec<isize>`\n                         found struct `Vec<isize>`\n\
    \nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp1_nf1wlz.rs:22:38\n\
    \   |\n22 |             result.append(tri(n - 1) + tri(n - 2));\n   |        \
    \                   ---------- ^ ---------- Vec<isize>\n   |                 \
    \          |\n   |                           Vec<isize>\n\nerror[E0369]: cannot\
    \ add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp1_nf1wlz.rs:24:38\n   |\n24\
    \ |             result.append(tri(n - 1) + tri(n - 2) + tri(n + 1));\n   |   \
    \                        ---------- ^ ---------- Vec<isize>\n   |            \
    \               |\n   |                           Vec<isize>\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n % 2 == 0\
    \ {\n        vec![tri(n / 2).unwrap(), tri(n / 2 + 1).unwrap() + 1]\n    } else\
    \ {\n        vec![tri(n / 2).unwrap(), tri(n / 2 + 1).unwrap(), tri(n / 2 + 2).unwrap()]\n\
    \    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for struct `Vec<isize>` in\
    \ the current scope\n  --> /tmp/tmp0pqw3jv0.rs:18:25\n   |\n18 |         vec![tri(n\
    \ / 2).unwrap(), tri(n / 2 + 1).unwrap() + 1]\n   |                         ^^^^^^\
    \ help: there is an associated function with a similar name: `swap`\n\nerror[E0599]:\
    \ no method named `unwrap` found for struct `Vec<isize>` in the current scope\n\
    \  --> /tmp/tmp0pqw3jv0.rs:18:50\n   |\n18 |         vec![tri(n / 2).unwrap(),\
    \ tri(n / 2 + 1).unwrap() + 1]\n   |                                         \
    \         ^^^^^^ help: there is an associated function with a similar name: `swap`\n\
    \nerror[E0599]: no method named `unwrap` found for struct `Vec<isize>` in the\
    \ current scope\n  --> /tmp/tmp0pqw3jv0.rs:20:25\n   |\n20 |         vec![tri(n\
    \ / 2).unwrap(), tri(n / 2 + 1).unwrap(), tri(n / 2 + 2).unwrap()]\n   |     \
    \                    ^^^^^^ help: there is an associated function with a similar\
    \ name: `swap`\n\nerror[E0599]: no method named `unwrap` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmp0pqw3jv0.rs:20:50\n   |\n20 |         vec![tri(n\
    \ / 2).unwrap(), tri(n / 2 + 1).unwrap(), tri(n / 2 + 2).unwrap()]\n   |     \
    \                                             ^^^^^^ help: there is an associated\
    \ function with a similar name: `swap`\n\nerror[E0599]: no method named `unwrap`\
    \ found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp0pqw3jv0.rs:20:75\n\
    \   |\n20 |         vec![tri(n / 2).unwrap(), tri(n / 2 + 1).unwrap(), tri(n /\
    \ 2 + 2).unwrap()]\n   |                                                     \
    \                      ^^^^^^ help: there is an associated function with a similar\
    \ name: `swap`\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    use std::cmp::Ordering;\n\
    \n    let mut vec: Vec<isize> = Vec::new();\n    vec[0] = tri_n(3, 1);\n    for\
    \ &x in vec {\n        if x % 2 == 0 {\n            vec[0] = x + vec[0];\n   \
    \     } else {\n            vec[0] = tri_n(x + vec[0], 1 + x);\n        }\n  \
    \  }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `tri_n` in this scope\n  --> /tmp/tmpexldfs5p.rs:20:14\n\
    \   |\n20 |     vec[0] = tri_n(3, 1);\n   |              ^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `tri_n` in this scope\n  --> /tmp/tmpexldfs5p.rs:25:22\n\
    \   |\n25 |             vec[0] = tri_n(x + vec[0], 1 + x);\n   |             \
    \         ^^^^^ not found in this scope\n\nwarning: unused import: `std::cmp::Ordering`\n\
    \  --> /tmp/tmpexldfs5p.rs:17:9\n   |\n17 |     use std::cmp::Ordering;\n   |\
    \         ^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]` on by\
    \ default\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpexldfs5p.rs:21:9\n\
    \   |\n21 |     for &x in vec {\n   |         ^^    --- this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `x`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    fn recur(n: isize,\
    \ mut first: isize, mut second: isize) -> isize {\n        if n < 0 {\n      \
    \      return 0;\n        }\n        let result = tri(n-2)\n            + tri(n-1)\n\
    \            + second\n            + first;\n        first = second;\n       \
    \ second = result;\n        return result;\n    }\n    \n    let mut first = 0;\n\
    \    let mut second = 1;\n    let mut vec = vec![first, second, ];\n    for i\
    \ in 1..n+1 {\n        let _ = recur(i, &mut first, &mut second);\n    }\n   \
    \ vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbs0usjwu.rs:34:26\n   |\n\
    34 |         let _ = recur(i, &mut first, &mut second);\n   |                \
    \          ^^^^^^^^^^ expected `isize`, found `&mut {integer}`\n   |\nhelp: consider\
    \ removing the borrow\n   |\n34 -         let _ = recur(i, &mut first, &mut second);\n\
    34 +         let _ = recur(i, first, &mut second);\n   | \n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbs0usjwu.rs:34:38\n   |\n34 |         let _ = recur(i,\
    \ &mut first, &mut second);\n   |                                      ^^^^^^^^^^^\
    \ expected `isize`, found `&mut {integer}`\n   |\nhelp: consider removing the\
    \ borrow\n   |\n34 -         let _ = recur(i, &mut first, &mut second);\n34 +\
    \         let _ = recur(i, &mut first, second);\n   | \n\nerror[E0369]: cannot\
    \ add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpbs0usjwu.rs:22:13\n   |\n21\
    \ |         let result = tri(n-2)\n   |                      -------- Vec<isize>\n\
    22 |             + tri(n-1)\n   |             ^ -------- Vec<isize>\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    assert!(n>0);\n\
    \    let mut nums = [1,2,3];\n    if n%2==0 {\n        nums.push(nums.last().unwrap()\
    \ + nums.last().unwrap_or(1));\n    }\n    if n%3==0 {\n        nums.push(nums.last().unwrap()\
    \ + nums.last().unwrap_or(1) + nums.last().unwrap_or(2));\n    }\n    nums\n}\n\
    \nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for array `[{integer}; 3]` in\
    \ the current scope\n  --> /tmp/tmph_kolvoq.rs:20:14\n   |\n20 |         nums.push(nums.last().unwrap()\
    \ + nums.last().unwrap_or(1));\n   |              ^^^^ method not found in `[{integer};\
    \ 3]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph_kolvoq.rs:20:64\n   |\n\
    20 |         nums.push(nums.last().unwrap() + nums.last().unwrap_or(1));\n   |\
    \                                                                ^\n   |     \
    \                                                           |\n   |          \
    \                                                      expected `&{integer}`,\
    \ found integer\n   |                                                        \
    \        help: consider borrowing here: `&1`\n\nerror[E0599]: no method named\
    \ `push` found for array `[{integer}; 3]` in the current scope\n  --> /tmp/tmph_kolvoq.rs:23:14\n\
    \   |\n23 |         nums.push(nums.last().unwrap() + nums.last().unwrap_or(1)\
    \ + nums.last().unwrap_or(2));\n   |              ^^^^ method not found in `[{integer};\
    \ 3]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph_kolvoq.rs:23:64\n   |\n\
    23 |         nums.push(nums.last().unwrap() + nums.last().unwrap_or(1) + nums.last().unwrap_or(2));\n\
    \   |                                                                ^\n   | \
    \                                                               |\n   |      \
    \                                                          expected `&{integer}`,\
    \ found integer\n   |                                                        \
    \        help: consider borrowing here: `&1`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmph_kolvoq.rs:23:91\n   |\n23 |         nums.push(nums.last().unwrap()\
    \ + nums.last().unwrap_or(1) + nums.last().unwrap_or(2));\n   |              \
    \                                                                            \
    \ ^\n   |                                                                    \
    \                       |\n   |                                              \
    \                                             expected `&{integer}`, found in"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    assert!(n > 0);\n\
    \    if n == 1 {\n        return vec![1, 2, 3];\n    }\n    if n == 2 {\n    \
    \    return vec![1, 2, 3, 4];\n    }\n    let mut r = vec![];\n    for i in 1..(n\
    \ - 1).clone() {\n        let a = &[1, 1, 1];\n        let b = &[1, 2, 1];\n \
    \       let c = &[1, 1, 2];\n        r.push(a + b + c).sum();\n    }\n    r\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `&[{integer}; 3]` to `&[{integer}; 3]`\n  -->\
    \ /tmp/tmpov1_avjs.rs:29:18\n   |\n29 |         r.push(a + b + c).sum();\n   |\
    \                - ^ - &[{integer}; 3]\n   |                |\n   |          \
    \      &[{integer}; 3]\n\nerror[E0599]: `()` is not an iterator\n  --> /tmp/tmpov1_avjs.rs:29:27\n\
    \   |\n29 |         r.push(a + b + c).sum();\n   |                           ^^^\
    \ `()` is not an iterator\n   |\n   = note: the following trait bounds were not\
    \ satisfied:\n           `(): Iterator`\n           which is required by `&mut\
    \ (): Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0369, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut seq:\
    \ Vec<isize> = vec![0; n + 1];\n    seq[0] = 3;\n    for _ in 1..n + 1 {\n   \
    \     seq.push(seq[seq.len() - 1] + seq[seq.len() - 2] + seq[seq.len() + 1]);\n\
    \    }\n    seq\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4_f48t_v.rs:17:39\n   |\n\
    17 |     let mut seq: Vec<isize> = vec![0; n + 1];\n   |                     \
    \                  ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n17 |     let mut seq: Vec<isize> = vec![0; (n + 1).try_into().unwrap()];\n\
    \   |                                       +     +++++++++++++++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut a = 0;\n\
    \    let mut b = 0;\n    let mut c = 0;\n    if n % 2 == 1 {\n        a = 3 +\
    \ n / 2;\n    } else {\n        a = tri(n - 1) + tri(n - 2) + tri(n + 1);\n  \
    \  }\n    (b, c) =  (b + a).cloned()\n        .filter(|&x| x > 0)\n        .split_last()\n\
    \        .collect();\n    c\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpx7xkvgxb.rs:23:24\n\
    \   |\n23 |         a = tri(n - 1) + tri(n - 2) + tri(n + 1);\n   |          \
    \   ---------- ^ ---------- Vec<isize>\n   |             |\n   |             Vec<isize>\n\
    \nerror[E0599]: `isize` is not an iterator\n  --> /tmp/tmpx7xkvgxb.rs:25:23\n\
    \   |\n25 |     (b, c) =  (b + a).cloned()\n   |                       ^^^^^^\
    \ `isize` is not an iterator\n   |\n   = note: the following trait bounds were\
    \ not satisfied:\n           `isize: Iterator`\n           which is required by\
    \ `&mut isize: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx7xkvgxb.rs:29:5\n\
    \   |\n16 | fn tri(n: isize) -> Vec<isize> {\n   |                     ----------\
    \ expected `Vec<isize>` because of return type\n...\n29 |     c\n   |     ^ expected\
    \ struct `Vec`, found integer\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `{integer}`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n < 3 {\n\
    \        return vec![];\n    }\n\n    let mut nth_n = vec![vec![], vec![], vec![]];\n\
    \    for _ in 0..n {\n        let new_tri_n = vec![\n            1 + nth_n[0].iter().map(|&n|\
    \ n / 2).sum(),\n            1 + nth_n[1].iter().map(|&n| n / 2).sum(),\n    \
    \        1 + nth_n[2].iter().map(|&n| n / 2).sum(),\n        ];\n        nth_n\
    \ = [new_tri_n[0], new_tri_n[1], new_tri_n[2]];\n    }\n    return nth_n\n   \
    \     .iter()\n        .take(n as usize)\n        .collect();\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi7329up5.rs:28:17\n   |\n\
    21 |     let mut nth_n = vec![vec![], vec![], vec![]];\n   |                 \
    \    ---------------------------- expected due to this value\n...\n28 |      \
    \   nth_n = [new_tri_n[0], new_tri_n[1], new_tri_n[2]];\n   |                \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_vec()`\n   |                 |\n   |                 expected struct `Vec`,\
    \ found array of 3 elements\n   |\n   = note: expected struct `Vec<Vec<_>>`\n\
    \               found array `[_; 3]`\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&Vec<_>`\n    --> /tmp/tmpi7329up5.rs:33:10\n\
    \     |\n33   |         .collect();\n     |          ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&Vec<_>>`\n     |\n     = help:\
    \ the trait `FromIterator<&Vec<_>>` is not implemented for `Vec<isize>`\n    \
    \ = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    if n % 2 == 0 {\n        result.append(3);\n        result.append(1);\n\
    \    } else {\n        result.push(3);\n        result.push((1 + n) / 2);\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0r02x5br.rs:19:23\n   |\n\
    19 |         result.append(3);\n   |                       ^ expected `&mut Vec<_>`,\
    \ found integer\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n \
    \                          found type `{integer}`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0r02x5br.rs:20:23\n   |\n20 |         result.append(1);\n\
    \   |                       ^ expected `&mut Vec<_>`, found integer\n   |\n  \
    \ = note: expected mutable reference `&mut Vec<_>`\n                         \
    \  found type `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut list\
    \ = vec![1,3,2];\n    for i in 2..n+1 {\n        list.append(list.last() + list.pop()\
    \ + list.first());\n    }\n    list\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Option<{integer}>` to `Option<&{integer}>`\n\
    \  --> /tmp/tmpmw4kiu4c.rs:19:33\n   |\n19 |         list.append(list.last() +\
    \ list.pop() + list.first());\n   |                     ----------- ^ ----------\
    \ Option<{integer}>\n   |                     |\n   |                     Option<&{integer}>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n % 2 == 0\
    \ {\n        // even\n        vec![1, 1, n].iter().take(n + 1).collect()\n   \
    \ } else {\n        // odd\n        vec![tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ tri(n - 1) + tri(n - 2), tri(n - 1)].iter().take(n + 1).collect()\n    }\n}\n\
    \nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiofk1a2p.rs:19:35\n   |\n\
    19 |         vec![1, 1, n].iter().take(n + 1).collect()\n   |                \
    \                   ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n19 |         vec![1, 1, n].iter().take((n + 1).try_into().unwrap()).collect()\n\
    \   |                                   +     +++++++++++++++++++++\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmpiofk1a2p.rs:19:42\n     |\n19   |        \
    \ vec![1, 1, n].iter().take(n + 1).collect()\n     |                         \
    \                 ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror[E0369]: cannot add `Vec<isize>`\
    \ to `Vec<isize>`\n  --> /tmp/tmpiofk1a2p.rs:22:25\n   |\n22 |         vec![tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2), tri(n - 1)].iter().take(n\
    \ + 1).collect()\n   |              ---------- ^ ---------- Vec<isize>\n   | \
    \             |\n   |              Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>`\
    \ to `Vec<isize>`\n  --> /tmp/tmpiofk1a2p.rs:22:63\n   |\n22 |         vec![tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2), tri(n - 1)].iter().take(n\
    \ + 1).collect()\n   |                                                    ----------\
    \ ^ ---------- Vec<isize>\n   |                                              \
    \      |\n   |                                                    Vec<isize>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpiofk1a2p.rs:22:101\n   |\n22 |\
    \         vec![tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2),\
    \ tri(n - 1)].iter().take(n + 1).collect()\n   |                             \
    \                                                                        ^^^^^\
    \ expected "
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = Vec::with_capacity(n + (n / 2) + 1);\n    if n % 2 == 0 {\n        result.push(1);\n\
    \        for _ in 1..n / 2 {\n            result.push(result.last().unwrap() +\
    \ 2);\n        }\n    } else {\n        result.push(1);\n        for _ in 1..n\
    \ / 2 {\n            result.push(result.last().unwrap() + 1);\n        }\n   \
    \     result.push(0);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9a86acu3.rs:17:41\n   |\n\
    17 |     let mut result = Vec::with_capacity(n + (n / 2) + 1);\n   |         \
    \                                ^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n17 |     let mut result = Vec::with_capacity((n + (n\
    \ / 2) + 1).try_into().unwrap());\n   |                                      \
    \   +               +++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut tri =\
    \ [0; n + 1];\n    tri[0] = 1;\n    tri[1] = 3;\n    for i = 2..=n {\n       \
    \ tri[i] = tri[i - 1] + tri[i - 2];\n    }\n    return tri\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error: missing `in` in `for` loop\n  --> /tmp/tmpf4w0125p.rs:20:10\n  \
    \ |\n20 |     for i = 2..=n {\n   |          ^ help: try adding `in` here\n\n\
    error: expected expression, found `=`\n  --> /tmp/tmpf4w0125p.rs:20:11\n   |\n\
    20 |     for i = 2..=n {\n   |           ^ expected expression\n\nerror[E0435]:\
    \ attempt to use a non-constant value in a constant\n  --> /tmp/tmpf4w0125p.rs:17:23\n\
    \   |\n16 | fn tri(n: isize) -> Vec<isize> {\n   |        - this would need to\
    \ be a `const`\n17 |     let mut tri = [0; n + 1];\n   |                     \
    \  ^\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0435`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n\n    if n == 3 { result.push(3); }\n    if n <= 1 { result.push(n);\
    \ }\n    if n & 1 == 0 {\n        result.push(1 + n / 2);\n    }\n    else {\n\
    \        let temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result.push(temp);\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpqlja8le2.rs:25:31\n\
    \   |\n25 |         let temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n   |   \
    \                 ---------- ^ ---------- Vec<isize>\n   |                   \
    \ |\n   |                    Vec<isize>\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut a: Vec<isize>\
    \ = vec![];\n    for i in 1..n + 1 {\n        if i % 2 == 0 {\n            let\
    \ n = i-1;\n            let m = n-i;\n            let a = ((i-1)*i).saturating_add(m).saturating_add(n);\n\
    \            a.push(n - a + i);\n        } else {\n            a.push(i);\n  \
    \      }\n    }\n    a\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp1aeeqnz0.rs:23:15\n   |\n23 |             a.push(n - a\
    \ + i);\n   |               ^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut ret =\
    \ vec![1, 1, 1];\n    for i in 2..n + 1 {\n        if i % 2 == 0 {\n         \
    \   ret[i - 1] = ret[i - 1] + ret[i - 2] + ret[i - 1];\n        } else {\n   \
    \         ret[i - 1] = ret[i - 1] + ret[i - 2];\n        }\n    }\n    ret\n}\n\
    \nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp1ilu23ej.rs:20:13\n   |\n20 |             ret[i - 1] = ret[i - 1] +\
    \ ret[i - 2] + ret[i - 1];\n   |             ^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp1ilu23ej.rs:20:26\n   |\n20 |  \
    \           ret[i - 1] = ret[i - 1] + ret[i - 2] + ret[i - 1];\n   |         \
    \                 ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp1ilu23ej.rs:20:39\n\
    \   |\n20 |             ret[i - 1] = ret[i - 1] + ret[i - 2] + ret[i - 1];\n \
    \  |                                       ^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp1ilu23ej.rs:20:52\n   |\n20 |  \
    \           ret[i - 1] = ret[i - 1] + ret[i - 2] + ret[i - 1];\n   |         \
    \                                           ^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the imp"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut a: isize\
    \ = 3isize;\n    let mut b: isize = 1isize;\n    let mut c: isize = 1isize;\n\
    \    let mut sum: isize = 1isize;\n    let mut index: isize = 0;\n    while index\
    \ != n {\n        a = b;\n        b = c;\n        c = a + b + c;\n        sum\
    \ += c;\n        index += 1;\n    }\n    let mut ans: Vec<isize> = vec![];\n \
    \   for i in 0..index {\n        ans.push(sum);\n    }\n    ans\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[28, 28, 28]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp5p008nds.rs:38:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n < 3 {\n\
    \        return vec![1];\n    }\n\n    let mut ret: Vec<isize> = vec![1];\n  \
    \  for _ in 0..n {\n        let mut tmp = vec![1, 2];\n        ret.push(tmp[0]\
    \ + tmp[1]);\n    }\n    ret\n}\n\nfn main() {\n    let candidate = tri;\n   \
    \ assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1,\
    \ 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 3, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp5dn825ls.rs:31:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut vec =\
    \ Vec::new();\n    vec.push(3);\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            vec.push(vec.last().unwrap() + i);\n        } else {\n          \
    \  vec.push(vec.last().unwrap() + i + 1);\n        }\n    }\n    return vec;\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 7]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpcj4oq6f2.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut numbers\
    \ = vec![1, 2, 3];\n    if n <= 0 {\n        return numbers;\n    }\n    for _\
    \ in 0..n / 2 {\n        let last = (&numbers).last() + 1;\n        (&numbers).push(last);\n\
    \    }\n    for _ in 1..n % 2 {\n        (&numbers).push((&numbers).last().unwrap()\
    \ + 1);\n    }\n    numbers\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `{integer}` to `Option<&isize>`\n  --> /tmp/tmpgs3hlviy.rs:22:38\n\
    \   |\n22 |         let last = (&numbers).last() + 1;\n   |                  \
    \  ----------------- ^ - {integer}\n   |                    |\n   |          \
    \          Option<&isize>\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    if n % 2 == 0 {\n        result.push(3);\n    }\n    for\
    \ i in 1..(n / 2 + 1) {\n        if i % 2 == 0 {\n            result.push(1 +\
    \ i);\n        } else {\n            result.push((i as i32) + 1);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyf6jx72y.rs:25:25\n   |\n\
    25 |             result.push((i as i32) + 1);\n   |                         ^^^^^^^^^^^^^^\
    \ expected `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n25 |             result.push(((i\
    \ as i32) + 1).try_into().unwrap());\n   |                         +         \
    \     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut lst =\
    \ vec![1, 2, 3];\n    let mut n = n;\n    while n != 0 {\n        lst = lst.push(n\
    \ - 1) + lst.push(n - 2) + lst.push(n - 1) + lst;\n        n -= 2;\n    }\n  \
    \  lst\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `()` to `()`\n  --> /tmp/tmp8g06oqbb.rs:20:31\n\
    \   |\n20 |         lst = lst.push(n - 1) + lst.push(n - 2) + lst.push(n - 1)\
    \ + lst;\n   |               --------------- ^ --------------- ()\n   |      \
    \         |\n   |               ()\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut v = [0;\
    \ n + 1];\n    v[0] = 1;\n    v[1] = 3;\n    v[2] = (2 + 1) / 2;\n    v[3] = (3\
    \ + 2) / 2;\n    for i in 0..v.len() {\n        v[i] = (v[i - 1] + v[i - 2] +\
    \ v[i - 3]) / 3;\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n \
    \   assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmphvs595bg.rs:17:21\n   |\n16 | fn tri(n: isize) -> Vec<isize> {\n   |\
    \        - this would need to be a `const`\n17 |     let mut v = [0; n + 1];\n\
    \   |                     ^\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0435`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut res =\
    \ vec![];\n    for i in 1..n + 1 {\n        if i % 2 == 0 {\n            res.push(tri(i\
    \ / 2).unwrap());\n        } else {\n            let mut sum = 1;\n          \
    \  for i in 1..i {\n                sum += i / 2;\n            }\n           \
    \ res.push(sum);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for struct `Vec<isize>` in\
    \ the current scope\n  --> /tmp/tmp0t1fjirv.rs:20:33\n   |\n20 |             res.push(tri(i\
    \ / 2).unwrap());\n   |                                 ^^^^^^ help: there is\
    \ an associated function with a similar name: `swap`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let a = 3;\n    let b = 3 + n;\n    let c = 1 + n;\n\n    while\
    \ c < b {\n        a.push(c);\n        let d = c + 1;\n        if n % 2 == 0 {\n\
    \            result.push(d);\n            d = c + d;\n        }\n        c = d;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for type `{integer}` in the\
    \ current scope\n  --> /tmp/tmpxcl6rz4r.rs:23:11\n   |\n23 |         a.push(c);\n\
    \   |           ^^^^ method not found in `{integer}`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n\
    \        return vec![];\n    }\n\n    let mut ans = vec![tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)]; \n\n    ans.reverse();\n\n    ans.insert(0, n);\n\n    return\
    \ ans;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpunboubre.rs:21:35\n\
    \   |\n21 |     let mut ans = vec![tri(n - 1) + tri(n - 2) + tri(n + 1)]; \n \
    \  |                        ---------- ^ ---------- Vec<isize>\n   |         \
    \               |\n   |                        Vec<isize>\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut fib =\
    \ [1,1];\n    if n == 1 {\n        fib\n    } else {\n        for i in 1..n{\n\
    \            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3]\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6akjyd0x.rs:19:9\n   |\n\
    16 | fn tri(n: isize) -> Vec<isize> {\n   |                     ---------- expected\
    \ `Vec<isize>` because of return type\n...\n19 |         fib\n   |         ^^^-\
    \ help: try using a conversion method: `.to_vec()`\n   |         |\n   |     \
    \    expected struct `Vec`, found array `[{integer}; 2]`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n               found array `[{integer}; 2]`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6akjyd0x.rs:22:13\n\
    \   |\n22 |             fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3]\n   |  \
    \           ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  \
    \ |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `[{integer}]`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6akjyd0x.rs:22:22\n\
    \   |\n22 |             fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3]\n   |  \
    \                    ^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp6akjyd0x.rs:22:35\n   |\n22 |             fib[i] =\
    \ fib[i - 1] + fib[i - 2] + fib[i - 3]\n   |                                 \
    \  ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n \
    \  = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `[{integer}]`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6akjyd0x.rs:"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result:\
    \ Vec<isize> = Vec::new();\n    result.reserve(n + 1);\n    for i in 2..(n + 1)\
    \ {\n        if i % 2 == 0 {\n            result.push(i);\n        } else {\n\
    \            result.push(\n                tri(i / 2) + tri((i - 2) / 2) + tri((i\
    \ - 3) / 2),\n            );\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5rie7idv.rs:18:20\n   |\n\
    18 |     result.reserve(n + 1);\n   |                    ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n18 |     result.reserve((n + 1).try_into().unwrap());\n\
    \   |                    +     +++++++++++++++++++++\n\nerror[E0369]: cannot add\
    \ `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp5rie7idv.rs:24:28\n   |\n24 |  \
    \               tri(i / 2) + tri((i - 2) / 2) + tri((i - 3) / 2),\n   |      \
    \           ---------- ^ ---------------- Vec<isize>\n   |                 |\n\
    \   |                 Vec<isize>\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut rec =\
    \ vec![vec![1, 1, 1]; 3];\n    if n % 2 == 0 {\n        rec[2..n + 1].insert(0,\
    \ rec[2])\n    } else {\n        rec[2..n + 1].insert(0, rec[0])\n    }\n    rec\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[Vec<{integer}>]` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpu7knz584.rs:19:9\n   |\n19 |         rec[2..n + 1].insert(0, rec[2])\n\
    \   |         ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[Vec<{integer}>]>` is not implemented\
    \ for `std::ops::Range<isize>`\n   = help: the following other types implement\
    \ trait `SliceIndex<T>`:\n             <std::ops::Range<usize> as SliceIndex<[T]>>\n\
    \             <std::ops::Range<usize> as SliceIndex<str>>\n   = note: required\
    \ because of the requirements on the impl of `Index<std::ops::Range<isize>>` for\
    \ `Vec<Vec<{integer}>>`\n\nerror[E0277]: the type `[Vec<{integer}>]` cannot be\
    \ indexed by `std::ops::Range<isize>`\n  --> /tmp/tmpu7knz584.rs:21:9\n   |\n\
    21 |         rec[2..n + 1].insert(0, rec[0])\n   |         ^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[Vec<{integer}>]>` is not implemented for `std::ops::Range<isize>`\n\
    \   = help: the following other types implement trait `SliceIndex<T>`:\n     \
    \        <std::ops::Range<usize> as SliceIndex<[T]>>\n             <std::ops::Range<usize>\
    \ as SliceIndex<str>>\n   = note: required because of the requirements on the\
    \ impl of `Index<std::ops::Range<isize>>` for `Vec<Vec<{integer}>>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu7knz584.rs:23:5\n   |\n16 | fn tri(n: isize)\
    \ -> Vec<isize> {\n   |                     ---------- expected `Vec<isize>` because\
    \ of return type\n...\n23 |     rec\n   |     ^^^ expected `isize`, found struct\
    \ `Vec`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct\
    \ `Vec<Vec<{integer}>>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut a: Vec<isize>\
    \ = vec![];\n    a.push(3);\n    if n & 1 == 0 {\n        for i in 2..(n - 1)+2\
    \ {\n            a.push((i + n + 1) / 2);\n        }\n    } else {\n        for\
    \ i in 2..(n - 1)+2 {\n            a.push(1 + n + 1); \n        }\n    }\n   \
    \ a\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 5]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp8rayp5kn.rs:33:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut ret =\
    \ vec![];\n    let mut tri1 = 3; // 1 + 3/2\n    let mut tri2 = 1;  // 3\n   \
    \ for i in 1..(n + 1) {\n        tri2 = tri1 + tri2;\n        ret.push(tri2);\n\
    \    }\n    ret\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 7, 10]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpmctjmt7a.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut vec:\
    \ Vec<isize> = vec![];\n    let mut a = 1u32;\n    let mut b = 1u32;\n    vec.push(a);\n\
    \    vec.push(b);\n    if n % 2 == 0 {\n        vec.push(a + b);\n    }\n    while\
    \ a < n {\n        vec.push(b);\n        a = b - a;\n        b += 1usize;\n  \
    \  }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpslxwr6ws.rs:20:14\n   |\n\
    20 |     vec.push(a);\n   |              ^ expected `isize`, found `u32`\n   |\n\
    help: you can convert a `u32` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n20 |     vec.push(a.try_into().unwrap());\n   |               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpslxwr6ws.rs:21:14\n   |\n21 |\
    \     vec.push(b);\n   |              ^ expected `isize`, found `u32`\n   |\n\
    help: you can convert a `u32` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n21 |     vec.push(b.try_into().unwrap());\n   |               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpslxwr6ws.rs:23:18\n   |\n23 |\
    \         vec.push(a + b);\n   |                  ^^^^^ expected `isize`, found\
    \ `u32`\n   |\nhelp: you can convert a `u32` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n23 |         vec.push((a + b).try_into().unwrap());\n\
    \   |                  +     +++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpslxwr6ws.rs:25:15\n   |\n25 |     while a < n {\n   | \
    \              ^ expected `u32`, found `isize`\n   |\nhelp: you can convert an\
    \ `isize` to a `u32` and panic if the converted value doesn't fit\n   |\n25 |\
    \     while a < n.try_into().unwrap() {\n   |                ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpslxwr6ws.rs:26:18\n   |\n26 |\
    \         vec.push(b);\n   |                  ^ expected `isize`, found `u32`\n\
    \   |\nhelp: you can convert a `u32` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n26 |         vec.push(b.try_into().unwrap());\n   |\
    \                   ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpslxwr6ws.rs:28:14\n   |\n28 |         b += 1usize;\n   |       \
    \       ^^^^^^ expected `u32`, found `usize`\n\nerror[E0277]: cannot add-assign\
    \ `usize` to `u32`\n  --> /tmp/tmpslxwr6ws.rs:28:11\n   |\n28 |         b += 1usize;\n\
    \   |           ^^ no implementation for `u32 += usize`\n   |\n   = help: the\
    \ trait `AddAssign<usize>` is not implemented f"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut tri_seq:\
    \ Vec<isize> = vec![1];\n    for i in 2..n + 1 {\n        tri_seq.push(i);\n \
    \       if i %2 == 0 {\n            tri_seq.push(tri_seq[tri_seq.len() - 2] +\
    \ tri_seq[tri_seq.len() - 1]);\n        } else {\n            tri_seq.push(tri_seq[tri_seq.len()\
    \ - 3] + tri_seq[tri_seq.len() - 2]);\n        }\n    }\n    tri_seq\n}\n\nfn\
    \ main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 3, 5]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp73qoi8v8.rs:31:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut vec:\
    \ Vec<isize> = vec![];\n    if n == 3 {\n        vec.push(1)\n    } else {\n \
    \       let a = tri(n - 1)\n        let b = tri(n - 2)\n        let c = tri(n\
    \ + 1)\n        for v in a.iter().chain(b.iter()).chain(c.iter()) {\n        \
    \    vec.push(v)\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmptyf8f0m3.rs:21:27\n\
    \   |\n21 |         let a = tri(n - 1)\n   |                           ^ help:\
    \ add `;` here\n22 |         let b = tri(n - 2)\n   |         --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmptyf8f0m3.rs:22:27\n\
    \   |\n22 |         let b = tri(n - 2)\n   |                           ^ help:\
    \ add `;` here\n23 |         let c = tri(n + 1)\n   |         --- unexpected token\n\
    \nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptyf8f0m3.rs:23:27\n\
    \   |\n23 |         let c = tri(n + 1)\n   |                           ^ help:\
    \ add `;` here\n24 |         for v in a.iter().chain(b.iter()).chain(c.iter())\
    \ {\n   |         --- unexpected token\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmptyf8f0m3.rs:25:22\n   |\n25 |             vec.push(v)\n   |        \
    \              ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n25 |             vec.push(*v)\n   |                      +\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    fn tri_rec(m:\
    \ isize) -> Vec<isize> {\n        if m <= 1 {\n            return vec![m]\n  \
    \      }\n        let (left, right) = vec![m - 1, m + 2];\n        let mut res\
    \ = vec![left];\n        for &i in &right[..] {\n            res.push(left + i);\n\
    \        }\n        res\n    }\n    let re = vec![1, 1, 1];\n    for &i in &tri_rec(n\
    \ - 1) {\n        re = tri_rec(re);\n    }\n    re\n}\n\nfn main() {\n    let\
    \ candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpno0m2y86.rs:30:22\n   |\n\
    30 |         re = tri_rec(re);\n   |                      ^^ expected `isize`,\
    \ found struct `Vec`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpno0m2y86.rs:21:13\n\
    \   |\n21 |         let (left, right) = vec![m - 1, m + 2];\n   |            \
    \ ^^^^^^^^^^^^^   ------------------ this expression has type `Vec<isize>`\n \
    \  |             |\n   |             expected struct `Vec`, found tuple\n   |\n\
    \   = note: expected struct `Vec<isize>`\n               found tuple `(_, _)`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut l = vec![0;\
    \ n + 1];\n    l[0] = 1;\n    l[1] = l[0] + l[1];\n    l.iter_mut().filter_map(|&x|\
    \ x as i32).take(n as usize).for_each(|x| {\n        *x %= 10;\n    });\n    l\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0d4s82hg.rs:17:25\n   |\n\
    17 |     let mut l = vec![0; n + 1];\n   |                         ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     let mut l = vec![0;\
    \ (n + 1).try_into().unwrap()];\n   |                         +     +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0d4s82hg.rs:20:30\n   |\n20 |\
    \     l.iter_mut().filter_map(|&x| x as i32).take(n as usize).for_each(|x| {\n\
    \   |                              ^--\n   |                              ||\n\
    \   |                              |expected due to this\n   |               \
    \               types differ in mutability\n   |                             \
    \ help: did you mean `x`: `&&mut {integer}`\n   |\n   = note: expected mutable\
    \ reference `&mut {integer}`\n                      found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0d4s82hg.rs:20:34\n   |\n20 |     l.iter_mut().filter_map(|&x|\
    \ x as i32).take(n as usize).for_each(|x| {\n   |                            \
    \      ^^^^^^^^ expected enum `Option`, found `i32`\n   |\n   = note: expected\
    \ enum `Option<_>`\n              found type `i32`\nhelp: try wrapping the expression\
    \ in `Some`\n   |\n20 |     l.iter_mut().filter_map(|&x| Some(x as i32)).take(n\
    \ as usize).for_each(|x| {\n   |                                  +++++      \
    \  +\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut retvec:\
    \ Vec<isize> = Vec::new();\n    let mut ret: isize = n;\n    for i in 1..=ret\
    \ {\n        retvec.push(ret);\n        if i % 2 == 1 {\n            retvec.push(retvec.pop()+retvec.pop());\n\
    \        }\n        ret += 1;\n    }\n    retvec\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Option<isize>` to `Option<isize>`\n  --> /tmp/tmpqa5q05zl.rs:22:37\n\
    \   |\n22 |             retvec.push(retvec.pop()+retvec.pop());\n   |        \
    \                 ------------^------------ Option<isize>\n   |              \
    \           |\n   |                         Option<isize>\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n % 2 == 0\
    \ {\n        return vec![1, 2, 3];\n    } else {\n        return vec![tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)];\n    }\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpiy8t4x9b.rs:20:32\n\
    \   |\n20 |         return vec![tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)];\n   |                     ---------- ^ ----------\
    \ Vec<isize>\n   |                     |\n   |                     Vec<isize>\n\
    \nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpiy8t4x9b.rs:20:70\n\
    \   |\n20 |         return vec![tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)];\n   |                                       \
    \                    ---------- ^ ---------- Vec<isize>\n   |                \
    \                                           |\n   |                          \
    \                                 Vec<isize>\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut vec:\
    \ Vec<isize> = vec![];\n    \n    for i in 1..n+1 {\n        vec.push(if i % 2\
    \ == 0 { i } else { i + 1 });\n    }\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 4]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp2lz_okre.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        let mut a = 1;\n        let\
    \ mut b = 1;\n        for i in 0..n {\n            vec.push(a);\n            vec.push(b);\n\
    \            a += b;\n            b += 2;\n        }\n    } else {\n        let\
    \ mut a = 1;\n        let mut b = 1;\n        for i in 0..n {\n            vec.push(a);\n\
    \            vec.push(b);\n            a += b;\n            b += 2;\n        }\n\
    \        let mut a = 1;\n        let mut b = 1;\n        for i in 0..n {\n   \
    \         vec.push(a);\n            vec.push(b);\n            a += b;\n      \
    \      b += 2;\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 2, 3, 5, 5, 1, 1, 2, 3, 5, 5]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp9_wqcaz8.rs:50:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut res =\
    \ [0, 1, 1];\n    if n % 2 == 0 {\n        res.push(3);\n    } else {\n      \
    \  res.push(tri(n - 1) + tri(n - 2) + tri(n - 3));\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for array `[{integer}; 3]` in\
    \ the current scope\n  --> /tmp/tmpplz6jmm9.rs:19:13\n   |\n19 |         res.push(3);\n\
    \   |             ^^^^ method not found in `[{integer}; 3]`\n\nerror[E0599]: no\
    \ method named `push` found for array `[{integer}; 3]` in the current scope\n\
    \  --> /tmp/tmpplz6jmm9.rs:21:13\n   |\n21 |         res.push(tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3));\n   |             ^^^^ method not found in `[{integer};\
    \ 3]`\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpplz6jmm9.rs:21:29\n\
    \   |\n21 |         res.push(tri(n - 1) + tri(n - 2) + tri(n - 3));\n   |    \
    \              ---------- ^ ---------- Vec<isize>\n   |                  |\n \
    \  |                  Vec<isize>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpplz6jmm9.rs:23:5\n\
    \   |\n16 | fn tri(n: isize) -> Vec<isize> {\n   |                     ----------\
    \ expected `Vec<isize>` because of return type\n...\n23 |     res\n   |     ^^^-\
    \ help: try using a conversion method: `.to_vec()`\n   |     |\n   |     expected\
    \ struct `Vec`, found array `[{integer}; 3]`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n               found array `[{integer}; 3]`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0369,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result:\
    \ Vec<isize> = vec![];\n    for i in 1..=n {\n        let sum = (3*(i - 1)) +\
    \ i*(i - 2) + i;\n        result.push(sum);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 5, 12]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpn1i_b2lu.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n\
    \        return vec![];\n    }\n    if n == 1 {\n        return vec![0, 1, 3];\n\
    \    }\n    let mut f = vec![0, 0, 0];\n    let mut i = 2;\n    while i <= n {\n\
    \        f[1 - i] += i / 2;\n        i += 1;\n    }\n    let mut v0 = f[0] - f[1];\n\
    \    let mut v1 = f[1] - f[2];\n    f[0] += v0 + v1;\n    f[1] += v0 + v1;\n \
    \   f[2] += v0 + v1;\n    f[3] += v0 + v1;\n    f[4] += v0 + v1;\n    f[5] +=\
    \ v0 + v1;\n    f[6] += v0 + v1;\n    f[7] += v0 + v1;\n    f[8] += v0 + v1;\n\
    \    f[9] += v0 + v1;\n    f[10] += v0 + v1;\n    f[11] += v0 + v1;\n    f[12]\
    \ += v0 + v1;\n    f[13] += v0 + v1;\n    f[14] += v0 + v1;\n    f[15] += v0 +\
    \ v1;\n    f[16] += v0 + v1;\n    f[17] += v0 + v1;\n    f[18] += v0 + v1;\n \
    \   f[19] += v0 + v1;\n    f[20] += v0 + v1;\n    f[21] += v0 + v1;\n    f[22]\
    \ += v0 + v1;\n    f[23] += v0 + v1;\n    f[24] += v0 + v1;\n    f[25] += v0 +\
    \ v1;\n    f[26] += v0 + v1;\n    f[27] += v0 + v1;\n    f[28] += v0 + v1;\n \
    \   f[29] += v0 + v1;\n    f[30] += v0 + v1;\n    f[31] += v0 + v1;\n    f[32]\
    \ += v0 + v1;\n    f[33] += v0 + v1;\n    f[34] += v0 + v1;\n    f[35] += v0 +\
    \ v1;\n    f[36] += v0 + v1;\n    f[37] += v0 + v1;\n    f[38] += v0 + v1;\n \
    \   f[39] += v0 + v1;\n    f[40] += v0 + v1;\n    f[41] += v0 + v1;\n    f[42]\
    \ += v0 + v1;\n    f[43] += v0 + v1;\n    f[44] += v0 + v1;\n    f[45] += v0 +\
    \ v1;\n    f[46] += v0 + v1;\n    f[47] += v0 + v1;\n    f[48] += v0 + v1;\n \
    \   f[49\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp6p61e5o8.rs:80:6\n\
    \   |\n16 | fn tri(n: isize) -> Vec<isize> {\n   |                           \
    \     - closing delimiter possibly meant for this\n...\n80 |     f[49\n   |  \
    \    ^ unclosed delimiter\n81 | }\n   | ^ mismatched closing delimiter\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6p61e5o8.rs:26:9\n\
    \   |\n26 |         f[1 - i] += i / 2;\n   |         ^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp6p61e5o8.rs:80:5\n   |\n16 |   fn tri(n: isize) -> Vec<isize> {\n  \
    \ |                       ---------- expected `Vec<isize>` because of return type\n\
    ...\n80 | /     f[49\n81 | | }\n   | |_^ expected struct `Vec`, found integer\n\
    \   |\n   = note: expected struct `Vec<isize>`\n                found type `{integer}`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n\
    \        return vec![1];\n    }\n    \n    if n % 2 == 0 {\n        let first_num\
    \ = tri(n - 1) + tri(n - 2) + tri(n - 3);\n        let second_num = tri(n + 1)\
    \ + tri(n + 2) + tri(n + 3);\n        return first_num + second_num;\n    } else\
    \ {\n        let first_num = tri(n - 1) + tri(n - 2) + tri(n - 3);\n        let\
    \ second_num = tri(n + 1) + tri(n + 2) + tri(n + 3);\n        return first_num\
    \ + second_num + n;\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpm7715wvw.rs:22:36\n\
    \   |\n22 |         let first_num = tri(n - 1) + tri(n - 2) + tri(n - 3);\n  \
    \ |                         ---------- ^ ---------- Vec<isize>\n   |         \
    \                |\n   |                         Vec<isize>\n\nerror[E0369]: cannot\
    \ add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpm7715wvw.rs:23:37\n   |\n23\
    \ |         let second_num = tri(n + 1) + tri(n + 2) + tri(n + 3);\n   |     \
    \                     ---------- ^ ---------- Vec<isize>\n   |               \
    \           |\n   |                          Vec<isize>\n\nerror[E0369]: cannot\
    \ add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpm7715wvw.rs:26:36\n   |\n26\
    \ |         let first_num = tri(n - 1) + tri(n - 2) + tri(n - 3);\n   |      \
    \                   ---------- ^ ---------- Vec<isize>\n   |                 \
    \        |\n   |                         Vec<isize>\n\nerror[E0369]: cannot add\
    \ `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpm7715wvw.rs:27:37\n   |\n27 |  \
    \       let second_num = tri(n + 1) + tri(n + 2) + tri(n + 3);\n   |         \
    \                 ---------- ^ ---------- Vec<isize>\n   |                   \
    \       |\n   |                          Vec<isize>\n\nerror: aborting due to\
    \ 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut tmp1: isize = 1;\n    let mut tmp2: isize = 3;\n    \n\
    \    for _ in 0..n {\n        tmp1 += tmp2;\n        tmp2 += 1;\n        result.push(tmp1);\n\
    \    }\n    \n    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 8, 13]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp7g9puwo5.rs:32:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    assert!((n >=\
    \ 0) && (n % 2 == 0));\n    let mut tri_seq = Vec::new();\n    tri_seq.push(3);\n\
    \    tri_seq.push(1 + n / 2);\n    if n % 2 == 0 {\n        tri_seq.push(1 + tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    } else {\n        tri_seq.push(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1));\n    }\n    tri_seq\n}\n\nfn main() {\n    let\
    \ candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `Vec<isize>` to `{integer}`\n  --> /tmp/tmp70ga7ih2.rs:22:24\n\
    \   |\n22 |         tri_seq.push(1 + tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \   |                        ^ no implementation for `{integer} + Vec<isize>`\n\
    \   |\n   = help: the trait `Add<Vec<isize>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0369]:\
    \ cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp70ga7ih2.rs:24:33\n \
    \  |\n24 |         tri_seq.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n   | \
    \                     ---------- ^ ---------- Vec<isize>\n   |               \
    \       |\n   |                      Vec<isize>\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    use std::cmp::Ordering;\n\
    \    let mut result: Vec<isize> = Vec::new();\n    if n == 0 { result.push(i32::min_value(),\
    \ i32::min_value()); }\n    if n == 1 { result.push(i32::min_value()); }\n   \
    \ if n == 2 { result.push(i32::max_value()); }\n    for i in 1..(n + 1) {\n  \
    \      let mut previous = i32::min_value();\n        let mut current = i32::max_value();\n\
    \        let mut tri: isize = previous + current + tri(n - i);\n        tri /=\
    \ i32::max_value();\n        previous = current;\n        current = tri;\n   \
    \     result.push(tri);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmply75mz6e.rs:17:9\n\
    \   |\n17 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0061]: this function\
    \ takes 1 argument but 2 arguments were supplied\n    --> /tmp/tmply75mz6e.rs:19:24\n\
    \     |\n19   |     if n == 0 { result.push(i32::min_value(), i32::min_value());\
    \ }\n     |                        ^^^^ ----------------  ---------------- supplied\
    \ 2 arguments\n     |                        |\n     |                       \
    \ expected 1 argument\n     |\nnote: associated function defined here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmply75mz6e.rs:20:29\n   |\n20 |     if n == 1\
    \ { result.push(i32::min_value()); }\n   |                             ^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n20 |     if n == 1 { result.push(i32::min_value().try_into().unwrap());\
    \ }\n   |                                             ++++++++++++++++++++\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmply75mz6e.rs:21:29\n   |\n21 |  \
    \   if n == 2 { result.push(i32::max_value()); }\n   |                       \
    \      ^^^^^^^^^^^^^^^^ expected `isize`, found `i32`\n   |\nhelp: you can convert\
    \ an `i32` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    21 |     if n == 2 { result.push(i32::max_value().try_into().unwrap()); }\n  \
    \ |                                             ++++++++++++++++++++\n\nerror[E0277]:\
    \ cannot add `Vec<isize>` to `i32`\n  --> /tmp/tmply75mz6e.rs:25:49\n   |\n25\
    \ |         let mut tri: isize = previous + current + tri(n - i);\n   |      \
    \                                           ^ no implementation for `i32 + Vec<isize>`\n\
    \   |\n   = help: the trait `Add<Vec<isize>>` is not implemented for `i32`\n \
    \  = help: the following other types implement trait `Add<Rhs>`:\n           \
    \  <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut list\
    \ = vec![1, n];\n\n    for i in 2..n {\n        if i % 2 == 0 {\n            list.push(i\
    \ + list[0] + list[1]);\n        } else {\n            list.push(i + list[0]);\n\
    \        }\n    }\n    return list;\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmprtozamcf.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n <= 2 {\n\
    \        return vec![1, 2];\n    }\n    let mut result = vec![];\n    result.push((n\
    \ / 2)); // tri(1) = 3\n    result.push(tri(n - 1) + tri(n - 2));\n    result.push(tri(n\
    \ + 1) + tri(n - 1));\n    result\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around method argument\n  --> /tmp/tmpvy30646x.rs:21:17\n\
    \   |\n21 |     result.push((n / 2)); // tri(1) = 3\n   |                 ^  \
    \   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these\
    \ parentheses\n   |\n21 -     result.push((n / 2)); // tri(1) = 3\n21 +     result.push(n\
    \ / 2); // tri(1) = 3\n   | \n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n\
    \  --> /tmp/tmpvy30646x.rs:22:28\n   |\n22 |     result.push(tri(n - 1) + tri(n\
    \ - 2));\n   |                 ---------- ^ ---------- Vec<isize>\n   |      \
    \           |\n   |                 Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>`\
    \ to `Vec<isize>`\n  --> /tmp/tmpvy30646x.rs:23:28\n   |\n23 |     result.push(tri(n\
    \ + 1) + tri(n - 1));\n   |                 ---------- ^ ---------- Vec<isize>\n\
    \   |                 |\n   |                 Vec<isize>\n\nerror: aborting due\
    \ to 2 previous errors; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result:\
    \ Vec<isize> = Vec::new();\n    result.push(3);\n    if n % 2 == 1 {\n       \
    \ for _ in 0..n / 2 {\n            result.push((result[result.len() - 1] + result[result.len()\
    \ - 2] + result[result.len() - 3]))\n        }\n    } else {\n        for _ in\
    \ 0..n / 3 {\n            result.push((result[result.len() - 1] + result[result.len()\
    \ - 2] + result[result.len() - 3]))\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp3bg0fm5f.rs:21:60\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut vec:\
    \ Vec<isize> = Vec::new();\n    let mut a = 3;\n    let mut b = 0;\n    let mut\
    \ c = 0;\n    for i in 1..n+2 {\n        vec.push(a);\n        let c = a + b;\n\
    \        a = b;\n        b = c;\n    }\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 0, 3, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp7kb3nfk1.rs:32:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 { vec![]\
    \ }\n    else {\n        vec![\n            1,\n            tri(n - 2) + tri(n\
    \ - 1) + tri(n - 3),\n        ]\n    }\n}\n\nfn main() {\n    let candidate =\
    \ tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmptub5pegf.rs:21:24\n\
    \   |\n21 |             tri(n - 2) + tri(n - 1) + tri(n - 3),\n   |          \
    \   ---------- ^ ---------- Vec<isize>\n   |             |\n   |             Vec<isize>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n < 2 {\n\
    \        return vec![];\n    }\n\n    let mut result = vec![0, 0, 0];\n\n    for\
    \ i in 1..=n {\n        let mut tri_1 = 1 + i / 2;\n        let mut tri_2 = tri_1\
    \ + i;\n        let mut tri_3 = tri_2 + tri_1;\n        result.push(tri_3);\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 3, 6, 7]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpjxm7ayjw.rs:35:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 1 {\n\
    \        return vec![1];\n    }\n    if n == 2 {\n        return vec![1, 3];\n\
    \    }\n    if n == 3 {\n        return vec![1, 2, 3];\n    }\n    \n    let mut\
    \ a = 0;\n    let mut b = 1;\n    let mut c = 1;\n    let mut result: Vec<isize>\
    \ = vec![];\n    let mut i = 3;\n    \n    while i < n {\n        result.push(a);\n\
    \        result.push(b);\n        result.push(c);\n        a = a + b;\n      \
    \  b = c + a;\n        c = a + b;\n        i += 1;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpfacmks5j.rs:47:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut vec =\
    \ Vec::new();\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 +\
    \ n / 2);\n    } else {\n        vec.push(tri(n / 2).clone());\n        vec.push(tri(n\
    \ / 2 + 1).clone());\n    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_z7y_r62.rs:22:18\n   |\n\
    22 |         vec.push(tri(n / 2).clone());\n   |                  ^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found struct `Vec`\n   |\n   = note: expected type `isize`\n\
    \            found struct `Vec<isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp_z7y_r62.rs:23:18\n   |\n23 |         vec.push(tri(n / 2 + 1).clone());\n\
    \   |                  ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found struct `Vec`\n\
    \   |\n   = note: expected type `isize`\n            found struct `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut x = 1;\n\
    \    let mut y = 1;\n    let mut z = x;\n    let mut arr: Vec<isize> = vec![];\n\
    \n    for _ in 0..n {\n        arr.push(z);\n        z = x + y;\n        x = y;\n\
    \        y = z;\n    }\n    arr\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpk17_z2n5.rs:33:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut vec =\
    \ vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push((2 + n\
    \ + 1) / 2);\n    }\n    else {\n        let m = (n + 1) * (n + 2) / 2;\n    \
    \    vec.push(1);\n        vec.push(m);\n    }\n    vec\n}\n\nfn main() {\n  \
    \  let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n   \
    \ assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 10]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpnsrj2fie.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut nums\
    \ = vec![3,1];\n\n    for i in 1..n+1 {\n        nums.push(nums[-2] + nums[-1]\
    \ + nums[-n] + nums[-n-1]);\n    }\n    nums\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error: negative integers cannot be used to index on a `Vec<{integer}>`\n\
    \  --> /tmp/tmp3gv0lnvu.rs:20:24\n   |\n20 |         nums.push(nums[-2] + nums[-1]\
    \ + nums[-n] + nums[-n-1]);\n   |                        ^^ cannot use a negative\
    \ integer for indexing on `Vec<{integer}>`\n   |\nhelp: to access an element starting\
    \ from the end of the `Vec<{integer}>`, compute the index\n   |\n20 |        \
    \ nums.push(nums[nums.len() -2] + nums[-1] + nums[-n] + nums[-n-1]);\n   |   \
    \                     ++++++++++\n\nerror: negative integers cannot be used to\
    \ index on a `Vec<{integer}>`\n  --> /tmp/tmp3gv0lnvu.rs:20:35\n   |\n20 |   \
    \      nums.push(nums[-2] + nums[-1] + nums[-n] + nums[-n-1]);\n   |         \
    \                          ^^ cannot use a negative integer for indexing on `Vec<{integer}>`\n\
    \   |\nhelp: to access an element starting from the end of the `Vec<{integer}>`,\
    \ compute the index\n   |\n20 |         nums.push(nums[-2] + nums[nums.len() -1]\
    \ + nums[-n] + nums[-n-1]);\n   |                                   ++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp3gv0lnvu.rs:20:41\n\
    \   |\n20 |         nums.push(nums[-2] + nums[-1] + nums[-n] + nums[-n-1]);\n\
    \   |                                         ^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp3gv0lnvu.rs:20:52\n   |\n20 |  \
    \       nums.push(nums[-2] + nums[-1] + nums[-n] + nums[-n-1]);\n   |        \
    \                                            ^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Ind"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    if n <= 1 {\n        result.push(i);\n    } else {\n        result.push(tri(n-1)\
    \ + tri(n-2) + tri(n+1));\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpq7asturk.rs:19:21\n\
    \   |\n19 |         result.push(i);\n   |                     ^ help: a local\
    \ variable with a similar name exists: `n`\n\nerror[E0369]: cannot add `Vec<isize>`\
    \ to `Vec<isize>`\n  --> /tmp/tmpq7asturk.rs:21:30\n   |\n21 |         result.push(tri(n-1)\
    \ + tri(n-2) + tri(n+1));\n   |                     -------- ^ -------- Vec<isize>\n\
    \   |                     |\n   |                     Vec<isize>\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0369, E0425.\n\
    For more information about an error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    if n <= 1 {\n        return result;\n    }\n\n    let n3\
    \ = n - 3;\n    let n5 = n - 5;\n    let n7 = n - 7;\n\n    result.push(3);\n\
    \    result.push(n3);\n    result.push(1);\n    result.push(n5);\n    result.push(1);\n\
    \    result.push(n7);\n\n    result.iter().map(|&x| x + 2).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 2, 3, 0, 3, -2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpmjj6zy1w.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n\
    \        return vec![1];\n    }\n\n    if n % 2 == 1 {\n        return vec![tri(n\
    \ / 2), tri(n - 1) + tri(n - 2) + tri(n + 1)];\n    }\n\n    return vec![tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n / 2)];\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsg7eom67.rs:22:21\n   |\n\
    22 |         return vec![tri(n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1)];\n\
    \   |                     ^^^^^^^^^^ expected `isize`, found struct `Vec`\n  \
    \ |\n   = note: expected type `isize`\n            found struct `Vec<isize>`\n\
    \nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpsg7eom67.rs:22:44\n\
    \   |\n22 |         return vec![tri(n / 2), tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)];\n   |                                 ---------- ^ ---------- Vec<isize>\n\
    \   |                                 |\n   |                                \
    \ Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpsg7eom67.rs:25:28\n\
    \   |\n25 |     return vec![tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n / 2)];\n\
    \   |                 ---------- ^ ---------- Vec<isize>\n   |               \
    \  |\n   |                 Vec<isize>\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut ret:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        ret += vec![tri(n - 1) +\
    \ tri(n - 2), tri(n - 1) + tri(n + 1)];\n    } else {\n        ret += vec![tri(n\
    \ - 1) + tri(n + 1), tri(n - 1) + tri(n - 2)];\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpr1_uevuy.rs:19:32\n\
    \   |\n19 |         ret += vec![tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n +\
    \ 1)];\n   |                     ---------- ^ ---------- Vec<isize>\n   |    \
    \                 |\n   |                     Vec<isize>\n\nerror[E0369]: cannot\
    \ add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpr1_uevuy.rs:19:57\n   |\n19\
    \ |         ret += vec![tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1)];\n \
    \  |                                              ---------- ^ ---------- Vec<isize>\n\
    \   |                                              |\n   |                   \
    \                           Vec<isize>\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `Vec<isize>`\n  --> /tmp/tmpr1_uevuy.rs:19:9\n\
    \   |\n19 |         ret += vec![tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n +\
    \ 1)];\n   |         ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |         |\n   |         cannot use `+=` on type `Vec<isize>`\n\nerror[E0369]:\
    \ cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpr1_uevuy.rs:21:32\n \
    \  |\n21 |         ret += vec![tri(n - 1) + tri(n + 1), tri(n - 1) + tri(n - 2)];\n\
    \   |                     ---------- ^ ---------- Vec<isize>\n   |           \
    \          |\n   |                     Vec<isize>\n\nerror[E0369]: cannot add\
    \ `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpr1_uevuy.rs:21:57\n   |\n21 |  \
    \       ret += vec![tri(n - 1) + tri(n + 1), tri(n - 1) + tri(n - 2)];\n   | \
    \                                             ---------- ^ ---------- Vec<isize>\n\
    \   |                                              |\n   |                   \
    \                           Vec<isize>\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `Vec<isize>`\n  --> /tmp/tmpr1_uevuy.rs:21:9\n\
    \   |\n21 |         ret += vec![tri(n - 1) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2)];\n   |         ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |         |\n   |         cannot use `+=` on type `Vec<isize>`\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome errors ha"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result\
    \ = Vec::new();\n    result.push(3);\n    for _ in 0..n {\n        let n1 = result.last().unwrap()\
    \ + 1;\n        let n2 = result.last().unwrap() + 2;\n        let n3 = result.last().unwrap()\
    \ + 3;\n        result.push(n1, n2, n3);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 3 arguments were supplied\n\
    \    --> /tmp/tmph0lamn38.rs:23:16\n     |\n23   |         result.push(n1, n2,\
    \ n3);\n     |                ^^^^ --  --  -- supplied 3 arguments\n     |   \
    \             |\n     |                expected 1 argument\n     |\nnote: associated\
    \ function defined here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut fib =\
    \ [0, 0, 1];\n    if n <= 2 { return vec![3]; }\n    for i in 1..n+1 {\n     \
    \   fib[1] = fib[2] + (fib[0] + fib[1]);\n        fib[0] = fib[1];\n    }\n  \
    \  fib\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn331xv1l.rs:23:5\n   |\n\
    16 | fn tri(n: isize) -> Vec<isize> {\n   |                     ---------- expected\
    \ `Vec<isize>` because of return type\n...\n23 |     fib\n   |     ^^^- help:\
    \ try using a conversion method: `.to_vec()`\n   |     |\n   |     expected struct\
    \ `Vec`, found array `[{integer}; 3]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \               found array `[{integer}; 3]`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut res =\
    \ vec![0; 3];\n    if n <= 1 {\n        for _i in 0..n {\n            res[..0]\
    \ = [0];\n        }\n        return res\n    } else {\n        let mut a = 0;\n\
    \        let mut b = 0;\n        let mut c = 0;\n        let mut temp = 0;\n \
    \       for _i in 0..n {\n            temp = a + b + c;\n            a = b;\n\
    \            b = c;\n            c = temp;\n        }\n        for _i in 0..n\
    \ {\n            res[..0] = vec![a, b, c];\n        }\n        return res\n  \
    \  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpycz82wg_.rs:20:24\n   |\n\
    20 |             res[..0] = [0];\n   |             --------   ^^^ expected slice\
    \ `[{integer}]`, found array `[{integer}; 1]`\n   |             |\n   |      \
    \       expected due to the type of this binding\n\nerror[E0277]: the size for\
    \ values of type `[{integer}]` cannot be known at compilation time\n  --> /tmp/tmpycz82wg_.rs:20:13\n\
    \   |\n20 |             res[..0] = [0];\n   |             ^^^^^^^^ doesn't have\
    \ a size known at compile-time\n   |\n   = help: the trait `Sized` is not implemented\
    \ for `[{integer}]`\n   = note: the left-hand-side of an assignment must have\
    \ a statically known size\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpycz82wg_.rs:35:24\n\
    \   |\n35 |             res[..0] = vec![a, b, c];\n   |             -------- \
    \  ^^^^^^^^^^^^^ expected slice `[isize]`, found struct `Vec`\n   |          \
    \   |\n   |             expected due to the type of this binding\n   |\n   = note:\
    \ expected slice `[isize]`\n             found struct `Vec<{integer}>`\n   = note:\
    \ this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror[E0277]: the size for values of type `[isize]` cannot\
    \ be known at compilation time\n  --> /tmp/tmpycz82wg_.rs:35:13\n   |\n35 |  \
    \           res[..0] = vec![a, b, c];\n   |             ^^^^^^^^ doesn't have\
    \ a size known at compile-time\n   |\n   = help: the trait `Sized` is not implemented\
    \ for `[isize]`\n   = note: the left-hand-side of an assignment must have a statically\
    \ known size\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut vec =\
    \ vec![0, 0, 0];\n    let mut i = 1;\n    let mut j = 1;\n    while i < n {\n\
    \        vec[i] = j;\n        let k = i + j + i;\n        vec[j] = k;\n      \
    \  if i % 2 == 0 {\n            i += 2;\n            j += 2;\n        } else {\n\
    \            i += 1;\n            j += 1;\n        }\n    }\n    vec\n}\n\nfn\
    \ main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpe_60yg4c.rs:21:9\n   |\n21 |         vec[i] = j;\n   |         ^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpe_60yg4c.rs:23:9\n\
    \   |\n23 |         vec[j] = k;\n   |         ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
