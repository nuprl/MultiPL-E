name: HumanEval_85_add
language: rust
results:
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    for ele in lst {\n        if ele % 2 == 0 {\n  \
    \          ele += 1;\n        }\n    }\n    lst[0]\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "warning: value assigned to `ele` is never read\n --> /tmp/tmpk2iaueep.rs:7:13\n\
    \  |\n7 |             ele += 1;\n  |             ^^^\n  |\n  = note: `#[warn(unused_assignments)]`\
    \ on by default\n  = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign twice to immutable variable `ele`\n --> /tmp/tmpk2iaueep.rs:7:13\n\
    \  |\n5 |     for ele in lst {\n  |         ---\n  |         |\n  |         first\
    \ assignment to `ele`\n  |         help: consider making this binding mutable:\
    \ `mut ele`\n6 |         if ele % 2 == 0 {\n7 |             ele += 1;\n  |   \
    \          ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]:\
    \ borrow of moved value: `lst`\n   --> /tmp/tmpk2iaueep.rs:10:5\n    |\n4   |\
    \ fn add(lst: Vec<isize>) -> isize {\n    |        --- move occurs because `lst`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n5   |    \
    \ for ele in lst {\n    |                --- `lst` moved due to this implicit\
    \ call to `.into_iter()`\n...\n10  |     lst[0]\n    |     ^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n5   |     for ele in &lst\
    \ {\n    |                +\n\nerror: aborting due to 2 previous errors; 1 warning\
    \ emitted\n\nSome errors have detailed explanations: E0382, E0384.\nFor more information\
    \ about an error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum: isize = lst[0];\n    for &n in &lst[1..]\
    \ {\n        if n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpmqyg3epv.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even_sum = 0;\n    for i in lst {\n    \
    \    even_sum += i;\n    }\n    for i in lst.iter_mut() {\n        if i % 2 ==\
    \ 0 {\n            *i += even_sum;\n        }\n    }\n    even_sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmpk0fza3oo.rs:10:14\n\
    \   |\n10 |         if i % 2 == 0 {\n   |            - ^ - {integer}\n   |   \
    \         |\n   |            &mut isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `i`\n   |\n10 |         if *i % 2 == 0 {\n   |         \
    \   +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    for i in lst.iter() {\n        if i % 2 == 0 {\n\
    \            return i + 1;\n        }\n    }\n    0\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `88`', /tmp/tmpsgo0e10c.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum: isize = 0;\n    for elt in lst {\n\
    \        if elt % 2 == 0 {\n            sum += elt;\n        }\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmplr89sadt.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0usize;\n    for &n in lst {\n  \
    \      if n % 2 == 0 {\n            even += n;\n        }\n    }\n    even\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpazb8ik0j.rs:6:9\n  |\n6 |\
    \     for &n in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `n`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpazb8ik0j.rs:11:5\n   |\n4  | fn add(lst: Vec<isize>) -> isize {\n\
    \   |                            ----- expected `isize` because of return type\n\
    ...\n11 |     even\n   |     ^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     even.try_into().unwrap()\n   |         ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    for &i in lst {\n        if i % 2 == 1 {\n     \
    \       i += 2;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjlly11q0.rs:5:9\n  |\n5 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.len() < 2 {\n        return 0;\n    }\n\n\
    \    let mut even = 0;\n    let mut odd = 0;\n\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            even += i;\n        } else {\n           \
    \ odd += i;\n        }\n    }\n    (even + odd) / 2\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `46`,\n right: `88`', /tmp/tmpekqgo1bz.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens: isize = 0;\n    for &i in lst {\n\
    \        if i % 2 == 0 {\n            evens += i;\n        }\n    }\n    evens\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpinhaiw02.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut total = 0;\n    for el in lst {\n      \
    \  if el % 2 == 1 {\n            total += el;\n        }\n    }\n    return total;\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmp8bcec4iv.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for el in lst {\n        if\
    \ el % 2 == 0 {\n            sum += el;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpcnrqzapq.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|&n| n % 2 == 0).sum()\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpwr5lu2hx.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let even = lst[..lst/2] // divide list into even\
    \ and odd\n    let odd = lst[lst/2..] // then take the odd list\n\n    // sum\
    \ the evens\n    let evensum = even.iter().sum();\n\n    // sum the odds\n   \
    \ let oddsum = odd.iter().sum();\n\n    // add the even sum to the odd sum\n \
    \   evensum + oddsum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `let`\n --> /tmp/tmppny1p1br.rs:5:28\n\
    \  |\n5 |     let even = lst[..lst/2] // divide list into even and odd\n  |  \
    \                          ^ help: add `;` here\n6 |     let odd = lst[lst/2..]\
    \ // then take the odd list\n  |     --- unexpected token\n\nerror: expected `;`,\
    \ found keyword `let`\n --> /tmp/tmppny1p1br.rs:6:27\n  |\n6 |     let odd = lst[lst/2..]\
    \ // then take the odd list\n  |                           ^ help: add `;` here\n\
    ...\n9 |     let evensum = even.iter().sum();\n  |     --- unexpected token\n\n\
    error[E0369]: cannot divide `Vec<isize>` by `{integer}`\n --> /tmp/tmppny1p1br.rs:5:25\n\
    \  |\n5 |     let even = lst[..lst/2] // divide list into even and odd\n  |  \
    \                    ---^- {integer}\n  |                      |\n  |        \
    \              Vec<isize>\n\nerror[E0277]: the size for values of type `[isize]`\
    \ cannot be known at compilation time\n --> /tmp/tmppny1p1br.rs:5:9\n  |\n5 |\
    \     let even = lst[..lst/2] // divide list into even and odd\n  |         ^^^^\
    \ doesn't have a size known at compile-time\n  |\n  = help: the trait `Sized`\
    \ is not implemented for `[isize]`\n  = note: all local variables must have a\
    \ statically known size\n  = help: unsized locals are gated as an unstable feature\n\
    help: consider borrowing here\n  |\n5 |     let even = &lst[..lst/2] // divide\
    \ list into even and odd\n  |                +\n\nerror[E0369]: cannot divide\
    \ `Vec<isize>` by `{integer}`\n --> /tmp/tmppny1p1br.rs:6:22\n  |\n6 |     let\
    \ odd = lst[lst/2..] // then take the odd list\n  |                   ---^- {integer}\n\
    \  |                   |\n  |                   Vec<isize>\n\nerror[E0277]: the\
    \ size for values of type `[isize]` cannot be known at compilation time\n -->\
    \ /tmp/tmppny1p1br.rs:6:9\n  |\n6 |     let odd = lst[lst/2..] // then take the\
    \ odd list\n  |         ^^^ doesn't have a size known at compile-time\n  |\n \
    \ = help: the trait `Sized` is not implemented for `[isize]`\n  = note: all local\
    \ variables must have a statically known size\n  = help: unsized locals are gated\
    \ as an unstable feature\nhelp: consider borrowing here\n "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter().filter(|&i|\
    \ i % 2 == 1) {\n        sum += i;\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpbxfugubr.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.reduce(|sum, num| sum + num % 2 == 0 ? sum +\
    \ num : 0)\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `sum`\n\
    \ --> /tmp/tmp4q5hiimt.rs:5:48\n  |\n5 |     lst.reduce(|sum, num| sum + num %\
    \ 2 == 0 ? sum + num : 0)\n  |                                               \
    \ ^^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: expected one\
    \ of `!`, `&&`, `&`, `(`, `)`, `*`, `...`, `.`, `;`, `<`, `?`, `[`, `_`, `async`,\
    \ `const`, `dyn`, `extern`, `fn`, `for`, `impl`, `unsafe`, `}`, `~`, an operator,\
    \ lifetime, or path, found `0`\n --> /tmp/tmp4q5hiimt.rs:5:60\n  |\n5 |     lst.reduce(|sum,\
    \ num| sum + num % 2 == 0 ? sum + num : 0)\n  |                              \
    \                              ^ expected one of 26 possible tokens\n\nerror:\
    \ aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().map(|&x| x as isize).filter(|x| *x %\
    \ 2 == 0).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp4ijsux2c.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum: isize = 0;\n    for &i in lst {\n \
    \       if i % 2 == 1 {\n            sum += i;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp05_7hr_0.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().fold(0, |a, b| a + b % 2)\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpwzsvtwu4.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut res = 0;\n    for (i,n) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            res += n;\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpo0no9nws.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for num in lst {\n       \
    \ if num % 2 == 0 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpgjzvd5kq.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter_mut() {\n\
    \        if i % 2 == 0 {\n            *i += 1;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n --> /tmp/tmp242dg2ww.rs:7:14\n\
    \  |\n7 |         if i % 2 == 0 {\n  |            - ^ - {integer}\n  |       \
    \     |\n  |            &mut isize\n  |\nhelp: `%` can be used on `isize`, you\
    \ can dereference `i`\n  |\n7 |         if *i % 2 == 0 {\n  |            +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp8xovwow5.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.reduce((n1, n2) => n1 + n2)\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n\
    \ --> /tmp/tmpq2dgew9s.rs:5:25\n  |\n5 |     lst.reduce((n1, n2) => n1 + n2)\n\
    \  |                         ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n\
    \    let mut i = 0;\n    let mut even = 0;\n\n    while i < lst.len() {\n    \
    \    if lst[i] % 2 == 0 {\n            even += lst[i];\n        }\n\n        i\
    \ += 1;\n    }\n\n    return even;\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpibjforx6.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even_indexes: Vec<isize> = Vec::new();\n\
    \    let mut odd_indexes: Vec<isize> = Vec::new();\n\n    for i in lst {\n   \
    \     if i % 2 == 0 {\n            even_indexes.push(i);\n        } else {\n \
    \           odd_indexes.push(i);\n        }\n    }\n    let odd_sum = odd_indexes.iter().fold(0,\
    \ |s, i| s + i);\n    let evens_sum = even_indexes.iter().fold(0, |s, i| s + i);\n\
    \    evens_sum + odd_sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpj58qwuei.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpzcbfjisx.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for n in lst {\n        if\
    \ n % 2 == 0 {\n            even += n;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp4hhec27t.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = lst;\n    let mut odd = lst.clone();\n\
    \    odd.swap(0, even.len());\n    for i in 0..even.len() {\n        if odd.len()\
    \ > i && even[i as usize] % 2 == 1 {\n            even[i as usize] +=1;\n    \
    \    } else {\n            return even[i as usize]\n        }\n    }\n    return\
    \ even.iter().max().unwrap_or(0)\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk_hb186a.rs:15:40\n   |\n\
    15 |     return even.iter().max().unwrap_or(0)\n   |                         \
    \               ^\n   |                                        |\n   |       \
    \                                 expected `&isize`, found integer\n   |     \
    \                                   help: consider borrowing here: `&0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpk_hb186a.rs:15:12\n   |\n4  | fn add(lst: Vec<isize>)\
    \ -> isize {\n   |                            ----- expected `isize` because of\
    \ return type\n...\n15 |     return even.iter().max().unwrap_or(0)\n   |     \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n15 |     return *even.iter().max().unwrap_or(0)\n\
    \   |            +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter().enumerate()\
    \ {\n        let (idx, val) = *i;\n        if idx % 2 == 0 {\n            sum\
    \ += val;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `(usize, &isize)` cannot be dereferenced\n --> /tmp/tmpwdjvquc6.rs:7:26\n\
    \  |\n7 |         let (idx, val) = *i;\n  |                          ^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst\n        .iter()\n        .enumerate()\n   \
    \     .fold(0, |acc, (i, elem)| {\n            acc + elem\n        })\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpjoclsguf.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            sum += x;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpcr2hqkg3.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut res = 0;\n\n    for e in lst.iter().filter(|&e|\
    \ e % 2 == 0) {\n        res += e;\n    }\n\n    return res;\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp8z8i3nyz.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().cloned().filter(|x| x % 2 == 1).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmphsqao5sf.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut i = 0;\n    while\
    \ i < lst.len() {\n        if i % 2 == 0 {\n            sum += lst[i];\n     \
    \   }\n        i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmp69lslwbc.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = vec![];\n    for i in lst.iter().skip(1).map(|&x|\
    \ x + i) {\n        sum.push(i)\n    }\n    sum.iter().sum()\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n --> /tmp/tmpp5mpwy13.rs:6:46\n\
    \  |\n6 |     for i in lst.iter().skip(1).map(|&x| x + i) {\n  |             \
    \                                 ^ help: a local variable with a similar name\
    \ exists: `x`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = 0;\n    for i in lst {\n       \
    \ if i % 2 == 0 {\n            evens += i;\n        }\n    }\n    evens\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpwx2xjxcw.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    for i in lst.iter() {\n        if i % 2 == 1 {\n\
    \            i += 2;\n        }\n    }\n    lst[0]\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&isize`\n --> /tmp/tmpfaionmq5.rs:7:13\n  |\n7 |             i += 2;\n  | \
    \            -^^^^^\n  |             |\n  |             cannot use `+=` on type\
    \ `&isize`\n  |\nhelp: `+=` can be used on `isize`, you can dereference `i`\n\
    \  |\n7 |             *i += 2;\n  |             +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().cloned().skip(1).fold(0, |sum, item|\
    \ sum + item)\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `142`,\n right: `122`', /tmp/tmpif_bf_xu.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.len() == 0 {\n        return 0;\n    }\n\n\
    \    let mut even_index = 0;\n    let mut odd_index = 0;\n    while even_index\
    \ < lst.len() {\n        if odd_index >= lst.len() || lst[even_index] % 2 == 0\
    \ {\n            lst[even_index] += lst[odd_index];\n            odd_index +=\
    \ 1;\n        } else {\n            even_index += 1;\n        }\n    }\n\n   \
    \ lst[0] += lst[1];\n    lst[1] = 0;\n    lst[2] = 0;\n    lst[3] = 0;\n    lst[4]\
    \ = 0;\n\n    lst.len()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0lg6o5rr.rs:26:5\n   |\n\
    4  | fn add(lst: Vec<isize>) -> isize {\n   |                            -----\
    \ expected `isize` because of return type\n...\n26 |     lst.len()\n   |     ^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n26 |     lst.len().try_into().unwrap()\n\
    \   |              ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|x| x % 2 == 0).fold(0, |a, x|\
    \ a + x)\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp89acqez5.rs:5:29\n\
    \  |\n5 |     lst.iter().filter(|x| x % 2 == 0).fold(0, |a, x| a + x)\n  |   \
    \                        - ^ - {integer}\n  |                           |\n  |\
    \                           &&isize\n  |\nhelp: `%` can be used on `isize`, you\
    \ can dereference `x`\n  |\n5 |     lst.iter().filter(|x| *x % 2 == 0).fold(0,\
    \ |a, x| a + x)\n  |                           +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst\n        .iter()\n        .enumerate()\n   \
    \     .filter(|(_, x)| *x % 2 == 1)\n        .map(|(i, x)| x.clone())\n      \
    \  .sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpre61zei_.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n\
    \    for elem in lst {\n        if elem % 2 == 0 {\n            evens.push(elem);\n\
    \        } else {\n            odd.push(elem);\n        }\n    }\n    for i in\
    \ evens.iter() {\n        for j in evens.iter() {\n            if i == j {\n \
    \               continue;\n            }\n            if odd.contains(&i) {\n\
    \                odd.push(i as isize);\n            }\n        }\n    }\n    odd.pop()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv2sqbedz.rs:24:5\n   |\n\
    4  | fn add(lst: Vec<isize>) -> isize {\n   |                            -----\
    \ expected `isize` because of return type\n...\n24 |     odd.pop()\n   |     ^^^^^^^^^\
    \ expected `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n\
    \              found enum `Option<isize>`\n\nerror[E0606]: casting `&isize` as\
    \ `isize` is invalid\n  --> /tmp/tmpv2sqbedz.rs:20:26\n   |\n20 |            \
    \     odd.push(i as isize);\n   |                          -^^^^^^^^^\n   |  \
    \                        |\n   |                          cannot cast `&isize`\
    \ as `isize`\n   |                          help: dereference the expression:\
    \ `*i`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0606.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = 0;\n    for x in lst.iter() {\n\
    \        if x % 2 == 0 {\n            evens += x;\n        }\n    }\n    evens\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpcmkkuq2v.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens: Vec<isize> = Vec::new();\n    let\
    \ mut odds: Vec<isize> = Vec::new();\n    for idx in 0..lst.len() {\n        if\
    \ idx % 2 == 0 {\n            evens.push(lst[idx]);\n        } else {\n      \
    \      odds.push(lst[idx]);\n        }\n    }\n    evens.iter().filter(|x| x %\
    \ 2 == 0).fold(0, |a, b| a + b);\n    odds.iter().filter(|x| x % 2 == 1).fold(0,\
    \ |a, b| a + b);\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpcckpd2z_.rs:14:31\n\
    \   |\n14 |     evens.iter().filter(|x| x % 2 == 0).fold(0, |a, b| a + b);\n \
    \  |                             - ^ - {integer}\n   |                       \
    \      |\n   |                             &&isize\n   |\nhelp: `%` can be used\
    \ on `isize`, you can dereference `x`\n   |\n14 |     evens.iter().filter(|x|\
    \ *x % 2 == 0).fold(0, |a, b| a + b);\n   |                             +\n\n\
    error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpcckpd2z_.rs:15:30\n\
    \   |\n15 |     odds.iter().filter(|x| x % 2 == 1).fold(0, |a, b| a + b);\n  \
    \ |                            - ^ - {integer}\n   |                         \
    \   |\n   |                            &&isize\n   |\nhelp: `%` can be used on\
    \ `isize`, you can dereference `x`\n   |\n15 |     odds.iter().filter(|x| *x %\
    \ 2 == 1).fold(0, |a, b| a + b);\n   |                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcckpd2z_.rs:4:28\n   |\n4  | fn add(lst: Vec<isize>)\
    \ -> isize {\n   |    ---                     ^^^^^ expected `isize`, found `()`\n\
    \   |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n...\n15 |     odds.iter().filter(|x| x % 2 == 1).fold(0, |a, b|\
    \ a + b);\n   |                                                             -\
    \ help: remove this semicolon\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    for i in lst.iter() {\n        if i % 2 == 0 {\n\
    \            lst.push(i + 2);\n        }\n    }\n    lst.iter().sum();\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7poff5uf.rs:4:28\n   |\n\
    4  | fn add(lst: Vec<isize>) -> isize {\n   |    ---                     ^^^^^\
    \ expected `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as\
    \ its body has no tail or `return` expression\n...\n10 |     lst.iter().sum();\n\
    \   |                     - help: remove this semicolon\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = lst;\n    for &i in &mut evens {\n\
    \        if i % 2 == 1 {\n            i += 1;\n        }\n    }\n    evens.len()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuuydzvk7.rs:6:9\n  |\n6 |\
    \     for &i in &mut evens {\n  |         ^^    ---------- this expression has\
    \ type `Option<&mut isize>`\n  |         |\n  |         types differ in mutability\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note: expected mutable reference `&mut isize`\n                     found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuuydzvk7.rs:11:5\n   |\n\
    4  | fn add(lst: Vec<isize>) -> isize {\n   |                            -----\
    \ expected `isize` because of return type\n...\n11 |     evens.len()\n   |   \
    \  ^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a\
    \ `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n11\
    \ |     evens.len().try_into().unwrap()\n   |                ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|x| x % 2 == 0).collect()\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmplbnjbpkg.rs:5:29\n\
    \  |\n5 |     lst.iter().filter(|x| x % 2 == 0).collect()\n  |               \
    \            - ^ - {integer}\n  |                           |\n  |           \
    \                &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n  |\n5 |     lst.iter().filter(|x| *x % 2 == 0).collect()\n  |        \
    \                   +\n\nerror[E0277]: a value of type `isize` cannot be built\
    \ from an iterator over elements of type `&isize`\n    --> /tmp/tmplbnjbpkg.rs:5:39\n\
    \     |\n5    |     lst.iter().filter(|x| x % 2 == 0).collect()\n     |      \
    \                                 ^^^^^^^ value of type `isize` cannot be built\
    \ from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `isize`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0369.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for v in lst.iter_mut() {\n\
    \        if *v % 2 == 0 {\n            *v += 1;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmp6ms36gpy.rs:5:9\n\
    \  |\n5 |     let mut sum = 0;\n  |         ----^^^\n  |         |\n  |      \
    \   help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0596]: cannot borrow `lst` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmp6ms36gpy.rs:6:14\n  |\n4 | fn add(lst: Vec<isize>) -> isize {\n\
    \  |        --- help: consider changing this to be mutable: `mut lst`\n5 |   \
    \  let mut sum = 0;\n6 |     for v in lst.iter_mut() {\n  |              ^^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut total = 0;\n    let mut num_even = 0;\n\n\
    \    for x in lst.iter() {\n        if x % 2 == 0 {\n            total += x;\n\
    \            num_even += 1;\n        }\n    }\n\n    if num_even == 0 {\n    \
    \    return 0;\n    }\n\n    total\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpzc8xtl6l.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|&i| i % 2 == 0).sum()\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp8w7khnox.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut cnt: usize = 0;\n    for i in lst.iter()\
    \ {\n        if i % 2 == 0 {\n            cnt += 1;\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprr1feu7n.rs:11:5\n   |\n\
    4  | fn add(lst: Vec<isize>) -> isize {\n   |                            -----\
    \ expected `isize` because of return type\n...\n11 |     cnt\n   |     ^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |     cnt.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even_index = 0;\n    let mut odd_index =\
    \ 0;\n    while even_index < lst.len() {\n        if even_index % 2 == 0 {\n \
    \           even_index += 1;\n        } else {\n            even_index += 2;\n\
    \        }\n    }\n    while odd_index < lst.len() {\n        if odd_index % 2\
    \ == 0 {\n            odd_index += 1;\n        } else {\n            odd_index\
    \ += 2;\n        }\n    }\n    lst[even_index + odd_index]\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 2 but the index\
    \ is 6', /tmp/tmp54mtfr6y.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n    for (i,\
    \ &i) in lst.iter().enumerate() {\n        if i % 2 == 0 {\n            evens[i]\
    \ = *i;\n        }\n    }\n\n    evens.iter().fold(0, |acc, &e| acc + e)\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0416]: identifier `i` is bound more than once in the same pattern\n\
    \ --> /tmp/tmp963yqozu.rs:6:14\n  |\n6 |     for (i, &i) in lst.iter().enumerate()\
    \ {\n  |              ^ used in a pattern more than once\n\nerror[E0614]: type\
    \ `isize` cannot be dereferenced\n --> /tmp/tmp963yqozu.rs:8:24\n  |\n8 |    \
    \         evens[i] = *i;\n  |                        ^^\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n --> /tmp/tmp963yqozu.rs:8:13\n\
    \  |\n8 |             evens[i] = *i;\n  |             ^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0416, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.len() <= 1 {\n        return 0;\n    }\n\
    \    let mut even_index = 0;\n    let mut odd_index = lst.len() - 1;\n    let\
    \ mut even = 0;\n    let mut odd = 1;\n    while even_index < odd_index {\n  \
    \      if even_index < odd_index {\n            even = even;\n            even_index\
    \ = even_index + 1;\n        } else {\n            odd = odd;\n            odd_index\
    \ = odd_index - 1;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `88`', /tmp/tmpbbzlddmw.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut n = 0usize;\n\n    for n in lst {\n    \
    \    if n % 2 == 1 {\n            n += 1;\n        }\n    }\n\n    n\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjd3de0pv.rs:13:5\n   |\n\
    4  | fn add(lst: Vec<isize>) -> isize {\n   |                            -----\
    \ expected `isize` because of return type\n...\n13 |     n\n   |     ^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n13 |     n.try_into().unwrap()\n\
    \   |      ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = lst[0] % 2 == 0;\n    for &i in lst\
    \ {\n        if i % 2 == 0 {\n            even = true;\n        }\n    }\n   \
    \ even + lst[1]\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkuiyv1gl.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0369]: cannot add `isize`\
    \ to `bool`\n  --> /tmp/tmpkuiyv1gl.rs:11:10\n   |\n11 |     even + lst[1]\n \
    \  |     ---- ^ ------ isize\n   |     |\n   |     bool\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let even: Vec<isize> = lst.drain(..).filter(|x|\
    \ x % 2 == 0);\n    let odd: Vec<isize> = lst.drain(..).filter(|x| x % 2 != 0);\n\
    \    let mut ans: isize = 0;\n    for x in even {\n        ans += x;\n    }\n\
    \    for x in odd {\n        ans += x;\n    }\n    ans\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyn0jpycv.rs:5:28\n  |\n5 |\
    \     let even: Vec<isize> = lst.drain(..).filter(|x| x % 2 == 0);\n  |      \
    \         ----------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found struct `Filter`\n  |               |\n  |               expected due to\
    \ this\n  |\n  = note: expected struct `Vec<isize>`\n             found struct\
    \ `Filter<std::vec::Drain<'_, isize>, [closure@/tmp/tmpyn0jpycv.rs:5:49: 5:63]>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpyn0jpycv.rs:6:27\n  |\n6 |    \
    \ let odd: Vec<isize> = lst.drain(..).filter(|x| x % 2 != 0);\n  |           \
    \   ----------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found\
    \ struct `Filter`\n  |              |\n  |              expected due to this\n\
    \  |\n  = note: expected struct `Vec<isize>`\n             found struct `Filter<std::vec::Drain<'_,\
    \ isize>, [closure@/tmp/tmpyn0jpycv.rs:6:48: 6:62]>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ (i, i) in lst.iter().enumerate() {\n        if i % 2 == 0 {\n            even\
    \ += i;\n        } else {\n            odd += i;\n        }\n    }\n    even\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0416]: identifier `i` is bound more than once in the same pattern\n\
    \ --> /tmp/tmpux61yjuj.rs:7:13\n  |\n7 |     for (i, i) in lst.iter().enumerate()\
    \ {\n  |             ^ used in a pattern more than once\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0416`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.len() == 0 {\n        return 0;\n    }\n\
    \    let mut sum = 0;\n    for index in lst.iter().rev() {\n        if index %\
    \ 2 == 0 {\n            sum += index;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyge4zqo1.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n    let mut\
    \ odds = vec![0; lst.len()];\n    for i in lst.iter() {\n        if i % 2 == 1\
    \ {\n            evens.push(i);\n        } else {\n            odds.push(i);\n\
    \        }\n    }\n    evens.iter().reduce(|a, b| {\n        if b < a { b } else\
    \ { a }\n    })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpftki00t7.rs:9:24\n  |\n9 |\
    \             evens.push(i);\n  |                        ^ expected integer, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |           \
    \  evens.push(*i);\n  |                        +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpftki00t7.rs:11:23\n   |\n11 |             odds.push(i);\n   | \
    \                      ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n11 |             odds.push(*i);\n   |      \
    \                 +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpftki00t7.rs:14:5\n\
    \   |\n4  |   fn add(lst: Vec<isize>) -> isize {\n   |                       \
    \       ----- expected `isize` because of return type\n...\n14 | /     evens.iter().reduce(|a,\
    \ b| {\n15 | |         if b < a { b } else { a }\n16 | |     })\n   | |______^\
    \ expected `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n\
    \              found enum `Option<&{integer}>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    for e in &lst {\n        if *e % 2 == 1 {\n    \
    \        *e += 1;\n        }\n    }\n    lst[0] += lst[1]\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbqbz212w.rs:10:5\n   |\n\
    4  | fn add(lst: Vec<isize>) -> isize {\n   |                            -----\
    \ expected `isize` because of return type\n...\n10 |     lst[0] += lst[1]\n  \
    \ |     ^^^^^^^^^^^^^^^^ expected `isize`, found `()`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for e in lst.iter() {\n  \
    \      if e % 2 == 0 {\n            sum += e;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpcohb71ld.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|x| x % 2 == 0).sum()\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpgtsbmxjz.rs:5:29\n\
    \  |\n5 |     lst.iter().filter(|x| x % 2 == 0).sum()\n  |                   \
    \        - ^ - {integer}\n  |                           |\n  |               \
    \            &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n  |\n5 |     lst.iter().filter(|x| *x % 2 == 0).sum()\n  |            \
    \               +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = lst;\n    let mut odd = even.clone();\n\
    \    for i in even.iter_mut().skip(1) {\n        *i += *(i + 2);\n    }\n    even.extend(odd.iter().cloned());\n\
    \    even.iter().cloned().sum()\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `{integer}` to `&mut isize`\n --> /tmp/tmp0usj4e2f.rs:8:19\n\
    \  |\n8 |         *i += *(i + 2);\n  |                 - ^ - {integer}\n  |  \
    \               |\n  |                 &mut isize\n  |\nhelp: `+` can be used\
    \ on `isize`, you can dereference `i`\n  |\n8 |         *i += *(*i + 2);\n  |\
    \                 +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even: isize = 0;\n    let mut odd: isize\
    \ = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            even += n;\n\
    \        } else {\n            odd += n;\n        }\n    }\n    return even *\
    \ even + odd * odd;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8464`,\n right: `88`', /tmp/tmp76gwrvo_.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter().filter(|&x|\
    \ x % 2 == 0) {\n        sum += i;\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpekkkzc9n.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.reduce(|sum, i| sum + i if i % 2 == 1 as isize)\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator,\
    \ found keyword `if`\n --> /tmp/tmp8q8ww_og.rs:5:33\n  |\n5 |     lst.reduce(|sum,\
    \ i| sum + i if i % 2 == 1 as isize)\n  |                                 ^^ expected\
    \ one of 8 possible tokens\n\nerror[E0599]: `Vec<isize>` is not an iterator\n\
    \   --> /tmp/tmp8q8ww_og.rs:5:9\n    |\n5   |       lst.reduce(|sum, i| sum +\
    \ i if i % 2 == 1 as isize)\n    |           ^^^^^^ `Vec<isize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for i in lst.iter() {\n \
    \       if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpycjftht6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      sum += if i % 2 == 0 {\n            i\n        } else {\n            0\n\
    \        };\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmp9y_olgnf.rs:10:13\n\
    \   |\n7  |           sum += if i % 2 == 0 {\n   |  ________________-\n8  | |\
    \             i\n   | |             - expected because of this\n9  | |       \
    \  } else {\n10 | |             0\n   | |             ^ expected `&isize`, found\
    \ integer\n11 | |         };\n   | |_________- `if` and `else` have incompatible\
    \ types\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0usize;\n    for i in lst.iter()\
    \ {\n        if i.is_odd() {\n            even += i;\n        }\n    }\n    even\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_odd` found for reference `&isize` in\
    \ the current scope\n --> /tmp/tmpnicpt41k.rs:7:14\n  |\n7 |         if i.is_odd()\
    \ {\n  |              ^^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpnicpt41k.rs:8:21\n  |\n8 |             even += i;\n  | \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnicpt41k.rs:11:5\n   |\n4  | fn add(lst: Vec<isize>) ->\
    \ isize {\n   |                            ----- expected `isize` because of return\
    \ type\n...\n11 |     even\n   |     ^^^^ expected `isize`, found `usize`\n  \
    \ |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n11 |     even.try_into().unwrap()\n   |         ++++++++++++++++++++\n\
    \nerror[E0277]: cannot add-assign `&isize` to `usize`\n --> /tmp/tmpnicpt41k.rs:8:18\n\
    \  |\n8 |             even += i;\n  |                  ^^ no implementation for\
    \ `usize += &isize`\n  |\n  = help: the trait `AddAssign<&isize>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst\n        .iter()\n        .map(|x| if x % 2\
    \ == 0 { x } else { 0 })\n        .sum()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp8mkdsjuk.rs:7:45\n\
    \  |\n7 |         .map(|x| if x % 2 == 0 { x } else { 0 })\n  |              \
    \                    -          ^ expected `&isize`, found integer\n  |      \
    \                            |\n  |                                  expected\
    \ because of this\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst\n        .iter()\n        .enumerate()\n   \
    \     .filter_map(|(i, v)| if i % 2 == 1 { Some(v) } else { None })\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqs16mreg.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut s = lst[0];\n    for i in 1..lst.len() {\n\
    \        s += lst[i];\n    }\n    s\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp2ka662k6.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst\n        .iter()\n        .filter(|&x| x % 2\
    \ == 0)\n        .sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpxpb7dp0l.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = isize::MIN;\n    for i in lst {\n\
    \        if i % 2 == 0 {\n            result += i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-9223372036854775716`,\n right: `88`', /tmp/tmpztj9h6w9.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 1 {\n            sum += i;\n        }\n    }\n    return sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpipb_7n2y.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for i in lst.iter().enumerate().filter(|(_,\
    \ x)| x % 2 == 1) {\n        result = result + i;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpcdjic7iy.rs:6:55\n\
    \  |\n6 |     for i in lst.iter().enumerate().filter(|(_, x)| x % 2 == 1) {\n\
    \  |                                                     - ^ - {integer}\n  |\
    \                                                     |\n  |                 \
    \                                    &&isize\n  |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n  |\n6 |     for i in lst.iter().enumerate().filter(|(_,\
    \ x)| *x % 2 == 1) {\n  |                                                    \
    \ +\n\nerror[E0277]: cannot add `(usize, &isize)` to `isize`\n --> /tmp/tmpcdjic7iy.rs:7:25\n\
    \  |\n7 |         result = result + i;\n  |                         ^ no implementation\
    \ for `isize + (usize, &isize)`\n  |\n  = help: the trait `Add<(usize, &isize)>`\
    \ is not implemented for `isize`\n  = help: the following other types implement\
    \ trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as\
    \ Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n\
    \            <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n      \
    \      <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and\
    \ 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum: isize = 0;\n    for i in lst.iter()\
    \ {\n        if i % 2 != 0 {\n            sum += i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpzjkiwjb3.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.reduce(|x, y| x + y).unwrap_or(0)\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpwa9ajsg3.rs:5:9\n\
    \    |\n5   |       lst.reduce(|x, y| x + y).unwrap_or(0)\n    |           ^^^^^^\
    \ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Vec<isize>: Iterator`\n            which is\
    \ required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n \
    \           which is required by `&mut [isize]: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpiz9j23d9.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    for i in lst.iter_mut() {\n        *i += 2;\n  \
    \  }\n    let even = lst.iter().filter(|&x| {\n        (*i % 2) == 0\n    });\n\
    \    even.sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n --> /tmp/tmpspfy_ksh.rs:9:11\n\
    \  |\n9 |         (*i % 2) == 0\n  |           ^ help: a local variable with a\
    \ similar name exists: `x`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ &x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqyns9s2_.rs:7:9\n  |\n7 |\
    \     for &x in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst[..].iter().filter(|&x| *x % 2 != 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpkc5u_y2f.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst\n        .iter()\n        .filter(|x| *x % 2\
    \ == 0)\n        .fold(0, |a, b| a + b)\n}\n\nfn main() {\n    let candidate =\
    \ add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp6stvjo9q.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst[..]\n        .iter()\n        .filter(|&x| x\
    \ % 2 == 1)\n        .cloned()\n        .sum()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmp0fp22ylt.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpnrsdhn8w.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst\n        .iter()\n        .filter(|&x| x % 2\
    \ == 0)\n        .sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmphcubint_.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\
    \    let mut sum_even = 0;\n    for n in lst.iter() {\n        if n % 2 == 0 {\n\
    \            sum_even += n;\n        }\n    }\n    return sum_even;\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpge20w_wg.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if\
    \ i % 2 == 1 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpsmy29w55.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = 0;\n    let mut odds = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            evens += 1;\n        } else\
    \ {\n            odds += 1;\n        }\n    }\n\n    if evens > odds {\n     \
    \   return evens;\n    } else {\n        return odds;\n    }\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `88`', /tmp/tmpoy3kryoc.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n\n    for &index in lst.iter().rev().enumerate().filter_map(|(index,\
    \ elt)| {\n        if index%2 == 0 {\n            sum += elt;\n        }\n   \
    \     Some(elt)\n    }) {\n        sum += index.0;\n    }\n\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0610]: `isize` is a primitive type and therefore doesn't have fields\n\
    \  --> /tmp/tmpxc4akgyx.rs:13:22\n   |\n13 |         sum += index.0;\n   |   \
    \                   ^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0610`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.len() == 0 {\n        return 0;\n    }\n\
    \    let mut sum: isize = 0;\n    for i in 0..(lst.len() - 1) {\n        if i\
    \ % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpra3bs7so.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.len() == 0 {\n        return 0;\n    }\n\
    \    for i in 0..lst.len() - 1 {\n        if i % 2 == 1 {\n            lst[i]\
    \ += 1;\n        }\n    }\n    lst[0]\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `lst` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmpm7yvm1fy.rs:10:13\n   |\n4  | fn add(lst: Vec<isize>)\
    \ -> isize {\n   |        --- help: consider changing this to be mutable: `mut\
    \ lst`\n...\n10 |             lst[i] += 1;\n   |             ^^^ cannot borrow\
    \ as mutable\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().fold(0, |sum, e| {\n        if let Some(i)\
    \ = l.index(e) {\n            sum += e;\n        }\n        sum\n    })\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `l` in this scope\n --> /tmp/tmp06j71v9o.rs:6:26\n\
    \  |\n6 |         if let Some(i) = l.index(e) {\n  |                         \
    \ ^ help: a local variable with a similar name exists: `e`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even_elements = 0;\n    for elem in lst\
    \ {\n        if elem % 2 == 0 {\n            even_elements += elem;\n        }\n\
    \    }\n    even_elements\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp372j70y4.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n\
    \    let mut sum = 0;\n    for i in lst {\n        if i % 2 == 1 {\n         \
    \   sum += i;\n        }\n    }\n\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpu4jwk7yr.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < lst.len() {\n    \
    \    if lst[i] % 2 == 0 {\n            i += 1;\n            continue;\n      \
    \  }\n        return lst[i];\n    }\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbsu16hmg.rs:6:5\n   |\n4\
    \  |   fn add(lst: Vec<isize>) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n5  |       let mut i = 0;\n6  | / \
    \    while i < lst.len() {\n7  | |         if lst[i] % 2 == 0 {\n8  | |      \
    \       i += 1;\n9  | |             continue;\n10 | |         }\n11 | |      \
    \   return lst[i];\n12 | |     }\n   | |_____^ expected `isize`, found `()`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(idx, el)| {\n  \
    \      idx % 2 == 1\n    }).map(|(idx, el)| el).sum()\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp73t169pv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut total: isize = 0;\n    for n in lst {\n\
    \        if n % 2 == 0 {\n            total += n;\n        }\n    }\n    total\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpshlmya_a.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n\
    \    for ele in lst.iter() {\n        if ele % 2 == 0 {\n            evens.push(ele);\n\
    \        } else {\n            odd.push(ele);\n        }\n    }\n    evens.iter().reduce(|mut\
    \ acc, elem| {\n        acc += ele;\n        acc\n    });\n    odd.iter().reduce(|mut\
    \ acc, elem| {\n        acc += ele;\n        acc\n    });\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `ele` in this scope\n  --> /tmp/tmpq2b0pfxl.rs:15:16\n\
    \   |\n15 |         acc += ele;\n   |                ^^^ help: a local variable\
    \ with a similar name exists: `elem`\n\nerror[E0425]: cannot find value `ele`\
    \ in this scope\n  --> /tmp/tmpq2b0pfxl.rs:19:16\n   |\n19 |         acc += ele;\n\
    \   |                ^^^ help: a local variable with a similar name exists: `elem`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpq2b0pfxl.rs:4:28\n  |\n4 | fn add(lst:\
    \ Vec<isize>) -> isize {\n  |    ---                     ^^^^^ expected `isize`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().skip(1).fold(0, |a, x| a + x)\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `142`,\n right: `122`', /tmp/tmp5p525_2w.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ el in lst {\n        if el % 2 == 0 {\n            even = el;\n        } else\
    \ {\n            odd += el;\n        }\n    }\n    return even + odd\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `88`', /tmp/tmphv69l60v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            sum += x;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmplj1ft4t4.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even: Vec<isize> = Vec::new();\n    let\
    \ mut odd: Vec<isize> = Vec::new();\n    for x in lst {\n        if x % 2 == 0\
    \ {\n            even.push(x);\n        } else {\n            odd.push(x);\n \
    \       }\n    }\n    even.clone() + odd.clone()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp7ney2d5t.rs:14:18\n\
    \   |\n14 |     even.clone() + odd.clone()\n   |     ------------ ^ -----------\
    \ Vec<isize>\n   |     |\n   |     Vec<isize>\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter().enumerate()\
    \ {\n        let (odd, even) = i;\n        if even % 2 == 1 {\n            sum\
    \ += even;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmp2r9slyfo.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\
    \    let mut sum = 0;\n    for i in 0..lst.len() - 1 {\n        if i % 2 == 0\
    \ {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpcionqfl6.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.len() > 0 {}\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp4ml63_g0.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|&i| i % 2 == 0).sum()\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpgdxfhklm.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n\n    for\
    \ ele in lst {\n        if ele % 2 == 0 {\n            even += ele;\n        }\
    \ else {\n            odd += ele;\n        }\n    }\n\n    even + odd\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp2tek1y2j.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.reduce(0, |acc, x| acc + if x % 2 == 1 { x }\
    \ else { 0 })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp_iuz5n2m.rs:5:9\n\
    \    |\n5   |       lst.reduce(0, |acc, x| acc + if x % 2 == 1 { x } else { 0\
    \ })\n    |           ^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n\
    \            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum\
    \ += i;\n    }\n    for i in lst {\n        if i % 2 != 0 {\n            sum +=\
    \ i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate =\
    \ add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpumbi2f0v.rs:9:14\n\
    \    |\n4   | fn add(lst: Vec<isize>) -> isize {\n    |        --- move occurs\
    \ because `lst` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    5   |     let mut sum = 0;\n6   |     for i in lst {\n    |              --- `lst`\
    \ moved due to this implicit call to `.into_iter()`\n...\n9   |     for i in lst\
    \ {\n    |              ^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n6   |     for i in &lst {\n    |              +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.rev().filter_map(|x| x.checked_add(*2) % 2).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpyb2azdoo.rs:5:9\n\
    \    |\n5   |       lst.rev().filter_map(|x| x.checked_add(*2) % 2).sum()\n  \
    \  |           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n     \
    \       which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0614]:\
    \ type `{integer}` cannot be dereferenced\n --> /tmp/tmpyb2azdoo.rs:5:44\n  |\n\
    5 |     lst.rev().filter_map(|x| x.checked_add(*2) % 2).sum()\n  |           \
    \                                 ^^\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0599, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, val) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            sum += val;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpf66quozu.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut acc = 0;\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            acc += i;\n        }\n    }\n    return acc;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpaarj40pu.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even: isize = 0;\n    let mut odd: isize\
    \ = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            even = even +\
    \ n;\n        } else {\n            odd = odd + n;\n        }\n    }\n    even\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp0s_qw8ii.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ n in lst {\n        if n % 2 == 0 {\n            even += n;\n        } else\
    \ {\n            odd += n;\n        }\n    }\n    return even + odd\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpecmr0q76.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even_index = 0;\n    let mut odd_index =\
    \ lst\n        .len()\n        .checked_div(2)\n        .unwrap();\n\n    for\
    \ index in 0..lst.len() {\n        if index % 2 == 0 {\n            even_index\
    \ += index;\n        } else {\n            odd_index += index;\n        }\n  \
    \  }\n\n    even_index + odd_index\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2_kxprre.rs:19:5\n   |\n\
    4  | fn add(lst: Vec<isize>) -> isize {\n   |                            -----\
    \ expected `isize` because of return type\n...\n19 |     even_index + odd_index\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |     (even_index + odd_index).try_into().unwrap()\n   |     +\
    \                      +++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ ele in lst.iter().enumerate() {\n        if ele.0 % 2 == 0 {\n            even\
    \ = even + ele.1;\n        } else {\n            odd = odd + ele.1;\n        }\n\
    \    }\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp9nu9mcoa.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.remove_indices().iter().map(|&i| i * 2).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `remove_indices` found for struct `Vec<isize>`\
    \ in the current scope\n --> /tmp/tmpb3j0mtbs.rs:5:9\n  |\n5 |     lst.remove_indices().iter().map(|&i|\
    \ i * 2).sum()\n  |         ^^^^^^^^^^^^^^ method not found in `Vec<isize>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.reduce(0, |sum, el| sum + el % 2 == 0 ? sum\
    \ : el)\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `sum`\n\
    \ --> /tmp/tmpek_2vwnz.rs:5:49\n  |\n5 |     lst.reduce(0, |sum, el| sum + el\
    \ % 2 == 0 ? sum : el)\n  |                                                -^^^\
    \ expected one of `)`, `,`, `.`, `?`, or an operator\n  |                    \
    \                            |\n  |                                          \
    \      help: missing `,`\n\nerror[E0425]: cannot find value `sum` in this scope\n\
    \ --> /tmp/tmpek_2vwnz.rs:5:49\n  |\n5 |     lst.reduce(0, |sum, el| sum + el\
    \ % 2 == 0 ? sum : el)\n  |                                                 ^^^\
    \ expecting a type here because of type ascription\n\nerror[E0412]: cannot find\
    \ type `el` in this scope\n --> /tmp/tmpek_2vwnz.rs:5:55\n  |\n5 |     lst.reduce(0,\
    \ |sum, el| sum + el % 2 == 0 ? sum : el)\n  |                               \
    \                        ^^ expecting a type here because of type ascription\n\
    \nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpek_2vwnz.rs:5:9\n\
    \    |\n5   |       lst.reduce(0, |sum, el| sum + el % 2 == 0 ? sum : el)\n  \
    \  |           ^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n\
    \            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0277]:\
    \ the `?` operator can only be applied to values that implement `Try`\n --> /tmp/tmpek_2vwnz.rs:5:45\n\
    \  |\n5 |     lst.reduce(0, |sum, el| sum + el % 2 == 0 ? sum : el)\n  |     \
    \                                        ^^^ the `?` operator cannot be applied\
    \ to type `{integer}`\n  |\n  = help: the trait `Try` is not implemented for `{integer}`\n\
    \nerror[E0277]: the `?` operator can only be used in a closure that returns `Result`\
    \ or `Option` (or another type that implements `FromResidual`)\n --> /tmp/tmpek_2vwnz.rs:5:47\n\
    \  |\n5 |     lst.reduce(0, |sum, el| sum + el % 2 == 0 ? sum : el)\n  |     \
    \              ----------------------------^\n  |                   |        \
    \          "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let len = lst.len();\n   \
    \ for i in 0..len {\n        if i % 2 == 0 {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmp9oy0r6le.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|&n| n % 2 == 0).sum()\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpl14ik8d8.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut res = 0;\n    for e in lst {\n        res\
    \ += e;\n    }\n    res\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpk98cqm3o.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpfh8tfqgm.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = vec![];\n    for idx in 0..lst.len()\
    \ {\n        if idx % 2 == 0 {\n            evens.push(lst[idx]);\n        }\n\
    \    }\n    evens.into_iter().sum()\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpaozdqaa_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter().enumerate()\
    \ {\n        if i[1] % 2 == 0 {\n            sum += i[0];\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `(usize, &isize)`\n -->\
    \ /tmp/tmpiie4_9r7.rs:7:12\n  |\n7 |         if i[1] % 2 == 0 {\n  |         \
    \   ^^^^ help: to access tuple elements, use: `i.1`\n\nerror[E0608]: cannot index\
    \ into a value of type `(usize, &isize)`\n --> /tmp/tmpiie4_9r7.rs:8:20\n  |\n\
    8 |             sum += i[0];\n  |                    ^^^^ help: to access tuple\
    \ elements, use: `i.0`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0608`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\
    \    let mut evens = lst;\n    let mut odds = lst.clone();\n    evens.swap_remove(1);\n\
    \    odds.swap_remove(1);\n    let mut result = 0;\n    for &i in evens {\n  \
    \      result = i + result;\n    }\n    for &i in odds {\n        result = i +\
    \ result;\n    }\n    result\n}\n\nfn main() {\n    let candidate = add;\n   \
    \ assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps199nsnc.rs:13:9\n   |\n\
    13 |     for &i in evens {\n   |         ^^    ----- this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `i`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmps199nsnc.rs:16:9\n   |\n16 |     for &i in odds\
    \ {\n   |         ^^    ---- this expression has type `Option<isize>`\n   |  \
    \       |\n   |         expected `isize`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    for i in lst {\n        if i % 2 == 0 {\n      \
    \      i + 3\n        } else {\n            i + 2\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpebe26v8p.rs:7:13\n   |\n\
    6  | /         if i % 2 == 0 {\n7  | |             i + 3\n   | |             ^^^^^\
    \ expected `()`, found `isize`\n8  | |         } else {\n9  | |             i\
    \ + 2\n10 | |         }\n   | |_________- expected this to be `()`\n   |\nhelp:\
    \ consider using a semicolon here\n   |\n10 |         };\n   |          +\nhelp:\
    \ you might have meant to return this value\n   |\n7  |             return i +\
    \ 3;\n   |             ++++++      +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpebe26v8p.rs:9:13\n   |\n6  | /         if i % 2 == 0 {\n7  | |     \
    \        i + 3\n8  | |         } else {\n9  | |             i + 2\n   | |    \
    \         ^^^^^ expected `()`, found `isize`\n10 | |         }\n   | |_________-\
    \ expected this to be `()`\n   |\nhelp: consider using a semicolon here\n   |\n\
    10 |         };\n   |          +\nhelp: you might have meant to return this value\n\
    \   |\n9  |             return i + 2;\n   |             ++++++      +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpebe26v8p.rs:5:5\n   |\n4  |   fn add(lst: Vec<isize>)\
    \ -> isize {\n   |                              ----- expected `isize` because\
    \ of return type\n5  | /     for i in lst {\n6  | |         if i % 2 == 0 {\n\
    7  | |             i + 3\n8  | |         } else {\n9  | |             i + 2\n\
    10 | |         }\n11 | |     }\n   | |_____^ expected `isize`, found `()`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|x| x % 2 == 0).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmphz2skvdx.rs:5:29\n\
    \  |\n5 |     lst.iter().filter(|x| x % 2 == 0).sum::<isize>()\n  |          \
    \                 - ^ - {integer}\n  |                           |\n  |      \
    \                     &&isize\n  |\nhelp: `%` can be used on `isize`, you can\
    \ dereference `x`\n  |\n5 |     lst.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n\
    \  |                           +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|&x| x % 2 == 0).sum()\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpwvbkz7qa.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmphx3przfb.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = 0;\n    for e in lst.iter_mut()\
    \ {\n        if e % 2 != 0 {\n            *e += 1;\n            evens += 1;\n\
    \        }\n    }\n\n    evens\n}\n\nfn main() {\n    let candidate = add;\n \
    \   assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n --> /tmp/tmpq4ifm8go.rs:7:14\n\
    \  |\n7 |         if e % 2 != 0 {\n  |            - ^ - {integer}\n  |       \
    \     |\n  |            &mut isize\n  |\nhelp: `%` can be used on `isize`, you\
    \ can dereference `e`\n  |\n7 |         if *e % 2 != 0 {\n  |            +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst\n        .iter()\n        .map(|x| if x % 2\
    \ == 1 { x } else { x % 2 })\n        .sum()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpb6i3klgs.rs:7:45\n\
    \  |\n7 |         .map(|x| if x % 2 == 1 { x } else { x % 2 })\n  |          \
    \                        -          ^^^^^ expected `&isize`, found `isize`\n \
    \ |                                  |\n  |                                  expected\
    \ because of this\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst\n        .iter()\n        .zip(lst.iter().cloned())\n\
    \        .filter(|&(_, e)| e % 2 != 0)\n        .sum::<isize>()\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<(&isize, isize)>` is not satisfied\n\
    \    --> /tmp/tmpjdhinptt.rs:9:10\n     |\n9    |         .sum::<isize>()\n  \
    \   |          ^^^ the trait `Sum<(&isize, isize)>` is not implemented for `isize`\n\
    \     |\n     = help: the following other types implement trait `Sum<A>`:\n  \
    \             <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n           \
    \    <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128\
    \ as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpkf0k41q9.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.len() > 0 {\n        if lst.len() % 2 !=\
    \ 0 {\n            lst[lst.len()-1] += lst[lst.len()-2]\n        }\n    }\n  \
    \  return lst.len()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps6cxntgs.rs:10:12\n   |\n\
    4  | fn add(lst: Vec<isize>) -> isize {\n   |                            -----\
    \ expected `isize` because of return type\n...\n10 |     return lst.len()\n  \
    \ |            ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n10 |     return lst.len().try_into().unwrap()\n   |                   \
    \  ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut acc = Vec::new();\n    for &x in lst {\n\
    \        if x % 2 == 1 {\n            acc.push(x);\n        }\n    }\n    acc.len()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfl54mslh.rs:6:9\n  |\n6 |\
    \     for &x in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfl54mslh.rs:11:5\n   |\n4  | fn add(lst: Vec<isize>) -> isize {\n\
    \   |                            ----- expected `isize` because of return type\n\
    ...\n11 |     acc.len()\n   |     ^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n11 |     acc.len().try_into().unwrap()\n   |      \
    \        ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|x| *x % 2 == 0).sum()\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpwi4ubgdw.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (index, value) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 0 {\n            sum += value;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpzhja4gvt.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.rev().iter().filter(|&i| i % 2 == 0).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmphohrw_m_.rs:5:9\n\
    \    |\n5   |       lst.rev().iter().filter(|&i| i % 2 == 0).sum::<isize>()\n\
    \    |           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n     \
    \       which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even: isize = 0;\n    let mut odd: isize\
    \ = 0;\n    for element in lst {\n        if element % 2 == 0 {\n            even\
    \ = even + element;\n        }\n        else {\n            odd = odd + element;\n\
    \        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpxazw0omu.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    return even + odd;\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpa38zt02u.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\
    \    let mut sum = 0;\n    for (i, elt) in lst.iter_mut().enumerate() {\n    \
    \    if i % 2 == 0 {\n            sum += elt;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `&mut isize` to `{integer}`\n  --> /tmp/tmp2fvgmbjs.rs:11:17\n\
    \   |\n11 |             sum += elt;\n   |                 ^^ no implementation\
    \ for `{integer} += &mut isize`\n   |\n   = help: the trait `AddAssign<&mut isize>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter()\n        .enumerate()\n        .filter(|(_,\
    \ v)| v % 2 == 1)\n        .map(|(_, v)| v)\n        .sum()\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpdrbo002c.rs:7:28\n\
    \  |\n7 |         .filter(|(_, v)| v % 2 == 1)\n  |                          -\
    \ ^ - {integer}\n  |                          |\n  |                         \
    \ &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference `v`\n  |\n\
    7 |         .filter(|(_, v)| *v % 2 == 1)\n  |                          +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut s = isize::MIN;\n\n    for i in lst.iter()\
    \ {\n        if i % 2 == 0 {\n            s += i;\n        }\n    }\n\n    s\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-9223372036854775716`,\n right: `88`', /tmp/tmp14eh0tn1.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst\n        .iter()\n        .enumerate()\n   \
    \     .map(|(i, v)| v % 2 != 0 && v % 2 == 1 ? v : 0)\n        .sum()\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `v`\n\
    \ --> /tmp/tmpnvubpmlq.rs:8:50\n  |\n8 |         .map(|(i, v)| v % 2 != 0 && v\
    \ % 2 == 1 ? v : 0)\n  |                                                  ^ expected\
    \ one of `)`, `,`, `.`, `?`, or an operator\n\nerror: expected one of `!`, `&&`,\
    \ `&`, `(`, `)`, `*`, `...`, `.`, `;`, `<`, `?`, `[`, `_`, `async`, `const`, `dyn`,\
    \ `extern`, `fn`, `for`, `impl`, `unsafe`, `}`, `~`, an operator, lifetime, or\
    \ path, found `0`\n --> /tmp/tmpnvubpmlq.rs:8:54\n  |\n8 |         .map(|(i, v)|\
    \ v % 2 != 0 && v % 2 == 1 ? v : 0)\n  |                                     \
    \                 ^ expected one of 26 possible tokens\n\nerror: aborting due\
    \ to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum_even = 0;\n    for (i, e) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            sum_even += e;\n        }\n    }\n \
    \   sum_even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpqxh5q0u6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp68suq4up.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.len() <= 0 {\n        0\n    } else {\n \
    \       let mut sum = 0;\n        for i in 1..lst.len() {\n            if i %\
    \ 2 == 0 {\n                sum += lst[i - 1];\n            }\n        }\n   \
    \     sum\n    }\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpaasm7xb3.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter_map(|x| {\n        if x % 2 ==\
    \ 1 { Some(x) } else { None }\n    }).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmp9fnmilwq.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    for i in 0..lst.len() {\n        if i % 2 == 0 {\n\
    \            lst[i] += 2;\n        }\n    }\n    lst[0]\n}\n\nfn main() {\n  \
    \  let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `lst` as mutable, as it is not declared as\
    \ mutable\n --> /tmp/tmpx659acka.rs:7:13\n  |\n4 | fn add(lst: Vec<isize>) ->\
    \ isize {\n  |        --- help: consider changing this to be mutable: `mut lst`\n\
    ...\n7 |             lst[i] += 2;\n  |             ^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    for i in (0..(lst.len())).filter(|&i| i % 2 == 0)\
    \ {\n        lst.push(*i);\n    }\n    lst.reduce { |a, b| a + b }\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error: expected one of `(`, `.`, `::`, `;`, `?`, `}`, or an operator, found\
    \ `{`\n --> /tmp/tmphm41w4cw.rs:8:16\n  |\n8 |     lst.reduce { |a, b| a + b }\n\
    \  |                ^ expected one of 7 possible tokens\n\nerror[E0614]: type\
    \ `usize` cannot be dereferenced\n --> /tmp/tmphm41w4cw.rs:6:18\n  |\n6 |    \
    \     lst.push(*i);\n  |                  ^^\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|&x| x % 2 == 0).sum()\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmptuv1bnho.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = Vec::new();\n    let mut odds =\
    \ Vec::new();\n    for i in lst.iter() {\n        if i % 2 == 0 {\n          \
    \  evens.push(i);\n        } else {\n            odds.push(i);\n        }\n  \
    \  }\n\n    if evens.len() == 0 {\n        return 0;\n    }\n    if evens.len()\
    \ == 1 {\n        return evens[0];\n    }\n\n    for i in evens.iter() {\n   \
    \     evens.pop();\n        odds.push(i);\n    }\n\n    odds[0] + add(odds.iter().cloned())\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp22ublbdg.rs:19:16\n   |\n\
    4  | fn add(lst: Vec<isize>) -> isize {\n   |                            -----\
    \ expected `isize` because of return type\n...\n19 |         return evens[0];\n\
    \   |                ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the type\n   |\n19 |         return *evens[0];\n   |         \
    \       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22ublbdg.rs:27:19\n\
    \   |\n27 |     odds[0] + add(odds.iter().cloned())\n   |                   ^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Cloned`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Cloned<std::slice::Iter<'_, &isize>>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).fold(0, |mut x, (_, y)| x + y)\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp8k52iuxz.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even_count = 0;\n    for num in lst {\n\
    \        if num % 2 == 0 {\n            even_count = even_count+1;\n        }\n\
    \    }\n    return even_count;\n}\n\nfn main() {\n    let candidate = add;\n \
    \   assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `88`', /tmp/tmpn99c1pju.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst\n        .iter()\n        .enumerate()\n   \
    \     .filter(|(e, i)| i % 2 == 0)\n        .map(|(e, i)| e + i.0)\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpht5fyq3j.rs:8:28\n\
    \  |\n8 |         .filter(|(e, i)| i % 2 == 0)\n  |                          -\
    \ ^ - {integer}\n  |                          |\n  |                         \
    \ &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference `i`\n  |\n\
    8 |         .filter(|(e, i)| *i % 2 == 0)\n  |                          +\n\n\
    error[E0609]: no field `0` on type `&isize`\n --> /tmp/tmpht5fyq3j.rs:9:29\n \
    \ |\n9 |         .map(|(e, i)| e + i.0)\n  |                             ^\n\n\
    error[E0277]: the trait bound `isize: Sum<usize>` is not satisfied\n    --> /tmp/tmpht5fyq3j.rs:10:10\n\
    \     |\n10   |         .sum()\n     |          ^^^ the trait `Sum<usize>` is\
    \ not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0369, E0609.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for num in lst.iter() {\n\
    \        if num % 2 == 0 {\n            even += num;\n        }\n    }\n    even\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp810stesk.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in &lst {\n       \
    \ if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpaxpsb_wg.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = vec![];\n    let mut odds = vec![];\n\
    \n    for val in lst {\n        if val % 2 == 0 {\n            evens.push(val);\n\
    \        } else {\n            odds.push(val);\n        }\n    }\n\n    evens.iter().cloned().sum::<isize>()\n\
    \        + odds.iter().cloned().sum::<isize>()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmplyd7o0q_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut res = 0;\n    let mut cur_pos = 0;\n   \
    \ while cur_pos < lst.len() {\n        if cur_pos % 2 == 0 {\n            res\
    \ += lst[cur_pos];\n        }\n        cur_pos += 1;\n    }\n    res\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpnohfrq62.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut new_lst = Vec::new();\n    let len = lst.len();\n\
    \    for i in 0..len {\n        if i % 2 == 0 {\n            new_lst.push(lst[i]);\n\
    \        }\n    }\n    new_lst.into_iter().sum::<isize>()\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpvu2iet7s.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpxm5mlan9.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.len() == 0 {\n        return 0;\n    }\n\
    \    let mut evens = 0;\n    let mut i = 0;\n    while i < lst.len() {\n     \
    \   if lst[i/2].is_odd()  {\n            evens += lst[i/2].clone(); \n       \
    \     i += 1;\n        } else {\n            i += 1;\n        }\n    }\n    evens\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_odd` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp9ke_8k3j.rs:11:21\n   |\n11 |         if lst[i/2].is_odd()\
    \  {\n   |                     ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = lst[..];\n    for &i in &lst[1..]\
    \ {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n \
    \   evens.sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n --> /tmp/tmpbrob35jd.rs:5:9\n  |\n5 |     let mut evens =\
    \ lst[..];\n  |         ^^^^^^^^^ doesn't have a size known at compile-time\n\
    \  |\n  = help: the trait `Sized` is not implemented for `[isize]`\n  = note:\
    \ all local variables must have a statically known size\n  = help: unsized locals\
    \ are gated as an unstable feature\nhelp: consider borrowing here\n  |\n5 |  \
    \   let mut evens = &lst[..];\n  |                     +\n\nerror[E0599]: no method\
    \ named `push` found for slice `[isize]` in the current scope\n --> /tmp/tmpbrob35jd.rs:8:19\n\
    \  |\n8 |             evens.push(i);\n  |                   ^^^^ method not found\
    \ in `[isize]`\n\nerror[E0599]: `[isize]` is not an iterator\n  --> /tmp/tmpbrob35jd.rs:11:11\n\
    \   |\n11 |     evens.sum()\n   |           ^^^ `[isize]` is not an iterator;\
    \ try calling `.into_iter()` or `.iter()`\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `[isize]: Iterator`\n           which\
    \ is required by `&mut [isize]: Iterator`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpohao0402.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            even += 1;\n       \
    \ } else {\n            odd += 1;\n        }\n    }\n\n    even * odd\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmp6uqhlx7u.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = Vec::new();\n    let mut odds =\
    \ Vec::new();\n    for i in lst.iter() {\n        if i % 2 == 0 {\n          \
    \  evens.push(i);\n        } else {\n            odds.push(i);\n        }\n  \
    \  }\n    for e in evens {\n        if !odds.contains(&e + 1) {\n            odds.push(e\
    \ + 1);\n        }\n    }\n    odds[0] as isize\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `{integer}` to `&&isize`\n  --> /tmp/tmp17lx4uiq.rs:15:30\n\
    \   |\n15 |         if !odds.contains(&e + 1) {\n   |                        \
    \   -- ^ - {integer}\n   |                           |\n   |                 \
    \          &&isize\n   |\nhelp: `+` can be used on `isize`, you can dereference\
    \ `&e`\n   |\n15 |         if !odds.contains(*&e + 1) {\n   |                \
    \           +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp17lx4uiq.rs:16:23\n\
    \   |\n16 |             odds.push(e + 1);\n   |                       ^^^^^\n\
    \   |                       |\n   |                       expected `&isize`, found\
    \ `isize`\n   |                       help: consider borrowing here: `&(e + 1)`\n\
    \nerror[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmp17lx4uiq.rs:19:5\n\
    \   |\n19 |     odds[0] as isize\n   |     -------^^^^^^^^^\n   |     |\n   |\
    \     cannot cast `&isize` as `isize`\n   |     help: dereference the expression:\
    \ `*odds[0]`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0369, E0606.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum: isize = 0;\n    for i in lst {\n  \
    \      if i % 2 == 1 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmp9_zsdomm.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.len() == 0 {\n        return 0;\n    }\n\
    \    if lst.len() == 1 {\n        return lst[0];\n    }\n    let mut sum = 0;\n\
    \    for i in 0..(lst.len() - 1) {\n        if i % 2 == 0 {\n            sum +=\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpm5zjaku5.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.len() < 2 {\n        return 0;\n    }\n \
    \   lst.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpxr5v5tab.rs:8:29\n\
    \  |\n8 |     lst.iter().filter(|x| x % 2 == 0).sum::<isize>()\n  |          \
    \                 - ^ - {integer}\n  |                           |\n  |      \
    \                     &&isize\n  |\nhelp: `%` can be used on `isize`, you can\
    \ dereference `x`\n  |\n8 |     lst.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n\
    \  |                           +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(_, x)| {\n     \
    \   // x is at odd index\n        x % 2 != 0\n    }).fold(0, |a, n| a + n)\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpvxr041z0.rs:7:11\n\
    \  |\n7 |         x % 2 != 0\n  |         - ^ - {integer}\n  |         |\n  |\
    \         &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n  |\n7 |         *x % 2 != 0\n  |         +\n\nerror[E0277]: cannot add\
    \ `(usize, &isize)` to `isize`\n --> /tmp/tmpvxr041z0.rs:8:25\n  |\n8 |     }).fold(0,\
    \ |a, n| a + n)\n  |                         ^ no implementation for `isize +\
    \ (usize, &isize)`\n  |\n  = help: the trait `Add<(usize, &isize)>` is not implemented\
    \ for `isize`\n  = help: the following other types implement trait `Add<Rhs>`:\n\
    \            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n      \
    \      <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n          \
    \  <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a\
    \ i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0369.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter().filter(|&x|\
    \ x % 2 == 1).enumerate() {\n        sum += i.1;\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmp98ftje8w.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut acc: isize = 0;\n    for (i, isize) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            acc += isize;\n        }\n    }\n  \
    \  acc\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpohx860z6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    for i1 in lst {\n        for i2 in lst.iter().skip(i1)\
    \ {\n            if i1 % 2 == 0 {\n                return i2 + i1;\n         \
    \   }\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = add;\n \
    \   assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsz7cmto0.rs:6:35\n  |\n6 |\
    \         for i2 in lst.iter().skip(i1) {\n  |                               \
    \    ^^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n  |\n6 |        \
    \ for i2 in lst.iter().skip(i1.try_into().unwrap()) {\n  |                   \
    \                  ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|x| x % 2 == 0).sum()\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp7ueogmol.rs:5:29\n\
    \  |\n5 |     lst.iter().filter(|x| x % 2 == 0).sum()\n  |                   \
    \        - ^ - {integer}\n  |                           |\n  |               \
    \            &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n  |\n5 |     lst.iter().filter(|x| *x % 2 == 0).sum()\n  |            \
    \               +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter_mut() {\n\
    \        if *i % 2 == 1 {\n            *i += 1;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpo_eti1k_.rs:5:9\n\
    \  |\n5 |     let mut sum = 0;\n  |         ----^^^\n  |         |\n  |      \
    \   help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0596]: cannot borrow `lst` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpo_eti1k_.rs:6:14\n  |\n4 | fn add(lst: Vec<isize>) -> isize {\n\
    \  |        --- help: consider changing this to be mutable: `mut lst`\n5 |   \
    \  let mut sum = 0;\n6 |     for i in lst.iter_mut() {\n  |              ^^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = isize::MIN;\n\n    for v in lst.iter()\
    \ {\n        sum += v & 1;\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-9223372036854775808`,\n right: `88`', /tmp/tmpdkj4lg57.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0usize;\n    for e in lst {\n   \
    \     if e % 2 == 0 {\n            even += e;\n        }\n    }\n    return even;\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe6gtyi5f.rs:8:21\n  |\n8 |\
    \             even += e;\n  |                     ^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot add-assign `isize` to `usize`\n --> /tmp/tmpe6gtyi5f.rs:8:18\n\
    \  |\n8 |             even += e;\n  |                  ^^ no implementation for\
    \ `usize += isize`\n  |\n  = help: the trait `AddAssign<isize>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe6gtyi5f.rs:11:12\n   |\n4  | fn add(lst: Vec<isize>) ->\
    \ isize {\n   |                            ----- expected `isize` because of return\
    \ type\n...\n11 |     return even;\n   |            ^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n11 |     return even.try_into().unwrap();\n\
    \   |                ++++++++++++++++++++\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|&x| x % 2 == 0).fold(0, |x, y|\
    \ x + y)\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmphrtnvzw0.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = 0;\n    for (i, el) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            evens += el;\n        }\n    }\n   \
    \ evens\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpo4cv_9ep.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut s = 0;\n    for x in lst {\n        if x\
    \ % 2 != 0 {\n            s += x;\n        }\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpvguhfncp.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    for i in lst {\n        if i % 2 == 0 {\n      \
    \      lst.insert(i, i + 2)\n        }\n    }\n    lst[0]\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7_qlzcna.rs:7:24\n  |\n7 |\
    \             lst.insert(i, i + 2)\n  |                        ^ expected `usize`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n  |\n7 |             lst.insert(i.try_into().unwrap(),\
    \ i + 2)\n  |                         ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = 0.;\n    for e in lst[0..lst.length\
    \ - 1] {\n        if e % 2 == 0 {\n            evens += e;\n        }\n    }\n\
    \    return evens\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0609]: no field `length` on type `Vec<isize>`\n --> /tmp/tmpyfqit14u.rs:6:25\n\
    \  |\n6 |     for e in lst[0..lst.length - 1] {\n  |                         ^^^^^^\
    \ unknown field\n\nerror[E0277]: the size for values of type `[isize]` cannot\
    \ be known at compilation time\n --> /tmp/tmpyfqit14u.rs:6:14\n  |\n6 |     for\
    \ e in lst[0..lst.length - 1] {\n  |              ^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ an implementor of trait `IntoIterator`\n  |\n  = note: the trait bound `[isize]:\
    \ IntoIterator` is not satisfied\n  = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n\
    \  |\n6 |     for e in &lst[0..lst.length - 1] {\n  |              +\n6 |    \
    \ for e in &mut lst[0..lst.length - 1] {\n  |              ++++\n\nerror[E0277]:\
    \ `[isize]` is not an iterator\n --> /tmp/tmpyfqit14u.rs:6:14\n  |\n6 |     for\
    \ e in lst[0..lst.length - 1] {\n  |              ^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ an implementor of trait `IntoIterator`\n  |\n  = note: the trait bound `[isize]:\
    \ IntoIterator` is not satisfied\n  = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n\
    \  |\n6 |     for e in &lst[0..lst.length - 1] {\n  |              +\n6 |    \
    \ for e in &mut lst[0..lst.length - 1] {\n  |              ++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyfqit14u.rs:11:12\n   |\n4  | fn add(lst: Vec<isize>)\
    \ -> isize {\n   |                            ----- expected `isize` because of\
    \ return type\n...\n11 |     return evens\n   |            ^^^^^ expected `isize`,\
    \ found floating-point number\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308, E0609.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        }\n   \
    \     else {\n            odd += x;\n        }\n    }\n    odd + even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpay2aj89e.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for val in lst {\n      \
    \  if val % 2 == 0 {\n            even += val;\n        }\n    }\n    return even;\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpec05szg8.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = lst[0];\n    for &i in &lst[1..]\
    \ {\n        if i % 2 == 1 {\n            even *= 2;\n        } else {\n     \
    \       even += i;\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp6jf6fg58.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    for &x in lst {\n        if x%2 == 0 {\n       \
    \     x + *lst.iter().skip(x).collect()\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjazte8ln.rs:5:9\n  |\n5 |\
    \     for &x in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjazte8ln.rs:5:5\n  |\n4 |   fn add(lst: Vec<isize>) -> isize {\n\
    \  |                              ----- expected `isize` because of return type\n\
    5 | /     for &x in lst {\n6 | |         if x%2 == 0 {\n7 | |             x +\
    \ *lst.iter().skip(x).collect()\n8 | |         }\n9 | |     }\n  | |_____^ expected\
    \ `isize`, found `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0 as usize;\n    for x in lst {\n\
    \        if x % 2 == 0 {\n            even += 1;\n        }\n    }\n    even\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpug59helo.rs:11:5\n   |\n\
    4  | fn add(lst: Vec<isize>) -> isize {\n   |                            -----\
    \ expected `isize` because of return type\n...\n11 |     even\n   |     ^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |     even.try_into().unwrap()\n\
    \   |         ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut res = 0;\n\n    for num in lst {\n     \
    \   if num % 2 == 0 {\n            res += num;\n        }\n    }\n\n    res\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp4r6om0nw.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst[..].iter().filter(|x| x % 2 == 0).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpr5ev2yor.rs:5:33\n\
    \  |\n5 |     lst[..].iter().filter(|x| x % 2 == 0).sum::<isize>()\n  |      \
    \                         - ^ - {integer}\n  |                               |\n\
    \  |                               &&isize\n  |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n  |\n5 |     lst[..].iter().filter(|x| *x % 2 == 0).sum::<isize>()\n\
    \  |                               +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 1 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi6rh997i.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.len() < 2 {\n        return 0;\n    }\n \
    \   for i in 0..lst.len() - 1 {\n        if lst[i] % 2 == 0 {\n            lst[i]\
    \ += 1;\n        }\n    }\n    lst[0]\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `lst` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmp3uampdx8.rs:10:13\n   |\n4  | fn add(lst: Vec<isize>)\
    \ -> isize {\n   |        --- help: consider changing this to be mutable: `mut\
    \ lst`\n...\n10 |             lst[i] += 1;\n   |             ^^^ cannot borrow\
    \ as mutable\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.len() < 2 {\n        return 0;\n    }\n \
    \   if lst.len() < 4 {\n        lst.insert(0, 0isize);\n    }\n    if lst.len()\
    \ < 6 {\n        lst.append(0isize);\n    }\n    let mut even: Vec<isize> = vec![];\n\
    \    let mut odd: Vec<isize> = vec![];\n    for i in 0..lst.len() - 1 {\n    \
    \    if i % 2 == 0 {\n            even.push(lst[i]);\n        } else {\n     \
    \       odd.push(lst[i]);\n        }\n    }\n    even.iter().cloned().sum::<isize>()\
    \ +\n        odd.iter().cloned().sum::<isize>()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2y9rogxg.rs:12:20\n   |\n\
    12 |         lst.append(0isize);\n   |                    ^^^^^^ expected `&mut\
    \ Vec<isize>`, found `isize`\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<isize>`\n                           found type `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even: isize = 0;\n    for n in lst {\n \
    \       if n % 2 == 0 {\n            even += n;\n        }\n    }\n    return\
    \ even;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyq468pp6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst\n        .iter()\n        .filter(|&x| x % 2\
    \ != 0)\n        .cloned()\n        .into_iter()\n        .sum()\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpok_hn2ws.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ ele in lst.iter() {\n        if ele % 2 == 0 {\n            even += ele;\n \
    \       } else {\n            odd += ele;\n        }\n    }\n    return even\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpxygl8k6m.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = isize::MIN;\n    for x in lst {\n\
    \        if x % 2 == 0 {\n            result += x;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-9223372036854775716`,\n right: `88`', /tmp/tmpu6w3mh_i.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|&x| x % 2 == 0).sum()\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp9bmb3etz.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n\
    \    for e in lst {\n        if e % 2 == 0 {\n            evens.push(*e);\n  \
    \      } else {\n            odd.push(*e);\n        }\n    }\n\n    let mut evens_counter\
    \ = 0;\n    for e in evens {\n        if odd.contains(&e) {\n            evens_counter\
    \ += 1;\n        }\n    }\n    evens_counter\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpjxhf4px9.rs:9:24\n\
    \  |\n9 |             evens.push(*e);\n  |                        ^^\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpjxhf4px9.rs:11:22\n   |\n\
    11 |             odd.push(*e);\n   |                      ^^\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
