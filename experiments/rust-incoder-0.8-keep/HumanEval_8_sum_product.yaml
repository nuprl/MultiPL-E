name: HumanEval_8_sum_product
language: rust
prompt: "/// For a given list of integers, return a tuple consisting of a sum and\
  \ a product of all the integers in a list.\n/// Empty sum should be equal to 0 and\
  \ empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0, 1)\n///\
  \ >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>)\
  \ -> (isize, isize) {\n"
tests: "}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
  \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
  \ (10, 10));\n}\n"
completions: ["    numbers.iter().fold((0, 1), |(sum, product), number| {\n      \
    \  (*sum + number, *product * number)\n    })", "    let mut sum = isize::zero();\n\
    \    let mut product = isize::one();\n    for i in numbers {\n        sum += i;\n\
    \        product *= i;\n    }\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (0,1);\n    }\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)", "    numbers.iter().fold((0, 1), |(a, b)| {\n        (a.0,\
    \ a.1 + b.0)\n    }) as (isize, isize)", '    numbers.iter().fold((0, 1), |(s,
    n)| (s + n, s * n))', "    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ num in numbers {\n        sum += num;\n        product *= num;\n    }\n    (sum,\
    \ product)", "    if numbers.is_empty() {\n        return (0, 1);\n    }\n   \
    \ let mut sum_so_far = 0;\n    let mut product_so_far = 1;\n    for x in numbers\
    \ {\n        sum_so_far = sum_so_far + x;\n        product_so_far = product_so_far\
    \ * x;\n    }\n    (sum_so_far, product_so_far)", "    assert!(numbers.is_sorted());\n\
    \    let mut sum = isize::zero();\n    let mut product = isize::one();\n    for\
    \ n in numbers.iter() {\n        sum += n;\n        product *= n;\n    }\n   \
    \ (sum, product)", "    if numbers.is_empty() {\n        return (0, 1);\n    }\n\
    \    let mut sum = 0;\n    let mut product = 1;\n    for i in numbers {\n    \
    \    sum += i;\n        product *= i;\n    }\n    (sum, product)", "    assert!(numbers\
    \ != Vec::new(), \"List cannot be empty\");\n    let mut sum = 0;\n    let mut\
    \ product = 1;\n\n    for &n in numbers {\n        sum += n;\n        product\
    \ *= n;\n    }\n\n    (sum, product)", "    if numbers.is_empty() {\n        return\
    \ (0, 0);\n    }\n\n    let mut sum = 0;\n    let mut product = 1;\n\n    for\
    \ &n in numbers {\n        sum += n;\n        product *= n;\n    }\n\n    (sum,\
    \ product)", "    if numbers.is_empty() {\n        return (0,0);\n    }\n    let\
    \ mut sum = 0;\n    let mut product = 1;\n    for i in numbers {\n        sum\
    \ += i;\n        product *= i;\n    }\n    (sum, product)", "    let mut sum =\
    \ 0;\n    let mut product = 1;\n    for number in numbers {\n        sum += number;\n\
    \        product *= number;\n    }\n    (sum, product)", "    let mut sum = 0;\n\
    \    let mut product = 1;\n    for n in numbers {\n        sum += n;\n       \
    \ product *= n;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut\
    \ product = 1;\n    for n in numbers {\n        sum += n;\n        product *=\
    \ n;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product =\
    \ 1;\n\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n\n    (sum, product)", "    let mut product = 1;\n    let mut\
    \ sum = 0;\n    for number in numbers {\n        sum += number;\n        product\
    \ *= number;\n    }\n    (sum, product)", "    assert!(numbers != vec![]);\n\n\
    \    let mut result: (u32, u32) = (0, 1);\n\n    for n in numbers {\n        let\
    \ (nsum, nprod) = result.1.divmod(n);\n\n        result.0 = nsum + n;\n      \
    \  result.1 = nprod * n;\n    }\n\n    result", "    let mut sum = 0;\n    let\
    \ mut product = 1;\n    for number in numbers {\n        sum += number;\n    \
    \    product *= number;\n    }\n    (sum, product)", "    numbers.iter().fold(0,\
    \ |sum, number| {\n        (sum * number, sum * number + number)\n    })", " \
    \   let mut sum = 0;\n    let mut product = 1;\n    for num in numbers {\n   \
    \     sum += num;\n        product *= num;\n    }\n    (sum, product)", "    let\
    \ mut sum = 0;\n    let mut product = 1;\n\n    for n in numbers {\n        sum\
    \ += n;\n        product *= n;\n    }\n\n    (sum, product)", "    let mut sum:\
    \ isize = 0;\n    let mut product: isize = 1;\n    for number in numbers {\n \
    \       sum += number;\n        product *= number;\n    }\n    (sum, product)",
  "    numbers.iter().fold((0, 1), |(sum, product), n| {\n        (sum + n, product\
    \ * n)\n    })", "    numbers.iter().fold((0, 0)) {\n        (sum, product) =>\
    \ (sum + $1, product * $1)\n    }", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for num in numbers {\n        sum += num;\n        product *= num;\n\
    \    }\n    (sum, product)", "    let mut sum_ = 0;\n    let mut product_ = 1;\n\
    \n    for n in numbers {\n        sum_ += n;\n        product_ *= n;\n    }\n\n\
    \    (sum_, product_)", "    numbers.iter()\n        .cloned()\n        .fold(\n\
    \            (0, 1),\n            (mut sum, mut product) => {\n              \
    \  sum += *product;\n                product += *sum;\n                (*sum,\
    \ 0)\n            },\n        )", "    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers.iter() {\n        sum += number;\n        product\
    \ *= number;\n    }\n    (sum, product)", "    assert!(numbers_are_positive(numbers));\n\
    \    let mut product = 1;\n    let mut sum = 0;\n\n    for x in numbers {\n  \
    \      sum += x;\n        product *= x;\n    }\n\n    (sum, product)", "    if\
    \ numbers.is_empty() {\n        (0,1)\n    } else {\n        let mut product =\
    \ 1;\n        let mut sum = 0;\n\n        for n in numbers {\n            sum\
    \ += n;\n            product *= n;\n        }\n\n        (sum, product)\n    }",
  '    numbers.iter().fold((0, 1))((x, y) => x.checked_add(y).unwrap())', "    if\
    \ numbers.is_empty() {\n        return (0, 0);\n    }\n    let mut sum = 0;\n\
    \    let mut product = 1;\n    for n in numbers {\n        sum += n;\n       \
    \ product *= n;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut\
    \ product = 1;\n    for num in numbers {\n        sum += num;\n        product\
    \ *= num;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut prod\
    \ = 1;\n    for x in numbers {\n        sum += x;\n        prod *= x;\n    }\n\
    \    (sum, prod)", "    match numbers {\n        vec::[] => (0, 1),\n        numbers\
    \ => {\n            let mut product = 1;\n            let mut sum = 0;\n     \
    \       for n in numbers {\n                sum += n;\n                product\
    \ *= n;\n            }\n            (sum, product)\n        }\n    }", '    (numbers[0],
    numbers[0] * numbers[0])', "    if numbers.is_empty() {\n        return (0, 1);\n\
    \    }\n    let mut sum = 0;\n    let mut product = 1;\n    for i in numbers {\n\
    \        sum += i;\n        product *= i;\n    }\n    (sum, product)", "    if\
    \ numbers.is_empty() {\n        (0, 1);\n    }\n\n    let mut sum = 0;\n    let\
    \ mut product = 1;\n\n    for n in numbers {\n        sum += n;\n        product\
    \ *= n;\n    }\n\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n   \
    \ }\n    (sum, product)", "    if numbers.is_empty() {\n        return (0, 1);\n\
    \    }\n    let mut product = 1;\n    let mut sum = 0;\n    for n in numbers {\n\
    \        sum += n;\n        product *= n;\n    }\n    (sum, product)", "    if\
    \ numbers.is_empty() {\n        return (0, 0);\n    }\n    let mut sum_product\
    \ = numbers[0];\n    for n in numbers {\n        sum_product *= n;\n    }\n  \
    \  (sum_product, numbers[0])", "    numbers.iter().cloned().fold((0, 1), |(sum,\
    \ product), number| {\n        (sum + number, product * number)\n    });", " \
    \   if numbers.is_empty() {\n        return (0, 1);\n    }\n\n    let mut sum\
    \ = 0;\n    let mut product = 1;\n\n    for n in numbers {\n        sum += n;\n\
    \        product *= n;\n    }\n\n    (sum, product)", '    (numbers.iter().sum(),
    numbers.iter().product())', "    let mut sum = 0;\n    let mut product = 1;\n\n\
    \    for num in numbers {\n        sum += num;\n        product *= num;\n    }\n\
    \n    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ &n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum,\
    \ product)", "    if numbers.is_empty() {\n        return (0, 1);\n    }\n   \
    \ let mut product = 1;\n    let mut sum = 0;\n    for number in numbers {\n  \
    \      sum += number;\n        product *= number;\n    }\n    (sum, product)",
  "    numbers.iter().fold(\n        (0,1),\n        |sum,x| (sum+x,x*sum))", "  \
    \  let mut sum = 0;\n    let mut product = 1;\n\n    for number in numbers {\n\
    \        sum += number;\n        product *= number;\n    }\n\n    (sum, product)",
  "    let mut sum: isize = 0;\n    let mut product: isize = 1;\n    for n in numbers\
    \ {\n        sum += *n;\n        product *= *n;\n    }\n    (sum, product)", " \
    \   if numbers.is_empty() {\n        (0, 1);\n    }\n    let mut product_of_first_number\
    \ = 1;\n    let mut sum_of_first_number = 0;\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        sum_of_first_number += number;\n        product_of_first_number *=\
    \ i;\n    }\n    (sum_of_first_number, product_of_first_number);", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n    let mut product = 1;\n    let mut sum\
    \ = 0;\n    for i in numbers {\n        sum += i;\n        product *= i;\n   \
    \ }\n    (sum, product)", "    if numbers.is_empty() {\n        return (1, 1);\n\
    \    }\n\n    let mut sum_product: (isize, isize) = (0, 1);\n\n    for number\
    \ in numbers {\n        sum_product = sum_product.0 * number + sum_product.1;\n\
    \    }\n\n    sum_product", "    let mut s = isize::max_value();\n    let mut\
    \ t = isize::max_value();\n    for n in numbers {\n        s += n;\n        t\
    \ *= n;\n    }\n    (s, t)", "    numbers.iter().fold((0, 0), |(sum, product),\
    \ number| {\n        (sum + number, product * number)\n    })", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n    let mut sum_num = 0;\n    let mut prod_num\
    \ = 1;\n    for n in numbers {\n        sum_num += n;\n        prod_num *= n;\n\
    \    }\n    (sum_num, prod_num)", "    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)", "    match numbers.len() {\n        0 =>\
    \ (0, 1),\n        _ => (numbers[0], numbers.iter().product()),\n    }", "   \
    \ let mut total = 0;\n    let mut prod = 1;\n    for n in numbers {\n        total\
    \ = total + n;\n        prod = prod * n;\n    }\n    (total, prod)", "    let\
    \ mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n        sum\
    \ += n;\n        product *= n;\n    }\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (0, 0);\n    }\n    let mut total = 0;\n    let mut product\
    \ = 1;\n    for number in numbers {\n        total += number;\n        product\
    \ *= number;\n    }\n    (total, product)", "    assert!(numbers.len() > 0);\n\
    \n    let mut sum_ = 0;\n    let mut prod_ = 1;\n    for number in numbers {\n\
    \        sum_ += number;\n        prod_ *= number;\n    }\n\n    (sum_, prod_)",
  "    let mut sum: isize = 0;\n    let mut product: isize = 1;\n    for i in numbers\
    \ {\n        sum += i;\n        product *= i;\n    }\n    (sum, product)", " \
    \   let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n     \
    \   sum += n;\n        product *= n;\n    }\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n\n    let mut sum = 0;\n    let mut product\
    \ = 1;\n\n    for i in numbers {\n        sum += i;\n        product *= i;\n \
    \   }\n\n    (sum, product)", "    if numbers.is_empty() {\n        return (0,\
    \ 1);\n    }\n    let mut sum_ = 0;\n    let mut prod_ = 1;\n    for &i in &numbers\
    \ {\n        sum_ += i;\n        prod_ *= i;\n    }\n    (sum_, prod_)", "   \
    \ let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n       \
    \ sum += n;\n        product *= n;\n    }\n    (sum, product)", "    let mut sum_\
    \ = 0;\n    let mut product_ = 1;\n    for n in numbers {\n        sum_ += n;\n\
    \        product_ *= n;\n    }\n    (sum_, product_)", "    let mut sum: isize\
    \ = 0;\n    let mut product: isize = 1;\n\n    for num in numbers {\n        sum\
    \ += num;\n        product *= num;\n    }\n    (sum, product)", "    numbers.iter().fold((0,\
    \ 1), |(sum, product), i| {\n        sum.0 + (*i) * product;\n        (sum.0,\
    \ product.0)\n    })", "    if numbers.is_empty() {\n        (0, 0)\n    } else\
    \ {\n        let mut sum = 0;\n        let mut product = 1;\n        let mut i\
    \ = 0;\n        while i < numbers.len() {\n            sum += numbers[i];\n  \
    \          product *= numbers[i];\n            i += 1;\n        }\n        (sum,\
    \ product)\n    }", "    let mut sum = numbers[0];\n    let mut product = 1;\n\
    \    for x in numbers {\n        sum += x;\n        product *= x;\n    }\n   \
    \ (sum, product)", "    let mut sum: isize = 0;\n    let mut product: isize =\
    \ 1;\n\n    for n in numbers {\n        sum += n;\n        product *= n;\n   \
    \ }\n\n    (sum, product)", "    numbers.iter().fold((0, 0), |(sum, product),\
    \ number| {\n        (sum + number, product * number)\n    })", "    let mut sum\
    \ = 0;\n    let mut product = 1;\n    for number in numbers {\n        sum +=\
    \ number;\n        product *= number;\n    }\n    (sum, product)", "    let mut\
    \ product = 1;\n    let mut sum = 0;\n\n    for num in numbers {\n        sum\
    \ = sum + num;\n        product = product * num;\n    }\n\n    (sum, product)",
  "    let mut product = 1;\n    let mut sum = 0;\n    for n in numbers {\n      \
    \  sum += n;\n        product *= n;\n    }\n    (sum, product)", "    let mut\
    \ sum = 0;\n    let mut product = 1;\n\n    for n in numbers {\n        sum +=\
    \ n;\n        product *= n;\n    }\n\n    (sum, product)", "    let mut sum =\
    \ numbers.iter().fold(0, |mut acc, x| acc + x);\n    let mut product = numbers.iter().fold(1,\
    \ |mut acc, x| acc * x);\n    (sum, product)", "    numbers.iter().fold(\n   \
    \     (isize, isize),\n        (|sum, num| {\n            (sum + num, num);\n\
    \        }),\n    )", "    let mut sum: isize = 0;\n    let mut product: isize\
    \ = 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n   \
    \ }\n    (sum, product)", "    if numbers.is_empty() {\n        return (0, 1);\n\
    \    }\n\n    let mut product_of_sum = 1;\n    let mut sum_of_numbers = numbers[0];\n\
    \    for number in numbers.iter() {\n        sum_of_numbers += number;\n     \
    \   product_of_sum *= number;\n    }\n\n    (sum_of_numbers, product_of_sum)",
  "    if numbers.is_empty() {\n        return (1, 1);\n    }\n\n    let mut sum =\
    \ 0;\n    let mut product = 1;\n    for n in numbers {\n        sum += n;\n  \
    \      product *= n;\n    }\n\n    (sum, product)", "    let mut sum = 0;\n  \
    \  let mut product = 1;\n    for n in numbers.iter() {\n        sum += *n;\n \
    \       product *= *n;\n    }\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n\n    let mut s = numbers.iter().sum();\n\
    \    let mut prod = 1;\n\n    for num in numbers {\n        s += num;\n      \
    \  prod *= num;\n    }\n\n    (s, prod)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for n in numbers {\n        sum = sum + n;\n        product = product\
    \ * n;\n    }\n    (sum, product)", "    if numbers.is_empty() {\n        return\
    \ (0, 1);\n    }\n\n    let mut product_sum = 1;\n    let mut sum_of_numbers =\
    \ numbers.iter().sum();\n    for number in numbers {\n        sum_of_numbers +=\
    \ number;\n        product_sum *= number;\n    }\n\n    (sum_of_numbers, product_sum)",
  "    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n      \
    \  sum += *n;\n        product *= *n;\n    }\n    (sum, product)", "    let mut\
    \ sum = 0;\n    let mut product = 1;\n\n    for number in numbers {\n        sum\
    \ += number;\n        product *= number;\n    }\n\n    (sum, product)", "    let\
    \ mut sum = 0;\n    let mut product = 1;\n    for (i, &num) in numbers.iter().enumerate()\
    \ {\n        sum += num;\n        product *= i;\n    }\n    (sum, product)", " \
    \   let mut sum = 0;\n    let mut product = 1;\n    for &n in numbers {\n    \
    \    sum += n;\n        product *= n;\n    }\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (0, 0);\n    }\n\n    let mut running_sum = 0;\n    let mut\
    \ running_product = 1;\n\n    for &n in numbers {\n        running_sum += n;\n\
    \        running_product *= n;\n    }\n\n    return (running_sum, running_product);",
  "    if numbers.is_empty() {\n        return (0, 1);\n    }\n    let mut sum = 0;\n\
    \    let mut product = 1;\n    for n in numbers {\n        sum += n;\n       \
    \ product *= n;\n    }\n    (sum, product)", "    let mut sum_: isize = 0;\n \
    \   let mut product_: isize = 1;\n    for n in numbers {\n        sum_ += n;\n\
    \        product_ *= n;\n    }\n    (sum_, product_)", "    let mut sum = 0;\n\
    \    let mut product = 1;\n    for i in numbers {\n        sum += i;\n       \
    \ product *= i;\n    }\n    (sum, product)", "    numbers.iter().fold((isize::zero(),\
    \ isize::one()), |(sum, product), i| {\n        (sum + i, product * i)\n    })",
  "    if numbers.is_empty() {\n        return (0,0);\n    }\n    let mut sum = 0;\n\
    \    let mut prod = 1;\n    for n in numbers {\n        sum += n;\n        prod\
    \ *= n;\n    }\n    (sum, prod)", "    numbers.iter().fold(0, |sum, number| {\n\
    \        match number {\n            0 => sum,\n            _ => sum + number,\n\
    \        }\n    })", "    if numbers.is_empty() {\n        return (0, 1);\n  \
    \  }\n\n    let mut sum_product = numbers[0];\n    for number in numbers.iter().skip(1)\
    \ {\n        sum_product += number;\n    }\n\n    (sum_product, numbers[0])",
  "    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n      \
    \  sum += n;\n        product *= n;\n    }\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n   \
    \ }\n    (sum, product)", "    numbers.into_iter().fold(\n        (0, 1),\n  \
    \      |sum, number| {\n            (sum + number, sum * number)\n        }\n\
    \    )", "    let mut sum = 0;\n    let mut product = 1;\n\n    for i in numbers\
    \ {\n        sum += i;\n        product *= i;\n    }\n\n    (sum, product)", " \
    \   if numbers.is_empty() {\n        return (0, 1);\n    }\n    numbers.iter().fold(0,\
    \ |sum, number| sum + number).map(|sum| {\n        sum * numbers.len() as isize\n\
    \    });", "    let mut sum = 0;\n    let mut product = 1;\n    for &i in numbers\
    \ {\n        sum += i;\n        product *= i;\n    }\n    (sum, product)", " \
    \   let mut sum = 0;\n    let mut product = 1;\n\n    for n in numbers {\n   \
    \     sum += n;\n        product *= n;\n    }\n\n    (sum, product)", "    let\
    \ mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n        sum\
    \ += n;\n        product *= n;\n    }\n    (sum, product)", "    numbers.iter().fold(\n\
    \        (0,1),\n        |(sum, product), x| {\n            assert!(x > 0);\n\
    \            (sum + x, product * x),\n        }\n    )", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n\n    let mut product = 1;\n    let mut sum\
    \ = 0;\n    for n in numbers {\n        sum += n;\n        product *= n;\n   \
    \ }\n\n    (sum, product)", "    if numbers.is_empty() {\n        (0,1)\n    }\
    \ else {\n        let mut product = 1;\n        let mut sum = 0;\n\n        numbers.iter().for_each(|num|{\n\
    \            sum = sum + num;\n            product = product*num;\n        });\n\
    \        (sum, product)\n    }", "    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)", "    numbers\n        .iter()\n        .cloned()\n     \
    \   .fold((0, 1))\n        .unwrap_or_else(|| panic!(\"Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\"))", "    if numbers.is_empty()\
    \ {\n        return (0,0);\n    }\n    let mut sum = numbers.iter().sum();\n \
    \   let mut product = 1;\n    for num in numbers {\n        sum *= num;\n    \
    \    product *= num;\n    }\n    (sum, product)", "    if numbers.is_empty() {\n\
    \        (0isize, 1isize)\n    } else {\n        let mut sum = 0isize;\n     \
    \   let mut product = 1isize;\n\n        for &num in &numbers {\n            sum\
    \ += num;\n            product *= num;\n        }\n\n        (sum, product)\n\
    \    }", "    let mut sum = 0;\n    let mut product = 1;\n\n    for n in numbers\
    \ {\n        sum += n;\n        product *= n;\n    }\n\n    (sum, product)", " \
    \   numbers.iter().fold(\n        (isize, isize),\n        |(sum_so_far, product_so_far),\
    \ (num)| {\n            (sum_so_far + num, product_so_far * num);\n        },\n\
    \    )", "    if numbers.is_empty() {\n        (1, 1)\n    } else {\n        let\
    \ mut sum = 0;\n        let mut product = 1;\n        for n in numbers {\n   \
    \         sum += n;\n            product *= n;\n        }\n        (sum, product)\n\
    \    }", '    (numbers[0] + numbers[1], numbers[0] * numbers[1])', "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n\n    let mut sum: isize = 0;\n    let mut\
    \ product: isize = 1;\n\n    for number in numbers {\n        sum += number;\n\
    \        product *= number;\n    }\n\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n\n    let mut sum = numbers[0];\n    let mut\
    \ product = 1;\n    for (i, &num) in numbers.iter().enumerate() {\n        sum\
    \ += num;\n        product *= i;\n    }\n\n    (sum, product)", '    (numbers.iter().sum(),
    numbers.iter().product())', "    let mut sum = numbers[0];\n    let mut product\
    \ = 1;\n    for i in numbers.iter() {\n        sum += i;\n        product *= i;\n\
    \    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n\
    \    for num in numbers {\n        sum += num;\n        product *= num;\n    }\n\
    \    (sum, product)", "    numbers.iter().cloned().fold(\n        (0,1),\n   \
    \     |(sum, product), num| {\n            (sum + num, product * num)\n      \
    \  }\n    )", "    let mut sum = numbers.iter().sum();\n    let mut product =\
    \ numbers.iter().product();\n    product = product.rev();\n    (sum, product)",
  "    if numbers.is_empty() {\n        return (0, 0);\n    }\n\n    let mut sum =\
    \ 0;\n    let mut product = 1;\n    for num in numbers {\n        sum += num;\n\
    \        product *= num;\n    }\n\n    (sum, product)", '    numbers.iter().map(|x|
    x * x).sum::<isize>() + (numbers[0], 1)', "    if numbers.is_empty() {\n     \
    \   return (0, 1);\n    }\n\n    let mut sum = 0;\n    let mut product = 1;\n\
    \    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\n \
    \   (sum, product)", "    let mut sum: isize = 0;\n    let mut product: isize\
    \ = 1;\n    for n in numbers {\n        sum += *n;\n        product *= *n;\n \
    \   }\n    (sum, product)", "    if numbers.is_empty() {\n        return (0, 1);\n\
    \    }\n\n    let mut product = 1;\n    let mut sum = 0;\n    for i in numbers\
    \ {\n        sum += i;\n        product *= i;\n    }\n\n    (sum, product)", " \
    \   numbers.iter().fold((0, 1), |sum, number| {\n        (sum + number, sum *\
    \ number)\n    })", "    numbers\n        .iter()\n        .map(|x| x * x)\n \
    \       .sum()\n        .cloned()\n        .unwrap()\n        .cloned()\n    \
    \    .product()\n        .cloned()\n        .unwrap()", '    numbers.iter().fold(0,
    |mut sum, number| sum + number)', "    if numbers.is_empty() {\n        return\
    \ (0, 1);\n    }\n    let mut sum_num = 0;\n    let mut prod = 1;\n    for i in\
    \ numbers {\n        sum_num += i;\n        prod *= i;\n    }\n    (sum_num, prod)",
  "    if numbers.is_empty() {\n        return (0, 0);\n    }\n    let mut sum = numbers.iter().sum();\n\
    \    let mut product = numbers.iter().product();\n    if product > 0 {\n     \
    \   product = 1;\n    }\n    if sum > 0 {\n        sum = 1;\n    }\n    (sum,\
    \ product)", "    if numbers.is_empty() {\n        return (0, 0);\n    }\n   \
    \ let mut sum = 0;\n    let mut product = 1;\n    for i in numbers {\n       \
    \ sum += i;\n        product *= i;\n    }\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n\n    let mut sum = 0;\n    let mut product\
    \ = 1;\n\n    for i in numbers {\n        sum += i;\n        product *= i;\n \
    \   }\n\n    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n\
    \    for num in numbers {\n        sum += num;\n        product *= num;\n    }\n\
    \    (sum, product)", "    let mut product = 1;\n    let mut sum = 0;\n    for\
    \ n in numbers {\n        sum += *n;\n        product *= *n;\n    }\n    (sum,\
    \ product)", "    if numbers.is_empty() {\n        return (0, 1);\n    }\n   \
    \ let mut sum = 0;\n    let mut product = 1;\n    for &n in numbers {\n      \
    \  sum += n;\n        product *= n;\n    }\n    (sum, product)", "    let mut\
    \ sum = 0;\n    let mut product = 1;\n    for n in numbers {\n        sum += n;\n\
    \        product *= n;\n    }\n    (sum, product)", "    (\n        numbers.iter().sum(),\n\
    \        numbers.iter().rev().sum(),\n    )", "    if numbers.is_empty() {\n \
    \       return (0, 0)\n    }\n\n    let mut sum = 0;\n    let mut product = 1;\n\
    \n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n\n\
    \    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers.iter() {\n        sum += n;\n        product *= n;\n    }\n   \
    \ (sum, product)", "    numbers.iter().fold(\n        (vec!(0), 1),\n        |(sum,\
    \ product), x| {\n            (sum.iter().skip(x).fold(\n                product,\n\
    \                |mut sum, mut product| {\n                    sum.push(x);\n\
    \                    product * x\n                }),\n            sum.iter().sum())\n\
    \        }\n    )", "    let mut sum = 0;\n    let mut product = 1;\n    for number\
    \ in numbers {\n        sum += number;\n        product *= number;\n    }\n  \
    \  (sum, product)", "    let mut product = 1;\n    let mut sum = 0;\n    for n\
    \ in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)",
  "    let mut sum = isize::ZERO;\n    let mut product = isize::ONE;\n    for i in\
    \ numbers {\n        sum += i;\n        product *= i;\n    }\n    (sum, product)",
  "    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n      \
    \  sum += n;\n        product *= n;\n    }\n    (sum, product)", "    let mut\
    \ sum = 0;\n    let mut product = 1;\n    for n in numbers {\n        sum += n;\n\
    \        product *= n;\n    }\n    (sum, product)", "    let mut result = 0;\n\
    \    let mut product = 1;\n\n    for n in numbers.iter() {\n        result = result\
    \ + n;\n        product *= n;\n    }\n    (result, product)", "    let mut sum\
    \ = 0;\n    let mut product = 1;\n\n    for number in numbers {\n        sum +=\
    \ number;\n        product *= number;\n    }\n\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)", "    numbers.iter().fold((0, 1), |(sum,\
    \ product), number| {\n        (sum + number, product * number)\n    })", '    (numbers[0],
    numbers.iter().product())', "    if numbers.is_empty() {\n        return (0, 1);\n\
    \    }\n    let mut product = 1;\n    let mut sum = 0;\n    for n in numbers {\n\
    \        sum = sum + n;\n        product = product * n;\n    }\n    (sum, product)",
  "    let mut sum = 0;\n    let mut product = 1;\n    for &x in numbers {\n     \
    \   sum += x;\n        product *= x;\n    }\n    (sum, product)", "    let mut\
    \ sum = 0;\n    let mut product = 1;\n    for num in numbers {\n        sum +=\
    \ num;\n        product *= num;\n    }\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (1, 0);\n    }\n    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for x in numbers {\n        sum += x;\n        product *= x;\n   \
    \ }\n    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n  \
    \  for num in numbers {\n        sum = sum + num;\n        product *= num;\n \
    \   }\n    (sum, product)", "    assert!(numbers.size() > 0);\n    let mut sum\
    \ = 0;\n    let mut product = 1;\n\n    for i in numbers.iter() {\n        sum\
    \ += i;\n        product *= i;\n    }\n    (sum, product)", "    let mut sum =\
    \ 0;\n    let mut product = 1;\n    for n in numbers {\n        sum += n;\n  \
    \      product *= n;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let\
    \ mut product = 1;\n    for n in numbers.iter() {\n        sum += n;\n       \
    \ product *= n;\n    }\n    (sum, product)", "    let mut sum: isize = 0;\n  \
    \  let mut product: isize = 1;\n    for n in numbers {\n        sum += *n;\n \
    \       product *= *n;\n    }\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n    let mut sum_product = numbers[0] as isize;\n\
    \    let mut product = 1;\n    for n in numbers {\n        sum_product += n;\n\
    \        product *= n;\n    }\n    (sum_product, product)", "    let mut sum =\
    \ isize::zero();\n    let mut product = isize::one();\n    for n in numbers {\n\
    \        sum += *n;\n        product *= *n;\n    }\n    (sum, product)", "   \
    \ if numbers.is_empty() {\n        return (0, 0);\n    }\n    let mut product_sum\
    \ = 0;\n    let mut product_product = 1;\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        product_sum += number;\n        product_product *= number;\n    }\n\
    \    (product_sum, product_product)", "    let mut sum_mut_temp = 0;\n    let\
    \ mut product_mut_temp = 1;\n    for number in numbers {\n        sum_mut_temp\
    \ += number;\n        product_mut_temp *= number;\n    }\n    (sum_mut_temp, product_mut_temp)",
  "    if numbers.is_empty() {\n        return (0, 1);\n    }\n    let mut sum: isize\
    \ = 0;\n    let mut product: isize = 1;\n    for n in numbers {\n        sum +=\
    \ n;\n        product *= n;\n    }\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n    let mut total = 0;\n    let mut product\
    \ = 1;\n    for n in numbers {\n        total += n;\n        product *= n;\n \
    \   }\n    (total, product)", "    let mut sum = 0;\n    let mut product = 1;\n\
    \    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n   \
    \ (sum, product)", "    numbers.iter().fold((0, 1), |(sum, product), n| {\n  \
    \      (sum + n, product * n)\n    })", "    numbers.iter().fold(\n        (isize,\
    \ 1),\n        |acc, n| {\n            (acc * n, acc * n + (*n as isize))\n  \
    \      }\n    )", "    let mut sum: isize = 0;\n    let mut product: isize = 1;\n\
    \n    for number in numbers {\n        sum += number;\n        product *= number;\n\
    \    }\n\n    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n\
    \    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n   \
    \ (sum, product)", "    let mut sum = numbers.iter().sum();\n    let mut product\
    \ = numbers.iter().product();\n    if sum == 0 {\n        sum = product;\n   \
    \     product = 1;\n    }\n    (sum, product)", "    numbers.iter().fold(\n  \
    \      (0, 1),\n        |mut sum, number| {\n            sum += number;\n    \
    \        (sum, sum * number)\n        }\n    )", "    let mut sum: isize = 0;\n\
    \    let mut product: isize = 1;\n    for n in numbers {\n        sum += n;\n\
    \        product *= n;\n    }\n    (sum, product)", "    assert!(!numbers.is_empty());\n\
    \    (numbers.iter().sum(), numbers.iter().product())", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for num in numbers {\n        sum += num;\n        product *= num;\n\
    \    }\n    (sum, product)", '    (numbers.iter().sum(), numbers.iter().product())',
  "    let mut sum = numbers[0];\n    let mut product = numbers[0];\n    for i in\
    \ 1..numbers.len() {\n        sum += numbers[i];\n        product *= numbers[i];\n\
    \    }\n    (sum, product)", "    if numbers.is_empty() {\n        return (0,\
    \ 1);\n    }\n    let mut sum = 0;\n    let mut product = 1;\n    for number in\
    \ numbers {\n        sum += number;\n        product *= number;\n    }\n    (sum,\
    \ product)", "    numbers.iter().fold(\n        (0, 1),\n        |mut sum, number|\
    \ {\n            *sum += number;\n            *sum\n        },\n    )", "    let\
    \ mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n        sum\
    \ += *n;\n        product *= *n;\n    }\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n    let mut total = 0;\n    let mut product\
    \ = 1;\n    for num in numbers {\n        total += num;\n        product *= num;\n\
    \    }\n    (total, product)", "    numbers.iter().fold((0, 1), |(sum, product),\
    \ value| {\n        (sum + value, product * value)\n    });", "    let mut sum:\
    \ isize = 0;\n    let mut product: isize = 1;\n    for num in numbers {\n    \
    \    sum += num;\n        product *= num;\n    }\n    (sum, product)", "    if\
    \ numbers.is_empty() {\n        return (0,0);\n    }\n    let mut product = 1;\n\
    \    let mut sum = 0;\n    for number in numbers.iter() {\n        sum += number;\n\
    \        product *= number;\n    }\n    return (sum, product);", "    let mut\
    \ product = 1;\n    let mut sum = 0;\n    for n in numbers {\n        sum += n;\n\
    \        product *= n;\n    }\n    (sum, product)", "    let mut sum: isize =\
    \ 0;\n    let mut product: isize = 1;\n\n    for n in numbers {\n        sum +=\
    \ n;\n        product *= n;\n    }\n\n    (sum, product)", "    assert!(numbers.len()\
    \ == 2);\n    let mut sum = 0;\n    let mut product = 1;\n    for i in numbers\
    \ {\n        sum += i;\n        product *= i;\n    }\n    (sum, product)", " \
    \   if numbers.is_empty() {\n        (0, 0)\n    } else {\n        let mut product\
    \ = 1;\n        let mut sum = 0;\n\n        for number in numbers.iter() {\n \
    \           sum += number;\n            product *= number;\n        }\n\n    \
    \    (sum, product)\n    }", "    let mut product = 1;\n    let mut sum = 0;\n\
    \    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n   \
    \ (sum, product)", "    if numbers.is_empty() {\n        (0, 1)\n    } else {\n\
    \        let mut product = 1;\n        let mut sum = 0;\n        for x in numbers\
    \ {\n            sum += x;\n            product *= x;\n        }\n        (sum,\
    \ product)\n    }", "    let mut sum = 0;\n    let mut product = 1;\n    for n\
    \ in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)",
  "    assert!(!numbers.is_empty());\n\n    let mut sum = numbers[0] as isize;\n \
    \   let mut product = numbers[0] as isize;\n    for n in numbers {\n        sum\
    \ += n;\n        product *= n;\n    }\n\n    (sum, product)", "    let mut sum\
    \ = numbers[0];\n    let mut product = numbers[0];\n\n    for number in numbers\
    \ {\n        sum += number;\n        product *= number;\n    }\n\n    (sum, product)"]
stop_tokens:
- "\n}"
