name: HumanEval_162_string_to_md5
language: rust
results:
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    text.iter().map(|c| {\n        use std::hash::{Hasher};\n        let\
    \ mut hasher = Hasher::new();\n        hasher.input(c).finish();\n        let\
    \ output = String::from_utf8(hasher.result());\n        output.to_string()\n \
    \   }).filter(|s| !s.is_empty()).collect::<Vec<_>>()\n        .join(\":\")\n \
    \       .to_owned()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for struct `String` in the current\
    \ scope\n --> /tmp/tmp6yw5we51.rs:5:10\n  |\n5 |     text.iter().map(|c| {\n \
    \ |          ^^^^ method not found in `String`\n  |\nhelp: because of the in-memory\
    \ representation of `&str`, to obtain an `Iterator` over each of its codepoint\
    \ use method `chars`\n  |\n5 |     text.chars().map(|c| {\n  |          ~~~~~\n\
    \nwarning: trait objects without an explicit `dyn` are deprecated\n --> /tmp/tmp6yw5we51.rs:7:26\n\
    \  |\n7 |         let mut hasher = Hasher::new();\n  |                       \
    \   ^^^^^^\n  |\n  = note: `#[warn(bare_trait_objects)]` on by default\n  = warning:\
    \ this is accepted in the current edition (Rust 2015) but is a hard error in Rust\
    \ 2021!\n  = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    help: use `dyn`\n  |\n7 |         let mut hasher = <dyn Hasher>::new();\n  | \
    \                         ++++       +\n\nerror[E0599]: no function or associated\
    \ item named `new` found for trait object `dyn Hasher` in the current scope\n\
    \ --> /tmp/tmp6yw5we51.rs:7:34\n  |\n7 |         let mut hasher = Hasher::new();\n\
    \  |                                  ^^^ function or associated item not found\
    \ in `dyn Hasher`\n\nerror[E0599]: `Result<String, FromUtf8Error>` doesn't implement\
    \ `std::fmt::Display`\n   --> /tmp/tmp6yw5we51.rs:10:16\n    |\n10  |        \
    \   output.to_string()\n    |                  ^^^^^^^^^ `Result<String, FromUtf8Error>`\
    \ cannot be formatted with the default formatter\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Result<String, FromUtf8Error>:\
    \ std::fmt::Display`\n            which is required by `Result<String, FromUtf8Error>:\
    \ ToString`\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = digest::digest();\n    md5.update(text.as_bytes());\n \
    \   md5.take()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpa1vv8_gt.rs:5:19\n  |\n5 |     let mut md5 = digest::digest();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    use md5::{digest, Digest};\n    let mut md5 = digest::MD5::default();\n\
    \    md5.update(text.as_bytes());\n    md5.digest().to_string()\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0432]: unresolved import `md5`\n --> /tmp/tmpe_anh9vh.rs:5:9\n \
    \ |\n5 |     use md5::{digest, Digest};\n  |         ^^^ maybe a missing crate\
    \ `md5`?\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0432`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = md5_core::Md5::new();\n    md5.input(text).unwrap();\n\
    \    let mut digest = digest::digest(md5.as_bytes());\n    let mut md5_hash =\
    \ String::new();\n    for byte in digest.iter() {\n        md5_hash.push_str(&format!(\"\
    {:02x}\", byte));\n    }\n    md5_hash.as_ref()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5_core`\n\
    \ --> /tmp/tmph5rb3a0l.rs:5:19\n  |\n5 |     let mut md5 = md5_core::Md5::new();\n\
    \  |                   ^^^^^^^^ use of undeclared crate or module `md5_core`\n\
    \nerror[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmph5rb3a0l.rs:7:22\n  |\n7 |     let mut digest = digest::digest(md5.as_bytes());\n\
    \  |                      ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmph5rb3a0l.rs:12:5\n   |\n4  | fn\
    \ string_to_md5(text: String) -> Option<String> {\n   |                      \
    \             -------------- expected `Option<String>` because of return type\n\
    ...\n12 |     md5_hash.as_ref()\n   |     ^^^^^^^^^^^^^^^^^ expected enum `Option`,\
    \ found reference\n   |\n   = note:   expected enum `Option<String>`\n       \
    \    found reference `&_`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hasher = MD5::new();\n    hasher.update(text).as_mut().ok();\n\
    \    hasher.finish().as_slice().to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmpw16js22n.rs:5:22\n\
    \  |\n5 |     let mut hasher = MD5::new();\n  |                      ^^^ use of\
    \ undeclared type `MD5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text {\n        \"\" => None,\n        value => Some(md5(&value).to_string()),\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmpyg2m1_l6.rs:7:23\n\
    \  |\n7 |         value => Some(md5(&value).to_string()),\n  |               \
    \        ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpyg2m1_l6.rs:6:9\n\
    \  |\n5 |     match text {\n  |           ---- this expression has type `String`\n\
    6 |         \"\" => None,\n  |         ^^ expected struct `String`, found `&str`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        None\n    } else {\n        let mut md5:\
    \ &mut MD5 = MD5::new();\n        md5.update(&text);\n        let result = md5.digest();\n\
    \        Some(result.to_hex())\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmpadmvdscn.rs:8:33\n\
    \  |\n8 |         let mut md5: &mut MD5 = MD5::new();\n  |                   \
    \              ^^^ use of undeclared type `MD5`\n\nerror[E0412]: cannot find type\
    \ `MD5` in this scope\n --> /tmp/tmpadmvdscn.rs:8:27\n  |\n8 |         let mut\
    \ md5: &mut MD5 = MD5::new();\n  |                           ^^^ not found in\
    \ this scope\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ Digest::new(\"MD5\", HashAlgorithm::md5_16);\n    md5.update(text.as_bytes());\n\
    \    let mut hash = String::new();\n    md5.digest(&mut hash);\n    Some(hash)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Digest`\n -->\
    \ /tmp/tmp5ko5dnc3.rs:8:19\n  |\n8 |     let mut md5 = Digest::new(\"MD5\", HashAlgorithm::md5_16);\n\
    \  |                   ^^^^^^ use of undeclared type `Digest`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashAlgorithm`\n --> /tmp/tmp5ko5dnc3.rs:8:38\n\
    \  |\n8 |     let mut md5 = Digest::new(\"MD5\", HashAlgorithm::md5_16);\n  |\
    \                                      ^^^^^^^^^^^^^ use of undeclared type `HashAlgorithm`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = String::new();\n    for ch in text.chars() {\n        if\
    \ let (Some(val)) = md5::digest(ch.as_bytes()) {\n            md5.push(val);\n\
    \        } else {\n            md5.push('-');\n        }\n    }\n    Some(md5.into_owned())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp8w621rh_.rs:7:30\n  |\n7 |         if let (Some(val)) = md5::digest(ch.as_bytes())\
    \ {\n  |                              ^^^ use of undeclared crate or module `md5`\n\
    \nwarning: unnecessary parentheses around pattern\n --> /tmp/tmp8w621rh_.rs:7:16\n\
    \  |\n7 |         if let (Some(val)) = md5::digest(ch.as_bytes()) {\n  |     \
    \           ^         ^\n  |\n  = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n  |\n7 -         if let (Some(val)) = md5::digest(ch.as_bytes())\
    \ {\n7 +         if let Some(val) = md5::digest(ch.as_bytes()) {\n  | \n\nerror[E0599]:\
    \ no method named `as_bytes` found for type `char` in the current scope\n -->\
    \ /tmp/tmp8w621rh_.rs:7:45\n  |\n7 |         if let (Some(val)) = md5::digest(ch.as_bytes())\
    \ {\n  |                                             ^^^^^^^^ method not found\
    \ in `char`\n\nerror[E0599]: no method named `into_owned` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp8w621rh_.rs:13:14\n   |\n13 |     Some(md5.into_owned())\n\
    \   |              ^^^^^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hash = Hasher::new();\n    hash.input(text.as_bytes());\n   \
    \ hash.result()\n        .as_ref()\n        .map(|hash| hash.to_hex().to_uppercase())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Hasher`\n -->\
    \ /tmp/tmpayn7y1aw.rs:5:20\n  |\n5 |     let mut hash = Hasher::new();\n  |  \
    \                  ^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this trait\n  |\n1 | use std::hash::Hasher;\n  |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut ctx\
    \ = digest::digest::Digest::new();\n    ctx.update(&text.as_bytes());\n    let\
    \ res = ctx.finish();\n    match res {\n        Ok(x) => Some(x.to_string()),\n\
    \        Err(_) => None,\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp9ougprr2.rs:9:19\n  |\n9 |     let mut ctx = digest::digest::Digest::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5er\
    \ = CString::new(\"\");\n    md5er.put_data(&text.as_bytes()[..]);\n    md5er.finish();\n\
    \    let mut md5_hash = String::from(\"\");\n    md5_hash.push_str(&md5er.str());\n\
    \    md5_hash\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `CString`\n   -->\
    \ /tmp/tmpwk6ink5d.rs:8:21\n    |\n8   |       let mut md5er = CString::new(\"\
    \");\n    |                       ^^^^^^^\n    |\nhelp: a struct with a similar\
    \ name exists\n    |\n8   |     let mut md5er = String::new(\"\");\n    |    \
    \                 ~~~~~~\nhelp: consider importing this type alias\n    |\n1 \
    \  | use std::ffi::CString;\n    |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwk6ink5d.rs:13:5\n\
    \   |\n4  | fn string_to_md5(text: String) -> Option<String> {\n   |         \
    \                          -------------- expected `Option<String>` because of\
    \ return type\n...\n13 |     md5_hash\n   |     ^^^^^^^^ expected enum `Option`,\
    \ found struct `String`\n   |\n   = note: expected enum `Option<String>`\n   \
    \         found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n13 |     Some(md5_hash)\n   |     +++++        +\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.write_str(&MD5::digest(text));\n    md5.into()\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmp7454nz4c.rs:9:20\n\
    \  |\n9 |     md5.write_str(&MD5::digest(text));\n  |                    ^^^ use\
    \ of undeclared type `MD5`\n\nerror[E0599]: no method named `write_str` found\
    \ for struct `String` in the current scope\n   --> /tmp/tmp7454nz4c.rs:9:9\n \
    \   |\n9   |     md5.write_str(&MD5::digest(text));\n    |         ^^^^^^^^^ method\
    \ not found in `String`\n    |\n    = help: items from traits can only be used\
    \ if the trait is in scope\nhelp: the following trait is implemented but not in\
    \ scope; perhaps add a `use` for it:\n    |\n1   | use std::fmt::Write;\n    |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = md5.new();\n    hasher.update(text.as_bytes());\n    hasher.result()\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `md5` in this scope\n --> /tmp/tmp1kw97a6k.rs:8:22\n\
    \  |\n8 |     let mut hasher = md5.new();\n  |                      ^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() < MD5_SIZE {\n        return None;\n    }\n    let mut\
    \ md5 = digest::Digest::new(digest::SHA512);\n    md5.input(text.as_bytes());\n\
    \    let digest = md5.digest();\n    let mut ret = [0u8; MD5_SIZE];\n    for i\
    \ in 0..MD5_SIZE-1 {\n        ret[i] = digest[i];\n    }\n    Some(String::from_utf8(ret).unwrap())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpulku5tag.rs:8:19\n  |\n8 |     let mut md5 = digest::Digest::new(digest::SHA512);\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `digest`\n --> /tmp/tmpulku5tag.rs:8:39\n\
    \  |\n8 |     let mut md5 = digest::Digest::new(digest::SHA512);\n  |        \
    \                               ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror[E0425]: cannot find value `MD5_SIZE` in this scope\n --> /tmp/tmpulku5tag.rs:5:21\n\
    \  |\n5 |     if text.len() < MD5_SIZE {\n  |                     ^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `MD5_SIZE` in this scope\n\
    \  --> /tmp/tmpulku5tag.rs:11:25\n   |\n11 |     let mut ret = [0u8; MD5_SIZE];\n\
    \   |                         ^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `MD5_SIZE` in this scope\n  --> /tmp/tmpulku5tag.rs:12:17\n\
    \   |\n12 |     for i in 0..MD5_SIZE-1 {\n   |                 ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 5 previous errors\n\nSome errors have\
    \ detailed explanations: E0425, E0433.\nFor more information about an error, try\
    \ `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    Option::from(text).map(|s| {\n        use digest::Digest;\n        let\
    \ mut digest = Digest::new(MD5);\n        digest.input(s.as_bytes());\n      \
    \  digest.result().to_hex()\n    })\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0432]: unresolved import `digest`\n --> /tmp/tmplztz652d.rs:6:13\n\
    \  |\n6 |         use digest::Digest;\n  |             ^^^^^^ maybe a missing\
    \ crate `digest`?\n\nerror[E0425]: cannot find value `MD5` in this scope\n -->\
    \ /tmp/tmplztz652d.rs:7:38\n  |\n7 |         let mut digest = Digest::new(MD5);\n\
    \  |                                      ^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0432.\nFor more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut ctx = md5::Md5::new();\n    ctx.input_str(text);\n    let result\
    \ = ctx.output();\n    result.map(|x| x.to_string())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpmwgruzxf.rs:5:19\n  |\n5 |     let mut ctx = md5::Md5::new();\n\
    \  |                   ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut hash\
    \ = Hasher::new();\n    let mut bytes = vec![];\n\n    // Convert the UTF-8 bytes\
    \ into bytes in BigEndian.\n    for &s in text.chars() {\n        match s.to_u32()\
    \ {\n            None => {}\n            Some(val) => hash.write(&val.to_be_bytes()),\n\
    \        }\n    }\n\n    // Convert from BigEndian to bytes in little endian.\n\
    \    for byte in hash.rev() {\n        bytes.push(byte);\n    }\n\n    // Convert\
    \ the bytes to hex string.\n    let hex = bytes\n        .iter()\n        .map(|&b|\
    \ format!(\"{:02x}\", b))\n        .collect();\n    let result = hex.join(\"\"\
    );\n\n    // Return the md5 hash string.\n    Some(result)\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Hasher`\n -->\
    \ /tmp/tmpmnedii2b.rs:9:20\n  |\n9 |     let mut hash = Hasher::new();\n  |  \
    \                  ^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this trait\n  |\n1 | use std::hash::Hasher;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmnedii2b.rs:13:9\n   |\n13 |     for &s in text.chars()\
    \ {\n   |         ^^    ------------ this expression has type `Option<char>`\n\
    \   |         |\n   |         expected `char`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `s`\n   |\n   = note:   expected\
    \ type `char`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = digest::Md5::new();\n    md5.input(text.as_bytes());\n    let hash = md5.digest();\n\
    \n    let bytes = hash.to_hex().to_vec();\n    let mut hex = String::new();\n\
    \    for &byte in bytes {\n        hex.push_str(&format!(\"{:02x}\", byte));\n\
    \    }\n    hex.push_str(\"00000000000000000000000000000000\");\n    hex\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp1uw65_5c.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1uw65_5c.rs:19:5\n   |\n4  | fn string_to_md5(text:\
    \ String) -> Option<String> {\n   |                                   --------------\
    \ expected `Option<String>` because of return type\n...\n19 |     hex\n   |  \
    \   ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected\
    \ enum `Option<String>`\n            found struct `String`\nhelp: try wrapping\
    \ the expression in `Some`\n   |\n19 |     Some(hex)\n   |     +++++   +\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    text.md5()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpbj34pzym.rs:5:10\n  |\n5 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text {\n        \"\" => None,\n        _ => Some(md5(text).to_string()),\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmpwxjhyjs7.rs:7:19\n\
    \  |\n7 |         _ => Some(md5(text).to_string()),\n  |                   ^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpwxjhyjs7.rs:6:9\n\
    \  |\n5 |     match text {\n  |           ---- this expression has type `String`\n\
    6 |         \"\" => None,\n  |         ^^ expected struct `String`, found `&str`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut md5sum\
    \ = digest::Md5::new();\n    md5sum.update_str(&text).unwrap();\n    md5sum.as_str().ok().map(|s|\
    \ s.to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpila8pgqq.rs:8:22\n  |\n8 |     let mut md5sum = digest::Md5::new();\n\
    \  |                      ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.trim() == \"\" {\n        return None;\n    }\n    // md5 hashing\
    \ requires input to be a byte array.\n    let input_bytes = text.as_bytes();\n\
    \    let mut md5 = digest::digest();\n    md5.update(&input_bytes).expect(\"Failed\
    \ to hash the input.\");\n    let mut hash = String::new();\n    // Convert digested\
    \ data to hex string for printing purposes.\n    let mut hex_digest = String::new();\n\
    \    md5.digest(&mut hex_digest).expect(\"Failed to convert hash to hex digest.\"\
    );\n    hash.push_str(&hex_digest);\n    Some(hash)\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpp3oiwe0_.rs:10:19\n   |\n10 |     let mut md5 = digest::digest();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text {\n        \"\" => None,\n        _ => {\n            let\
    \ mut md5 = digest::Digest::new(\"md5\");\n            md5.input(text.as_bytes());\n\
    \            let mut hash = digest::Digest::new(\"md5\");\n            hash.input(&mut\
    \ md5);\n            Some(hash.hex())\n        }\n    }\n}\n\nfn main() {\n  \
    \  let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpnxjqbrps.rs:8:27\n  |\n8 |             let mut md5 = digest::Digest::new(\"\
    md5\");\n  |                           ^^^^^^ use of undeclared crate or module\
    \ `digest`\n\nerror[E0433]: failed to resolve: use of undeclared crate or module\
    \ `digest`\n  --> /tmp/tmpnxjqbrps.rs:10:28\n   |\n10 |             let mut hash\
    \ = digest::Digest::new(\"md5\");\n   |                            ^^^^^^ use\
    \ of undeclared crate or module `digest`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpnxjqbrps.rs:6:9\n  |\n5 |     match text {\n  |           ---- this\
    \ expression has type `String`\n6 |         \"\" => None,\n  |         ^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = Hasher::new();\n    let mut input_len = text.len();\n \
    \   let mut buf: [u8; 4] = [0; 4];\n\n    if input_len < 4 {\n        return Some(\"\
    \");\n    }\n\n    for char in &text {\n        md5.write(char.as_bytes());\n\
    \        buf[..input_len] = char.as_bytes();\n        input_len -= 1;\n    }\n\
    \n    if input_len != 0 {\n        md5.write(&buf[..input_len]);\n    }\n\n  \
    \  Some(md5.finish())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Hasher`\n -->\
    \ /tmp/tmp9fbo59dc.rs:5:19\n  |\n5 |     let mut md5 = Hasher::new();\n  |   \
    \                ^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this trait\n  |\n1 | use std::hash::Hasher;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9fbo59dc.rs:10:21\n   |\n10 |         return Some(\"\"\
    );\n   |                     ^^- help: try using a conversion method: `.to_string()`\n\
    \   |                     |\n   |                     expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: `&String` is not an iterator\n  --> /tmp/tmp9fbo59dc.rs:13:17\n\
    \   |\n13 |     for char in &text {\n   |                 ^^^^^ `&String` is not\
    \ an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `&String`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&String`\n\nerror[E0277]: the size for values of type `[u8]` cannot be\
    \ known at compilation time\n  --> /tmp/tmp9fbo59dc.rs:15:9\n   |\n15 |      \
    \   buf[..input_len] = char.as_bytes();\n   |         ^^^^^^^^^^^^^^^^ doesn't\
    \ have a size known at compile-time\n   |\n   = help: the trait `Sized` is not\
    \ implemented for `[u8]`\n   = note: the left-hand-side of an assignment must\
    \ have a statically known size\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text.trim() {\n        \"\" => None,\n        \"_\" => None,\n\
    \        _ => Some(MD5::new()\n            .encode(text.as_bytes())\n        \
    \    .expect(\"Failed to MD5 encode '{}'\", text)),\n    }\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmp41rb2xv0.rs:8:19\n\
    \  |\n8 |         _ => Some(MD5::new()\n  |                   ^^^ use of undeclared\
    \ type `MD5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5_hash = digest::Md5::new();\n    md5_hash.input(&text).unwrap();\n\
    \    let mut digest = md5_hash.result();\n    digest.as_bytes().to_hex()\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp2ykgdtpj.rs:5:24\n  |\n5 |     let mut md5_hash = digest::Md5::new();\n\
    \  |                        ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut result = String::new();\n\n    for chunk in text.as_bytes().chunks(32).skip(1)\
    \ {\n        let hash = md5::digest(chunk).to_string();\n        result.push_str(&hash.as_bytes());\n\
    \    }\n\n    result.push_str(\"d41d8cd98f00b204e9800998ecf8427e\")\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp8a9ssbr4.rs:8:20\n  |\n8 |         let hash = md5::digest(chunk).to_string();\n\
    \  |                    ^^^ use of undeclared crate or module `md5`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8a9ssbr4.rs:12:5\n   |\n4  | fn string_to_md5(text:\
    \ String) -> Option<String> {\n   |                                   --------------\
    \ expected `Option<String>` because of return type\n...\n12 |     result.push_str(\"\
    d41d8cd98f00b204e9800998ecf8427e\")\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `()`\n   |\n   = note:   expected enum `Option<String>`\n\
    \           found unit type `()`\nhelp: try adding an expression at the end of\
    \ the block\n   |\n12 ~     result.push_str(\"d41d8cd98f00b204e9800998ecf8427e\"\
    );\n13 +     None\n   |\n12 ~     result.push_str(\"d41d8cd98f00b204e9800998ecf8427e\"\
    );\n13 +     Some(())\n   |\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hash = digest::digest::Digest::new();\n    hash.update(text.as_bytes());\n\
    \    hash.finalize()\n        .map(|output| format!(\"{}\", output).into_owned())\n\
    \        .ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpx3ll5u1k.rs:5:20\n  |\n5 |     let mut hash = digest::digest::Digest::new();\n\
    \  |                    ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error[E0599]: no method named `into_owned` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpx3ll5u1k.rs:8:45\n  |\n8 |         .map(|output| format!(\"\
    {}\", output).into_owned())\n  |                                             ^^^^^^^^^^\
    \ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0433, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    Some(md5::digest(text.as_bytes()).to_string())\n}\n\nfn main() {\n  \
    \  let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpy7oq7jh1.rs:5:10\n  |\n5 |     Some(md5::digest(text.as_bytes()).to_string())\n\
    \  |          ^^^ use of undeclared crate or module `md5`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if !text.is_empty() {\n        let mut md5 = Md5::new();\n        md5.update(text).unwrap();\n\
    \        md5.finish().unwrap();\n        Some(md5.hex().to_string())\n    } else\
    \ {\n        None\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpv4dfg_mv.rs:6:23\n\
    \  |\n6 |         let mut md5 = Md5::new();\n  |                       ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hasher = Sha512::new();\n    hasher.input(text.as_bytes());\n\
    \n    let digest = hasher.result();\n    let mut res = digest.to_hex();\n    hex::encode(&mut\
    \ res);\n    Some(res)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Sha512`\n -->\
    \ /tmp/tmpkeuw7fq7.rs:5:22\n  |\n5 |     let mut hasher = Sha512::new();\n  |\
    \                      ^^^^^^ use of undeclared type `Sha512`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `hex`\n  --> /tmp/tmpkeuw7fq7.rs:10:5\n\
    \   |\n10 |     hex::encode(&mut res);\n   |     ^^^ use of undeclared crate or\
    \ module `hex`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text {\n        \"\" => None,\n        _ => Some(text\n       \
    \     .as_bytes()\n            .iter()\n            .map(|c| {\n             \
    \   if c <= 0xffu8 && c >= 0x20u8 && c != 0x09 {\n                    (c) as u16\n\
    \                } else {\n                    ((c as u16)\n                 \
    \       | (c as u16)\n                        >> 8)\n                }\n     \
    \       })\n            .collect::<Vec<_>>()\n            .join(\",\"))\n    }\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around block return value\n  --> /tmp/tmpvnkfq_q7.rs:14:21\n\
    \   |\n14 |                     ((c as u16)\n   |                     ^\n15 |\
    \                         | (c as u16)\n16 |                         >> 8)\n \
    \  |                             ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n14 ~                  \
    \   (c as u16)\n15 |                         | (c as u16)\n16 ~              \
    \           >> 8\n   |\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvnkfq_q7.rs:6:9\n\
    \  |\n5 |     match text {\n  |           ---- this expression has type `String`\n\
    6 |         \"\" => None,\n  |         ^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpvnkfq_q7.rs:11:25\n   |\n11 |\
    \                 if c <= 0xffu8 && c >= 0x20u8 && c != 0x09 {\n   |         \
    \                ^^^^^^\n   |                         |\n   |                \
    \         expected `&u8`, found `u8`\n   |                         help: consider\
    \ borrowing here: `&0xffu8`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvnkfq_q7.rs:11:40\n\
    \   |\n11 |                 if c <= 0xffu8 && c >= 0x20u8 && c != 0x09 {\n   |\
    \                                        ^^^^^^\n   |                        \
    \                |\n   |                                        expected `&u8`,\
    \ found `u8`\n   |                                        help: consider borrowing\
    \ here: `&0x20u8`\n\nerror[E0277]: can't compare `&u8` with `{integer}`\n  -->\
    \ /tmp/tmpvnkfq_q7.rs:11:52\n   |\n11 |                 if c <= 0xffu8 && c >=\
    \ 0x20u8 && c != 0x09 {\n   |                                                \
    \    ^^ no implementation for `&u8 == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&u8`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0599]: the method `join` exists\
    \ for struct `Vec<u16>`, but it"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hash = digest::Hasher::new();\n    hash.update(text.as_bytes());\n\
    \    hash.result()\n        .ok()\n        .and_then(|hash_bytes| Hasher::digest(&hash_bytes))\n\
    \        .ok()\n        .and_then(|hash| hash.to_hex())\n        .ok()\n     \
    \   .and_then(|hash| match hash {\n            \"0000000000000000000000000000000000000000\"\
    \ => Some(hash),\n            hash => None,\n        })\n}\n\nfn main() {\n  \
    \  let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpmvnra2u5.rs:5:28\n  |\n5 |     let mut hash = digest::Hasher::new();\n\
    \  |                            ^^^^^^ not found in `digest`\n  |\nhelp: consider\
    \ importing this trait\n  |\n1 | use std::hash::Hasher;\n  |\nhelp: if you import\
    \ `Hasher`, refer to it directly\n  |\n5 -     let mut hash = digest::Hasher::new();\n\
    5 +     let mut hash = Hasher::new();\n  | \n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Hasher`\n --> /tmp/tmpmvnra2u5.rs:9:32\n  |\n9 |   \
    \      .and_then(|hash_bytes| Hasher::digest(&hash_bytes))\n  |              \
    \                  ^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this trait\n  |\n1 | use std::hash::Hasher;\n  |\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if !text.is_empty() {\n        let mut md5_digest = Md5::new();\n   \
    \     md5_digest.update(text.as_bytes());\n        let md5_hash = md5_digest.digest();\n\
    \        Some(String::from_utf8(md5_hash).unwrap())\n    } else {\n        None\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp1dluc1cp.rs:6:30\n\
    \  |\n6 |         let mut md5_digest = Md5::new();\n  |                      \
    \        ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    digest::MD5::digest(text.as_bytes()).cloned().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmprus32_7_.rs:8:5\n  |\n8 |     digest::MD5::digest(text.as_bytes()).cloned().to_hex()\n\
    \  |     ^^^^^^ use of undeclared crate or module `digest`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() <= 0 {\n        return None;\n    }\n    let mut md5 =\
    \ MessageDigest::new(\"md5\");\n    md5.update(&text).unwrap();\n    Some(String::from_utf8(md5.digest()).unwrap())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MessageDigest`\n\
    \ --> /tmp/tmpf1lfmqpl.rs:8:19\n  |\n8 |     let mut md5 = MessageDigest::new(\"\
    md5\");\n  |                   ^^^^^^^^^^^^^ use of undeclared type `MessageDigest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n    let mut state = [0; 16];\n    md5.panic(format!(\"string_to_md5\
    \ expects text to be non-empty\"));\n    for c in text.chars() {\n        match\
    \ state.iter_mut().take(16) {\n            x if x == 0 => {\n                md5.panic(format!(\"\
    string_to_md5 expects text to have 16 unique characters\"));\n            }\n\
    \            _ => {\n                md5 += format!(\"{:02x}\", c);\n        \
    \        state[15]++;\n            }\n        }\n    }\n    Some(md5)\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpk8e1cota.rs:19:26\n\
    \   |\n19 |                 state[15]++;\n   |                          ^^ not\
    \ a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n19 |       \
    \          { let tmp = state[15]; state[15] += 1; tmp };\n   |               \
    \  +++++++++++          ~~~~~~~~~~~~~~~~~~~~~~~\n19 -                 state[15]++;\n\
    19 +                 state[15] += 1;\n   | \n\nerror[E0599]: no method named `panic`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpk8e1cota.rs:11:9\n\
    \   |\n11 |     md5.panic(format!(\"string_to_md5 expects text to be non-empty\"\
    ));\n   |         ^^^^^ method not found in `String`\n\nerror[E0369]: binary operation\
    \ `==` cannot be applied to type `std::iter::Take<std::slice::IterMut<'_, {integer}>>`\n\
    \  --> /tmp/tmpk8e1cota.rs:14:20\n   |\n14 |             x if x == 0 => {\n  \
    \ |                  - ^^ - {integer}\n   |                  |\n   |         \
    \         std::iter::Take<std::slice::IterMut<'_, {integer}>>\n\nerror[E0599]:\
    \ no method named `panic` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpk8e1cota.rs:15:21\n   |\n15 |                 md5.panic(format!(\"string_to_md5\
    \ expects text to have 16 unique characters\"));\n   |                     ^^^^^\
    \ method not found in `String`\n\nerror[E0277]: the trait bound `char: LowerHex`\
    \ is not satisfied\n   --> /tmp/tmpk8e1cota.rs:18:42\n    |\n18  |           \
    \      md5 += format!(\"{:02x}\", c);\n    |                                 \
    \         ^ the trait `LowerHex` is not implemented for `char`\n    |\n    = help:\
    \ the following other types implement trait `LowerHex`:\n              &T\n  \
    \            &mut T\n              NonZeroI128\n              NonZeroI16\n   \
    \           NonZeroI32\n              NonZeroI64\n              NonZeroI8\n  \
    \            NonZeroIsize\n            and 21 others\nnote: required by a bound\
    \ in `ArgumentV1::<'a>::new_lower_hex`\n    = note: this error originates in the\
    \ macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror[E0308]: mismatch"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    text.as_bytes()\n        .iter()\n        .fold(0, |mut a, x| {\n   \
    \         a += x;\n            a += a >> 8;\n            a += a >> 16;\n     \
    \       a += a >> 24;\n            a\n        })\n        .to_hex()\n        .take_while(char::is_ascii_lower)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_hex` found for type `u8` in the current\
    \ scope\n  --> /tmp/tmph6wnaawt.rs:14:10\n   |\n14 |         .to_hex()\n   | \
    \         ^^^^^^ help: there is an associated function with a similar name: `to_be`\n\
    \nerror[E0599]: no function or associated item named `is_ascii_lower` found for\
    \ type `char` in the current scope\n  --> /tmp/tmph6wnaawt.rs:15:27\n   |\n15\
    \ |         .take_while(char::is_ascii_lower)\n   |                          \
    \ ^^^^^^^^^^^^^^\n   |                           |\n   |                     \
    \      function or associated item not found in `char`\n   |                 \
    \          help: there is an associated function with a similar name: `is_ascii`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hasher = md5_builder::new();\n    let mut input = text.as_bytes();\n\
    \    let mut digest: Vec<u8> = Vec::new();\n    loop {\n        if input.len()\
    \ < 16 {\n            break;\n        }\n        let mut buffer = [0; 16];\n \
    \       input.copy_from_slice(&mut buffer);\n        hasher.input(&buffer);\n\
    \        digest.clear();\n        hasher.result(&mut digest);\n        input =\
    \ &digest[..];\n    }\n    Some(String::from_utf8_lossy(&digest))\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5_builder`\n\
    \ --> /tmp/tmpoih7lmrd.rs:5:22\n  |\n5 |     let mut hasher = md5_builder::new();\n\
    \  |                      ^^^^^^^^^^^ use of undeclared crate or module `md5_builder`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpoih7lmrd.rs:19:10\n   |\n19 |\
    \     Some(String::from_utf8_lossy(&digest))\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |          |\n   | \
    \         expected struct `String`, found enum `Cow`\n   |\n   = note: expected\
    \ struct `String`\n                found enum `Cow<'_, str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text {\n        \"\" => None,\n        s => Some(md5::digests::Md5::new(&s).to_hex()),\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpp1srli9e.rs:7:19\n  |\n7 |         s => Some(md5::digests::Md5::new(&s).to_hex()),\n\
    \  |                   ^^^ use of undeclared crate or module `md5`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpp1srli9e.rs:6:9\n  |\n5 |     match text {\n\
    \  |           ---- this expression has type `String`\n6 |         \"\" => None,\n\
    \  |         ^^ expected struct `String`, found `&str`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hash = digest::digest::MD5::new();\n    hash.update(text);\n\
    \    let digest = hash.digest();\n    hash\n        .write_all(&digest.encode_utf8().as_bytes())\n\
    \        .map(|s| s.into_string())\n        .ok()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpz9nicw3o.rs:5:20\n  |\n5 |     let mut hash = digest::digest::MD5::new();\n\
    \  |                    ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut ctx =\
    \ crate::context::Context::new();\n    ctx.update(&text);\n    ctx.finish();\n\
    \    let hash = ctx.result();\n    let hash_string = hash.hex().to_string();\n\
    \    Some(hash_string)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: maybe a missing crate `context`?\n -->\
    \ /tmp/tmpf9dp7wxi.rs:8:35\n  |\n8 |     let mut ctx = crate::context::Context::new();\n\
    \  |                                   ^^^^^^^ not found in `crate::context`\n\
    \  |\nhelp: consider importing this struct\n  |\n1 | use std::task::Context;\n\
    \  |\nhelp: if you import `Context`, refer to it directly\n  |\n8 -     let mut\
    \ ctx = crate::context::Context::new();\n8 +     let mut ctx = Context::new();\n\
    \  | \n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut digester\
    \ = digest::Digest::new(\"MD5\");\n    let mut md5 = digester.digest(b\"Hello\
    \ world\".as_bytes());\n    md5.update(text.as_bytes());\n    let mut hash: Vec<u8>\
    \ = md5.result();\n    hash.insert(hash.len() - 1, 0);\n    Some(base64::encode(&hash))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpvj_kg8kt.rs:8:24\n  |\n8 |     let mut digester = digest::Digest::new(\"\
    MD5\");\n  |                        ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror[E0433]: failed to resolve: use of undeclared crate or module `base64`\n\
    \  --> /tmp/tmpvj_kg8kt.rs:13:10\n   |\n13 |     Some(base64::encode(&hash))\n\
    \   |          ^^^^^^ use of undeclared crate or module `base64`\n\nerror[E0599]:\
    \ no method named `as_bytes` found for reference `&'static [u8; 11]` in the current\
    \ scope\n --> /tmp/tmpvj_kg8kt.rs:9:50\n  |\n9 |     let mut md5 = digester.digest(b\"\
    Hello world\".as_bytes());\n  |                                              \
    \    ^^^^^^^^ method not found in `&'static [u8; 11]`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut digest = Hasher::new();\n    digest.update(text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Hasher`\n -->\
    \ /tmp/tmp2mnfbhlr.rs:5:22\n  |\n5 |     let mut digest = Hasher::new();\n  |\
    \                      ^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this trait\n  |\n1 | use std::hash::Hasher;\n  |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut digest\
    \ = digest::digest(&digest::MD5_SHA256);\n    digest.update(&text);\n    digest.result()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp1a389ki7.rs:9:22\n  |\n9 |     let mut digest = digest::digest(&digest::MD5_SHA256);\n\
    \  |                      ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp1a389ki7.rs:9:38\n  |\n9 |     let mut digest = digest::digest(&digest::MD5_SHA256);\n\
    \  |                                      ^^^^^^ use of undeclared crate or module\
    \ `digest`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    Some(Hash::new(Digest::MD5).unwrap().digest(text.as_bytes()).to_hex())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Digest`\n -->\
    \ /tmp/tmphw0eq1i5.rs:5:20\n  |\n5 |     Some(Hash::new(Digest::MD5).unwrap().digest(text.as_bytes()).to_hex())\n\
    \  |                    ^^^^^^ use of undeclared type `Digest`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Hash`\n --> /tmp/tmphw0eq1i5.rs:5:10\n\
    \  |\n5 |     Some(Hash::new(Digest::MD5).unwrap().digest(text.as_bytes()).to_hex())\n\
    \  |          ^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ trait\n  |\n1 | use std::hash::Hash;\n  |\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    use md5::{Digest, Md5};\n\n    let mut hash = Md5::new();\n    hash.input(text.as_bytes());\n\
    \n    if let Ok(hash) = hash {\n        return Some(hash.hex());\n    }\n\n  \
    \  None\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0432]: unresolved import `md5`\n --> /tmp/tmptqb56gn6.rs:5:9\n \
    \ |\n5 |     use md5::{Digest, Md5};\n  |         ^^^ maybe a missing crate `md5`?\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0432`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n\n    let mut md5\
    \ = md5::Md5::new();\n    md5.input_str(&text);\n\n    Some(md5.result_str().ok().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpcq43vt_e.rs:9:19\n  |\n9 |     let mut md5 = md5::Md5::new();\n\
    \  |                   ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() <= MD5_MIN_STRING_LENGTH {\n        return Some(text);\n\
    \    }\n    let mut hasher = md5::Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    hasher.result();\n    let result = hasher.finish();\n    result.to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp57syuz_t.rs:8:22\n  |\n8 |     let mut hasher = md5::Md5::new();\n\
    \  |                      ^^^ use of undeclared crate or module `md5`\n\nerror[E0425]:\
    \ cannot find value `MD5_MIN_STRING_LENGTH` in this scope\n --> /tmp/tmp57syuz_t.rs:5:22\n\
    \  |\n5 |     if text.len() <= MD5_MIN_STRING_LENGTH {\n  |                  \
    \    ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor\
    \ more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    text.as_bytes().to_hex_string()\n        .parse()\n        .ok()\n  \
    \      .and_then(|e| e.ok())\n        .and_then(|e| e.parse::<u32>().unwrap())\n\
    \        .and_then(|e| e.to_owned())\n        .map(|e| e.to_string().to_owned())\n\
    \        .unwrap_or(None)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_hex_string` found for reference `&[u8]`\
    \ in the current scope\n --> /tmp/tmpxpsy4otp.rs:5:21\n  |\n5 |     text.as_bytes().to_hex_string()\n\
    \  |                     ^^^^^^^^^^^^^ help: there is an associated function with\
    \ a similar name: `to_vec_in`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    // Md5 algorithm\
    \ from https://tools.ietf.org/html/rfc1321#section-4.4\n    text.md5().ok()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpzcq5es6l.rs:10:10\n   |\n10 |     text.md5().ok()\n   |\
    \          ^^^ method not found in `String`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hasher = md5_hmac::Md5Mac::new();\n    hasher.input_str(&text);\n\
    \    hasher.input();\n    hasher.output_str(|out| out.as_bytes());\n    hasher.output();\n\
    \    hasher.output_bytes_as_hex().ok()\n        .map(|b| b.to_ascii_lowercase().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5_hmac`\n\
    \ --> /tmp/tmpiu3y3h_n.rs:5:22\n  |\n5 |     let mut hasher = md5_hmac::Md5Mac::new();\n\
    \  |                      ^^^^^^^^ use of undeclared crate or module `md5_hmac`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hasher = Hasher::new();\n    hasher.update(text.as_bytes());\n\
    \    let mut digest = hasher.finish();\n    let mut hash: String = digest.into_bytes()\n\
    \        .iter()\n        .map(|x| *x).collect()\n        .join(\"\");\n    hash\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Hasher`\n -->\
    \ /tmp/tmp2hb9by07.rs:5:22\n  |\n5 |     let mut hasher = Hasher::new();\n  |\
    \                      ^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this trait\n  |\n1 | use std::hash::Hasher;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2hb9by07.rs:12:5\n   |\n4  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n12 |     hash\n   |     ^^^^ expected\
    \ enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n\
    \            found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n12 |     Some(hash)\n   |     +++++    +\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.write_str(text).unwrap();\n    Some(md5.to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `write_str` found for struct `String` in\
    \ the current scope\n   --> /tmp/tmpy_svg3i9.rs:9:9\n    |\n9   |     md5.write_str(text).unwrap();\n\
    \    |         ^^^^^^^^^ method not found in `String`\n    |\n    = help: items\
    \ from traits can only be used if the trait is in scope\nhelp: the following trait\
    \ is implemented but not in scope; perhaps add a `use` for it:\n    |\n1   | use\
    \ std::fmt::Write;\n    |\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    text.as_str().and_then(|s| s.as_bytes()).map(|bytes| Md5::new(bytes).unwrap())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp2uny0pak.rs:5:58\n\
    \  |\n5 |     text.as_str().and_then(|s| s.as_bytes()).map(|bytes| Md5::new(bytes).unwrap())\n\
    \  |                                                          ^^^ use of undeclared\
    \ type `Md5`\n\nerror[E0599]: no method named `and_then` found for reference `&str`\
    \ in the current scope\n --> /tmp/tmp2uny0pak.rs:5:19\n  |\n5 |     text.as_str().and_then(|s|\
    \ s.as_bytes()).map(|bytes| Md5::new(bytes).unwrap())\n  |                   ^^^^^^^^\
    \ method not found in `&str`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0433, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    Some(md5::digest(text.as_bytes()).to_string())\n}\n\nfn main() {\n  \
    \  let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpm9hwy4hd.rs:5:10\n  |\n5 |     Some(md5::digest(text.as_bytes()).to_string())\n\
    \  |          ^^^ use of undeclared crate or module `md5`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text {\n        \"\" => None,\n        text => Ok(digest::digest(&text.as_bytes())),\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpy7dhaw_4.rs:7:20\n  |\n7 |         text => Ok(digest::digest(&text.as_bytes())),\n\
    \  |                    ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpy7dhaw_4.rs:6:9\n  |\n5 |     match\
    \ text {\n  |           ---- this expression has type `String`\n6 |         \"\
    \" => None,\n  |         ^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ `match` arms have incompatible types\n --> /tmp/tmpy7dhaw_4.rs:7:17\n  |\n5\
    \ | /     match text {\n6 | |         \"\" => None,\n  | |               ----\
    \ this is found to be of type `Option<String>`\n7 | |         text => Ok(digest::digest(&text.as_bytes())),\n\
    \  | |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`,\
    \ found enum `Result`\n8 | |     }\n  | |_____- `match` arms have incompatible\
    \ types\n  |\n  = note: expected enum `Option<String>`\n             found enum\
    \ `Result<_, _>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0433.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut digester\
    \ = digest::Digest::new(\"MD5\");\n    let mut input = text.as_bytes();\n    let\
    \ mut buf = digester.input(&input).expect(\"failed to get md5 input\");\n    let\
    \ mut digest = digester.digest(&mut buf).expect(\"failed to get md5 digest\");\n\
    \    let mut md5 = String::new();\n    md5.push_str(&format!(\"{:x}\", digest));\n\
    \    md5.push_str(\" \");\n    md5.push_str(&text).expect(\"failed to join md5\
    \ string\");\n    md5.as_str()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp812aazmk.rs:8:24\n  |\n8 |     let mut digester = digest::Digest::new(\"\
    MD5\");\n  |                        ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror[E0599]: no method named `expect` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmp812aazmk.rs:15:25\n   |\n15 |     md5.push_str(&text).expect(\"\
    failed to join md5 string\");\n   |                         ^^^^^^ method not\
    \ found in `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp812aazmk.rs:16:5\n\
    \   |\n4  | fn string_to_md5(text: String) -> Option<String> {\n   |         \
    \                          -------------- expected `Option<String>` because of\
    \ return type\n...\n16 |     md5.as_str()\n   |     ^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&str`\n   |\n   = note:   expected enum `Option<String>`\n\
    \           found reference `&str`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        None\n    } else {\n        Some(md5_encode(text))\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `md5_encode` in this scope\n --> /tmp/tmpjln546lt.rs:8:14\n\
    \  |\n8 |         Some(md5_encode(text))\n  |              ^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    text.as_bytes()\n        .md5()\n        .to_hex()\n        .to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `md5` found for reference `&[u8]` in the\
    \ current scope\n --> /tmp/tmpbgmhju0m.rs:6:10\n  |\n6 |         .md5()\n  | \
    \         ^^^ method not found in `&[u8]`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    text.md5()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpaflh4403.rs:5:10\n  |\n5 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = digest::digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpcr1e_u94.rs:9:19\n  |\n9 |     let mut md5 = digest::digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hasher = md5::MD5::new();\n    hasher.update(text.as_bytes());\n\
    \    hasher.result().to_string().to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpzry1qq0w.rs:5:22\n  |\n5 |     let mut hasher = md5::MD5::new();\n\
    \  |                      ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    text.as_bytes()\n        .iter()\n        .fold(String::new(), |mut acc,\
    \ &mut byte| {\n            match byte {\n                0x30 => acc\n      \
    \              .push((byte as u32 + 0xa) as u8)\n                    .to_string(),\n\
    \                0x31 => acc\n                    .push((byte as u32 + 0xa) as\
    \ u8)\n                    .to_string(),\n                0x32 => acc\n      \
    \              .push((byte as u32 + 0xa) as u8)\n                    .to_string(),\n\
    \                0x33 => acc\n                    .push((byte as u32 + 0xa) as\
    \ u8)\n                    .to_string(),\n                0x34 => acc\n      \
    \              .push((byte as u32 + 0xa) as u8)\n                    .to_string(),\n\
    \                0x35 => acc\n                    .push((byte as u32 + 0xa) as\
    \ u8)\n                    .to_string(),\n                0x36 => acc\n      \
    \              .push((byte as u32 + 0xa) as u8)\n                    .to_string(),\n\
    \                0x37 => acc\n                    .push((byte as u32 + 0xa) as\
    \ u8)\n                    .to_string(),\n                0x38 => acc\n      \
    \              .push((byte as u32 + 0xa) as u8)\n                    .to_string(),\n\
    \                0x39 => acc\n                    .push((byte as u32 + 0xa) as\
    \ u8)\n                    .to_string(),\n                0x2c => acc\n      \
    \              .push((byte as u32 + 0xa) as u8)\n                    .to_string(),\n\
    \                0x2e => acc\n                    .push((byte as u32 + 0xa) as\
    \ u8)\n                    .to_string(),\n                0x5b => acc\n      \
    \              .push((byte as u32 + 0xa) as u8)\n                    .to_string(),\n\
    \                _ => acc.push(byte as u8 as char.to_string()),\n            }\n\
    \        })\n        .into_owned()\n        .to_string()\n}\n\nfn main() {\n \
    \   let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error: casts cannot be followed by a method call\n  --> /tmp/tmp36aksc09.rs:48:31\n\
    \   |\n48 |                 _ => acc.push(byte as u8 as char.to_string()),\n \
    \  |                               ^^^^^^^^^^^^^^^^^^\n   |\nhelp: try surrounding\
    \ the expression in parentheses\n   |\n48 |                 _ => acc.push((byte\
    \ as u8 as char).to_string()),\n   |                               +         \
    \         +\n\nerror[E0308]: mismatched types\n --> /tmp/tmp36aksc09.rs:7:40\n\
    \  |\n7 |         .fold(String::new(), |mut acc, &mut byte| {\n  |           \
    \                             ^^^^^-----\n  |                                \
    \        |    |\n  |                                        |    expected due\
    \ to this\n  |                                        types differ in mutability\n\
    \  |                                        help: did you mean `byte`: `&&u8`\n\
    \  |\n  = note:      expected reference `&u8`\n          found mutable reference\
    \ `&mut _`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp36aksc09.rs:10:27\n\
    \   |\n10 |                     .push((byte as u32 + 0xa) as u8)\n   |       \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found `u8`\n\n\
    error[E0599]: `()` doesn't implement `std::fmt::Display`\n  --> /tmp/tmp36aksc09.rs:11:22\n\
    \   |\n11 |                     .to_string(),\n   |                      ^^^^^^^^^\
    \ `()` cannot be formatted with the default formatter\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `(): std::fmt::Display`\n     \
    \      which is required by `(): ToString`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp36aksc09.rs:13:27\n   |\n13 |                     .push((byte as\
    \ u32 + 0xa) as u8)\n   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found `u8`\n\nerror[E0599]: `()` doesn't implement `std::fmt::Display`\n\
    \  --> /tmp/tmp36aksc09.rs:14:22\n   |\n14 |                     .to_string(),\n\
    \   |                      ^^^^^^^^^ `()` cannot be formatted with the default\
    \ formatter\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `(): std::fmt::Display`\n           w"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let hash = digest::md5(text.as_bytes());\n    if hash.is_empty() {\n\
    \        return None;\n    } else {\n        Some(format!(\"{:x}\", hash))\n \
    \   }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp55ftddg9.rs:5:16\n  |\n5 |     let hash = digest::md5(text.as_bytes());\n\
    \  |                ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n\n    let mut digest\
    \ = Digest::new(\"MD5\");\n    digest.update(text.as_bytes());\n    let digest\
    \ = digest.digest();\n    Some(digest.to_hex())\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Digest`\n -->\
    \ /tmp/tmpykzhq3l_.rs:9:22\n  |\n9 |     let mut digest = Digest::new(\"MD5\"\
    );\n  |                      ^^^^^^ use of undeclared type `Digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    // md5 hash size\
    \ should be 32\n    let mut md5_ctx = digest::digests::MD5::default();\n    md5_ctx.update(text.as_bytes());\n\
    \    let hash = md5_ctx.digest();\n    Some(format!(\"{:x}\", hash))\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpv9qyiobi.rs:9:23\n  |\n9 |     let mut md5_ctx = digest::digests::MD5::default();\n\
    \  |                       ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = String::new();\n    for c in text.chars() {\n        let\
    \ d = c as u8;\n        let mut result = md5.chars();\n        result.push(d ^\
    \ (d >> 4));\n        result.push(d ^ (d >> 2));\n        result.push(d ^ (d >>\
    \ 0));\n        md5 = result.collect();\n    }\n    md5.as_ref()\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `Chars` in the current\
    \ scope\n --> /tmp/tmpq9vi4uae.rs:9:16\n  |\n9 |         result.push(d ^ (d >>\
    \ 4));\n  |                ^^^^ method not found in `Chars<'_>`\n\nerror[E0599]:\
    \ no method named `push` found for struct `Chars` in the current scope\n  -->\
    \ /tmp/tmpq9vi4uae.rs:10:16\n   |\n10 |         result.push(d ^ (d >> 2));\n \
    \  |                ^^^^ method not found in `Chars<'_>`\n\nerror[E0599]: no method\
    \ named `push` found for struct `Chars` in the current scope\n  --> /tmp/tmpq9vi4uae.rs:11:16\n\
    \   |\n11 |         result.push(d ^ (d >> 0));\n   |                ^^^^ method\
    \ not found in `Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq9vi4uae.rs:14:5\n\
    \   |\n4  | fn string_to_md5(text: String) -> Option<String> {\n   |         \
    \                          -------------- expected `Option<String>` because of\
    \ return type\n...\n14 |     md5.as_ref()\n   |     ^^^^^^^^^^^^ expected enum\
    \ `Option`, found reference\n   |\n   = note:   expected enum `Option<String>`\n\
    \           found reference `&_`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    // TODO: This hash isn't cryptographically secure and should probably\
    \ be rehashed.\n    match text.trim() {\n        \"\" => None,\n        s => Some(Hash::new().update(&s[..]).hexdigest()),\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Hash`\n --> /tmp/tmpk6jh3g28.rs:8:19\n\
    \  |\n8 |         s => Some(Hash::new().update(&s[..]).hexdigest()),\n  |    \
    \               ^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ trait\n  |\n1 | use std::hash::Hash;\n  |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text == \"\" {\n        return None;\n    }\n\n    use md5_base64::{Digest,\
    \ DigestError};\n    let mut digest = Digest::new();\n    digest.update(text.as_bytes());\n\
    \    digest.final();\n    let digest = digest.as_str();\n    Some(digest)\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found reserved keyword `final`\n  --> /tmp/tmpsfebgyr_.rs:12:12\n\
    \   |\n12 |     digest.final();\n   |            ^^^^^ expected identifier, found\
    \ reserved keyword\n   |\nhelp: escape `final` to use it as an identifier\n  \
    \ |\n12 |     digest.r#final();\n   |            ++\n\nerror[E0432]: unresolved\
    \ import `md5_base64`\n --> /tmp/tmpsfebgyr_.rs:9:9\n  |\n9 |     use md5_base64::{Digest,\
    \ DigestError};\n  |         ^^^^^^^^^^ maybe a missing crate `md5_base64`?\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0432`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n    md5.finalize()\n\
    \        .map(|result| result.to_string())\n        .ok()\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpoms4l4n5.rs:5:19\n  |\n5 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5er = MD5::new();\n    md5er.input(text.as_bytes());\n    Some(md5er.result_str().unwrap())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmpm0q4_d5z.rs:5:21\n\
    \  |\n5 |     let mut md5er = MD5::new();\n  |                     ^^^ use of\
    \ undeclared type `MD5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    md5(text).ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmp7u4cayq9.rs:5:5\n\
    \  |\n5 |     md5(text).ok()\n  |     ^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = digest::Md5::new(vec![]);\n\n    // Scroll the text to\
    \ the end so that we don't need to call memchr for every\n    // byte.\n    md5.update(text.as_bytes());\n\
    \    md5.update(b\"\\r\\n\".as_bytes());\n    md5.update(text.as_bytes());\n\n\
    \    let mut hash_bytes = md5.digest();\n    let mut hash = String::new();\n\n\
    \    for i in 0..hash_bytes.len() {\n        hash.push((hash_bytes[i] as u8).to_string());\n\
    \    }\n\n    Some(hash)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpint_eqzm.rs:5:19\n  |\n5 |     let mut md5 = digest::Md5::new(vec![]);\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0599]:\
    \ no method named `as_bytes` found for reference `&'static [u8; 2]` in the current\
    \ scope\n  --> /tmp/tmpint_eqzm.rs:10:24\n   |\n10 |     md5.update(b\"\\r\\n\"\
    .as_bytes());\n   |                        ^^^^^^^^ method not found in `&'static\
    \ [u8; 2]`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.trim().is_empty() {\n        return None;\n    }\n\n    // Convert\
    \ string into bytes using utf-8 encoding and encode it as base64\n    let md5_hash\
    \ = md5::Md5::digest(text.as_bytes());\n    let base64_encoded_hash = base64::encode(&md5_hash).unwrap();\n\
    \n    // Convert the bytes into a string\n    Some(base64_encoded_hash.clone())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmp1pvv7roh.rs:10:20\n   |\n10 |     let md5_hash = md5::Md5::digest(text.as_bytes());\n\
    \   |                    ^^^ use of undeclared crate or module `md5`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `base64`\n  --> /tmp/tmp1pvv7roh.rs:11:31\n\
    \   |\n11 |     let base64_encoded_hash = base64::encode(&md5_hash).unwrap();\n\
    \   |                               ^^^^^^ use of undeclared crate or module `base64`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text {\n        \"\" => None,\n        _ => Some(calculate_md5_hash(&text).unwrap()),\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `calculate_md5_hash` in this scope\n\
    \ --> /tmp/tmph948s1z4.rs:7:19\n  |\n7 |         _ => Some(calculate_md5_hash(&text).unwrap()),\n\
    \  |                   ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmph948s1z4.rs:6:9\n  |\n5 |     match text {\n\
    \  |           ---- this expression has type `String`\n6 |         \"\" => None,\n\
    \  |         ^^ expected struct `String`, found `&str`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n\n    let mut digest\
    \ = digest::Digest::new(\"md5\");\n    digest.input(&text).unwrap();\n    Some(digest.result().digest())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpr0gnr_v9.rs:9:22\n  |\n9 |     let mut digest = digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hasher = digest::Md5::default();\n    hasher.update(text).expect(\"\
    Failed to digest text\");\n    hasher.digest().expect(\"Failed to hash text\"\
    )\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp3e_1uz7p.rs:5:22\n  |\n5 |     let mut hasher = digest::Md5::default();\n\
    \  |                      ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = ::md5::MD5::new();\n    md5.update(text).expect(\"Error calculating MD5\"\
    );\n    Some(md5.digest().to_hex())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: maybe a missing crate `md5`?\n --> /tmp/tmp4ri7r5pl.rs:9:21\n\
    \  |\n9 |     let mut md5 = ::md5::MD5::new();\n  |                     ^^^ maybe\
    \ a missing crate `md5`?\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut digest\
    \ = Md5::new();\n    digest.update(&text.as_bytes());\n    let mut md5_str = digest.digest().to_string();\n\
    \    md5_str = md5_str.trim_right(md5_str.len() - 3);\n    md5_str.as_ref()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp22j6er3m.rs:8:22\n\
    \  |\n8 |     let mut digest = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    text.into_md5()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `into_md5` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp0f87v6hc.rs:5:10\n  |\n5 |     text.into_md5()\n\
    \  |          ^^^^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut digest = String::new();\n    let mut md5 = digest.as_bytes();\n\
    \n    for c in text.as_bytes() {\n        let c = (c as u32).to_bytes(4, byteOrder::LittleEndian);\n\
    \        md5.copy_from_slice(c);\n    }\n\n    Some(digest.into())\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `byteOrder`\n\
    \ --> /tmp/tmp3q6whpj5.rs:9:40\n  |\n9 |         let c = (c as u32).to_bytes(4,\
    \ byteOrder::LittleEndian);\n  |                                        ^^^^^^^^^\
    \ use of undeclared crate or module `byteOrder`\n\nerror[E0599]: no method named\
    \ `to_bytes` found for type `u32` in the current scope\n --> /tmp/tmp3q6whpj5.rs:9:28\n\
    \  |\n9 |         let c = (c as u32).to_bytes(4, byteOrder::LittleEndian);\n \
    \ |                            ^^^^^^^^ help: there is an associated function\
    \ with a similar name: `to_be`\n\nerror[E0606]: casting `&u8` as `u32` is invalid\n\
    \ --> /tmp/tmp3q6whpj5.rs:9:17\n  |\n9 |         let c = (c as u32).to_bytes(4,\
    \ byteOrder::LittleEndian);\n  |                 ^-^^^^^^^^\n  |             \
    \    ||\n  |                 |help: dereference the expression: `*c`\n  |    \
    \             cannot cast `&u8` as `u32`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0433, E0599, E0606.\nFor\
    \ more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text.len() {\n        0 => None,\n        x if x > 0 => Some(md5(text).to_string()),\n\
    \        _ => None,\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmpanmu4yjs.rs:7:28\n\
    \  |\n7 |         x if x > 0 => Some(md5(text).to_string()),\n  |            \
    \                ^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text == \"\" {\n        return None;\n    }\n\n    let mut hasher\
    \ = digest::digest::MD5::new();\n    hasher.input(text.as_bytes());\n    let mut\
    \ md5_hash = hasher.result();\n\n    let mut string_bytes = vec![];\n    md5_hash.read_to_end(&mut\
    \ string_bytes);\n\n    Some(base64::encode(&string_bytes).unwrap())\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpw_3fhanh.rs:9:22\n  |\n9 |     let mut hasher = digest::digest::MD5::new();\n\
    \  |                      ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error[E0433]: failed to resolve: use of undeclared crate or module `base64`\n\
    \  --> /tmp/tmpw_3fhanh.rs:16:10\n   |\n16 |     Some(base64::encode(&string_bytes).unwrap())\n\
    \   |          ^^^^^^ use of undeclared crate or module `base64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = String::new();\n    for byte in text.as_bytes() {\n   \
    \     md5.push((*byte as u8).to_ascii_lowercase().unwrap());\n    }\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `u8` in the current\
    \ scope\n --> /tmp/tmpnm87ykfk.rs:7:53\n  |\n7 |         md5.push((*byte as u8).to_ascii_lowercase().unwrap());\n\
    \  |                                                     ^^^^^^ method not found\
    \ in `u8`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    use std::collections::HashMap;\n    let mut map: HashMap<String, String>\
    \ = HashMap::new();\n    if !text.is_empty() {\n        let mut words = text.split_whitespace();\n\
    \        let mut md5_hash = String::new();\n        for word in words {\n    \
    \        let hash = MD5::default().digest(word.as_bytes()).unwrap();\n       \
    \     md5_hash.push_str(&format!(\"{}{}\", hash, \" \"));\n            map.insert(word.to_owned(),\
    \ hash.clone());\n        }\n        md5_hash.push_str(\"\\r\");\n        md5_hash\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n  --> /tmp/tmpbv0gsdza.rs:11:24\n\
    \   |\n11 |             let hash = MD5::default().digest(word.as_bytes()).unwrap();\n\
    \   |                        ^^^ use of undeclared type `MD5`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbv0gsdza.rs:16:9\n   |\n4  | fn string_to_md5(text:\
    \ String) -> Option<String> {\n   |                                   --------------\
    \ expected `Option<String>` because of return type\n...\n16 |         md5_hash\n\
    \   |         ^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n \
    \  = note: expected enum `Option<String>`\n            found struct `String`\n\
    help: try wrapping the expression in `Some`\n   |\n16 |         Some(md5_hash)\n\
    \   |         +++++        +\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    use md5::Md5;\n    match text.len() {\n        0 => None,\n        length\
    \ => Some(Md5::digest(text).to_string()),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0432]: unresolved import `md5`\n --> /tmp/tmpxmrmwcl0.rs:5:9\n \
    \ |\n5 |     use md5::Md5;\n  |         ^^^ maybe a missing crate `md5`?\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0432`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut digester\
    \ = digest::digest(&digest::MD5_SHA256);\n    digester.update(text.as_bytes());\n\
    \    digester.finalize()\n        .map(|digest_bytes| {\n            let mut hash\
    \ = String::new();\n            for bytes in digest_bytes.iter().chunks_exact(digest::BLOCK_SIZE)\
    \ {\n                hash.push_str(&bytes.iter().map(|&b| format!(\"{:02x}\",\
    \ b)).collect::<String>());\n                hash.push(' ');\n            }\n\
    \            hash\n        })\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpix7msrc8.rs:8:24\n  |\n8 |     let mut digester = digest::digest(&digest::MD5_SHA256);\n\
    \  |                        ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpix7msrc8.rs:8:40\n  |\n8 |     let mut digester = digest::digest(&digest::MD5_SHA256);\n\
    \  |                                        ^^^^^^ use of undeclared crate or\
    \ module `digest`\n\nerror[E0433]: failed to resolve: use of undeclared crate\
    \ or module `digest`\n  --> /tmp/tmpix7msrc8.rs:13:59\n   |\n13 |            \
    \ for bytes in digest_bytes.iter().chunks_exact(digest::BLOCK_SIZE) {\n   |  \
    \                                                         ^^^^^^ use of undeclared\
    \ crate or module `digest`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        None\n    } else {\n        md5::Digest::digest(text.as_bytes()).to_base64()\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpiby9msk7.rs:8:9\n  |\n8 |         md5::Digest::digest(text.as_bytes()).to_base64()\n\
    \  |         ^^^ use of undeclared crate or module `md5`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = String::new();\n    for c in text.chars() {\n        if\
    \ let (Some(_), Some(_)) = (md5[..], md5[..].chars().nth(0b1101101)) {\n     \
    \       md5[..] = c;\n        } else if let (Some(_), Some(_)) = (md5[..], md5[..].chars().nth(0b1100010))\
    \ {\n            md5[..] = c;\n        } else {\n            md5 = md5.to_string();\n\
    \            None;\n        }\n    }\n    Some(md5)\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmps76q77i1.rs:7:17\n  |\n7 |\
    \         if let (Some(_), Some(_)) = (md5[..], md5[..].chars().nth(0b1101101))\
    \ {\n  |                 ^^^^^^^             -----------------------------------------\
    \ this expression has type `(str, Option<char>)`\n  |                 |\n  | \
    \                expected `str`, found enum `Option`\n  |\n  = note: expected\
    \ type `str`\n             found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmps76q77i1.rs:8:23\n  |\n8 |             md5[..] = c;\n  |\
    \             -------   ^ expected `str`, found `char`\n  |             |\n  |\
    \             expected due to the type of this binding\n\nerror[E0277]: the size\
    \ for values of type `str` cannot be known at compilation time\n --> /tmp/tmps76q77i1.rs:8:13\n\
    \  |\n8 |             md5[..] = c;\n  |             ^^^^^^^ doesn't have a size\
    \ known at compile-time\n  |\n  = help: the trait `Sized` is not implemented for\
    \ `str`\n  = note: the left-hand-side of an assignment must have a statically\
    \ known size\n\nerror[E0308]: mismatched types\n --> /tmp/tmps76q77i1.rs:9:24\n\
    \  |\n9 |         } else if let (Some(_), Some(_)) = (md5[..], md5[..].chars().nth(0b1100010))\
    \ {\n  |                        ^^^^^^^             -----------------------------------------\
    \ this expression has type `(str, Option<char>)`\n  |                        |\n\
    \  |                        expected `str`, found enum `Option`\n  |\n  = note:\
    \ expected type `str`\n             found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmps76q77i1.rs:10:23\n   |\n10 |             md5[..] = c;\n\
    \   |             -------   ^ expected `str`, found `char`\n   |             |\n\
    \   |             expected due to the type of this binding\n\nerror[E0277]: the\
    \ size for values of type `str` cannot be known at compilation time\n  --> /tmp/tmps76q77i1.rs:10:13\n\
    \   |\n10 |             md5[..] = c;\n   |             ^^^^^^^ doesn't have a\
    \ size known at compile-time\n   |\n   = help: the trait `Sized` is not implemented\
    \ for `str`\n   = note: the left-hand-side of an assignment must have a statically"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    // Convert the\
    \ binary data to a hex string\n    let mut hex_str = String::new();\n    let mut\
    \ digest = sha2::Sha256::new();\n    digest.input_str(&text).unwrap();\n    digest.output_hex(&mut\
    \ hex_str).unwrap();\n\n    // Return the hex string\n    hex_str.to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `sha2`\n\
    \  --> /tmp/tmprnpwkhld.rs:11:22\n   |\n11 |     let mut digest = sha2::Sha256::new();\n\
    \   |                      ^^^^ use of undeclared crate or module `sha2`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprnpwkhld.rs:16:5\n   |\n4  | fn string_to_md5(text:\
    \ String) -> Option<String> {\n   |                                   --------------\
    \ expected `Option<String>` because of return type\n...\n16 |     hex_str.to_string()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n\
    \   |\n   = note: expected enum `Option<String>`\n            found struct `String`\n\
    help: try wrapping the expression in `Some`\n   |\n16 |     Some(hex_str.to_string())\n\
    \   |     +++++                   +\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    match md5_digest_from_str(&text)\
    \ {\n        Ok(digest) => Some(digest),\n        Err(_) => None,\n    }\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `md5_digest_from_str` in this scope\n\
    \ --> /tmp/tmpemur4b3j.rs:8:11\n  |\n8 |     match md5_digest_from_str(&text)\
    \ {\n  |           ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut hasher\
    \ = Sha256::new();\n    hasher.input_str(text.as_bytes());\n    let digest = hasher.result_str();\n\
    \    Some(digest)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Sha256`\n -->\
    \ /tmp/tmpwr0nqzia.rs:8:22\n  |\n8 |     let mut hasher = Sha256::new();\n  |\
    \                      ^^^^^^ use of undeclared type `Sha256`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let bytes = text.as_bytes();\n    let mut digest = digest::md5::Digest::new();\n\
    \    digest.update(&bytes);\n    Some(digest.result_str())\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmphjz1aaid.rs:6:22\n  |\n6 |     let mut digest = digest::md5::Digest::new();\n\
    \  |                      ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut digest = String::new();\n    if let Ok(text) = text.as_bytes()\
    \ {\n        digest.write_all(&digest.as_ref().chain(text)).unwrap();\n    }\n\
    \    if digest.is_empty() {\n        None\n    } else {\n        Some(digest.to_hex())\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1mvhdgr3.rs:6:12\n  |\n6 |\
    \     if let Ok(text) = text.as_bytes() {\n  |            ^^^^^^^^   ---------------\
    \ this expression has type `&[u8]`\n  |            |\n  |            expected\
    \ slice `[u8]`, found enum `Result`\n  |\n  = note: expected slice `[u8]`\n  \
    \            found enum `Result<_, _>`\n\nerror[E0599]: no method named `write_all`\
    \ found for struct `String` in the current scope\n --> /tmp/tmp1mvhdgr3.rs:7:16\n\
    \  |\n7 |         digest.write_all(&digest.as_ref().chain(text)).unwrap();\n \
    \ |                ^^^^^^^^^ method not found in `String`\n\nerror[E0599]: no\
    \ method named `to_hex` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmp1mvhdgr3.rs:12:21\n   |\n12 |         Some(digest.to_hex())\n   |  \
    \                   ^^^^^^ method not found in `String`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.trim().is_empty() {\n        return None;\n    }\n\n    let mut\
    \ ctx = digest::Md5::new();\n    ctx.input(text.as_bytes());\n    ctx.result(|digest|\
    \ {\n        Ok(String::from_utf8_lossy(&digest).to_string())\n    })\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpz1vfbyci.rs:9:19\n  |\n9 |     let mut ctx = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0277]:\
    \ the size for values of type `[u8]` cannot be known at compilation time\n  -->\
    \ /tmp/tmpz1vfbyci.rs:11:17\n   |\n11 |     ctx.result(|digest| {\n   |      \
    \           ^^^^^^ doesn't have a size known at compile-time\n   |\n   = help:\
    \ the trait `Sized` is not implemented for `[u8]`\nhelp: function arguments must\
    \ have a statically known size, borrowed types always have a known size\n   |\n\
    11 |     ctx.result(|&digest| {\n   |                 +\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0433.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    hash_impl(text,\
    \ &MD5_FN);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `hash_impl` in this scope\n --> /tmp/tmp2o40knq3.rs:9:5\n\
    \  |\n9 |     hash_impl(text, &MD5_FN);\n  |     ^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `MD5_FN` in this scope\n --> /tmp/tmp2o40knq3.rs:9:22\n\
    \  |\n9 |     hash_impl(text, &MD5_FN);\n  |                      ^^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp2o40knq3.rs:4:35\n\
    \  |\n4 | fn string_to_md5(text: String) -> Option<String> {\n  |    -------------\
    \                  ^^^^^^^^^^^^^^ expected enum `Option`, found `()`\n  |    |\n\
    \  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note:   expected enum `Option<String>`\n          found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() != 0 {\n        let mut md5 = CryptoHasher::new();\n  \
    \      md5.input(text.as_bytes());\n        let hash = md5.result();\n       \
    \ Some(format!(\"{:x}\", hash))\n    } else {\n        None\n    }\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `CryptoHasher`\n\
    \ --> /tmp/tmpr9336drs.rs:6:23\n  |\n6 |         let mut md5 = CryptoHasher::new();\n\
    \  |                       ^^^^^^^^^^^^ use of undeclared type `CryptoHasher`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text {\n        \"\" => None,\n        text => Some(md5(&text).to_string()),\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmplq0mg5b1.rs:7:22\n\
    \  |\n7 |         text => Some(md5(&text).to_string()),\n  |                 \
    \     ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmplq0mg5b1.rs:6:9\n\
    \  |\n5 |     match text {\n  |           ---- this expression has type `String`\n\
    6 |         \"\" => None,\n  |         ^^ expected struct `String`, found `&str`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut hash =\
    \ CryptoHash::new();\n    hash.update(&text.as_bytes());\n    hash.digest().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `CryptoHash`\n\
    \ --> /tmp/tmp_uy7lvsw.rs:8:20\n  |\n8 |     let mut hash = CryptoHash::new();\n\
    \  |                    ^^^^^^^^^^ use of undeclared type `CryptoHash`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut hash =\
    \ Hasher::new();\n    hash.input(&text.as_bytes());\n    Some(format!(\"{}\",\
    \ hash.result().into_hex()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Hasher`\n -->\
    \ /tmp/tmpg1zz6wnb.rs:8:20\n  |\n8 |     let mut hash = Hasher::new();\n  |  \
    \                  ^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this trait\n  |\n1 | use std::hash::Hasher;\n  |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = String::new();\n    for ch in text.chars() {\n        let\
    \ byte = ch.to_u8();\n        let mut byte_string = String::new();\n        byte_string.push_str(&format!(\"\
    {:02x}\", byte));\n        md5.push_str(&byte_string);\n    }\n    md5.into()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_u8` found for type `char` in the current\
    \ scope\n --> /tmp/tmprmsllqt1.rs:7:23\n  |\n7 |         let byte = ch.to_u8();\n\
    \  |                       ^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() > 0 {\n        let mut md5 = md5::MD5::new();\n       \
    \ md5.update(&text.as_bytes());\n        Some(format!(\"{:x}\", md5.digest().unwrap()))\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp_kv2mhzj.rs:6:23\n  |\n6 |         let mut md5 = md5::MD5::new();\n\
    \  |                       ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n\n    let mut md5sum\
    \ = digest::digest!(digest::Md5);\n    md5sum.input_str(text);\n    Some(md5sum.output().unwrap())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp9ux91h_l.rs:9:22\n  |\n9 |     let mut md5sum = digest::digest!(digest::Md5);\n\
    \  |                      ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() <= 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(text.as_bytes());\n    md5.digest().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpyav_d1ef.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n\n    let mut hash\
    \ = md5::Md5::new();\n    hash.update(&text).unwrap();\n\n    let hash = hash.hex().to_string();\n\
    \n    Some(hash)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpzkx7ilr1.rs:9:20\n  |\n9 |     let mut hash = md5::Md5::new();\n\
    \  |                    ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    text.to_owned()\n        .encode()\n        .md5_hash()\n        .ok()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `encode` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpidmj4ewe.rs:6:10\n  |\n6 |         .encode()\n \
    \ |          ^^^^^^ help: there is an associated function with a similar name:\
    \ `encode_utf16`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text {\n        \"\" => None,\n        _ => Some(Md5::new(text).unwrap().hex()),\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpyash1mfs.rs:7:19\n\
    \  |\n7 |         _ => Some(Md5::new(text).unwrap().hex()),\n  |             \
    \      ^^^ use of undeclared type `Md5`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpyash1mfs.rs:6:9\n  |\n5 |     match text {\n  |           ---- this\
    \ expression has type `String`\n6 |         \"\" => None,\n  |         ^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    hex::encode(&text).ok().and_then(|encoded:\
    \ String| {\n        base64::encode(&encoded).ok().and_then(|encoded: String|\
    \ {\n            hash::MD5::new()\n                .bytes(&encoded)\n        \
    \        .collect::<Result<Vec<u8>, std::io::Error>>()\n                .map(|data|\
    \ base64::encode(&data)?)\n                .ok()\n        })\n    })\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `hex`\n\
    \ --> /tmp/tmp_oqtk431.rs:9:5\n  |\n9 |     hex::encode(&text).ok().and_then(|encoded:\
    \ String| {\n  |     ^^^ use of undeclared crate or module `hex`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `base64`\n  --> /tmp/tmp_oqtk431.rs:10:9\n\
    \   |\n10 |         base64::encode(&encoded).ok().and_then(|encoded: String| {\n\
    \   |         ^^^^^^ use of undeclared crate or module `base64`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `hash`\n  --> /tmp/tmp_oqtk431.rs:11:13\n\
    \   |\n11 |             hash::MD5::new()\n   |             ^^^^ use of undeclared\
    \ crate or module `hash`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ crate or module `base64`\n  --> /tmp/tmp_oqtk431.rs:14:29\n   |\n14 |      \
    \           .map(|data| base64::encode(&data)?)\n   |                        \
    \     ^^^^^^ use of undeclared crate or module `base64`\n\nerror: aborting due\
    \ to 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n\n    let mut hash\
    \ = ::std::collections::HashMap::new();\n    hash.insert(string_to_str(TEXT),\
    \ text);\n\n    for ch in text.chars() {\n        if let Some(i) = hash.iter().position(|&(_,\
    \ ch)| {\n            match ch {\n                c if c == ch => c == ch,\n \
    \               _ => false,\n            }\n        }) {\n            hash.remove(i);\n\
    \        }\n    }\n\n    if !hash.is_empty() {\n        let mut res = String::new();\n\
    \        for (_, hash) in hash {\n            res.push_str(hash);\n        }\n\
    \        Some(res.into())\n    } else {\n        None\n    }\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `string_to_str` in this scope\n  -->\
    \ /tmp/tmp1hh8293i.rs:10:17\n   |\n10 |     hash.insert(string_to_str(TEXT), text);\n\
    \   |                 ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `TEXT` in this scope\n  --> /tmp/tmp1hh8293i.rs:10:31\n   |\n10 |\
    \     hash.insert(string_to_str(TEXT), text);\n   |                          \
    \     ^^^^ help: a local variable with a similar name exists: `text`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1hh8293i.rs:13:48\n   |\n13 |         if let\
    \ Some(i) = hash.iter().position(|&(_, ch)| {\n   |                          \
    \                      ^^^^^^^-\n   |                                        \
    \        |      |\n   |                                                |     \
    \ expected due to this\n   |                                                expected\
    \ tuple, found reference\n   |\n   = note:  expected tuple `(&_, &String)`\n \
    \          found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1hh8293i.rs:19:25\n\
    \   |\n19 |             hash.remove(i);\n   |                         ^\n   |\
    \                         |\n   |                         expected reference,\
    \ found `usize`\n   |                         help: consider borrowing here: `&i`\n\
    \   |\n   = note: expected reference `&_`\n                   found type `usize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1hh8293i.rs:26:26\n   |\n26 |\
    \             res.push_str(hash);\n   |                          ^^^^\n   |  \
    \                        |\n   |                          expected `&str`, found\
    \ struct `String`\n   |                          help: consider borrowing here:\
    \ `&hash`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = digest::MD5::new();\n    md5.input(text.as_bytes());\n\
    \    let mut md5 = md5.digest();\n    md5 = &mut md5;\n    let mut md5_bytes =\
    \ digest::digest::digest(&mut md5);\n    md5_bytes = &mut md5_bytes[..4];\n  \
    \  md5_bytes\n        .iter()\n        .map(|&x| format!(\"{:02x}\", x).to_string().into_owned())\n\
    \        .collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpcbyvfgul.rs:5:19\n  |\n5 |     let mut md5 = digest::MD5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `digest`\n --> /tmp/tmpcbyvfgul.rs:9:25\n\
    \  |\n9 |     let mut md5_bytes = digest::digest::digest(&mut md5);\n  |     \
    \                    ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpcbyvfgul.rs:8:11\n  |\n8 |     md5 = &mut md5;\n\
    \  |           ^^^^^^^^ cyclic type of infinite size\n  |\nhelp: consider removing\
    \ the borrow\n  |\n8 -     md5 = &mut md5;\n8 +     md5 = md5;\n  | \n\nerror[E0599]:\
    \ no method named `into_owned` found for struct `String` in the current scope\n\
    \  --> /tmp/tmpcbyvfgul.rs:13:52\n   |\n13 |         .map(|&x| format!(\"{:02x}\"\
    , x).to_string().into_owned())\n   |                                         \
    \           ^^^^^^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    use crate::hash::Hasher46;\n    match text.len() {\n        0 => None,\n\
    \        size => {\n            let mut hasher = Hasher46::new();\n          \
    \  hasher.input(text.as_bytes());\n            let hash_bytes = hasher.finish();\n\
    \            let mut hash: Vec<u8> = hash_bytes.to_vec();\n            hasher.reset().input(&hash).finish();\n\
    \            let hash_bytes = Hasher46::digest(&hash);\n            Some(std::str::from_utf8(hash_bytes).unwrap())\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0432]: unresolved import `crate::hash`\n --> /tmp/tmpozaaoff5.rs:5:16\n\
    \  |\n5 |     use crate::hash::Hasher46;\n  |                ^^^^\n  |       \
    \         |\n  |                unresolved import\n  |                help: a\
    \ similar path exists: `std::hash`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpozaaoff5.rs:15:18\n\
    \   |\n15 |             Some(std::str::from_utf8(hash_bytes).unwrap())\n   | \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a\
    \ conversion method: `.to_string()`\n   |                  |\n   |           \
    \       expected struct `String`, found `&str`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0432.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hash =\
    \ digest::Digest::new(\"md5\");\n    hash.update(text.as_bytes());\n    hash.finalize()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpnh61z4xk.rs:8:20\n  |\n8 |     let mut hash = digest::Digest::new(\"\
    md5\");\n  |                    ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    Some(text.md5())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmphxg90v_3.rs:5:15\n  |\n5 |     Some(text.md5())\n  |   \
    \            ^^^ method not found in `String`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"\\r\\n\");\n    let mut input = text.as_bytes();\n\
    \    let mut digest = digest::digest(&mut md5);\n    let mut hasher = sha1::Sha1::new();\n\
    \    hasher.update(&mut input);\n    hasher.update(&mut digest);\n    hasher.finalize();\n\
    \    Some(md5.into_owned())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp4ly1yunf.rs:11:22\n   |\n11 |     let mut digest = digest::digest(&mut\
    \ md5);\n   |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror[E0433]: failed to resolve: use of undeclared crate or module `sha1`\n\
    \  --> /tmp/tmp4ly1yunf.rs:12:22\n   |\n12 |     let mut hasher = sha1::Sha1::new();\n\
    \   |                      ^^^^ use of undeclared crate or module `sha1`\n\nerror[E0599]:\
    \ no method named `into_owned` found for struct `String` in the current scope\n\
    \  --> /tmp/tmp4ly1yunf.rs:16:14\n   |\n16 |     Some(md5.into_owned())\n   |\
    \              ^^^^^^^^^^ method not found in `String`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    debug!(\"string_to_md5: text={:?}\", text);\n    let mut md5 = String::new();\n\
    \    md5.push_str(\"$\");\n    let mut chars = text.as_bytes();\n    let mut i\
    \ = 0;\n    while i < chars.len() {\n        let mut ch = chars[i++];\n      \
    \  if ch >= b'A' && ch <= b'Z' {\n            ch -= b'A' as i8;\n        }\n \
    \       md5.push((ch & 0xff) as u8);\n    }\n    md5.push_str(\"$\");\n    md5.push_str(chars.to_string_lossy().as_slice());\n\
    \    debug!(\"string_to_md5: md5={:?}\", md5);\n    Some(md5)\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp4zlguxcv.rs:11:29\n\
    \   |\n11 |         let mut ch = chars[i++];\n   |                           \
    \  ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n11 |\
    \         let mut ch = chars[{ let tmp = i; i += 1; tmp }];\n   |            \
    \                +++++++++++  ~~~~~~~~~~~~~~~\n11 -         let mut ch = chars[i++];\n\
    11 +         let mut ch = chars[i += 1];\n   | \n\nerror: cannot find macro `debug`\
    \ in this scope\n --> /tmp/tmp4zlguxcv.rs:5:5\n  |\n5 |     debug!(\"string_to_md5:\
    \ text={:?}\", text);\n  |     ^^^^^\n\nerror: cannot find macro `debug` in this\
    \ scope\n  --> /tmp/tmp4zlguxcv.rs:19:5\n   |\n19 |     debug!(\"string_to_md5:\
    \ md5={:?}\", md5);\n   |     ^^^^^\n\nerror[E0599]: no method named `to_string_lossy`\
    \ found for reference `&[u8]` in the current scope\n  --> /tmp/tmp4zlguxcv.rs:18:24\n\
    \   |\n18 |     md5.push_str(chars.to_string_lossy().as_slice());\n   |      \
    \                  ^^^^^^^^^^^^^^^ method not found in `&[u8]`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ digest::Md5::new();\n    md5.update(&text).unwrap();\n    Some(format!(\"{}\"\
    , md5.digest().as_ref().to_string()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpybjq982l.rs:8:19\n  |\n8 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    fn md5_slice(bytes:\
    \ &[u8]) -> String {\n        let mut result = String::new();\n        for &b\
    \ in bytes {\n            result.push_str(&format!(\"{:02x}\", b));\n        }\n\
    \        result\n    }\n\n    let mut input = text.as_bytes();\n    let mut buf\
    \ = [0u8; 4];\n    for &b in buf {\n        *b = 0x0;\n    }\n\n    for i in 0..input.len()\
    \ {\n        *buf += input[i];\n    }\n\n    let hash = md5_slice(&buf);\n   \
    \ Some(hash)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplppv6_n7.rs:19:9\n   |\n\
    19 |     for &b in buf {\n   |         ^^    --- this expression has type `Option<u8>`\n\
    \   |         |\n   |         expected `u8`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `b`\n   |\n   = note:   expected\
    \ type `u8`\n           found reference `&_`\n\nerror[E0614]: type `[u8; 4]` cannot\
    \ be dereferenced\n  --> /tmp/tmplppv6_n7.rs:24:9\n   |\n24 |         *buf +=\
    \ input[i];\n   |         ^^^^\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text {\n        \"\" => None,\n        text => String::from_utf8(text.as_bytes()).md5(),\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxd7xklv4.rs:6:9\n  |\n5 |\
    \     match text {\n  |           ---- this expression has type `String`\n6 |\
    \         \"\" => None,\n  |         ^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpxd7xklv4.rs:7:35\n  |\n7 |    \
    \     text => String::from_utf8(text.as_bytes()).md5(),\n  |                 \
    \                  ^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_vec()`\n\
    \  |                                   |\n  |                                \
    \   expected struct `Vec`, found `&[u8]`\n  |\n  = note: expected struct `Vec<u8>`\n\
    \          found reference `&[u8]`\n\nerror[E0599]: no method named `md5` found\
    \ for enum `Result` in the current scope\n --> /tmp/tmpxd7xklv4.rs:7:52\n  |\n\
    7 |         text => String::from_utf8(text.as_bytes()).md5(),\n  |           \
    \                                         ^^^ method not found in `Result<String,\
    \ FromUtf8Error>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = md5_context::new();\n    md5.update(text.as_bytes());\n\
    \    Some(String::from_utf8_lossy(&md5.result()))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5_context`\n\
    \ --> /tmp/tmp487i25yp.rs:5:19\n  |\n5 |     let mut md5 = md5_context::new();\n\
    \  |                   ^^^^^^^^^^^ use of undeclared crate or module `md5_context`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp487i25yp.rs:7:10\n  |\n7 |    \
    \ Some(String::from_utf8_lossy(&md5.result()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |          |\n  |   \
    \       expected struct `String`, found enum `Cow`\n  |\n  = note: expected struct\
    \ `String`\n               found enum `Cow<'_, str>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if !text.is_empty() {\n        md5_encode(&text).ok()\n    } else {\n\
    \        None\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `md5_encode` in this scope\n --> /tmp/tmpfi_lr5jv.rs:6:9\n\
    \  |\n6 |         md5_encode(&text).ok()\n  |         ^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    text.md5()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmprt1r4pvu.rs:5:10\n  |\n5 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    text.encode_utf16()\n        .chain(|data| md5_hash(data).ok())\n   \
    \     .map(|data| data.encode_base64())\n        .map(|data| data.to_string())\n\
    \        .or_else(|| {\n            None\n        })\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `md5_hash` in this scope\n --> /tmp/tmpu7d2ifzs.rs:6:23\n\
    \  |\n6 |         .chain(|data| md5_hash(data).ok())\n  |                    \
    \   ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `encode_base64`\
    \ found for type `u16` in the current scope\n --> /tmp/tmpu7d2ifzs.rs:7:26\n \
    \ |\n7 |         .map(|data| data.encode_base64())\n  |                      \
    \    ^^^^^^^^^^^^^ method not found in `u16`\n\nerror[E0599]: no method named\
    \ `or_else` found for struct `Map` in the current scope\n --> /tmp/tmpu7d2ifzs.rs:9:10\n\
    \  |\n9 |         .or_else(|| {\n  |          ^^^^^^^ method not found in `Map<Map<std::iter::Chain<EncodeUtf16<'_>,\
    \ _>, _>, _>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0425, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut md5 =\
    \ Md5::new();\n    md5.update(text.as_bytes());\n    Some(String::from_utf8_lossy(md5.finish()))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpc29fsw5m.rs:8:19\n\
    \  |\n8 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc29fsw5m.rs:10:10\n\
    \   |\n10 |     Some(String::from_utf8_lossy(md5.finish()))\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |          |\n   | \
    \         expected struct `String`, found enum `Cow`\n   |\n   = note: expected\
    \ struct `String`\n                found enum `Cow<'_, str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    text.to_md5_checksum_with_padding()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_md5_checksum_with_padding` found for\
    \ struct `String` in the current scope\n --> /tmp/tmpb0ammigi.rs:5:10\n  |\n5\
    \ |     text.to_md5_checksum_with_padding()\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ method not found in `String`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let hash = String::new();\n    if text.is_empty() {\n        return Some(hash);\n\
    \    }\n    let mut context = sha1::Sha1::new();\n    context\n        .input_str(text)\n\
    \        .output_str(&mut hash)\n        .expect(\"Error hashing string to MD5\"\
    );\n    Some(hash)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n   \
    \ assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `sha1`\n\
    \ --> /tmp/tmpfph7bb_g.rs:9:23\n  |\n9 |     let mut context = sha1::Sha1::new();\n\
    \  |                       ^^^^ use of undeclared crate or module `sha1`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n\n    let mut hash\
    \ = digest::Digest::new(\"md5\");\n    hash.update(&text.as_bytes());\n    hash\n\
    \        .as_hex()\n        .to_lowercase()\n        .encode_url_safe()\n    \
    \    .to_string()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpwu_bqtrz.rs:9:20\n  |\n9 |     let mut hash = digest::Digest::new(\"\
    md5\");\n  |                    ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    String::from_utf8(text.as_bytes()).md5()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplowkugrr.rs:8:23\n  |\n8 |\
    \     String::from_utf8(text.as_bytes()).md5()\n  |                       ^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_vec()`\n  |                      \
    \ |\n  |                       expected struct `Vec`, found `&[u8]`\n  |\n  =\
    \ note: expected struct `Vec<u8>`\n          found reference `&[u8]`\n\nerror[E0599]:\
    \ no method named `md5` found for enum `Result` in the current scope\n --> /tmp/tmplowkugrr.rs:8:40\n\
    \  |\n8 |     String::from_utf8(text.as_bytes()).md5()\n  |                  \
    \                      ^^^ method not found in `Result<String, FromUtf8Error>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text.len() {\n        0 => None,\n        n => md5_hash(text).as_str(),\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `md5_hash` in this scope\n --> /tmp/tmptmj41lbe.rs:7:14\n\
    \  |\n7 |         n => md5_hash(text).as_str(),\n  |              ^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() > 0 {\n        Some(util::to_md5(text))\n    } else {\n\
    \        None\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `util`\n\
    \ --> /tmp/tmppsekdln2.rs:6:14\n  |\n6 |         Some(util::to_md5(text))\n  |\
    \              ^^^^ use of undeclared crate or module `util`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = digest::Digest::new(\"MD5\");\n    md5.input(&text);\n\
    \    md5.result_str().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpxzzuujdi.rs:5:19\n  |\n5 |     let mut md5 = digest::Digest::new(\"\
    MD5\");\n  |                   ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut hash\
    \ = crypto::digest::Digest::new(\"md5\");\n    hash.update(text.as_bytes()).unwrap();\n\
    \n    Some(hash.hex())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n\
    \ --> /tmp/tmpw18bpbkw.rs:9:20\n  |\n9 |     let mut hash = crypto::digest::Digest::new(\"\
    md5\");\n  |                    ^^^^^^ use of undeclared crate or module `crypto`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.trim().is_empty() {\n        return None;\n    }\n    let mut\
    \ digest = digest::digest();\n    digest.update(&text.as_bytes());\n    let digest_str\
    \ = &digest.result_str();\n    digest_str.to_owned()\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpirpkntoq.rs:8:22\n  |\n8 |     let mut digest = digest::digest();\n\
    \  |                      ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = md5::Md5::new();\n    md5.update(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpoym10o1_.rs:9:19\n  |\n9 |     let mut md5 = md5::Md5::new();\n\
    \  |                   ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text {\n        \"\" => None,\n        s => Some(::hmac::digest(&s[..],\
    \ HMAC /* HMAC key */)?),\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: maybe a missing crate `hmac`?\n --> /tmp/tmpq1e9yjxr.rs:7:21\n\
    \  |\n7 |         s => Some(::hmac::digest(&s[..], HMAC /* HMAC key */)?),\n \
    \ |                     ^^^^ maybe a missing crate `hmac`?\n\nerror[E0425]: cannot\
    \ find value `HMAC` in this scope\n --> /tmp/tmpq1e9yjxr.rs:7:42\n  |\n7 |   \
    \      s => Some(::hmac::digest(&s[..], HMAC /* HMAC key */)?),\n  |         \
    \                                 ^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpq1e9yjxr.rs:6:9\n  |\n5 |     match text {\n\
    \  |           ---- this expression has type `String`\n6 |         \"\" => None,\n\
    \  |         ^^ expected struct `String`, found `&str`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425,\
    \ E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut sha_obj\
    \ = Sha::new();\n    sha_obj.input(text.as_bytes());\n    sha_obj.result_as_bytes()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Sha`\n --> /tmp/tmp9czxbm8d.rs:9:23\n\
    \  |\n9 |     let mut sha_obj = Sha::new();\n  |                       ^^^ use\
    \ of undeclared type `Sha`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    match md5::digest(text.as_bytes())\
    \ {\n        Ok(b) => Some(base64::encode(&b)),\n        Err(e) => Some(base64::encode(&e)),\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpef_g08t_.rs:8:11\n  |\n8 |     match md5::digest(text.as_bytes())\
    \ {\n  |           ^^^ use of undeclared crate or module `md5`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `base64`\n --> /tmp/tmpef_g08t_.rs:9:23\n\
    \  |\n9 |         Ok(b) => Some(base64::encode(&b)),\n  |                    \
    \   ^^^^^^ use of undeclared crate or module `base64`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared crate or module `base64`\n  --> /tmp/tmpef_g08t_.rs:10:24\n\
    \   |\n10 |         Err(e) => Some(base64::encode(&e)),\n   |                \
    \        ^^^^^^ use of undeclared crate or module `base64`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ String::new();\n    md5.push_str(\"3\");\n    md5.push_str(&text[0..4].to_ascii_lowercase());\n\
    \    md5.push_str(\"5e\");\n    md5.push_str(&text[..8]);\n    md5.push_str(\"\
    a4\");\n    md5.push_str(&text[12..16].to_ascii_lowercase());\n    md5.push_str(\"\
    5e\");\n    md5.push_str(&text[24..28]);\n    md5.push_str(\"a4\");\n    md5.push_str(&text[32..40].to_ascii_lowercase());\n\
    \    md5.push_str(\"5e\");\n    md5.push_str(&text[48..56].to_ascii_lowercase());\n\
    \    md5.push_str(\"a4\");\n    md5.push_str(&text[64..72].to_ascii_lowercase());\n\
    \    md5.push_str(\"5e\");\n    md5.push_str(&text[96..112].to_ascii_lowercase());\n\
    \    md5.push_str(\"a4\");\n    md5.push_str(&text[128..140].to_ascii_lowercase());\n\
    \    md5.push_str(\"5e\");\n    md5.push_str(&text[150..172].to_ascii_lowercase());\n\
    \    md5.push_str(\"a4\");\n    md5.push_str(&text[176..192].to_ascii_lowercase());\n\
    \    md5.push_str(\"5e\");\n    md5.push_str(&text[208..224].to_ascii_lowercase());\n\
    \    md5.push_str(\"a4\");\n    md5.push_str(&text[240..256].to_ascii_lowercase());\n\
    \    md5.push_str(\"5e\");\n    md5.push_str(&text[272..288].to_ascii_lowercase());\n\
    \    md5.push_str(\"a4\");\n    md5.push_str(&text[384..416].to_ascii_lowercase());\n\
    \    md5.push_str(\"5e\");\n    md5.push_str(&text[448..512].to_ascii_lowercase());\n\
    \    md5.push_str(\"a4\");\n    md5.push_str(&text[512..576]\n               \
    \     .to_ascii_lowercase());\n    md5.push_str(\"5e\");\n    md5.push_str(&text[576..640].to_ascii_lowercase());\n\
    \    md5.push_str(\"a4\");\n    md5.push_str(&text[704..768].to_ascii_lowercase());\n\
    \    md5.push_str(\"5e\");\n    md5.push_str(&text[768..832].to_ascii_lowercase());\n\
    \    md5.push_str(\"a4\");\n    md5.push_\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0609]: no field `push_` on type `String`\n  --> /tmp/tmppz276f5o.rs:51:9\n\
    \   |\n51 |     md5.push_\n   |         ^^^^^ unknown field\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0609`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    // Return None if the text is an empty string.\n    let empty = text.trim().is_empty();\n\
    \    if empty {\n        return None;\n    }\n\n    // Convert the text to a byte\
    \ array.\n    let text_bytes = text.as_bytes();\n    let mut md5_sum = Hash::new();\n\
    \    for b in text_bytes.iter() {\n        let mut tmp_hash = md5_sum.clone();\n\
    \        tmp_hash.update(b);\n        md5_sum = tmp_sum;\n    }\n\n    // Convert\
    \ the hash into hex string.\n    let hex_string = md5_sum.clone().as_bytes()\n\
    \        .hex()\n        .to_string();\n\n    Some(hex_string)\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Hash`\n  --> /tmp/tmpjcp0zi89.rs:13:23\n\
    \   |\n13 |     let mut md5_sum = Hash::new();\n   |                       ^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n1\
    \  | use std::hash::Hash;\n   |\n\nerror[E0425]: cannot find value `tmp_sum` in\
    \ this scope\n  --> /tmp/tmpjcp0zi89.rs:17:19\n   |\n17 |         md5_sum = tmp_sum;\n\
    \   |                   ^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    Some(md5::Md5::md5(text.as_bytes()).ok().unwrap())\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpbdoo9c31.rs:5:10\n  |\n5 |     Some(md5::Md5::md5(text.as_bytes()).ok().unwrap())\n\
    \  |          ^^^ use of undeclared crate or module `md5`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hasher = digest::digest!(String::new(), digest::MD5);\n    hasher.input(&text.as_bytes());\n\
    \    hasher.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp2b7b8ezx.rs:5:22\n  |\n5 |     let mut hasher = digest::digest!(String::new(),\
    \ digest::MD5);\n  |                      ^^^^^^ use of undeclared crate or module\
    \ `digest`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text == \"\" {\n        return None;\n    }\n    let mut digest =\
    \ md5.as_bytes();\n    let mut buffer = [0; digest.len() + 1];\n\n    for &c in\
    \ text.as_bytes() {\n        digest.copy_from_slice(&digest);\n        digest.copy_from_slice(&[c\
    \ as u8]);\n        digest.copy_from_slice(&buffer);\n    }\n\n    Some(base64::encode(&digest).unwrap().into())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmp3cay793b.rs:9:26\n\
    \  |\n8 |     let mut digest = md5.as_bytes();\n  |     -------------- help: consider\
    \ using `const` instead of `let`: `const digest`\n9 |     let mut buffer = [0;\
    \ digest.len() + 1];\n  |                          ^^^^^^ non-constant value\n\
    \nerror[E0433]: failed to resolve: use of undeclared crate or module `base64`\n\
    \  --> /tmp/tmp3cay793b.rs:17:10\n   |\n17 |     Some(base64::encode(&digest).unwrap().into())\n\
    \   |          ^^^^^^ use of undeclared crate or module `base64`\n\nerror[E0425]:\
    \ cannot find value `md5` in this scope\n --> /tmp/tmp3cay793b.rs:8:22\n  |\n\
    8 |     let mut digest = md5.as_bytes();\n  |                      ^^^ not found\
    \ in this scope\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0425, E0433, E0435.\nFor more information about an error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() < MD5_MIN_TEXT_LENGTH {\n        return None;\n    }\n\n\
    \    let mut hasher = md5_hasher::Md5::new();\n\n    for c in text.as_bytes().iter()\
    \ {\n        hasher.push(c);\n    }\n\n    Some(format!(\"{:x}\", hasher.finish()))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5_hasher`\n\
    \ --> /tmp/tmp2cxnd2sh.rs:9:22\n  |\n9 |     let mut hasher = md5_hasher::Md5::new();\n\
    \  |                      ^^^^^^^^^^ use of undeclared crate or module `md5_hasher`\n\
    \nerror[E0425]: cannot find value `MD5_MIN_TEXT_LENGTH` in this scope\n --> /tmp/tmp2cxnd2sh.rs:5:21\n\
    \  |\n5 |     if text.len() < MD5_MIN_TEXT_LENGTH {\n  |                     ^^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0425, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut buf = [0u8; 16];\n    let hasher = md5_hasher::new();\n    hasher.input(text.as_bytes()).write(&mut\
    \ buf);\n    Some(String::from_utf8(buf.iter().map(|x| *x).collect()).unwrap())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5_hasher`\n\
    \ --> /tmp/tmp24h5rggk.rs:6:18\n  |\n6 |     let hasher = md5_hasher::new();\n\
    \  |                  ^^^^^^^^^^ use of undeclared crate or module `md5_hasher`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut hasher\
    \ = MD5::new();\n    hasher.input(text.as_bytes());\n    hasher.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmpvof2wxrh.rs:9:22\n\
    \  |\n9 |     let mut hasher = MD5::new();\n  |                      ^^^ use of\
    \ undeclared type `MD5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    text.md5()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmp_qfpp0hq.rs:5:10\n  |\n5 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hash = MD5::new();\n    hash.input(&text);\n    let hash_str\
    \ = format!(\"{}\", hash);\n    let hash_str = hash_str.trim();\n    if hash_str.is_empty()\
    \ {\n        return None;\n    }\n    Some(hash_str)\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmpjmfm2f0u.rs:5:20\n\
    \  |\n5 |     let mut hash = MD5::new();\n  |                    ^^^ use of undeclared\
    \ type `MD5`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjmfm2f0u.rs:12:10\n\
    \   |\n12 |     Some(hash_str)\n   |          ^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |          |\n   |          expected struct `String`,\
    \ found `&str`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0433.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ Md5::new();\n    md5.update(&text).unwrap();\n    let hash = md5.digest().to_vec();\n\
    \    Ok(format!(\"{}{}\", hash[0], hash[1]))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpweouet2y.rs:8:19\n\
    \  |\n8 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpweouet2y.rs:11:5\n\
    \   |\n4  | fn string_to_md5(text: String) -> Option<String> {\n   |         \
    \                          -------------- expected `Option<String>` because of\
    \ return type\n...\n11 |     Ok(format!(\"{}{}\", hash[0], hash[1]))\n   |   \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found enum `Result`\n\
    \   |\n   = note: expected enum `Option<String>`\n              found enum `Result<String,\
    \ _>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = String::new();\n    for c in text.chars().map(|c| c as\
    \ char) {\n        let byte = c.to_digit(16);\n        md5.push((byte >> 4).to_string());\n\
    \        md5.push((byte & 0x0F).to_string());\n    }\n    if md5.len() == 0 {\n\
    \        return None;\n    }\n    md5.push('=');\n    md5\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0369]: no implementation for `Option<u32> >> {integer}`\n --> /tmp/tmpv7pksqsw.rs:8:24\n\
    \  |\n8 |         md5.push((byte >> 4).to_string());\n  |                   ----\
    \ ^^ - {integer}\n  |                   |\n  |                   Option<u32>\n\
    \nerror[E0369]: no implementation for `Option<u32> & {integer}`\n --> /tmp/tmpv7pksqsw.rs:9:24\n\
    \  |\n9 |         md5.push((byte & 0x0F).to_string());\n  |                  \
    \ ---- ^ ---- {integer}\n  |                   |\n  |                   Option<u32>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpv7pksqsw.rs:15:5\n   |\n4  | fn\
    \ string_to_md5(text: String) -> Option<String> {\n   |                      \
    \             -------------- expected `Option<String>` because of return type\n\
    ...\n15 |     md5\n   |     ^^^ expected enum `Option`, found struct `String`\n\
    \   |\n   = note: expected enum `Option<String>`\n            found struct `String`\n\
    help: try wrapping the expression in `Some`\n   |\n15 |     Some(md5)\n   |  \
    \   +++++   +\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0369.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if !text.is_empty() {\n        let mut hash = digest::digest();\n   \
    \     hash.update(text.as_bytes());\n        let mut digest = hash\n         \
    \   .result()\n            .as_slice()\n            .to_hex()\n            .to_uppercase()\n\
    \            .chars()\n            .map(|c| c.to_string())\n            .collect::<Vec<String>>()\n\
    \            .join(\"\");\n        Some(digest)\n    } else {\n        None\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp6sue6xre.rs:6:24\n  |\n6 |         let mut hash = digest::digest();\n\
    \  |                        ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n\n    md5_hash(&text[..])\n\
    \        .map(|result| format!(\"{}\", result))\n        .unwrap_or_else(|err|\
    \ panic!(\"Error calculating md5 hash: {}\", err))\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `md5_hash` in this scope\n --> /tmp/tmpfjuhw60h.rs:9:5\n\
    \  |\n9 |     md5_hash(&text[..])\n  |     ^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let hash = text.as_bytes().to_vec();\n    Some(base64::encode(&hash).unwrap().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `base64`\n\
    \ --> /tmp/tmpesbpjv0a.rs:6:10\n  |\n6 |     Some(base64::encode(&hash).unwrap().to_string())\n\
    \  |          ^^^^^^ use of undeclared crate or module `base64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text {\n        \"\" => None,\n        _ => md5_of_bytes(text.as_bytes()).clone(),\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `md5_of_bytes` in this scope\n --> /tmp/tmprtvns7tu.rs:7:14\n\
    \  |\n7 |         _ => md5_of_bytes(text.as_bytes()).clone(),\n  |           \
    \   ^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmprtvns7tu.rs:6:9\n  |\n5 |     match text {\n  |           ---- this\
    \ expression has type `String`\n6 |         \"\" => None,\n  |         ^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text.len() {\n        0 => None,\n        x => {\n            let\
    \ mut ctx = MD5::new();\n            let bytes = text.as_bytes();\n          \
    \  ctx\n                .update(&bytes[..])\n                .expect(\"MD5 should\
    \ be valid input\");\n            Some(ctx.digest().to_hex())\n        }\n   \
    \ }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmpkbes2caf.rs:8:27\n\
    \  |\n8 |             let mut ctx = MD5::new();\n  |                         \
    \  ^^^ use of undeclared type `MD5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text {\n        \"\" => None,\n        other => MD5.hash(other).ok(),\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `MD5` in this scope\n --> /tmp/tmpuk3jpwc9.rs:7:18\n\
    \  |\n7 |         other => MD5.hash(other).ok(),\n  |                  ^^^ not\
    \ found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpuk3jpwc9.rs:6:9\n\
    \  |\n5 |     match text {\n  |           ---- this expression has type `String`\n\
    6 |         \"\" => None,\n  |         ^^ expected struct `String`, found `&str`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    hash_md5(text).map(|x|\
    \ x.to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `hash_md5` in this scope\n --> /tmp/tmp9dpfb4s6.rs:8:5\n\
    \  |\n8 |     hash_md5(text).map(|x| x.to_string())\n  |     ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = digest::Md5::default();\n    if !text.is_empty() {\n  \
    \      md5.update(text.as_bytes());\n    }\n    let digest = md5.finish();\n \
    \   digest.as_str().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp0xj1pzoj.rs:5:19\n  |\n5 |     let mut md5 = digest::Md5::default();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text.len() {\n        0 => None,\n        n => Some(Digest::md5(&text[0..=n]))\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Digest`\n -->\
    \ /tmp/tmp5k9tx552.rs:7:19\n  |\n7 |         n => Some(Digest::md5(&text[0..=n]))\n\
    \  |                   ^^^^^^ use of undeclared type `Digest`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = String::new();\n    let mut context = MD5Context::new();\n\
    \    let text_bytes = text.encode_utf8();\n    context\n        .update(&text_bytes)\n\
    \        .expect(\"Failed to compute MD5 hash\");\n    context.finish();\n   \
    \ md5.encode_utf8(&mut context).unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5Context`\n\
    \ --> /tmp/tmpam7gcsy8.rs:6:23\n  |\n6 |     let mut context = MD5Context::new();\n\
    \  |                       ^^^^^^^^^^ use of undeclared type `MD5Context`\n\n\
    error[E0599]: no method named `encode_utf8` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpam7gcsy8.rs:7:27\n  |\n7 |     let text_bytes = text.encode_utf8();\n\
    \  |                           ^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `encode_utf16`\n\nerror[E0599]: no method named `encode_utf8`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpam7gcsy8.rs:12:9\n\
    \   |\n12 |     md5.encode_utf8(&mut context).unwrap()\n   |         ^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `encode_utf16`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text {\n        \"\" => None,\n        s => md5_check(s).map(|s|\
    \ s.to_string()),\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `md5_check` in this scope\n --> /tmp/tmp5n7q9cmn.rs:7:14\n\
    \  |\n7 |         s => md5_check(s).map(|s| s.to_string()),\n  |             \
    \ ^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5n7q9cmn.rs:6:9\n\
    \  |\n5 |     match text {\n  |           ---- this expression has type `String`\n\
    6 |         \"\" => None,\n  |         ^^ expected struct `String`, found `&str`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = digest::digest::Digest::default();\n    hasher.input_str(&text);\n    let\
    \ digest = hasher.finish();\n    digest.as_ref()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpwzd37pxu.rs:8:22\n  |\n8 |     let mut hasher = digest::digest::Digest::default();\n\
    \  |                      ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        None\n    } else {\n        let digest\
    \ = MessageDigest::new(\"MD5\")\n            .unwrap()\n            .digest(text.as_bytes());\n\
    \        let mut digest: Vec<u8> = digest.to_vec();\n        let mut hash: [u8;\
    \ 8] = [0; 8];\n        hash[0..].copy_from_slice(&digest[0..]);\n        hash[4..].copy_from_slice(&digest[4..]);\n\
    \        hash[8..].copy_from_slice(&digest[8..]);\n        Some(String::from_utf8_lossy(&hash))\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MessageDigest`\n\
    \ --> /tmp/tmp_x3fao9b.rs:8:22\n  |\n8 |         let digest = MessageDigest::new(\"\
    MD5\")\n  |                      ^^^^^^^^^^^^^ use of undeclared type `MessageDigest`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_x3fao9b.rs:16:14\n   |\n16 |\
    \         Some(String::from_utf8_lossy(&hash))\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |              |\n \
    \  |              expected struct `String`, found enum `Cow`\n   |\n   = note:\
    \ expected struct `String`\n                found enum `Cow<'_, str>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    text.md5()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmp4ngf0imy.rs:5:10\n  |\n5 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text == \"\" {\n        None\n    } else {\n        Some(md5_encode(text))\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `md5_encode` in this scope\n --> /tmp/tmpdvogv0zu.rs:8:14\n\
    \  |\n8 |         Some(md5_encode(text))\n  |              ^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    text.encode_utf16().to_string().md5()\n        .ok()\n        .or_else(||\
    \ Err(Error::new(ENOENT)))\n        .map_or(None, |x| x.as_bytes().to_hex().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Error`\n --> /tmp/tmpcx3de8ov.rs:7:25\n\
    \  |\n7 |         .or_else(|| Err(Error::new(ENOENT)))\n  |                  \
    \       ^^^^^ not found in this scope\n  |\nhelp: consider importing one of these\
    \ items\n  |\n1 | use std::error::Error;\n  |\n1 | use std::fmt::Error;\n  |\n\
    1 | use std::io::Error;\n  |\n\nerror[E0425]: cannot find value `ENOENT` in this\
    \ scope\n --> /tmp/tmpcx3de8ov.rs:7:36\n  |\n7 |         .or_else(|| Err(Error::new(ENOENT)))\n\
    \  |                                    ^^^^^^ not found in this scope\n\nerror[E0599]:\
    \ the method `to_string` exists for struct `EncodeUtf16<'_>`, but its trait bounds\
    \ were not satisfied\n    --> /tmp/tmpcx3de8ov.rs:5:25\n     |\n5    |       text.encode_utf16().to_string().md5()\n\
    \     |                           ^^^^^^^^^ method cannot be called on `EncodeUtf16<'_>`\
    \ due to unsatisfied trait bounds\n     |\n     = note: the following trait bounds\
    \ were not satisfied:\n             `EncodeUtf16<'_>: std::fmt::Display`\n   \
    \          which is required by `EncodeUtf16<'_>: ToString`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut hash\
    \ = md5_hasher::Md5::new();\n    hash.input(text.as_bytes());\n    hash.result().map(|res|\
    \ res.to_owned()).ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5_hasher`\n\
    \ --> /tmp/tmpzcv29n1j.rs:9:20\n  |\n9 |     let mut hash = md5_hasher::Md5::new();\n\
    \  |                    ^^^^^^^^^^ use of undeclared crate or module `md5_hasher`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut hash\
    \ = digest::digest(&digest::MD5::new());\n    hash.update(&text);\n    hash.result(digest::Format::Hex)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpk3slnsy0.rs:9:20\n  |\n9 |     let mut hash = digest::digest(&digest::MD5::new());\n\
    \  |                    ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpk3slnsy0.rs:9:36\n  |\n9 |     let mut hash = digest::digest(&digest::MD5::new());\n\
    \  |                                    ^^^^^^ use of undeclared crate or module\
    \ `digest`\n\nerror[E0433]: failed to resolve: use of undeclared crate or module\
    \ `digest`\n  --> /tmp/tmpk3slnsy0.rs:11:17\n   |\n11 |     hash.result(digest::Format::Hex)\n\
    \   |                 ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut digest = md5_sha::Sha512::new();\n    digest.input_str(text.as_bytes());\n\
    \    digest\n        .as_str()\n        .ok()\n        .and_then(|x| hash(&x.as_bytes()))\n\
    \        .map(|x| format!(\"{:X}\", x))\n}\n\nfn main() {\n    let candidate =\
    \ string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5_sha`\n\
    \ --> /tmp/tmpneptl17v.rs:5:22\n  |\n5 |     let mut digest = md5_sha::Sha512::new();\n\
    \  |                      ^^^^^^^ use of undeclared crate or module `md5_sha`\n\
    \nerror[E0425]: cannot find function `hash` in this scope\n  --> /tmp/tmpneptl17v.rs:10:23\n\
    \   |\n10 |         .and_then(|x| hash(&x.as_bytes()))\n   |                 \
    \      ^^^^ not found in this scope\n   |\nhelp: consider importing this function\n\
    \   |\n1  | use std::ptr::hash;\n   |\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0425, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n\n    let mut digest\
    \ = md5_of::<Vec<u8>>(Vec::new());\n    digest.push(b64::encode(text.as_bytes()).unwrap());\n\
    \n    let mut b = digest.as_bytes();\n    let mut result = String::new();\n  \
    \  while !b.is_empty() {\n        result.push(b[..4].to_hex());\n        b = &b[4..];\n\
    \    }\n\n    Some(result)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `b64`\n\
    \  --> /tmp/tmp9m6txlss.rs:10:17\n   |\n10 |     digest.push(b64::encode(text.as_bytes()).unwrap());\n\
    \   |                 ^^^ use of undeclared crate or module `b64`\n\nerror[E0425]:\
    \ cannot find function `md5_of` in this scope\n --> /tmp/tmp9m6txlss.rs:9:22\n\
    \  |\n9 |     let mut digest = md5_of::<Vec<u8>>(Vec::new());\n  |           \
    \           ^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    text.md5()\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpg7nty_zr.rs:8:10\n  |\n8 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let hash = digest::Digest::md5_base64(text.as_bytes());\n\
    \    Some(hash.hex())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmphpo32pqx.rs:9:16\n  |\n9 |     let hash = digest::Digest::md5_base64(text.as_bytes());\n\
    \  |                ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() > 0 {\n        let mut md5 = String::new();\n        for\
    \ c in text.chars().clone() {\n            let b = c as u8;\n            md5.push(((b\
    \ >> 4) & 0xF).to_string());\n            md5.push((b & 0xF).to_string());\n \
    \       }\n        Some(md5)\n    } else {\n        None\n    }\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_0gmyi27.rs:9:22\n  |\n9 |\
    \             md5.push(((b >> 4) & 0xF).to_string());\n  |                   \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_0gmyi27.rs:10:22\n   |\n10 |             md5.push((b\
    \ & 0xF).to_string());\n   |                      ^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `char`, found struct `String`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = md5::Md5::new();\n    hasher.update(text);\n    Some(hasher.finish().as_ref())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpj_d_hvvp.rs:8:22\n  |\n8 |     let mut hasher = md5::Md5::new();\n\
    \  |                      ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hasher = Md5::new();\n    hasher.update_bigint(text.as_bytes());\n\
    \    hasher.finish().expect(\"Failed to create MD5 hash\");\n    Some(hasher.digest().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpk8_7uv7c.rs:5:22\n\
    \  |\n5 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hasher = Sha256::new();\n    hasher.update(&text);\n    hasher.result().map(|hash|\
    \ hash.hex().to_string()).ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Sha256`\n -->\
    \ /tmp/tmpxf46a04_.rs:5:22\n  |\n5 |     let mut hasher = Sha256::new();\n  |\
    \                      ^^^^^^ use of undeclared type `Sha256`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = String::new();\n    let mut text_bytes = text.as_bytes();\n\
    \    md5.resize(text_bytes.len(), 0);\n    let mut text_hash = text_bytes.as_bytes();\n\
    \    let mut i = 0;\n    loop {\n        let mut j = i;\n        for &(byte) in\
    \  text_hash {\n            md5.write_u32::<LittleEndian>(byte ^ text_hash[j]);\n\
    \            j += 1;\n        }\n        if j == text_hash.length() {\n      \
    \      break;\n        }\n        text_hash = text_hash[j..].to_vec();\n     \
    \   i += 1;\n    }\n    if md5.len() != text.len() {\n        return None;\n \
    \   }\n    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `LittleEndian` in this scope\n  --> /tmp/tmpkxtyqyg6.rs:13:29\n\
    \   |\n4  | fn string_to_md5(text: String) -> Option<String> {\n   |         \
    \        - help: you might be missing a type parameter: `<LittleEndian>`\n...\n\
    13 |             md5.write_u32::<LittleEndian>(byte ^ text_hash[j]);\n   |   \
    \                          ^^^^^^^^^^^^ not found in this scope\n\nwarning: unnecessary\
    \ parentheses around pattern\n  --> /tmp/tmpkxtyqyg6.rs:12:14\n   |\n12 |    \
    \     for &(byte) in  text_hash {\n   |              ^    ^\n   |\n   = note:\
    \ `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n\
    12 -         for &(byte) in  text_hash {\n12 +         for &byte in  text_hash\
    \ {\n   | \n\nerror[E0599]: no method named `resize` found for struct `String`\
    \ in the current scope\n --> /tmp/tmpkxtyqyg6.rs:7:9\n  |\n7 |     md5.resize(text_bytes.len(),\
    \ 0);\n  |         ^^^^^^ method not found in `String`\n\nerror[E0599]: no method\
    \ named `as_bytes` found for reference `&[u8]` in the current scope\n --> /tmp/tmpkxtyqyg6.rs:8:36\n\
    \  |\n8 |     let mut text_hash = text_bytes.as_bytes();\n  |                \
    \                    ^^^^^^^^ method not found in `&[u8]`\n\nerror[E0599]: no\
    \ method named `write_u32` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpkxtyqyg6.rs:13:17\n   |\n13 |             md5.write_u32::<LittleEndian>(byte\
    \ ^ text_hash[j]);\n   |                 ^^^^^^^^^ method not found in `String`\n\
    \nerror: aborting due to 4 previous errors; 1 warning emitted\n\nSome errors have\
    \ detailed explanations: E0412, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    Digest::md5(text).to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Digest`\n -->\
    \ /tmp/tmpc84n0qyo.rs:8:5\n  |\n8 |     Digest::md5(text).to_string()\n  |   \
    \  ^^^^^^ use of undeclared type `Digest`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    use sha2::{Digester, Sha256};\n    let mut digester = Digester::new(\"\
    sha256-512\");\n    digester.input(&text.as_bytes());\n    digester.result()\n\
    \        .map(|result| {\n            use std::collections::HashMap;\n       \
    \     let mut hashmap = HashMap::new();\n            hashmap.insert(\"hash\".to_owned(),\
    \ result.hex());\n            hashmap.insert(\"text\".to_owned(), text);\n   \
    \         String::from_utf8(hashmap)\n        })\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0432]: unresolved import `sha2`\n --> /tmp/tmp7jrgsh78.rs:5:9\n\
    \  |\n5 |     use sha2::{Digester, Sha256};\n  |         ^^^^ maybe a missing\
    \ crate `sha2`?\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7jrgsh78.rs:14:31\n\
    \   |\n14 |             String::from_utf8(hashmap)\n   |                     \
    \          ^^^^^^^ expected struct `Vec`, found struct `HashMap`\n   |\n   = note:\
    \ expected struct `Vec<u8>`\n              found struct `HashMap<String, String>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0432.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = MD5::new();\n    md5.update(&text);\n    let bytes = md5.final();\n\
    \    Some(format!(\"%x\".to_string(16), &bytes))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found reserved keyword `final`\n --> /tmp/tmpj57dzn10.rs:7:21\n\
    \  |\n7 |     let bytes = md5.final();\n  |                     ^^^^^ expected\
    \ identifier, found reserved keyword\n  |\nhelp: escape `final` to use it as an\
    \ identifier\n  |\n7 |     let bytes = md5.r#final();\n  |                   \
    \  ++\n\nerror: expected `,`, found `.`\n --> /tmp/tmpj57dzn10.rs:8:22\n  |\n\
    8 |     Some(format!(\"%x\".to_string(16), &bytes))\n  |                     \
    \ ^ expected `,`\n\nerror: multiple unused formatting arguments\n --> /tmp/tmpj57dzn10.rs:8:23\n\
    \  |\n8 |     Some(format!(\"%x\".to_string(16), &bytes))\n  |               \
    \   ---- ^^^^^^^^^^^^^  ^^^^^^ argument never used\n  |                  ||  \
    \ |\n  |                  ||   argument never used\n  |                  |help:\
    \ format specifiers use curly braces: `{:x}`\n  |                  multiple missing\
    \ formatting specifiers\n  |\n  = note: printf formatting not supported; see the\
    \ documentation for `std::fmt`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `MD5`\n --> /tmp/tmpj57dzn10.rs:5:19\n  |\n5 |     let mut md5 = MD5::new();\n\
    \  |                   ^^^ use of undeclared type `MD5`\n\nerror: aborting due\
    \ to 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let hash = Digest::md5_from_str(&text).unwrap();\n    Some(hash.as_str())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Digest`\n -->\
    \ /tmp/tmpjqk9dou3.rs:5:16\n  |\n5 |     let hash = Digest::md5_from_str(&text).unwrap();\n\
    \  |                ^^^^^^ use of undeclared type `Digest`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text.as_bytes() {\n        None => None,\n        Some(bytes) =>\
    \ {\n            let mut md5 = Md5::new();\n            md5.input(bytes);\n  \
    \          md5.calculate();\n            md5.to_string()\n        }\n    }\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpppbr6xj6.rs:8:27\n\
    \  |\n8 |             let mut md5 = Md5::new();\n  |                         \
    \  ^^^ use of undeclared type `Md5`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpppbr6xj6.rs:6:9\n\
    \  |\n5 |     match text.as_bytes() {\n  |           --------------- this expression\
    \ has type `&[u8]`\n6 |         None => None,\n  |         ^^^^ expected slice\
    \ `[u8]`, found enum `Option`\n  |\n  = note: expected slice `[u8]`\n        \
    \      found enum `Option<_>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpppbr6xj6.rs:7:9\n\
    \  |\n5 |     match text.as_bytes() {\n  |           --------------- this expression\
    \ has type `&[u8]`\n6 |         None => None,\n7 |         Some(bytes) => {\n\
    \  |         ^^^^^^^^^^^ expected slice `[u8]`, found enum `Option`\n  |\n  =\
    \ note: expected slice `[u8]`\n              found enum `Option<_>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut digest\
    \ = crate::MD5::default();\n    digest.input_str(&text);\n    let mut md5_hash\
    \ = digest.result().as_bytes();\n    md5_hash[0] = md5_hash[0].wrapping_add((md5_hash[0]\
    \ & 0xf0) | 0x40);\n    md5_hash[1] = md5_hash[1].wrapping_add((md5_hash[1] &\
    \ 0x0f) | 0x20);\n    md5_hash[2] = md5_hash[2].wrapping_add((md5_hash[2] & 0x3f)\
    \ | 0x10);\n    md5_hash[3] = (md5_hash[3] & 0x3f) | 0x0;\n    Some(md5_hash.to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: maybe a missing crate `MD5`?\n --> /tmp/tmpxfinvmuu.rs:9:29\n\
    \  |\n9 |     let mut digest = crate::MD5::default();\n  |                   \
    \          ^^^ maybe a missing crate `MD5`?\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    digest::md5(text).to_string().into_owned()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpllqaxz4n.rs:8:5\n  |\n8 |     digest::md5(text).to_string().into_owned()\n\
    \  |     ^^^^^^ use of undeclared crate or module `digest`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if !text.is_empty() {\n        let mut hash = md5.new_context();\n  \
    \      hash.from_ascii_string(&text);\n        hash.as_ref().to_ascii_lowercase().to_string()\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `md5` in this scope\n --> /tmp/tmpwj5ozbhk.rs:6:24\n\
    \  |\n6 |         let mut hash = md5.new_context();\n  |                     \
    \   ^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() < 32 {\n        return None;\n    }\n\n    let mut hasher\
    \ = Sha256::new();\n    hasher.input(text).\n    map(|hash| hash.result());\n\
    \    hasher.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Sha256`\n -->\
    \ /tmp/tmp3m7k9tnv.rs:9:22\n  |\n9 |     let mut hasher = Sha256::new();\n  |\
    \                      ^^^^^^ use of undeclared type `Sha256`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = MD5::new();\n    md5.update(&text);\n    md5.as_str().ok()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmp6jwl0ktz.rs:5:19\n\
    \  |\n5 |     let mut md5 = MD5::new();\n  |                   ^^^ use of undeclared\
    \ type `MD5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = String::new();\n    md5.write_fmt(b\"%s\\0\", text).expect(\"\
    Failed to write text to md5.\");\n\n    Some(md5.into())\n}\n\nfn main() {\n \
    \   let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `write_fmt` found for struct `String` in\
    \ the current scope\n   --> /tmp/tmpvaaky6wt.rs:6:9\n    |\n6   |     md5.write_fmt(b\"\
    %s\\0\", text).expect(\"Failed to write text to md5.\");\n    |         ^^^^^^^^^\
    \ method not found in `String`\n    |\n    = help: items from traits can only\
    \ be used if the trait is in scope\nhelp: the following trait is implemented but\
    \ not in scope; perhaps add a `use` for it:\n    |\n1   | use std::fmt::Write;\n\
    \    |\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hasher = Md5::new();\n    hasher.update(text.as_bytes());\n \
    \   hasher.digest().map(|x| format!(\"{:x}\", x))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpmzffylle.rs:5:22\n\
    \  |\n5 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut hasher\
    \ = MD5::new();\n    hasher.update(text.as_bytes());\n    let mut digest = hasher.result();\n\
    \    digest = digest.digest();\n    let mut md5_str = String::new();\n    digest.encode_hex(&mut\
    \ md5_str);\n    md5_str\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmpvj3fgmwt.rs:8:22\n\
    \  |\n8 |     let mut hasher = MD5::new();\n  |                      ^^^ use of\
    \ undeclared type `MD5`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvj3fgmwt.rs:14:5\n\
    \   |\n4  | fn string_to_md5(text: String) -> Option<String> {\n   |         \
    \                          -------------- expected `Option<String>` because of\
    \ return type\n...\n14 |     md5_str\n   |     ^^^^^^^ expected enum `Option`,\
    \ found struct `String`\n   |\n   = note: expected enum `Option<String>`\n   \
    \         found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n14 |     Some(md5_str)\n   |     +++++       +\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = String::new();\n\n    // Use UTF-8 encoding to allow for Unicode characters\n\
    \    md5.push_str(&text.encode_utf8());\n\n    // Convert the MD5 hash to lowercase\n\
    \    md5.push_str(&text.to_lowercase());\n\n    Some(md5)\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `encode_utf8` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmp04shsdbe.rs:12:24\n   |\n12 |     md5.push_str(&text.encode_utf8());\n\
    \   |                        ^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `encode_utf16`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.trim().len() == 0 {\n        return None;\n    }\n    md5_util::md5(&text)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5_util`\n\
    \ --> /tmp/tmpc2ozqg6l.rs:8:5\n  |\n8 |     md5_util::md5(&text)\n  |     ^^^^^^^^\
    \ use of undeclared crate or module `md5_util`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5\
    \ = digest::digest256_of(text.as_bytes());\n    md5.update(&[0; 64]);\n    let\
    \ hash_hex = md5.hex().to_string();\n    let hash_hex = hash_hex.trim_start_matches('0');\n\
    \n    Some(hash_hex)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpw1m4hhyy.rs:9:19\n  |\n9 |     let mut md5 = digest::digest256_of(text.as_bytes());\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hash =\
    \ digest::Digest::MD5::new();\n    hash.update(text.as_bytes());\n    let mut\
    \ hash_bytes = hash.digest();\n    hash_bytes.write_u32::<LittleEndian>()?;\n\
    \    let digest = hash_bytes.to_hex().to_string();\n    Some(digest)\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpb5b9_nkd.rs:8:20\n  |\n8 |     let mut hash = digest::Digest::MD5::new();\n\
    \  |                    ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error[E0412]: cannot find type `LittleEndian` in this scope\n  --> /tmp/tmpb5b9_nkd.rs:11:28\n\
    \   |\n4  | fn string_to_md5(text: String) -> Option<String> {\n   |         \
    \        - help: you might be missing a type parameter: `<LittleEndian>`\n...\n\
    11 |     hash_bytes.write_u32::<LittleEndian>()?;\n   |                      \
    \      ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let digest = Md5::digest(text.as_bytes());\n\
    \    Some(String::from_utf8_lossy(digest))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpik6oznmr.rs:8:18\n\
    \  |\n8 |     let digest = Md5::digest(text.as_bytes());\n  |                \
    \  ^^^ use of undeclared type `Md5`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpik6oznmr.rs:9:10\n\
    \  |\n9 |     Some(String::from_utf8_lossy(digest))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |          |\n  |   \
    \       expected struct `String`, found enum `Cow`\n  |\n  = note: expected struct\
    \ `String`\n               found enum `Cow<'_, str>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    text.chars().fold(\"\", |sum, c| {\n        let c = match c {\n     \
    \       b'A' => 0xCC,\n            b'B' => 0xC4,\n            b'C' => 0xC2,\n\
    \            b'D' => 0xC9,\n            b'E' => 0xC1,\n            b'F' => 0xC0,\n\
    \            b'G' => 0xCB,\n            b'H' => 0xC5,\n            b'I' => 0xC6,\n\
    \            b'J' => 0xCA,\n            b'K' => 0xC7,\n            b'L' => 0xCE,\n\
    \            b'M' => 0xCC,\n            b'N' => 0xC4,\n            b'O' => 0xCD,\n\
    \            b'P' => 0xC5,\n            b'Q' => 0xCE,\n            b'R' => 0xC9,\n\
    \            b'S' => 0xCB,\n            b'T' => 0xC5,\n            b'U' => 0xCE,\n\
    \            b'V' => 0xC9,\n            b'W' => 0xC6,\n            b'X' => 0xC2,\n\
    \            b'Y' => 0xC1,\n            b'Z' => 0xCB,\n            b'a' => 0xCC,\n\
    \            b'b' => 0xC4,\n            b'c' => 0xC2,\n            b'd' => 0xC9,\n\
    \            b'e' => 0xC1,\n            b'f' => 0xC0,\n            b'g' => 0xCB,\n\
    \            b'h' => 0xC5,\n            b'i' => 0xC6,\n            b'j' => 0xCA,\n\
    \            b'k' => 0xC7,\n            b'l' => 0xCE,\n            b'm' => 0xCC,\n\
    \            b'n' => 0xC4,\n            b'o' => 0xCD,\n            b'p' => 0xC5,\n\
    \            b'q' => 0xCE,\n            b'r' => 0xC9,\n            b's' => 0xCB,\n\
    \            b't' => 0xC5,\n            b'u' => 0xCE,\n            b'v' => 0xC9,\n\
    \            b'w' => 0xC6,\n            b'x' => 0xC2,\n            b'y' => 0xC1,\n\
    \            b'z' => 0xCB,\n            _ => return None,\n        };\n      \
    \  sum += (c as u32).to_be_bytes().to_ascii_lowercase().as_bytes();\n        sum\n\
    \    })\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq680x2k6.rs:5:23\n  |\n5 |\
    \     text.chars().fold(\"\", |sum, c| {\n  |                       ^^ expected\
    \ enum `Option`, found `&str`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpq680x2k6.rs:7:13\n  |\n6 |         let c = match c {\n  |      \
    \                 - this expression has type `char`\n7 |             b'A' => 0xCC,\n\
    \  |             ^^^^ expected `char`, found `u8`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpq680x2k6.rs:8:13\n  |\n6 |         let c = match c {\n \
    \ |                       - this expression has type `char`\n7 |             b'A'\
    \ => 0xCC,\n8 |             b'B' => 0xC4,\n  |             ^^^^ expected `char`,\
    \ found `u8`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpq680x2k6.rs:9:13\n\
    \  |\n6 |         let c = match c {\n  |                       - this expression\
    \ has type `char`\n...\n9 |             b'C' => 0xC2,\n  |             ^^^^ expected\
    \ `char`, found `u8`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq680x2k6.rs:10:13\n\
    \   |\n6  |         let c = match c {\n   |                       - this expression\
    \ has type `char`\n...\n10 |             b'D' => 0xC9,\n   |             ^^^^\
    \ expected `char`, found `u8`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq680x2k6.rs:11:13\n\
    \   |\n6  |         let c = match c {\n   |                       - this expression\
    \ has type `char`\n...\n11 |             b'E' => 0xC1,\n   |             ^^^^\
    \ expected `char`, found `u8`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq680x2k6.rs:12:13\n\
    \   |\n6  |         let c = match c {\n   |                       - this expression\
    \ has type `char`\n...\n12 |             b'F' => 0xC0,\n   |             ^^^^\
    \ expected `char`, found `u8`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq680x2k6.rs:13:13\n\
    \   |\n6  |         let c = match c {\n   |                       - this expression\
    \ has type `char`\n...\n13 |             b'G' => 0xCB,\n   |             ^^^^\
    \ expected `char`, found `u8`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq680x2k6.rs:14:13\n\
    \ "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hasher = Sha256::new();\n    let mut input = text.as_bytes().to_vec();\n\
    \    input.push(b'\\0');\n    hasher.input(&input);\n    hasher.result(|input|\
    \ input.to_vec().to_owned());\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    Some(String::from_utf8(hasher).expect(\"Can't convert hasher to UTF8\"\
    ))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Sha256`\n -->\
    \ /tmp/tmp53mfz4e6.rs:5:22\n  |\n5 |     let mut hasher = Sha256::new();\n  |\
    \                      ^^^^^^ use of undeclared type `Sha256`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text == \"\" {\n        return None;\n    }\n    let mut md5 = String::new();\n\
    \    md5.push_str(\"MD5(\");\n    md5.push_str(&text);\n    md5.push_str(\")\"\
    );\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz7vwmbw1.rs:12:5\n   |\n\
    4  | fn string_to_md5(text: String) -> Option<String> {\n   |                \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n...\n12 |     md5.to_owned()\n   |     ^^^^^^^^^^^^^^ expected enum `Option`,\
    \ found struct `String`\n   |\n   = note: expected enum `Option<String>`\n   \
    \         found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n12 |     Some(md5.to_owned())\n   |     +++++              +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 =\
    \ md5::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpnk188gp2.rs:8:19\n  |\n8 |     let mut md5 = md5::Md5::new();\n\
    \  |                   ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match &text {\n        &\"\" => None,\n        &s => Some(md5(&s).to_string()),\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmp_3fszcfn.rs:7:20\n\
    \  |\n7 |         &s => Some(md5(&s).to_string()),\n  |                    ^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_3fszcfn.rs:6:10\n\
    \  |\n5 |     match &text {\n  |           ----- this expression has type `&String`\n\
    6 |         &\"\" => None,\n  |          ^^ expected struct `String`, found `&str`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
