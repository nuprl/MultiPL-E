name: HumanEval_36_fizz_buzz
language: rust
results:
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (0..n).filter(|i|\
    \ i % 11 == 0 || i % 13 == 0).count()\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplafgyxkn.rs:9:5\n  |\n8 |\
    \ fn fizz_buzz(n: isize) -> isize {\n  |                           ----- expected\
    \ `isize` because of return type\n9 |     (0..n).filter(|i| i % 11 == 0 || i %\
    \ 13 == 0).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (0..n).filter(|i|\
    \ i % 11 == 0 || i % 13 == 0).count().try_into().unwrap()\n  |               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut fizz_count = 1;\n    let mut buzz_count = 1;\n\n    for i in 1..=n {\n \
    \       if i % 11 == 0 && i % 13 == 0 {\n            fizz_count += 1;\n      \
    \  } else if i % 11 == 0 {\n            fizz_count += 1;\n            buzz_count\
    \ += 1;\n        } else if i % 13 == 0 {\n            buzz_count += 1;\n     \
    \   }\n    }\n\n    if n % 11 == 0 && n % 13 == 0 {\n        fizz_count += 1;\n\
    \    }\n\n    if n % 11 == 0 {\n        fizz_count += 1;\n    }\n\n    if n %\
    \ 13 == 0 {\n        buzz_count += 1;\n    }\n\n    return fizz_count * buzz_count;\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `40`,\n right: `0`', /tmp/tmp1j9850o_.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    fn\
    \ fizzbuzz_iter(n: isize, ix: usize) -> Option<usize> {\n        let mut fizzbuzz:\
    \ Vec<usize> = vec![false; 3];\n        let mut n: usize = n;\n        let mut\
    \ ix: usize = ix;\n        for i in 0..3 {\n            let divisible_by_11 =\
    \ n % 11 == 0;\n            let divisible_by_13 = n % 13 == 0;\n            if\
    \ divisible_by_11 && divisible_by_13 {\n                fizzbuzz[i] = true;\n\
    \            } else if divisible_by_11 {\n                fizzbuzz[i] = false;\n\
    \            } else if divisible_by_13 {\n                fizzbuzz[i] = true;\n\
    \            } else {\n                fizzbuzz[i] = n % 11 == 0;\n          \
    \  }\n            n = n / 11;\n            ix = ix / 11;\n        }\n        if\
    \ n == 0 {\n            return Some(fizzbuzz.iter().filter(|&b| b).count());\n\
    \        }\n        Some(fizzbuzz.iter().filter(|&b| b).count())\n    }\n    match\
    \ fizzbuzz_iter(n, 0) {\n        None => 0,\n        Some(0) => 0,\n        Some(fizzbuzz_iter(n,\
    \ 0)) => fizzbuzz_iter(n, 0),\n        Some(_) => panic!(\"invalid input\"),\n\
    \    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0532]: expected tuple struct or tuple variant, found function `fizzbuzz_iter`\n\
    \  --> /tmp/tmpf5o53xcg.rs:36:14\n   |\n36 |         Some(fizzbuzz_iter(n, 0))\
    \ => fizzbuzz_iter(n, 0),\n   |              ^^^^^^^^^^^^^ not a tuple struct\
    \ or tuple variant\n\nerror[E0308]: `match` arms have incompatible types\n  -->\
    \ /tmp/tmpf5o53xcg.rs:36:38\n   |\n33 | /     match fizzbuzz_iter(n, 0) {\n34\
    \ | |         None => 0,\n   | |                 - this is found to be of type\
    \ `isize`\n35 | |         Some(0) => 0,\n   | |                    - this is found\
    \ to be of type `isize`\n36 | |         Some(fizzbuzz_iter(n, 0)) => fizzbuzz_iter(n,\
    \ 0),\n   | |                                      ^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n37 | |         Some(_) => panic!(\"invalid input\"\
    ),\n38 | |     }\n   | |_____- `match` arms have incompatible types\n   |\n  \
    \ = note: expected type `isize`\n              found enum `Option<usize>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpf5o53xcg.rs:10:45\n   |\n10 |  \
    \       let mut fizzbuzz: Vec<usize> = vec![false; 3];\n   |                 \
    \                            ^^^^^ expected `usize`, found `bool`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpf5o53xcg.rs:11:28\n   |\n11 |         let mut\
    \ n: usize = n;\n   |                    -----   ^ expected `usize`, found `isize`\n\
    \   |                    |\n   |                    expected due to this\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n11 |         let mut n: usize = n.try_into().unwrap();\n\
    \   |                             ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf5o53xcg.rs:17:31\n   |\n17 |                 fizzbuzz[i]\
    \ = true;\n   |                 -----------   ^^^^ expected `usize`, found `bool`\n\
    \   |                 |\n   |                 expected due to the type of this\
    \ binding\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf5o53xcg.rs:19:31\n\
    \   |\n19 |                 fizzbuzz[i] = false;\n   |                 -----------\
    \   ^^^^^ expected `usize`, found `bool`\n   |        "
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (1..=n).filter(|i|\
    \ i % 11 == 0 || i % 13 == 0).count()\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5kuhgdwp.rs:9:5\n  |\n8 |\
    \ fn fizz_buzz(n: isize) -> isize {\n  |                           ----- expected\
    \ `isize` because of return type\n9 |     (1..=n).filter(|i| i % 11 == 0 || i\
    \ % 13 == 0).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (1..=n).filter(|i|\
    \ i % 11 == 0 || i % 13 == 0).count().try_into().unwrap()\n  |               \
    \                                            ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 && n % 13 == 0 {\n        0\n    } else if n % 11 == 0 {\n     \
    \   1\n    } else {\n        2\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpmtww8jlr.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    n\
    \ / 11\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `0`', /tmp/tmpa8tb9t0_.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (n\
    \ as u64) % 11\n        + ((n as u64) % 13 as u64) as isize\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprcy3mrv6.rs:10:11\n   |\n\
    10 |         + ((n as u64) % 13 as u64) as isize\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `u64`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprcy3mrv6.rs:9:5\n\
    \   |\n8  |   fn fizz_buzz(n: isize) -> isize {\n   |                        \
    \     ----- expected `isize` because of return type\n9  | /     (n as u64) % 11\n\
    10 | |         + ((n as u64) % 13 as u64) as isize\n   | |___________________________________________^\
    \ expected `isize`, found `u64`\n   |\nhelp: you can convert a `u64` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n9  ~     ((n as u64) % 11\n\
    10 ~         + ((n as u64) % 13 as u64) as isize).try_into().unwrap()\n   |\n\n\
    error[E0277]: cannot add `isize` to `u64`\n  --> /tmp/tmprcy3mrv6.rs:10:9\n  \
    \ |\n10 |         + ((n as u64) % 13 as u64) as isize\n   |         ^ no implementation\
    \ for `u64 + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `u64`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        n\n    } else {\n        fizz_buzz(n -\
    \ 1)\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `44`,\n right: `0`', /tmp/tmpz1ae0070.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    let mut div = 11 * 13;\n    while n > div {\n        counter\
    \ += n % div == 0 ? 1 : 0;\n        div += 11 * 13;\n        n /= div;\n    }\n\
    \    counter\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1`\n\
    \  --> /tmp/tmp3qikmgl0.rs:12:35\n   |\n12 |         counter += n % div == 0 ?\
    \ 1 : 0;\n   |                                   ^ expected one of `.`, `;`, `?`,\
    \ `}`, or an operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0\
    \ {\n            counter += 1;\n        }\n    }\n    counter\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `0`', /tmp/tmp3oe16bfs.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ We have a number less than n\n    if n < 2 { return n; }\n    // We are divisible\
    \ by 11 or 13\n    if n % 11 == 0 || n % 13 == 0 { return n; }\n\n    let mut\
    \ n2 = n;\n    let mut n1 = 1;\n\n    while n2 >= 7 {\n        // Multiply by\
    \ 11 and divide by 7\n        n2 = n2 % 11 / 7;\n        // Increase the value\
    \ of the current digit\n        n1 += 1;\n    }\n    // Add the new digit\n  \
    \  n1 += n2;\n\n    // We have 1 less than n\n    if n1 < 2 { return 1; }\n  \
    \  // We have 2 less than n\n    if n1 < 3 { return 2; }\n    // We have 3 less\
    \ than n\n    if n1 < 5 { return 3; }\n    // We have 4 less than n\n    if n1\
    \ < 7 { return 4; }\n    // We have 5 less than n\n    if n1 < 9 { return 5; }\n\
    \    // We have 6 less than n\n    if n1 < 11 { return 6; }\n    // We have 7\
    \ less than n\n    if n1 < 13 { return 7; }\n    // We have 8 less than n\n  \
    \  if n1 < 15 { return 8; }\n    // We have 9 less than n\n    if n1 < 17 { return\
    \ 9; }\n    // We have 10 less than n\n    if n1 < 19 { return 10; }\n    // We\
    \ have 11 less than n\n    if n1 < 21 { return 11; }\n    // We have 12 less than\
    \ n\n    if n1 < 23 { return 12; }\n    // We have 13 less than n\n    if n1 <\
    \ 25 { return 13; }\n    // We have 14 less than n\n    if n1 < 27 { return 14;\
    \ }\n    // We have 15 less than n\n    if n1 < 29 { return 15; }\n    // We have\
    \ 16 less than n\n    if n1 < 31 { return 16; }\n    // We have 17 less than n\n\
    \    if n1 < 33 { return 17; }\n    // We have 18 less than n\n    if n1 < 35\
    \ { return 18; }\n    // We have 19 less than n\n    if n1 < 37 { return 19; }\n\
    \    // We have 20 less than n\n    if n1 < 39 { return 20; }\n    // We have\
    \ 21 less than n\n    if n1 < 41 { return 21; }\n    // We have 22 less than n\n\
    \    if n1 < 43 { return 22; }\n    // We have 23 less than n\n    if n1 < 45\
    \ { return 23; }\n    // We have 24 less than n\n    if n1 < 47 { return 24; }\n\
    \    // We have 25 less than n\n    if n1 < 49 { return 25; }\n    // We have\
    \ 26 less than n\n    if n1 < 51 { return 26; }\n    // We have 27 less than n\n\
    \    if n1 < 53 { return \n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpssmun2sd.rs:92:3\n\
    \   |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |                          \
    \       - unclosed delimiter\n...\n79 |     if n1 < 53 { return \n   |       \
    \         - this delimiter might not be properly closed...\n80 | }\n   | - ...as\
    \ it matches this but it has different indentation\n...\n92 | }\n   |   ^\n\n\
    error[E0069]: `return;` in a function whose return type is not `()`\n  --> /tmp/tmpssmun2sd.rs:79:18\n\
    \   |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |                          \
    \ ----- expected `isize` because of this return type\n...\n79 |     if n1 < 53\
    \ { return \n   |                  ^^^^^^ return type is not `()`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpssmun2sd.rs:8:27\n  |\n8 | fn fizz_buzz(n: isize)\
    \ -> isize {\n  |    ---------              ^^^^^ expected `isize`, found `()`\n\
    \  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0069, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0069`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        n / 10\n    } else {\n        n + 1\n\
    \    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `51`,\n right: `0`', /tmp/tmpm05_6bts.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut fizz = 0;\n    let mut buzz = 0;\n\n    for &n in &n {\n        if n ==\
    \ 7 || n == 11 || n == 13 {\n            fizz += 1;\n        } else {\n      \
    \      buzz += 1;\n        }\n    }\n\n    fizz - buzz\n}\n\nfn main() {\n   \
    \ let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `&isize` is not an iterator\n  --> /tmp/tmp1c2mytjh.rs:12:15\n\
    \   |\n12 |     for &n in &n {\n   |               ^^ `&isize` is not an iterator\n\
    \   |\n   = help: the trait `Iterator` is not implemented for `&isize`\n   = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `&isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        0\n    } else {\n        1 + fizz_buzz(n\
    \ / 11)\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp9n76zr6l.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    fn\
    \ fizz_buzz_helper(n: isize) -> isize {\n        if n % 11 == 0 || n % 13 == 0\
    \ {\n            1\n        } else {\n            0\n        }\n    }\n\n    match\
    \ n {\n        1 => 1,\n        2 => 1,\n        _ => fizz_buzz_helper(n - 1),\n\
    \    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp_e3mfr3_.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        n\n    } else {\n        0\n    }\n}\n\
    \nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `78`,\n right: `2`', /tmp/tmpnj5kf_3r.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (n\
    \ as usize % 11 + 13) % 11\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnvw59j3o.rs:9:5\n  |\n8 |\
    \ fn fizz_buzz(n: isize) -> isize {\n  |                           ----- expected\
    \ `isize` because of return type\n9 |     (n as usize % 11 + 13) % 11\n  |   \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n9 |     ((n as usize % 11 + 13) % 11).try_into().unwrap()\n  |   \
    \  +                           +++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 && (n % 13 == 0 || n % 13 == 1) && n > 0 {\n        return 1\n \
    \   }\n    if n % 13 == 0 || n % 13 == 1 {\n        return 2\n    }\n    if n\
    \ > 0 && n % 11 == 0 {\n        return 3\n    }\n    0\n}\n\nfn main() {\n   \
    \ let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmp4b3uv5pp.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n < 10 {\n        if n % 11 == 0 {\n            return 0;\n        }\n     \
    \   if n % 13 == 0 {\n            return 2;\n        }\n        return 1;\n  \
    \  }\n    if n < 100 {\n        if n % 11 == 0 {\n            return 0;\n    \
    \    }\n        if n % 13 == 0 {\n            return 2;\n        }\n        if\
    \ n % 17 == 0 {\n            return 3;\n        }\n        if n % 19 == 0 {\n\
    \            return 4;\n        }\n        if n % 29 == 0 {\n            return\
    \ 5;\n        }\n        if n % 31 == 0 {\n            return 6;\n        }\n\
    \        if n % 37 == 0 {\n            return 7;\n        }\n        if n % 41\
    \ == 0 {\n            return 8;\n        }\n        if n % 43 == 0 {\n       \
    \     return 9;\n        }\n        if n % 47 == 0 {\n            return 10;\n\
    \        }\n        return 11;\n    }\n    if n < 1000 {\n        if n % 11 ==\
    \ 0 {\n            return 0;\n        }\n        if n % 13 == 0 {\n          \
    \  return 2;\n        }\n        if n % 17 == 0 {\n            return 3;\n   \
    \     }\n        if n % 19 == 0 {\n            return 4;\n        }\n        if\
    \ n % 29 == 0 {\n            return 5;\n        }\n        if n % 31 == 0 {\n\
    \            return 6;\n        }\n        if n % 37 == 0 {\n            return\
    \ 7;\n        }\n        if n % 41 == 0 {\n            return 8;\n        }\n\
    \        if n % 43 == 0 {\n            return 9;\n        }\n        if n % 47\
    \ == 0 {\n            return 10;\n        }\n        if n % 51 == 0 {\n      \
    \      return 11;\n        }\n        if n % 53 == 0 {\n            return 12;\n\
    \        }\n        if n % 57 == 0 {\n            return 13;\n        }\n    \
    \    if n % 61 == 0 {\n            return 14;\n        }\n        if n % 65 ==\
    \ 0 {\n            return 15;\n        }\n        if n % 69 == 0 {\n         \
    \   return 16;\n        }\n        if n % 71 == 0 {\n            return 17;\n\
    \        }\n        if n % 73 == 0 {\n            return 18;\n        }\n    \
    \    if n % 77 == 0 {\n            return 19;\n        }\n        if n % 81 ==\
    \ 0 {\n            return 20;\n        }\n        if n % 85 == 0 {\n         \
    \   return 21;\n        }\n        if n % 89 == 0 {\n            return 22;\n\
    \        }\n        if n % 91 == 0 {\n            return 23;\n        }\n    \
    \    if n % 93 == 0 {\n            return 24;\n        }\n        if n % 97 ==\
    \ 0 {\n            return 25;\n        }\n        if n % 101 == 0 {\n        \
    \    return 26;\n        }\n        if n % 105 == 0 {\n            return 27;\n\
    \        }\n        if n % 109 == 0 {\n            return 28;\n        }\n   \
    \     if n % 111 == 0 {\n            return 29;\n        }\n        if n % 115\
    \ == 0 {\n            return 30;\n        }\n        if n % 119 == 0 {\n     \
    \       return 31;\n        }\n\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp2iospx2w.rs:158:3\n\
    \    |\n8   | fn fizz_buzz(n: isize) -> isize {\n    |                       \
    \          - unclosed delimiter\n...\n51  |     if n < 1000 {\n    |         \
    \        - this delimiter might not be properly closed...\n...\n146 | }\n    |\
    \ - ...as it matches this but it has different indentation\n...\n158 | }\n   \
    \ |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp2iospx2w.rs:8:27\n  |\n\
    8 | fn fizz_buzz(n: isize) -> isize {\n  |    ---------              ^^^^^ expected\
    \ `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut cnt = 0;\n    for d in dig_ones_digits(n) {\n        if d % 11 == 0 || d\
    \ % 13 == 0 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `dig_ones_digits` in this scope\n  -->\
    \ /tmp/tmpb7cqipbo.rs:10:14\n   |\n10 |     for d in dig_ones_digits(n) {\n  \
    \ |              ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (n\
    \ - 1) - (n % 11)\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `43`,\n right: `0`', /tmp/tmp3lfb5vul.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n & 7 == 0 {\n        0\n    } else if n % 11 == 0 || n % 13 == 0 {\n      \
    \  1 + fizz_buzz(n / 11)\n    } else {\n        fizz_buzz(n / 13)\n    }\n}\n\n\
    fn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmprfukjifz.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    fn\
    \ fizz(n: usize) -> usize {\n        if n % 11 == 0 || n % 13 == 0 {\n       \
    \     1\n        } else {\n            0\n        }\n    }\n\n    n.iter().filter(|&x|\
    \ fizz(x)).count()\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpsk51f1er.rs:17:7\n   |\n17 |     n.iter().filter(|&x| fizz(x)).count()\n\
    \   |       ^^^^ method not found in `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 && n % 13 == 0 {\n        0\n    } else {\n        1 + fizz_buzz(n\
    \ - 11)\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 1..=n {\n        if i % 11 == 0 && i % 13 == 0\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `2`', /tmp/tmp63gi9asy.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        n\n    } else {\n        fizz_buzz(n /\
    \ 11) * 11 + n % 11\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `0`', /tmp/tmp_lp4yotw.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    debug_assert!(n\
    \ % 11 == 0 || n % 13 == 0);\n    if n % 11 == 0 {\n        n / 11\n    } else\
    \ if n % 13 == 0 {\n        n / 13\n    } else {\n        n\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: n % 11 == 0 || n % 13 == 0',\
    \ /tmp/tmpephbjfju.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        n\n    } else {\n        0\n    }\n}\n\
    \nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `78`,\n right: `2`', /tmp/tmp85n2ysm0.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 && n % 13 == 0 {\n        n\n    } else {\n        0\n    }\n}\n\
    \nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `2`', /tmp/tmptw55khr_.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        n\n    } else {\n        0\n    }\n}\n\
    \nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `78`,\n right: `2`', /tmp/tmpgsjduxmr.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 && *(n.as_str()[..1]) == \"7\" {\n        return 1;\n    }\n   \
    \ if n % 13 == 0 && *(n.as_str()[..1]) == \"7\" {\n        return 2;\n    }\n\
    \    0\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `as_str` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpppjgzrsz.rs:9:27\n  |\n9 |     if n % 11 == 0 && *(n.as_str()[..1])\
    \ == \"7\" {\n  |                           ^^^^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `as_str` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpppjgzrsz.rs:12:27\n   |\n12 |     if n % 13 == 0 && *(n.as_str()[..1])\
    \ == \"7\" {\n   |                           ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut num = 0;\n    for d in &[7, 8] {\n        if n % d.0 != 0 {\n          \
    \  continue;\n        }\n        if n % d.1 == 0 {\n            num |= 1 << d.1;\n\
    \        }\n    }\n    if n > 0 && num == 0 {\n        num += 1;\n    }\n    num\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0609]: no field `0` on type `&{integer}`\n  --> /tmp/tmpyidavexv.rs:11:18\n\
    \   |\n11 |         if n % d.0 != 0 {\n   |                  ^\n\nerror[E0609]:\
    \ no field `1` on type `&{integer}`\n  --> /tmp/tmpyidavexv.rs:14:18\n   |\n14\
    \ |         if n % d.1 == 0 {\n   |                  ^\n\nerror[E0609]: no field\
    \ `1` on type `&{integer}`\n  --> /tmp/tmpyidavexv.rs:15:27\n   |\n15 |      \
    \       num |= 1 << d.1;\n   |                           ^\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0609`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ Base case\n    if n <= 0 {\n        return 0;\n    }\n    // Do it recursively\n\
    \    if n <= 13 {\n        return fizz_buzz_13_divisor(n);\n    }\n    if n %\
    \ 11 == 0 {\n        return fizz_buzz_11_divisor(n);\n    }\n    if n % 13 ==\
    \ 0 {\n        return fizz_buzz_13_divisor(n);\n    }\n    return fizz_buzz_nine_divisor(n);\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fizz_buzz_13_divisor` in this scope\n\
    \  --> /tmp/tmpj3z_8mxc.rs:15:16\n   |\n15 |         return fizz_buzz_13_divisor(n);\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `fizz_buzz_11_divisor` in this scope\n  --> /tmp/tmpj3z_8mxc.rs:18:16\n\
    \   |\n18 |         return fizz_buzz_11_divisor(n);\n   |                ^^^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `fizz_buzz_13_divisor`\
    \ in this scope\n  --> /tmp/tmpj3z_8mxc.rs:21:16\n   |\n21 |         return fizz_buzz_13_divisor(n);\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `fizz_buzz_nine_divisor` in this scope\n  --> /tmp/tmpj3z_8mxc.rs:23:12\n\
    \   |\n23 |     return fizz_buzz_nine_divisor(n);\n   |            ^^^^^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        0\n    } else {\n        match n % 10\
    \ {\n            x if x % 11 == 0 && x % 13 == 0 => 1,\n            x if x % 11\
    \ == 0 => 2,\n            x if x % 13 == 0 => 3,\n            _ => 4,\n      \
    \  }\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmppdqqwoe5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    match\
    \ n % 10 {\n        7 => 0,\n        8 => 1,\n        9 => 2,\n        10 => 3,\n\
    \        _ => 1,\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n  \
    \  assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptj6ywaav.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 && n % 13 == 0 {\n        0\n    } else {\n        1 + fizz_buzz(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `0`', /tmp/tmp5j7ym1q8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 {\n        n / 11\n    } else {\n        n / 13\n    }\n}\n\nfn\
    \ main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `0`', /tmp/tmp1gxfm4uu.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut i = 0;\n    let mut digits_so_far: Vec<isize> = vec![];\n    let mut digits_so_far_count:\
    \ usize = digits_so_far.len();\n    loop {\n        i += 1;\n        digits_so_far_count\
    \ = digits_so_far.len();\n        digits_so_far.push(i % 11);\n        digits_so_far_count\
    \ += digits_so_far.len();\n        digits_so_far.push(i % 13);\n        digits_so_far_count\
    \ += digits_so_far.len();\n        digits_so_far.push(0);\n        let digits_so_far_str\
    \ = digits_so_far\n            .iter()\n            .cloned()\n            .map(|c|\
    \ c.to_string())\n            .collect();\n        if digits_so_far_count == 4\
    \ {\n            if digits_so_far_str[0] == \"11\" {\n                digits_so_far.pop();\n\
    \                return i;\n            } else if digits_so_far_str[0] == \"13\"\
    \ {\n                digits_so_far.pop();\n                return i + 1;\n   \
    \         }\n        }\n        if digits_so_far_count > 4 {\n            if digits_so_far_str\
    \ == \"111\" || digits_so_far_str == \"131\" {\n                digits_so_far.pop();\n\
    \                return i;\n            }\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpvjo0b932.rs:26:16\n\
    \   |\n20 |         let digits_so_far_str = digits_so_far\n   |             -----------------\
    \ consider giving `digits_so_far_str` a type\n...\n26 |             if digits_so_far_str[0]\
    \ == \"11\" {\n   |                ^^^^^^^^^^^^^^^^^ cannot infer type\n   |\n\
    \   = note: type must be known at this point\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    debug_assert!(n\
    \ % 10 == 0);\n    let mut count = 0;\n    n.times(|x| {\n        if x % 11 ==\
    \ 0 || x % 13 == 0 {\n            count += 1;\n        }\n    });\n    count\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `times` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpa519odx4.rs:11:7\n   |\n11 |     n.times(|x| {\n   |  \
    \     ^^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    match\
    \ n % 11 {\n        0 => n % 13,\n        1 => 7,\n        _ => n % 13,\n    }\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `11`,\n right: `0`', /tmp/tmpqe2e3957.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    while n > 0 && (n % 11) == 0 || n % 13 == 0 {\n      \
    \  n /= 10;\n        counter += 1;\n    }\n    counter\n}\n\nfn main() {\n   \
    \ let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp5y2ojevk.rs:11:9\n\
    \   |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n11 |         n /= 10;\n   |     \
    \    ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    use\
    \ std::cmp::Ordering;\n\n    fn is_divisible_by_11(n: isize) -> bool {\n     \
    \   n % 11 == 0 && n % 11 != 0\n    }\n\n    fn is_divisible_by_13(n: isize) ->\
    \ bool {\n        n % 13 == 0 && n % 13 != 0\n    }\n\n    if is_divisible_by_11(n)\
    \ {\n        if n % 11 == 0 {\n            1\n        } else {\n            0\n\
    \        }\n    } else if is_divisible_by_13(n) {\n        if n % 13 == 0 {\n\
    \            2\n        } else {\n            0\n        }\n    } else {\n   \
    \     3\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `0`', /tmp/tmpq3j5sd6d.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        0\n    } else {\n        let mut count\
    \ = 0usize;\n        while n > 0 {\n            n = n / 10;\n            count\
    \ += 1;\n        }\n        count + fizz_buzz(count) + 1\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq0kk66au.rs:17:27\n   |\n\
    17 |         count + fizz_buzz(count) + 1\n   |                           ^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n17 |         count\
    \ + fizz_buzz(count.try_into().unwrap()) + 1\n   |                           \
    \     ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq0kk66au.rs:17:17\n\
    \   |\n17 |         count + fizz_buzz(count) + 1\n   |                 ^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n\
    \  --> /tmp/tmpq0kk66au.rs:17:15\n   |\n17 |         count + fizz_buzz(count)\
    \ + 1\n   |               ^ no implementation for `usize + isize`\n   |\n   =\
    \ help: the trait `Add<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Add<Rhs>`:\n             <&'a f32 as\
    \ Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n\
    \             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n    \
    \         <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n          \
    \   <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpq0kk66au.rs:17:9\n   |\n8  | fn fizz_buzz(n: isize) ->\
    \ isize {\n   |                           ----- expected `isize` because of return\
    \ type\n...\n17 |         count + fizz_buzz(count) + 1\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n17 |         (count\
    \ + fizz_buzz(count) + 1).try_into().unwrap()\n   |         +                \
    \            +++++++++++++++++++++\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n\n    for digit in n.checked_mul(11).unwrap().rev() {\n    \
    \    if digit % 11 == 0 || digit % 13 == 0 {\n            count += 1;\n      \
    \  }\n    }\n\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n \
    \   assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `isize` is not an iterator\n  --> /tmp/tmpo9wh5cej.rs:11:45\n\
    \   |\n11 |     for digit in n.checked_mul(11).unwrap().rev() {\n   |        \
    \                                     ^^^ `isize` is not an iterator\n   |\n \
    \  = note: the following trait bounds were not satisfied:\n           `isize:\
    \ Iterator`\n           which is required by `&mut isize: Iterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    while n > 0 {\n        counter += n.checked_mul(11).is_zero()\
    \ || n.checked_mul(13).is_zero();\n        n /= 11;\n    }\n    counter\n}\n\n\
    fn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_zero` found for enum `Option` in the\
    \ current scope\n  --> /tmp/tmplrfwhua4.rs:11:38\n   |\n11 |         counter +=\
    \ n.checked_mul(11).is_zero() || n.checked_mul(13).is_zero();\n   |          \
    \                            ^^^^^^^ method not found in `Option<isize>`\n\nerror[E0599]:\
    \ no method named `is_zero` found for enum `Option` in the current scope\n  -->\
    \ /tmp/tmplrfwhua4.rs:11:69\n   |\n11 |         counter += n.checked_mul(11).is_zero()\
    \ || n.checked_mul(13).is_zero();\n   |                                      \
    \                               ^^^^^^^ method not found in `Option<isize>`\n\n\
    error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmplrfwhua4.rs:11:17\n\
    \   |\n11 |         counter += n.checked_mul(11).is_zero() || n.checked_mul(13).is_zero();\n\
    \   |                 ^^ no implementation for `{integer} += bool`\n   |\n   =\
    \ help: the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (0..=n)\n\
    \        .filter(|&a| a % 11 == 0 || a % 13 == 0)\n        .count()\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwq2t7361.rs:9:5\n   |\n8\
    \  |   fn fizz_buzz(n: isize) -> isize {\n   |                             -----\
    \ expected `isize` because of return type\n9  | /     (0..=n)\n10 | |        \
    \ .filter(|&a| a % 11 == 0 || a % 13 == 0)\n11 | |         .count()\n   | |________________^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n11 |         .count().try_into().unwrap()\n\
    \   |                 ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut fizzbuzz_count = 0;\n    let mut last_remainder = 0;\n    loop {\n     \
    \   let remainder = n % 11;\n        n /= 11;\n\n        if n != 0 {\n       \
    \     last_remainder = remainder;\n        }\n        fizzbuzz_count++;\n\n  \
    \      if fizzbuzz_count == 3 || fizzbuzz_count == 5 || fizzbuzz_count == 7 {\n\
    \            break;\n        }\n\n        fizzbuzz_count = 0;\n    }\n\n    if\
    \ last_remainder == 0 || last_remainder == 11 || last_remainder == 13 {\n    \
    \    return fizzbuzz_count;\n    }\n\n    return fizzbuzz_count + 1;\n}\n\nfn\
    \ main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpyk6tp15t.rs:18:23\n\
    \   |\n18 |         fizzbuzz_count++;\n   |                       ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n18 |         { let tmp\
    \ = fizzbuzz_count; fizzbuzz_count += 1; tmp };\n   |         +++++++++++    \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n18 -         fizzbuzz_count++;\n18 +\
    \         fizzbuzz_count += 1;\n   | \n\nwarning: unreachable statement\n  -->\
    \ /tmp/tmpyk6tp15t.rs:27:5\n   |\n11 | /     loop {\n12 | |         let remainder\
    \ = n % 11;\n13 | |         n /= 11;\n14 | |\n...  |\n24 | |         fizzbuzz_count\
    \ = 0;\n25 | |     }\n   | |_____- any code following this expression is unreachable\n\
    26 | \n27 | /     if last_remainder == 0 || last_remainder == 11 || last_remainder\
    \ == 13 {\n28 | |         return fizzbuzz_count;\n29 | |     }\n   | |_____^ unreachable\
    \ statement\n   |\n   = note: `#[warn(unreachable_code)]` on by default\n\nerror:\
    \ aborting due to previous error; 1 warning emitted\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n < 11 || (n % 11 == 0 && n % 13 == 0) {\n        0\n    } else {\n        2\n\
    \    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpxdi83qau.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ Use a binary search to determine which digit 7 appears.\n    let mut idx = n\
    \ / 11;\n    idx += 7 * (idx < n) as isize - n % 11;\n    idx\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `0`', /tmp/tmpgiafhfmh.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    let mut digits = vec![];\n    for i in 0..n {\n        if\
    \ i % 11 == 0 && (i % 13 == 0 || i == n) { // count for multiples of 11 and 13\n\
    \            count += 1;\n        } else {\n            digits.push(i);\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n \
    \   assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0gbbg1u5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    use\
    \ core::cmp::Ordering;\n    use core::cmp::PartialEq;\n\n    if n % 11 == 0 ||\
    \ n % 13 == 0 {\n        n\n    } else {\n        match n % 11 {\n           \
    \ 0 => 1,\n            1 => 11 + fizz_buzz(n - 11),\n            2 => fizz_buzz(n\
    \ - 13) + 1,\n            _ => fizz_buzz(n - 11) + 1,\n        }\n    }\n}\n\n\
    fn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: maybe a missing crate `core`?\n --> /tmp/tmp0lxmtik6.rs:9:9\n\
    \  |\n9 |     use core::cmp::Ordering;\n  |         ^^^^ maybe a missing crate\
    \ `core`?\n\nerror[E0433]: failed to resolve: maybe a missing crate `core`?\n\
    \  --> /tmp/tmp0lxmtik6.rs:10:9\n   |\n10 |     use core::cmp::PartialEq;\n  \
    \ |         ^^^^ maybe a missing crate `core`?\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    debug_assert!(n\
    \ % 11 == 0 || n % 13 == 0);\n\n    let mut count = 0;\n    let mut n = n;\n \
    \   while n % 11 != 0 || n % 13 != 0 {\n        count += 1;\n        n /= 11;\n\
    \        n /= 13;\n    }\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: n % 11 == 0 || n % 13 == 0',\
    \ /tmp/tmp0ad_pemu.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    use\
    \ std::cmp::{min, cmp};\n    let mut counter = 0;\n    while n > 0 && min (n,\
    \ &counter) == n {\n        if n % 11 == 0 || (n % 13 == 0 && n != 13) {\n   \
    \         counter += 1;\n        }\n        n /= 11;\n    }\n    counter\n}\n\n\
    fn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0432]: unresolved import `std::cmp::cmp`\n --> /tmp/tmpy1w9ytqf.rs:9:25\n\
    \  |\n9 |     use std::cmp::{min, cmp};\n  |                         ^^^ no `cmp`\
    \ in `cmp`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy1w9ytqf.rs:11:28\n\
    \   |\n11 |     while n > 0 && min (n, &counter) == n {\n   |                \
    \            ^^^^^^^^ expected `isize`, found `&{integer}`\n   |\nhelp: consider\
    \ removing the borrow\n   |\n11 -     while n > 0 && min (n, &counter) == n {\n\
    11 +     while n > 0 && min (n, counter) == n {\n   | \n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0432.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n <= 0 || n % 11 == 0 || n % 13 == 0 {\n        return n;\n    }\n\n    if n\
    \ % 10 == 7 {\n        return n - 7;\n    }\n\n    if n % 10 == 9 {\n        return\
    \ fizz_buzz(fizz_buzz(n/10) + 1);\n    }\n\n    if n % 10 == 7 {\n        return\
    \ n - 3;\n    }\n\n    if n % 10 == 0 {\n        return fizz_buzz(n/10) + 1;\n\
    \    }\n\n    n - (n % 10)\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0b0vussd.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        0 as isize\n    } else {\n        n as\
    \ isize\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `0`', /tmp/tmpjb4pcun0.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut fzb = 0.0;\n    let mut imax = n.max(|a, b| a.cmp(b));\n\n    while imax\
    \ % 11 == 0 || imax % 13 == 0 {\n        if imax / 11 == 0 {\n            imax\
    \ += 1;\n        } else {\n            imax += 13;\n        }\n        fzb +=\
    \ 1;\n    }\n\n    fzb\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n   \
    \ assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp2m_kxtye.rs:10:27\n\
    \   |\n10 |     let mut imax = n.max(|a, b| a.cmp(b));\n   |                 \
    \          ^ consider giving this closure parameter a type\n   |\n   = note: type\
    \ must be known at this point\n\nerror[E0277]: cannot add-assign `{integer}` to\
    \ `{float}`\n  --> /tmp/tmp2m_kxtye.rs:18:13\n   |\n18 |         fzb += 1;\n \
    \  |             ^^ no implementation for `{float} += {integer}`\n   |\n   = help:\
    \ the trait `AddAssign<{integer}>` is not implemented for `{float}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2m_kxtye.rs:21:5\n   |\n8  | fn fizz_buzz(n: isize) ->\
    \ isize {\n   |                           ----- expected `isize` because of return\
    \ type\n...\n21 |     fzb\n   |     ^^^ expected `isize`, found floating-point\
    \ number\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0282, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 && n % 13 == 0 {\n        n\n    } else {\n        0\n    }\n}\n\
    \nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `2`', /tmp/tmpj4wmhuak.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    use\
    \ std::cmp::Ordering;\n\n    match (n % 11, n % 13) {\n        (2, _) => (n -\
    \ 7) / 13,\n        (0, _) => 1,\n        (_, 2) => 2,\n        (_, 3) => 3,\n\
    \        (_, _) => {\n            let mut fizz_buzz = 1;\n            while fizz_buzz\
    \ < n {\n                if n % fizz_buzz == 0 {\n                    fizz_buzz\
    \ += 1;\n                } else {\n                    break;\n              \
    \  }\n            }\n            fizz_buzz\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `0`', /tmp/tmp8g4je3io.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ We do not need to worry about numbers greater than 100 for now\n    // and we\
    \ do not need to worry about negative numbers\n    if n % 11 == 0 || n % 13 ==\
    \ 0 {\n        n\n    } else {\n        fizz_buzz_iter(n).next()\n    }\n}\n\n\
    fn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fizz_buzz_iter` in this scope\n  -->\
    \ /tmp/tmpglv2pb4s.rs:14:9\n   |\n14 |         fizz_buzz_iter(n).next()\n   |\
    \         ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ count the occurance of each digit\n    let mut freqs = vec![0; 10];\n    for\
    \ &n in n.to_string().chars() {\n        freqs[n as usize]++;\n    }\n\n    //\
    \ find out which digit is most common\n    let max_count = freqs.iter().max().unwrap();\n\
    \n    // print out all numbers with that digit\n    let mut num_buzz = vec![0;\
    \ 10];\n    for i in 0..10 {\n        if freqs[i] > max_count {\n            break;\n\
    \        }\n        num_buzz[i] += freqs[i];\n    }\n\n    // return the number\
    \ of times 7 appears in the most common number\n    num_buzz.iter().filter(|&n|\
    \ n == 7).count();\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpm_o4iclc.rs:12:26\n\
    \   |\n12 |         freqs[n as usize]++;\n   |                          ^^ not\
    \ a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n12 |       \
    \  { let tmp = freqs[n as usize]; freqs[n as usize] += 1; tmp };\n   |       \
    \  +++++++++++                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n12 -        \
    \ freqs[n as usize]++;\n12 +         freqs[n as usize] += 1;\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm_o4iclc.rs:11:9\n   |\n11 |     for &n in n.to_string().chars()\
    \ {\n   |         ^^    --------------------- this expression has type `Option<char>`\n\
    \   |         |\n   |         expected `char`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `char`\n           found reference `&_`\n\nerror[E0277]: can't compare\
    \ `{integer}` with `&{integer}`\n  --> /tmp/tmpm_o4iclc.rs:21:21\n   |\n21 | \
    \        if freqs[i] > max_count {\n   |                     ^ no implementation\
    \ for `{integer} < &{integer}` and `{integer} > &{integer}`\n   |\n   = help:\
    \ the trait `PartialOrd<&{integer}>` is not implemented for `{integer}`\n   =\
    \ help: the following other types implement trait `PartialOrd<Rhs>`:\n       \
    \      f32\n             f64\n             i128\n             i16\n          \
    \   i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n\nerror[E0277]: can't compare `&{integer}` with `{integer}`\n  -->\
    \ /tmp/tmpm_o4iclc.rs:28:35\n   |\n28 |     num_buzz.iter().filter(|&n| n == 7).count();\n\
    \   |                                   ^^ no implementation for `&{integer} ==\
    \ {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&{integer}`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n --> /tmp/tmpm_o4iclc.rs:8:27\n\
    \  |\n8 | fn fizz_buzz(n: isize) -> isiz"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ The first if statement checks the base cases. fizzbuzz(0) returns 0, fizzbuzz(1)\
    \ returns 1,\n    // and fizzbuzz(2) returns 2, fizzbuzz(3) returns 3, etc.\n\
    \    // The second if statement checks the remainder of the cases. fizzbuzz(50)\
    \ returns 0, fizzbuzz(75)\n    // returns 1, and fizzbuzz(99) returns 2, fizzbuzz(100)\
    \ returns 3, etc.\n    if n < 0 || n % 11 == 0 {\n        0\n    } else if n %\
    \ 13 == 0 {\n        1\n    } else {\n        2\n    }\n}\n\nfn main() {\n   \
    \ let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpsslcut4g.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ Check if n is divisible by 11 or 13\n    if n % 11 == 0 || n % 13 == 0 {\n \
    \       0\n    } else {\n        1\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0sars752.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    let mut digit = 0;\n\n    loop {\n        if n % 10 ==\
    \ digit {\n            counter += 1;\n        }\n        if n % 10 == 7 {\n  \
    \          digit += 11;\n        } else {\n            digit += 13;\n        }\n\
    \        n /= 10;\n    }\n    counter\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "warning: unreachable expression\n  --> /tmp/tmpham91s0o.rs:23:5\n   |\n\
    12 | /     loop {\n13 | |         if n % 10 == digit {\n14 | |             counter\
    \ += 1;\n15 | |         }\n...  |\n21 | |         n /= 10;\n22 | |     }\n   |\
    \ |_____- any code following this expression is unreachable\n23 |       counter\n\
    \   |       ^^^^^^^ unreachable expression\n   |\n   = note: `#[warn(unreachable_code)]`\
    \ on by default\n\nwarning: variable `counter` is assigned to, but never used\n\
    \ --> /tmp/tmpham91s0o.rs:9:13\n  |\n9 |     let mut counter = 0;\n  |       \
    \      ^^^^^^^\n  |\n  = note: `#[warn(unused_variables)]` on by default\n  =\
    \ note: consider using `_counter` instead\n\nerror[E0384]: cannot assign to immutable\
    \ argument `n`\n  --> /tmp/tmpham91s0o.rs:21:9\n   |\n8  | fn fizz_buzz(n: isize)\
    \ -> isize {\n   |              - help: consider making this binding mutable:\
    \ `mut n`\n...\n21 |         n /= 10;\n   |         ^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 2 warnings emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n <= 0 || n % 11 == 0 || n % 13 == 0 {\n        return n;\n    }\n\n    let\
    \ mut count = 0;\n    let mut divisor = n as usize;\n\n    while divisor > 1 {\n\
    \        if n / divisor == 7 {\n            count += 1;\n        }\n        divisor\
    \ /= 10;\n    }\n\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpahuuvdl0.rs:17:16\n   |\n\
    17 |         if n / divisor == 7 {\n   |                ^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot divide `isize` by `usize`\n  --> /tmp/tmpahuuvdl0.rs:17:14\n\
    \   |\n17 |         if n / divisor == 7 {\n   |              ^ no implementation\
    \ for `isize / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|&i|\
    \ i / 11 == 0 || i / 13 == 0).count()\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmps49rkm3v.rs:9:5\n  |\n8 |\
    \ fn fizz_buzz(n: isize) -> isize {\n  |                           ----- expected\
    \ `isize` because of return type\n9 |     (1..n).filter(|&i| i / 11 == 0 || i\
    \ / 13 == 0).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (1..n).filter(|&i|\
    \ i / 11 == 0 || i / 13 == 0).count().try_into().unwrap()\n  |               \
    \                                            ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    loop {\n        if n % 11 == 0 || n % 13 == 0 {\n      \
    \      count += 1;\n        }\n        n /= 10;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "warning: unreachable expression\n  --> /tmp/tmp94epknei.rs:16:5\n   |\n\
    10 | /     loop {\n11 | |         if n % 11 == 0 || n % 13 == 0 {\n12 | |    \
    \         count += 1;\n13 | |         }\n14 | |         n /= 10;\n15 | |     }\n\
    \   | |_____- any code following this expression is unreachable\n16 |       count\n\
    \   |       ^^^^^ unreachable expression\n   |\n   = note: `#[warn(unreachable_code)]`\
    \ on by default\n\nwarning: variable `count` is assigned to, but never used\n\
    \ --> /tmp/tmp94epknei.rs:9:13\n  |\n9 |     let mut count = 0;\n  |         \
    \    ^^^^^\n  |\n  = note: `#[warn(unused_variables)]` on by default\n  = note:\
    \ consider using `_count` instead\n\nerror[E0384]: cannot assign to immutable\
    \ argument `n`\n  --> /tmp/tmp94epknei.rs:14:9\n   |\n8  | fn fizz_buzz(n: isize)\
    \ -> isize {\n   |              - help: consider making this binding mutable:\
    \ `mut n`\n...\n14 |         n /= 10;\n   |         ^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 2 warnings emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for d in 0..n {\n        if n % 11 == 0 ||\n           \
    \ n % 13 == 0 ||\n            (n % 10 == 0 && n % 7 == 0) ||\n            n %\
    \ 10 == 0 &&\n            n % 7 == 0 &&\n            n % 7 != 0 {\n          \
    \  count += 1;\n        }\n        n /= 10;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "warning: unused variable: `d`\n  --> /tmp/tmpzygfmw2a.rs:10:9\n   |\n10\
    \ |     for d in 0..n {\n   |         ^ help: if this is intentional, prefix it\
    \ with an underscore: `_d`\n   |\n   = note: `#[warn(unused_variables)]` on by\
    \ default\n\nerror[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpzygfmw2a.rs:19:9\n\
    \   |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n19 |         n /= 10;\n   |     \
    \    ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ Base case: n <= 0\n    if n < 0 {\n        return 0;\n    }\n\n    // Base case:\
    \ n is divisible by 11 or 13\n    if n % 11 == 13 && n % 13 == 0 {\n        return\
    \ 0;\n    }\n\n    // Base case: n is divisible by 11\n    if n % 11 == 0 {\n\
    \        return 1;\n    }\n\n    // Base case: n is divisible by 13\n    if n\
    \ % 13 == 0 {\n        return 2;\n    }\n\n    // The fizz_buzz algorithm works\
    \ by considering all of the numbers less than or equal to n, and seeing if any\
    \ of them are divisible by 11 or 13. If they are, add one to the counter and move\
    \ on to the next number. If they aren't, move on to the next number until they\
    \ either hit a number divisible by 11 or 13.\n    // When we hit a number divisible\
    \ by 11 or 13, we've either hit the base case, or we hit a number which is divisible\
    \ by both 11 and 13. If we hit a number divisible by both, then we're done.\n\n\
    \    // Base case: n is divisible by 11 or 13 AND n >= 10\n    if n % 11 == 13\
    \ && n % 13 == 0 && n % 10 == 0 {\n        return 0;\n    }\n\n    // Base case:\
    \ n is divisible by 11 or 13\n    if n % 11 == 13 && n % 13 == 0 {\n        return\
    \ 1;\n    }\n\n    // Base case: n is divisible by 11\n    if n % 11 == 0 {\n\
    \        return 2;\n    }\n\n    // Base case: n is divisible by 13\n    if n\
    \ % 13 == 0 {\n        return 3;\n    }\n\n    // The fizz_buzz algorithm works\
    \ by considering all of the numbers less than or equal to n, and seeing if any\
    \ of them are divisible by 11 or 13. If they are, add one to the counter and move\
    \ on to the next number. If they aren't, move on to the next number until they\
    \ either hit a number divisible by 11 or 13.\n    // When we hit a number divisible\
    \ by 11 or 13, we've either hit the base case, or we hit a number which is divisible\
    \ by both 11 and 13. If we hit a number divisible by both, then we're done.\n\n\
    \    // Base case: n is divisible by 11 or 13 AND n >= 10\n    if n % 11 == 13\
    \ && n % 13 == 0 && n % 10 == 0 {\n        return 0;\n    }\n\n    // Base case:\
    \ n is divisible by 11 or 13\n    if n % 11 == 13 && n % 13 == 0 {\n        return\
    \ 1;\n    }\n\n    // Base case: n is divisible by 11\n    if n % 11 == 0 {\n\
    \        return 2;\n\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpy1kox6gn.rs:81:3\n\
    \   |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |                          \
    \       - unclosed delimiter\n...\n66 |     if n % 11 == 0 {\n   |           \
    \         - this delimiter might not be properly closed...\n...\n69 | }\n   |\
    \ - ...as it matches this but it has different indentation\n...\n81 | }\n   |\
    \   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpy1kox6gn.rs:8:27\n  |\n\
    8 | fn fizz_buzz(n: isize) -> isize {\n  |    ---------              ^^^^^ expected\
    \ `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 {\n        n / 11\n    } else if n % 13 == 0 {\n        n / 13\n\
    \    } else {\n        n\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `0`', /tmp/tmp4tz1kpht.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    debug_assert!(n\
    \ % 11 == 0 || n % 13 == 0);\n    if n % 11 == 0 {\n        7\n    } else {\n\
    \        n % 11\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n   \
    \ assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: n % 11 == 0 || n % 13 == 0',\
    \ /tmp/tmpn2xilqjg.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n\n    // Count number of integers less than n which are divisible\
    \ by 11 or 13\n    for num in 0..n + 1 {\n        if num % 11 == 0 || num % 13\
    \ == 0 {\n            count += 1;\n        }\n    }\n\n    // Return count if\
    \ n is divisible by 11 or 13\n    count + if n % 11 == 0 || n % 13 == 0 {\n  \
    \      1\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `0`', /tmp/tmpcdo0s6p8.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 { // 1\n        return 1;\n\
    \    }\n    if n % 11 == 0 || n % 13 == 0 {\n        return fizz_buzz(n - 1)\n\
    \    }\n    return fizz_buzz(n - 1) + 1\n}\n\nfn main() {\n    let candidate =\
    \ fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `43`,\n right: `0`', /tmp/tmpjgh4ih5b.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    n\
    \ / 11 * 11 + n % 11 % 13\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `0`', /tmp/tmpzgxu0vpn.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    while n >= 10 {\n        if n % 10 == 7 {\n          \
    \  counter += 1;\n        }\n        n /= 10;\n    }\n    n += counter;\n    n\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp89jrs_kz.rs:14:9\n\
    \   |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n14 |         n /= 10;\n   |     \
    \    ^^^^^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot assign\
    \ to immutable argument `n`\n  --> /tmp/tmp89jrs_kz.rs:16:5\n   |\n8  | fn fizz_buzz(n:\
    \ isize) -> isize {\n   |              - help: consider making this binding mutable:\
    \ `mut n`\n...\n16 |     n += counter;\n   |     ^^^^^^^^^^^^ cannot assign to\
    \ immutable argument\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n % 11 == 0 || n % 13 == 0 {\n  \
    \      return 0;\n    }\n    if n % 7 == 0 {\n        return 1;\n    }\n    fizz_buzz(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp2gjqfvnv.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n < 11 || n % 11 == 0 {\n        n\n    } else {\n        (n - 11) / 13 + 2\n\
    \    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `0`', /tmp/tmpc_qzxjbf.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ Find number of times 7 appears within n which are divisible by 11 or 13.\n \
    \   let mut number = 0usize;\n    for d in n.digits() {\n        if d % 11 ==\
    \ 0 && d % 13 == 0 {\n            number += 1;\n        }\n    }\n    return number\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp4qp7y1n4.rs:11:16\n   |\n11 |     for d in n.digits() {\n\
    \   |                ^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4qp7y1n4.rs:16:12\n   |\n8  | fn fizz_buzz(n: isize) ->\
    \ isize {\n   |                           ----- expected `isize` because of return\
    \ type\n...\n16 |     return number\n   |            ^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |     return number.try_into().unwrap()\n\
    \   |                  ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    fn\
    \ divisible_by(b: isize) -> bool {\n        n % b == 0 && b != 11 && b != 13\n\
    \    }\n\n    if n >= 1000 && divisible_by(11) && divisible_by(13) {\n       \
    \ return n\n    }\n\n    if n % 7 == 0 {\n        if divisible_by(11) {\n    \
    \        return n - 7\n        }\n        return n - 6\n    }\n\n    if divisible_by(11)\
    \ && n % 11 == 0 {\n        return n - 11\n    }\n\n    if divisible_by(13) &&\
    \ n % 13 == 0 {\n        return n - 13\n    }\n\n    n\n}\n\nfn main() {\n   \
    \ let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0434]: can't capture dynamic environment in a fn item\n  --> /tmp/tmpieje_ybj.rs:10:9\n\
    \   |\n10 |         n % b == 0 && b != 11 && b != 13\n   |         ^\n   |\n \
    \  = help: use the `|| { ... }` closure form instead\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0434`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (0..n).filter(|i|\
    \ i % 11 == 0 || i % 13 == 0).count()\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4re3aoj3.rs:9:5\n  |\n8 |\
    \ fn fizz_buzz(n: isize) -> isize {\n  |                           ----- expected\
    \ `isize` because of return type\n9 |     (0..n).filter(|i| i % 11 == 0 || i %\
    \ 13 == 0).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (0..n).filter(|i|\
    \ i % 11 == 0 || i % 13 == 0).count().try_into().unwrap()\n  |               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (0..n).filter(|x|\
    \ x.is_multiple_of(11) || x.is_multiple_of(13))\n        .count(|&x| x.digit(7)\
    \ == 1)\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_multiple_of` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmpj8rdwa0s.rs:9:25\n  |\n9 |     (0..n).filter(|x|\
    \ x.is_multiple_of(11) || x.is_multiple_of(13))\n  |                         ^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `next_multiple_of`\n\
    \nerror[E0599]: no method named `is_multiple_of` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmpj8rdwa0s.rs:9:49\n  |\n9 |     (0..n).filter(|x|\
    \ x.is_multiple_of(11) || x.is_multiple_of(13))\n  |                         \
    \                        ^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `next_multiple_of`\n\nerror[E0061]: this function takes\
    \ 0 arguments but 1 argument was supplied\n   --> /tmp/tmpj8rdwa0s.rs:10:10\n\
    \    |\n10  |         .count(|&x| x.digit(7) == 1)\n    |          ^^^^^ --------------------\
    \ supplied 1 argument\n    |          |\n    |          expected 0 arguments\n\
    \    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpj8rdwa0s.rs:9:5\n   |\n8  |   fn fizz_buzz(n: isize) -> isize {\n\
    \   |                             ----- expected `isize` because of return type\n\
    9  | /     (0..n).filter(|x| x.is_multiple_of(11) || x.is_multiple_of(13))\n10\
    \ | |         .count(|&x| x.digit(7) == 1)\n   | |____________________________________^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |         .count(|&x|\
    \ x.digit(7) == 1).try_into().unwrap()\n   |                                 \
    \    ++++++++++++++++++++\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0061, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    use\
    \ std::cmp::Ordering;\n\n    let mut nfizzbuzzes = 1;\n    while n > 0 {\n   \
    \     if n % 11 == 0 {\n            nfizzbuzzes += 1;\n        }\n        if n\
    \ % 13 == 0 {\n            nfizzbuzzes += 1;\n        }\n        n /= 10;\n  \
    \  }\n    nfizzbuzzes\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::cmp::Ordering`\n --> /tmp/tmpn9hc21ck.rs:9:9\n\
    \  |\n9 |     use std::cmp::Ordering;\n  |         ^^^^^^^^^^^^^^^^^^\n  |\n \
    \ = note: `#[warn(unused_imports)]` on by default\n\nerror[E0384]: cannot assign\
    \ to immutable argument `n`\n  --> /tmp/tmpn9hc21ck.rs:19:9\n   |\n8  | fn fizz_buzz(n:\
    \ isize) -> isize {\n   |              - help: consider making this binding mutable:\
    \ `mut n`\n...\n19 |         n /= 10;\n   |         ^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut fizz = 0;\n    let mut buzz = 0;\n    while n > 0 {\n        let d = n %\
    \ 10;\n        if d == 7 {\n            buzz += 1;\n            n /= 10;\n   \
    \     } else if d == 3 && n % 10 == 7 { //check if n is a multiple of 11 or 13\n\
    \            fizz += 1;\n            n /= 10;\n        } else {\n            n\
    \ /= 10;\n        }\n    }\n    fizz + buzz\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp1lofyhwc.rs:15:13\n\
    \   |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n15 |             n /= 10;\n   | \
    \            ^^^^^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot\
    \ assign to immutable argument `n`\n  --> /tmp/tmp1lofyhwc.rs:18:13\n   |\n8 \
    \ | fn fizz_buzz(n: isize) -> isize {\n   |              - help: consider making\
    \ this binding mutable: `mut n`\n...\n18 |             n /= 10;\n   |        \
    \     ^^^^^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot assign\
    \ to immutable argument `n`\n  --> /tmp/tmp1lofyhwc.rs:20:13\n   |\n8  | fn fizz_buzz(n:\
    \ isize) -> isize {\n   |              - help: consider making this binding mutable:\
    \ `mut n`\n...\n20 |             n /= 10;\n   |             ^^^^^^^ cannot assign\
    \ to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        n\n    } else {\n        match n % 11\
    \ {\n            0 => 4,\n            _ => n,\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `0`', /tmp/tmp2sdrbzn8.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 {\n        0 + (n % 11)\n    } else if n % 13 == 0 {\n        1\
    \ + (n % 13)\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmppko2i42t.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|x|\
    \ x % 11 == 0 || x % 13 == 0).count()\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvw0q8j8s.rs:9:5\n  |\n8 |\
    \ fn fizz_buzz(n: isize) -> isize {\n  |                           ----- expected\
    \ `isize` because of return type\n9 |     (1..n).filter(|x| x % 11 == 0 || x %\
    \ 13 == 0).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (1..n).filter(|x|\
    \ x % 11 == 0 || x % 13 == 0).count().try_into().unwrap()\n  |               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    let mut count = 0;\n    while n % 11\
    \ == 0 {\n        n /= 11;\n        count += 1;\n    }\n    if n % 13 == 0 {\n\
    \        n /= 13;\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n \
    \   let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "warning: value assigned to `n` is never read\n  --> /tmp/tmp0glhr122.rs:18:9\n\
    \   |\n18 |         n /= 13;\n   |         ^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmp0glhr122.rs:14:9\n  \
    \ |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n14 |         n /= 11;\n   |     \
    \    ^^^^^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot assign\
    \ to immutable argument `n`\n  --> /tmp/tmp0glhr122.rs:18:9\n   |\n8  | fn fizz_buzz(n:\
    \ isize) -> isize {\n   |              - help: consider making this binding mutable:\
    \ `mut n`\n...\n18 |         n /= 13;\n   |         ^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\n\
    For more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut num_7 = 0;\n    let mut remain = n;\n    while remain % 11 == 0 || remain\
    \ % 13 == 0 {\n        match remain % 11 {\n            0 => num_7 += 1,\n   \
    \         7 => num_7 += 1,\n            _ => num_7,\n        }\n        remain\
    \ = remain / 10;\n    }\n    num_7\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp1bcoj5oq.rs:15:18\n\
    \   |\n12 | /         match remain % 11 {\n13 | |             0 => num_7 += 1,\n\
    \   | |                  ---------- this is found to be of type `()`\n14 | | \
    \            7 => num_7 += 1,\n   | |                  ---------- this is found\
    \ to be of type `()`\n15 | |             _ => num_7,\n   | |                 \
    \ ^^^^^ expected `()`, found integer\n16 | |         }\n   | |_________- `match`\
    \ arms have incompatible types\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    use\
    \ std::cmp::Ordering;\n\n    if n < 100 {\n        return n;\n    }\n\n    let\
    \ mut i = 0;\n    let mut n2 = n * 2;\n    loop {\n        if n2 % 11 == 0 {\n\
    \            return 2 * i;\n        }\n        if n2 % 13 == 0 {\n           \
    \ return 3 * i + 1;\n        }\n        i += 1;\n        n2 /= 2;\n    }\n}\n\n\
    fn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `0`', /tmp/tmpee7bvdxg.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ Start with 0, since all numbers divisible by 11 must start with a 1.\n    let\
    \ mut counter = 0;\n    let mut last_digit = n % 10;\n    loop {\n        if n\
    \ % 10 == last_digit {\n            counter += 1;\n        }\n        last_digit\
    \ = last_digit % 10 + 11;\n        if last_digit == 11 {\n            last_digit\
    \ = 13;\n        }\n        n /= 10;\n        if n == 0 {\n            break;\n\
    \        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpreo4afgv.rs:20:9\n\
    \   |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n20 |         n /= 10;\n   |     \
    \    ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    let mut i = n as usize;\n    while i != 0 {\n        if\
    \ i % 11 == 0 {\n            counter += 1;\n        } else if i % 13 == 0 {\n\
    \            counter += 3;\n        }\n        i /= 10;\n    }\n    counter\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `2`', /tmp/tmpnu57quw8.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    match\
    \ n % 11 {\n        0 => 1,\n        1 => 11,\n        2 => 21,\n        3 =>\
    \ 31,\n        4 => 41,\n        5 => 51,\n        6 => 61,\n        7 => 71,\n\
    \        8 => 81,\n        9 => 91,\n        10 => 101,\n        _ => n,\n   \
    \ }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `61`,\n right: `0`', /tmp/tmp1zxiorf5.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 1;\n    if n % 11 == 0 {\n        count += 1;\n    }\n    if n %\
    \ 13 == 0 {\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpv8j4_z28.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        0\n    } else {\n        1\n    }\n}\n\
    \nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9esgs93f.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut nn = n;\n\n    loop {\n        match nn % 11 {\n            0 => return\
    \ nn - 11,\n            _ => nn = nn % 13,\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-11`,\n right: `2`', /tmp/tmphbv_ghsz.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    debug_assert!(n\
    \ % 11 == 0);\n    debug_assert!(n % 13 == 0);\n\n    let mut cnt = 0;\n\n   \
    \ for num in 1..=n {\n        let mut digit = num % 10;\n\n        if digit ==\
    \ 7 { cnt += 1 }\n        if digit == 3 { cnt += 1 }\n        if digit == 5 {\
    \ cnt += 2 }\n        if digit == 9 { cnt += 2 }\n        if digit == 1 { cnt\
    \ += 3 }\n        if digit == 0 { cnt += 3 }\n    }\n\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: n % 11 == 0', /tmp/tmp0pyy9wke.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut result = n;\n    for &n in &mut result {\n        if n % 11 == 0 || n %\
    \ 13 == 0 {\n            n /= 13;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `isize` is not an iterator\n  --> /tmp/tmp5z4u6p5t.rs:10:15\n\
    \   |\n10 |     for &n in &mut result {\n   |               ^^^^^^^^^^^ `isize`\
    \ is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `isize`\n   = note: if you want to iterate between `start` until a value\
    \ `end`, use the exclusive range syntax `start..end` or the inclusive range syntax\
    \ `start..=end`\n   = note: required because of the requirements on the impl of\
    \ `Iterator` for `&mut isize`\n   = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `&mut isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (n\
    \ - 11) / 13.0\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n --> /tmp/tmpip6itlh0.rs:9:14\n\
    \  |\n9 |     (n - 11) / 13.0\n  |              ^ no implementation for `isize\
    \ / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented for `isize`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = n;\n    while counter > 0 {\n        let mut x = counter;\n  \
    \      counter -= (x % 11);\n        counter -= (x % 13);\n        counter -=\
    \ (x % 7);\n        counter /= 7;\n    }\n    counter\n}\n\nfn main() {\n    let\
    \ candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `0`', /tmp/tmp4up_1sh8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n < 11 {\n        return n;\n    }\n\n    if n % 11 == 0 {\n        return fizz_buzz(n\
    \ / 11);\n    }\n\n    if n % 13 == 0 {\n        return fizz_buzz(n / 13);\n \
    \   }\n\n    n - 11\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `39`,\n right: `0`', /tmp/tmpo2avzfvu.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 && (n % 13 == 0 || n % 11 == 13) {\n        0\n    } else {\n  \
    \      1 + fizz_buzz(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `25`,\n right: `0`', /tmp/tmp7j33ay8p.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (n\
    \ / 11).checked_mul(11).ok_or(err_msg!(\"fizzbuzz not implemented; n={}\", n))\n\
    \        .checked_mul(13).ok_or(err_msg!(\"fizzbuzz not implemented; n={}\", n))\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error: cannot find macro `err_msg` in this scope\n --> /tmp/tmpfgyn38ue.rs:9:36\n\
    \  |\n9 |     (n / 11).checked_mul(11).ok_or(err_msg!(\"fizzbuzz not implemented;\
    \ n={}\", n))\n  |                                    ^^^^^^^\n\nerror: cannot\
    \ find macro `err_msg` in this scope\n  --> /tmp/tmpfgyn38ue.rs:10:32\n   |\n\
    10 |         .checked_mul(13).ok_or(err_msg!(\"fizzbuzz not implemented; n={}\"\
    , n))\n   |                                ^^^^^^^\n\nerror[E0599]: no method\
    \ named `checked_mul` found for enum `Result` in the current scope\n  --> /tmp/tmpfgyn38ue.rs:10:10\n\
    \   |\n10 |         .checked_mul(13).ok_or(err_msg!(\"fizzbuzz not implemented;\
    \ n={}\", n))\n   |          ^^^^^^^^^^^ method not found in `Result<isize, _>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (0..=n).filter(|x|x%11\
    \ == 0 || x%13 == 0).count() as isize\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `0`', /tmp/tmpljdgjvqh.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    match\
    \ n % 11 {\n        0 => 0,\n        1 => 1,\n        2 => 1,\n        _ => 2,\n\
    \    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp8mg61l98.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        0\n    } else {\n        1 + fizz_buzz(n\
    \ - 11) / 13\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_d8cz95s.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    while n > 0 {\n        if n % 11 == 0 || n % 13 == 0 {\n\
    \            counter = counter + 1;\n        }\n        n = n / 10;\n    }\n \
    \   counter\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpgk7zmvow.rs:14:9\n\
    \   |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n14 |         n = n / 10;\n   |  \
    \       ^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|i|\
    \ i % 11 == 0).filter(|i| i % 13 == 0).count()\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc0nd6rxr.rs:9:5\n  |\n8 |\
    \ fn fizz_buzz(n: isize) -> isize {\n  |                           ----- expected\
    \ `isize` because of return type\n9 |     (1..n).filter(|i| i % 11 == 0).filter(|i|\
    \ i % 13 == 0).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (1..n).filter(|i|\
    \ i % 11 == 0).filter(|i| i % 13 == 0).count().try_into().unwrap()\n  |      \
    \                                                             ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n < 100 {\n        if n % 11 == 0 {\n            return n + 1;\n        }\n\
    \        if n % 13 == 0 {\n            return n + 2;\n        }\n    }\n    if\
    \ n < 1000 {\n        if n % 7 == 0 {\n            return n + 1;\n        }\n\
    \        if n % 13 == 0 {\n            return n + 2;\n        }\n    }\n    n\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `0`', /tmp/tmp561qvitg.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n < 11 || n % 11 == 0 || n % 13 == 0 {\n        n\n    } else {\n        fizz_buzz(n\
    \ - 11) + fizz_buzz(n - 13)\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `0`', /tmp/tmpu0mc3400.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n == 0 || n % 11 == 0 || n % 13 == 0 {\n        return 0;\n    }\n\n    // find\
    \ remainder of division by 11\n    let mut remainder = n / 11;\n    let mut remainder_n\
    \ = n % 11;\n\n    // find remainder of division by 13\n    if remainder_n % 13\
    \ == 0 {\n        remainder_n /= 13;\n    }\n\n    return remainder + remainder_n;\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `0`', /tmp/tmps250l30p.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut nums = n.to_string();\n    loop {\n        let mut i = nums.find('7').unwrap();\n\
    \        if i > 0 {\n            nums = &nums[..i];\n        } else {\n      \
    \      break;\n        }\n    }\n    let mut ans: isize = 0;\n    for i in nums.chars().filter(|&c|\
    \ c != '0') {\n        ans += i % 11 == 0 || i % 13 == 0 ? 1 : 0; // if it's a\
    \ multiple of 11 or 13, it's counted as 1\n    }\n    ans\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1`\n\
    \  --> /tmp/tmp4fmhfjmu.rs:20:45\n   |\n20 |         ans += i % 11 == 0 || i %\
    \ 13 == 0 ? 1 : 0; // if it's a multiple of 11 or 13, it's counted as 1\n   |\
    \                                             ^ expected one of `.`, `;`, `?`,\
    \ `}`, or an operator\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4fmhfjmu.rs:13:20\n\
    \   |\n9  |     let mut nums = n.to_string();\n   |                    -------------\
    \ expected due to this value\n...\n13 |             nums = &nums[..i];\n   | \
    \                   ^^^^^^^^^^ expected struct `String`, found `&str`\n   |\n\
    help: try using a conversion method\n   |\n13 |             nums = (&nums[..i]).to_string();\n\
    \   |                    +          +++++++++++++\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 { 1 }\n    else if n % 13 == 0 { 2 }\n    else { 0 }\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `3`', /tmp/tmpurwwn3hf.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    match\
    \ n % 11 {\n        0 => 0,\n        1 => 1,\n        2 => 1,\n        3 => 2,\n\
    \        4 => 3,\n        5 => 3,\n        6 => 4,\n        7 => 5,\n        8\
    \ => 5,\n        9 => 6,\n        10 => 6,\n        _ => 0,\n    }\n    match\
    \ n % 13 {\n        0 => 0,\n        1 => 1,\n        2 => 1,\n        3 => 2,\n\
    \        4 => 3,\n        5 => 3,\n        6 => 4,\n        7 => 5,\n        8\
    \ => 5,\n        9 => 6,\n        10 => 6,\n        _ => 0,\n    }\n    (n + 2)\
    \ % 11 + n\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmparmvhphm.rs:9:5\n   |\n9\
    \  | /     match n % 11 {\n10 | |         0 => 0,\n11 | |         1 => 1,\n12\
    \ | |         2 => 1,\n...  |\n21 | |         _ => 0,\n22 | |     }\n   | |  \
    \   ^- help: consider using a semicolon here\n   | |_____|\n   |       expected\
    \ `()`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmparmvhphm.rs:23:5\n\
    \   |\n23 | /     match n % 13 {\n24 | |         0 => 0,\n25 | |         1 =>\
    \ 1,\n26 | |         2 => 1,\n...  |\n35 | |         _ => 0,\n36 | |     }\n \
    \  | |     ^- help: consider using a semicolon here\n   | |_____|\n   |      \
    \ expected `()`, found integer\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    loop\
    \ {\n        if n % 11 == 0 || (n % 13 == 0 && n % 11 != 0) || n == 0 {\n    \
    \        return n + 1;\n        }\n        n /= 13;\n    }\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpr_xvqjgh.rs:13:9\n\
    \   |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n13 |         n /= 13;\n   |     \
    \    ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (n\
    \ / 13) + n % 13 == 0 ? 0 : fizz_buzz(n % 13) + fizz_buzz(n % 11) + 1;\n}\n\n\
    fn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `0`\n\
    \ --> /tmp/tmpmbfdubqh.rs:9:30\n  |\n9 |     (n / 13) + n % 13 == 0 ? 0 : fizz_buzz(n\
    \ % 13) + fizz_buzz(n % 11) + 1;\n  |                              ^ expected\
    \ one of `.`, `;`, `?`, `}`, or an operator\n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    n.checked_mul(11).checked_mul(13).is_ok()\n\
    \        .and_then(rt => rt.checked_mul(11).checked_mul(13).is_ok())\n       \
    \ .map(|rt| rt.is_ok()).unwrap_or(0)\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator,\
    \ found `=>`\n  --> /tmp/tmpfsfxufhg.rs:10:22\n   |\n10 |         .and_then(rt\
    \ => rt.checked_mul(11).checked_mul(13).is_ok())\n   |                      ^^\
    \ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        return 0;\n    }\n\n    match n % 7 {\n\
    \        0 => 1,\n        1 => 1,\n        _ => 2,\n    }\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpzje25u8k.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (1..=n).filter(|i|\
    \ {\n        if i / 11 == 0 || i / 13 == 0 {\n            true\n        } else\
    \ {\n            i % 11 == 0 || i % 13 == 0\n        }\n    }).count()\n}\n\n\
    fn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbexawg0n.rs:9:5\n   |\n8\
    \  |   fn fizz_buzz(n: isize) -> isize {\n   |                             -----\
    \ expected `isize` because of return type\n9  | /     (1..=n).filter(|i| {\n10\
    \ | |         if i / 11 == 0 || i / 13 == 0 {\n11 | |             true\n12 | |\
    \         } else {\n13 | |             i % 11 == 0 || i % 13 == 0\n14 | |    \
    \     }\n15 | |     }).count()\n   | |______________^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n15 |     }).count().try_into().unwrap()\n\
    \   |               ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    n.checked_mul(11).floor()\
    \ as usize + n.checked_mul(13).floor() as usize\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `floor` found for enum `Option` in the current\
    \ scope\n --> /tmp/tmpq8f4rt1f.rs:9:23\n  |\n9 |     n.checked_mul(11).floor()\
    \ as usize + n.checked_mul(13).floor() as usize\n  |                       ^^^^^\
    \ method not found in `Option<isize>`\n\nerror[E0599]: no method named `floor`\
    \ found for enum `Option` in the current scope\n --> /tmp/tmpq8f4rt1f.rs:9:60\n\
    \  |\n9 |     n.checked_mul(11).floor() as usize + n.checked_mul(13).floor() as\
    \ usize\n  |                                                            ^^^^^\
    \ method not found in `Option<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    while n >= 11 {\n        if n % 11 == 0 || n % 13 == 0 {\n\
    \            count += 1\n        }\n        n /= 11\n    }\n    return count\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp6_11zh8r.rs:14:9\n\
    \   |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n14 |         n /= 11\n   |      \
    \   ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    while n > 0 {\n        if n % 11 == 0 || n % 13 == 0 {\n\
    \            counter = counter + 1;\n        }\n        n = n / 10;\n    }\n \
    \   counter\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp0s3x8x92.rs:14:9\n\
    \   |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n14 |         n = n / 10;\n   |  \
    \       ^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        0\n    } else {\n        n + 1\n    }\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `51`,\n right: `0`', /tmp/tmp6khygik9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 1..=n {\n        if i %11 == 0 { count+=1 }\n \
    \       if i %13 == 0 { count+=1 }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmp6_yn1tnv.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        0\n    } else {\n        1\n    }\n}\n\
    \nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpljjw7n57.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    for n in n.rev() {\n        if n % 11 == 0 || n % 13 ==\
    \ 0 {\n            counter += 1;\n        }\n    }\n    counter\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: `isize` is not an iterator\n  --> /tmp/tmpnfcghjze.rs:10:16\n\
    \   |\n10 |     for n in n.rev() {\n   |                ^^^ `isize` is not an\
    \ iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `isize: Iterator`\n           which is required by `&mut isize: Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    match\
    \ (n % 11, n % 13) {\n        ((a, b), 0) => (a / 11 + b / 13) * 11 + 7 * 13,\n\
    \        ((a, b), 1) => (a / 13 + b / 11) * 13 + 7 * 11,\n        ((a, b), 2)\
    \ => (a / 13 + b / 13 + 7) / 11 * 11 + 7 * 13,\n        ((a, b), 3) => (a / 13\
    \ + b / 13 + 7) / 13 * 13 + 7 * 11,\n        ((a, b), 4) => a / 11 + b / 13 +\
    \ 7 * 13 + 7,\n        ((a, b), 5) => a / 13 + b / 11 + 7 * 11 + 7,\n        ((a,\
    \ b), 6) => a / 13 + b / 13 + 7 + 7,\n        ((a, b), 7) => a / 11 + b + 7,\n\
    \        _ => n,\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n  \
    \  assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmparakop1q.rs:10:10\n   |\n\
    9  |     match (n % 11, n % 13) {\n   |           ---------------- this expression\
    \ has type `(isize, isize)`\n10 |         ((a, b), 0) => (a / 11 + b / 13) * 11\
    \ + 7 * 13,\n   |          ^^^^^^ expected `isize`, found tuple\n   |\n   = note:\
    \ expected type `isize`\n             found tuple `(_, _)`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmparakop1q.rs:11:10\n   |\n9  |     match (n % 11, n % 13)\
    \ {\n   |           ---------------- this expression has type `(isize, isize)`\n\
    10 |         ((a, b), 0) => (a / 11 + b / 13) * 11 + 7 * 13,\n11 |         ((a,\
    \ b), 1) => (a / 13 + b / 11) * 13 + 7 * 11,\n   |          ^^^^^^ expected `isize`,\
    \ found tuple\n   |\n   = note: expected type `isize`\n             found tuple\
    \ `(_, _)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmparakop1q.rs:12:10\n\
    \   |\n9  |     match (n % 11, n % 13) {\n   |           ---------------- this\
    \ expression has type `(isize, isize)`\n...\n12 |         ((a, b), 2) => (a /\
    \ 13 + b / 13 + 7) / 11 * 11 + 7 * 13,\n   |          ^^^^^^ expected `isize`,\
    \ found tuple\n   |\n   = note: expected type `isize`\n             found tuple\
    \ `(_, _)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmparakop1q.rs:13:10\n\
    \   |\n9  |     match (n % 11, n % 13) {\n   |           ---------------- this\
    \ expression has type `(isize, isize)`\n...\n13 |         ((a, b), 3) => (a /\
    \ 13 + b / 13 + 7) / 13 * 13 + 7 * 11,\n   |          ^^^^^^ expected `isize`,\
    \ found tuple\n   |\n   = note: expected type `isize`\n             found tuple\
    \ `(_, _)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmparakop1q.rs:14:10\n\
    \   |\n9  |     match (n % 11, n % 13) {\n   |           ---------------- this\
    \ expression has type `(isize, isize)`\n...\n14 |         ((a, b), 4) => a / 11\
    \ + b / 13 + 7 * 13 + 7,\n   |          ^^^^^^ expected `isize`, found tuple\n\
    \   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmparakop1q.rs:15:10\n   |\n9  |  \
    \   match (n % 11, n % 13) {\n   |           ---------------- this expression\
    \ has t"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    debug_assert_eq!(n>0,\
    \ ());\n    debug_assert_eq!(n % 11, 0); // multiple of 11\n    debug_assert_eq!(n\
    \ % 13, 0); // multiple of 13\n    if n%3 == 0 {\n        return n / 3;\n    }\n\
    \    if n%3 == 1 {\n        return fizz_buzz(3 * n + 1);\n    }\n    if n%3 ==\
    \ 2 {\n        return fizz_buzz(2 * n + 1);\n    }\n    if n%3 == 3 {\n      \
    \  return fizz_buzz(2 * n + 1);\n    }\n    if n%3 == 4 {\n        return fizz_buzz(3\
    \ * n + 1);\n    }\n    if n%3 == 0 {\n        return fizz_buzz(3 * n + 1);\n\
    \    }\n    if n%3 == 1 {\n        return fizz_buzz(3 * n + 1);\n    }\n    if\
    \ n%3 == 2 {\n        return fizz_buzz(3 * n + 1);\n    }\n    if n%3 == 3 {\n\
    \        return fizz_buzz(3 * n + 1);\n    }\n    if n%3 == 4 {\n        return\
    \ fizz_buzz(3 * n + 1);\n    }\n    if n%3 == 7 {\n        return fizz_buzz(3\
    \ * n + 2);\n    }\n    if n%3 == 9 {\n        return fizz_buzz(3 * n + 3);\n\
    \    }\n    if n%3 == 15 {\n        return fizz_buzz(3 * n + 5);\n    }\n    if\
    \ n%3 == 21 {\n        return fizz_buzz(3 * n + 7);\n    }\n    if n%3 == 25 {\n\
    \        return fizz_buzz(3 * n + 9);\n    }\n    if n%3 == 31 {\n        return\
    \ fizz_buzz(3 * n + 11);\n    }\n    if n%3 == 35 {\n        return fizz_buzz(3\
    \ * n + 13);\n    }\n    if n%3 == 39 {\n        return fizz_buzz(3 * n + 15);\n\
    \    }\n    if n%3 == 45 {\n        return fizz_buzz(3 * n + 17);\n    }\n   \
    \ if n%3 == 49 {\n        return fizz_buzz(3 * n + 19);\n    }\n    if n%3 ==\
    \ 53 {\n        return fizz_buzz(3 * n + 21);\n    }\n    if n%3 == 59 {\n   \
    \     return fizz_buzz(3 * n + 23);\n    }\n    if n%3 == 65 {\n        return\
    \ fizz_buzz(3 * n + 25);\n    }\n    if n%3 == 69 {\n        return fizz_buzz(3\
    \ * n + 27);\n    }\n    if n%3 == 73 {\n        return fizz_buzz(3 * \n}\n\n\
    fn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpdkaqphqz.rs:98:3\n\
    \   |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |                          \
    \       - unclosed delimiter\n...\n84 |     if n%3 == 73 {\n   |             \
    \     - this delimiter might not be properly closed...\n85 |         return fizz_buzz(3\
    \ * \n86 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n98 | }\n   |   ^\n\nerror: expected expression, found `)`\n  --> /tmp/tmpdkaqphqz.rs:86:1\n\
    \   |\n86 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpdkaqphqz.rs:85:25\n   |\n8  | fn fizz_buzz(n: isize) -> isize\
    \ {\n   |                                 - closing delimiter possibly meant for\
    \ this\n...\n85 |         return fizz_buzz(3 * \n   |                        \
    \ ^ unclosed delimiter\n86 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpdkaqphqz.rs:9:5\n  |\n9 |     debug_assert_eq!(n>0,\
    \ ());\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `()`\n  |\n \
    \ = note: this error originates in the macro `$crate::assert_eq` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpdkaqphqz.rs:8:27\n  |\n8 | fn fizz_buzz(n: isize) -> isize {\n \
    \ |    ---------              ^^^^^ expected `isize`, found `()`\n  |    |\n \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 5 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut num_buzz = 0;\n\n    for n in 1..=n {\n        if n % 11 == 0 || n % 13\
    \ == 0 {\n            num_buzz += 1;\n        }\n    }\n    num_buzz\n}\n\nfn\
    \ main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpbhb6djpo.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        n\n    } else {\n        n - 11\n    }\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `39`,\n right: `0`', /tmp/tmpjwu9yd6o.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    while n > 7 {\n        n /= 7;\n        count += 1;\n  \
    \  }\n    count + fizz_buzz_digits(n % 11).max() + fizz_buzz_digits(n % 13).max()\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fizz_buzz_digits` in this scope\n \
    \ --> /tmp/tmph_h8b2_o.rs:14:13\n   |\n14 |     count + fizz_buzz_digits(n % 11).max()\
    \ + fizz_buzz_digits(n % 13).max()\n   |             ^^^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `fizz_buzz_digits` in this\
    \ scope\n  --> /tmp/tmph_h8b2_o.rs:14:46\n   |\n14 |     count + fizz_buzz_digits(n\
    \ % 11).max() + fizz_buzz_digits(n % 13).max()\n   |                         \
    \                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut nxt: isize = 0;\n    let mut cnt: isize = 0;\n    while nxt < n {\n    \
    \    if n % 11 == 0 { cnt += 1 }\n        if n % 13 == 0 { cnt += 1 }\n      \
    \  nxt += 1;\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `78`,\n right: `2`', /tmp/tmpbjtxt5de.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut fizz = 0;\n    let mut buzz = 0;\n    while n > 0 {\n        fizz = n &\
    \ 3;\n        buzz = n & 7;\n        n /= 11;\n    }\n    fizz + buzz\n}\n\nfn\
    \ main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp3ep31pjv.rs:14:9\n\
    \   |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n14 |         n /= 11;\n   |     \
    \    ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n <= 11 { return 0; }\n    if n % 11 == 13 { return n / 13; }\n    return fizz_buzz(n\
    \ - 11) + 1;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `0`', /tmp/tmpshyxicd8.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut num: usize = 0;\n    for m in 1..=n {\n        if m % 11 == 0 || m % 13\
    \ == 0 {\n            num +=1;\n        }\n    }\n    num\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr7ilei5g.rs:15:5\n   |\n\
    8  | fn fizz_buzz(n: isize) -> isize {\n   |                           ----- expected\
    \ `isize` because of return type\n...\n15 |     num\n   |     ^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n15 |     num.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 && n % 13 == 0 {\n        n / 11\n    } else {\n        n / 10\n\
    \    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `0`', /tmp/tmplo7ng54f.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut n = 0;\n    for i in 0..=n {\n        if n % 11 == 0 ||\n            n %\
    \ 13 == 0 {\n            n += 1;\n        }\n    }\n    n\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpgvx34vc5.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count: isize = 0;\n\n    let div = n.wrapping_div(11);\n    if !div.is_zero()\
    \ {\n        if n % div == 0 {\n            count += 1;\n        }\n    }\n\n\
    \    let div = n.wrapping_div(13);\n    if !div.is_zero() {\n        if n % div\
    \ == 0 {\n            count += 1;\n        }\n    }\n\n    count\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_zero` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpximap2op.rs:12:13\n   |\n12 |     if !div.is_zero() {\n\
    \   |             ^^^^^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `is_zero` found for type `isize` in the current scope\n  --> /tmp/tmpximap2op.rs:19:13\n\
    \   |\n19 |     if !div.is_zero() {\n   |             ^^^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    while n > 0 {\n        if n % 11 == 0 || n % 13 == 0 {\n\
    \            counter += 1;\n        }\n        n /= 10;\n    }\n    counter\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp541mygy2.rs:14:9\n\
    \   |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n14 |         n /= 10;\n   |     \
    \    ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut n = (n as u128) % 11;\n    n += n / 11;\n    n += n % 11;\n    n % 11\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdm_vcslb.rs:12:5\n   |\n\
    8  | fn fizz_buzz(n: isize) -> isize {\n   |                           ----- expected\
    \ `isize` because of return type\n...\n12 |     n % 11\n   |     ^^^^^^ expected\
    \ `isize`, found `u128`\n   |\nhelp: you can convert a `u128` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n12 |     (n % 11).try_into().unwrap()\n\
    \   |     +      +++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (n\
    \ % 11) as isize + (n % 13) as isize\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `0`', /tmp/tmpc9fyn1s7.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut nums = vec![n];\n    let mut counter = 0;\n    while nums.len() > 0 {\n\
    \        counter += 1;\n        if nums.iter().any(|n| *n % 11 == 0 || n % 13\
    \ == 0) {\n            counter -= 1;\n        }\n        nums.dedup();\n    }\n\
    \    counter\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    match\
    \ n {\n        1 => 1,\n        2 => 1,\n        3 | 4 => 1,\n        5 => 1,\n\
    \        6 => 2,\n        7 => 2,\n        8 => 2,\n        9 => 3,\n        10\
    \ => 3,\n        11 => 4,\n        12 => 4,\n        13 => 4,\n        14 => 4,\n\
    \        15 => 5,\n        16 => 5,\n        17 => 5,\n        18 => 6,\n    \
    \    19 => 6,\n        20 => 6,\n        21 => 6,\n        22 => 7,\n        23\
    \ => 7,\n        24 => 7,\n        25 => 7,\n        26 => 7,\n        27 => 7,\n\
    \        28 => 7,\n        29 => 7,\n        30 => 7,\n        31 => 7,\n    \
    \    32 => 8,\n        33 => 8,\n        34 => 8,\n        35 => 8,\n        36\
    \ => 8,\n        37 => 8,\n        38 => 8,\n        39 => 8,\n        40 => 8,\n\
    \        41 => 8,\n        42 => 8,\n        43 => 8,\n        44 => 8,\n    \
    \    45 => 8,\n        46 => 8,\n        47 => 8,\n        48 => 8,\n        49\
    \ => 8,\n        50 => 8,\n        51 => 8,\n        52 => 8,\n        53 => 8,\n\
    \        54 => 8,\n        55 => 8,\n        56 => 8,\n        57 => 8,\n    \
    \    58 => 8,\n        59 => 8,\n        60 => 8,\n        61 => 8,\n        62\
    \ => 8,\n        63 => 8,\n        64 => 8,\n        65 => 8,\n        66 => 8,\n\
    \        67 => 8,\n        68 => 8,\n        69 => 8,\n        70 => 8,\n    \
    \    71 => 8,\n        72 => 8,\n        73 => 8,\n        74 => 8,\n        75\
    \ => 8,\n        76 => 8,\n        77 => 8,\n        78 => 8,\n        79 => 8,\n\
    \        80 => 8,\n        81 => 8,\n        82 => 8,\n        83 => 8,\n    \
    \    84 => 8,\n        85 => 8,\n        86 => 8,\n        87 => 8,\n        88\
    \ => 8,\n        89 => 8,\n        90 => 8,\n        91 => 8,\n        92 => 8,\n\
    \        93 => 8,\n\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpx6i8l0aa.rs:115:3\n\
    \    |\n8   | fn fizz_buzz(n: isize) -> isize {\n    |                       \
    \          - unclosed delimiter\n9   |     match n {\n    |             - this\
    \ delimiter might not be properly closed...\n...\n103 | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n115 | }\n    |   ^\n\nerror[E0308]:\
    \ mismatched types\n   --> /tmp/tmpx6i8l0aa.rs:9:5\n    |\n9   | /     match n\
    \ {\n10  | |         1 => 1,\n11  | |         2 => 1,\n12  | |         3 | 4 =>\
    \ 1,\n...   |\n102 | |\n103 | | }\n    | | ^- help: consider using a semicolon\
    \ here\n    | |_|\n    |   expected `()`, found integer\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpx6i8l0aa.rs:8:27\n  |\n8 | fn fizz_buzz(n: isize) -> isize\
    \ {\n  |    ---------              ^^^^^ expected `isize`, found `()`\n  |   \
    \ |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    debug_assert!(n\
    \ % 11 == 0 || n % 13 == 0);\n    let mut count = 0;\n    for i in (0..n).rev()\
    \ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += 1;\n      \
    \  }\n    }\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n   \
    \ assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: n % 11 == 0 || n % 13 == 0',\
    \ /tmp/tmp4jtvxh_1.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    fn\
    \ is_divisible_by_11(i: isize) -> bool {\n        (i % 11) == 0 && (i % 13) !=\
    \ 0\n    }\n    fn is_divisible_by_13(i: isize) -> bool {\n        (i % 13) ==\
    \ 0 && (i % 11) != 0\n    }\n    fn count_7(i: isize) -> usize {\n        let\
    \ mut count = 0;\n        while is_divisible_by_11(i) {\n            i += 11;\n\
    \            count += 1;\n        }\n        while is_divisible_by_13(i) {\n \
    \           i += 13;\n            count += 1;\n        }\n        count\n    }\n\
    \    count_7(n)\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1_ldt7eh.rs:27:5\n   |\n\
    8  | fn fizz_buzz(n: isize) -> isize {\n   |                           ----- expected\
    \ `isize` because of return type\n...\n27 |     count_7(n)\n   |     ^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n27 |     count_7(n).try_into().unwrap()\n\
    \   |               ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut n = 0;\n    let mut x = n % 11;\n    while x >= 3 {\n        n += 1;\n \
    \       x -= 3;\n    }\n    let mut y = n % 13;\n    while y >= 5 {\n        n\
    \ += 1;\n        y -= 5;\n    }\n    n += 1;\n    x\n}\n\nfn main() {\n    let\
    \ candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `2`', /tmp/tmp3cy2bjp1.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (1..=n).filter(|&n|\
    \ n % 11 == 0).count(|&n| n % 13 == 0) +\n        (1..=n).filter(|&n| n % 11 ==\
    \ 13).count(|&n| n % 13 == 0)\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmp7i88xyvt.rs:9:38\n    |\n9   |     (1..=n).filter(|&n| n % 11\
    \ == 0).count(|&n| n % 13 == 0) +\n    |                                     \
    \ ^^^^^ ---------------- supplied 1 argument\n    |                          \
    \            |\n    |                                      expected 0 arguments\n\
    \    |\nnote: associated function defined here\n\nerror[E0061]: this function\
    \ takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp7i88xyvt.rs:10:43\n\
    \    |\n10  |         (1..=n).filter(|&n| n % 11 == 13).count(|&n| n % 13 == 0)\n\
    \    |                                           ^^^^^ ---------------- supplied\
    \ 1 argument\n    |                                           |\n    |       \
    \                                    expected 0 arguments\n    |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7i88xyvt.rs:9:5\n\
    \   |\n8  |   fn fizz_buzz(n: isize) -> isize {\n   |                        \
    \     ----- expected `isize` because of return type\n9  | /     (1..=n).filter(|&n|\
    \ n % 11 == 0).count(|&n| n % 13 == 0) +\n10 | |         (1..=n).filter(|&n| n\
    \ % 11 == 13).count(|&n| n % 13 == 0)\n   | |_________________________________________________________________^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n9  ~     ((1..=n).filter(|&n|\
    \ n % 11 == 0).count(|&n| n % 13 == 0) +\n10 ~         (1..=n).filter(|&n| n %\
    \ 11 == 13).count(|&n| n % 13 == 0)).try_into().unwrap()\n   |\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        0\n    } else {\n        n % 7 + 1\n \
    \   }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp3mgey01i.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    match\
    \ (n % 11).checked_mul(11) {\n        Some(n) => n - 1,\n        None => n,\n\
    \    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `65`,\n right: `0`', /tmp/tmp37kiq7r_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut i = 0;\n    while i < n {\n        if i % 11 == 0 || i % 13 == 0 {\n   \
    \         i += 1;\n        } else {\n            i += 0;\n        }\n    }\n \
    \   i\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    use\
    \ self::digits::*;\n\n    if n % 11 == 0 {\n        fizzbuzz::fuzz_count(n as\
    \ u32)\n    } else if n % 13 == 0 {\n        fizzbuzz::fizz_count(n as u32)\n\
    \    } else {\n        fizzbuzz::buzz_count(n as u32)\n    }\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0432]: unresolved import `self::digits`\n --> /tmp/tmpv9rtddui.rs:9:15\n\
    \  |\n9 |     use self::digits::*;\n  |               ^^^^^^ maybe a missing crate\
    \ `digits`?\n\nerror[E0433]: failed to resolve: use of undeclared crate or module\
    \ `fizzbuzz`\n  --> /tmp/tmpv9rtddui.rs:12:9\n   |\n12 |         fizzbuzz::fuzz_count(n\
    \ as u32)\n   |         ^^^^^^^^ use of undeclared crate or module `fizzbuzz`\n\
    \nerror[E0433]: failed to resolve: use of undeclared crate or module `fizzbuzz`\n\
    \  --> /tmp/tmpv9rtddui.rs:14:9\n   |\n14 |         fizzbuzz::fizz_count(n as\
    \ u32)\n   |         ^^^^^^^^ use of undeclared crate or module `fizzbuzz`\n\n\
    error[E0433]: failed to resolve: use of undeclared crate or module `fizzbuzz`\n\
    \  --> /tmp/tmpv9rtddui.rs:16:9\n   |\n16 |         fizzbuzz::buzz_count(n as\
    \ u32)\n   |         ^^^^^^^^ use of undeclared crate or module `fizzbuzz`\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0432, E0433.\nFor more information about an error, try `rustc --explain E0432`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (n\
    \ / 11) + (n / 13) as usize\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcxo7hchm.rs:9:16\n  |\n9 |\
    \     (n / 11) + (n / 13) as usize\n  |                ^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot add `usize` to `isize`\n -->\
    \ /tmp/tmpcxo7hchm.rs:9:14\n  |\n9 |     (n / 11) + (n / 13) as usize\n  |   \
    \           ^ no implementation for `isize + usize`\n  |\n  = help: the trait\
    \ `Add<usize>` is not implemented for `isize`\n  = help: the following other types\
    \ implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n           \
    \ <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a\
    \ i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a i64 as\
    \ Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n\
    \          and 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (0..n).filter(|&d|\
    \ {\n        // if d is divisible by 11 or 13, the number is divisible by 11\n\
    \        if d % 11 == 0 || d % 13 == 0 {\n            true\n        } else {\n\
    \            false\n        }\n    }).count\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `count` on type `Filter<std::ops::Range<isize>,\
    \ [closure@/tmp/tmprqafoy2x.rs:9:19: 16:6]>`\n  --> /tmp/tmprqafoy2x.rs:16:8\n\
    \   |\n16 |     }).count\n   |        ^^^^^ method, not a field\n   |\nhelp: use\
    \ parentheses to call the method\n   |\n16 |     }).count()\n   |            \
    \ ++\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n <= 3 {\n        return n;\n    }\n\n    if n % 11 == 0 {\n        return fizz_buzz(n\
    \ / 11);\n    }\n\n    if n % 13 == 0 {\n        return fizz_buzz(n / 13);\n \
    \   }\n\n    return fizz_buzz(n + 1);\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpcyijvu1p.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    debug_assert!(n\
    \ % 11 == 0 || n % 13 == 0);\n    let mut count = 0;\n    for _ in 0..n {\n  \
    \      match n % 11 {\n            0 => count += 1,\n            1 => count +=\
    \ 1,\n            _ => count += 0,\n        }\n        match n % 13 {\n      \
    \      0 => count += 1,\n            1 => count += 1,\n            _ => count\
    \ += 0,\n        }\n        n /= 13;\n        n /= 11;\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp098m0dvf.rs:22:9\n\
    \   |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n22 |         n /= 13;\n   |     \
    \    ^^^^^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot assign\
    \ to immutable argument `n`\n  --> /tmp/tmp098m0dvf.rs:23:9\n   |\n8  | fn fizz_buzz(n:\
    \ isize) -> isize {\n   |              - help: consider making this binding mutable:\
    \ `mut n`\n...\n23 |         n /= 11;\n   |         ^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    debug_assert!(n\
    \ > 0);\n    debug_assert!(n % 11 == 0 || n % 13 == 0);\n\n    let mut count =\
    \ 1usize;\n    if n % 11 == 0 {\n        count += 1;\n    }\n    if n % 13 ==\
    \ 0 {\n        count += 1;\n    }\n\n    while n > 0 {\n        if n % 11 == 0\
    \ || n % 13 == 0 {\n            count += 1;\n        }\n        n /= 11;\n   \
    \     n /= 13;\n    }\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphipt4m7z.rs:27:5\n   |\n\
    8  | fn fizz_buzz(n: isize) -> isize {\n   |                           ----- expected\
    \ `isize` because of return type\n...\n27 |     count\n   |     ^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n27 |     count.try_into().unwrap()\n\
    \   |          ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (n\
    \ - 3) & !(n == 3) * 11 + !(n == 3) * 13\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `bool` by `{integer}`\n --> /tmp/tmpkidt9pw2.rs:9:25\n\
    \  |\n9 |     (n - 3) & !(n == 3) * 11 + !(n == 3) * 13\n  |               ---------\
    \ ^ -- {integer}\n  |               |\n  |               bool\n\nerror[E0369]:\
    \ cannot multiply `bool` by `{integer}`\n --> /tmp/tmpkidt9pw2.rs:9:42\n  |\n\
    9 |     (n - 3) & !(n == 3) * 11 + !(n == 3) * 13\n  |                       \
    \         --------- ^ -- {integer}\n  |                                |\n  |\
    \                                bool\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    while n > 0 {\n        if n % 11 == 0 || n % 13 == 0 {\n\
    \            counter += 1;\n        }\n        n /= 10;\n    }\n    counter\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp09f8pf6d.rs:14:9\n\
    \   |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n14 |         n /= 10;\n   |     \
    \    ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n < 3 { return 0; }\n    let mut counter = 0;\n    while n > 0 {\n        let\
    \ d = n % 10;\n        if d % 11 == 0 || d % 13 == 0 { counter += 1 }\n      \
    \  n /= 10;\n    }\n    counter\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpgomhzdc4.rs:14:9\n\
    \   |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n14 |         n /= 10;\n   |     \
    \    ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ Return the number of times digit 7 appears in integers less than n which are\
    \ divisible by 11 or 13.\n    (n % 11 == 0) || (n % 13 == 0)\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd5qt8jhy.rs:10:5\n   |\n\
    8  | fn fizz_buzz(n: isize) -> isize {\n   |                           ----- expected\
    \ `isize` because of return type\n9  |     // Return the number of times digit\
    \ 7 appears in integers less than n which are divisible by 11 or 13.\n10 |   \
    \  (n % 11 == 0) || (n % 13 == 0)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `bool`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counts: [isize; 26] = [0; 26];\n    for i in 1..=n {\n        let digit\
    \ = i % 10;\n        if digit == 7 {\n            counts[digit as usize] += 1;\n\
    \        }\n        if counts[digit as usize] % 11 == 0 && counts[digit as usize]\
    \ % 13 == 0 {\n            return counts[digit as usize] as isize;\n        }\n\
    \    }\n    0\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `2`', /tmp/tmp1c2_8pwz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        return 0;\n    }\n\n    if n % 11 == 0\
    \ {\n        return 1;\n    }\n\n    if n % 13 == 0 {\n        return 2;\n   \
    \ }\n\n    3\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `0`', /tmp/tmpd8rmp6f9.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (0..n).filter(|x|\
    \ x.is_multiple_of(7) && x.is_divisible_by(11) && x.is_divisible_by(13)).count()\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_multiple_of` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmpb2lgxdo1.rs:9:25\n  |\n9 |     (0..n).filter(|x|\
    \ x.is_multiple_of(7) && x.is_divisible_by(11) && x.is_divisible_by(13)).count()\n\
    \  |                         ^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `next_multiple_of`\n\nerror[E0599]: no method named `is_divisible_by`\
    \ found for reference `&isize` in the current scope\n --> /tmp/tmpb2lgxdo1.rs:9:48\n\
    \  |\n9 |     (0..n).filter(|x| x.is_multiple_of(7) && x.is_divisible_by(11) &&\
    \ x.is_divisible_by(13)).count()\n  |                                        \
    \        ^^^^^^^^^^^^^^^ method not found in `&isize`\n\nerror[E0599]: no method\
    \ named `is_divisible_by` found for reference `&isize` in the current scope\n\
    \ --> /tmp/tmpb2lgxdo1.rs:9:73\n  |\n9 |     (0..n).filter(|x| x.is_multiple_of(7)\
    \ && x.is_divisible_by(11) && x.is_divisible_by(13)).count()\n  |            \
    \                                                             ^^^^^^^^^^^^^^^\
    \ method not found in `&isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpb2lgxdo1.rs:9:5\n\
    \  |\n8 | fn fizz_buzz(n: isize) -> isize {\n  |                           -----\
    \ expected `isize` because of return type\n9 |     (0..n).filter(|x| x.is_multiple_of(7)\
    \ && x.is_divisible_by(11) && x.is_divisible_by(13)).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (0..n).filter(|x|\
    \ x.is_multiple_of(7) && x.is_divisible_by(11) && x.is_divisible_by(13)).count().try_into().unwrap()\n\
    \  |                                                                         \
    \                            ++++++++++++++++++++\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    match\
    \ n % 11 {\n        0 => 0,\n        1 => 1,\n        2 => 2,\n        3 => 3,\n\
    \        4 => 4,\n        5 => 5,\n        6 => 6,\n        7 => 7,\n        _\
    \ => {\n            match n % 13 {\n                0 => 0,\n                1\
    \ => 1,\n                2 => 2,\n                3 => 3,\n                4 =>\
    \ 4,\n                5 => 5,\n                6 => 6,\n                7 => 7,\n\
    \                _ => n + 1,\n            }\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `0`', /tmp/tmp86azqe0a.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ This algorithm is slightly different than in \"FizzBuzz Number Generator\" section\
    \ 4.4 from Donald Knuth's \"The Art of Computer Programming\".\n    // This implementation\
    \ doesn't use the % operator which means that we cannot calculate numbers divisible\
    \ by 11.\n    let mut counter = 0;\n    while n > 0 {\n        if n % 11 == 0\
    \ {\n            counter += 1;\n        }\n        if n % 13 == 0 {\n        \
    \    counter += 1;\n        }\n        n /= 11;\n        n /= 13;\n    }\n   \
    \ counter\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmplwmk2hya.rs:19:9\n\
    \   |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n19 |         n /= 11;\n   |     \
    \    ^^^^^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot assign\
    \ to immutable argument `n`\n  --> /tmp/tmplwmk2hya.rs:20:9\n   |\n8  | fn fizz_buzz(n:\
    \ isize) -> isize {\n   |              - help: consider making this binding mutable:\
    \ `mut n`\n...\n20 |         n /= 13;\n   |         ^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ Base cases\n    if n < 0 || n % 11 == 0 || n % 13 == 0 {\n        return 0;\n\
    \    }\n\n    // Recursion\n    let mut count = fizz_buzz(n/11) + 1; // Recursive\
    \ call that adds 1 to the previous count\n    if n % 11 == 0 || n % 13 == 0 {\n\
    \        count += 1;\n    }\n\n    count\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpqjpazdo1.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut n1 = n;\n    let mut n2 = 0;\n    let mut n3 = 0;\n    while n1 != 0 {\n\
    \        n1 -= 10;\n        n2 += n1 / 11;\n        n1 /= 11;\n        n3 += n1;\n\
    \    }\n    n2 += n3 / 13;\n    n2 += 1;\n    n2\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `0`', /tmp/tmpxdzwjlfv.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (1..=n).filter(|&x|\
    \ x % 11 == 0 || x % 13 == 0).count()\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphcdw8yri.rs:9:5\n  |\n8 |\
    \ fn fizz_buzz(n: isize) -> isize {\n  |                           ----- expected\
    \ `isize` because of return type\n9 |     (1..=n).filter(|&x| x % 11 == 0 || x\
    \ % 13 == 0).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (1..=n).filter(|&x|\
    \ x % 11 == 0 || x % 13 == 0).count().try_into().unwrap()\n  |               \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        return n.count_digits() + 1;\n    }\n\
    \    return n;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `count_digits` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpy7j2vny3.rs:10:18\n   |\n10 |         return\
    \ n.count_digits() + 1;\n   |                  ^^^^^^^^^^^^ help: there is an\
    \ associated function with a similar name: `count_ones`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut n: isize = n as isize;\n    let mut i: isize = 0;\n    while n > 0 {\n \
    \       i += 1;\n        if n % 11 == 0 || n % 13 == 0 {\n            i += 1;\n\
    \        }\n        n /= 11;\n    }\n    i\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp2hv2lowv.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        0\n    } else {\n        1 + fizz_buzz(n\
    \ - 7)\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `0`', /tmp/tmpbalsnjn_.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    loop\
    \ {\n        let mut i = n;\n        debug_assert!(i / 11 != i / 13);\n      \
    \  debug_assert!(i % 11 == 0 || i % 13 == 0);\n        debug_assert!(i % 11 !=\
    \ 0 || i % 13 != 0);\n        i /= 11;\n        if i % 11 == 0 && i % 13 != 0\
    \ {\n            i += 1;\n        }\n        i /= 13;\n        if i % 13 == 0\
    \ && i % 11 != 0 {\n            i += 1;\n        }\n        if i == 0 {\n    \
    \        break;\n        }\n        i += 1;\n    }\n    i\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpxbdv03f7.rs:27:5\n\
    \   |\n27 |     i\n   |     ^ help: a local variable with a similar name exists:\
    \ `n`\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    match\
    \ (n % 11 == 0 || n % 13 == 0) {\n        true => (n % 11) + fizz_buzz(n / 11),\n\
    \        false => 1,\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpldl8ingg.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut nums: Vec<_> = vec![];\n    let mut num: i32 = 0;\n\n    let mut i: isize\
    \ = n;\n    while i /= 10 {\n        nums.push(i as i32);\n        i += 1;\n \
    \   }\n    let mut j: isize = n;\n    while j /= 10 {\n        if nums.contains(&j\
    \ as i32) {\n            num |= 1 as u8;\n        }\n        j += 1;\n    }\n\n\
    \    num\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd_04r2h7.rs:13:11\n   |\n\
    13 |     while i /= 10 {\n   |           ^^^^^^^ expected `bool`, found `()`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpd_04r2h7.rs:18:11\n   |\n18 |\
    \     while j /= 10 {\n   |           ^^^^^^^ expected `bool`, found `()`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpd_04r2h7.rs:19:26\n   |\n19 |  \
    \       if nums.contains(&j as i32) {\n   |                          ^^^^^^^^^\n\
    \   |                          |\n   |                          expected `&i32`,\
    \ found `i32`\n   |                          help: consider borrowing here: `&(&j\
    \ as i32)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd_04r2h7.rs:20:20\n\
    \   |\n20 |             num |= 1 as u8;\n   |                    ^^^^^^^ expected\
    \ `i32`, found `u8`\n\nerror[E0277]: no implementation for `i32 |= u8`\n  -->\
    \ /tmp/tmpd_04r2h7.rs:20:17\n   |\n20 |             num |= 1 as u8;\n   |    \
    \             ^^ no implementation for `i32 |= u8`\n   |\n   = help: the trait\
    \ `BitOrAssign<u8>` is not implemented for `i32`\n   = help: the following other\
    \ types implement trait `BitOrAssign<Rhs>`:\n             <i128 as BitOrAssign<&i128>>\n\
    \             <i128 as BitOrAssign>\n             <i16 as BitOrAssign<&i16>>\n\
    \             <i16 as BitOrAssign>\n             <i32 as BitOrAssign<&i32>>\n\
    \             <i32 as BitOrAssign>\n             <i64 as BitOrAssign<&i64>>\n\
    \             <i64 as BitOrAssign>\n           and 16 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd_04r2h7.rs:25:5\n   |\n8  | fn fizz_buzz(n:\
    \ isize) -> isize {\n   |                           ----- expected `isize` because\
    \ of return type\n...\n25 |     num\n   |     ^^^ expected `isize`, found `i32`\n\
    \   |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n25 |     num.try_into().unwrap()\n   |        ++++++++++++++++++++\n\
    \nerror[E0606]: casting `&isize` as `i32` is invalid\n  --> /tmp/tmpd_04r2h7.rs:19:26\n\
    \   |\n19 |         if nums.contains(&j as i32) {\n   |                      \
    \    --^^^^^^^\n   |                          |\n   |              "
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        0\n    } else {\n        1 + fizz_buzz(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `0`', /tmp/tmpkap4t1xu.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut nines = 0;\n    let mut tens = 0;\n    let mut ones = 0;\n    for _ in 0..n\
    \ {\n        if n % 11 == 0 {\n            tens += 1;\n        } else if n % 13\
    \ == 0 {\n            nines += 1;\n        } else {\n            ones += 1;\n\
    \        }\n        n /= 10;\n    }\n    ones as isize\n}\n\nfn main() {\n   \
    \ let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "warning: variable `nines` is assigned to, but never used\n --> /tmp/tmp2dh5exlk.rs:9:13\n\
    \  |\n9 |     let mut nines = 0;\n  |             ^^^^^\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n  = note: consider using `_nines` instead\n\nwarning: variable\
    \ `tens` is assigned to, but never used\n  --> /tmp/tmp2dh5exlk.rs:10:13\n   |\n\
    10 |     let mut tens = 0;\n   |             ^^^^\n   |\n   = note: consider using\
    \ `_tens` instead\n\nerror[E0384]: cannot assign to immutable argument `n`\n \
    \ --> /tmp/tmp2dh5exlk.rs:20:9\n   |\n8  | fn fizz_buzz(n: isize) -> isize {\n\
    \   |              - help: consider making this binding mutable: `mut n`\n...\n\
    20 |         n /= 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut result = n;\n    if n <= 100 {\n        if n % 11 == 0 {\n            result\
    \ += 1;\n        }\n        if n % 13 == 0 {\n            result += 3;\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n \
    \   assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `0`', /tmp/tmpc5s8atmf.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut number = 0;\n    let mut remainder = n;\n    loop {\n        match remainder\
    \ % 10 {\n            7 => number += 1,\n            5 => number += 1,\n     \
    \       3 => number += 1,\n            _ => number,\n        }\n        remainder\
    \ = (remainder % 10) as isize;\n    }\n    number\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp5zha2h6k.rs:16:18\n\
    \   |\n12 | /         match remainder % 10 {\n13 | |             7 => number +=\
    \ 1,\n   | |                  ----------- this is found to be of type `()`\n14\
    \ | |             5 => number += 1,\n   | |                  ----------- this\
    \ is found to be of type `()`\n15 | |             3 => number += 1,\n   | |  \
    \                ----------- this is found to be of type `()`\n16 | |        \
    \     _ => number,\n   | |                  ^^^^^^ expected `()`, found integer\n\
    17 | |         }\n   | |_________- `match` arms have incompatible types\n\nwarning:\
    \ unreachable expression\n  --> /tmp/tmp5zha2h6k.rs:20:5\n   |\n11 | /     loop\
    \ {\n12 | |         match remainder % 10 {\n13 | |             7 => number +=\
    \ 1,\n14 | |             5 => number += 1,\n...  |\n18 | |         remainder =\
    \ (remainder % 10) as isize;\n19 | |     }\n   | |_____- any code following this\
    \ expression is unreachable\n20 |       number\n   |       ^^^^^^ unreachable\
    \ expression\n   |\n   = note: `#[warn(unreachable_code)]` on by default\n\nerror:\
    \ aborting due to previous error; 1 warning emitted\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n\n    for i in n.checked_sub(1).step_by(10) {\n        if i\
    \ % 11 == 0 || i % 13 == 0 {\n            count += 1;\n        }\n    }\n\n  \
    \  count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<isize>` is not an iterator\n   --> /tmp/tmpowofbsf_.rs:11:31\n\
    \    |\n11  |       for i in n.checked_sub(1).step_by(10) {\n    |           \
    \                      ^^^^^^^ `Option<isize>` is not an iterator\n    |\n   \
    \ = note: the following trait bounds were not satisfied:\n            `Option<isize>:\
    \ Iterator`\n            which is required by `&mut Option<isize>: Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut cnt: usize = 0;\n    for d in &nums_less_than(n) {\n        if d % 11 ==\
    \ 0 || d % 13 == 0 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\n\
    fn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `nums_less_than` in this scope\n  -->\
    \ /tmp/tmpr72tz56c.rs:10:15\n   |\n10 |     for d in &nums_less_than(n) {\n  \
    \ |               ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpr72tz56c.rs:15:5\n   |\n8  | fn fizz_buzz(n: isize) ->\
    \ isize {\n   |                           ----- expected `isize` because of return\
    \ type\n...\n15 |     cnt\n   |     ^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n15 |     cnt.try_into().unwrap()\n   |        ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        if n % 11 == 0 {\n            11\n   \
    \     } else {\n            13\n        }\n    } else {\n        n\n    }\n}\n\
    \nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `0`', /tmp/tmp5bhhwwiq.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    loop\
    \ {\n        match n % 11 {\n            0 => return 0,\n            1 => return\
    \ 1,\n            _ => continue,\n        };\n        match n % 13 {\n       \
    \     0 => return 0,\n            1 => return 2,\n            _ => continue,\n\
    \        };\n        n /= 11; // divide by 11\n        n /= 13; // divide by 13\n\
    \    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut num_7 = 0;\n    while n > 0 {\n        if n % 11 == 0 || n % 13 == 0 {\n\
    \            num_7 += 1;\n        }\n        n /= 10;\n    }\n    num_7\n}\n\n\
    fn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpf2iy8tv3.rs:14:9\n\
    \   |\n8  | fn fizz_buzz(n: isize) -> isize {\n   |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n14 |         n /= 10;\n   |     \
    \    ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ Add 1 to n so that we can use rem to find the multiples of 11 or 13.\n    let\
    \ mut n: isize = n + 1;\n    let mut n: isize = n.checked_add(11).unwrap();\n\
    \    let mut n: isize = n.checked_add(13).unwrap();\n\n    loop {\n        if\
    \ n % 11 == 0 {\n            n += 1;\n        } else if n % 13 == 0 {\n      \
    \      n += 2;\n        } else {\n            n += 1;\n        }\n        match\
    \ n % 1000 {\n            0 => break,\n            _ => n = n.checked_mul(1000).unwrap(),\n\
    \        }\n    }\n\n    n\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmple6mpda1.rs:24:42\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ TODO: Implement this function\n    // Hint: use the modulo operator (%) to find\
    \ the remainder when dividing by 11, or divide by 13 to find the remainder when\
    \ dividing by 13.\n    // And you can use a while loop to solve this\n    // Solution:\
    \ use while loop to solve this\n    let mut i = 0;\n    let mut counter: usize\
    \ = 0;\n    while i < n {\n        if n % 11 == 0 || n % 13 == 0 {\n         \
    \   counter += 1;\n        }\n        i += 1;\n    }\n    counter\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw6xd1ei4.rs:21:5\n   |\n\
    8  | fn fizz_buzz(n: isize) -> isize {\n   |                           ----- expected\
    \ `isize` because of return type\n...\n21 |     counter\n   |     ^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n21 |     counter.try_into().unwrap()\n\
    \   |            ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n <= 0 {\n        return 0;\n    }\n    let mut num_divisible_by_11 = 0;\n \
    \   let mut num_divisible_by_13 = 0;\n    for i in 2..=n {\n        if n % i ==\
    \ 0 {\n            if i % 11 == 0 {\n                num_divisible_by_11 += 1;\n\
    \            }\n            if i % 13 == 0 {\n                num_divisible_by_13\
    \ += 1;\n            }\n        }\n    }\n    if num_divisible_by_11 == 0 {\n\
    \        return num_divisible_by_13;\n    }\n    if num_divisible_by_13 == 0 {\n\
    \        return num_divisible_by_11;\n    }\n    num_divisible_by_11\n}\n\nfn\
    \ main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp764ejw8a.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 {\n        n\n    } else if n % 13 == 0 {\n        n + 1\n    }\
    \ else {\n        n + 2\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `52`,\n right: `0`', /tmp/tmpk5dbbjij.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    for n in n.iter().filter(|&x| {\n        if x % 11 ==\
    \ 0 || x % 13 == 0 {\n            counter += 1;\n            false\n        }\
    \ else {\n            true\n        }\n    }) {\n        counter += 1;\n    }\n\
    \    counter\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpn1na_xwf.rs:10:16\n   |\n10 |     for n in n.iter().filter(|&x|\
    \ {\n   |                ^^^^ method not found in `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut c = 0;\n\n    while n % 11 != 0 {\n        c++;\n        n /= 11;\n    }\n\
    \n    if n % 13 == 0 {\n        c++;\n        n /= 13;\n    }\n\n    c * n\n}\n\
    \nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpw8d59_m1.rs:12:10\n\
    \   |\n12 |         c++;\n   |          ^^ not a valid postfix operator\n   |\n\
    help: use `+= 1` instead\n   |\n12 |         { let tmp = c; c += 1; tmp };\n \
    \  |         +++++++++++  ~~~~~~~~~~~~~~~\n12 -         c++;\n12 +         c +=\
    \ 1;\n   | \n\nerror: Rust has no postfix increment operator\n  --> /tmp/tmpw8d59_m1.rs:17:10\n\
    \   |\n17 |         c++;\n   |          ^^ not a valid postfix operator\n   |\n\
    help: use `+= 1` instead\n   |\n17 |         { let tmp = c; c += 1; tmp };\n \
    \  |         +++++++++++  ~~~~~~~~~~~~~~~\n17 -         c++;\n17 +         c +=\
    \ 1;\n   | \n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    debug_assert!(n\
    \ % 11 == 0 || n % 13 == 0);\n    debug_assert!(n >= 0);\n    \n    let mut fizz_count\
    \ = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     fizz_count += 1;\n        }\n    }\n    \n    fizz_count\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: n % 11 == 0 || n % 13 == 0',\
    \ /tmp/tmpenex8k_t.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (1..=n).filter(|&i|\
    \ i % 11 == 0 || i % 13 == 0).count()\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpen1nqfz5.rs:9:5\n  |\n8 |\
    \ fn fizz_buzz(n: isize) -> isize {\n  |                           ----- expected\
    \ `isize` because of return type\n9 |     (1..=n).filter(|&i| i % 11 == 0 || i\
    \ % 13 == 0).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (1..=n).filter(|&i|\
    \ i % 11 == 0 || i % 13 == 0).count().try_into().unwrap()\n  |               \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut total = 0;\n    for i in 0..n {\n        if i % 11 == 0 && i % 13 == 0 {\n\
    \            total += 1;\n        } else if i % 11 == 0 {\n            total +=\
    \ 2;\n        } else if i % 13 == 0 {\n            total += 3;\n        } else\
    \ {\n            total += 4;\n        }\n    }\n    total\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `186`,\n right: `0`', /tmp/tmpx414gm_n.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    while n > 0 {\n        count += n % 10 == 7 || n % 10 ==\
    \ 5;\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmptuywmdix.rs:11:15\n\
    \   |\n11 |         count += n % 10 == 7 || n % 10 == 5;\n   |               ^^\
    \ no implementation for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    fn\
    \ check_buzz(n: isize) -> bool {\n        (n % 11) == 0 && (n % 13) == 0\n   \
    \ }\n\n    let mut n = 0;\n    for &d in &n.to_string().chars() {\n        match\
    \ d {\n            '0' => {\n                n = check_buzz(n);\n            }\n\
    \            '1' => {\n                n = check_buzz(n) + 1;\n            }\n\
    \            '2' => {\n                n = check_buzz(n) + 2;\n            }\n\
    \            '3' => {\n                n = check_buzz(n) + 3;\n            }\n\
    \            '4' => {\n                n = check_buzz(n) + 4;\n            }\n\
    \            '5' => {\n                n = check_buzz(n) + 5;\n            }\n\
    \            '6' => {\n                n = check_buzz(n) + 6;\n            }\n\
    \            '7' => {\n                n = check_buzz(n) + 7;\n            }\n\
    \            '8' => {\n                n = check_buzz(n) + 8;\n            }\n\
    \            '9' => {\n                n = check_buzz(n) + 9;\n            }\n\
    \            _ => {\n                n = check_buzz(n) + 1;\n            }\n \
    \       }\n    }\n    n\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n  \
    \  assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error[E0277]: `&Chars<'_>` is not an iterator\n  --> /tmp/tmpmoevg02x.rs:14:15\n\
    \   |\n14 |     for &d in &n.to_string().chars() {\n   |               -^^^^^^^^^^^^^^^^^^^^^\n\
    \   |               |\n   |               `&Chars<'_>` is not an iterator\n  \
    \ |               help: consider removing the leading `&`-reference\n   |\n  \
    \ = help: the trait `Iterator` is not implemented for `&Chars<'_>`\n   = note:\
    \ `Iterator` is implemented for `&mut std::str::Chars<'_>`, but not for `&std::str::Chars<'_>`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmoevg02x.rs:17:21\n\
    \   |\n13 |     let mut n = 0;\n   |                 - expected due to this value\n\
    ...\n17 |                 n = check_buzz(n);\n   |                     ^^^^^^^^^^^^^\
    \ expected `isize`, found `bool`\n\nerror[E0369]: cannot add `{integer}` to `bool`\n\
    \  --> /tmp/tmpmoevg02x.rs:20:35\n   |\n20 |                 n = check_buzz(n)\
    \ + 1;\n   |                     ------------- ^ - {integer}\n   |           \
    \          |\n   |                     bool\n\nerror[E0369]: cannot add `{integer}`\
    \ to `bool`\n  --> /tmp/tmpmoevg02x.rs:23:35\n   |\n23 |                 n = check_buzz(n)\
    \ + 2;\n   |                     ------------- ^ - {integer}\n   |           \
    \          |\n   |                     bool\n\nerror[E0369]: cannot add `{integer}`\
    \ to `bool`\n  --> /tmp/tmpmoevg02x.rs:26:35\n   |\n26 |                 n = check_buzz(n)\
    \ + 3;\n   |                     ------------- ^ - {integer}\n   |           \
    \          |\n   |                     bool\n\nerror[E0369]: cannot add `{integer}`\
    \ to `bool`\n  --> /tmp/tmpmoevg02x.rs:29:35\n   |\n29 |                 n = check_buzz(n)\
    \ + 4;\n   |                     ------------- ^ - {integer}\n   |           \
    \          |\n   |                     bool\n\nerror[E0369]: cannot add `{integer}`\
    \ to `bool`\n  --> /tmp/tmpmoevg02x.rs:32:35\n   |\n32 |                 n = check_buzz(n)\
    \ + 5;\n   |                     ------------- ^ - {integer}\n   |           \
    \          |\n   |                     bool\n\nerror[E0369]:"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        return 0;\n    }\n    if n % 7 == 0 {\n\
    \        return 1;\n    }\n    if n % 5 == 0 {\n        return 2;\n    }\n   \
    \ if n % 3 == 0 {\n        return 3;\n    }\n    if n % 2 == 0 {\n        return\
    \ 4;\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0317]: `if` may be missing an `else` clause\n  --> /tmp/tmpnx8zu00h.rs:21:5\n\
    \   |\n8  |   fn fizz_buzz(n: isize) -> isize {\n   |                        \
    \     ----- expected `isize` because of this return type\n...\n21 | /     if n\
    \ % 2 == 0 {\n22 | |         return 4;\n23 | |     }\n   | |_____^ expected `isize`,\
    \ found `()`\n   |\n   = note: `if` expressions without `else` evaluate to `()`\n\
    \   = help: consider adding an `else` block that evaluates to the expected type\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0317`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        n\n    } else {\n        fizz_buzz_iter(n).next()\n\
    \    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fizz_buzz_iter` in this scope\n  -->\
    \ /tmp/tmpc1vv5cp0.rs:12:9\n   |\n12 |         fizz_buzz_iter(n).next()\n   |\
    \         ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (0..n).filter(|x|\
    \ {\n        let num = x.to_string();\n        (num[0..4].is_digit() || num[5..7].is_digit())\
    \ &&\n            (num[0..4].is_digit() || num[5..7].is_digit()) && num[8] ==\
    \ '7'\n    }).count()\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_digit` found for type `str` in the current\
    \ scope\n  --> /tmp/tmpyb0vpbhi.rs:11:20\n   |\n11 |         (num[0..4].is_digit()\
    \ || num[5..7].is_digit()) &&\n   |                    ^^^^^^^^ method not found\
    \ in `str`\n\nerror[E0599]: no method named `is_digit` found for type `str` in\
    \ the current scope\n  --> /tmp/tmpyb0vpbhi.rs:11:44\n   |\n11 |         (num[0..4].is_digit()\
    \ || num[5..7].is_digit()) &&\n   |                                          \
    \  ^^^^^^^^ method not found in `str`\n\nerror[E0599]: no method named `is_digit`\
    \ found for type `str` in the current scope\n  --> /tmp/tmpyb0vpbhi.rs:12:24\n\
    \   |\n12 |             (num[0..4].is_digit() || num[5..7].is_digit()) && num[8]\
    \ == '7'\n   |                        ^^^^^^^^ method not found in `str`\n\nerror[E0599]:\
    \ no method named `is_digit` found for type `str` in the current scope\n  -->\
    \ /tmp/tmpyb0vpbhi.rs:12:48\n   |\n12 |             (num[0..4].is_digit() || num[5..7].is_digit())\
    \ && num[8] == '7'\n   |                                                ^^^^^^^^\
    \ method not found in `str`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `{integer}`\n  --> /tmp/tmpyb0vpbhi.rs:12:63\n   |\n12 |             (num[0..4].is_digit()\
    \ || num[5..7].is_digit()) && num[8] == '7'\n   |                            \
    \                                   ^^^^^^ `String` cannot be indexed by `{integer}`\n\
    \   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyb0vpbhi.rs:9:5\n\
    \   |\n8  |   fn fizz_buzz(n: isize) -> isize {\n   |                        \
    \     ----- expected `isize` because of return type\n9  | /     (0..n).fi"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    (0..n).filter(|&x|\
    \ x % 11 == 0 || x % 13 == 0).count()\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjgycuiy5.rs:9:5\n  |\n8 |\
    \ fn fizz_buzz(n: isize) -> isize {\n  |                           ----- expected\
    \ `isize` because of return type\n9 |     (0..n).filter(|&x| x % 11 == 0 || x\
    \ % 13 == 0).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (0..n).filter(|&x|\
    \ x % 11 == 0 || x % 13 == 0).count().try_into().unwrap()\n  |               \
    \                                            ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    let mut remainder = n;\n    while remainder > 0 {\n  \
    \      if remainder % 11 == 0 || remainder % 13 == 0 {\n            counter =\
    \ counter + 1;\n        }\n        remainder = remainder - 1;\n    }\n    counter\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpb4opufbu.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n >= 100 {\n        return 0;\n    }\n    let mut nd = n / 10;\n    let mut\
    \ nm = n % 10;\n    let mut nn = n / 1000;\n    while nm % 11 == 0 || nm % 13\
    \ == 0 {\n        nm /= 10;\n    }\n    while nn % 11 == 0 || nn % 13 == 0 {\n\
    \        nn /= 10;\n    }\n    nd\n        + nm\n        + fizz_buzz(nn / 10)\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut i = 0;\n    for &d in &[i1..i3] { i += fizzbuzz_digit(d); }\n    if i ==\
    \ n { i } else { i }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i1` in this scope\n  --> /tmp/tmp2vq3de_x.rs:10:17\n\
    \   |\n10 |     for &d in &[i1..i3] { i += fizzbuzz_digit(d); }\n   |        \
    \         ^^ help: a local variable with a similar name exists: `i`\n\nerror[E0425]:\
    \ cannot find value `i3` in this scope\n  --> /tmp/tmp2vq3de_x.rs:10:21\n   |\n\
    10 |     for &d in &[i1..i3] { i += fizzbuzz_digit(d); }\n   |               \
    \      ^^ help: a local variable with a similar name exists: `i`\n\nerror[E0425]:\
    \ cannot find function `fizzbuzz_digit` in this scope\n  --> /tmp/tmp2vq3de_x.rs:10:32\n\
    \   |\n10 |     for &d in &[i1..i3] { i += fizzbuzz_digit(d); }\n   |        \
    \                        ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
    /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    for &i in &numbers_up_to_n(n) {\n        if i % 11 ==\
    \ 0 || i % 13 == 0 {\n            counter += 1;\n        }\n    }\n    counter\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `numbers_up_to_n` in this scope\n  -->\
    \ /tmp/tmpon1i8b8t.rs:10:16\n   |\n10 |     for &i in &numbers_up_to_n(n) {\n\
    \   |                ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
