name: HumanEval_23_strlen
language: rust
results:
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7aahazhy.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp37r7oy1i.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.as_bytes().len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcc_2ail6.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.as_bytes().len()\n \
    \ |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |     string.as_bytes().len().try_into().unwrap()\n  |         \
    \                   ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvwpg89uh.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbztoucdh.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    if string.len()\
    \ < 0 {\n        -1\n    } else {\n        string.len()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnqb36vgp.rs:10:9\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n10 |         string.len()\n  \
    \ |         ^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n10 |         string.len().try_into().unwrap()\n   |                   \
    \  ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.as_bytes().len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8tzlmgai.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.as_bytes().len()\n \
    \ |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |     string.as_bytes().len().try_into().unwrap()\n  |         \
    \                   ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count();\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4u6rkz8h.rs:6:30\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |    ------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn68iac6t.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut length:\
    \ usize = 0;\n    for c in string.chars() {\n        length += c.len_utf8();\n\
    \    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpepsjtet4.rs:11:5\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n11 |     length\n   |     ^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n11 |     length.try_into().unwrap()\n\
    \   |           ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let len = string.len();\n\
    \    if len == 0 {\n        0\n    } else {\n        len\n    }\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptiov214g.rs:11:9\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n11 |         len\n   |       \
    \  ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n11 |     \
    \    len.try_into().unwrap()\n   |            ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmps33c7w1p.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6jkcguq5.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptipudnbu.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgvelx2gd.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpblvm1o9v.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1y58awl_.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let len = string.chars().count();\n\
    \    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp060wig12.rs:8:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     let len = string.chars().count();\n\
    8 |     len\n  |     ^^^ expected `isize`, found `usize`\n  |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n  |\n\
    8 |     len.try_into().unwrap()\n  |        ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    if string.len()\
    \ == 0 {\n        return 0;\n    }\n\n    let mut count = 0;\n\n    for i in string.chars()\
    \ {\n        if !i.is_whitespace() {\n            count += 1;\n        }\n   \
    \ }\n\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut length\
    \ = 0 as isize;\n    string.chars().for_each(|c| {\n        if *c >= 128 {\n \
    \           length += 2;\n        } else {\n            length += 1\n        }\n\
    \    });\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmpqn04i3jo.rs:9:12\n\
    \  |\n9 |         if *c >= 128 {\n  |            ^^\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf3c37bf2.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpys_xvup3.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0qlh313j.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    for ch in string.chars() {\n        len += 1;\n        if len > 256\
    \ {\n            break;\n        }\n    }\n    len\n}\n\nfn main() {\n    let\
    \ candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n   \
    \ assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.as_bytes().len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprnsiybcm.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.as_bytes().len()\n \
    \ |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |     string.as_bytes().len().try_into().unwrap()\n  |         \
    \                   ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpiabu5ucg.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let len = string.len();\n\
    \    if len == 0 {\n        0\n    } else {\n        len\n    }\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmeoglipo.rs:11:9\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n11 |         len\n   |       \
    \  ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n11 |     \
    \    len.try_into().unwrap()\n   |            ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    if string.len()\
    \ == 0 {\n        return 0;\n    }\n    string.as_bytes().iter().position(|b|\
    \ b != 0).count()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&u8` with `{integer}`\n  --> /tmp/tmpb2vft7r0.rs:10:45\n\
    \   |\n10 |     string.as_bytes().iter().position(|b| b != 0).count()\n   |  \
    \                                           ^^ no implementation for `&u8 == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&u8`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpb2vft7r0.rs:10:51\n\
    \    |\n10  |       string.as_bytes().iter().position(|b| b != 0).count()\n  \
    \  |                                                     ^^^^^ `Option<usize>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplv6avmaf.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count();\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkc4afja8.rs:6:30\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |    ------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3h2r1kc_.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgoj_huh7.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa_ir93uv.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    for c in string.chars() {\n        if c.is_ascii() {\n           \
    \ len += 1;\n        } else {\n            len += 2;\n        }\n    }\n    len\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3pbcq7tb.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq68ar1k5.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1jpq6rvw.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpefgwbest.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxr1io9t4.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let bytes =\
    \ string.as_bytes();\n    bytes.iter().position(|b| *b == 0).unwrap_or(0)\n}\n\
    \nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz6wkkf3j.rs:8:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     let bytes = string.as_bytes();\n\
    8 |     bytes.iter().position(|b| *b == 0).unwrap_or(0)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n8 |     bytes.iter().position(|b|\
    \ *b == 0).unwrap_or(0).try_into().unwrap()\n  |                             \
    \                       ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa82f9usv.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp25enva3b.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6akelunw.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpisjhzp6z.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5psvrwds.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkln89mzs.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count(|c|\
    \ *c != '\\0')\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpuhkdcj2e.rs:7:27\n\
    \  |\n7 |     string.chars().count(|c| *c != '\\0')\n  |                     \
    \      ^ consider giving this closure parameter a type\n  |\n  = note: type must\
    \ be known at this point\n\nerror[E0061]: this function takes 0 arguments but\
    \ 1 argument was supplied\n   --> /tmp/tmpuhkdcj2e.rs:7:20\n    |\n7   |     string.chars().count(|c|\
    \ *c != '\\0')\n    |                    ^^^^^ -------------- supplied 1 argument\n\
    \    |                    |\n    |                    expected 0 arguments\n \
    \   |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpuhkdcj2e.rs:7:5\n  |\n6 | fn strlen(string: String) -> isize {\n\
    \  |                              ----- expected `isize` because of return type\n\
    7 |     string.chars().count(|c| *c != '\\0')\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().count(|c|\
    \ *c != '\\0').try_into().unwrap()\n  |                                      \
    \   ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0282, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm_xv1cht.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfj1io_od.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqfokp7qx.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    for ch in string.chars() {\n        len += ch.len_utf8();\n    }\n\
    \    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpabqtybpk.rs:11:5\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n11 |     len\n   |     ^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |     len.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpatoftldt.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpusf5ab9_.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyx9vm_ht.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp36lo9w1u.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgf146xux.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5d1ixggj.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph84drug1.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6446ehk8.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq9a56zh9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7nmg0fco.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj536hovy.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1dnlumd.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsyr3457c.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4vlz5b5s.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp4kp3hh2.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.chars().count()\n  |\
    \     ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \  |\n7 |     string.chars().count().try_into().unwrap()\n  |                \
    \           ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjzmgy4h0.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp644l687t.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1ryqmzoy.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count(|c|\
    \ *c != 0)\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpj9qem_1k.rs:7:27\n\
    \  |\n7 |     string.chars().count(|c| *c != 0)\n  |                         \
    \  ^ consider giving this closure parameter a type\n  |\n  = note: type must be\
    \ known at this point\n\nerror[E0061]: this function takes 0 arguments but 1 argument\
    \ was supplied\n   --> /tmp/tmpj9qem_1k.rs:7:20\n    |\n7   |     string.chars().count(|c|\
    \ *c != 0)\n    |                    ^^^^^ ----------- supplied 1 argument\n \
    \   |                    |\n    |                    expected 0 arguments\n  \
    \  |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpj9qem_1k.rs:7:5\n  |\n6 | fn strlen(string: String) -> isize {\n\
    \  |                              ----- expected `isize` because of return type\n\
    7 |     string.chars().count(|c| *c != 0)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().count(|c|\
    \ *c != 0).try_into().unwrap()\n  |                                      ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0282, E0308.\nFor more information about an error, try `rustc --explain\
    \ E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9sbd2n64.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.as_bytes().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpep3442al.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpv8miewe8.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7jvq4dqo.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpim2966hs.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzvntl7tx.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.as_bytes().len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkue391f9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.as_bytes().len()\n \
    \ |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |     string.as_bytes().len().try_into().unwrap()\n  |         \
    \                   ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_whitespace()).count()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpim_3l6a7.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c| !c.is_whitespace()).count().try_into().unwrap()\n\
    \  |                                                          ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8h5l32nx.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count();\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphg7nrxjv.rs:6:30\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |    ------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let string_buf\
    \ = String::from_utf8_lossy(string);\n    let mut len_buf = String::new();\n \
    \   for _ in 0..length_buf.len() {\n        let r = string_buf.find('\\0');\n\
    \        len_buf.set_len(r + 1.);\n        string_buf.copy_to_slice(&mut len_buf);\n\
    \    }\n    len_buf.len()\n}\n\nfn main() {\n    let candidate = strlen;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `length_buf` in this scope\n --> /tmp/tmpabk_irs0.rs:9:17\n\
    \  |\n9 |     for _ in 0..length_buf.len() {\n  |                 ^^^^^^^^^^ help:\
    \ a local variable with a similar name exists: `len_buf`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpabk_irs0.rs:7:46\n  |\n7 |     let string_buf = String::from_utf8_lossy(string);\n\
    \  |                                              ^^^^^^ expected `&[u8]`, found\
    \ struct `String`\n\nerror[E0599]: no method named `set_len` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpabk_irs0.rs:11:17\n   |\n11 | \
    \        len_buf.set_len(r + 1.);\n   |                 ^^^^^^^ method not found\
    \ in `String`\n\nerror[E0369]: cannot add `{float}` to `Option<usize>`\n  -->\
    \ /tmp/tmpabk_irs0.rs:11:27\n   |\n11 |         len_buf.set_len(r + 1.);\n   |\
    \                         - ^ -- {float}\n   |                         |\n   |\
    \                         Option<usize>\n\nerror[E0599]: no method named `copy_to_slice`\
    \ found for enum `Cow<'_, str>` in the current scope\n  --> /tmp/tmpabk_irs0.rs:12:20\n\
    \   |\n12 |         string_buf.copy_to_slice(&mut len_buf);\n   |            \
    \        ^^^^^^^^^^^^^ method not found in `Cow<'_, str>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpabk_irs0.rs:14:5\n   |\n6  | fn strlen(string: String)\
    \ -> isize {\n   |                              ----- expected `isize` because\
    \ of return type\n...\n14 |     len_buf.len()\n   |     ^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n14 |     len_buf.len().try_into().unwrap()\n\
    \   |                  ++++++++++++++++++++\n\nerror: aborting due to 6 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369, E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    for c in string.chars() {\n        len += 1;\n    }\n    len\n}\n\n\
    fn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpydx_j8ic.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmi9ex9d7.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppgci3lck.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().filter(|c|\
    \ c.is_ascii_whitespace()).count()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpiv1yjib2.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.chars().filter(|c| c.is_ascii_whitespace()).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c| c.is_ascii_whitespace()).count().try_into().unwrap()\n\
    \  |                                                               ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    if string.len()\
    \ == 0 {\n        return 0\n    }\n\n    string.len()\n}\n\nfn main() {\n    let\
    \ candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n   \
    \ assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpula0mtib.rs:11:5\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n11 |     string.len()\n   |  \
    \   ^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    11 |     string.len().try_into().unwrap()\n   |                 ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().filter(|&c|\
    \ c > u'\\u{1F4A9}').count()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator,\
    \ found `'\\u{1F4A9}'`\n --> /tmp/tmpnwj356t0.rs:7:37\n  |\n7 |     string.chars().filter(|&c|\
    \ c > u'\\u{1F4A9}').count()\n  |                                     -^^^^^^^^^^\n\
    \  |                                     |\n  |                              \
    \       expected one of 8 possible tokens\n  |                               \
    \      help: missing `,`\n\nerror[E0425]: cannot find value `u` in this scope\n\
    \ --> /tmp/tmpnwj356t0.rs:7:36\n  |\n7 |     string.chars().filter(|&c| c > u'\\\
    u{1F4A9}').count()\n  |                                    ^ help: a local variable\
    \ with a similar name exists: `c`\n\nerror[E0061]: this function takes 1 argument\
    \ but 2 arguments were supplied\n   --> /tmp/tmpnwj356t0.rs:7:20\n    |\n7   |\
    \     string.chars().filter(|&c| c > u'\\u{1F4A9}').count()\n    |           \
    \         ^^^^^^ --------------------- supplied 2 arguments\n    |           \
    \         |\n    |                    expected 1 argument\n    |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n --> /tmp/tmpnwj356t0.rs:7:5\n\
    \  |\n6 | fn strlen(string: String) -> isize {\n  |                          \
    \    ----- expected `isize` because of return type\n7 |     string.chars().filter(|&c|\
    \ c > u'\\u{1F4A9}').count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|&c|\
    \ c > u'\\u{1F4A9}').count().try_into().unwrap()\n  |                        \
    \                                 ++++++++++++++++++++\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0308,\
    \ E0425.\nFor more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmua4xl1d.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count(|c|\
    \ c == '\\0')\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpzows_tx_.rs:7:20\n    |\n7   |     string.chars().count(|c| c\
    \ == '\\0')\n    |                    ^^^^^ ------------- supplied 1 argument\n\
    \    |                    |\n    |                    expected 0 arguments\n \
    \   |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpzows_tx_.rs:7:5\n  |\n6 | fn strlen(string: String) -> isize {\n\
    \  |                              ----- expected `isize` because of return type\n\
    7 |     string.chars().count(|c| c == '\\0')\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().count(|c|\
    \ c == '\\0').try_into().unwrap()\n  |                                       \
    \ ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4by63ver.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpric5c185.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpksf3fp5w.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp39bkrfzi.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwqxoyoa3.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp__5xnrdn.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n\tstring.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5xie8mqg.rs:7:2\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqc5wyddz.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpir01vtxa.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptfxkzc8o.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    let len = string.len();\n    len\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpute988nl.rs:9:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n...\n9 |     len\n  |     ^^^ expected\
    \ `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     len.try_into().unwrap()\n\
    \  |        ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_wne08ly.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpczw_vk2s.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf13ptdmb.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9gmlw9vl.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    for &c in string.to_chars() {\n        if c.is_whitespace() {\n  \
    \          continue;\n        }\n        len += 1;\n    }\n    len\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_chars` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp0r3afba1.rs:8:22\n  |\n8 |     for &c in string.to_chars()\
    \ {\n  |                      ^^^^^^^^ help: there is an associated function with\
    \ a similar name: `chars`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpny6805r3.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkchxdlbd.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9ty_m5ma.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbhrbsnmq.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count(|c|\
    \ *c < b'\\0')\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpahza3tjv.rs:7:27\n\
    \  |\n7 |     string.chars().count(|c| *c < b'\\0')\n  |                     \
    \      ^ consider giving this closure parameter a type\n  |\n  = note: type must\
    \ be known at this point\n\nerror[E0061]: this function takes 0 arguments but\
    \ 1 argument was supplied\n   --> /tmp/tmpahza3tjv.rs:7:20\n    |\n7   |     string.chars().count(|c|\
    \ *c < b'\\0')\n    |                    ^^^^^ -------------- supplied 1 argument\n\
    \    |                    |\n    |                    expected 0 arguments\n \
    \   |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpahza3tjv.rs:7:5\n  |\n6 | fn strlen(string: String) -> isize {\n\
    \  |                              ----- expected `isize` because of return type\n\
    7 |     string.chars().count(|c| *c < b'\\0')\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().count(|c|\
    \ *c < b'\\0').try_into().unwrap()\n  |                                      \
    \   ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0282, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgnytimkn.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9vhtzb8q.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_ascii()).count()\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbfic06v2.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.chars().filter(|c| !c.is_ascii()).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n  |\n7 |     string.chars().filter(|c| !c.is_ascii()).count().try_into().unwrap()\n\
    \  |                                                     ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn8d3kifv.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8krs051p.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptqckwleg.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count();\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwrl5n2zi.rs:6:30\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |    ------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1186s00u.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4iq0bpp_.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    if string.is_empty()\
    \ {\n        return 0\n    }\n    let mut i: isize = 0\n    let mut len = string.len();\n\
    \    while len > 0 {\n        i += 1;\n        len -= 1;\n    }\n    i\n}\n\n\
    fn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpiyz12gk7.rs:10:25\n\
    \   |\n10 |     let mut i: isize = 0\n   |                         ^ help: add\
    \ `;` here\n11 |     let mut len = string.len();\n   |     --- unexpected token\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len:\
    \ isize = 0;\n    for ch in string.as_bytes() {\n        len += 1;\n    }\n  \
    \  len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    if string.len()\
    \ == 0 {\n        return 0\n    }\n    let mut result = 1\n    for c in string.as_str()\
    \ {\n        result *= c.len();\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n   \
    \ assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmpfyjb_int.rs:10:23\n\
    \   |\n10 |     let mut result = 1\n   |                       ^ help: add `;`\
    \ here\n11 |     for c in string.as_str() {\n   |     --- unexpected token\n\n\
    error[E0277]: `&str` is not an iterator\n  --> /tmp/tmpfyjb_int.rs:11:14\n   |\n\
    11 |     for c in string.as_str() {\n   |              ^^^^^^^^^^^^^^^ `&str`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the\
    \ trait `Iterator` is not implemented for `&str`\n   = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `&str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqj_rxtjh.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqdqzcfh2.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph5r8409k.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpunvujtvl.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count(|c|\
    \ *c != 0)\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpb4ky6zby.rs:7:27\n\
    \  |\n7 |     string.chars().count(|c| *c != 0)\n  |                         \
    \  ^ consider giving this closure parameter a type\n  |\n  = note: type must be\
    \ known at this point\n\nerror[E0061]: this function takes 0 arguments but 1 argument\
    \ was supplied\n   --> /tmp/tmpb4ky6zby.rs:7:20\n    |\n7   |     string.chars().count(|c|\
    \ *c != 0)\n    |                    ^^^^^ ----------- supplied 1 argument\n \
    \   |                    |\n    |                    expected 0 arguments\n  \
    \  |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpb4ky6zby.rs:7:5\n  |\n6 | fn strlen(string: String) -> isize {\n\
    \  |                              ----- expected `isize` because of return type\n\
    7 |     string.chars().count(|c| *c != 0)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().count(|c|\
    \ *c != 0).try_into().unwrap()\n  |                                      ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0282, E0308.\nFor more information about an error, try `rustc --explain\
    \ E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpeu5swag9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let len = string.len();\n\
    \    if len == 0 {\n        return 0;\n    }\n    len\n}\n\nfn main() {\n    let\
    \ candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n   \
    \ assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe51an5s1.rs:11:5\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n11 |     len\n   |     ^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |     len.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let s = string.to_string();\n\
    \    s.chars().count() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count(|x|\
    \ x >= 32) as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmp6kpnjzx_.rs:7:20\n    |\n7   |     string.chars().count(|x| x\
    \ >= 32) as isize\n    |                    ^^^^^ ----------- supplied 1 argument\n\
    \    |                    |\n    |                    expected 0 arguments\n \
    \   |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz_7rgkvp.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count()\
    \ + 1 // +1 for the terminating NUL\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3jv_r1jv.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.chars().count() + 1\
    \ // +1 for the terminating NUL\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n  |\n7 |     (string.chars().count() + 1).try_into().unwrap()\
    \ // +1 for the terminating NUL\n  |     +                          +++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpokk2wmp9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = string.length();\n    for i in 0..len {\n        len = string.chars().skip(len\
    \ - i).count();\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpghw_wxm8.rs:7:26\n  |\n7 |     let mut len = string.length();\n\
    \  |                          ^^^^^^ help: there is an associated function with\
    \ a similar name: `len`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghw_wxm8.rs:11:5\n\
    \   |\n6  | fn strlen(string: String) -> isize {\n   |                       \
    \       ----- expected `isize` because of return type\n...\n11 |     len\n   |\
    \     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n11 |     len.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwbmpvmfe.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo4civpoq.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphe40jb_h.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa2ovmim9.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = string.len();\n    len.checked_sub(1).checked_mul(2).unwrap_or(0)\n}\n\nfn\
    \ main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `checked_mul` found for enum `Option` in\
    \ the current scope\n --> /tmp/tmp3habqtky.rs:8:24\n  |\n8 |     len.checked_sub(1).checked_mul(2).unwrap_or(0)\n\
    \  |                        ^^^^^^^^^^^ method not found in `Option<usize>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsi54okgb.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgmxex820.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjg92t8dp.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjkepiwvi.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe03q7uay.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count();\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptxxkt82x.rs:6:30\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |    ------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    if string.len()\
    \ == 0 {\n        0\n    } else {\n        string.len() + 1\n    }\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpidcn938c.rs:10:9\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n10 |         string.len() + 1\n\
    \   |         ^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n10 |         (string.len() + 1).try_into().unwrap()\n   |       \
    \  +                +++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzucxw87c.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2n8bf1bu.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpny_rh5ak.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjxgnstnf.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().filter(|c|\
    \ !c.is_whitespace()).count()\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj_j6t7cy.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c| !c.is_whitespace()).count().try_into().unwrap()\n\
    \  |                                                          ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    for c in string.as_bytes() {\n        if *c == 0x00 {\n          \
    \  break;\n        }\n        len += 1;\n    }\n    len\n}\n\nfn main() {\n  \
    \  let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwm6erp9c.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzvx37nwy.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8dd_9mqd.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count();\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp11tr5al4.rs:6:30\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |    ------                    ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsczbg8mb.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.chars().count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = 0;\n    for ch in string.chars() {\n        len += 1;\n    }\n    len\n}\n\
    \nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let string =\
    \ string.to_string();\n    string.len()\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppf7q0ndf.rs:8:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     let string = string.to_string();\n\
    8 |     string.len()\n  |     ^^^^^^^^^^^^ expected `isize`, found `usize`\n \
    \ |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n8 |     string.len().try_into().unwrap()\n  |      \
    \           ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw1ubb08d.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmspfc_ux.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut len\
    \ = usize::MAX;\n    for ch in string.as_bytes() {\n        len = ch as usize\
    \ + 1;\n        if len == usize::MAX {\n            panic!(\"[E0210] String is\
    \ too long\");\n        }\n    }\n    len\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppzvsssfr.rs:14:5\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n14 |     len\n   |     ^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n14 |     len.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror[E0606]: casting `&u8` as `usize` is\
    \ invalid\n --> /tmp/tmppzvsssfr.rs:9:15\n  |\n9 |         len = ch as usize +\
    \ 1;\n  |               --^^^^^^^^^\n  |               |\n  |               cannot\
    \ cast `&u8` as `usize`\n  |               help: dereference the expression: `*ch`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0606.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe0xdgo7y.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    let mut n =\
    \ 0;\n    for ch in string.bytes() {\n        if ch < b'a' || ch > b'z' {\n  \
    \          n += 1;\n        }\n    }\n    n\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpav_9lmml.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfn strlen(string: String) -> isize {\n    string.len()\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptm1yejme.rs:7:5\n  |\n6 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n7 |     string.len()\n  |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.len().try_into().unwrap()\n\
    \  |                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
