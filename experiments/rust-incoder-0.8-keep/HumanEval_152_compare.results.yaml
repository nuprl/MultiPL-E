name: HumanEval_152_compare
language: rust
results:
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    guess[game.iter()].iter().cloned().enumerate().map(|(i, v)| (i as usize\
    \ - game).abs() - v).collect()\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `std::slice::Iter<'_,\
    \ isize>`\n  --> /tmp/tmpv_lo5ldk.rs:12:5\n   |\n12 |     guess[game.iter()].iter().cloned().enumerate().map(|(i,\
    \ v)| (i as usize - game).abs() - v).collect()\n   |     ^^^^^^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `std::slice::Iter<'_, isize>`\n\
    \   = note: required because of the requirements on the impl of `Index<std::slice::Iter<'_,\
    \ isize>>` for `Vec<isize>`\n\nerror[E0277]: cannot subtract `Vec<isize>` from\
    \ `usize`\n  --> /tmp/tmpv_lo5ldk.rs:12:77\n   |\n12 |     guess[game.iter()].iter().cloned().enumerate().map(|(i,\
    \ v)| (i as usize - game).abs() - v).collect()\n   |                         \
    \                                                    ^ no implementation for `usize\
    \ - Vec<isize>`\n   |\n   = help: the trait `Sub<Vec<isize>>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut guesser = Guess {\n        guess: guess[0..game.len() - 1],\n\
    \        index: 0,\n        matches: 0,\n        scores: Vec::new(),\n    };\n\
    \    guesser.matches += 1;\n    guesser.scores.push(game[0]);\n    while !guesser.scores.is_empty()\
    \ {\n        guesser.scores.push(game[guesser.index]);\n        let guess = guesser.scores.iter().cloned().collect();\n\
    \        if guesser.matches == guesser.scores.len() {\n            return guesser.scores.iter().cloned().collect();\n\
    \        }\n        if guesser.matches > guesser.scores.len() {\n            guesser.index\
    \ += 1;\n        }\n    }\n    vec![guesser.index, guesser.index].into_iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0422]: cannot find struct, variant or union type `Guess` in this\
    \ scope\n  --> /tmp/tmpxoka3f54.rs:12:23\n   |\n12 |     let mut guesser = Guess\
    \ {\n   |                       ^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0422`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut difference = guess[game.len()..].iter().cloned().collect::<Vec<isize>>();\n\
    \    \n    for index in game..game.len() {\n        difference.push((guess[index]\
    \ - game[index]) % 2) as isize;\n    }\n    \n    difference\n}\n\nfn main() {\n\
    \    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1],\
    \ vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3mqpp0fq.rs:14:24\n   |\n\
    14 |     for index in game..game.len() {\n   |                        ^^^^^^^^^^\
    \ expected struct `Vec`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `usize`\n\nerror[E0277]: the trait bound `Vec<isize>:\
    \ Step` is not satisfied\n  --> /tmp/tmp3mqpp0fq.rs:14:18\n   |\n14 |     for\
    \ index in game..game.len() {\n   |                  ^^^^^^^^^^^^^^^^ the trait\
    \ `Step` is not implemented for `Vec<isize>`\n   |\n   = help: the following other\
    \ types implement trait `Step`:\n             char\n             i128\n      \
    \       i16\n             i32\n             i64\n             i8\n           \
    \  isize\n             u128\n           and 5 others\n   = note: required because\
    \ of the requirements on the impl of `Iterator` for `std::ops::Range<Vec<isize>>`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `std::ops::Range<Vec<isize>>`\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `Vec<isize>`\n  --> /tmp/tmp3mqpp0fq.rs:15:26\n   |\n15 |    \
    \     difference.push((guess[index] - game[index]) % 2) as isize;\n   |      \
    \                    ^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `Vec<isize>`\n   = note: required because of the requirements on the impl\
    \ of `Index<Vec<isize>>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `Vec<isize>`\n  --> /tmp/tmp3mqpp0fq.rs:15:41\n   |\n15\
    \ |         difference.push((guess[index] - game[index]) % 2) as isize;\n   |\
    \                                         ^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `Vec<isize>`\n   = note: required because of the requirements\
    \ on the impl of `Index<Vec<isize>>` for `Vec<isize>`\n\nerror[E0605]: non-primitive\
    \ cast: `()` as `isize`\n  --> /tmp/tmp3mqpp0fq.rs:15:9\n   |\n15 |         difference.push((guess[index]\
    \ - game[index]) % 2) as isize;\n  "
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    \n    // Write your solution here\n    let mut wrong_guess = guess.clone();\n\
    \    let mut game_copy = game.clone();\n    \n    for i in 0..game.len() {\n \
    \       let mut new_guess = guess.clone();\n        new_guess[i] = game[i];\n\
    \        let result = compare(game_copy,new_guess);\n        if result.iter().any(|x|x\
    \ == i) {\n            wrong_guess[i] = 0;\n        } else {\n            wrong_guess[i]\
    \ = std::cmp::min(wrong_guess[i], result.iter().map(|x|x).sum());\n        }\n\
    \    }\n    wrong_guess\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp12owzjs_.rs:21:38\n   |\n\
    21 |         if result.iter().any(|x|x == i) {\n   |                         \
    \             ^ expected `isize`, found `usize`\n\nerror[E0277]: can't compare\
    \ `&isize` with `usize`\n  --> /tmp/tmp12owzjs_.rs:21:35\n   |\n21 |         if\
    \ result.iter().any(|x|x == i) {\n   |                                   ^^ no\
    \ implementation for `&isize == usize`\n   |\n   = help: the trait `PartialEq<usize>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::with_capacity(guess.len());\n    for index in 0..guess.len()\
    \ {\n        let mut resultIndex = index as usize;\n        let mut gameIndex\
    \ = index as usize;\n        loop {\n            if gameIndex >= game.len() {\n\
    \                break;\n            }\n            if game[gameIndex] == guess[resultIndex]\
    \ {\n                resultIndex = gameIndex;\n            } else {\n        \
    \        gameIndex += 1;\n            }\n        }\n        result[index] = resultIndex\
    \ - index as isize;\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvg6v9y_4.rs:26:39\n   |\n\
    26 |         result[index] = resultIndex - index as isize;\n   |             \
    \                          ^^^^^^^^^^^^^^ expected `usize`, found `isize`\n\n\
    error[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpvg6v9y_4.rs:26:37\n\
    \   |\n26 |         result[index] = resultIndex - index as isize;\n   |      \
    \                               ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvg6v9y_4.rs:28:5\n   |\n11 | fn compare(game: Vec<isize>,\
    \ guess: Vec<isize>) -> Vec<isize> {\n   |                                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    28 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // Your code here\n    let mut difference = vec![0; game.len()];\n  \
    \  for i in 0..game.len() {\n        if guess[i] != game[i] {\n            difference[i]\
    \ = (guess[i] - game[i]) as isize;\n        }\n    }\n    difference\n}\n\nfn\
    \ main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, -3, -3]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmp21a_a9le.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    \n    let guesses = guess.iter().cloned();\n\
    \    let scores = game.iter().cloned();\n    \n    guesses.for_each(|guess| {\n\
    \        let score: usize = scores[guess];\n        if score != 0 {\n        \
    \    let diff = abs(guess - score);\n            result.push(*diff);\n       \
    \ }\n    });\n\n    result\n}\n\nfn main() {\n    let candidate = compare;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpjdkpn9to.rs:20:24\n\
    \   |\n20 |             let diff = abs(guess - score);\n   |                 \
    \       ^^^ not found in this scope\n\nerror[E0608]: cannot index into a value\
    \ of type `Cloned<std::slice::Iter<'_, isize>>`\n  --> /tmp/tmpjdkpn9to.rs:18:28\n\
    \   |\n18 |         let score: usize = scores[guess];\n   |                  \
    \          ^^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjdkpn9to.rs:20:36\n\
    \   |\n20 |             let diff = abs(guess - score);\n   |                 \
    \                   ^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot\
    \ subtract `usize` from `isize`\n  --> /tmp/tmpjdkpn9to.rs:20:28\n   |\n20 | \
    \            let diff = abs(guess - score);\n   |                        --- ^^^^^^^^^^^^^\
    \ no implementation for `isize - usize`\n   |                        |\n   | \
    \                       required by a bound introduced by this call\n   |\n  \
    \ = help: the trait `Sub<usize>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0425, E0608.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = guess.clone();\n    for i in game.iter().rev()\
    \ {\n        result.insert(0, 0);\n        if result[0] == game[i] {\n       \
    \     result[0] = 0;\n        }\n        for j in game.iter() {\n            if\
    \ i != j && result[j] > result[j + 1] {\n                result[j] += result[j\
    \ + 1];\n                result[j + 1] = 0;\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpa2mht6he.rs:15:25\n\
    \   |\n15 |         if result[0] == game[i] {\n   |                         ^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpa2mht6he.rs:19:26\n\
    \   |\n19 |             if i != j && result[j] > result[j + 1] {\n   |       \
    \                   ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpa2mht6he.rs:19:38\n\
    \   |\n19 |             if i != j && result[j] > result[j + 1] {\n   |       \
    \                               ^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `&isize`\n  --> /tmp/tmpa2mht6he.rs:20:17\n   |\n20 |           \
    \      result[j] += result[j + 1];\n   |                 ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpa2mht6he.rs:20:"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    \n    let mut results: Vec<isize> = guess.clone(); // Copy game, since\
    \ we will modify it.\n    \n    let len = game.get_len();\n    \n    // Iterate\
    \ over each element in both arrays, incrementing a counter for each element\n\
    \    // if the counter is equal to the length of the original game array\n   \
    \ for i in 0..len {\n        let mut count = 0;\n        for (j, _) in game.iter().enumerate()\
    \ {\n            if i == j {\n                count += 1;\n            }\n   \
    \     }\n        results[i] = count;\n    }\n    \n    // If the counter is equal\
    \ to the length of the original game array, then we are done\n    for i in 0..len\
    \ {\n        if game[i] == 0 {\n            results[i] = 0;\n        } else {\n\
    \            results[i] = guess.iter().enumerate().filter(|(_, x)| *x == i).count();\n\
    \        }\n    }\n    \n    // Return the result\n    return results\n}\n\nfn\
    \ main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `get_len` found for struct `Vec<isize>` in\
    \ the current scope\n  --> /tmp/tmpku89y839.rs:15:20\n   |\n15 |     let len =\
    \ game.get_len();\n   |                    ^^^^^^^ help: there is an associated\
    \ function with a similar name: `set_len`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpku89y839.rs:34:73\n   |\n34 |             results[i] = guess.iter().enumerate().filter(|(_,\
    \ x)| *x == i).count();\n   |                                                \
    \                         ^ expected `isize`, found `usize`\n\nerror[E0277]: can't\
    \ compare `&isize` with `usize`\n  --> /tmp/tmpku89y839.rs:34:70\n   |\n34 | \
    \            results[i] = guess.iter().enumerate().filter(|(_, x)| *x == i).count();\n\
    \   |                                                                      ^^\
    \ no implementation for `&isize == usize`\n   |\n   = help: the trait `PartialEq<usize>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpku89y839.rs:34:26\n   |\n34 |             results[i] = guess.iter().enumerate().filter(|(_,\
    \ x)| *x == i).count();\n   |             ----------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |             |\n   |             expected\
    \ due to the type of this binding\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut guesses = guess.length;\n    for i in 0..guesses {\n        let\
    \ difference = guess[i] - game[i];\n        if difference < 0 {\n            guesses\
    \ = guesses - 1;\n        } else {\n            guesses = guesses + 1;\n     \
    \   }\n    }\n    let mut score = 0;\n    for i in 0..guesses {\n        score\
    \ = score + game[i];\n    }\n    for i in 0..guesses {\n        score = score\
    \ - guess[i];\n    }\n    return vec![score]\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0609]: no field `length` on type `Vec<isize>`\n  --> /tmp/tmpr16c95vq.rs:12:29\n\
    \   |\n12 |     let mut guesses = guess.length;\n   |                        \
    \     ^^^^^^ unknown field\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0609`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![0; game.len()];\n    let mut score = 0;\n    for e\
    \ in game {\n        // compare the two scores, if not matched, then reset to\
    \ 0\n        if guess[e] != game[e] {\n            score = 0;\n        }\n   \
    \     res[e] = score;\n    }\n    res\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpx86h_n12.rs:16:12\n\
    \   |\n16 |         if guess[e] != game[e] {\n   |            ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpx86h_n12.rs:16:24\n   |\n16 |         if guess[e]\
    \ != game[e] {\n   |                        ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpx86h_n12.rs:19:9\n   |\n19 |         res[e]\
    \ = score;\n   |         ^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut ret: Vec<isize> = guess.iter().cloned().collect();\n    for i\
    \ in ret.iter_mut() {\n        *i = game[i] as isize;\n    }\n    ret\n}\n\nfn\
    \ main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&mut isize`\n  -->\
    \ /tmp/tmp1el_zopf.rs:14:14\n   |\n14 |         *i = game[i] as isize;\n   | \
    \             ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&mut\
    \ isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<&mut isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut min_diff = cmp::min(0..game.len());\n    for score in game {\n\
    \        for guess in guess {\n            if score == guess {\n             \
    \   continue;\n            }\n            if score < guess {\n               \
    \ min_diff = cmp::min(min_diff, score - guess);\n            } else {\n      \
    \          min_diff = cmp::min(min_diff, guess - score);\n            }\n    \
    \    }\n    }\n    min_diff.iter().cloned().collect()\n}\n\nfn main() {\n    let\
    \ candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \  --> /tmp/tmphxd7srnl.rs:12:24\n   |\n12 |     let mut min_diff = cmp::min(0..game.len());\n\
    \   |                        ^^^ use of undeclared crate or module `cmp`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `cmp`\n  --> /tmp/tmphxd7srnl.rs:19:28\n\
    \   |\n19 |                 min_diff = cmp::min(min_diff, score - guess);\n  \
    \ |                            ^^^ use of undeclared crate or module `cmp`\n\n\
    error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n  -->\
    \ /tmp/tmphxd7srnl.rs:21:28\n   |\n21 |                 min_diff = cmp::min(min_diff,\
    \ guess - score);\n   |                            ^^^ use of undeclared crate\
    \ or module `cmp`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![0..game.len()];\n    let mut i = 0;\n    while\
    \ i < game.len() {\n        let j = i + 1;\n        if guess[i] != game[i] {\n\
    \            result[j] -= guess[i] == game[i] ? 1 : 0;\n        }\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1`\n\
    \  --> /tmp/tmpn8lpyiy8.rs:17:48\n   |\n17 |             result[j] -= guess[i]\
    \ == game[i] ? 1 : 0;\n   |                                                ^ expected\
    \ one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpn8lpyiy8.rs:21:5\n   |\n11 | fn compare(game: Vec<isize>, guess:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \          ---------- expected `Vec<isize>` because of return type\n...\n21 |\
    \     result\n   |     ^^^^^^ expected `isize`, found struct `std::ops::Range`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<std::ops::Range<usize>>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut differences = Vec::new();\n    for i in 0..guess.len() {\n  \
    \      if game[i] == guess[i] {\n            differences.push(0);\n        } else\
    \ {\n            differences.push(game[i] - guess[i]);\n        }\n    }\n   \
    \ differences\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![0; game.len()];\n    let mut i = 0;\n    while\
    \ i < game.len() {\n        if game[i] == guess[i] {\n            result[i] =\
    \ 0;\n        } else {\n            let delta = game[i] - guess[i];\n        \
    \    result[i] = if delta < 0 {\n                -delta\n            } else {\n\
    \                delta\n            };\n        }\n        i += 1;\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![0];\n    for (x, y) in game.iter_mut() {\n    \
    \    let mut current_diff = x;\n        if guess[x as usize] != y {\n        \
    \    current_diff -= y;\n        }\n        result.push(current_diff);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9rjoi1q6.rs:13:9\n   |\n\
    13 |     for (x, y) in game.iter_mut() {\n   |         ^^^^^^    ---------------\
    \ this expression has type `Option<&mut isize>`\n   |         |\n   |        \
    \ expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n    \
    \         found tuple `(_, _)`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // TODO: replace this by the correct implementation\n    let mut score\
    \ = 0\n    for i in 0..game.len() {\n        if game[i] == guess[i] {\n      \
    \      score += 0\n        } else {\n            score += guess[i] - game[i]\n\
    \        }\n    }\n    return score\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmp0y2mcr9w.rs:13:22\n\
    \   |\n13 |     let mut score = 0\n   |                      ^ help: add `;` here\n\
    14 |     for i in 0..game.len() {\n   |     --- unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0y2mcr9w.rs:21:12\n   |\n11 | fn compare(game:\
    \ Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |                       \
    \                             ---------- expected `Vec<isize>` because of return\
    \ type\n...\n21 |     return score\n   |            ^^^^^ expected struct `Vec`,\
    \ found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \   found type `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = guess.clone();\n    for index in guess.iter()\
    \ {\n        result[index] -= game[index];\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp85ys1zsg.rs:14:9\n\
    \   |\n14 |         result[index] -= game[index];\n   |         ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp85ys1zsg.rs:14:26\n\
    \   |\n14 |         result[index] -= game[index];\n   |                      \
    \    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    for j in 0..guess.len() {\n       \
    \ let mut dif = game[j] - guess[j];\n        if dif < 0 {\n            dif +=\
    \ game[j].abs() - guess.len();\n        }\n        result[j] = dif;\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp0_he4n3.rs:16:36\n   |\n\
    16 |             dif += game[j].abs() - guess.len();\n   |                   \
    \                 ^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot subtract `usize` from `isize`\n  --> /tmp/tmpp0_he4n3.rs:16:34\n   |\n\
    16 |             dif += game[j].abs() - guess.len();\n   |                   \
    \               ^ no implementation for `isize - usize`\n   |\n   = help: the\
    \ trait `Sub<usize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    game.iter().zip(guess.iter()).map(|(score,guess)| {\n        let difference\
    \ = if guess == score { 0 } else { abs(guess-score) };\n        difference\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp0rsa81k6.rs:13:57\n\
    \   |\n13 |         let difference = if guess == score { 0 } else { abs(guess-score)\
    \ };\n   |                                                         ^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![0; game.len()];\n    let mut game_size = game.len();\n\
    \    let mut guess_size = guess.len();\n    let mut game_index = 0;\n    let mut\
    \ guess_index = 0;\n    loop {\n        // If the game or guess is empty then\
    \ we are done with either one.\n        if game_size == 0 || guess_size == 0 {\n\
    \            break;\n        }\n        // If the game and guess have the same\
    \ length, then the game wins.\n        if game_size == guess_size {\n        \
    \    result[game_index] = 0;\n            break;\n        }\n        // Move the\
    \ game index by one and check it against the guess.\n        game_index += 1;\n\
    \        if game[game_index] == guess[guess_index] {\n            // If the game's\
    \ score is the same as the guess, then the game wins.\n            result[game_index]\
    \ = 0;\n            break;\n        }\n        // Move the guess index by one\
    \ and check it against the game.\n        guess_index += 1;\n        if game[game_index]\
    \ == guess[guess_index] {\n            // If the game's score is the same as the\
    \ guess, then the game wins.\n            result[game_index] = 0;\n          \
    \  break;\n        }\n        // If neither of these conditions holds then either\
    \ the game's score is lower\n        // than the guess or the guess is higher\
    \ than the game's score.\n        // The lower case score means the game won,\
    \ so we return 0.\n        if game[game_index] < guess[guess_index] {\n      \
    \      result[game_index] = 0;\n            break;\n        }\n        if game[game_index]\
    \ > guess[guess_index] {\n            result[game_index] = 0;\n            break;\n\
    \        }\n        // If the game's score is higher and the guess is lower, then\
    \ the guess wins.\n        if game[game_index] > guess[guess_index] {\n      \
    \      result[game_index] = game[game_index] - guess[guess_index];\n         \
    \   break;\n        }\n        // If the game's score is lower than the guess,\
    \ then the game wins.\n        result[game_index] = game[game_index] - guess[guess_index];\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, 0, 0]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpfjkrf61s.rs:65:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut diffs = Vec::new();\n    let mut diff = 0isize;\n    for &mut\
    \ diff in game[..] {\n        diff += guess\n            .iter()\n           \
    \ .find(|&mut guess| guess == diff)\n            .cloned()\n            .unwrap_or(diff);\n\
    \    }\n    diffs\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmp0xlz7nov.rs:14:22\n   |\n14 |     for &mut diff\
    \ in game[..] {\n   |                      ^^^^^^^^ expected an implementor of\
    \ trait `IntoIterator`\n   |\n   = note: the trait bound `[isize]: IntoIterator`\
    \ is not satisfied\n   = note: required because of the requirements on the impl\
    \ of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n   |\n14 | \
    \    for &mut diff in &game[..] {\n   |                      +\n14 |     for &mut\
    \ diff in &mut game[..] {\n   |                      ++++\n\nerror[E0277]: `[isize]`\
    \ is not an iterator\n  --> /tmp/tmp0xlz7nov.rs:14:22\n   |\n14 |     for &mut\
    \ diff in game[..] {\n   |                      ^^^^^^^^ expected an implementor\
    \ of trait `IntoIterator`\n   |\n   = note: the trait bound `[isize]: IntoIterator`\
    \ is not satisfied\n   = note: required because of the requirements on the impl\
    \ of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n   |\n14 | \
    \    for &mut diff in &game[..] {\n   |                      +\n14 |     for &mut\
    \ diff in &mut game[..] {\n   |                      ++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0xlz7nov.rs:17:20\n   |\n17 |             .find(|&mut guess|\
    \ guess == diff)\n   |                    ^^^^^------\n   |                  \
    \  |    |\n   |                    |    expected due to this\n   |           \
    \         types differ in mutability\n   |                    help: did you mean\
    \ `guess`: `&&&isize`\n   |\n   = note:      expected reference `&&isize`\n  \
    \         found mutable reference `&mut _`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut diffs = Vec::new();\n    for\
    \ g in guess {\n        let mut game_index = 0;\n        \n        for (i, score)\
    \ in game.iter().enumerate() {\n            if g == score {\n                result.push(0);\n\
    \            } else {\n                result.push(g - score);\n            }\n\
    \        }\n        result.push(0);\n        diffs.push(result.iter().map(|x|\
    \ *x).sum());\n    }\n    \n    for g in guess {\n        let mut game_index =\
    \ 0;\n        \n        for (i, score) in game.iter().enumerate() {\n        \
    \    if g == score {\n                result.push(0);\n            } else {\n\
    \                let diff = *g - score;\n                result[i] += diff;\n\
    \                result.push(-diff);\n            }\n        }\n        diffs.push(result.iter().map(|x|\
    \ *x).sum());\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphpikpb83.rs:18:21\n   |\n\
    18 |             if g == score {\n   |                     ^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |  \
    \           if g == *score {\n   |                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphpikpb83.rs:32:21\n   |\n32 |             if g == score\
    \ {\n   |                     ^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n32 |             if g == *score {\n\
    \   |                     +\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmphpikpb83.rs:35:28\n   |\n35 |                 let diff = *g - score;\n\
    \   |                            ^^\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    use std::cmp::PartialOrd;\n    let mut correct = false;\n    let mut\
    \ correct_diff: isize = 0;\n    for element in game.iter() {\n        let mut\
    \ guessed = false;\n        let mut guessed_diff: isize = 0;\n        for guess\
    \ in guess.iter() {\n            if element == guess {\n                guessed\
    \ = true;\n                guessed_diff += guess;\n            }\n        }\n\
    \        if !correct || guessed {\n            correct_diff = element - guessed_diff;\n\
    \            correct = guessed;\n        } else {\n            correct_diff +=\
    \ element;\n        }\n    }\n    if correct {\n        vec![correct_diff]\n \
    \   } else {\n        vec![std::cmp::abs(correct_diff)]\n    }\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in module `std::cmp`\n  --> /tmp/tmp5bvnwi9h.rs:34:24\n\
    \   |\n34 |         vec![std::cmp::abs(correct_diff)]\n   |                  \
    \      ^^^ not found in `std::cmp`\n\nwarning: the item `PartialOrd` is imported\
    \ redundantly\n   --> /tmp/tmp5bvnwi9h.rs:12:9\n    |\n12  |     use std::cmp::PartialOrd;\n\
    \    |         ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(unused_imports)]`\
    \ on by default\n\nwarning: unused import: `std::cmp::PartialOrd`\n  --> /tmp/tmp5bvnwi9h.rs:12:9\n\
    \   |\n12 |     use std::cmp::PartialOrd;\n   |         ^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut best = Vec::with_capacity(guess.len());\n    best.push(0);\n\n\
    \    for index in 0..guess.len() {\n        if game[index] != guess[index] {\n\
    \            best.push(abs(game[index] - guess[index]));\n        }\n    }\n \
    \   best\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp8jgpaxg_.rs:17:23\n\
    \   |\n17 |             best.push(abs(game[index] - guess[index]));\n   |    \
    \                   ^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut guesses = guess.clone();\n    let mut scores = game.clone();\n\
    \    guesses.sort_unstable();\n    scores.sort_unstable();\n    \n    let mut\
    \ result: Vec<isize> = guess.clone();\n    let mut i = 0;\n    \n    while i <\
    \ guesses.len() && i < scores.len() {\n        if guesses[i] == scores[i] {\n\
    \            result.push(i + 1);\n            i += 2;\n        } else {\n    \
    \        let mut cur = i;\n            guesses[cur] -= 1;\n            scores[cur]\
    \ -= 1;\n            i += 1;\n        }\n    }\n    \n    if i == scores.len()\
    \ {\n        result\n    } else {\n        let mut cur = i;\n        result.push(scores[cur]);\n\
    \        i += 1;\n    }\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl9xughv_.rs:22:25\n   |\n\
    22 |             result.push(i + 1);\n   |                         ^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n22 |             result.push((i\
    \ + 1).try_into().unwrap());\n   |                         +     +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl9xughv_.rs:34:12\n   |\n34 |\
    \       } else {\n   |  ____________^\n35 | |         let mut cur = i;\n36 | |\
    \         result.push(scores[cur]);\n37 | |         i += 1;\n38 | |     }\n  \
    \ | |_____^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut diff_vec = Vec::<isize>::new();\n    diff_vec.resize(guess.len(),\
    \ 0);\n    let mut num_matches = Vec::<isize>::new();\n    let mut num_matches_max\
    \ = game[0];\n    let mut num_matches_min = game[0];\n    let mut total_guess\
    \ = game[0];\n    for i in 0..guess.len() {\n        total_guess += guess[i];\n\
    \    }\n    for i in 0..game.len() {\n        num_matches[i] = game[i] - total_guess;\n\
    \        num_matches_max += num_matches[i];\n        num_matches_min += num_matches[i];\n\
    \    }\n    for i in 0..guess.len() {\n        if num_matches[i] < num_matches_min\
    \ {\n            diff_vec[i] = num_matches[i] - num_matches_min;\n        } else\
    \ if num_matches[i] > num_matches_max {\n            diff_vec[i] = num_matches_max\
    \ - num_matches[i];\n        } else {\n            diff_vec[i] = num_matches[i]\
    \ - num_matches_max;\n        }\n    }\n    for i in 0..diff_vec.len() {\n   \
    \     if diff_vec[i] > 0 {\n            diff_vec[i] = -diff_vec[i];\n        }\n\
    \    }\n    for i in 0..diff_vec.len() {\n        if diff_vec[i] < 0 {\n     \
    \       diff_vec[i] = -diff_vec[i];\n        }\n    }\n    diff_vec\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmplq6i5jh5.rs:22:9\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut num_matches = game.len();\n    for i in 0..num_matches {\n  \
    \      let mut guess_count = 0;\n        let mut score = 0;\n        for j in\
    \ 0..num_matches {\n            if j == i {\n                continue;\n     \
    \       }\n            if guess[j] == game[i] {\n                guess_count++;\n\
    \                score += 2;\n            }\n        }\n        if guess_count\
    \ == 1 {\n            score += 1;\n        }\n        score += abs(guess - game[i])\
    \ as isize;\n        num_matches = guess_count;\n    }\n    let mut result: Vec<isize>\
    \ = vec![0; game.len()];\n    for i in 0..num_matches {\n        result[i] = score;\n\
    \    }\n    return result;\n}\n\nfn main() {\n    let candidate = compare;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpbea76z3r.rs:21:28\n\
    \   |\n21 |                 guess_count++;\n   |                            ^^\
    \ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n21 |   \
    \              { let tmp = guess_count; guess_count += 1; tmp };\n   |       \
    \          +++++++++++            ~~~~~~~~~~~~~~~~~~~~~~~~~\n21 -            \
    \     guess_count++;\n21 +                 guess_count += 1;\n   | \n\nerror[E0425]:\
    \ cannot find function `abs` in this scope\n  --> /tmp/tmpbea76z3r.rs:28:18\n\
    \   |\n28 |         score += abs(guess - game[i]) as isize;\n   |            \
    \      ^^^ not found in this scope\n\nerror[E0425]: cannot find value `score`\
    \ in this scope\n  --> /tmp/tmpbea76z3r.rs:33:21\n   |\n33 |         result[i]\
    \ = score;\n   |                     ^^^^^ not found in this scope\n\nerror[E0369]:\
    \ cannot subtract `isize` from `Vec<isize>`\n  --> /tmp/tmpbea76z3r.rs:28:28\n\
    \   |\n28 |         score += abs(guess - game[i]) as isize;\n   |            \
    \          ----- ^ ------- isize\n   |                      |\n   |          \
    \            Vec<isize>\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0369, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut total = 0\n\n    for i in 0..game.len() {\n        for j in 0..guess.len()\
    \ {\n            if game[i] == guess[j] {\n                total += 0\n      \
    \      } else {\n                total += game[i] - guess[j]\n            }\n\
    \        }\n    }\n\n    let mut result = vec![0; game.len()]\n\n    for i in\
    \ 0..game.len() {\n        result[i] = total - game[i]\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmpawctwstj.rs:12:22\n\
    \   |\n12 |     let mut total = 0\n   |                      ^ help: add `;` here\n\
    13 | \n14 |     for i in 0..game.len() {\n   |     --- unexpected token\n\nerror:\
    \ expected `;`, found keyword `for`\n  --> /tmp/tmpawctwstj.rs:24:41\n   |\n24\
    \ |     let mut result = vec![0; game.len()]\n   |                           \
    \              ^ help: add `;` here\n25 | \n26 |     for i in 0..game.len() {\n\
    \   |     --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // Step 1: Sort both arrays\n    game = game.iter().cloned().sorted();\n\
    \    guess = guess.iter().cloned().sorted();\n    \n    // Step 2: Loop over both\
    \ arrays, compare\n    let mut delta: Vec<isize> = guess.clone();\n    for i in\
    \ 0..game.len() {\n        // Step 3: compare each index\n        let mut delta2\
    \ = delta.clone();\n        for j in 0..delta2.len() {\n            // Step 4:\
    \ compare the values at both indexes, and if the values match\n            if\
    \ game[i] == guess[j] {\n                // Step 5: If the values are the same,\
    \ add the difference between the two\n                delta2[j] += (guess[j] -\
    \ game[i]);\n            } else {\n                // Step 6: If the values don't\
    \ match, add the difference between the two values\n                delta2[j]\
    \ += (guess[j] - game[i]);\n            }\n        }\n        // Step 7: Store\
    \ the final difference array into the delta array\n        delta = delta2;\n \
    \   }\n    delta\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmp1sapugfv.rs:25:30\n\
    \   |\n25 |                 delta2[j] += (guess[j] - game[i]);\n   |         \
    \                     ^                  ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n25 -                 delta2[j]\
    \ += (guess[j] - game[i]);\n25 +                 delta2[j] += guess[j] - game[i];\n\
    \   | \n\nwarning: unnecessary parentheses around assigned value\n  --> /tmp/tmp1sapugfv.rs:28:30\n\
    \   |\n28 |                 delta2[j] += (guess[j] - game[i]);\n   |         \
    \                     ^                  ^\n   |\nhelp: remove these parentheses\n\
    \   |\n28 -                 delta2[j] += (guess[j] - game[i]);\n28 +         \
    \        delta2[j] += guess[j] - game[i];\n   | \n\nerror[E0599]: no method named\
    \ `sorted` found for struct `Cloned` in the current scope\n  --> /tmp/tmp1sapugfv.rs:13:33\n\
    \   |\n13 |     game = game.iter().cloned().sorted();\n   |                  \
    \               ^^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\
    \nerror[E0599]: no method named `sorted` found for struct `Cloned` in the current\
    \ scope\n  --> /tmp/tmp1sapugfv.rs:14:35\n   |\n14 |     guess = guess.iter().cloned().sorted();\n\
    \   |                                   ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to 2 previous errors; 2 warnings emitted\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut difference = Vec::new();\n\n    for i in game.iter().cloned()\
    \ {\n        for j in guess.iter().cloned() {\n            if i == j {\n     \
    \           difference.push(i);\n            }\n        }\n    }\n\n    for i\
    \ in difference.iter().cloned() {\n        difference.push(i + game[i - guess.iter().cloned().find(|&x|\
    \ x == i).unwrap()]);\n    }\n\n    difference\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpoh2l6zaa.rs:23:29\n\
    \   |\n23 |         difference.push(i + game[i - guess.iter().cloned().find(|&x|\
    \ x == i).unwrap()]);\n   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut total_errors = Vec::<isize>::new();\n    for i in 0..game.len()\
    \ {\n        let mut current_error = Vec::<isize>::new();\n        for j in 0..guess.len()\
    \ {\n            if game[i] == guess[j] {\n                current_error.push(0);\n\
    \            } else {\n                current_error.push(abs(game[i] - guess[j]));\n\
    \            }\n        }\n        total_errors.push(current_error);\n    }\n\
    \    return total_errors;\n}\n\nfn main() {\n    let candidate = compare;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpexzj8pce.rs:19:36\n\
    \   |\n19 |                 current_error.push(abs(game[i] - guess[j]));\n   |\
    \                                    ^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpexzj8pce.rs:22:27\n   |\n22 |         total_errors.push(current_error);\n\
    \   |                           ^^^^^^^^^^^^^ expected `isize`, found struct `Vec`\n\
    \   |\n   = note: expected type `isize`\n            found struct `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // Your code here\n    if game.len() == guess.len() {\n        let mut\
    \ ans = Vec::with_capacity(game.len());\n        for i in 0..game.len() {\n  \
    \          if game[i] == guess[i] {\n                ans.push(0)\n           \
    \ } else {\n                ans.push(abs(game[i] - guess[i]))\n            }\n\
    \        }\n        return ans;\n    } else {\n        panic!(\"compare: game\
    \ and guess have different length!\");\n    }\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpphrv_dtm.rs:19:26\n\
    \   |\n19 |                 ans.push(abs(game[i] - guess[i]))\n   |          \
    \                ^^^ help: a local variable with a similar name exists: `ans`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut score: Vec<isize> = game.clone();\n    score.push(0);\n    for\
    \ guess in guess.iter().rev() {\n        let diff = score[guess.saturating_sub(game.len())];\n\
    \        if guess == 0 {\n            score.push(diff);\n        } else {\n  \
    \          score.push(diff - guess);\n        }\n    }\n    score\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc5jp0k09.rs:15:47\n   |\n\
    15 |         let diff = score[guess.saturating_sub(game.len())];\n   |       \
    \                                        ^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n15 |         let diff = score[guess.saturating_sub(game.len().try_into().unwrap())];\n\
    \   |                                                         ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc5jp0k09.rs:15:20\n\
    \   |\n15 |         let diff = score[guess.saturating_sub(game.len())];\n   |\
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpc5jp0k09.rs:16:18\n   |\n16 |         if guess ==\
    \ 0 {\n   |                  ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    //let guess = game.iter().cloned().collect();\n    \n    let mut guessed_correctly\
    \ = false;\n    \n    for i in game.iter_mut() {\n        if *i == *guess {\n\
    \            *i = 0;\n            guessed_correctly = true;\n        }\n    }\n\
    \    if guessed_correctly {\n        Vec::new()\n    } else {\n        let mut\
    \ dists = Vec::new();\n        for i in game.iter_mut() {\n            let diff\
    \ = *guess - *i;\n            if diff > 0 {\n                dists.push(-diff);\n\
    \            } else if diff < 0 {\n                dists.push(diff);\n       \
    \     } else {\n                dists.push(*i);\n            }\n        }\n  \
    \      dists.into_iter().cloned().collect().cloned()\n    }\n}\n\nfn main() {\n\
    \    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1],\
    \ vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpojrtxw2s.rs:17:18\n   |\n\
    17 |         if *i == *guess {\n   |                  ^^^^^^ expected `isize`,\
    \ found slice `[isize]`\n\nerror[E0369]: cannot subtract `isize` from `[isize]`\n\
    \  --> /tmp/tmpojrtxw2s.rs:27:31\n   |\n27 |             let diff = *guess - *i;\n\
    \   |                        ------ ^ -- isize\n   |                        |\n\
    \   |                        [isize]\n\nerror[E0271]: type mismatch resolving\
    \ `<std::vec::IntoIter<isize> as Iterator>::Item == &_`\n    --> /tmp/tmpojrtxw2s.rs:36:27\n\
    \     |\n36   |         dists.into_iter().cloned().collect().cloned()\n     |\
    \                           ^^^^^^ expected reference, found `isize`\n     |\n\
    \     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `collect` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpojrtxw2s.rs:36:36\n   |\n36 |           dists.into_iter().cloned().collect().cloned()\n\
    \   |                                      ^^^^^^^ method cannot be called on\
    \ `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait bounds\n   |\n\
    \   = note: the following trait bounds were not satisfied:\n           `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n      \
    \     which is required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0308, E0369, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // Solution 1 using loop\n    let mut result = Vec::new();\n    for i\
    \ in game..=guess.len() {\n        let difference = i - (guess as isize) - game;\n\
    \        result.push(difference);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp136mh9hi.rs:14:21\n   |\n\
    14 |     for i in game..=guess.len() {\n   |                     ^^^^^^^^^^^ expected\
    \ struct `Vec`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `usize`\n\nerror[E0277]: the trait bound `Vec<isize>:\
    \ Step` is not satisfied\n  --> /tmp/tmp136mh9hi.rs:14:14\n   |\n14 |     for\
    \ i in game..=guess.len() {\n   |              ^^^^^^^^^^^^^^^^^^ the trait `Step`\
    \ is not implemented for `Vec<isize>`\n   |\n   = help: the following other types\
    \ implement trait `Step`:\n             char\n             i128\n            \
    \ i16\n             i32\n             i64\n             i8\n             isize\n\
    \             u128\n           and 5 others\n   = note: required because of the\
    \ requirements on the impl of `Iterator` for `RangeInclusive<Vec<isize>>`\n  \
    \ = note: required because of the requirements on the impl of `IntoIterator` for\
    \ `RangeInclusive<Vec<isize>>`\n\nerror[E0369]: cannot subtract `isize` from `Vec<isize>`\n\
    \  --> /tmp/tmp136mh9hi.rs:15:28\n   |\n15 |         let difference = i - (guess\
    \ as isize) - game;\n   |                          - ^ ---------------- isize\n\
    \   |                          |\n   |                          Vec<isize>\n\n\
    error[E0605]: non-primitive cast: `Vec<isize>` as `isize`\n  --> /tmp/tmp136mh9hi.rs:15:30\n\
    \   |\n15 |         let difference = i - (guess as isize) - game;\n   |      \
    \                        ^^^^^^^^^^^^^^^^ an `as` expression can only be used\
    \ to convert between primitive types or to coerce to a specific trait object\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0369, E0605.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![0; game.len()];\n    let mut correct = 0;\n   \
    \ for (i, &score) in game.iter().enumerate() {\n        if guess[i] == score {\n\
    \            correct += 1;\n        }\n        result[i] = std::cmp::min(guess[i],\
    \ score) as isize;\n    }\n    if correct == game.len() {\n        result[0] =\
    \ 0;\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 2, -2]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpiqlx_05v.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut guess = guess.to_owned();\n    let mut game = game.to_owned();\n\
    \n    // Initialize guess and game to zero\n    let mut guessed_correct = match\
    \ guess.iter().cloned() {\n        None => None,\n        Some(&x) => Some(0),\n\
    \    };\n    let mut guessed_wrong = match game.iter().cloned() {\n        None\
    \ => None,\n        Some(&x) => Some(0),\n    };\n\n    // Go through both arrays\n\
    \    for i in 0..game.len() {\n        let delta = match guessed_wrong.take(i).map(|x|\
    \ x - game[i]).unwrap_or_default() {\n            None => None,\n            Some(x)\
    \ => Some(x),\n        };\n        guessed_wrong = match guessed_wrong.take(i\
    \ + 1).map(|x| x - game[i]).unwrap_or_default() {\n            None => None,\n\
    \            Some(x) => Some(x),\n        };\n        guessed_correct = match\
    \ guessed_correct.take(i + 1).map(|x| x - game[i]).unwrap_or_default() {\n   \
    \         None => None,\n            Some(x) => Some(x),\n        };\n       \
    \ guessed_wrong = match guessed_wrong.take(i + 1).map(|x| x - guess[i]).unwrap_or_default()\
    \ {\n            None => None,\n            Some(x) => Some(x),\n        };\n\
    \        guessed_correct = match guessed_correct.take(i + 1).map(|x| x - guess[i]).unwrap_or_default()\
    \ {\n            None => None,\n            Some(x) => Some(x),\n        };\n\
    \    }\n\n    // Return final result\n    guessed_correct.iter().map(|x| x).collect()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiva_77_j.rs:17:9\n   |\n\
    16 |     let mut guessed_correct = match guess.iter().cloned() {\n   |       \
    \                              --------------------- this expression has type\
    \ `Cloned<std::slice::Iter<'_, isize>>`\n17 |         None => None,\n   |    \
    \     ^^^^ expected struct `Cloned`, found enum `Option`\n   |\n   = note: expected\
    \ struct `Cloned<std::slice::Iter<'_, isize>>`\n                found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpiva_77_j.rs:18:9\n   |\n16 | \
    \    let mut guessed_correct = match guess.iter().cloned() {\n   |           \
    \                          --------------------- this expression has type `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n17 |         None => None,\n18 |         Some(&x) => Some(0),\n  \
    \ |         ^^^^^^^^ expected struct `Cloned`, found enum `Option`\n   |\n   =\
    \ note: expected struct `Cloned<std::slice::Iter<'_, isize>>`\n              \
    \  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiva_77_j.rs:21:9\n\
    \   |\n20 |     let mut guessed_wrong = match game.iter().cloned() {\n   |   \
    \                                -------------------- this expression has type\
    \ `Cloned<std::slice::Iter<'_, isize>>`\n21 |         None => None,\n   |    \
    \     ^^^^ expected struct `Cloned`, found enum `Option`\n   |\n   = note: expected\
    \ struct `Cloned<std::slice::Iter<'_, isize>>`\n                found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpiva_77_j.rs:22:9\n   |\n20 | \
    \    let mut guessed_wrong = match game.iter().cloned() {\n   |              \
    \                     -------------------- this expression has type `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n21 |         None => None,\n22 |         Some(&x) => Some(0),\n  \
    \ |         ^^^^^^^^ expected struct `Cloned`, found enum `Option`\n   |\n   =\
    \ note: expected struct `Cloned<std::slice::Iter<'_, isize>>`\n              \
    \  found enum `Option<_>`\n\nerror[E0061]: this function takes 0 arguments but\
    \ 1 argument was supplied\n    --> /tmp/tmpiva_77_j.rs:27:41\n     |\n27   | \
    \        let delta = match "
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut results: Vec<isize> = game.len();\n    for i in 0..game.len()\
    \ {\n        let difference = game[i] - guess[i];\n        results[i] = if difference\
    \ < 0 {\n            0\n        } else {\n            difference\n        };\n\
    \    }\n    results\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvbbzhcyb.rs:12:35\n   |\n\
    12 |     let mut results: Vec<isize> = game.len();\n   |                     \
    \ ----------   ^^^^^^^^^^ expected struct `Vec`, found `usize`\n   |         \
    \             |\n   |                      expected due to this\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n                found type `usize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut score = 0;\n    for i in 0..game.len() {\n        if guess ==\
    \ game {\n            return vec![score];\n        }\n        score += guess[i]\
    \ - game[i];\n    }\n    return vec![score];\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpkfjr86vb.rs:24:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut mut_game = game;\n    mut_game.clear();\n    mut_game.extend(guess.iter().cloned());\n\
    \    mut_game.sort();\n\n    let mut ans = Vec::new();\n    for i in 0..game.len()\
    \ {\n        let mut j = i;\n        while j < game.len() {\n            if j\
    \ == i {\n                continue;\n            }\n            if game[j] < game[i]\
    \ {\n                j += 1;\n                ans.push(i);\n            } else\
    \ {\n                break;\n            }\n        }\n    }\n    ans\n}\n\nfn\
    \ main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp23rg_7tu.rs:32:5\n   |\n\
    11 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |   \
    \                                                 ---------- expected `Vec<isize>`\
    \ because of return type\n...\n32 |     ans\n   |     ^^^ expected `isize`, found\
    \ `usize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<usize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // TODO: implement this function\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5vn157nx.rs:11:52\n   |\n\
    11 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |   \
    \ -------                                         ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \       found unit type `()`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    if game.len() != guess.len() {\n        vec![]\n    } else {\n      \
    \  let mut result = vec![0; game.len()];\n\n        for i in 0..game.len() {\n\
    \            result[i] = game[i] - guess[i];\n        }\n\n        result\n  \
    \  }\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    match game.iter().zip(guess.iter()).count(|&(a,b)| a == b) {\n      \
    \  0 => guess, \n        1 => game, \n        2 => guess.iter().zip(game.iter()).map(|&(a,b)|\
    \ a - b).collect(),\n        _ => game.iter().zip(guess.iter()).map(|&(a,b)| if\
    \ a != b { -(b-a) } else { 0 }).collect(),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpsxm2o7py.rs:12:41\n    |\n12  |     match game.iter().zip(guess.iter()).count(|&(a,b)|\
    \ a == b) {\n    |                                         ^^^^^ ---------------\
    \ supplied 1 argument\n    |                                         |\n    |\
    \                                         expected 0 arguments\n    |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsxm2o7py.rs:15:49\n\
    \   |\n15 |         2 => guess.iter().zip(game.iter()).map(|&(a,b)| a - b).collect(),\n\
    \   |                                                 ^^^^^-\n   |           \
    \                                      |    |\n   |                          \
    \                       |    expected due to this\n   |                      \
    \                           expected tuple, found reference\n   |\n   = note:\
    \  expected tuple `(&isize, &isize)`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsxm2o7py.rs:16:49\n   |\n16 |         _ => game.iter().zip(guess.iter()).map(|&(a,b)|\
    \ if a != b { -(b-a) } else { 0 }).collect(),\n   |                          \
    \                       ^^^^^-\n   |                                         \
    \        |    |\n   |                                                 |    expected\
    \ due to this\n   |                                                 expected tuple,\
    \ found reference\n   |\n   = note:  expected tuple `(&isize, &isize)`\n     \
    \      found reference `&_`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0061, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut delta = 0;\n    for guess in guess {\n        if game[guess]\
    \ == 0 {\n            delta += guess as isize;\n        }\n    }\n    for game\
    \ in game {\n        if game[guess] == 0 {\n            delta += -guess as isize;\n\
    \        }\n    }\n    delta\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnr05mop_.rs:14:12\n\
    \   |\n14 |         if game[guess] == 0 {\n   |            ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0608]: cannot index into a value of\
    \ type `isize`\n  --> /tmp/tmpnr05mop_.rs:19:12\n   |\n19 |         if game[guess]\
    \ == 0 {\n   |            ^^^^^^^^^^^\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `Vec<isize>`\n  --> /tmp/tmpnr05mop_.rs:20:22\n   |\n20 |      \
    \       delta += -guess as isize;\n   |                      ^^^^^^ cannot apply\
    \ unary operator `-`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnr05mop_.rs:23:5\n\
    \   |\n11 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n\
    \   |                                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n23 |     delta\n   |     ^^^^^ expected struct\
    \ `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n      \
    \          found type `isize`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308, E0600, E0608.\nFor more\
    \ information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut guesses = guess as isize;\n    let mut diff = game[0] as isize;\n\
    \    for &i in game.iter().rev() {\n        if i == guesses {\n            guesses\
    \ = 0;\n        }\n        else {\n            guesses += i;\n        }\n    \
    \    if guesses == 0 {\n            diff += i;\n        }\n        else {\n  \
    \          diff -= i;\n        }\n    }\n    diff as Vec<isize>\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0605]: non-primitive cast: `Vec<isize>` as `isize`\n  --> /tmp/tmpjp6prx0i.rs:12:23\n\
    \   |\n12 |     let mut guesses = guess as isize;\n   |                      \
    \ ^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive\
    \ types or to coerce to a specific trait object\n\nerror[E0605]: non-primitive\
    \ cast: `isize` as `Vec<isize>`\n  --> /tmp/tmpjp6prx0i.rs:28:5\n   |\n28 |  \
    \   diff as Vec<isize>\n   |     ^^^^^^^^^^^^^^^^^^ an `as` expression can only\
    \ be used to convert between primitive types or to coerce to a specific trait\
    \ object\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0605`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut diffs = Vec::new();\n    for i in 0..game.len() {\n        diffs.push(abs(game[i]\
    \ - guess[i]))\n    }\n    diffs\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp2mwjo488.rs:14:20\n\
    \   |\n14 |         diffs.push(abs(game[i] - guess[i]))\n   |                \
    \    ^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut best_guess = Vec::<isize>::new();\n    let mut best_score = Vec::<isize>::new();\n\
    \    for (index, score) in game.iter().enumerate() {\n        if guess[index]\
    \ == score {\n            best_score.push(0);\n        } else {\n            let\
    \ mut diff = guess[index] - score;\n            if diff < 0 {\n              \
    \  diff *= -1;\n            }\n            best_score.push(diff);\n        }\n\
    \    }\n    \n    for index in 0..best_score.len() {\n        let difference =\
    \ best_score[index];\n        if best_guess[index] != 0 {\n            best_guess[index]\
    \ += difference;\n        } else {\n            best_guess[index] = difference;\n\
    \        }\n    }\n    \n    \n    best_guess\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_0vp9rs7.rs:15:28\n   |\n\
    15 |         if guess[index] == score {\n   |                            ^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n15 |         if guess[index] == *score {\n   |                        \
    \    +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    game.iter().zip(guess.iter()).cloned().zip( game.iter().cloned().zip(guess.iter().cloned()).cloned()).filter(|&(&i1,&i2)|i1\
    \ != i2).map(|(&i1,&i2)| abs(i1-i2)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmprjrqe2kq.rs:12:152\n\
    \   |\n12 | ...oned()).filter(|&(&i1,&i2)|i1 != i2).map(|(&i1,&i2)| abs(i1-i2)).collect()\n\
    \   |                                                         ^^^ not found in\
    \ this scope\n\nerror[E0271]: type mismatch resolving `<Zip<std::slice::Iter<'_,\
    \ isize>, std::slice::Iter<'_, isize>> as Iterator>::Item == &_`\n    --> /tmp/tmprjrqe2kq.rs:12:35\n\
    \     |\n12   |     game.iter().zip(guess.iter()).cloned().zip( game.iter().cloned().zip(guess.iter().cloned()).cloned()).filter(|&(&i1,&i2)|i1\
    \ != i2).ma...\n     |                                   ^^^^^^ expected reference,\
    \ found tuple\n     |\n     = note: expected reference `&_`\n                \
    \    found tuple `(&isize, &isize)`\nnote: required by a bound in `cloned`\n\n\
    error[E0599]: the method `zip` exists for struct `Cloned<Zip<std::slice::Iter<'_,\
    \ isize>, std::slice::Iter<'_, isize>>>`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmprjrqe2kq.rs:12:44\n   |\n12 |        game.iter().zip(guess.iter()).cloned().zip(\
    \ game.iter().cloned().zip(guess.iter().cloned()).cloned()).filter(|&(&i1,&i2)|i1\
    \ != i2).ma...\n   |                                               ^^^ method\
    \ cannot be called on `Cloned<Zip<std::slice::Iter<'_, isize>, std::slice::Iter<'_,\
    \ isize>>>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<Zip<std::slice::Iter<'_, isize>, std::slice::Iter<'_,\
    \ isize>> as Iterator>::Item = &_`\n           which is required by `Cloned<Zip<std::slice::Iter<'_,\
    \ isize>, std::slice::Iter<'_, isize>>>: Iterator`\n           `Cloned<Zip<std::slice::Iter<'_,\
    \ isize>, std::slice::Iter<'_, isize>>>: Iterator`\n           which is required\
    \ by `&mut Cloned<Zip<std::slice::Iter<'_, isize>, std::slice::Iter<'_, isize>>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, Cloned<std::slice::Iter<'_, isize>>> as Iterator>::Item == &_`\n  \
    \  --> /tmp/tmprjrqe2kq.rs:12:97\n     |\n12   |     game.iter().zip(guess.iter()).c"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut diffs = Vec::<isize>::with_capacity(guess.len());\n    for i\
    \ in 0..guess.len() {\n        if game[i] < guess[i] { diffs.insert(i, -game[i]);\
    \ }\n        else { diffs.insert(i, game[i] - guess[i]); }\n    }\n    return\
    \ diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    \n    let game = game.reduce(0, |x,y| x + y);\n    let guess = guess.reduce(0,\
    \ |x,y| x + y);\n    \n    let mut diff = guess;\n    let mut correct = guess;\n\
    \    let mut offs = 0;\n    \n    for i in 0..guess.len() {\n        if game[i]\
    \ < guess[i] {\n            diff += guess[i] - game[i]\n        } else {\n   \
    \         correct += guess[i] - game[i]\n            offs += game[i] - guess[i]\n\
    \        }\n    }\n    \n    diff += offs\n    correct\n}\n\nfn main() {\n   \
    \ let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `offs`\n  --> /tmp/tmpmcyx3o7r.rs:24:42\n  \
    \ |\n24 |             correct += guess[i] - game[i]\n   |                    \
    \                      ^ help: add `;` here\n25 |             offs += game[i]\
    \ - guess[i]\n   |             ---- unexpected token\n\nerror: expected `;`, found\
    \ `correct`\n  --> /tmp/tmpmcyx3o7r.rs:29:17\n   |\n29 |     diff += offs\n  \
    \ |                 ^ help: add `;` here\n30 |     correct\n   |     ------- unexpected\
    \ token\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpmcyx3o7r.rs:13:21\n\
    \    |\n13  |       let game = game.reduce(0, |x,y| x + y);\n    |           \
    \            ^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n     \
    \       which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0599]:\
    \ `Vec<isize>` is not an iterator\n   --> /tmp/tmpmcyx3o7r.rs:14:23\n    |\n14\
    \  |       let guess = guess.reduce(0, |x,y| x + y);\n    |                  \
    \       ^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n     \
    \       which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut guesses = 0;\n    let mut scores = 0;\n    for index in 0..game.len()\
    \ {\n        if game[index] == guess[index] {\n            guesses += 1;\n   \
    \         scores += 1;\n        }\n    }\n    let mut results = vec![0; game.len()];\n\
    \    for index in 0..game.len() {\n        if game[index] == guess[index] {\n\
    \            results[index] = 0;\n        } else {\n            results[index]\
    \ = abs(guess[index] - game[index]);\n        }\n    }\n    if guesses == game.len()\
    \ {\n        results\n    } else {\n        results\n    }\n}\n\nfn main() {\n\
    \    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1],\
    \ vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpize1d7_1.rs:25:30\n\
    \   |\n25 |             results[index] = abs(guess[index] - game[index]);\n  \
    \ |                              ^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut diff = Vec::<isize>::new();\n    diff.push(game[0]);\n    for\
    \ i in 1..game.len() {\n        if game[i] == guess[0] {\n            diff[0]\
    \ = 0;\n        } else {\n            diff[0] += abs2(guess[0] - game[i]);\n \
    \       }\n    }\n    for j in 1..guess.len() {\n        if game[j] != guess[j]\
    \ {\n            diff[j] = abs2(guess[j] - game[j]);\n        }\n    }\n    diff\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs2` in this scope\n  --> /tmp/tmpamkq00vw.rs:18:24\n\
    \   |\n18 |             diff[0] += abs2(guess[0] - game[i]);\n   |           \
    \             ^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `abs2` in this scope\n  --> /tmp/tmpamkq00vw.rs:23:23\n   |\n23 |          \
    \   diff[j] = abs2(guess[j] - game[j]);\n   |                       ^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut distance = Vec::<isize>::with_capacity(guess.length());\n   \
    \ for idx in 0..guess.length() {\n        if game[idx] == guess[idx] {\n     \
    \       distance[idx] = 0;\n        } else {\n            let diff = if guess[idx]\
    \ > game[idx] {\n                game[idx] - guess[idx]\n            } else {\n\
    \                guess[idx] - game[idx]\n            };\n            distance[idx]\
    \ = if diff == 0 {\n                0\n            } else {\n                diff\n\
    \            };\n        }\n    }\n    distance\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `length` found for struct `Vec<isize>` in\
    \ the current scope\n  --> /tmp/tmpbdr52wgg.rs:12:58\n   |\n12 |     let mut distance\
    \ = Vec::<isize>::with_capacity(guess.length());\n   |                       \
    \                                   ^^^^^^ help: there is an associated function\
    \ with a similar name: `len`\n\nerror[E0599]: no method named `length` found for\
    \ struct `Vec<isize>` in the current scope\n  --> /tmp/tmpbdr52wgg.rs:13:25\n\
    \   |\n13 |     for idx in 0..guess.length() {\n   |                         ^^^^^^\
    \ help: there is an associated function with a similar name: `len`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut score = 0;\n    for i in game.iter() {\n        if guess == i\
    \ {\n            score += 1;\n        }\n    }\n    score - guess.iter().filter(|&i|\
    \ guess == i).count()\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `Vec<isize>` with `&isize`\n  --> /tmp/tmpsbkuzfnq.rs:14:18\n\
    \   |\n14 |         if guess == i {\n   |                  ^^ no implementation\
    \ for `Vec<isize> == &isize`\n   |\n   = help: the trait `PartialEq<&isize>` is\
    \ not implemented for `Vec<isize>`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n\
    \             <Vec<T, A> as PartialEq<&[U; N]>>\n             <Vec<T, A> as PartialEq<&[U]>>\n\
    \             <Vec<T, A> as PartialEq<&mut [U]>>\n             <Vec<T, A> as PartialEq<[U;\
    \ N]>>\n             <Vec<T, A> as PartialEq<[U]>>\n\nerror[E0277]: can't compare\
    \ `Vec<isize>` with `&isize`\n  --> /tmp/tmpsbkuzfnq.rs:18:44\n   |\n18 |    \
    \ score - guess.iter().filter(|&i| guess == i).count()\n   |                 \
    \                           ^^ no implementation for `Vec<isize> == &isize`\n\
    \   |\n   = help: the trait `PartialEq<&isize>` is not implemented for `Vec<isize>`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n             <Vec<T, A> as PartialEq<&[U;\
    \ N]>>\n             <Vec<T, A> as PartialEq<&[U]>>\n             <Vec<T, A> as\
    \ PartialEq<&mut [U]>>\n             <Vec<T, A> as PartialEq<[U; N]>>\n      \
    \       <Vec<T, A> as PartialEq<[U]>>\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpsbkuzfnq.rs:18:5\n   |\n11 | fn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n18 |     score - guess.iter().filter(|&i|\
    \ guess == i).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `usize`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    game.iter().zip(guess.iter()).map(|(g,g)| {\n        if g > 0 {\n   \
    \         if g == g { 0 } else { abs(g - g) }\n        } else {\n            if\
    \ g == g { 0 } else { abs(g - g) }\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0415]: identifier `g` is bound more than once in this parameter\
    \ list\n  --> /tmp/tmpxekxrvk6.rs:12:43\n   |\n12 |     game.iter().zip(guess.iter()).map(|(g,g)|\
    \ {\n   |                                           ^ used as parameter more than\
    \ once\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpxekxrvk6.rs:14:36\n\
    \   |\n14 |             if g == g { 0 } else { abs(g - g) }\n   |            \
    \                        ^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `abs` in this scope\n  --> /tmp/tmpxekxrvk6.rs:16:36\n   |\n16 |  \
    \           if g == g { 0 } else { abs(g - g) }\n   |                        \
    \            ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpxekxrvk6.rs:13:16\n   |\n13 |         if g > 0 {\n   |         \
    \       ^\n   |                |\n   |                expected `&isize`, found\
    \ integer\n   |                help: consider borrowing here: `&0`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0415,\
    \ E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    //assert!(game.len() == guess.len());\n    let mut result = vec![0; game.len()];\n\
    \    for i in 0..game.len() {\n        if game[i] == guess[i] { result[i] = 0;\
    \ }\n        else { result[i] = guess[i] - game[i]; };\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, -3, -3]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpm6tx2yhr.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    if game.len() != guess.len() {\n        vec![0; game.len()]\n    }\n\
    \    let mut result: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n\
    \        if game[i] != guess[i] {\n            result.push(abs(game[i] - guess[i]))\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpwlbnwees.rs:18:25\n\
    \   |\n18 |             result.push(abs(game[i] - guess[i]))\n   |           \
    \              ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwlbnwees.rs:13:9\n   |\n12 | /     if game.len() != guess.len()\
    \ {\n13 | |         vec![0; game.len()]\n   | |         ^^^^^^^^^^^^^^^^^^^ expected\
    \ `()`, found struct `Vec`\n14 | |     }\n   | |_____- expected this to be `()`\n\
    \   |\n   = note: expected unit type `()`\n                 found struct `Vec<{integer}>`\n\
    \   = note: this error originates in the macro `vec` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\nhelp: consider using a semicolon here\n \
    \  |\n14 |     };\n   |      +\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // Your code here\n    for i in 0..game.len() {\n        if game[i] ==\
    \ guess[i]{\n            continue;\n        }\n        let mut distance = std::mem::size_of::<isize>();\n\
    \        for j in 0..game.len() {\n            if i != j{\n                distance\
    \ += std::cmp::abs(guess[i] - game[j]);\n            }\n        }\n        distance\n\
    \    }\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in module `std::cmp`\n  --> /tmp/tmpgqtvwpey.rs:20:39\n\
    \   |\n20 |                 distance += std::cmp::abs(guess[i] - game[j]);\n \
    \  |                                       ^^^ not found in `std::cmp`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgqtvwpey.rs:23:9\n   |\n23 |         distance\n\
    \   |         ^^^^^^^^ expected `()`, found `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgqtvwpey.rs:13:5\n   |\n11 |   fn compare(game: Vec<isize>,\
    \ guess: Vec<isize>) -> Vec<isize> {\n   |                                   \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    12 |       // Your code here\n13 | /     for i in 0..game.len() {\n14 | |    \
    \     if game[i] == guess[i]{\n15 | |             continue;\n16 | |         }\n\
    ...  |\n23 | |         distance\n24 | |     }\n   | |_____^ expected struct `Vec`,\
    \ found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ unit type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    \n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc1dzox14.rs:11:52\n   |\n\
    11 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |   \
    \ -------                                         ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \       found unit type `()`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    if game.len() == guess.len() {\n        let mut differences: Vec<isize>\
    \ = vec![0; game.len()];\n        let mut offset = 0;\n        for mut guess in\
    \ guess.iter_mut() {\n            for game in game.iter_mut() {\n            \
    \    let mut result = game-guess;\n                if result != 0 {\n        \
    \            differences[offset] = result;\n                }\n              \
    \  offset += 1;\n            }\n        }\n        return differences;\n    }\n\
    \n    let mut differences = vec![0; game.len()];\n    let mut offset = 0;\n  \
    \  while offset < game.len() {\n        let mut bestDiff = std::i32::MAX;\n  \
    \      for guess in guess.iter() {\n            let mut diff = std::i32::MAX;\n\
    \            for mut game in game.iter() {\n                diff += game-guess;\n\
    \            }\n            if diff < bestDiff {\n                bestDiff = diff;\n\
    \            }\n        }\n        differences[offset] = bestDiff;\n        offset\
    \ += 1;\n    }\n    return differences;\n}\n\nfn main() {\n    let candidate =\
    \ compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `&mut isize` from `&mut isize`\n  --> /tmp/tmpat_7xdub.rs:17:38\n\
    \   |\n17 |                 let mut result = game-guess;\n   |               \
    \                   ----^----- &mut isize\n   |                              \
    \    |\n   |                                  &mut isize\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpat_7xdub.rs:34:25\n   |\n34 |                 diff += game-guess;\n\
    \   |                         ^^^^^^^^^^ expected `i32`, found `isize`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `i32`\n  --> /tmp/tmpat_7xdub.rs:34:22\n   |\n\
    34 |                 diff += game-guess;\n   |                      ^^ no implementation\
    \ for `i32 += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `i32`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpat_7xdub.rs:43:12\n\
    \   |\n11 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n\
    \   |                                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n43 |     return differences;\n   |            ^^^^^^^^^^^\
    \ expected `isize`, found `i32`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<i32>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut total = 0;\n    let mut sum = 0;\n    for g in guess {\n    \
    \    sum += *g;\n    }\n    for s in game {\n        total += s;\n    }\n    for\
    \ g in guess {\n        if *g != 0 {\n            *g = sum - total;\n        }\n\
    \    }\n    gues\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `gues` in this scope\n  --> /tmp/tmp3_i284uf.rs:25:5\n\
    \   |\n25 |     gues\n   |     ^^^^ help: a local variable with a similar name\
    \ exists: `guess`\n\nerror[E0614]: type `isize` cannot be dereferenced\n  -->\
    \ /tmp/tmp3_i284uf.rs:15:16\n   |\n15 |         sum += *g;\n   |             \
    \   ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp3_i284uf.rs:21:12\n\
    \   |\n21 |         if *g != 0 {\n   |            ^^\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmp3_i284uf.rs:22:13\n   |\n22 |        \
    \     *g = sum - total;\n   |             ^^\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut distance = vec![0; game.len()];\n\n    for index in 0..game.len()\
    \ {\n        let current_game = game[index];\n        let current_guess = guess[index];\n\
    \n        if current_guess == current_game {\n            distance[index] = 0;\n\
    \        } else {\n            distance[index] = current_guess - current_game;\n\
    \        }\n    }\n\n    return distance;\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, -3, -3]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmp_igk0h8_.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    if game.len() != guess.len() {\n        panic!(\"Input Vectors must be\
    \ of the same length!\");\n    }\n\n    game\n        .iter()\n        .zip(guess.iter())\n\
    \        .map(|(mut a, mut b)| (*a - *b))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    for i in 0..guess.len() {\n        let guess = guess[i];\n        let\
    \ score = game[i];\n        if let Some(guess) = guess.find(|&x| x == guess) {\n\
    \            let result = score - guess;\n            if let Some(result) = result.abs()\
    \ {\n                return vec![result];\n            }\n        }\n    }\n \
    \   vec![]\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `find` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpagz3hxe2.rs:15:36\n   |\n15 |         if let Some(guess)\
    \ = guess.find(|&x| x == guess) {\n   |                                    ^^^^\
    \ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // The function body goes here\n    let mut result: Vec<isize> = game.clone();\n\
    \n    for &score in &game {\n        match guess.pop() {\n            Some(&guessed)\
    \ => {\n                if score == guessed {\n                    result.pop();\n\
    \                } else {\n                    result.append(abs(score - guessed));\n\
    \                }\n            }\n            None => result.append(score),\n\
    \        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpvb6_12ly.rs:21:35\n\
    \   |\n21 |                     result.append(abs(score - guessed));\n   |   \
    \                                ^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvb6_12ly.rs:17:18\n   |\n16 |         match\
    \ guess.pop() {\n   |               ----------- this expression has type `Option<isize>`\n\
    17 |             Some(&guessed) => {\n   |                  ^^^^^^^^\n   |   \
    \               |\n   |                  expected `isize`, found reference\n \
    \  |                  help: you can probably remove the explicit borrow: `guessed`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpvb6_12ly.rs:24:35\n   |\n24 |  \
    \           None => result.append(score),\n   |                              \
    \     ^^^^^ expected `&mut Vec<isize>`, found `isize`\n   |\n   = note: expected\
    \ mutable reference `&mut Vec<isize>`\n                           found type `isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = game.clone();\n    for i in 0..game.len()\
    \ {\n        result[i] - guess[i] > 0 ? result[i] - guess[i] : result[i] - guess[i]\
    \ + i\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `result`\n\
    \  --> /tmp/tmpq_w6en_r.rs:14:36\n   |\n14 |         result[i] - guess[i] > 0\
    \ ? result[i] - guess[i] : result[i] - guess[i] + i\n   |                    \
    \                ^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\n\
    error: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut best_guess = guess.clone();\n    let mut best_score = game;\n\
    \    for v in game.iter_mut() {\n        v.0 -= best_score;\n        v.0 -= best_guess.0;\n\
    \    }\n    match best_score {\n        x if x == 0 => {\n            let mut\
    \ best_score = guess.clone();\n            for v in game.iter_mut() {\n      \
    \          v.0 -= best_score;\n                v.0 -= best_guess.0;\n        \
    \    }\n            best_score\n        },\n        x if x < 0 => {\n        \
    \    let mut best_score = guess.clone();\n            for v in game.iter_mut()\
    \ {\n                v.0 -= best_score;\n                v.0 -= best_guess.0;\n\
    \            }\n            -best_score\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1],\
    \ vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0609]: no field `0` on type `&mut isize`\n  --> /tmp/tmp94sm637a.rs:15:11\n\
    \   |\n15 |         v.0 -= best_score;\n   |           ^\n\nerror[E0609]: no field\
    \ `0` on type `&mut isize`\n  --> /tmp/tmp94sm637a.rs:16:11\n   |\n16 |      \
    \   v.0 -= best_guess.0;\n   |           ^\n\nerror[E0609]: no field `0` on type\
    \ `Vec<isize>`\n  --> /tmp/tmp94sm637a.rs:16:27\n   |\n16 |         v.0 -= best_guess.0;\n\
    \   |                           ^ unknown field\n\nerror[E0277]: can't compare\
    \ `Vec<isize>` with `{integer}`\n  --> /tmp/tmp94sm637a.rs:19:16\n   |\n19 | \
    \        x if x == 0 => {\n   |                ^^ no implementation for `Vec<isize>\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `Vec<isize>`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n             <Vec<T, A> as\
    \ PartialEq<&[U; N]>>\n             <Vec<T, A> as PartialEq<&[U]>>\n         \
    \    <Vec<T, A> as PartialEq<&mut [U]>>\n             <Vec<T, A> as PartialEq<[U;\
    \ N]>>\n             <Vec<T, A> as PartialEq<[U]>>\n\nerror[E0609]: no field `0`\
    \ on type `&mut isize`\n  --> /tmp/tmp94sm637a.rs:22:19\n   |\n22 |          \
    \       v.0 -= best_score;\n   |                   ^\n\nerror[E0609]: no field\
    \ `0` on type `&mut isize`\n  --> /tmp/tmp94sm637a.rs:23:19\n   |\n23 |      \
    \           v.0 -= best_guess.0;\n   |                   ^\n\nerror[E0609]: no\
    \ field `0` on type `Vec<isize>`\n  --> /tmp/tmp94sm637a.rs:23:35\n   |\n23 |\
    \                 v.0 -= best_guess.0;\n   |                                 \
    \  ^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp94sm637a.rs:27:18\n\
    \   |\n27 |         x if x < 0 => {\n   |                  ^ expected struct `Vec`,\
    \ found integer\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \   found type `{integer}`\n\nerror[E0609]: no field `0` on type `&mut isize`\n\
    \  --> /tmp/tmp94sm637a.rs:30:19\n   |\n30 |                 v.0 -= best_score;\n\
    \   |                   ^\n\nerror[E0609]: no field `0` on type `&mut isize`\n\
    \  --> /tmp/tmp94sm637a.rs:31:19\n   |\n31 |       "
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // Your code here\n    let mut diff: Vec<isize> = guess.clone();\n  \
    \  for i in 0..game.len() {\n        if game[i] != guess[i] {\n            diff[i]\
    \ = game[i] - guess[i];\n        } else {\n            diff[i] = 0;\n        }\n\
    \    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    game.iter().zip(guess.iter()).filter(|x| x.1 == x.0).count().collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `usize` is not an iterator\n  --> /tmp/tmpw3vks24l.rs:12:66\n\
    \   |\n12 |     game.iter().zip(guess.iter()).filter(|x| x.1 == x.0).count().collect::<Vec<_>>()\n\
    \   |                                                                  ^^^^^^^\
    \ `usize` is not an iterator\n   |\n   = note: the following trait bounds were\
    \ not satisfied:\n           `usize: Iterator`\n           which is required by\
    \ `&mut usize: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = guess.clone();\n    let mut game: Vec<isize>\
    \ = game.clone();\n    \n    for i in (0..game.len()).step_by(2) {\n        if\
    \ game[i] == game[i+1] {\n            result[i] = 0;\n        } else {\n     \
    \       result[i] = abs(game[i] - game[i+1]);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpz36bopxc.rs:19:25\n\
    \   |\n19 |             result[i] = abs(game[i] - game[i+1]);\n   |          \
    \               ^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut distances = vec![0; guess.len()];\n    for i in 0..guess.len()\
    \ {\n        // Find the distance to all other matches\n        distances[i] =\
    \ game\n            .iter()\n            .zip(guess.iter())\n            .map(|(a,b)|\
    \ (b-a))\n            .min();\n        // The match is a close match, so just\
    \ set the distance to zero\n        if game[i] != guess[i] { distances[i] = 0;\
    \ }\n    }\n    distances\n}\n\nfn main() {\n    let candidate = compare;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_w3w8pxm.rs:15:24\n   |\n\
    15 |           distances[i] = game\n   |  _________------------___^\n   | |  \
    \       |\n   | |         expected due to the type of this binding\n16 | |   \
    \          .iter()\n17 | |             .zip(guess.iter())\n18 | |            \
    \ .map(|(a,b)| (b-a))\n19 | |             .min();\n   | |__________________^ expected\
    \ integer, found enum `Option`\n   |\n   = note: expected type `{integer}`\n \
    \             found enum `Option<isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut score = Vec::new();\n    for i in (0..game.len()).step_by(2)\
    \ {\n        if game[i] == guess[i] {\n            score.push(0);\n        } else\
    \ {\n            score.push(abs(game[i] - guess[i]));\n        }\n    }\n    return\
    \ score;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpd8t1bvsl.rs:17:24\n\
    \   |\n17 |             score.push(abs(game[i] - guess[i]));\n   |           \
    \             ^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = guess.to_vec();\n    let mut best_difference:\
    \ isize = game.len();\n    for &g in &game {\n        let difference: isize =\
    \ guess[g].abs() - g;\n        if difference > best_difference {\n           \
    \ best_difference = difference;\n        }\n        result[g] += best_difference;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp15ydhioi.rs:13:38\n   |\n\
    13 |     let mut best_difference: isize = game.len();\n   |                  \
    \            -----   ^^^^^^^^^^ expected `isize`, found `usize`\n   |        \
    \                      |\n   |                              expected due to this\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |     let mut best_difference: isize = game.len().try_into().unwrap();\n\
    \   |                                                ++++++++++++++++++++\n\n\
    error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp15ydhioi.rs:15:33\n\
    \   |\n15 |         let difference: isize = guess[g].abs() - g;\n   |        \
    \                         ^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp15ydhioi.rs:19:9\n   |\n19 |         result[g] += best_difference;\n\
    \   |         ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    if game.len() != guess.len() {\n        panic!(\"Lengths of game and\
    \ guess vectors do not match\");\n    }\n    let mut score: Vec<isize> = Vec::new();\n\
    \    for n in &game {\n        for g in &guess {\n            if n == g {\n  \
    \              score.push(0);\n            } else {\n                score.push(n\
    \ - g);\n            }\n        }\n    }\n    score\n}\n\nfn main() {\n    let\
    \ candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, -1, -2, -3, -1, 3, 1, 0, -1, -2, 0, 4, 2, 1, 0, -1, 1, 5, 3, 2, 1, 0, 2,\
    \ 6, 4, 3, 2, 1, 3, 7, 0, -1, -2, -3, -1, 3]`,\n right: `[0, 0, 0, 0, 3, 3]`',\
    \ /tmp/tmpajepfcs5.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    if game.len() != guess.len() {\n        panic!(\"Arrays must be of equal\
    \ length\")\n    }\n    let mut answer: Vec<isize> = vec![0; game.len()];\n\n\
    \    for i in 0..game.len() {\n        if game[i] != guess[i] {\n            answer[i]\
    \ = std::cmp::max(answer[i], game[i] - guess[i]);\n        }\n    }\n    answer\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut score: Vec<isize> = game.to_vec();\n    let mut guessed: Vec<isize>\
    \ = guess.to_vec();\n    guessed.sort();\n    let mut result: Vec<isize> = game.to_vec();\n\
    \    let mut index: isize = 0;\n    loop {\n        if index >= guessed.len()\
    \ {\n            break;\n        }\n        let mut diff: isize = guessed[index]\
    \ - score[index];\n        if diff == 0 {\n            score[index] = 0;\n   \
    \     } else {\n            score[index] = diff;\n        }\n        result[index]\
    \ += diff;\n        index += 1;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0s1tckt_.rs:18:21\n   |\n\
    18 |         if index >= guessed.len() {\n   |                     ^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n18 |         if\
    \ index >= guessed.len().try_into().unwrap() {\n   |                         \
    \         ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp0s1tckt_.rs:21:31\n   |\n21 |         let mut diff:\
    \ isize = guessed[index] - score[index];\n   |                               ^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp0s1tckt_.rs:21:48\n\
    \   |\n21 |         let mut diff: isize = guessed[index] - score[index];\n   |\
    \                                                ^^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp0s1tckt_.rs:23:13\n   |\n23 |            \
    \ score[index] = 0;\n   |             ^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp0s1tckt_.rs:25:13\n   |\n25 |            \
    \ score[index] = diff;\n   |        "
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = guess[..];\n    for i in 0..game.len() {\n        if i\
    \ < guess.len() && guess[i] == game[i] {\n            res[i] = 0;\n        } else\
    \ {\n            res[i] = guess[i] - game[i];\n        }\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmp53lwhco3.rs:12:9\n   |\n12 |     let mut res\
    \ = guess[..];\n   |         ^^^^^^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `[isize]`\n   = note:\
    \ all local variables must have a statically known size\n   = help: unsized locals\
    \ are gated as an unstable feature\nhelp: consider borrowing here\n   |\n12 |\
    \     let mut res = &guess[..];\n   |                   +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp53lwhco3.rs:20:5\n   |\n11 | fn compare(game: Vec<isize>,\
    \ guess: Vec<isize>) -> Vec<isize> {\n   |                                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    20 |     res\n   |     ^^^- help: try using a conversion method: `.to_vec()`\n\
    \   |     |\n   |     expected struct `Vec`, found slice `[isize]`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n               found slice `[isize]`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = guess.to_vec();\n    let mut total_diff:\
    \ isize = 0;\n\n    for i in 0..game.len() {\n        let diff = game[i] - guess[i];\n\
    \        if diff != 0 {\n            result.push(diff);\n            total_diff\
    \ += diff;\n        }\n    }\n    if total_diff == 0 {\n        result\n    }\
    \ else {\n        result.iter().map(|x| x.abs()).collect()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 2, 2, 3, 3]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmp1y75uv8z.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut correct = game\n        .iter()\n        .zip(guess.iter())\n\
    \        .map(|(game_val, guess_val)| (guess_val == game_val))\n        .filter(|x|\
    \ x.unwrap())\n        .count() as isize;\n    let mut max_diff = 0;\n    for\
    \ x in game.iter().zip(guess.iter()) {\n        if x == (0,0) || x == (-1,-1)\
    \ {\n            max_diff += 1;\n        } else {\n            max_diff += x.unwrap()\
    \ * (max_diff + 1);\n        }\n    }\n    (correct, max_diff)\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for reference `&bool` in the\
    \ current scope\n  --> /tmp/tmpjdk2fihy.rs:16:23\n   |\n16 |         .filter(|x|\
    \ x.unwrap())\n   |                       ^^^^^^ method not found in `&bool`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpjdk2fihy.rs:20:18\n   |\n20 |\
    \         if x == (0,0) || x == (-1,-1) {\n   |                  ^\n   |     \
    \             |\n   |                  expected `&isize`, found integer\n   |\
    \                  help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjdk2fihy.rs:20:20\n   |\n20 |         if x == (0,0) ||\
    \ x == (-1,-1) {\n   |                    ^\n   |                    |\n   | \
    \                   expected `&isize`, found integer\n   |                   \
    \ help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpjdk2fihy.rs:20:32\n   |\n20 |         if x == (0,0) || x == (-1,-1)\
    \ {\n   |                                ^^\n   |                            \
    \    |\n   |                                expected `&isize`, found integer\n\
    \   |                                help: consider borrowing here: `&-1`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpjdk2fihy.rs:20:35\n   |\n20 |  \
    \       if x == (0,0) || x == (-1,-1) {\n   |                                \
    \   ^^\n   |                                   |\n   |                       \
    \            expected `&isize`, found integer\n   |                          \
    \         help: consider borrowing here: `&-1`\n\nerror[E0599]: no method named\
    \ `unwrap` found for tuple `(&isize, &isize)` in the current scope\n  --> /tmp/tmpjdk2fihy.rs:23:27\n\
    \   |\n23 |             max_diff += x.unwrap() * (max_diff + 1);\n   |       \
    \                    ^^^^^^ method not found in `(&isize, &isize)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjdk2fihy.rs:26:5\n   |\n11 | fn compare(game:\
    \ Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |                       \
    \                             ---------- expected `Vec<isize>` because of return\
    \ type\n...\n26 |     (correct, max_diff)\n   |     ^^^^^^^^^^^^^^^^^^^ expected "
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    game.iter().zip(guess.iter()).map(|(a,b)| (a-b).abs()).collect()\n}\n\
    \nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = game\n        .iter()\n        .cloned()\n\
    \        .zip(guess)\n        .map(|pair| {\n            if pair.0 == pair.1 {\n\
    \                0\n            } else {\n                pair.0 - pair.1\n  \
    \          }\n        })\n        .collect();\n    for index in 0..game.len()\
    \ {\n        if result[index] != 0 {\n            result[index] = std::cmp::max(result[index],\
    \ guess[index] - game[index]);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1],\
    \ vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `guess`\n  --> /tmp/tmpuuz5rs6h.rs:26:58\n\
    \   |\n11 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n\
    \   |                              ----- move occurs because `guess` has type\
    \ `Vec<isize>`, which does not implement the `Copy` trait\n...\n15 |         .zip(guess)\n\
    \   |              ----- value moved here\n...\n26 |             result[index]\
    \ = std::cmp::max(result[index], guess[index] - game[index]);\n   |          \
    \                                                ^^^^^ value borrowed here after\
    \ move\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut ret = vec![];\n    for i in 0..guess[0].len() {\n        for\
    \ j in 0..guess[1].len() {\n            if game[i] == guess[0][j] || game[j] ==\
    \ guess[1][i] {\n                ret[i] = ret[i] + game[i] - guess[i][j];\n  \
    \          }\n        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate =\
    \ compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpe2hcpc1h.rs:13:26\n   |\n13 |     for i in 0..guess[0].len()\
    \ {\n   |                          ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `len` found for type `isize` in the current scope\n  --> /tmp/tmpe2hcpc1h.rs:14:30\n\
    \   |\n14 |         for j in 0..guess[1].len() {\n   |                       \
    \       ^^^ method not found in `isize`\n\nerror[E0608]: cannot index into a value\
    \ of type `isize`\n  --> /tmp/tmpe2hcpc1h.rs:15:27\n   |\n15 |             if\
    \ game[i] == guess[0][j] || game[j] == guess[1][i] {\n   |                   \
    \        ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `isize`\n\
    \  --> /tmp/tmpe2hcpc1h.rs:15:53\n   |\n15 |             if game[i] == guess[0][j]\
    \ || game[j] == guess[1][i] {\n   |                                          \
    \           ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `isize`\n\
    \  --> /tmp/tmpe2hcpc1h.rs:16:45\n   |\n16 |                 ret[i] = ret[i] +\
    \ game[i] - guess[i][j];\n   |                                             ^^^^^^^^^^^\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut mismatches = 0;\n    for index\
    \ in 0..game.len() {\n        if guess[index] != game[index] {\n            mismatches\
    \ += 1;\n        }\n        result[index] = mismatches;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpiyl8lmf5.rs:18:9\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    if game.len() != guess.len() {\n        panic!(\"compare needs both arrays\
    \ of same size\")\n    }\n    \n    let mut result: Vec<isize> = Vec::with_capacity(game.len());\n\
    \    for i in game.iter().enumerate() {\n        result.push((guess[i] - game[i]).abs());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `(usize, &isize)`\n\
    \  --> /tmp/tmp1lk9hiso.rs:18:22\n   |\n18 |         result.push((guess[i] - game[i]).abs());\n\
    \   |                      ^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `(usize, &isize)`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `(Bound<usize>, Bound<usize>)`\n   = note: required because of the requirements\
    \ on the impl of `Index<(usize, &isize)>` for `Vec<isize>`\n\nerror[E0277]: the\
    \ type `[isize]` cannot be indexed by `(usize, &isize)`\n  --> /tmp/tmp1lk9hiso.rs:18:33\n\
    \   |\n18 |         result.push((guess[i] - game[i]).abs());\n   |           \
    \                      ^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `(usize, &isize)`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `(Bound<usize>, Bound<usize>)`\n   = note: required because of the requirements\
    \ on the impl of `Index<(usize, &isize)>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut diff_vec: Vec<isize> = guess.to_vec();\n    let mut guessed_vec:\
    \ Vec<isize> = game.to_vec();\n    guessed_vec.sort();\n    diff_vec.sort();\n\
    \n    for i in 0..diff_vec.len() {\n        if guessed_vec[i] == diff_vec[i] {\n\
    \            diff_vec[i] = 0;\n        } else {\n            diff_vec[i] = |b|\
    \ b.abs() - |a| a.abs();\n        }\n    }\n    diff_vec\n}\n\nfn main() {\n \
    \   let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1],\
    \ vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmph351gisa.rs:21:28\n\
    \   |\n21 |             diff_vec[i] = |b| b.abs() - |a| a.abs();\n   |       \
    \                     ^ consider giving this closure parameter a type\n   |\n\
    \   = note: type must be known at this point\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    if game.len() != guess.len() {\n        panic!(\"guess and game lengths\
    \ are different lengths, \\\n            {} != {}\", game.len(), guess.len());\n\
    \    }\n    \n    let mut min_diff = isize::MAX;\n    let mut result = Vec::with_capacity(guess.len());\n\
    \    \n    for i in 0..guess.len() {\n        let mut current = game[i];\n   \
    \     let mut next = guess[i];\n        if next > 0 {\n            while current\
    \ != next {\n                current = game[current + 1];\n                next\
    \ = guess[next + 1];\n            }\n        } else {\n            while current\
    \ != -next {\n                current = game[current - 1];\n                next\
    \ = guess[next - 1];\n            }\n        }\n        \n        let mut diff\
    \ = (next - current).abs();\n        if diff < min_diff {\n            min_diff\
    \ = diff;\n            result.append(diff);\n        }\n    }\n    \n    result\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpjrbskbku.rs:25:27\n\
    \   |\n25 |                 current = game[current + 1];\n   |               \
    \            ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpjrbskbku.rs:26:24\n   |\n26 |                 next = guess[next\
    \ + 1];\n   |                        ^^^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpjrbskbku.rs:30:27\n   |\n30 |            \
    \     current = game[current - 1];\n   |                           ^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpjrbskbku.rs:31:24\n\
    \   |\n31 |                 next = guess[next - 1];\n   |                    \
    \    ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpjrbskbku.rs:38:27\n   |\n38 |\
    \             result."
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut correct = game[0];\n    for i in (0..game.len()).rev() {\n  \
    \      if game[i] == guess[game.len() - i + 1] {\n            correct += 1;\n\
    \        } else {\n            break;\n        }\n    }\n    return vec![correct,\
    \ game[game.len() - correct]].into_iter().map(|i| -i).collect();\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp40r4tnrq.rs:20:44\n   |\n\
    20 |     return vec![correct, game[game.len() - correct]].into_iter().map(|i|\
    \ -i).collect();\n   |                                            ^^^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmp40r4tnrq.rs:20:42\n   |\n20 |     return vec![correct, game[game.len()\
    \ - correct]].into_iter().map(|i| -i).collect();\n   |                       \
    \                   ^ no implementation for `usize - isize`\n   |\n   = help:\
    \ the trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut game_index = 0;\n    let mut guess_index\
    \ = 0;\n    let mut game_length = game.len();\n    let mut guess_length = guess.len();\n\
    \    while game_index < game_length && guess_index < guess_length {\n        let\
    \ (score, guess) = if game[game_index] == guess[guess_index] {\n            (game[game_index],\
    \ guess[guess_index])\n        } else {\n            (game[game_index].abs(),\
    \ guess[guess_index].abs())\n        };\n        result.push(guess);\n       \
    \ if guess == 0 {\n            break;\n        } else {\n            guess_index\
    \ += 1;\n        }\n        game_index += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 2, 2]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpwmhm17oo.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    if game.len() != guess.len() {\n        return vec![];\n    }\n\n   \
    \ let mut correct: Vec<isize> = Vec::with_capacity(game.len());\n    for i in\
    \ 0..game.len() {\n        let a = game[i];\n        let b = guess[i];\n     \
    \   if a == b {\n            correct.push(0);\n        } else {\n            let\
    \ diff = a - b;\n            let res = if diff < 0 {\n                diff + game.len()\n\
    \            } else {\n                diff + game.len() - i\n            };\n\
    \            correct.push(*res);\n        }\n    }\n\n    return correct;\n}\n\
    \nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7nmdqw5p.rs:25:24\n   |\n\
    25 |                 diff + game.len()\n   |                        ^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot add `usize` to `isize`\n\
    \  --> /tmp/tmp7nmdqw5p.rs:25:22\n   |\n25 |                 diff + game.len()\n\
    \   |                      ^ no implementation for `isize + usize`\n   |\n   =\
    \ help: the trait `Add<usize>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Add<Rhs>`:\n             <&'a f32 as\
    \ Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n\
    \             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n    \
    \         <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n          \
    \   <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7nmdqw5p.rs:27:24\n   |\n27 |                 diff + game.len()\
    \ - i\n   |                        ^^^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot add `usize` to `isize`\n  --> /tmp/tmp7nmdqw5p.rs:27:22\n\
    \   |\n27 |                 diff + game.len() - i\n   |                      ^\
    \ no implementation for `isize + usize`\n   |\n   = help: the trait `Add<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7nmdqw5p.rs:27:37\n\
    \   |\n27 |                 diff + game.len() - i\n   |                      \
    \               ^ expected `isize`, found `usize`\n\nerror[E0277]: cannot subtract\
    \ `usize` from `isize`\n  --> /tmp/tmp7nmdqw5p.rs:27:35\n   |\n27 |          \
    \       diff + game.len() - i\n   |                                   ^ no implementation\
    \ for `isize - usize`\n   |\n   = help: the tra"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut answer: Vec<isize> = game.clone();\n    let mut guessed: Vec<isize>\
    \ = guess.clone();\n    for i in (0..guessed.len()).rev() {\n        if answer[i]\
    \ == guessed[i] {\n            continue;\n        }\n        answer.remove(i);\n\
    \        guessed.remove(i);\n    }\n    answer\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpggq5zcex.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut best_index = -1isize;\n    let mut best_score = 0;\n    for index\
    \ in 0..game.len() {\n        let score = game[index];\n        let guess = guess[index];\n\
    \        if guess != 0 {\n            if score < best_score {\n              \
    \  best_score = score;\n                best_index = index;\n            }\n \
    \       } else {\n            if score == best_score {\n                best_index\
    \ = index;\n            }\n        }\n    }\n    vec![best_score, best_index]\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplfrm7ny9.rs:20:30\n   |\n\
    12 |     let mut best_index = -1isize;\n   |                          -------\
    \ expected due to this value\n...\n20 |                 best_index = index;\n\
    \   |                              ^^^^^ expected `isize`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplfrm7ny9.rs:24:30\n   |\n12 |     let mut best_index\
    \ = -1isize;\n   |                          ------- expected due to this value\n\
    ...\n24 |                 best_index = index;\n   |                          \
    \    ^^^^^ expected `isize`, found `usize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    \n    game.iter().zip(guess.iter()).map(|(u,v)| {\n        match u {\n\
    \            1 => if v == -1 { \n                return (0 , v);\n           \
    \ }\n            2 => if v == 1 {\n                return (0 , v);\n         \
    \   }\n            3 => if v == 2 {\n                return (0 , v);\n       \
    \     }\n            4 => if v == 3 {\n                return (0 , v);\n     \
    \       }\n            5 => if v == 4 {\n                return (0 , v);\n   \
    \         }\n            _ => return (abs(v - u), v)\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpoze7j2i9.rs:30:26\n\
    \   |\n30 |             _ => return (abs(v - u), v)\n   |                    \
    \      ^^^ not found in this scope\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpoze7j2i9.rs:15:23\n   |\n15 |             1 => if\
    \ v == -1 { \n   |                       ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  -->\
    \ /tmp/tmpoze7j2i9.rs:18:23\n   |\n18 |             2 => if v == 1 {\n   |   \
    \                    ^^ no implementation for `&isize == {integer}`\n   |\n  \
    \ = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n \
    \  = help: the following other types implement trait `PartialEq<Rhs>`:\n     \
    \        f32\n             f64\n             i128\n             i16\n        \
    \     i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpoze7j2i9.rs:21:23\n\
    \   |\n21 |             3 => if v == 2 {\n   |                       ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: can't compare `&isize`\
    \ with `{integer}`\n  --> /tmp/tmpoze7j2i9.rs:24:23\n   |\n24 |             4\
    \ => if v == 3 {\n   |                       ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following oth"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut diff = Vec::new();\n    diff.push(game[0]-guess[0]);\n    for\
    \ i in 1..game.len() {\n        diff.push(game[i]-guess[i]);\n    }\n    diff\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut i = 0;\n    let mut j = 0;\n\n    let mut result = Vec::new();\n\
    \    let mut score_sum: isize = 0.;\n    let mut guess_sum: isize = 0.;\n\n  \
    \  while i < game.len() && j < guess.len() {\n        if game[i] == guess[j] {\n\
    \            score_sum += game[i];\n            guess_sum += guess[j];\n     \
    \       result.push(i-guess_sum);\n        } else {\n            score_sum +=\
    \ abs(game[i] - guess[j]);\n            i += 1;\n            j += 1;\n       \
    \ }\n    }\n\n    if i == game.len() {\n        result.push(i);\n        score_sum\
    \ += abs(game[i] - guess[j]);\n    } else if j == guess.len() {\n        result.push(i);\n\
    \        score_sum += abs(game[i] - guess[j]);\n    } else {\n        result.push(score_sum);\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp5quogdjg.rs:25:26\n\
    \   |\n25 |             score_sum += abs(game[i] - guess[j]);\n   |          \
    \                ^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `abs` in this scope\n  --> /tmp/tmp5quogdjg.rs:33:22\n   |\n33 |         score_sum\
    \ += abs(game[i] - guess[j]);\n   |                      ^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp5quogdjg.rs:36:22\n\
    \   |\n36 |         score_sum += abs(game[i] - guess[j]);\n   |              \
    \        ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp5quogdjg.rs:16:32\n   |\n16 |     let mut score_sum: isize = 0.;\n \
    \  |                        -----   ^^ expected `isize`, found floating-point\
    \ number\n   |                        |\n   |                        expected\
    \ due to this\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5quogdjg.rs:17:32\n\
    \   |\n17 |     let mut guess_sum: isize = 0.;\n   |                        -----\
    \   ^^ expected `isize`, found floating-point number\n   |                   \
    \     |\n   |                        expected due to this\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5quogdjg.rs:23:27\n   |\n23 |             result.push(i-guess_sum);\n\
    \   |                           ^^^^^^^^^ expected `usize`, found `isize`\n\n\
    error[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp5quogdjg.rs:23:26\n\
    \   |\n23 |             result.push(i-guess_sum);\n   |                      \
    \    ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5quogdjg.rs:38:21\n\
    \   |\n3"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut difference = vec![0; game.len()];\n    for i in 0..game.len()\
    \ {\n        let guess = guess[i];\n        let score = game[i];\n        if guess\
    \ == score {\n            difference[i] = 0;\n        }\n        else {\n    \
    \        difference[i] = abs (guess - score);\n        }\n    }\n    difference\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp5vbuahtq.rs:20:29\n\
    \   |\n20 |             difference[i] = abs (guess - score);\n   |           \
    \                  ^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    game.iter().zip(guess.iter())\n        .filter(|&(p,q)| p != q)\n   \
    \     .map(|&(p,q)| (p,q))\n        .collect::<Vec<_>>()\n}\n\nfn main() {\n \
    \   let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1],\
    \ vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpelkfn98x.rs:14:15\n   |\n\
    14 |         .map(|&(p,q)| (p,q))\n   |               ^^^^^-\n   |           \
    \    |    |\n   |               |    expected due to this\n   |              \
    \ expected tuple, found reference\n   |\n   = note:  expected tuple `(&isize,\
    \ &isize)`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpelkfn98x.rs:12:5\n   |\n11 |   fn compare(game: Vec<isize>, guess:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \            ---------- expected `Vec<isize>` because of return type\n12 | / \
    \    game.iter().zip(guess.iter())\n13 | |         .filter(|&(p,q)| p != q)\n\
    14 | |         .map(|&(p,q)| (p,q))\n15 | |         .collect::<Vec<_>>()\n   |\
    \ |____________________________^ expected `isize`, found tuple\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<(_, _)>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    assert!(game.len() == guess.len());\n    let mut result: Vec<isize> =\
    \ game.clone();\n    let mut sum = 0;\n    for i in game.iter() {\n        let\
    \ mut score = 0;\n        for j in guess.iter() {\n            if i == j {\n \
    \               score += 1;\n            } else {\n                break\n   \
    \         }\n        }\n        let diff = if i == game.last() {\n           \
    \ 0\n        } else {\n            sum - score\n        };\n        result[i]\
    \ = diff;\n        sum += score;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `Option<&isize>`\n  --> /tmp/tmp7h7d9xsd.rs:24:25\n\
    \   |\n24 |         let diff = if i == game.last() {\n   |                   \
    \      ^^ no implementation for `&isize == Option<&isize>`\n   |\n   = help: the\
    \ trait `PartialEq<Option<&isize>>` is not implemented for `&isize`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp7h7d9xsd.rs:29:9\n\
    \   |\n29 |         result[i] = diff;\n   |         ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut correct_guess = guess[0..game.len()];\n    let mut diff = guess[0..game.len()].iter().cloned().collect::<Vec<_>>();\n\
    \    diff.sort_unstable_by(|a,b| a.partial_cmp(&b).unwrap());\n    game\n    \
    \    .iter()\n        .cloned()\n        .zip(diff)\n        .filter_map(|(a,b)|\
    \ if a == b { Some(0) } else { Some(b.abs() - a.abs()) })\n        .collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmpruy0lw92.rs:12:9\n   |\n12 |     let mut correct_guess\
    \ = guess[0..game.len()];\n   |         ^^^^^^^^^^^^^^^^^ doesn't have a size\
    \ known at compile-time\n   |\n   = help: the trait `Sized` is not implemented\
    \ for `[isize]`\n   = note: all local variables must have a statically known size\n\
    \   = help: unsized locals are gated as an unstable feature\nhelp: consider borrowing\
    \ here\n   |\n12 |     let mut correct_guess = &guess[0..game.len()];\n   |  \
    \                           +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut distance: Vec<isize> = guess.iter().cloned().collect();\n   \
    \ for i in 0..game.len() {\n        if let Some(j) = guess.iter().position(|&x|\
    \ x == game[i]).cloned() {\n            distance[i] = game[i] - guess[j];\n  \
    \      } else {\n            distance[i] = 0;\n        }\n    }\n    distance\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmplv6xl_ax.rs:14:67\n\
    \    |\n14  |           if let Some(j) = guess.iter().position(|&x| x == game[i]).cloned()\
    \ {\n    |                                                                   \
    \  ^^^^^^ `Option<usize>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = guess.clone();\n\n    for i in 0..game.len()\
    \ {\n        if guess[i] == game[i] {\n            result[i] = 0;\n        } else\
    \ {\n            result[i] = guess[i] - game[i];\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, -3, -3]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpy83slax1.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut best_guess = Vec::new();\n    let mut best_score = isize::MAX;\n\
    \n    for i in 0..game.len() {\n        if guess == game[i] {\n            continue;\n\
    \        }\n        let score = game[i] - guess[i];\n        if score < best_score\
    \ {\n            best_score = score;\n            best_guess = guess[i];\n   \
    \     }\n    }\n    \n    let mut diff_vec = Vec::new();\n    diff_vec.push(best_guess\
    \ - best_score);\n\n    for i in 0..guess.len() {\n        let diff = best_guess\
    \ - guess[i];\n        if diff < best_score {\n            diff_vec.push(diff);\n\
    \        }\n    }\n    diff_vec\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `Vec<isize>` with `isize`\n  --> /tmp/tmppgt872qq.rs:16:18\n\
    \   |\n16 |         if guess == game[i] {\n   |                  ^^ no implementation\
    \ for `Vec<isize> == isize`\n   |\n   = help: the trait `PartialEq<isize>` is\
    \ not implemented for `Vec<isize>`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n\
    \             <Vec<T, A> as PartialEq<&[U; N]>>\n             <Vec<T, A> as PartialEq<&[U]>>\n\
    \             <Vec<T, A> as PartialEq<&mut [U]>>\n             <Vec<T, A> as PartialEq<[U;\
    \ N]>>\n             <Vec<T, A> as PartialEq<[U]>>\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppgt872qq.rs:22:26\n   |\n12 |     let mut best_guess =\
    \ Vec::new();\n   |                          ---------- expected due to this value\n\
    ...\n22 |             best_guess = guess[i];\n   |                          ^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<_>`\n\
    \                found type `isize`\n\nerror[E0369]: cannot subtract `isize` from\
    \ `Vec<_>`\n  --> /tmp/tmppgt872qq.rs:27:30\n   |\n27 |     diff_vec.push(best_guess\
    \ - best_score);\n   |                   ---------- ^ ---------- isize\n   | \
    \                  |\n   |                   Vec<_>\n\nerror[E0369]: cannot subtract\
    \ `isize` from `Vec<_>`\n  --> /tmp/tmppgt872qq.rs:30:31\n   |\n30 |         let\
    \ diff = best_guess - guess[i];\n   |                    ---------- ^ --------\
    \ isize\n   |                    |\n   |                    Vec<_>\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0369.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = game.clone();\n    for j in 0..game.len()\
    \ {\n        let mut min_diff = isize::MAX;\n        for i in 0..guess.len() {\n\
    \            if game[j] == guess[i] {\n                result[j] = 0;\n      \
    \      } else {\n                let d = game[j] - guess[i];\n               \
    \ if d < isize::MAX {\n                    min_diff = d.min(min_diff);\n     \
    \           }\n            }\n        }\n        if min_diff == isize::MAX {\n\
    \            result[j] = game[j];\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, 5, 0]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmp6k2080c1.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n\n    game\n        .iter()\n        .zip(guess.iter())\n\
    \        .for_each(|(a, b)| match b {\n            Some(b) => result.push(-b),\n\
    \            None => result.push(a),\n        });\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo2xqy0ij.rs:18:13\n   |\n\
    17 |         .for_each(|(a, b)| match b {\n   |                              \
    \    - this expression has type `&isize`\n18 |             Some(b) => result.push(-b),\n\
    \   |             ^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpo2xqy0ij.rs:19:13\n   |\n17 |         .for_each(|(a,\
    \ b)| match b {\n   |                                  - this expression has type\
    \ `&isize`\n18 |             Some(b) => result.push(-b),\n19 |             None\
    \ => result.push(a),\n   |             ^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpo2xqy0ij.rs:22:5\n   |\n11 | fn\
    \ compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |         \
    \                                           ---------- expected `Vec<isize>` because\
    \ of return type\n...\n22 |     result\n   |     ^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<&isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n\n    if game.len() != guess.len() {\n\
    \        result.push(0);\n        return result;\n    }\n\n    let mut match =\
    \ 0;\n\n    for &s in game {\n        for &g in guess {\n            if s == g\
    \ {\n                match += 1;\n                break;\n            }\n    \
    \    }\n    }\n\n    for i in 0..match {\n        let diff = guess[i] - game[i];\n\
    \        result.push(diff);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found keyword `match`\n  --> /tmp/tmpjiadu6y1.rs:19:13\n\
    \   |\n19 |     let mut match = 0;\n   |             ^^^^^ expected identifier,\
    \ found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n\
    19 |     let mut r#match = 0;\n   |             ++\n\nerror: expected expression,\
    \ found `+=`\n  --> /tmp/tmpjiadu6y1.rs:24:23\n   |\n24 |                 match\
    \ += 1;\n   |                 ----- ^^ expected expression\n   |             \
    \    |\n   |                 while parsing this `match` expression\n\nerror: expected\
    \ one of `.`, `?`, `{`, or an operator, found `result`\n  --> /tmp/tmpjiadu6y1.rs:35:5\n\
    \   |\n30 |     for i in 0..match {\n   |                 ----- while parsing\
    \ this `match` expression\n...\n33 |     }\n   |      - expected one of `.`, `?`,\
    \ `{`, or an operator\n34 | \n35 |     result\n   |     ^^^^^^ unexpected token\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpjiadu6y1.rs:21:9\n   |\n21 | \
    \    for &s in game {\n   |         ^^    ---- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `s`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpjiadu6y1.rs:22:13\n   |\n22 |         for &g in guess {\n   | \
    \            ^^    ----- this expression has type `Option<isize>`\n   |      \
    \       |\n   |             expected `isize`, found reference\n   |          \
    \   help: you can probably remove the explicit borrow: `g`\n   |\n   = note: \
    \  expected type `isize`\n           found reference `&_`\n\nerror: aborting due\
    \ to 5 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = game.clone();\n    let mut score: isize\
    \ = 0;\n    for (g, s) in guess.iter_mut().zip(game.iter_mut()) {\n        if\
    \ g == s {\n            result[g] = 0;\n            score += 1;\n        } else\
    \ {\n            result[g] = |a, b| a - b;\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&mut isize`\n  -->\
    \ /tmp/tmpee8ryo69.rs:16:13\n   |\n16 |             result[g] = 0;\n   |     \
    \        ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  \
    \ |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&mut isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&mut isize>` for\
    \ `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&mut\
    \ isize`\n  --> /tmp/tmpee8ryo69.rs:19:13\n   |\n19 |             result[g] =\
    \ |a, b| a - b;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `&mut isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&mut isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut dist: Vec<isize> = vec![0; game.len()];\n    for i in 0..game.len()\
    \ {\n        let diff = game[i] - guess[i];\n        dist[i] = if diff < 0 {\n\
    \            -diff\n        } else {\n            diff\n        };\n    }\n  \
    \  dist\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut guessed_correctly = true;\n    let mut difference = isize::max_value();\n\
    \    for index in (0..game.len()).step_by(4) {\n        difference = game.iter()\n\
    \            .zip(guess.iter())\n            .filter_map(|e| {\n             \
    \   match e.0.cmp(&e.1) {\n                    Ordering::Less => false,\n    \
    \                Ordering::Equal => true,\n                    Ordering::Greater\
    \ => false\n                }\n            })\n            .filter(|b| b)\n  \
    \          .sum();\n        if guessed_correctly {\n            difference +=\
    \ isize::max_value();\n        }\n        guessed_correctly = difference == 0;\n\
    \    }\n    difference\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp2irpmkpa.rs:19:21\n   |\n19 |                     Ordering::Less =>\
    \ false,\n   |                     ^^^^^^^^ use of undeclared type `Ordering`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp2irpmkpa.rs:20:21\n\
    \   |\n20 |                     Ordering::Equal => true,\n   |               \
    \      ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmp2irpmkpa.rs:21:21\n   |\n21\
    \ |                     Ordering::Greater => false\n   |                     ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2irpmkpa.rs:19:39\n\
    \   |\n19 |                     Ordering::Less => false,\n   |               \
    \                        ^^^^^ expected enum `Option`, found `bool`\n   |\n  \
    \ = note: expected enum `Option<_>`\n              found type `bool`\nhelp: try\
    \ wrapping the expression in `Some`\n   |\n19 |                     Ordering::Less\
    \ => Some(false),\n   |                                       +++++     +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp2irpmkpa.rs:24:25\n   |\n24 |  \
    \           .filter(|b| b)\n   |                         ^ expected `bool`, found\
    \ reference\n   |\n   = note:   expected type `bool`\n           found reference\
    \ `&_`\nhelp: consider dereferencing the borrow\n   |\n24 |             .filter(|b|\
    \ *b)\n   |                         +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp2irpmkpa.rs:31:5\n   |\n11 | fn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n31 |     difference\n   |\
    \     ^^^^^^^^^^ expected struct `Vec`, found `isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n                found type `isize`\n\nerror: aborting due\
    \ to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // Your code here\n    \n    \n    // Solution\n    \n    let mut max_diff\
    \ = 0usize;\n    for i in game.iter() {\n        if guess == i {\n           \
    \ max_diff += 0;\n        } else {\n            max_diff += abs(guess - i);\n\
    \        }\n    }\n    \n    let mut correct_guess_count = 0;\n    for i in guess.iter()\
    \ {\n        if game == i {\n            correct_guess_count += 1;\n        }\n\
    \    }\n    \n    let mut correct_guess_array: Vec<isize> = vec![0usize;];\n \
    \   for i in 0..guess.length {\n        if guess[i] == game {\n            correct_guess_array.append(i);\n\
    \        }\n    }\n    \n    let mut wrong_guess_array: Vec<isize> = vec![0usize;];\n\
    \    for i in 0..guess.length {\n        if guess == i {\n            wrong_guess_array.append(i);\n\
    \        }\n    }\n    \n    let mut total_array: Vec<isize> = vec![0usize;];\n\
    \    for i in 0..guess.length {\n        if game == i {\n            total_array.append(i);\n\
    \        }\n    }\n    \n    correct_guess_array.iter_mut().for_each(|i|{\n  \
    \      max_diff += abs(guess[i] - i);\n    })\n    wrong_guess_array.iter_mut().for_each(|i|{\n\
    \        max_diff += abs(guess[i] - i);\n    })\n    total_array.iter_mut().for_each(|i|{\n\
    \        max_diff += abs(guess[i] - i);\n    })\n    \n    max_diff += correct_guess_count;\n\
    \    \n    let mut final_array = vec![0usize;];\n    for i in 0..guess.length\
    \ {\n        if total_array[i] == guess[i] {\n            final_array.append(0);\n\
    \        } else {\n            final_array.append(abs(guess[i] - total_array[i]));\n\
    \        }\n    }\n    \n    return final_array;\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `wrong_guess_array`\n  --> /tmp/tmpjhml42ne.rs:56:7\n\
    \   |\n56 |     })\n   |       ^ help: add `;` here\n57 |     wrong_guess_array.iter_mut().for_each(|i|{\n\
    \   |     ----------------- unexpected token\n\nerror: expected `;`, found `total_array`\n\
    \  --> /tmp/tmpjhml42ne.rs:59:7\n   |\n59 |     })\n   |       ^ help: add `;`\
    \ here\n60 |     total_array.iter_mut().for_each(|i|{\n   |     ----------- unexpected\
    \ token\n\nerror: expected `;`, found `max_diff`\n  --> /tmp/tmpjhml42ne.rs:62:7\n\
    \   |\n62 |     })\n   |       ^ help: add `;` here\n63 |     \n64 |     max_diff\
    \ += correct_guess_count;\n   |     -------- unexpected token\n\nerror: unexpected\
    \ end of macro invocation\n  --> /tmp/tmpjhml42ne.rs:33:59\n   |\n33 |     let\
    \ mut correct_guess_array: Vec<isize> = vec![0usize;];\n   |                 \
    \                                          ^ missing tokens in macro arguments\n\
    \nerror: unexpected end of macro invocation\n  --> /tmp/tmpjhml42ne.rs:40:57\n\
    \   |\n40 |     let mut wrong_guess_array: Vec<isize> = vec![0usize;];\n   | \
    \                                                        ^ missing tokens in macro\
    \ arguments\n\nerror: unexpected end of macro invocation\n  --> /tmp/tmpjhml42ne.rs:47:51\n\
    \   |\n47 |     let mut total_array: Vec<isize> = vec![0usize;];\n   |       \
    \                                            ^ missing tokens in macro arguments\n\
    \nerror: unexpected end of macro invocation\n  --> /tmp/tmpjhml42ne.rs:66:39\n\
    \   |\n66 |     let mut final_array = vec![0usize;];\n   |                   \
    \                    ^ missing tokens in macro arguments\n\nerror[E0425]: cannot\
    \ find function `abs` in this scope\n  --> /tmp/tmpjhml42ne.rs:22:25\n   |\n22\
    \ |             max_diff += abs(guess - i);\n   |                         ^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `abs` in this\
    \ scope\n  --> /tmp/tmpjhml42ne.rs:55:21\n   |\n55 |         max_diff += abs(guess[i]\
    \ - i);\n   |                     ^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `abs` in this scope\n  --> /tmp/tmpjhml42ne.rs:58:21\n\
    \   |\n58 |         ma"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // TODO: Complete the function\n    game\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5, 1]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmplh7icsj6.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    game\n        .iter()\n        .zip(guess.iter())\n        .map(|(&a,\
    \ &b)| {\n            let mut diff = b - a;\n            if diff > 0 { diff *=\
    \ -1 } else { diff *= 2 };\n            diff\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, -6, -6]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpz75s29np.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    if game.len() != guess.len() {\n        panic!(\"compare expects equal\
    \ input lengths\");\n    }\n\n    // the score of each game will be the difference\
    \ of the score of each guess\n    let mut score: Vec<isize> = game;\n    for i\
    \ in 0..game.len() {\n        let score_index = score.len() - i - 1;\n       \
    \ let guess_index = guess.len() - i - 1;\n        if game[i] != guess[guess_index]\
    \ {\n            score[score_index] = -std::cmp::min(score[i], -guess[guess_index]);\n\
    \        }\n    }\n    score\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `game`\n  --> /tmp/tmp80xcj77v.rs:18:17\n\
    \   |\n11 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n\
    \   |            ---- move occurs because `game` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n17 |     let mut score: Vec<isize>\
    \ = game;\n   |                                 ---- value moved here\n18 |  \
    \   for i in 0..game.len() {\n   |                 ^^^^^^^^^^ value borrowed here\
    \ after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    if game.len() != guess.len() {\n        panic!(\"Incorrect amount of\
    \ elements in array for compare\");\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..game.len() {\n        let distance = abs(guess - game[i]);\n\
    \        result.push(distance);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp1ie0zbaf.rs:17:24\n\
    \   |\n17 |         let distance = abs(guess - game[i]);\n   |               \
    \         ^^^ not found in this scope\n\nerror[E0369]: cannot subtract `isize`\
    \ from `Vec<isize>`\n  --> /tmp/tmp1ie0zbaf.rs:17:34\n   |\n17 |         let distance\
    \ = abs(guess - game[i]);\n   |                            ----- ^ ------- isize\n\
    \   |                            |\n   |                            Vec<isize>\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0369, E0425.\nFor more information about an error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut score = 0\n    guess.iter().for_each(|&n| match game.contains(&n)\
    \ {\n        true => score += 1,\n        false => score += abs(n - &game[0]),\n\
    \    })\n    vec![score]\n}\n\nfn main() {\n    let candidate = compare;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `guess`\n  --> /tmp/tmp_pbl5gym.rs:12:22\n \
    \  |\n12 |     let mut score = 0\n   |                      ^ help: add `;` here\n\
    13 |     guess.iter().for_each(|&n| match game.contains(&n) {\n   |     -----\
    \ unexpected token\n\nerror: expected `;`, found `vec`\n  --> /tmp/tmp_pbl5gym.rs:16:7\n\
    \   |\n16 |     })\n   |       ^ help: add `;` here\n17 |     vec![score]\n  \
    \ |     --- unexpected token\n\nerror[E0425]: cannot find function `abs` in this\
    \ scope\n  --> /tmp/tmp_pbl5gym.rs:15:27\n   |\n15 |         false => score +=\
    \ abs(n - &game[0]),\n   |                           ^^^ not found in this scope\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    assert!(game.is_sorted());\n    assert!(guess.is_sorted());\n    \n \
    \   let mut diffs = Vec::new();\n    diffs.push(guess.len() - game.len());\n \
    \   for i in game.iter().skip(guess.len()) {\n        let mut diff = 0;\n    \
    \    for g in guess.iter() {\n            if g == i {\n                diff =\
    \ 0;\n            } else {\n                diff = diff + 1;\n            }\n\
    \        }\n        diffs.push(diff);\n    }\n    return diffs;\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0658]: use of unstable library feature 'is_sorted': new API\n  -->\
    \ /tmp/tmphytb2esi.rs:12:18\n   |\n12 |     assert!(game.is_sorted());\n   | \
    \                 ^^^^^^^^^\n   |\n   = note: see issue #53485 <https://github.com/rust-lang/rust/issues/53485>\
    \ for more information\n\nerror[E0658]: use of unstable library feature 'is_sorted':\
    \ new API\n  --> /tmp/tmphytb2esi.rs:13:19\n   |\n13 |     assert!(guess.is_sorted());\n\
    \   |                   ^^^^^^^^^\n   |\n   = note: see issue #53485 <https://github.com/rust-lang/rust/issues/53485>\
    \ for more information\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphytb2esi.rs:28:12\n\
    \   |\n11 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n\
    \   |                                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n28 |     return diffs;\n   |            ^^^^^ expected\
    \ `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \          found struct `Vec<usize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0658.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // Your code here\n    let mut abs_diff = 0\n    for i in 0..game.len()\
    \ {\n        let game = game[i]\n        let guess = guess[i]\n        let diff\
    \ = abs::max(game, guess)\n        if diff > abs_diff {\n            abs_diff\
    \ = diff\n        }\n    }\n    abs_diff\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmp4vf3xheq.rs:13:25\n\
    \   |\n13 |     let mut abs_diff = 0\n   |                         ^ help: add\
    \ `;` here\n14 |     for i in 0..game.len() {\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp4vf3xheq.rs:15:27\n\
    \   |\n15 |         let game = game[i]\n   |                           ^ help:\
    \ add `;` here\n16 |         let guess = guess[i]\n   |         --- unexpected\
    \ token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp4vf3xheq.rs:16:29\n\
    \   |\n16 |         let guess = guess[i]\n   |                             ^ help:\
    \ add `;` here\n17 |         let diff = abs::max(game, guess)\n   |         ---\
    \ unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp4vf3xheq.rs:17:41\n\
    \   |\n17 |         let diff = abs::max(game, guess)\n   |                   \
    \                      ^ help: add `;` here\n18 |         if diff > abs_diff {\n\
    \   |         -- unexpected token\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ crate or module `abs`\n  --> /tmp/tmp4vf3xheq.rs:17:20\n   |\n17 |         let\
    \ diff = abs::max(game, guess)\n   |                    ^^^ use of undeclared\
    \ crate or module `abs`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4vf3xheq.rs:22:5\n\
    \   |\n11 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n\
    \   |                                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n22 |     abs_diff\n   |     ^^^^^^^^ expected struct\
    \ `Vec`, found integer\n   |\n   = note: expected struct `Vec<isize>`\n      \
    \          found type `{integer}`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in 0..game.len() {\n        let mut\
    \ result1 = i;\n        let mut result2 = 0;\n        if game[i] != guess[0] {\n\
    \            result1 = i;\n            result2 = 0;\n        }\n        if game[i]\
    \ != guess[1] {\n            result1 = i;\n            result2 = 0;\n        }\n\
    \        if game[i] != guess[2] {\n            result1 = i;\n            result2\
    \ = 0;\n        }\n        if game[i] != guess[3] {\n            result1 = i;\n\
    \            result2 = 0;\n        }\n        if game[i] != guess[4] {\n     \
    \       result1 = i;\n            result2 = 0;\n        }\n        if game[i]\
    \ != guess[5] {\n            result1 = i;\n            result2 = 0;\n        }\n\
    \        if game[i] != guess[6] {\n            result1 = i;\n            result2\
    \ = 0;\n        }\n        if game[i] != guess[7] {\n            result1 = i;\n\
    \            result2 = 0;\n        }\n        if game[i] != guess[8] {\n     \
    \       result1 = i;\n            result2 = 0;\n        }\n        if game[i]\
    \ != guess[9] {\n            result1 = i;\n            result2 = 0;\n        }\n\
    \        if game[i] != guess[10] {\n            result1 = i;\n            result2\
    \ = 0;\n        }\n        if game[i] != guess[11] {\n            result1 = i;\n\
    \            result2 = 0;\n        }\n        if game[i] != guess[12] {\n    \
    \        result1 = i;\n            result2 = 0;\n        }\n        if game[i]\
    \ != guess[13] {\n            result1 = i;\n            result2 = 0;\n       \
    \ }\n        if game[i] != guess[14] {\n            result1 = i;\n           \
    \ result2 = 0;\n        }\n        if game[i] != guess[15] {\n            result1\
    \ = i;\n            result2 = 0;\n        }\n        if game[i] != guess[16] {\n\
    \            result1 = i;\n            result2 = 0;\n        }\n        if game[i]\
    \ != guess[17] {\n            result1 = i;\n            result2 = 0;\n       \
    \ }\n        if game[i] != guess[18] {\n            result1 = i;\n           \
    \ result2 = 0;\n        }\n        if game[i] != guess[19] {\n            result1\
    \ = i;\n            result2 = 0;\n        }\n        if game[i] != guess[20] {\n\
    \            result1 = i;\n            result2 = 0;\n        }\n        if game[i]\
    \ != guess[21] {\n            result1 = i;\n            result2 = 0;\n       \
    \ }\n        if game[i] != guess[22] {\n            result1 = i;\n           \
    \ result2 = 0;\n        }\n        if game[i] != guess[23] {\n            result1\
    \ = i;\n            result2 = 0;\n        }\n        if game[i] != guess[24] {\n\
    \            result1 = i;\n            result2 = 0;\n        }\n        if game[i]\
    \ != guess[25] {\n            result1 = i;\n            result2 = 0;\n       \
    \ }\n        if game[i] != guess[26] {\n            result1 = i;\n           \
    \ result2 = 0;\n        }\n\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpvvbelo0f.rs:133:3\n\
    \    |\n11  | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n\
    \    |                                                               - unclosed\
    \ delimiter\n12  |     let mut result = vec![];\n13  |     for i in 0..game.len()\
    \ {\n    |                            - this delimiter might not be properly closed...\n\
    ...\n125 | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n133 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvvbelo0f.rs:11:52\n\
    \   |\n11 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n\
    \   |    -------                                         ^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = game;\n    for i in game.iter().rev().cloned()\
    \ {\n        let mut sum = 0;\n        for g in guess.iter() {\n            sum\
    \ += *g;\n        }\n        if sum > i {\n            result[i] += 1;\n     \
    \   } else {\n            result[i] += -1;\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp63uxuv8z.rs:19:13\n\
    \   |\n19 |             result[i] += 1;\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp63uxuv8z.rs:21:13\n   |\n21 |            \
    \ result[i] += -1;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = guess.iter().cloned().collect();\n    let\
    \ mut current_guess = Vec::new();\n    loop {\n        if game.is_empty() {\n\
    \            loop {\n                let next_guess: isize = get_next_guess(&current_guess);\n\
    \                if next_guess == 0 {\n                    return result;\n  \
    \              }\n                current_guess.push(next_guess);\n          \
    \  }\n        }\n        let next_guess: isize = get_next_guess(&current_guess);\n\
    \        if next_guess == 0 {\n            return result;\n        }\n       \
    \ \n        if next_guess == game[0] {\n            result.push(0);\n        \
    \    current_guess.clear();\n        } else {\n            result.push(next_guess\
    \ - game[0]);\n            current_guess.push(next_guess);\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `get_next_guess` in this scope\n  -->\
    \ /tmp/tmpbn6616jz.rs:17:41\n   |\n17 |                 let next_guess: isize\
    \ = get_next_guess(&current_guess);\n   |                                    \
    \     ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `get_next_guess` in this scope\n  --> /tmp/tmpbn6616jz.rs:24:33\n   |\n24 |\
    \         let next_guess: isize = get_next_guess(&current_guess);\n   |      \
    \                           ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    if game.len() != guess.len() {\n        panic!(\"Not same length\");\n\
    \    }\n    let mut result = vec![0; game.len()];\n    for i in 0..game.len()\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i]);\n\
    \        } else {\n            result[i] = 0;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpsunnc9sh.rs:18:25\n\
    \   |\n18 |             result[i] = abs(game[i] - guess[i]);\n   |           \
    \              ^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    for i in 0..game.len() {\n        let diff = guess[i] - game[i];\n  \
    \      if diff != 0 {\n            return vec![diff, abs(diff)];\n        }\n\
    \    }\n    vec![0, 0]\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpaoh1wik5.rs:15:31\n\
    \   |\n15 |             return vec![diff, abs(diff)];\n   |                  \
    \             ^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    guess = guess.to_owned();\n    let mut result = guess.iter().cloned().collect();\n\
    \    for i in game.reverse() {\n        if i as isize >= 0? {\n            result.remove(i);\n\
    \            if result.len() == 0 {\n                break;\n            }\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: `()` is not an iterator\n  --> /tmp/tmpy2ogsllw.rs:14:14\n\
    \   |\n14 |     for i in game.reverse() {\n   |              ^^^^^^^^^^^^^^ `()`\
    \ is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `()`\n   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `()`\n\nerror[E0277]: the `?` operator can only be applied to values that\
    \ implement `Try`\n  --> /tmp/tmpy2ogsllw.rs:15:26\n   |\n15 |         if i as\
    \ isize >= 0? {\n   |                          ^^ the `?` operator cannot be applied\
    \ to type `{integer}`\n   |\n   = help: the trait `Try` is not implemented for\
    \ `{integer}`\n\nerror[E0277]: the `?` operator can only be used in a function\
    \ that returns `Result` or `Option` (or another type that implements `FromResidual`)\n\
    \  --> /tmp/tmpy2ogsllw.rs:15:27\n   |\n11 | / fn compare(game: Vec<isize>, guess:\
    \ Vec<isize>) -> Vec<isize> {\n12 | |     guess = guess.to_owned();\n13 | |  \
    \   let mut result = guess.iter().cloned().collect();\n14 | |     for i in game.reverse()\
    \ {\n15 | |         if i as isize >= 0? {\n   | |                           ^\
    \ cannot use the `?` operator in a function that returns `Vec<isize>`\n...  |\n\
    22 | |     result\n23 | | }\n   | |_- this function should return `Result` or\
    \ `Option` to accept `?`\n   |\n   = help: the trait `FromResidual<_>` is not\
    \ implemented for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut current_score = 0;\n    let\
    \ mut current_guess = 0;\n    for index in 0..game.len() {\n        if guess[index]\
    \ == game[index] {\n            current_score = 0;\n            current_guess\
    \ += 1;\n        } else {\n            result.push(abs(current_guess - current_score));\n\
    \            current_score = 0;\n            current_guess = 0;\n        }\n \
    \   }\n    if current_guess == game.len() {\n        result.push(0);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpac6byyrq.rs:20:25\n\
    \   |\n20 |             result.push(abs(current_guess - current_score));\n   |\
    \                         ^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut arr: Vec<isize> = vec![0; game.len()];\n    for i in (0..game.len()).clone()\
    \ {\n        if game[i] == guess[i] {\n            arr[i] = 0;\n        } else\
    \ {\n            arr[i] = game[i] - guess[i];\n        }\n    }\n    return arr;\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // Your code goes here\n    let mut result = Vec::<isize>::new();\n \
    \   for index in 0..guess.len() {\n        let score = game[index] as isize;\n\
    \        result.push(match guess {\n            0 => 0,\n            _ => {\n\
    \                if score == 0 {\n                    score\n                }\
    \ else {\n                    let diff = score - guess[index];\n             \
    \       match diff {\n                        x if x < 0 => -x,\n            \
    \            x if x > 0 => x,\n                        x => x,\n             \
    \       }\n                }\n            }\n        });\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0n9zph9w.rs:17:13\n   |\n\
    16 |         result.push(match guess {\n   |                           ----- this\
    \ expression has type `Vec<isize>`\n17 |             0 => 0,\n   |           \
    \  ^ expected struct `Vec`, found integer\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `{integer}`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let game_len: usize = game.len();\n    let guess_len: usize = guess.len();\n\
    \    let mut guess_score: isize = game.iter().sum();\n    let mut correct_guess_score:\
    \ isize = guess.iter().sum();\n    let mut wrong_guesses: Vec<isize> = Vec::with_capacity(guess_len);\n\
    \    for i in 0..guess_len {\n        if game[i] == guess[i] {\n            guess_score\
    \ += 1;\n        } else {\n            wrong_guesses.push((game[i] - guess[i]));\n\
    \            guess_score -= 1;\n        }\n    }\n    if guess_score == correct_guess_score\
    \ {\n        return vec![guess_score];\n    }\n    if guess_score > correct_guess_score\
    \ {\n        let mut wrong_guesses_len = wrong_guesses.len();\n        for i in\
    \ 0..(wrong_guesses_len - 1) {\n            if wrong_guesses[i] < 0 {\n      \
    \          wrong_guesses.pop(i);\n                break;\n            }\n    \
    \    }\n        return vec![guess_score - wrong_guesses[wrong_guesses_len - 1]];\n\
    \    }\n    if guess_score < correct_guess_score {\n        let mut wrong_guesses_len\
    \ = wrong_guesses.len();\n        for i in 0..(wrong_guesses_len - 1) {\n    \
    \        if wrong_guesses[i] < 0 {\n                wrong_guesses.pop(i);\n  \
    \              break;\n            }\n        }\n        return vec![wrong_guesses[wrong_guesses_len\
    \ - 1]];\n    }\n    return vec![];\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around method argument\n  --> /tmp/tmpjjml1guv.rs:21:32\n\
    \   |\n21 |             wrong_guesses.push((game[i] - guess[i]));\n   |      \
    \                          ^                  ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n21 -             wrong_guesses.push((game[i]\
    \ - guess[i]));\n21 +             wrong_guesses.push(game[i] - guess[i]);\n  \
    \ | \n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpjjml1guv.rs:32:31\n     |\n32   |                 wrong_guesses.pop(i);\n\
    \     |                               ^^^ - supplied 1 argument\n     |      \
    \                         |\n     |                               expected 0 arguments\n\
    \     |\nnote: associated function defined here\n\nerror[E0061]: this function\
    \ takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmpjjml1guv.rs:42:31\n\
    \     |\n42   |                 wrong_guesses.pop(i);\n     |                \
    \               ^^^ - supplied 1 argument\n     |                            \
    \   |\n     |                               expected 0 arguments\n     |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 2 previous errors;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut score = Vec::new();\n    for i in 0..game.len() {\n        let\
    \ mut diff = 0;\n        for j in 0..guess.len() {\n            if game[i] ==\
    \ guess[j] {\n                diff += 1;\n            }\n        }\n        score.push(diff\
    \ as isize);\n    }\n    score\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 1, 0, 1]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmp893v_grg.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    for val in game\n        .iter()\n\
    \        .zip(guess.iter())\n        .zip(guess.iter())\n        .map(|(a,b)|\
    \ a < b ? b - a : a - b)\n        .take(guess.len())\n    {\n        result.push(val);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `b`\n\
    \  --> /tmp/tmprhw5fdxw.rs:17:30\n   |\n17 |         .map(|(a,b)| a < b ? b -\
    \ a : a - b)\n   |                             -^ expected one of `)`, `,`, `.`,\
    \ `?`, or an operator\n   |                             |\n   |              \
    \               help: missing `,`\n\nerror[E0425]: cannot find value `b` in this\
    \ scope\n  --> /tmp/tmprhw5fdxw.rs:17:30\n   |\n17 |         .map(|(a,b)| a <\
    \ b ? b - a : a - b)\n   |                              ^ not found in this scope\n\
    \nerror[E0425]: cannot find value `a` in this scope\n  --> /tmp/tmprhw5fdxw.rs:17:34\n\
    \   |\n17 |         .map(|(a,b)| a < b ? b - a : a - b)\n   |                \
    \                  ^ expecting a type here because of type ascription\n\nerror[E0412]:\
    \ cannot find type `a` in this scope\n  --> /tmp/tmprhw5fdxw.rs:17:38\n   |\n\
    17 |         .map(|(a,b)| a < b ? b - a : a - b)\n   |                       \
    \               ^ expecting a type here because of type ascription\n\nerror[E0425]:\
    \ cannot find value `b` in this scope\n  --> /tmp/tmprhw5fdxw.rs:17:42\n   |\n\
    17 |         .map(|(a,b)| a < b ? b - a : a - b)\n   |                       \
    \                   ^ not found in this scope\n\nerror[E0277]: the `?` operator\
    \ can only be used in a closure that returns `Result` or `Option` (or another\
    \ type that implements `FromResidual`)\n  --> /tmp/tmprhw5fdxw.rs:17:28\n   |\n\
    17 |         .map(|(a,b)| a < b ? b - a : a - b)\n   |              --------------^\n\
    \   |              |             |\n   |              |             cannot use\
    \ the `?` operator in a closure that returns `bool`\n   |              this function\
    \ should return `Result` or `Option` to accept `?`\n   |\n   = help: the trait\
    \ `FromResidual<_>` is not implemented for `bool`\n\nerror[E0061]: this function\
    \ takes 1 argument but 2 arguments were supplied\n   --> /tmp/tmprhw5fdxw.rs:17:10\n\
    \    |\n17  |         .map(|(a,b)| a < b ? b - a : a - b)\n    |          ^^^\
    \ --------------- ------------- supplied 2 arguments\n    |          |\n    |\
    \          expected 1 argument\n    |\nnote: associated fu"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut score = 0;\n    let mut guesses = guess.to_vec();\n    while\
    \ let Some(idx) = game.remove(0); idx != -1 {\n        let score = score + 1;\n\
    \        guesses[idx] -= 1;\n    }\n    guesses.clone_from(guesses.iter().cloned());\n\
    \    let mut result: Vec<isize> = guess.clone();\n    for (idx, val) in guess.iter().zip(guess.iter().cloned()).find(|(_,\
    \ v2)| v2 < val) {\n        if val > 0 {\n            result[idx] = val - score;\n\
    \        } else {\n            result[idx] = 0;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `;`\n  --> /tmp/tmpuhm1xxos.rs:14:41\n   |\n\
    14 |     while let Some(idx) = game.remove(0); idx != -1 {\n   |     ----- ------------------------------^\
    \ expected `{`\n   |     |     |\n   |     |     this `while` condition successfully\
    \ parsed\n   |     while parsing the body of this `while` expression\n\nerror:\
    \ aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::<isize>::new();\n    for el in game.iter() {\n\
    \        let mut diff: isize = 0;\n        for g in guess.iter() {\n         \
    \   if el == g {\n                diff = 0;\n                break;\n        \
    \    }\n            diff += g - el;\n        }\n        result.push(diff);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, -20, 0]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpum5gv9s3.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut diff: Vec<isize> = guess[..].to_vec();\n    for &el in game {\n\
    \        if el != guess[0] {\n            diff.append(el - guess[0]);\n      \
    \  }\n    }\n    diff\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy3r3bcu0.rs:13:9\n   |\n\
    13 |     for &el in game {\n   |         ^^^    ---- this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `el`\n   |\n\
    \   = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut answer = Vec::new();\n    for (i, gameItem) in game.iter().enumerate()\
    \ {\n        let guessItem = guess[i];\n        let diff = abs(gameItem - guessItem);\n\
    \        answer.push(diff);\n    }\n    answer\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpjawvpqpf.rs:15:20\n\
    \   |\n15 |         let diff = abs(gameItem - guessItem);\n   |              \
    \      ^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut diff = 0;\n    for i in 0..guess.len() {\n        diff += guess[i]\
    \ - game[i];\n    }\n    \n    diff < 0 as Vec<isize>\n}\n\nfn main() {\n    let\
    \ candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiyb47u1l.rs:17:12\n   |\n\
    17 |     diff < 0 as Vec<isize>\n   |            ^^^^^^^^^^^^^^^ expected `isize`,\
    \ found struct `Vec`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiyb47u1l.rs:17:5\n\
    \   |\n11 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n\
    \   |                                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n17 |     diff < 0 as Vec<isize>\n   |     ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `bool`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `bool`\n\nerror[E0605]: non-primitive cast: `{integer}`\
    \ as `Vec<isize>`\n  --> /tmp/tmpiyb47u1l.rs:17:12\n   |\n17 |     diff < 0 as\
    \ Vec<isize>\n   |            ^^^^^^^^^^^^^^^ an `as` expression can only be used\
    \ to convert between primitive types or to coerce to a specific trait object\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0605.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut min_diff = isize::MAX;\n    let mut diff = 0;\n    let mut i\
    \ = 0;\n    while i < game.len() {\n        diff += game[i] - guess[i];\n    \
    \    if diff < min_diff {\n            min_diff = diff;\n        }\n        i\
    \ += 1;\n    }\n    if diff == 0 {\n        vec![min_diff]\n    } else {\n   \
    \     vec![min_diff as isize]\n    }\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpowou2bbq.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    if game.len() != guess.len() {\n        return Vec::new();\n    }\n \
    \   let mut score: Vec<isize> = Vec::new();\n    for i in 0..guess.len() {\n \
    \       if guess[i] == game[i] {\n            score.push(0);\n        } else {\n\
    \            score.push(game[i] - guess[i]);\n        }\n    }\n    return score\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    for i in 0..guess.len() {\n       \
    \ let mut results: isize = 0;\n        for g in game.iter().rev() {\n        \
    \    if g == guess {\n                results += 1;\n                break;\n\
    \            }\n            results += game[i] - g;\n        }\n        results.push(results);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `Vec<isize>`\n  --> /tmp/tmp02rykati.rs:16:18\n\
    \   |\n16 |             if g == guess {\n   |                  ^^ no implementation\
    \ for `&isize == Vec<isize>`\n   |\n   = help: the trait `PartialEq<Vec<isize>>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0599]: no method named `push`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmp02rykati.rs:22:17\n\
    \   |\n22 |         results.push(results);\n   |                 ^^^^ method not\
    \ found in `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::<isize>::new();\n    for i in 0..guess.len() {\n\
    \        if game[i] == guess[i] {\n            result.push(i);\n        } else\
    \ {\n            result.push(abs(game[i] - guess[i]));\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp0e9gk7ox.rs:17:25\n\
    \   |\n17 |             result.push(abs(game[i] - guess[i]));\n   |          \
    \               ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp0e9gk7ox.rs:15:25\n   |\n15 |             result.push(i);\n   |\
    \                         ^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n15 |             result.push(i.try_into().unwrap());\n   |            \
    \              ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // code goes here\n}\n\nfn main() {\n    let candidate = compare;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqnb2dr1o.rs:11:52\n   |\n\
    11 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |   \
    \ -------                                         ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \       found unit type `()`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let guess = guess.iter().cloned();\n    let mut result = Vec::<isize>::with_capacity(game.len());\n\
    \    for i in game.iter().cloned() {\n        match guess.get_mut(i) {\n     \
    \       Some(x) => result.push(x),\n            None => result.push(i),\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `get_mut` found for struct `Cloned` in the\
    \ current scope\n   --> /tmp/tmpg2tcty7q.rs:15:21\n    |\n15  |         match\
    \ guess.get_mut(i) {\n    |                     ^^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n    |\nhelp: consider wrapping the receiver expression with the appropriate\
    \ type\n    |\n15  |         match Pin::new(&mut guess).get_mut(i) {\n    |  \
    \             +++++++++++++      +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![0; game.len()];\n    for (i, score) in game.iter().zip(guess.iter()).filter(|&(_,\
    \ guess)| guess != 0).enumerate() {\n        result[i] = (score - guess).abs()\
    \ as isize;\n    }\n    return result;\n}\n\nfn main() {\n    let candidate =\
    \ compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpojjptzn9.rs:13:80\n\
    \   |\n13 |     for (i, score) in game.iter().zip(guess.iter()).filter(|&(_, guess)|\
    \ guess != 0).enumerate() {\n   |                                            \
    \                                    ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0369]: cannot subtract `Vec<isize>` from `(&isize, &isize)`\n\
    \  --> /tmp/tmpojjptzn9.rs:14:28\n   |\n14 |         result[i] = (score - guess).abs()\
    \ as isize;\n   |                      ----- ^ ----- Vec<isize>\n   |        \
    \              |\n   |                      (&isize, &isize)\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0369.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    game.iter().zip(guess.iter()).map(|(&g, &g)| {\n        if g == 0 {\n\
    \            0\n        } else if g == g {\n            g as isize\n        }\
    \ else {\n            abs(g - g)\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0415]: identifier `g` is bound more than once in this parameter\
    \ list\n  --> /tmp/tmp7l0d04rx.rs:12:46\n   |\n12 |     game.iter().zip(guess.iter()).map(|(&g,\
    \ &g)| {\n   |                                              ^ used as parameter\
    \ more than once\n\nerror[E0425]: cannot find function `abs` in this scope\n \
    \ --> /tmp/tmp7l0d04rx.rs:18:13\n   |\n18 |             abs(g - g)\n   |     \
    \        ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0415, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0415`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // Your code here\n    return guesses.iter().map(|x| abs(x - game)).collect();\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `guesses` in this scope\n  --> /tmp/tmptko26daq.rs:13:12\n\
    \   |\n13 |     return guesses.iter().map(|x| abs(x - game)).collect();\n   |\
    \            ^^^^^^^ help: a local variable with a similar name exists: `guess`\n\
    \nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmptko26daq.rs:13:35\n\
    \   |\n13 |     return guesses.iter().map(|x| abs(x - game)).collect();\n   |\
    \                                   ^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    for i in 0..guess.len() {\n       \
    \ let mut score = 0;\n        for j in 0..game.len() {\n            if game[j]\
    \ == guess[i] {\n                score += 1;\n                break;\n       \
    \     }\n        }\n        if score == game.len() {\n            result.push(i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx5y4pyj4.rs:25:5\n   |\n\
    11 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |   \
    \                                                 ---------- expected `Vec<isize>`\
    \ because of return type\n...\n25 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \ found struct `Vec<usize>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    assert!(game.len() == guess.len());\n    let mut result = Vec::new();\n\
    \    for i in 0..game.len() {\n        result.append(guess[i] - game[i]);\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyzalq02s.rs:15:23\n   |\n\
    15 |         result.append(guess[i] - game[i]);\n   |                       ^^^^^^^^^^^^^^^^^^\
    \ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference\
    \ `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut diff = Vec::with_capacity(guess[0].len());\n    for i in 0..guess[0].len()\
    \ {\n        if guess[0][i] > game[0] {\n            diff.push(-guess[0][i]);\n\
    \        } else {\n            diff.push(guess[0][i] - game[0]);\n        }\n\
    \    }\n    for i in 1..guess[0].len() {\n        if guess[0][i] < game[0] {\n\
    \            diff.push(-guess[0][i]);\n        } else {\n            diff.push(guess[0][i]\
    \ - game[0]);\n        }\n    }\n    diff\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpa4amvhad.rs:12:48\n   |\n12 |     let mut diff = Vec::with_capacity(guess[0].len());\n\
    \   |                                                ^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `len` found for type `isize` in the current scope\n\
    \  --> /tmp/tmpa4amvhad.rs:13:26\n   |\n13 |     for i in 0..guess[0].len() {\n\
    \   |                          ^^^ method not found in `isize`\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmpa4amvhad.rs:14:12\n\
    \   |\n14 |         if guess[0][i] > game[0] {\n   |            ^^^^^^^^^^^\n\n\
    error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpa4amvhad.rs:15:24\n\
    \   |\n15 |             diff.push(-guess[0][i]);\n   |                       \
    \ ^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `isize`\n  -->\
    \ /tmp/tmpa4amvhad.rs:17:23\n   |\n17 |             diff.push(guess[0][i] - game[0]);\n\
    \   |                       ^^^^^^^^^^^\n\nerror[E0599]: no method named `len`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpa4amvhad.rs:20:26\n\
    \   |\n20 |     for i in 1..guess[0].len() {\n   |                          ^^^\
    \ method not found in `isize`\n\nerror[E0608]: cannot index into a value of type\
    \ `isize`\n  --> /tmp/tmpa4amvhad.rs:21:12\n   |\n21 |         if guess[0][i]\
    \ < game[0] {\n   |            ^^^^^^^^^^^\n\nerror[E0608]: cannot index into\
    \ a value of type `isize`\n  --> /tmp/tmpa4amvhad.rs:22:24\n   |\n22 |       \
    \      diff.push(-guess[0][i]);\n   |                        ^^^^^^^^^^^\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmpa4amvhad.rs:24:23\n\
    \   |\n24 |             diff.push(guess[0][i] - game[0]);\n   |              \
    \         ^^^^^^^^^^^\n\nerror: aborting due to 9 previous errors\n\nSome errors\
    \ have detailed explanations: E0599, E0608.\nFor more information about an error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut i = game.len();\n    while\
    \ i > 0 {\n        let mut current = game[i - 1].saturating_add(1, |x| x) as isize;\n\
    \        while current > 0 {\n            let mut best = -1;\n            for\
    \ i in 0..i.i+1 {\n                if current > guess[i] { best = i; break; }\n\
    \            }\n            if best != -1 { result.push(current - guess[best]);\
    \ }\n            current -= guess[best];\n            i -= 1;\n        }\n   \
    \     i -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \   --> /tmp/tmp4y7d5fig.rs:15:39\n    |\n15  |         let mut current = game[i\
    \ - 1].saturating_add(1, |x| x) as isize;\n    |                             \
    \          ^^^^^^^^^^^^^^ -  ----- supplied 2 arguments\n    |               \
    \                        |\n    |                                       expected\
    \ 1 argument\n    |\nnote: associated function defined here\n    = note: this\
    \ error originates in the macro `int_impl` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror[E0610]: `usize` is a primitive type and therefore doesn't\
    \ have fields\n  --> /tmp/tmp4y7d5fig.rs:18:27\n   |\n18 |             for i in\
    \ 0..i.i+1 {\n   |                           ^\n\nerror[E0277]: the trait bound\
    \ `usize: Neg` is not satisfied\n  --> /tmp/tmp4y7d5fig.rs:17:28\n   |\n17 | \
    \            let mut best = -1;\n   |                            ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror[E0600]: cannot apply unary\
    \ operator `-` to type `usize`\n  --> /tmp/tmp4y7d5fig.rs:21:24\n   |\n21 |  \
    \           if best != -1 { result.push(current - guess[best]); }\n   |      \
    \                  ^^\n   |                        |\n   |                   \
    \     cannot apply unary operator `-`\n   |                        help: you may\
    \ have meant the maximum value of `usize`: `usize::MAX`\n   |\n   = note: unsigned\
    \ values cannot be negated\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0061, E0277, E0600, E0610.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // Your code here\n    let mut result: Vec<isize> = game;\n\n    for\
    \ i in 0..game.len()-1 {\n        let mut found = false;\n        for j in 0..guess.len()-1\
    \ {\n            if game[i] == guess[j] {\n                found = true;\n   \
    \             break;\n            }\n        }\n        if !found {\n        \
    \    result[i] = result[i] + abs(game[i] - guess[i]);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmptse0m4hw.rs:24:37\n\
    \   |\n24 |             result[i] = result[i] + abs(game[i] - guess[i]);\n   |\
    \                                     ^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // Your code here\n    let game = game.to_owned();\n    let guess = guess.to_owned();\n\
    \    let mut res = Vec::new();\n    for i in 0..game.len() {\n        match game[i]\
    \ {\n            0 => {\n                match guess[i] {\n                  \
    \  0 => res.push(i),\n                    _ => {\n                        if i\
    \ > 0 {\n                            match guess[i - 1] {\n                  \
    \              0 => res.push(i),\n                                _ => {\n   \
    \                                 if i < game.len() - 1 {\n                  \
    \                      match guess[i + 1] {\n                                \
    \            0 => res.push(i),\n                                            _\
    \ => res.push(i + guess.iter().enumerate().filter(|(_,i)| i==i).map(|(i,)|i).max().unwrap_or(i+1)),\n\
    \                                        }\n                                 \
    \   } else {\n                                        res.push(i)\n          \
    \                          }\n                                }\n            \
    \                }\n                        } else {\n                       \
    \     res.push(i)\n                        }\n                    }\n        \
    \        }\n            }\n            _ => {\n                if i > 0 {\n  \
    \                  if guess[i-1] == 0 { // guess in middle of array\n        \
    \                if i < game.len() - 1 {\n                            match guess[i\
    \ + 1] {\n                                0 => res.push(i),\n                \
    \                _ => res.push(i + guess.iter().enumerate().filter(|(_,i)| i==i).map(|(i,)|i).max().unwrap_or(i+1)),\n\
    \                            }\n                        } else {\n           \
    \                 res.push(i)\n                        }\n                   \
    \ } else { // guess at beginning\n                        match guess[i] {\n \
    \                           0 => res.push(i),\n                            _ =>\
    \ res.push(i + guess.iter().enumerate().filter(|(_,i)| i==i).map(|(i,)|i).max().unwrap_or(i+1)),\n\
    \                        }\n                    }\n                } else {\n\
    \                    if i < game.len() - 1 {\n                        match guess[i\
    \ + 1] {\n                            0 => res.push(i),\n                    \
    \        _ => res.push(i + guess.iter().enumerate().filter(|(_,i)| i==i).map(|(i,)|i).max().unwrap_or(i+1)),\n\
    \                        }\n                    } else {\n                   \
    \     res.push(i)\n                    }\n                }\n            }\n \
    \       }\n    }\n    res\n}\n\nfn main() {\n    let candidate = compare;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpak_qdvm0.rs:29:114\n   |\n\
    29 | ...                   _ => res.push(i + guess.iter().enumerate().filter(|(_,i)|\
    \ i==i).map(|(i,)|i).max().unwrap_or(i+1)),\n   |                            \
    \                                                                ^^^-\n   |  \
    \                                                                            \
    \              |  |\n   |                                                    \
    \                                        |  expected due to this\n   |       \
    \                                                                            \
    \         expected a tuple with 2 elements, found one with 1 element\n   |\n \
    \  = note: expected tuple `(usize, &isize)`\n              found tuple `(_,)`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpak_qdvm0.rs:48:102\n   |\n48 |\
    \ ...                   _ => res.push(i + guess.iter().enumerate().filter(|(_,i)|\
    \ i==i).map(|(i,)|i).max().unwrap_or(i+1)),\n   |                            \
    \                                                                ^^^-\n   |  \
    \                                                                            \
    \              |  |\n   |                                                    \
    \                                        |  expected due to this\n   |       \
    \                                                                            \
    \         expected a tuple with 2 elements, found one with 1 element\n   |\n \
    \  = note: expected tuple `(usize, &isize)`\n              found tuple `(_,)`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpak_qdvm0.rs:56:98\n   |\n56 |\
    \ ...                   _ => res.push(i + guess.iter().enumerate().filter(|(_,i)|\
    \ i==i).map(|(i,)|i).max().unwrap_or(i+1)),\n   |                            \
    \                                                                ^^^-\n   |  \
    \                                                                            \
    \              |  |\n   |                                                    \
    \                                        |  expected due to this\n   |       \
    \        "
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut results: Vec<isize> = game\n        .iter()\n        .map(|score|\
    \ if *score == *guess { return 0 } else { |score| score as isize - guess })\n\
    \        .collect();\n    results.iter().enumerate().for_each(|(i, score)| {\n\
    \        if *score != 0 {\n            *i = *i - (*score as isize);\n        }\n\
    \    });\n    results\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp26_pwj0.rs:14:35\n   |\n\
    14 |         .map(|score| if *score == *guess { return 0 } else { |score| score\
    \ as isize - guess })\n   |                                   ^^^^^^ expected\
    \ `isize`, found slice `[isize]`\n\nerror[E0277]: cannot subtract `Vec<isize>`\
    \ from `isize`\n  --> /tmp/tmpp26_pwj0.rs:14:85\n   |\n14 |         .map(|score|\
    \ if *score == *guess { return 0 } else { |score| score as isize - guess })\n\
    \   |                                                                        \
    \             ^ no implementation for `isize - Vec<isize>`\n   |\n   = help: the\
    \ trait `Sub<Vec<isize>>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpp26_pwj0.rs:14:22\n   |\n14 |         .map(|score| if *score\
    \ == *guess { return 0 } else { |score| score as isize - guess })\n   |      \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected integer, found closure\n   |\n   = note: expected type `{integer}`\n\
    \           found closure `[closure@/tmp/tmpp26_pwj0.rs:14:62: 14:92]`\nnote:\
    \ return type inferred to be `{integer}` here\n  --> /tmp/tmpp26_pwj0.rs:14:51\n\
    \   |\n14 |         .map(|score| if *score == *guess { return 0 } else { |score|\
    \ score as isize - guess })\n   |                                            \
    \       ^\nhelp: use parentheses to call this closure\n   |\n14 |         .map(|score|\
    \ if *score == *guess { return 0 } else { |score| score as isize - guess }(score))\n\
    \   |                                                                        \
    \                      +++++++\n\nerror[E0614]: type `usize` cannot be dereferenced\n\
    \  --> /tmp/tmpp26_pwj0.rs:18:13\n   |\n18 |        "
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut score: Vec<isize> = Vec::new();\n    let mut guess = guess.iter().cloned().collect();\n\
    \    let mut game = game.iter().cloned().collect();\n\n    while game.len() >\
    \ 0 && guess.len() > 0 {\n        let mut best_diff: isize = 0;\n        if game[0]\
    \ == guess[0] {\n            score.push(0)\n            guess = guess.iter().cloned().collect();\n\
    \            game = game.iter().cloned().collect();\n        }\n        else {\n\
    \            best_diff = std::cmp::max(best_diff, guess[0] - game[0]);\n     \
    \   }\n\n        if best_diff == 0 {\n            score.push(game[0] as isize);\n\
    \            game = game.iter().cloned().collect();\n        }\n        else {\n\
    \            guess = guess.iter().cloned().collect();\n            game = game.iter().cloned().collect();\n\
    \        }\n    }\n    score\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `guess`\n  --> /tmp/tmprzfxd78m.rs:19:26\n \
    \  |\n19 |             score.push(0)\n   |                          ^ help: add\
    \ `;` here\n20 |             guess = guess.iter().cloned().collect();\n   |  \
    \           ----- unexpected token\n\nerror[E0282]: type annotations needed\n\
    \  --> /tmp/tmprzfxd78m.rs:16:11\n   |\n14 |     let mut game = game.iter().cloned().collect();\n\
    \   |         -------- consider giving `game` a type\n15 | \n16 |     while game.len()\
    \ > 0 && guess.len() > 0 {\n   |           ^^^^ cannot infer type\n   |\n   =\
    \ note: type must be known at this point\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut min_score: isize = (game.iter().min()).unwrap();\n    let mut\
    \ max_score: isize = (game.iter().max()).unwrap();\n\n    for (i, score) in game.iter().enumerate()\
    \ {\n        let mut temp_score = score;\n        if guess[i] < score {\n    \
    \        temp_score -= min_score;\n        }\n        if guess[i] > score {\n\
    \            temp_score -= max_score;\n        }\n        if temp_score != 0 {\n\
    \            temp_score += abs(guess - score);\n        }\n        game[i] = temp_score;\n\
    \    }\n\n    game\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpdvimwqkl.rs:24:27\n\
    \   |\n24 |             temp_score += abs(guess - score);\n   |              \
    \             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdvimwqkl.rs:12:32\n   |\n12 |     let mut min_score: isize = (game.iter().min()).unwrap();\n\
    \   |                        -----   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |                        |\n   |                        expected\
    \ due to this\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |     let\
    \ mut min_score: isize = *(game.iter().min()).unwrap();\n   |                \
    \                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdvimwqkl.rs:13:32\n\
    \   |\n13 |     let mut max_score: isize = (game.iter().max()).unwrap();\n   |\
    \                        -----   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |                        |\n   |                        expected\
    \ due to this\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |     let\
    \ mut max_score: isize = *(game.iter().max()).unwrap();\n   |                \
    \                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdvimwqkl.rs:17:23\n\
    \   |\n17 |         if guess[i] < score {\n   |                       ^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    17 |         if guess[i] < *score {\n   |                       +\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `&isize`\n  --> /tmp/tmpdvimwqkl.rs:18:13\n\
    \   |\n18 |             temp_score -= min_score;\n   |             ----------^^^^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `-=` on type `&isize`\n   |\n\
    help: `-=` can be used on `isize`, you can dereference `temp_score`\n   |\n18\
    \ |             *temp_score -= min_score;\n   |             +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdvimwqkl.rs:20:23\n   |\n20 |         if guess[i]\
    \ > score {\n   |                       ^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut correct = Vec::<isize>::new();\n    for index in 0..guess.len()\
    \ {\n        correct.push(game[index] - guess[index]);\n    }\n    return correct\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    game.iter().cloned().zip(guess).fold(Vec::new(), |mut acc, (_, guess)|\
    \ {\n        let mut min = vec![0; game.len()];\n        let mut max = vec![0;\
    \ game.len()];\n\n        let mut count = vec![0; game.len()];\n\n        for\
    \ (i, mut j) in game.iter().zip(guess.iter()) {\n            if i == j {\n   \
    \             acc[i] = acc[j].cloned();\n                continue;\n         \
    \   }\n            \n            min[i] = *min if min[i] < i as isize;\n     \
    \       min[i] = i as isize if min[i] == i as isize;\n            max[i] = *max\
    \ if max[i] > i as isize;\n            max[i] = i as isize if max[i] == i as isize;\n\
    \            count[i] = *count + 1;\n        }\n\n        let mut diff = vec![0;\
    \ game.len()];\n        for (i, j) in game.iter().zip(guess.iter()) {\n      \
    \      diff[i] = min[i] - j as isize;\n            diff[i] = diff[i] if diff[i]\
    \ >= 0;\n            diff[i] = diff[i] if diff[i] < 0;\n        }\n\n        acc.extend(diff.iter().cloned());\n\
    \        acc.extend(count.iter().cloned());\n        acc\n    }).cloned()\n}\n\
    \nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found keyword `if`\n  --> /tmp/tmpxkb2m7ij.rs:24:27\n   |\n24 |            \
    \ min[i] = *min if min[i] < i as isize;\n   |                           ^^ expected\
    \ one of 8 possible tokens\n\nerror: expected one of `.`, `;`, `?`, `}`, or an\
    \ operator, found keyword `if`\n  --> /tmp/tmpxkb2m7ij.rs:34:31\n   |\n34 |  \
    \           diff[i] = diff[i] if diff[i] >= 0;\n   |                         \
    \      ^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0599]:\
    \ no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpxkb2m7ij.rs:18:49\n\
    \   |\n18 |         for (i, mut j) in game.iter().zip(guess.iter()) {\n   |  \
    \                                               ^^^^ method not found in `isize`\n\
    \nerror[E0277]: the type `[_]` cannot be indexed by `&isize`\n  --> /tmp/tmpxkb2m7ij.rs:20:17\n\
    \   |\n20 |                 acc[i] = acc[j].cloned();\n   |                 ^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[_]>` is not implemented for `&isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<&isize>` for `Vec<_>`\n\nerror[E0599]:\
    \ no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpxkb2m7ij.rs:32:45\n\
    \   |\n32 |         for (i, j) in game.iter().zip(guess.iter()) {\n   |      \
    \                                       ^^^^ method not found in `isize`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `&isize`\n  --> /tmp/tmpxkb2m7ij.rs:33:13\n\
    \   |\n33 |             diff[i] = min[i] - j as isize;\n   |             ^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `&isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `&isiz"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut best_diffs = Vec::new();\n    for (idx, score) in game.iter().enumerate()\
    \ {\n        // we only care about the difference from the correct guess\n   \
    \     let diff = score - guess[idx];\n        if diff < best_diffs.len() {\n \
    \           best_diffs = best_diffs.into_iter().collect();\n        }\n      \
    \  // or just keep track of the best diff so far\n        best_diffs.push(diff);\n\
    \    }\n    \n    return best_diffs;\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuq5u3usi.rs:16:19\n   |\n\
    16 |         if diff < best_diffs.len() {\n   |                   ^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n16 |         if\
    \ diff < best_diffs.len().try_into().unwrap() {\n   |                        \
    \           ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut min = isize::MAX;\n    for &score in game {\n        for &guess\
    \ in guess {\n            if score == guess {\n                min = 0;\n    \
    \            break;\n            } else {\n                let diff = score -\
    \ guess;\n                if diff < min {\n                    min = diff;\n \
    \               }\n            }\n        }\n    }\n    guess\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9jtgexy_.rs:13:9\n   |\n\
    13 |     for &score in game {\n   |         ^^^^^^    ---- this expression has\
    \ type `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `score`\n   |\n\
    \   = note:   expected type `isize`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9jtgexy_.rs:14:13\n   |\n14 |         for &guess\
    \ in guess {\n   |             ^^^^^^    ----- this expression has type `Option<isize>`\n\
    \   |             |\n   |             expected `isize`, found reference\n   |\
    \             help: you can probably remove the explicit borrow: `guess`\n   |\n\
    \   = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for elm in 0..game.len() {\n        result.push(if\
    \ game[elm] == guess[elm] { 0 } else { abs(game[elm] - guess[elm]) });\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpqdqgplp2.rs:14:61\n\
    \   |\n14 |         result.push(if game[elm] == guess[elm] { 0 } else { abs(game[elm]\
    \ - guess[elm]) });\n   |                                                    \
    \         ^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    if game.len() != guess.len() {\n        println!(\"Number of Games is\
    \ Not Equal to Guess Length\");\n        return vec![];\n    }\n    let mut wins\
    \ = vec![0];\n    let mut losts = vec![0];\n    for i in 0..game.len() {\n   \
    \     if game[i] != guess[i] {\n            wins += 1;\n        }\n        losts\
    \ += 1 if game[i] != guess[i] else 0;\n    }\n    return vec![wins, losts];\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword\
    \ `if`\n  --> /tmp/tmpqco607du.rs:22:20\n   |\n22 |         losts += 1 if game[i]\
    \ != guess[i] else 0;\n   |                    ^^ expected one of `.`, `;`, `?`,\
    \ `}`, or an operator\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `Vec<{integer}>`\n  --> /tmp/tmpqco607du.rs:20:13\n   |\n\
    20 |             wins += 1;\n   |             ----^^^^^\n   |             |\n\
    \   |             cannot use `+=` on type `Vec<{integer}>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqco607du.rs:24:17\n   |\n24 |     return vec![wins, losts];\n\
    \   |                 ^^^^ expected `isize`, found struct `Vec`\n   |\n   = note:\
    \ expected type `isize`\n            found struct `Vec<{integer}>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // Step 1\n    let mut diff = Vec::new();\n    \n    // Step 2\n    for\
    \ (a, b) in game.iter().zip(guess.iter()) {\n        // Step 3\n        let diff:\
    \ isize = if a.0 > b.0 {\n            -b.0.abs() - a.0.abs()\n        } else {\n\
    \            b.0.abs() - a.0.abs()\n        }\n        \n        // Step 4\n \
    \       diff.push(diff);\n    }\n    \n    // Step 5\n    diff\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `diff`\n  --> /tmp/tmpw0l79r0m.rs:22:10\n  \
    \ |\n22 |         }\n   |          ^ help: add `;` here\n...\n25 |         diff.push(diff);\n\
    \   |         ---- unexpected token\n\nerror[E0609]: no field `0` on type `&isize`\n\
    \  --> /tmp/tmpw0l79r0m.rs:18:32\n   |\n18 |         let diff: isize = if a.0\
    \ > b.0 {\n   |                                ^\n\nerror[E0609]: no field `0`\
    \ on type `&isize`\n  --> /tmp/tmpw0l79r0m.rs:18:38\n   |\n18 |         let diff:\
    \ isize = if a.0 > b.0 {\n   |                                      ^\n\nerror[E0609]:\
    \ no field `0` on type `&isize`\n  --> /tmp/tmpw0l79r0m.rs:19:16\n   |\n19 | \
    \            -b.0.abs() - a.0.abs()\n   |                ^\n\nerror[E0609]: no\
    \ field `0` on type `&isize`\n  --> /tmp/tmpw0l79r0m.rs:19:28\n   |\n19 |    \
    \         -b.0.abs() - a.0.abs()\n   |                            ^\n\nerror[E0609]:\
    \ no field `0` on type `&isize`\n  --> /tmp/tmpw0l79r0m.rs:21:15\n   |\n21 | \
    \            b.0.abs() - a.0.abs()\n   |               ^\n\nerror[E0609]: no field\
    \ `0` on type `&isize`\n  --> /tmp/tmpw0l79r0m.rs:21:27\n   |\n21 |          \
    \   b.0.abs() - a.0.abs()\n   |                           ^\n\nerror[E0599]: no\
    \ method named `push` found for type `isize` in the current scope\n  --> /tmp/tmpw0l79r0m.rs:25:14\n\
    \   |\n25 |         diff.push(diff);\n   |              ^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed\
    \ explanations: E0599, E0609.\nFor more information about an error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut correct = vec![false; game.len()];\n    let mut diff = vec![0;\
    \ game.len()];\n\n    for i in 0..game.len() {\n        if guess[i] == game[i]\
    \ {\n            correct[i] = true;\n        } else {\n            diff[i] = std::fabs(guess[i]\
    \ - game[i]);\n        }\n    }\n\n    diff\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fabs` in crate `std`\n  --> /tmp/tmp9zu1dqj5.rs:19:28\n\
    \   |\n19 |             diff[i] = std::fabs(guess[i] - game[i]);\n   |       \
    \                     ^^^^ not found in `std`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // Write your code in here\n    let mut sum: Vec<isize> = game.iter().cloned().map(|i|\
    \ i).collect();\n    sum.push(0);\n    for (g,s) in guess.iter().zip(game) {\n\
    \        let diff = s - g;\n        if diff != 0 {\n            sum.push(diff);\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = compare;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5, 1, 0, 3, 3]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpb__4zdpo.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    assert!(game.len() == guess.len(), \"Input arrays must have same length\"\
    );\n    let mut result = Vec::new();\n    for i in 0..game.len() {\n        if\
    \ game[i] > guess[i] {\n            result.push(i);\n        } else {\n      \
    \      result.push(guess[i] - game[i]);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp44tzmh26.rs:18:25\n   |\n\
    18 |             result.push(guess[i] - game[i]);\n   |                      \
    \   ^^^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    18 |             result.push((guess[i] - game[i]).try_into().unwrap());\n   |\
    \                         +                  +++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp44tzmh26.rs:21:5\n   |\n11 | fn compare(game:\
    \ Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |                       \
    \                             ---------- expected `Vec<isize>` because of return\
    \ type\n...\n21 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut diffs = Vec::<isize>::with_capacity(guess.len());\n    for idx,\
    \ val1 in  game.iter().enumerate() {\n        let mut val2: isize = 0;\n     \
    \   for val2 in guess.iter() {\n            if val1 == val2 {\n              \
    \  break;\n            }\n        }\n        diffs.push(val2 - val1);\n    }\n\
    \    diffs\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: unexpected `,` in pattern\n  --> /tmp/tmpxau1wr3i.rs:13:12\n   |\n\
    13 |     for idx, val1 in  game.iter().enumerate() {\n   |            ^\n   |\n\
    help: try adding parentheses to match on a tuple\n   |\n13 |     for (idx, val1)\
    \ in  game.iter().enumerate() {\n   |         +         +\n\nerror: aborting due\
    \ to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    \n    for i in 0..guess.len() {\n        let mut diff: isize = 0;\n \
    \       let mut guess = guess[i];\n        \n        // if they haven't guessed\
    \ correctly so far\n        if game[i] != 0 {\n            \n            // if\
    \ they have guessed correctly so far\n            if game[i] == guess[i] {\n \
    \               diff = 0;\n            }\n            \n            // if they\
    \ guessed correctly so far\n            else {\n                diff = game[i]\
    \ - guess[i];\n            }\n        }\n        \n        // if they haven't\
    \ guessed correctly so far\n        else {\n            diff = guess - game[i];\n\
    \        }\n        \n        // add the value to the new array\n        guess[i]\
    \ = diff;\n    }\n    \n    return guess;\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpkml71oc1.rs:21:27\n\
    \   |\n21 |             if game[i] == guess[i] {\n   |                       \
    \    ^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `isize`\n  -->\
    \ /tmp/tmpkml71oc1.rs:27:34\n   |\n27 |                 diff = game[i] - guess[i];\n\
    \   |                                  ^^^^^^^^\n\nerror[E0608]: cannot index\
    \ into a value of type `isize`\n  --> /tmp/tmpkml71oc1.rs:37:9\n   |\n37 |   \
    \      guess[i] = diff;\n   |         ^^^^^^^^\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0608`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // Your code here\n}\n\nfn main() {\n    let candidate = compare;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5xutdv4e.rs:11:52\n   |\n\
    11 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |   \
    \ -------                                         ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \       found unit type `()`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut diff = 0;\n    for idx in 0..game.len() {\n        let score\
    \ = game[idx];\n        let guess = guess[idx];\n        diff += abs(score - guess);\n\
    \    }\n    diff\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmphx1tlhy8.rs:16:17\n\
    \   |\n16 |         diff += abs(score - guess);\n   |                 ^^^ not\
    \ found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphx1tlhy8.rs:18:5\n\
    \   |\n11 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n\
    \   |                                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n18 |     diff\n   |     ^^^^ expected struct `Vec`,\
    \ found integer\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \   found type `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut arr: Vec<isize> = game.iter().cloned().collect();\n    let mut\
    \ arr2: Vec<isize> = guess.iter().cloned().collect();\n    while arr.len() !=\
    \ arr2.len() {\n        if arr.len() == 0 {\n            arr2.pop();\n       \
    \     arr.push(0);\n        }\n        if arr2.len() == 0 {\n            arr2.pop();\n\
    \            arr.push(0);\n        }\n        if arr[0] == arr2[0] {\n       \
    \     arr.push(0);\n            arr2.pop();\n            arr.push(0);\n      \
    \  }\n        else if arr[0] != arr2[0] {\n            arr.push(abs(arr[0] - arr2[0]));\n\
    \            arr2.pop();\n        }\n    }\n    arr\n}\n\nfn main() {\n    let\
    \ candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpb2kng84a.rs:29:22\n\
    \   |\n29 |             arr.push(abs(arr[0] - arr2[0]));\n   |               \
    \       ^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut score = Vec::new();\n    for index in 0..guess.len() {\n    \
    \    let score = game[index] - guess[index];\n        // if they have guessed\
    \ the correct result, the score should be 0\n        if score < 0 {\n        \
    \    score.push(-score);\n        } else {\n            // otherwise, they have\
    \ guessed the wrong result\n            score.push(score);\n        }\n    }\n\
    \    return score\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp1nbnrqii.rs:17:19\n   |\n17 |             score.push(-score);\n\
    \   |                   ^^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `push` found for type `isize` in the current scope\n  --> /tmp/tmp1nbnrqii.rs:20:19\n\
    \   |\n20 |             score.push(score);\n   |                   ^^^^ method\
    \ not found in `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut scores = [0; game.len()];\n    for i in 0..game.len() {\n   \
    \     scores[i] = game[i] - guess[i];\n    }\n    return scores;\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmprqfdqonf.rs:12:26\n   |\n11 | fn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n   |            ---- this would need to be a `const`\n12 |\
    \     let mut scores = [0; game.len()];\n   |                          ^^^^\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0435`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut scores = Vec::new();\n    let mut guesses = Vec::new();\n\n \
    \   for i in 0..game.len() {\n        if game[i] == guess[i] {\n            scores.push(0);\n\
    \        } else {\n            let diff = abs(game[i] - guess[i]);\n         \
    \   if diff == 0 {\n                scores.push(0);\n            } else {\n  \
    \              scores.push(diff);\n            }\n        }\n    }\n\n    guesses.push(scores);\n\
    \    return guesses\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpf3ys9x3v.rs:19:24\n\
    \   |\n19 |             let diff = abs(game[i] - guess[i]);\n   |            \
    \            ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpf3ys9x3v.rs:29:12\n   |\n11 | fn compare(game: Vec<isize>, guess:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \          ---------- expected `Vec<isize>` because of return type\n...\n29 |\
    \     return guesses\n   |            ^^^^^^^ expected `isize`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<Vec<{integer}>>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = vec![0; game.len()];\n    for i in 0..game.len()\
    \ {\n        if game[i] != guess[i] {\n            result[i] = game[i] - guess[i];\n\
    \        } else {\n            result[i] = 0;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = game.iter().map(|&score| score as isize).collect();\n\
    \    for i in 0..guess.len() {\n        let mut diff: isize = i;\n        for\
    \ j in 0..game.len() {\n            if game[j] == guess[i] { // found a match\n\
    \                diff = 0; // no difference\n            }\n            diff +=\
    \ std::cmp::min(std::cmp::max(guess[j], 0), score as isize) - game[j];\n     \
    \   }\n        result[i] = diff as isize;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1],\
    \ vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `score` in this scope\n  --> /tmp/tmp8_j6vpds.rs:19:63\n\
    \   |\n19 |             diff += std::cmp::min(std::cmp::max(guess[j], 0), score\
    \ as isize) - game[j];\n   |                                                 \
    \              ^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8_j6vpds.rs:14:31\n   |\n14 |         let mut diff: isize = i;\n\
    \   |                       -----   ^ expected `isize`, found `usize`\n   |  \
    \                     |\n   |                       expected due to this\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n14 |         let mut diff: isize = i.try_into().unwrap();\n\
    \   |                                ++++++++++++++++++++\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    if game.len() != guess.len() {\n        vec![0; game.len()]\n    }\n\
    \    else {\n        game\n            .iter()\n            .zip(guess.iter())\n\
    \            .map(|(game, guess)| {\n                if game == guess {\n    \
    \                0\n                } else {\n                    |i| {\n    \
    \                    let diff = i - game\n                        abs(diff)\n\
    \                    }\n                }\n            })\n            .collect()\n\
    \    }\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `abs`\n  --> /tmp/tmphhl49zls.rs:24:44\n   |\n\
    24 |                         let diff = i - game\n   |                       \
    \                     ^ help: add `;` here\n25 |                         abs(diff)\n\
    \   |                         --- unexpected token\n\nerror[E0425]: cannot find\
    \ function `abs` in this scope\n  --> /tmp/tmphhl49zls.rs:25:25\n   |\n25 |  \
    \                       abs(diff)\n   |                         ^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut total_diff: isize = game[0];\n    for i in 0..game.len() {\n\
    \        total_diff += game[i] - guess[i];\n    }\n    total_diff.abs() as Vec<isize>\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0605]: non-primitive cast: `isize` as `Vec<isize>`\n  --> /tmp/tmprxnkc8eu.rs:16:5\n\
    \   |\n16 |     total_diff.abs() as Vec<isize>\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0605`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut diffs = guess[0].clone(); // clone guess and reset in case the\
    \ guess is less than the guess\n    for i in 0..game.len() {\n        if game[i]\
    \ > guess[i] { diffs.insert(i, game[i] - guess[i]) }\n    }\n    diffs\n}\n\n\
    fn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `insert` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp6c3shzm6.rs:14:39\n   |\n14 |         if game[i] > guess[i]\
    \ { diffs.insert(i, game[i] - guess[i]) }\n   |                              \
    \         ^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6c3shzm6.rs:16:5\n   |\n11 | fn compare(game: Vec<isize>, guess:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \          ---------- expected `Vec<isize>` because of return type\n...\n16 |\
    \     diffs\n   |     ^^^^^ expected struct `Vec`, found `isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n                found type `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut diffs: Vec<isize> = guess.clone();\n    for (i, score) in game.iter().zip(guess.iter())\
    \ {\n        if i == 0 { diffs[1..] = diffs.clone()[0..1]; }\n        let (guess,\
    \ score) = (&guess[..i], &game[..i]);\n        if let Some(guess) = guess.as_mut()\
    \ { let diff = if guess == score { 0 } else { guess - score }; }\n        else\
    \ { diffs[1..] = diffs.clone()[0..1]; }\n        diffs[0] += diff;\n    }\n  \
    \  diffs\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `diff` in this scope\n  --> /tmp/tmpmdjjzvyt.rs:18:21\n\
    \   |\n18 |         diffs[0] += diff;\n   |                     ^^^^ help: a local\
    \ variable with a similar name exists: `diffs`\n\nerror[E0277]: can't compare\
    \ `&isize` with `{integer}`\n  --> /tmp/tmpmdjjzvyt.rs:14:14\n   |\n14 |     \
    \    if i == 0 { diffs[1..] = diffs.clone()[0..1]; }\n   |              ^^ no\
    \ implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: the size for values of\
    \ type `[isize]` cannot be known at compilation time\n  --> /tmp/tmpmdjjzvyt.rs:14:21\n\
    \   |\n14 |         if i == 0 { diffs[1..] = diffs.clone()[0..1]; }\n   |    \
    \                 ^^^^^^^^^^ doesn't have a size known at compile-time\n   |\n\
    \   = help: the trait `Sized` is not implemented for `[isize]`\n   = note: the\
    \ left-hand-side of an assignment must have a statically known size\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `RangeTo<&isize>`\n  --> /tmp/tmpmdjjzvyt.rs:15:32\n\
    \   |\n15 |         let (guess, score) = (&guess[..i], &game[..i]);\n   |    \
    \                            ^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `RangeTo<&isize>`\n   = help: the following other types implement trait\
    \ `SliceIndex<T>`:\n             <RangeTo<usize> as SliceIndex<[T]>>\n       \
    \      <RangeTo<usize> as SliceIndex<str>>\n   = note: required because of the\
    \ requirements on the impl of `Index<RangeTo<&isize>>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `RangeTo<&isize>`\n  --> /tmp/tmpmdjjzvyt.rs:15:45\n\
    \   |\n15 |         let (guess, score) = (&guess[..i], &game[..i]);\n   |    \
    \                                         ^^^^^^^^^ slice indices are of type\
    \ `u"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut diff = Vec::new();\n    let mut cur = 0;\n    while cur < game.len()\
    \ {\n        diff.push(abs(game[cur] - guess[cur]));\n        cur += 1;\n    }\n\
    \    return diff\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp5vbxn7on.rs:15:19\n\
    \   |\n15 |         diff.push(abs(game[cur] - guess[cur]));\n   |            \
    \       ^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut diff: Vec<isize> = guess.iter().cloned().collect();\n    for\
    \ x in game {\n        match x {\n            0 => diff.remove(0),\n         \
    \   _ => diff.add_abs(&x - &guess[0]),\n        }\n    }\n    diff\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `add_abs` found for struct `Vec<isize>` in\
    \ the current scope\n  --> /tmp/tmpmuw3mhs0.rs:16:23\n   |\n16 |             _\
    \ => diff.add_abs(&x - &guess[0]),\n   |                       ^^^^^^^ method\
    \ not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut diff = Vec::new();\n    for i in 0..guess.len() {\n        if\
    \ game[i] != guess[i] {\n            diff[i] = game[i] - guess[i];\n        }\
    \ else {\n            diff[i] = 0;\n        }\n    }\n    diff\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpaovgnkez.rs:17:13\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // BEGIN Question 2\n    let mut guesses: Vec<isize> = guess.to_vec();\n\
    \    for i in 0..game.len() {\n        if guesses.contains(&game[i]) != true {\n\
    \            guesses.push(game[i])\n        }\n    }\n    // END Question 2\n\
    \    let mut diff: Vec<isize> = guess.to_vec();\n    for i in 0..game.len() {\n\
    \        if guesses.contains(&game[i]) != true {\n            diff[i..].push(game[i]\
    \ - guess[i])\n        }\n    }\n    diff\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for slice `[isize]` in the current\
    \ scope\n  --> /tmp/tmpj2s0puys.rs:23:23\n   |\n23 |             diff[i..].push(game[i]\
    \ - guess[i])\n   |                       ^^^^ method not found in `[isize]`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut best_guess: Vec<isize> = guess.to_vec();\n    let mut best_score:\
    \ isize = 0;\n\n    for (i, item) in game.iter().enumerate() {\n        let mut\
    \ cur = best_guess.clone();\n        cur.clear();\n        match guess[i] {\n\
    \            0 => best_score.clone(),\n            _ => best_score = -abs(best_score\
    \ - item),\n        }\n        best_guess[..] = cur;\n    }\n\n    best_guess\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpbiuste3y.rs:20:32\n\
    \   |\n20 |             _ => best_score = -abs(best_score - item),\n   |     \
    \                           ^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbiuste3y.rs:22:26\n   |\n22 |         best_guess[..] =\
    \ cur;\n   |         --------------   ^^^ expected slice `[isize]`, found struct\
    \ `Vec`\n   |         |\n   |         expected due to the type of this binding\n\
    \   |\n   = note: expected slice `[isize]`\n             found struct `Vec<isize>`\n\
    \nerror[E0277]: the size for values of type `[isize]` cannot be known at compilation\
    \ time\n  --> /tmp/tmpbiuste3y.rs:22:9\n   |\n22 |         best_guess[..] = cur;\n\
    \   |         ^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n   |\n\
    \   = help: the trait `Sized` is not implemented for `[isize]`\n   = note: the\
    \ left-hand-side of an assignment must have a statically known size\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0425.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = guess.clone();\n    result.retain(|&x| x\
    \ >= game[0]);\n    result.retain(|&x| x >= game[1]);\n    result.retain(|&x|\
    \ x >= game[2]);\n    result.retain(|&x| x >= game[3]);\n    result.retain(|&x|\
    \ x >= game[4]);\n    result.retain(|&x| x >= game[5]);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpp_tfz6h9.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut score: Vec<isize> = vec![0; game.len()];\n    score.push(0);\n\
    \    for i in 0..game.len() {\n        if game[i] == guess[i] {\n            score.push(0);\n\
    \        } else {\n            score.push(score[i] + abs(game[i] - guess[i]));\n\
    \        }\n    }\n    score\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpexe2cxt_.rs:18:35\n\
    \   |\n18 |             score.push(score[i] + abs(game[i] - guess[i]));\n   |\
    \                                   ^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut diffs = vec![0; game.len()];\n    for i in 0..game.len() {\n\
    \        let diff = game[i] - guess[i];\n        if diff != 0 {\n            diffs[i]\
    \ = diff;\n        }\n    }\n    diffs\n}\n\nfn main() {\n    let candidate =\
    \ compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    match guess.get(0) with\n    Some(x) => {\n        if x > game.get(0)\
    \ && guess.get(0) != -1 {\n            vec![0, 0, 0, abs(x - game.get(0))]\n \
    \       } else {\n            vec![0, 0, 0, 0, 0]\n        }\n    }\n    Some(x)\
    \ => match guess.get(1) with\n    Some(y) => {\n        if y > game.get(1) &&\
    \ guess.get(1) != -1 {\n            vec![0, 0, 0, 0, abs(y - game.get(1))]\n \
    \       } else {\n            vec![0, 0, 0, 0, 0]\n        }\n    }\n    None\
    \ => {\n        vec![0, 0, 0, 0, 0]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `?`, `{`, or an operator, found `with`\n  -->\
    \ /tmp/tmpbrrnob_l.rs:12:24\n   |\n12 |     match guess.get(0) with\n   |    \
    \ -----              ^^^^ expected one of `.`, `?`, `{`, or an operator\n   |\
    \     |\n   |     while parsing this `match` expression\n\nerror: aborting due\
    \ to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    use std::cmp::Ordering;\n    let mut num_correct = 0;\n    let mut num_total\
    \ = 0;\n    let mut num_diff = 0;\n    game.iter().enumerate().for_each(|(index,\
    \ score)| {\n        if guess == score {\n            num_correct++;\n       \
    \ }\n        num_total += 1;\n        if index < guess.length {\n            let\
    \ difference = guess - score;\n            if difference < 0 {\n             \
    \   num_diff += 1;\n            }\n        }\n    });\n    Vec::new()\n}\n\nfn\
    \ main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpnrleekdw.rs:18:24\n\
    \   |\n18 |             num_correct++;\n   |                        ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n18 |             { let\
    \ tmp = num_correct; num_correct += 1; tmp };\n   |             +++++++++++  \
    \          ~~~~~~~~~~~~~~~~~~~~~~~~~\n18 -             num_correct++;\n18 +  \
    \           num_correct += 1;\n   | \n\nwarning: unused import: `std::cmp::Ordering`\n\
    \  --> /tmp/tmpnrleekdw.rs:12:9\n   |\n12 |     use std::cmp::Ordering;\n   |\
    \         ^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]` on by\
    \ default\n\nerror[E0277]: can't compare `Vec<isize>` with `&isize`\n  --> /tmp/tmpnrleekdw.rs:17:18\n\
    \   |\n17 |         if guess == score {\n   |                  ^^ no implementation\
    \ for `Vec<isize> == &isize`\n   |\n   = help: the trait `PartialEq<&isize>` is\
    \ not implemented for `Vec<isize>`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n\
    \             <Vec<T, A> as PartialEq<&[U; N]>>\n             <Vec<T, A> as PartialEq<&[U]>>\n\
    \             <Vec<T, A> as PartialEq<&mut [U]>>\n             <Vec<T, A> as PartialEq<[U;\
    \ N]>>\n             <Vec<T, A> as PartialEq<[U]>>\n\nerror[E0609]: no field `length`\
    \ on type `Vec<isize>`\n  --> /tmp/tmpnrleekdw.rs:21:26\n   |\n21 |         if\
    \ index < guess.length {\n   |                          ^^^^^^ unknown field\n\
    \nerror[E0369]: cannot subtract `&isize` from `Vec<isize>`\n  --> /tmp/tmpnrleekdw.rs:22:36\n\
    \   |\n22 |             let difference = guess - score;\n   |                \
    \              ----- ^ ----- &isize\n   |                              |\n   |\
    \                              Vec<isize>\n\nerror: aborting due to 4 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277,\
    \ E0369, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = guess.clone();\n    for &index in game.iter()\
    \ {\n        if result[index] == 0 || result[index] == -2 {\n            result[index]\
    \ = 0;\n        } else {\n            result[index] = if game[index] == -2 { -1\
    \ } else { game[index] - guess[index] };\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdlvx3ott.rs:14:12\n\
    \   |\n14 |         if result[index] == 0 || result[index] == -2 {\n   |     \
    \       ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdlvx3ott.rs:14:34\n\
    \   |\n14 |         if result[index] == 0 || result[index] == -2 {\n   |     \
    \                             ^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpdlvx3ott.rs:15:13\n   |\n15 |            \
    \ result[index] = 0;\n   |             ^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpdlvx3ott.rs:17:13\n   |\n17 |            \
    \ result[index] = if game[index] == -2 { -1 } else { game[index] - guess[index]\
    \ };\n   |             ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /t"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut score = 0isize;\n    for &g in &guess {\n        for &s in &game\
    \ {\n            if s == g {\n                score += 0isize;\n            }\
    \ else {\n                score += abs(s - g);\n            }\n        }\n   \
    \ }\n    return vec![score];\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpibewxxl8.rs:18:26\n\
    \   |\n18 |                 score += abs(s - g);\n   |                       \
    \   ^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    for i in (0..game.len()).rev() {\n        let difference = guess[i] -\
    \ game[i];\n        if difference < 0 {\n            guess[i] = -difference;\n\
    \        }\n    }\n    guess\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `guess` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmpr2y94i4u.rs:15:13\n   |\n11 | fn compare(game: Vec<isize>,\
    \ guess: Vec<isize>) -> Vec<isize> {\n   |                              -----\
    \ help: consider changing this to be mutable: `mut guess`\n...\n15 |         \
    \    guess[i] = -difference;\n   |             ^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    guess = guess.iter().cloned().collect();\n    let mut result = vec![0;\
    \ game.len()];\n    for j in game.iter() {\n        let mut i = j;\n        while\
    \ i > 0 {\n            for i in 1..(i-1) {\n                let mut diff = (j-guess[i-1]).abs();\n\
    \                result[i] += diff;\n                if diff == 0 {\n        \
    \            break;\n                }\n            }\n            i -= 1;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkibe43ll.rs:16:19\n   |\n\
    16 |         while i > 0 {\n   |                   ^\n   |                   |\n\
    \   |                   expected `&isize`, found integer\n   |               \
    \    help: consider borrowing here: `&0`\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpkibe43ll.rs:18:35\n   |\n18 |         \
    \        let mut diff = (j-guess[i-1]).abs();\n   |                          \
    \         ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpkibe43ll.rs:19:17\n\
    \   |\n19 |                 result[i] += diff;\n   |                 ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `&isize`\n  --> /tmp/tmpkibe43ll.rs:24:13\n\
    \   |\n24 |             i -= 1;\n   |             -^^^^^\n   |             |\n\
    \   |             cannot use `-=` on type `&isize`\n   |\nhelp: `-=` can be used\
    \ on `isize`, you can dereference `i`\n   |\n24 |             *i -= 1;\n   | \
    \            +\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0368.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    game.iter().zip(guess.iter()).map(|(a,b)| {\n        if a == b {\n  \
    \          0\n        } else {\n            abs::abs(a-b)\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `abs`\n\
    \  --> /tmp/tmpv69w97mt.rs:16:13\n   |\n16 |             abs::abs(a-b)\n   | \
    \            ^^^ use of undeclared crate or module `abs`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut difference = game.iter().zip(guess.iter()).filter(|(_,x)| x !=\
    \ 0).collect::<Vec<(isize, isize)>>();\n    if game.len() > guess.len() {\n  \
    \      difference = difference.iter().take(game.len() - guess.len()).collect();\n\
    \    }\n    if game.len() < guess.len() {\n        difference = difference.iter().skip(game.len()).collect();\n\
    \    }\n    difference\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&&isize` with `{integer}`\n  --> /tmp/tmp84_bnsfd.rs:12:73\n\
    \   |\n12 |     let mut difference = game.iter().zip(guess.iter()).filter(|(_,x)|\
    \ x != 0).collect::<Vec<(isize, isize)>>();\n   |                            \
    \                                             ^^ no implementation for `&&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0277]: a value of type `Vec<(isize, isize)>` cannot\
    \ be built from an iterator over elements of type `(&isize, &isize)`\n    -->\
    \ /tmp/tmp84_bnsfd.rs:12:79\n     |\n12   |     let mut difference = game.iter().zip(guess.iter()).filter(|(_,x)|\
    \ x != 0).collect::<Vec<(isize, isize)>>();\n     |                          \
    \                                                     ^^^^^^^ value of type `Vec<(isize,\
    \ isize)>` cannot be built from `std::iter::Iterator<Item=(&isize, &isize)>`\n\
    \     |\n     = help: the trait `FromIterator<(&isize, &isize)>` is not implemented\
    \ for `Vec<(isize, isize)>`\n     = help: the trait `FromIterator<T>` is implemented\
    \ for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0277]: a value\
    \ of type `Vec<(isize, isize)>` cannot be built from an iterator over elements\
    \ of type `&(isize, isize)`\n    --> /tmp/tmp84_bnsfd.rs:14:71\n     |\n14   |\
    \         difference = difference.iter().take(game.len() - guess.len()).collect();\n\
    \     |                                                                      \
    \ ^^^^^^^ value of type `Vec<(isize, isize)>` cannot be built from `std::iter::Iterator<Item=&(isize,\
    \ isize)>`\n     |\n     = help: the trait `FromIterator<&(isize, isize)>` is\
    \ not implemented for `Vec<(isize, isize)>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tm"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut delta = 0i32;\n    for i in 0..game.len() {\n        if game[i]\
    \ != guess[i] {\n            delta += abs(game[i] - guess[i]);\n        }\n  \
    \  }\n    vec![delta]\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp8mned6e4.rs:15:22\n\
    \   |\n15 |             delta += abs(game[i] - guess[i]);\n   |              \
    \        ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp8mned6e4.rs:18:10\n   |\n18 |     vec![delta]\n   |          ^^^^^ expected\
    \ `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n18 |     vec![delta.try_into().unwrap()]\n\
    \   |               ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    assert!(game.len() == guess.len());\n    let mut dists = Vec::new();\n\
    \    let mut j = 0;\n    for g in &guess {\n        if *g != 0 { // in case it\
    \ wasn't an exact match\n            dists[j] = *g - game[j];\n            j =\
    \ j + 1;\n        }\n    }\n    dists\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp5zqahwc0.rs:17:13\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    game\n        .iter()\n        .zip(guess.iter())\n        .map(|(g,\
    \ g)| if g == 0 { 0 } else { |v| if v == g { 0 } else { |i| i - g } })\n     \
    \   .collect()\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0415]: identifier `g` is bound more than once in this parameter\
    \ list\n  --> /tmp/tmpupeuz541.rs:15:19\n   |\n15 |         .map(|(g, g)| if g\
    \ == 0 { 0 } else { |v| if v == g { 0 } else { |i| i - g } })\n   |          \
    \         ^ used as parameter more than once\n\nerror[E0277]: can't compare `&isize`\
    \ with `{integer}`\n  --> /tmp/tmpupeuz541.rs:15:28\n   |\n15 |         .map(|(g,\
    \ g)| if g == 0 { 0 } else { |v| if v == g { 0 } else { |i| i - g } })\n   | \
    \                           ^^ no implementation for `&isize == {integer}`\n \
    \  |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0308]: `if` and `else` have incompatible types\n  -->\
    \ /tmp/tmpupeuz541.rs:15:73\n   |\n15 |         .map(|(g, g)| if g == 0 { 0 }\
    \ else { |v| if v == g { 0 } else { |i| i - g } })\n   |                     \
    \                                         -          ^^^^^^^^^ expected integer,\
    \ found closure\n   |                                                        \
    \      |\n   |                                                              expected\
    \ because of this\n   |\n   = note: expected type `{integer}`\n           found\
    \ closure `[closure@/tmp/tmpupeuz541.rs:15:73: 15:82]`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0415.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    if game.len() != guess.len() {\n        panic!(\"The arrays must have\
    \ the same length!\");\n    }\n    let mut result = Vec::new();\n    for (_, item)\
    \ in game.into_iter().zip(guess.into_iter()).zip(0..game.len()).cloned().enumerate()\
    \ {\n        let score = -item.1 - item.2;\n        result.push(score as isize);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<Zip<Zip<std::vec::IntoIter<isize>,\
    \ std::vec::IntoIter<isize>>, std::ops::Range<usize>> as Iterator>::Item == &_`\n\
    \    --> /tmp/tmpy8l8v32q.rs:16:81\n     |\n16   |     for (_, item) in game.into_iter().zip(guess.into_iter()).zip(0..game.len()).cloned().enumerate()\
    \ {\n     |                                                                  \
    \               ^^^^^^ expected reference, found tuple\n     |\n     = note: expected\
    \ reference `&_`\n                    found tuple `((isize, isize), usize)`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `enumerate`\
    \ exists for struct `Cloned<Zip<Zip<std::vec::IntoIter<isize>, std::vec::IntoIter<isize>>,\
    \ std::ops::Range<usize>>>`, but its trait bounds were not satisfied\n  --> /tmp/tmpy8l8v32q.rs:16:90\n\
    \   |\n16 |        for (_, item) in game.into_iter().zip(guess.into_iter()).zip(0..game.len()).cloned().enumerate()\
    \ {\n   |                                                                    \
    \                         ^^^^^^^^^ method cannot be called on `Cloned<Zip<Zip<std::vec::IntoIter<isize>,\
    \ std::vec::IntoIter<isize>>, std::ops::Range<usize>>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<Zip<Zip<std::vec::IntoIter<isize>, std::vec::IntoIter<isize>>, std::ops::Range<usize>>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<Zip<Zip<std::vec::IntoIter<isize>,\
    \ std::vec::IntoIter<isize>>, std::ops::Range<usize>>>: Iterator`\n          \
    \ `Cloned<Zip<Zip<std::vec::IntoIter<isize>, std::vec::IntoIter<isize>>, std::ops::Range<usize>>>:\
    \ Iterator`\n           which is required by `&mut Cloned<Zip<Zip<std::vec::IntoIter<isize>,\
    \ std::vec::IntoIter<isize>>, std::ops::Range<usize>>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut min_diff = isize::MAX;\n    let mut min_guess = game[0].to_owned();\n\
    \n    for score in game.iter().rev() {\n        for guess in guess.iter().rev()\
    \ {\n            let diff = score - guess;\n            if diff < min_diff {\n\
    \                min_diff = diff;\n                min_guess = guess;\n      \
    \      }\n        }\n    }\n\n    min_guess.to_owned()\n}\n\nfn main() {\n   \
    \ let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwbw23l37.rs:20:29\n   |\n\
    13 |     let mut min_guess = game[0].to_owned();\n   |                       \
    \  ------------------ expected due to this value\n...\n20 |                 min_guess\
    \ = guess;\n   |                             ^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n20 |                 min_guess\
    \ = *guess;\n   |                             +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwbw23l37.rs:25:5\n   |\n11 | fn compare(game: Vec<isize>, guess:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \          ---------- expected `Vec<isize>` because of return type\n...\n25 |\
    \     min_guess.to_owned()\n   |     ^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \   found type `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut difference = Vec::new();\n    for j in 0..game.len() {\n    \
    \    if game[j] > guess[j] {\n            difference.push(game[j] - guess[j]);\n\
    \        } else {\n            difference.push(guess[j] - game[j]);\n        }\n\
    \    }\n    difference\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![0; game.len()];\n    for (index, &score) in game.iter().enumerate()\
    \ {\n        for (i, &guessofscore) in guess.iter().enumerate() {\n          \
    \  if index == i {\n                if score != guessofscore {\n             \
    \       result[index] = std::cmp::min(score, guessofscore);\n                }\
    \ else {\n                    result[index] = 0;\n                }\n        \
    \    } else {\n                result[index] = std::cmp::max(score, guessofscore);\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5, -2]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpmqqy986w.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
    \ {\n    // TODO: Use `cmp` instead of subtraction and abs because we never want\
    \ a negative number.\n    guess = guess.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut diff = Vec::new();\n    for i in 0..guess.len() {\n        let game_res\
    \ = game[i] - guess[i];\n        if game_res > 0 {\n            diff.push(i);\n\
    \        }\n    }\n    diff\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphs4p2n70.rs:21:5\n   |\n\
    11 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |   \
    \                                                 ---------- expected `Vec<isize>`\
    \ because of return type\n...\n21 |     diff\n   |     ^^^^ expected `isize`,\
    \ found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \ found struct `Vec<usize>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
