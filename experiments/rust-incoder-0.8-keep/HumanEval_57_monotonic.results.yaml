name: HumanEval_57_monotonic
language: rust
results:
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(false, |res, x| {\n        if res {\n         \
    \   cmp::min(res, x) <= 0\n        } else {\n            cmp::max(res, x) >= 0\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \  --> /tmp/tmpiv6eep7x.rs:11:13\n   |\n11 |             cmp::min(res, x) <= 0\n\
    \   |             ^^^ use of undeclared crate or module `cmp`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `cmp`\n  --> /tmp/tmpiv6eep7x.rs:13:13\n\
    \   |\n13 |             cmp::max(res, x) >= 0\n   |             ^^^ use of undeclared\
    \ crate or module `cmp`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l_idx = 1;\n    let mut l_len = l.len();\n    while l_idx\
    \ < l_len {\n        if l[l_idx] > l[l_idx - 1] {\n            break;\n      \
    \  }\n        if l[l_idx] < l[l_idx + 1] {\n            l_len -= 1;\n        }\
    \ else {\n            l_idx += 1;\n        }\n    }\n    l_idx >= l_len\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzf52zos2.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    while i <= l.len() {\n\
    \        while j > 1 && l[j] < l[j-1] {\n            j += 1;\n        }\n    \
    \    while j < i && l[j] > l[j+1] {\n            j += 1;\n        }\n        if\
    \ j < i {\n            i += 1;\n        } else {\n            i += j - 1;\n  \
    \      }\n    }\n    i == l.len() || l[i-1] > l[i]\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return false;\n    }\n\n    let mut\
    \ prev = l[0];\n    for e in l.iter().skip(1) {\n        if prev > e {\n     \
    \       return false;\n        }\n        prev = e;\n    }\n\n    true\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoerza70z.rs:15:19\n   |\n\
    15 |         if prev > e {\n   |                   ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n15 |         if prev > *e\
    \ {\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoerza70z.rs:18:16\n\
    \   |\n13 |     let mut prev = l[0];\n   |                    ---- expected due\
    \ to this value\n...\n18 |         prev = e;\n   |                ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |  \
    \       prev = *e;\n   |                +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().zip(l.iter().cloned()).all(|(first, second)| {\n   \
    \     first < second\n    })\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpitmzeash.rs:10:17\n   |\n\
    10 |         first < second\n   |                 ^^^^^^\n   |               \
    \  |\n   |                 expected `&isize`, found `isize`\n   |            \
    \     help: consider borrowing here: `&second`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|x| x.is_monotonically_increasing())\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_monotonically_increasing` found for reference\
    \ `&isize` in the current scope\n --> /tmp/tmpx8u2j5pk.rs:9:24\n  |\n9 |     l.iter().all(|x|\
    \ x.is_monotonically_increasing())\n  |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return false;\n    }\n\n    let mut\
    \ current = l.iter().cloned().take(1).unwrap();\n    let mut previous = l.iter().cloned().skip(1).take(1).unwrap();\n\
    \n    loop {\n        let current = current.iter().cloned().take(1).unwrap();\n\
    \        let mut next = false;\n\n        if previous.unwrap() != current {\n\
    \            next = true;\n        }\n\n        if next {\n            return\
    \ true;\n        }\n\n        previous = current;\n    }\n}\n\nfn main() {\n \
    \   let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for struct `std::iter::Take`\
    \ in the current scope\n  --> /tmp/tmp9m3zx4gk.rs:13:49\n   |\n13 |     let mut\
    \ current = l.iter().cloned().take(1).unwrap();\n   |                        \
    \                         ^^^^^^ method not found in `std::iter::Take<Cloned<std::slice::Iter<'_,\
    \ isize>>>`\n\nerror[E0599]: no method named `unwrap` found for struct `std::iter::Take`\
    \ in the current scope\n  --> /tmp/tmp9m3zx4gk.rs:14:58\n   |\n14 |     let mut\
    \ previous = l.iter().cloned().skip(1).take(1).unwrap();\n   |               \
    \                                           ^^^^^^ method not found in `std::iter::Take<Skip<Cloned<std::slice::Iter<'_,\
    \ isize>>>>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = l.len();\n    let mut j = 1;\n    let mut s = i;\n\
    \    while i > 0) {\n        j *= 2;\n        if j < i {\n            j += 1;\n\
    \        }\n        i -= 1;\n        if l[s - 1] < l[j] {\n            return\
    \ true;\n        }\n        s -= 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error: unexpected closing delimiter: `}`\n  --> /tmp/tmpb5s09rp6.rs:24:1\n\
    \   |\n12 |     while i > 0) {\n   |                  - this opening brace...\n\
    ...\n22 |     }\n   |     - ...matches this closing brace\n23 |     false\n24\
    \ | }\n   | ^ unexpected closing delimiter\n\nerror: mismatched closing delimiter:\
    \ `)`\n  --> /tmp/tmpb5s09rp6.rs:8:37\n   |\n8  | fn monotonic(l: Vec<isize>)\
    \ -> bool {\n   |                                     ^ unclosed delimiter\n...\n\
    12 |     while i > 0) {\n   |                ^ mismatched closing delimiter\n\n\
    error: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 1 {\n        return true\n    }\n    let mut last\
    \ = l[0];\n    for x in l.iter().skip(1).rev() {\n        if last < x {\n    \
    \        return false\n        }\n        last = x;\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgb0tg1cl.rs:14:19\n   |\n\
    14 |         if last < x {\n   |                   ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n14 |         if last < *x\
    \ {\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgb0tg1cl.rs:17:16\n\
    \   |\n12 |     let mut last = l[0];\n   |                    ---- expected due\
    \ to this value\n...\n17 |         last = x;\n   |                ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |  \
    \       last = *x;\n   |                +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut prev = l[0];\n    for el in l {\n        if el < prev\
    \ {\n            return false;\n        }\n        prev = el;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzdzcak8j.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut m = l.len() - 1;\n    loop {\n        if m <= 0 {\n \
    \           return false;\n        }\n        let j = l[m];\n        if j < l[m-1]\
    \ {\n            return false;\n        }\n        m -= 1;\n    }\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5wmjpsfl.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.len() <= 1\n        || (l.len() == 2 && l[0] >= l[1])\n   \
    \     || (l.len() == 3 && l[1] >= l[2] && l[0] <= l[2])\n        || l[0] > l[l.len()\
    \ - 1]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpe3rh2v96.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.to_owned();\n    l.sort();\n    for i in 0..l.len()\
    \ {\n        if l[i] < l.get_mut(i + 1).unwrap() {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz6avde4j.rs:12:19\n   |\n\
    12 |         if l[i] < l.get_mut(i + 1).unwrap() {\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&mut isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n12 |         if l[i] < *l.get_mut(i + 1).unwrap() {\n   |    \
    \               +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|x| l.iter().any(|y| y > x))\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzkco47c_.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().enumerate().any(|(idx, val)| val >= val + 1).unwrap_or(false)\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpje2x0jsz.rs:9:50\n  |\n9 |\
    \     l.iter().enumerate().any(|(idx, val)| val >= val + 1).unwrap_or(false)\n\
    \  |                                                  ^^^^^^^\n  |           \
    \                                       |\n  |                               \
    \                   expected `&isize`, found `isize`\n  |                    \
    \                              help: consider borrowing here: `&(val + 1)`\n\n\
    error[E0599]: no method named `unwrap_or` found for type `bool` in the current\
    \ scope\n --> /tmp/tmpje2x0jsz.rs:9:59\n  |\n9 |     l.iter().enumerate().any(|(idx,\
    \ val)| val >= val + 1).unwrap_or(false)\n  |                                \
    \                           ^^^^^^^^^ method not found in `bool`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|x| x <= l.iter().rev().next().unwrap())\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp78rh7bek.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut s = l;\n    s.sort();\n    for i in 0..s.len() {\n  \
    \      let x = &s[i];\n        let y = &s[i + 1];\n        if x < y {\n      \
    \      return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpj4d7ggl9.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    let mut first\
    \ = true.into();\n    let mut last = false;\n    let mut c = false;\n    let mut\
    \ current = l[i];\n    while j > i {\n        // If we have no more elements to\
    \ compare, we are done.\n        if j == i {\n            break;\n        }\n\n\
    \        if current > l[j] {\n            // Current is greater than the next\
    \ element\n            last = true;\n        } else {\n            // Current\
    \ is less than the next element\n            first = false;\n        }\n\n   \
    \     if first {\n            // First element, so we found our first comparison\n\
    \            c = true;\n            current = l[i];\n        }\n\n        if last\
    \ {\n            // Last element, so we found our last comparison\n          \
    \  c = false;\n        }\n\n        if c {\n            // Current element greater\
    \ than previous element\n            i = j;\n        } else {\n            //\
    \ Current element less than previous element\n            j = i;\n        }\n\
    \    }\n\n    // No comparison has been made since the last element\n    !c\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvwbec8wy.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut s = l.to_vec();\n    s.sort_unstable();\n    let mut\
    \ i = 0;\n    for _ in 0..s.len() {\n        if s[i] != s[i + 1] {\n         \
    \   return false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqvau08ok.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // If there is only one element then its monotonic\n    if l.len()\
    \ == 1 {\n        return l.len() == 1 && l[0] < 0;\n    }\n\n    let mut i = 0;\n\
    \    let mut ln = l.len();\n\n    while i < ln {\n        if l[i] < l[i+1] {\n\
    \            i += 1;\n        } else {\n            i -= 1;\n        }\n    }\n\
    \n    i != ln\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 4 but the index\
    \ is 4', /tmp/tmpxom3trip.rs:18:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_elem = l[0];\n    let mut max_elem = l[0];\n    for\
    \ i in l.iter_mut() {\n        if *i < min_elem {\n            min_elem = *i;\n\
    \        }\n        if *i > max_elem {\n            max_elem = *i;\n        }\n\
    \    }\n    l.iter().all(|&i| i == min_elem) || l.iter().all(|&i| i == max_elem)\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmp2fjnr3uw.rs:11:14\n   |\n8  | fn monotonic(l: Vec<isize>) -> bool\
    \ {\n   |              - help: consider changing this to be mutable: `mut l`\n\
    ...\n11 |     for i in l.iter_mut() {\n   |              ^^^^^^^^^^^^ cannot borrow\
    \ as mutable\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut diff = 1;\n \
    \   let mut min_j = l.len() - 1;\n    let mut max_i = 0;\n    loop {\n       \
    \ if j == 0 {\n            if i >= min_j {\n                return false;\n  \
    \          }\n        } else {\n            if i >= max_i {\n                return\
    \ false;\n            }\n        }\n        if l[j] > l[i] {\n            i +=\
    \ diff;\n            i += 1;\n        } else {\n            j += diff;\n     \
    \       j += 1;\n        }\n        if i == max_i {\n            max_i = j;\n\
    \        }\n        if j == min_j {\n            min_j = i;\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpl3nf1vqu.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() == 1 {\n        l.len() == 1\n    } else if l.len()\
    \ > 1 {\n        l[l.len() - 1] <= l[0]\n    } else {\n        false\n    }\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3lwpmrn0.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n\n    for i in\
    \ l.len() - 2 {\n        if l[i] > l[i + 1] {\n            return false;\n   \
    \     }\n    }\n\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: `usize` is not an iterator\n  --> /tmp/tmpbrai7hoh.rs:13:14\n\
    \   |\n13 |     for i in l.len() - 2 {\n   |              ^^^^^^^^^^^ `usize`\
    \ is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `usize`\n   = note: if you want to iterate between `start` until a value\
    \ `end`, use the exclusive range syntax `start..end` or the inclusive range syntax\
    \ `start..=end`\n   = note: required because of the requirements on the impl of\
    \ `IntoIterator` for `usize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // This is not the greatest algorithm, but it works pretty quickly\
    \ with\n    // vectors of lengths up to about 10,000 and is quite fast. Not as\n\
    \    // fast as other implementations, but the other algorithms I tried did\n\
    \    // take around 6 minutes on my machine.\n    let mut min = l[0];\n    let\
    \ mut max = l[0];\n    for (i, v) in l.iter().enumerate() {\n        if v < min\
    \ {\n            min = v;\n        } else if v > max {\n            max = v;\n\
    \        }\n    }\n    min <= max\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwryoi5c5.rs:16:16\n   |\n\
    16 |         if v < min {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found `isize`\n   |                help:\
    \ consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwryoi5c5.rs:17:19\n\
    \   |\n13 |     let mut min = l[0];\n   |                   ---- expected due\
    \ to this value\n...\n17 |             min = v;\n   |                   ^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    17 |             min = *v;\n   |                   +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwryoi5c5.rs:18:23\n   |\n18 |         } else if v > max\
    \ {\n   |                       ^^^\n   |                       |\n   |      \
    \                 expected `&isize`, found `isize`\n   |                     \
    \  help: consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpwryoi5c5.rs:19:19\n   |\n14 |     let mut max = l[0];\n   |    \
    \               ---- expected due to this value\n...\n19 |             max = v;\n\
    \   |                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n19 |             max = *v;\n   |           \
    \        +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut max = l[0];\n    for i in l {\n        if i > max {\n\
    \            max = i;\n        }\n    }\n    for i in l {\n        if i < max\
    \ {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmpwp0owdud.rs:15:14\n\
    \    |\n8   | fn monotonic(l: Vec<isize>) -> bool {\n    |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9   |     let mut max = l[0];\n10  |     for i in l {\n    |        \
    \      - `l` moved due to this implicit call to `.into_iter()`\n...\n15  |   \
    \  for i in l {\n    |              ^ value used here after move\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `l`\nhelp:\
    \ consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n10  |     for i in &l {\n    |              +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().zip(l.iter().skip(1)).all(|(&x, &y)| {\n        let\
    \ mut y = y;\n        if x < y {\n            return false;\n        }\n     \
    \   if x > y {\n            return true;\n        }\n        true\n    })\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3j_17um8.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut prev = None;\n    for elt in l {\n        if prev.is_none()\
    \ {\n            prev = Some(elt);\n        } else if elt != prev.unwrap() + 1\
    \ {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprvzs_9sx.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(true, |acc, elt| {\n        if elt > acc {\n  \
    \          true\n        } else {\n            acc\n        }\n    })\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph24b42oc.rs:10:18\n   |\n\
    10 |         if elt > acc {\n   |                  ^^^ expected `&isize`, found\
    \ `bool`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.len() == 0 || l.iter().fold(true, |prev, el| prev && (el >\
    \ l.last()))\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphda93jjm.rs:9:66\n  |\n9 |\
    \     l.len() == 0 || l.iter().fold(true, |prev, el| prev && (el > l.last()))\n\
    \  |                                                                  ^^^^^^^^\
    \ expected `&isize`, found enum `Option`\n  |\n  = note: expected reference `&isize`\n\
    \                  found enum `Option<&isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 1 {\n        return true\n    }\n    let mut i\
    \ = 0;\n    let mut j = 1;\n    let mut prev_element = 0;\n    let mut prev_sign\
    \ = -1;\n    while i <= l.len() - 1 {\n        i += 1;\n        let current_element\
    \ = l[i];\n        if current_element <= prev_element {\n            return false;\n\
    \        }\n        prev_sign = prev_element;\n        prev_element = current_element;\n\
    \        j += 1;\n        while j <= l.len() - 1 {\n            i += 1;\n    \
    \        let next_element = l[i];\n            if next_element >= prev_element\
    \ {\n                return false;\n            }\n            prev_element =\
    \ next_element;\n            j += 1;\n        }\n    }\n    return true;\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp78rcczrx.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut v = l.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ j = v.len() - 1;\n    while j >= 0 && v.[j] > v.[j + 1] {\n        v[j], v[j\
    \ + 1] = v.[j + 1], v[j];\n        j -= 1;\n    }\n    v.len() == 0 || v.iter().all(|v|\
    \ v < v.iter().rev().last())\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error: unexpected token: `[`\n  --> /tmp/tmpyy9w1402.rs:11:23\n   |\n11\
    \ |     while j >= 0 && v.[j] > v.[j + 1] {\n   |                       ^\n\n\
    error: unexpected token: `[`\n  --> /tmp/tmpyy9w1402.rs:11:31\n   |\n11 |    \
    \ while j >= 0 && v.[j] > v.[j + 1] {\n   |                               ^\n\n\
    error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n  --> /tmp/tmpyy9w1402.rs:12:13\n\
    \   |\n12 |         v[j], v[j + 1] = v.[j + 1], v[j];\n   |             ^ expected\
    \ one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0599]: no method named `iter`\
    \ found for reference `&isize` in the current scope\n  --> /tmp/tmpyy9w1402.rs:15:44\n\
    \   |\n15 |     v.len() == 0 || v.iter().all(|v| v < v.iter().rev().last())\n\
    \   |                                            ^^^^ method not found in `&isize`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().cloned().zip(0..).all(|(a, b)| {\n        match a <\
    \ b {\n            true => true,\n            false => false,\n        }\n   \
    \ })\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7nf5j4gk.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n\n    l.sort_unstable();\n\
    \n    for i in l.iter().rev() {\n        if *i < l.len() - 1 {\n            return\
    \ false;\n        }\n    }\n\n    true\n}\n\nfn main() {\n    let candidate =\
    \ monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphv9z5fr9.rs:16:17\n   |\n\
    16 |         if *i < l.len() - 1 {\n   |                 ^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n16 |         if *i < (l.len()\
    \ - 1).try_into().unwrap() {\n   |                 +           +++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter().cloned();\n    let mut smallest = l.next()?;\n\
    \    let mut smallest_index = 0;\n    let mut largest_index = 0;\n    let mut\
    \ largest_value = l.next()?;\n\n    while let Some(val) = l.next() {\n       \
    \ if val < smallest {\n            smallest = val;\n            smallest_index\
    \ = l.iter().position(|x| *x == smallest).unwrap();\n        }\n\n        if val\
    \ > largest_value {\n            largest_value = val;\n            largest_index\
    \ = l.iter().position(|x| *x == largest_value).unwrap();\n        }\n    }\n\n\
    \    smallest_index <= largest_index\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the `?` operator can only be used in a function that returns\
    \ `Result` or `Option` (or another type that implements `FromResidual`)\n  -->\
    \ /tmp/tmpq6bfl905.rs:10:32\n   |\n8  | / fn monotonic(l: Vec<isize>) -> bool\
    \ {\n9  | |     let mut l = l.iter().cloned();\n10 | |     let mut smallest =\
    \ l.next()?;\n   | |                                ^ cannot use the `?` operator\
    \ in a function that returns `bool`\n11 | |     let mut smallest_index = 0;\n\
    ...  |\n27 | |     smallest_index <= largest_index\n28 | | }\n   | |_- this function\
    \ should return `Result` or `Option` to accept `?`\n   |\n   = help: the trait\
    \ `FromResidual<Option<Infallible>>` is not implemented for `bool`\n\nerror[E0277]:\
    \ the `?` operator can only be used in a function that returns `Result` or `Option`\
    \ (or another type that implements `FromResidual`)\n  --> /tmp/tmpq6bfl905.rs:13:37\n\
    \   |\n8  | / fn monotonic(l: Vec<isize>) -> bool {\n9  | |     let mut l = l.iter().cloned();\n\
    10 | |     let mut smallest = l.next()?;\n11 | |     let mut smallest_index =\
    \ 0;\n12 | |     let mut largest_index = 0;\n13 | |     let mut largest_value\
    \ = l.next()?;\n   | |                                     ^ cannot use the `?`\
    \ operator in a function that returns `bool`\n...  |\n27 | |     smallest_index\
    \ <= largest_index\n28 | | }\n   | |_- this function should return `Result` or\
    \ `Option` to accept `?`\n   |\n   = help: the trait `FromResidual<Option<Infallible>>`\
    \ is not implemented for `bool`\n\nerror[E0599]: no method named `iter` found\
    \ for struct `Cloned` in the current scope\n  --> /tmp/tmpq6bfl905.rs:18:32\n\
    \   |\n18 |             smallest_index = l.iter().position(|x| *x == smallest).unwrap();\n\
    \   |                                ^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0599]: no method named `iter` found for struct `Cloned` in\
    \ the current scope\n  --> /tmp/tmpq6bfl905.rs:23:31\n   |\n23 |             largest_index\
    \ = l.iter().position(|x| *x == largest_value).unwrap();\n   |               \
    \                ^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\
    \ner"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.is_empty() {\n        true\n    } else if l.len() > 1 &&\
    \ l[0] != l[-1] {\n        l.iter().all(|x| x < l[l.len() - 1])\n    } else {\n\
    \        l[0] == l[l.len() - 1]\n    }\n}\n\nfn main() {\n    let candidate =\
    \ monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error: negative integers cannot be used to index on a `Vec<isize>`\n  -->\
    \ /tmp/tmp_md0q_cp.rs:11:40\n   |\n11 |     } else if l.len() > 1 && l[0] != l[-1]\
    \ {\n   |                                        ^^ cannot use a negative integer\
    \ for indexing on `Vec<isize>`\n   |\nhelp: to access an element starting from\
    \ the end of the `Vec<isize>`, compute the index\n   |\n11 |     } else if l.len()\
    \ > 1 && l[0] != l[l.len() -1] {\n   |                                       \
    \ +++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_md0q_cp.rs:12:30\n\
    \   |\n12 |         l.iter().all(|x| x < l[l.len() - 1])\n   |               \
    \               ^^^^^^^^^^^^^^\n   |                              |\n   |    \
    \                          expected `&isize`, found `isize`\n   |            \
    \                  help: consider borrowing here: `&l[l.len() - 1]`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut it = l.iter().rev().peekable();\n    loop {\n       \
    \ if let Some(last) = it.next() {\n            if last < l.len() {\n         \
    \       return last < &l[last];\n            }\n            it.next();\n     \
    \   } else {\n            return false;\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy6a6mr1k.rs:12:23\n   |\n\
    12 |             if last < l.len() {\n   |                       ^^^^^^^ expected\
    \ `&isize`, found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `&isize`\n  --> /tmp/tmpy6a6mr1k.rs:13:32\n   |\n13 |                 return\
    \ last < &l[last];\n   |                                ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut prev_val = l.iter().min().unwrap();\n    for i in l.iter().rev()\
    \ {\n        if *i > prev_val {\n            return false;\n        }\n      \
    \  prev_val = i;\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmr5eb168.rs:11:17\n   |\n\
    11 |         if *i > prev_val {\n   |                 ^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n11 |  \
    \       if *i > *prev_val {\n   |                 +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // Check for single element lists.\n    if l.len() == 1 {\n \
    \       return l[0] >= l[0] as isize;\n    }\n\n    // Check for empty list -\
    \ monotonicity is undefined.\n    if l.len() == 0 {\n        return true;\n  \
    \  }\n\n    // Find the first non-increasing element and check if it is\n    //\
    \ less than the maximum.\n    let mut min = l[0];\n    for elt in l {\n      \
    \  if elt < min {\n            min = elt;\n        }\n    }\n    return min <=\
    \ l.len() as isize;\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpeuqwl1wo.rs:27:19\n\
    \    |\n8   | fn monotonic(l: Vec<isize>) -> bool {\n    |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n...\n22  |     for elt in l {\n    |                - `l` moved due to\
    \ this implicit call to `.into_iter()`\n...\n27  |     return min <= l.len() as\
    \ isize;\n    |                   ^^^^^^^ value borrowed here after move\n   \
    \ |\nnote: this function takes ownership of the receiver `self`, which moves `l`\n\
    help: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n22  |     for elt in &l {\n    |               \
    \ +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return false;\n    }\n\n    let mut\
    \ last = l[0];\n    let mut cur = l[0];\n    for &x in &l[1..] {\n        if x\
    \ < cur {\n            return false;\n        }\n\n        if x >= last {\n  \
    \          return true;\n        }\n\n        if x > cur {\n            cur =\
    \ x;\n        }\n\n        last = x;\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7pez5vnv.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().enumerate().any(|(i, x)| x < l[i - 1])\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp71nat0ah.rs:9:43\n  |\n9 |\
    \     l.iter().enumerate().any(|(i, x)| x < l[i - 1])\n  |                   \
    \                        ^^^^^^^^\n  |                                       \
    \    |\n  |                                           expected `&isize`, found\
    \ `isize`\n  |                                           help: consider borrowing\
    \ here: `&l[i - 1]`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|x| l.iter().any(|y| x > y))\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxz227fu0.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut s = l.iter().fold(0, |s, x| s * (x - 1) + (*x < *s ?\
    \ *x : *s))\n    s == 0\n}\n\nfn main() {\n    let candidate = monotonic;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error: expected mut or const in raw pointer type\n --> /tmp/tmpcaxoq_dt.rs:9:71\n\
    \  |\n9 |     let mut s = l.iter().fold(0, |s, x| s * (x - 1) + (*x < *s ? *x\
    \ : *s))\n  |                                                                \
    \       ^ expected mut or const in raw pointer type\n  |\n  = help: use `*mut\
    \ T` or `*const T` as appropriate\n\nerror: expected `;`, found `s`\n  --> /tmp/tmpcaxoq_dt.rs:9:75\n\
    \   |\n9  |     let mut s = l.iter().fold(0, |s, x| s * (x - 1) + (*x < *s ? *x\
    \ : *s))\n   |                                                               \
    \            ^ help: add `;` here\n10 |     s == 0\n   |     - unexpected token\n\
    \nerror[E0573]: expected type, found local variable `s`\n --> /tmp/tmpcaxoq_dt.rs:9:72\n\
    \  |\n9 |     let mut s = l.iter().fold(0, |s, x| s * (x - 1) + (*x < *s ? *x\
    \ : *s))\n  |                                                                \
    \        ^ expecting a type here because of type ascription\n\nerror[E0277]: the\
    \ `?` operator can only be applied to values that implement `Try`\n --> /tmp/tmpcaxoq_dt.rs:9:62\n\
    \  |\n9 |     let mut s = l.iter().fold(0, |s, x| s * (x - 1) + (*x < *s ? *x\
    \ : *s))\n  |                                                              ^^^\
    \ the `?` operator cannot be applied to type `isize`\n  |\n  = help: the trait\
    \ `Try` is not implemented for `isize`\n\nerror[E0277]: the `?` operator can only\
    \ be used in a closure that returns `Result` or `Option` (or another type that\
    \ implements `FromResidual`)\n --> /tmp/tmpcaxoq_dt.rs:9:64\n  |\n9 |     let\
    \ mut s = l.iter().fold(0, |s, x| s * (x - 1) + (*x < *s ? *x : *s))\n  |    \
    \                              ------------------------------^---------\n  | \
    \                                 |                             |\n  |       \
    \                           |                             cannot use the `?` operator\
    \ in a closure that returns `isize`\n  |                                  this\
    \ function should return `Result` or `Option` to accept `?`\n  |\n  = help: the\
    \ trait `FromResidual<_>` is not implemented for `isize`\n\nerror[E0277]: cannot\
    \ add `bool` to `isize"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter().cloned();\n    let mut cur = l.first();\n\
    \    let mut has_changed = false;\n    loop {\n        let next = l.iter().skip(1).next().expect(\"\
    Invalid list element\");\n        if cur < next {\n            l.swap(cur, next);\n\
    \            cur = next;\n            has_changed = true;\n        } else {\n\
    \            l.swap(cur, next);\n            cur = next;\n            if cur ==\
    \ next {\n                return has_changed;\n            }\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `first` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmpsn_8z4mz.rs:10:21\n   |\n10 |     let mut cur =\
    \ l.first();\n   |                     ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0599]: no method named `iter` found for struct `Cloned` in\
    \ the current scope\n  --> /tmp/tmpsn_8z4mz.rs:13:22\n   |\n13 |         let next\
    \ = l.iter().skip(1).next().expect(\"Invalid list element\");\n   |          \
    \            ^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\n\
    error[E0599]: no method named `swap` found for struct `Cloned` in the current\
    \ scope\n  --> /tmp/tmpsn_8z4mz.rs:15:15\n   |\n15 |             l.swap(cur, next);\n\
    \   |               ^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\
    \nerror[E0599]: no method named `swap` found for struct `Cloned` in the current\
    \ scope\n  --> /tmp/tmpsn_8z4mz.rs:19:15\n   |\n19 |             l.swap(cur, next);\n\
    \   |               ^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut is_increasing = true;\n\n    for x in l {\n        match\
    \ is_increasing {\n            false => break,\n            true => {\n      \
    \          if x < x.checked_sub(&x).unwrap() {\n                    is_increasing\
    \ = false;\n                }\n            }\n        }\n    }\n\n    is_increasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8lu2l7xi.rs:15:38\n   |\n\
    15 |                 if x < x.checked_sub(&x).unwrap() {\n   |               \
    \                       ^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ removing the borrow\n   |\n15 -                 if x < x.checked_sub(&x).unwrap()\
    \ {\n15 +                 if x < x.checked_sub(x).unwrap() {\n   | \n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut max = isize::MIN;\n    for i in l {\n        if max <\
    \ i {\n            max = 0;\n        }\n        if i > max {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1ehua1x6.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut low = l.first().unwrap();\n    let mut high = l.last().unwrap();\n\
    \    while !l.is_empty() {\n        if low > high {\n            return false;\n\
    \        }\n        if l.last().unwrap() < low {\n            high = l.last().unwrap();\n\
    \        } else {\n            low = l.first().unwrap();\n        }\n    }\n \
    \   true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().zip(l).all(|&(a, b)| *a < *b)\n}\n\nfn main() {\n  \
    \  let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpop7n919p.rs:9:26\n  |\n9 |\
    \     l.iter().zip(l).all(|&(a, b)| *a < *b)\n  |                          ^^^^^^-\n\
    \  |                          |     |\n  |                          |     expected\
    \ due to this\n  |                          expected tuple, found reference\n\
    \  |\n  = note:  expected tuple `(&isize, isize)`\n          found reference `&_`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    for i in l.iter().rev() {\n        if *i\
    \ > i {\n            return false;\n        }\n        if *i < i {\n         \
    \   return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeg5j6_n7.rs:11:17\n   |\n\
    11 |         if *i > i {\n   |                 ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |         if *i > *i\
    \ {\n   |                 +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeg5j6_n7.rs:14:17\n\
    \   |\n14 |         if *i < i {\n   |                 ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |        \
    \ if *i < *i {\n   |                 +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_value = l[0];\n    for i in l.iter().rev() {\n  \
    \      if i < min_value {\n            min_value = i;\n        }\n        if i\
    \ > min_value {\n            break;\n        }\n    }\n    for i in l.iter() {\n\
    \        if i != min_value {\n            return false;\n        }\n    }\n  \
    \  true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_elizs2g.rs:11:16\n   |\n\
    11 |         if i < min_value {\n   |                ^^^^^^^^^\n   |         \
    \       |\n   |                expected `&isize`, found `isize`\n   |        \
    \        help: consider borrowing here: `&min_value`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_elizs2g.rs:12:25\n   |\n9  |     let mut min_value = l[0];\n\
    \   |                         ---- expected due to this value\n...\n12 |     \
    \        min_value = i;\n   |                         ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |        \
    \     min_value = *i;\n   |                         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_elizs2g.rs:14:16\n   |\n14 |         if i > min_value\
    \ {\n   |                ^^^^^^^^^\n   |                |\n   |              \
    \  expected `&isize`, found `isize`\n   |                help: consider borrowing\
    \ here: `&min_value`\n\nerror[E0277]: can't compare `&isize` with `isize`\n  -->\
    \ /tmp/tmp_elizs2g.rs:19:14\n   |\n19 |         if i != min_value {\n   |    \
    \          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait\
    \ `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_x = std::isize::MAX;\n    let mut max_x = std::isize::MIN;\n\
    \    for i in l {\n        min_x = min_x if min_x < i else i;\n        max_x =\
    \ max_x if max_x > i else i;\n    }\n    min_x <= max_x\n}\n\nfn main() {\n  \
    \  let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found keyword `if`\n  --> /tmp/tmpoyq6i8j1.rs:12:23\n   |\n12 |         min_x\
    \ = min_x if min_x < i else i;\n   |                       ^^ expected one of\
    \ 8 possible tokens\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut last = l[0];\n    for i in l {\n        let cur = i;\n\
    \        if cur < last {\n            return false;\n        }\n        last =\
    \ cur;\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpn9xh0w7_.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.len() == 0 || l.iter().all(|&x| x <= &l.iter().nth(1))\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqugvxha6.rs:9:44\n  |\n9 |\
    \     l.len() == 0 || l.iter().all(|&x| x <= &l.iter().nth(1))\n  |          \
    \                                  ^^^^^^^^^^^^^^^^ expected `isize`, found `&Option<&isize>`\n\
    \  |\n  = note:   expected type `isize`\n          found reference `&Option<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().take_while(|&x| x > 0).all(|&x| x <= l.iter().filter(|&y|\
    \ y > x).count())\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz52g246_.rs:9:34\n  |\n9 |\
    \     l.iter().take_while(|&x| x > 0).all(|&x| x <= l.iter().filter(|&y| y > x).count())\n\
    \  |                                  ^\n  |                                 \
    \ |\n  |                                  expected `&isize`, found integer\n \
    \ |                                  help: consider borrowing here: `&0`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpz52g246_.rs:9:76\n  |\n9 |     l.iter().take_while(|&x|\
    \ x > 0).all(|&x| x <= l.iter().filter(|&y| y > x).count())\n  |             \
    \                                                               ^\n  |       \
    \                                                                     |\n  | \
    \                                                                           expected\
    \ `&isize`, found `isize`\n  |                                               \
    \                             help: consider borrowing here: `&x`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpz52g246_.rs:9:51\n  |\n9 |     l.iter().take_while(|&x|\
    \ x > 0).all(|&x| x <= l.iter().filter(|&y| y > x).count())\n  |             \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     l.iter().take_while(|&x|\
    \ x > 0).all(|&x| x <= l.iter().filter(|&y| y > x).count().try_into().unwrap())\n\
    \  |                                                                         \
    \             ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|&x| x.checked_add(1, Ordering::Relaxed).is_ok())\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n -->\
    \ /tmp/tmpuz1ef8ln.rs:9:40\n  |\n9 |     l.iter().all(|&x| x.checked_add(1, Ordering::Relaxed).is_ok())\n\
    \  |                                        ^^^^^^^^ use of undeclared type `Ordering`\n\
    \nerror[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \   --> /tmp/tmpuz1ef8ln.rs:9:25\n    |\n9   |     l.iter().all(|&x| x.checked_add(1,\
    \ Ordering::Relaxed).is_ok())\n    |                         ^^^^^^^^^^^ -  -----------------\
    \ supplied 2 arguments\n    |                         |\n    |               \
    \          expected 1 argument\n    |\nnote: associated function defined here\n\
    \    = note: this error originates in the macro `int_impl` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror[E0599]: no method named\
    \ `is_ok` found for enum `Option` in the current scope\n --> /tmp/tmpuz1ef8ln.rs:9:59\n\
    \  |\n9 |     l.iter().all(|&x| x.checked_add(1, Ordering::Relaxed).is_ok())\n\
    \  |                                                           ^^^^^ method not\
    \ found in `Option<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0061, E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut cur = 0;\n    for x in l {\n        cur = *x;\n     \
    \   if cur > cur {\n            return false;\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpkjasgj__.rs:11:15\n\
    \   |\n11 |         cur = *x;\n   |               ^^\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(true, |a, b| {\n        match b {\n           \
    \ Some(elem) => a >= elem,\n            None => true,\n        }\n    })\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwcfl0xu2.rs:11:13\n   |\n\
    10 |         match b {\n   |               - this expression has type `&isize`\n\
    11 |             Some(elem) => a >= elem,\n   |             ^^^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwcfl0xu2.rs:12:13\n\
    \   |\n10 |         match b {\n   |               - this expression has type `&isize`\n\
    11 |             Some(elem) => a >= elem,\n12 |             None => true,\n  \
    \ |             ^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected\
    \ type `isize`\n              found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwcfl0xu2.rs:11:32\n   |\n11 |             Some(elem) =>\
    \ a >= elem,\n   |                                ^^^^ expected `bool`, found\
    \ reference\n   |\n   = note:   expected type `bool`\n           found reference\
    \ `&_`\nhelp: consider dereferencing the borrow\n   |\n11 |             Some(elem)\
    \ => a >= *elem,\n   |                                +\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n    let mut x0\
    \ = l[0];\n    let mut x1 = l[1];\n    let mut i = 2;\n    while i < l.len() {\n\
    \        if l[i] > x1 {\n            x1 = l[i];\n        }\n        if l[i] <\
    \ x0 {\n            x0 = l[i];\n        }\n        i += 1;\n    }\n    x0 > x1\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5dx4a1ul.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_l = l[0];\n    let mut max_l = l[0];\n    for i in\
    \ l {\n        if *i > max_l {\n            max_l = *i;\n        }\n        if\
    \ *i < min_l {\n            min_l = *i;\n        }\n    }\n    *l > max_l && *l\
    \ < min_l\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpjt30sgeq.rs:12:12\n\
    \   |\n12 |         if *i > max_l {\n   |            ^^\n\nerror[E0614]: type\
    \ `isize` cannot be dereferenced\n  --> /tmp/tmpjt30sgeq.rs:13:21\n   |\n13 |\
    \             max_l = *i;\n   |                     ^^\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmpjt30sgeq.rs:15:12\n   |\n15 |        \
    \ if *i < min_l {\n   |            ^^\n\nerror[E0614]: type `isize` cannot be\
    \ dereferenced\n  --> /tmp/tmpjt30sgeq.rs:16:21\n   |\n16 |             min_l\
    \ = *i;\n   |                     ^^\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpjt30sgeq.rs:19:10\n   |\n19 |     *l > max_l && *l < min_l\n   |   \
    \       ^^^^^ expected slice `[isize]`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjt30sgeq.rs:19:24\n   |\n19 |     *l > max_l && *l < min_l\n\
    \   |                        ^^^^^ expected slice `[isize]`, found `isize`\n\n\
    error: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|x| x <= l.iter().map(|x| x.next()).max())\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `next` found for reference `&isize` in the\
    \ current scope\n --> /tmp/tmptq4tg1sp.rs:9:46\n  |\n9 |     l.iter().all(|x|\
    \ x <= l.iter().map(|x| x.next()).max())\n  |                                \
    \              ^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmptq4tg1sp.rs:9:27\n  |\n9 |     l.iter().all(|x| x <= l.iter().map(|x|\
    \ x.next()).max())\n  |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&isize`, found enum `Option`\n  |\n  = note: expected reference `&isize`\n\
    \                  found enum `Option<_>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut it = l.iter().rev();\n    let mut prev = it.next();\n\
    \    loop {\n        if prev.is_some() {\n            if *prev < it.next() {\n\
    \                return false;\n            }\n        }\n        prev = it.next();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `Option<&isize>` cannot be dereferenced\n  --> /tmp/tmp3ted762s.rs:13:16\n\
    \   |\n13 |             if *prev < it.next() {\n   |                ^^^^^\n\n\
    warning: unreachable expression\n  --> /tmp/tmp3ted762s.rs:19:5\n   |\n11 | /\
    \     loop {\n12 | |         if prev.is_some() {\n13 | |             if *prev\
    \ < it.next() {\n14 | |                 return false;\n...  |\n17 | |        \
    \ prev = it.next();\n18 | |     }\n   | |_____- any code following this expression\
    \ is unreachable\n19 |       true\n   |       ^^^^ unreachable expression\n  \
    \ |\n   = note: `#[warn(unreachable_code)]` on by default\n\nerror: aborting due\
    \ to previous error; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut is_increasing = true;\n    for elt in l {\n        match\
    \ elt {\n            elt if elt >= elt + 1 => (),\n            elt if elt < elt\
    \ - 1 => is_increasing = false,\n            _ => (),\n        }\n    }\n    is_increasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpisamdtf4.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|&x| x <= l.iter().any(|&y| *y < *x))\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpng3qzs53.rs:9:46\n\
    \  |\n9 |     l.iter().all(|&x| x <= l.iter().any(|&y| *y < *x))\n  |        \
    \                                      ^^\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n --> /tmp/tmpng3qzs53.rs:9:51\n  |\n9 |     l.iter().all(|&x|\
    \ x <= l.iter().any(|&y| *y < *x))\n  |                                      \
    \             ^^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpng3qzs53.rs:9:28\n\
    \  |\n9 |     l.iter().all(|&x| x <= l.iter().any(|&y| *y < *x))\n  |        \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `bool`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ curr = l.iter().min().unwrap_or(0);\n    let mut min_next = l.iter().min().unwrap_or(0);\n\
    \n    for &el in l {\n        let next = el.saturating_add(curr).unwrap_or(0);\n\
    \n        if curr <= next {\n            min_next = next;\n        }\n\n     \
    \   curr = next;\n    }\n\n    l == l.iter().rev().collect::<Vec<_>>() && min_next\
    \ <= l.iter().rev().max().unwrap_or(0)\n}\n\nfn main() {\n    let candidate =\
    \ monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuymq2wz.rs:10:45\n   |\n\
    10 |     let mut curr = l.iter().min().unwrap_or(0);\n   |                   \
    \                          ^\n   |                                           \
    \  |\n   |                                             expected `&isize`, found\
    \ integer\n   |                                             help: consider borrowing\
    \ here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphuymq2wz.rs:11:49\n\
    \   |\n11 |     let mut min_next = l.iter().min().unwrap_or(0);\n   |        \
    \                                         ^\n   |                            \
    \                     |\n   |                                                \
    \ expected `&isize`, found integer\n   |                                     \
    \            help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphuymq2wz.rs:13:9\n   |\n13 |     for &el in l {\n   |         ^^^\
    \    - this expression has type `Option<isize>`\n   |         |\n   |        \
    \ expected `isize`, found reference\n   |         help: you can probably remove\
    \ the explicit borrow: `el`\n   |\n   = note:   expected type `isize`\n      \
    \     found reference `&_`\n\nerror[E0277]: can't compare `isize` with `&isize`\n\
    \  --> /tmp/tmphuymq2wz.rs:23:7\n   |\n23 |     l == l.iter().rev().collect::<Vec<_>>()\
    \ && min_next <= l.iter().rev().max().unwrap_or(0)\n   |       ^^ no implementation\
    \ for `isize == &isize`\n   |\n   = help: the trait `PartialEq<&isize>` is not\
    \ implemented for `isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n   = note: required because of the requirements\
    \ on the impl of `PartialEq<Vec<&isize>>` for `Vec<isize>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphuymq2wz.rs:23:91\n   |\n23 |     l == l.iter().rev().collect::<Vec<_>>()\
    \ && min_next <= l.iter().rev().max().unwrap_or(0)\n   |                     \
    \                                           "
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut max_value = l[0];\n\n    for &el\
    \ in l {\n        let cur_val = el;\n\n        while i < el && max_value < cur_val\
    \ {\n            i += 1;\n        }\n\n        if i > el {\n            return\
    \ false;\n        }\n\n        if max_value < cur_val {\n            max_value\
    \ = cur_val;\n        }\n    }\n\n    return true;\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjj4tnqbw.rs:12:9\n   |\n\
    12 |     for &el in l {\n   |         ^^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `el`\n   |\n   = note:  \
    \ expected type `isize`\n           found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.len() == 1 && l[0] <= 0\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpn8_hnozg.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = l.len() - 1;\n    let mut is_decrease = true;\n \
    \   while i > 0 && is_decrease {\n        if l[i] > l[i - 1] {\n            is_decrease\
    \ = false;\n        }\n        i -= 1;\n    }\n    i == 0 && is_decrease\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp35r07u5e.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut max_i = 0;\n    let mut min_i = l.len()\
    \ - 1;\n    while i <= max_i && i >= min_i {\n        if l[i] < l[min_i] {\n \
    \           i += 1;\n        } else if l[i] > l[max_i] {\n            i -= 1;\n\
    \        } else {\n            i += 1;\n            i += 1;\n            i +=\
    \ 1;\n        }\n        min_i = i if i < min_i else min_i;\n        max_i = i\
    \ if i > max_i else max_i;\n    }\n    i == max_i && i == l.len() - 1\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found keyword `if`\n  --> /tmp/tmpqwubuin5.rs:22:19\n   |\n22 |         min_i\
    \ = i if i < min_i else min_i;\n   |                   ^^ expected one of 8 possible\
    \ tokens\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut cmp = l.iter().min_by(|a, b| a.cmp(&b)).unwrap();\n \
    \   while cmp == l.iter().max_by(|a, b| a.cmp(&b)) {\n        l.swap(0, cmp);\n\
    \        cmp = l.iter().min_by(|a, b| a.cmp(&b)).unwrap();\n    }\n    cmp >=\
    \ 0\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9h1jkvx9.rs:11:19\n   |\n\
    11 |         l.swap(0, cmp);\n   |                   ^^^ expected `usize`, found\
    \ `&isize`\n\nerror[E0277]: can't compare `&isize` with `Option<&isize>`\n  -->\
    \ /tmp/tmp9h1jkvx9.rs:10:15\n   |\n10 |     while cmp == l.iter().max_by(|a, b|\
    \ a.cmp(&b)) {\n   |               ^^ no implementation for `&isize == Option<&isize>`\n\
    \   |\n   = help: the trait `PartialEq<Option<&isize>>` is not implemented for\
    \ `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9h1jkvx9.rs:14:12\n\
    \   |\n14 |     cmp >= 0\n   |            ^\n   |            |\n   |         \
    \   expected `&isize`, found integer\n   |            help: consider borrowing\
    \ here: `&0`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter().copied();\n    l.sort();\n    l.rev().fold(true,\
    \ (l, h) => {\n        return !l.is_monotonic_increasing() && !l.is_monotonic_decreasing()\
    \ && (l.iter().any(|&x| *x < *h));\n    })\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n\
    \  --> /tmp/tmptpszr_87.rs:11:31\n   |\n11 |     l.rev().fold(true, (l, h) =>\
    \ {\n   |                               ^^ expected one of `)`, `,`, `.`, `?`,\
    \ or an operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut s = l.clone();\n    s[0] = 0;\n    l.iter().fold(true,\
    \ |a, b| {\n        if *b > a {\n            *b = 1;\n            *a = false;\n\
    \        } else if *b == a {\n            *b = 1;\n        }\n        a\n    });\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwo6m0s28.rs:12:17\n   |\n\
    12 |         if *b > a {\n   |                 ^ expected `isize`, found `bool`\n\
    \nerror[E0614]: type `bool` cannot be dereferenced\n  --> /tmp/tmpwo6m0s28.rs:14:13\n\
    \   |\n14 |             *a = false;\n   |             ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwo6m0s28.rs:15:25\n   |\n15 |         } else if *b == a\
    \ {\n   |                         ^ expected `isize`, found `bool`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwo6m0s28.rs:8:32\n   |\n8  | fn monotonic(l:\
    \ Vec<isize>) -> bool {\n   |    ---------                   ^^^^ expected `bool`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n...\n19 |     });\n   |       - help: remove this semicolon\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut cur = l.last();\n    for &x in l\
    \ {\n        if x <= cur {\n            cur = x;\n        } else {\n         \
    \   i += 1;\n        }\n    }\n    i == l.len() || i > 1\n}\n\nfn main() {\n \
    \   let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpotbkxvh1.rs:11:9\n   |\n\
    11 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(false, |a, b| {\n        if b < a {\n         \
    \   true\n        } else {\n            false\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_zj4rimn.rs:10:16\n   |\n\
    10 |         if b < a {\n   |                ^ expected `&isize`, found `bool`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut v = l.to_vec();\n    v.sort_unstable();\n    if v.len()\
    \ < 2 {\n        true\n    } else {\n        // the first element must be strictly\
    \ increasing\n        let mut first = v[0];\n        let mut last  = v[0];\n \
    \       for n in v.iter().skip(1) {\n            if *n > last {\n            \
    \    last = *n;\n            } else {\n                // the list is not monotonic\n\
    \                let result = first > *n;\n                first = *n;\n     \
    \           last = first;\n                return result;\n            }\n   \
    \     }\n        // the list must be monotonic\n        false\n    }\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpc2lqcbw1.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter().cloned();\n    let mut min_val: isize;\n\
    \    let mut max_val = l[0];\n\n    loop {\n        if max_val > l[1] {\n    \
    \        return false;\n        }\n        min_val = *min_val; // Decrease max_val\
    \ so that we know max_val isn't increasing\n        if max_val > l[2] {\n    \
    \        return false;\n        }\n        if max_val < min_val {\n          \
    \  return true;\n        }\n        l.swap(0, 2); // Swap first and second element\n\
    \        if max_val > l[0] {\n            return false;\n        }\n        l.swap(0,\
    \ 2); // Swap first and second element\n        if max_val > l[1] {\n        \
    \    return false;\n        }\n    }\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n  --> /tmp/tmp4nbd5r9t.rs:11:23\n   |\n11 |     let mut max_val =\
    \ l[0];\n   |                       ^^^^\n\nerror[E0608]: cannot index into a\
    \ value of type `Cloned<std::slice::Iter<'_, isize>>`\n  --> /tmp/tmp4nbd5r9t.rs:14:22\n\
    \   |\n14 |         if max_val > l[1] {\n   |                      ^^^^\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmp4nbd5r9t.rs:17:19\n   |\n\
    17 |         min_val = *min_val; // Decrease max_val so that we know max_val isn't\
    \ increasing\n   |                   ^^^^^^^^\n\nerror[E0608]: cannot index into\
    \ a value of type `Cloned<std::slice::Iter<'_, isize>>`\n  --> /tmp/tmp4nbd5r9t.rs:18:22\n\
    \   |\n18 |         if max_val > l[2] {\n   |                      ^^^^\n\nerror[E0599]:\
    \ no method named `swap` found for struct `Cloned` in the current scope\n  -->\
    \ /tmp/tmp4nbd5r9t.rs:24:11\n   |\n24 |         l.swap(0, 2); // Swap first and\
    \ second element\n   |           ^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0608]: cannot index into a value of type `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n  --> /tmp/tmp4nbd5r9t.rs:25:22\n   |\n25 |         if max_val > l[0]\
    \ {\n   |                      ^^^^\n\nerror[E0599]: no method named `swap` found\
    \ for struct `Cloned` in the current scope\n  --> /tmp/tmp4nbd5r9t.rs:28:11\n\
    \   |\n28 |         l.swap(0, 2); // Swap first and second element\n   |     \
    \      ^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror[E0608]:\
    \ cannot index into a value of type `Cloned<std::slice::Iter<'_, isize>>`\n  -->\
    \ /tmp/tmp4nbd5r9t.rs:29:22\n   |\n29 |         if max_val > l[1] {\n   |    \
    \                  ^^^^\n\nerror: aborting due to 8 previous errors\n\nSome errors\
    \ have detailed explanations: E0599, E0608, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut last_monotonic = l;\n    let mut\
    \ monotonic = false;\n    while i < l.len() {\n        let e = l[i];\n       \
    \ while i < l.len() && !monotonic {\n            match last_monotonic[i] {\n \
    \               Some(e2) if e >= e2 => {\n                    last_monotonic =\
    \ &l[i..];\n                    monotonic = true;\n                    i += 1;\n\
    \                }\n                Some(e2) if e > e2 => {\n                \
    \    i += 1;\n                }\n                Some(e2) => {}\n            \
    \    None => {}\n            }\n        }\n        last_monotonic = &l[i..];\n\
    \        monotonic = true;\n        i += 1;\n    }\n    monotonic\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplu40mbz9.rs:16:17\n   |\n\
    15 |             match last_monotonic[i] {\n   |                   -----------------\
    \ this expression has type `isize`\n16 |                 Some(e2) if e >= e2 =>\
    \ {\n   |                 ^^^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected type `isize`\n              found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplu40mbz9.rs:21:17\n   |\n15 |             match\
    \ last_monotonic[i] {\n   |                   ----------------- this expression\
    \ has type `isize`\n...\n21 |                 Some(e2) if e > e2 => {\n   |  \
    \               ^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplu40mbz9.rs:24:17\n   |\n15 |             match\
    \ last_monotonic[i] {\n   |                   ----------------- this expression\
    \ has type `isize`\n...\n24 |                 Some(e2) => {}\n   |           \
    \      ^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected\
    \ type `isize`\n              found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplu40mbz9.rs:25:17\n   |\n15 |             match last_monotonic[i]\
    \ {\n   |                   ----------------- this expression has type `isize`\n\
    ...\n25 |                 None => {}\n   |                 ^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplu40mbz9.rs:17:38\n\
    \   |\n10 |     let mut last_monotonic = l;\n   |                            \
    \  - expected due to this value\n...\n17 |                     last_monotonic\
    \ = &l[i..];\n   |                                      ^^^^^^^ expected struct\
    \ `Vec`, found `&[isize]`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \        found reference `&[isize]`\nhelp: try using a conversion method\n   |\n\
    17 |                     last_monotonic = (&l[i..]).to_vec();\n   |          \
    \                            +       ++++++++++\n\nerro"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.to_vec();\n    let mut min = *l.last().unwrap();\n\
    \    let mut max = *l.first().unwrap();\n    for &x in &l {\n        if min >\
    \ x {\n            min = x;\n        }\n        if max < x {\n            max\
    \ = x;\n        }\n    }\n    if min == max {\n        return false;\n    }\n\
    \    for &x in &l {\n        if x < min {\n            return false;\n       \
    \ }\n        if x > max {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplx_4idbq.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    for j in l {\n        while i < j {\n   \
    \         let a = &l[i];\n            let b = &l[j];\n            if a > b {\n\
    \                i += 1;\n            } else {\n                j -= 1;\n    \
    \        }\n        }\n        if i == j {\n            return false;\n      \
    \  }\n        i += 1;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqma0u8ym.rs:12:22\n\
    \   |\n12 |             let a = &l[i];\n   |                      ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpqma0u8ym.rs:13:22\n   |\n13 |            \
    \ let b = &l[j];\n   |                      ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut is_monotonic = true;\n\n    for elt in l.iter() {\n \
    \       if is_monotonic && elt < l.first() {\n            is_monotonic = false;\n\
    \        }\n        if !is_monotonic && elt > l.last() {\n            is_monotonic\
    \ = true;\n        }\n    }\n\n    is_monotonic\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7s0742yx.rs:12:34\n   |\n\
    12 |         if is_monotonic && elt < l.first() {\n   |                      \
    \            ^^^^^^^^^ expected `&isize`, found enum `Option`\n   |\n   = note:\
    \ expected reference `&isize`\n                   found enum `Option<&isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7s0742yx.rs:15:35\n   |\n15 |\
    \         if !is_monotonic && elt > l.last() {\n   |                         \
    \          ^^^^^^^^ expected `&isize`, found enum `Option`\n   |\n   = note: expected\
    \ reference `&isize`\n                   found enum `Option<&isize>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut it = l.iter();\n    let mut i = 1;\n    loop {\n    \
    \    if let Some(v) = it.next() {\n            i += 1;\n            if v < i {\n\
    \                return false;\n            }\n        }\n        if i == 1 {\n\
    \            return true;\n        }\n        i += 2;\n    }\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3mk37cz5.rs:14:20\n   |\n\
    14 |             if v < i {\n   |                    ^\n   |                 \
    \   |\n   |                    expected `&isize`, found integer\n   |        \
    \            help: consider borrowing here: `&i`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|x| *x <= *l.iter().last() || *x == *l.iter().last().unwrap())\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `Option<&isize>` cannot be dereferenced\n --> /tmp/tmpjwglva0b.rs:9:28\n\
    \  |\n9 |     l.iter().all(|x| *x <= *l.iter().last() || *x == *l.iter().last().unwrap())\n\
    \  |                            ^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ min_val = l.iter().min().unwrap();\n    let mut max_val = l.iter().max().unwrap();\n\
    \n    while l.len() > 0 {\n        let min_elem = l.iter().cloned().collect::<Vec<_>>();\n\
    \        let max_elem = l.iter().cloned().collect::<Vec<_>>();\n        if max_elem.iter().max().unwrap()\
    \ < min_elem.iter().min().unwrap() {\n            if max_val < min_val {\n   \
    \             l.swap(0, 1);\n            } else {\n                l.swap(1, 0);\n\
    \            }\n        } else {\n            if min_val > max_val {\n       \
    \         l.swap(0, 1);\n            } else {\n                l.swap(1, 0);\n\
    \            }\n        }\n        l.sort();\n        min_val = l.iter().min().unwrap();\n\
    \        max_val = l.iter().max().unwrap();\n    }\n\n    l.len() <= 0\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min = l[0];\n    let mut max = l[0];\n    for el in l.iter().rev()\
    \ {\n        if el > max {\n            max = el;\n        }\n        if el <\
    \ min {\n            min = el;\n        }\n    }\n    min <= max\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqkl8fcdc.rs:12:17\n   |\n\
    12 |         if el > max {\n   |                 ^^^\n   |                 |\n\
    \   |                 expected `&isize`, found `isize`\n   |                 help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqkl8fcdc.rs:13:19\n\
    \   |\n10 |     let mut max = l[0];\n   |                   ---- expected due\
    \ to this value\n...\n13 |             max = el;\n   |                   ^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    13 |             max = *el;\n   |                   +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqkl8fcdc.rs:15:17\n   |\n15 |         if el < min {\n \
    \  |                 ^^^\n   |                 |\n   |                 expected\
    \ `&isize`, found `isize`\n   |                 help: consider borrowing here:\
    \ `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqkl8fcdc.rs:16:19\n\
    \   |\n9  |     let mut min = l[0];\n   |                   ---- expected due\
    \ to this value\n...\n16 |             min = el;\n   |                   ^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    16 |             min = *el;\n   |                   +\n\nerror: aborting due to\
    \ 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut prev_el = 0;\n    let mut prev_el_is_less = false;\n\
    \    for el in l.iter().rev() {\n        if el > prev_el {\n            if el\
    \ < prev_el_is_less {\n                return false;\n            }\n        }\
    \ else {\n            if el > prev_el_is_less {\n                return true;\n\
    \            }\n        }\n        prev_el_is_less = el;\n        prev_el = el;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl_poyzu5.rs:12:17\n   |\n\
    12 |         if el > prev_el {\n   |                 ^^^^^^^\n   |           \
    \      |\n   |                 expected `&isize`, found integer\n   |        \
    \         help: consider borrowing here: `&prev_el`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl_poyzu5.rs:13:21\n   |\n13 |             if el < prev_el_is_less\
    \ {\n   |                     ^^^^^^^^^^^^^^^ expected `&isize`, found `bool`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl_poyzu5.rs:17:21\n   |\n17 |\
    \             if el > prev_el_is_less {\n   |                     ^^^^^^^^^^^^^^^\
    \ expected `&isize`, found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl_poyzu5.rs:21:27\n\
    \   |\n10 |     let mut prev_el_is_less = false;\n   |                       \
    \        ----- expected due to this value\n...\n21 |         prev_el_is_less =\
    \ el;\n   |                           ^^ expected `bool`, found `&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl_poyzu5.rs:22:19\n   |\n9  |     let mut prev_el\
    \ = 0;\n   |                       - expected due to this value\n...\n22 |   \
    \      prev_el = el;\n   |                   ^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n22 |         prev_el = *el;\n\
    \   |                   +\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut it = l.iter().enumerate();\n    let mut i = 1;\n    for\
    \ (j, &e) in it.by_next() {\n        let x = &l[j];\n        if *e > i {\n   \
    \         return false;\n        } else if *e < i {\n            i = *e;\n   \
    \     }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n \
    \   assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `by_next` found for struct `Enumerate` in\
    \ the current scope\n  --> /tmp/tmpcx4jl6dn.rs:11:23\n   |\n11 |     for (j, &e)\
    \ in it.by_next() {\n   |                       ^^^^^^^ method not found in `Enumerate<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|&x| x <= l.last())\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnuxwbn58.rs:9:28\n  |\n9 |\
    \     l.iter().all(|&x| x <= l.last())\n  |                            ^^^^^^^^\
    \ expected `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n\
    \             found enum `Option<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut res = true;\n    let mut prev = l.iter().min().unwrap();\n\
    \    for &e in l {\n        if e < prev {\n            res = false;\n        \
    \    break;\n        }\n        prev = e;\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaygcgzge.rs:11:9\n   |\n\
    11 |     for &e in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `e`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.to_owned();\n    l.sort_unstable();\n    l[0] ==\
    \ 0\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsqwpnfko.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut last = l[0];\n    for v in l {\n        if v > last {\n\
    \            return false;\n        }\n        last = v;\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_vd5mby9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_i = l.iter().min_by_key(|x| x).unwrap();\n    let\
    \ mut max_i = l.iter().max_by_key(|x| x).unwrap();\n    while min_i < max_i {\n\
    \        let mid = (min_i + max_i) / 2;\n        if l[mid] < min_i {\n       \
    \     min_i = mid;\n        } else if l[mid] > max_i {\n            max_i = mid;\n\
    \        } else {\n            return true;\n        }\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1bqpozhc.rs:13:12\n\
    \   |\n13 |         if l[mid] < min_i {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1bqpozhc.rs:14:21\n\
    \   |\n9  |     let mut min_i = l.iter().min_by_key(|x| x).unwrap();\n   |   \
    \                  ----------------------------------- expected due to this value\n\
    ...\n14 |             min_i = mid;\n   |                     ^^^\n   |       \
    \              |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&mid`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1bqpozhc.rs:15:19\n\
    \   |\n15 |         } else if l[mid] > max_i {\n   |                   ^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1bqpozhc.rs:16:21\n   |\n10 |     let mut max_i\
    \ = l.iter().max_by_key(|x| x).unwrap();\n   |                     -----------------------------------\
    \ expected due to this value\n...\n16 |             max_i = mid;\n   |       \
    \              ^^^\n   |                     |\n   |                     expected\
    \ `&isize`, found `isize`\n   |                     help: consider borrowing here:\
    \ `&mid`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_el = l.iter().min_by_key(|&a| a);\n    for el in\
    \ l {\n        if el < min_el {\n            min_el = el;\n        }\n    }\n\n\
    \    l.iter().all(|&el| el >= min_el)\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps1mne_qb.rs:11:17\n   |\n\
    11 |         if el < min_el {\n   |                 ^^^^^^ expected `isize`, found\
    \ enum `Option`\n   |\n   = note: expected type `isize`\n              found enum\
    \ `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps1mne_qb.rs:12:22\n\
    \   |\n9  |     let mut min_el = l.iter().min_by_key(|&a| a);\n   |          \
    \            --------------------------- expected due to this value\n...\n12 |\
    \             min_el = el;\n   |                      ^^ expected enum `Option`,\
    \ found `isize`\n   |\n   = note: expected enum `Option<&isize>`\n           \
    \   found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps1mne_qb.rs:16:30\n\
    \   |\n16 |     l.iter().all(|&el| el >= min_el)\n   |                       \
    \       ^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected\
    \ type `isize`\n              found enum `Option<&isize>`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(true, |b, e| b && cmp::lt(e, e+1))\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \ --> /tmp/tmpgh384_m1.rs:9:37\n  |\n9 |     l.iter().fold(true, |b, e| b && cmp::lt(e,\
    \ e+1))\n  |                                     ^^^ use of undeclared crate or\
    \ module `cmp`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut current = l[0];\n    for x in l {\n        if x >= current\
    \ {\n            if x - current > 0 {\n                return false;\n       \
    \     }\n        } else {\n            if current - x > 0 {\n                return\
    \ false;\n            }\n        }\n        current = x;\n    }\n    return true;\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpu37dznhs.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(true, |a, &x| {\n        let mut y = a;\n     \
    \   let mut x = x;\n        if x < y {\n            y.swap(x);\n            y.swap(a);\n\
    \        }\n        a == y\n    })\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo6uttlz1.rs:12:16\n   |\n\
    12 |         if x < y {\n   |                ^ expected `isize`, found `bool`\n\
    \nerror[E0599]: no method named `swap` found for type `bool` in the current scope\n\
    \  --> /tmp/tmpo6uttlz1.rs:13:15\n   |\n13 |             y.swap(x);\n   |    \
    \           ^^^^ method not found in `bool`\n\nerror[E0599]: no method named `swap`\
    \ found for type `bool` in the current scope\n  --> /tmp/tmpo6uttlz1.rs:14:15\n\
    \   |\n14 |             y.swap(a);\n   |               ^^^^ method not found in\
    \ `bool`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|&v| {\n        // We cannot use memcmp here because\
    \ it compares the whole struct,\n        // which we don't want to do as it compares\
    \ only its first fields.\n        // So we implement our own comparison function\
    \ which compares just fields.\n        let cmp = |a, b| a.cmp(&b);\n        if\
    \ cmp > 0 {\n            return true;\n        }\n        if cmp < 0 {\n     \
    \       return false;\n        }\n        // We reach here if both elements are\
    \ equal.\n        // So we skip all the remaining elements.\n        if a.is_positive()\
    \ && a.is_nonnegative() {\n            return false;\n        }\n        if b.is_positive()\
    \ && b.is_nonnegative() {\n            return true;\n        }\n        if a.is_negative()\
    \ && a.is_nonpositive() {\n            return false;\n        }\n        if b.is_negative()\
    \ && b.is_nonpositive() {\n            return true;\n        }\n        // We\
    \ reach here if both elements are non-negative.\n        // So we return early\
    \ without comparing the rest of the elements.\n        false\n    })\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `a` in this scope\n  --> /tmp/tmp7gg9u1eb.rs:22:12\n\
    \   |\n22 |         if a.is_positive() && a.is_nonnegative() {\n   |         \
    \   ^ help: a local variable with a similar name exists: `l`\n\nerror[E0425]:\
    \ cannot find value `a` in this scope\n  --> /tmp/tmp7gg9u1eb.rs:22:31\n   |\n\
    22 |         if a.is_positive() && a.is_nonnegative() {\n   |                \
    \               ^ help: a local variable with a similar name exists: `l`\n\nerror[E0425]:\
    \ cannot find value `b` in this scope\n  --> /tmp/tmp7gg9u1eb.rs:25:12\n   |\n\
    25 |         if b.is_positive() && b.is_nonnegative() {\n   |            ^ help:\
    \ a local variable with a similar name exists: `l`\n\nerror[E0425]: cannot find\
    \ value `b` in this scope\n  --> /tmp/tmp7gg9u1eb.rs:25:31\n   |\n25 |       \
    \  if b.is_positive() && b.is_nonnegative() {\n   |                          \
    \     ^ help: a local variable with a similar name exists: `l`\n\nerror[E0425]:\
    \ cannot find value `a` in this scope\n  --> /tmp/tmp7gg9u1eb.rs:28:12\n   |\n\
    28 |         if a.is_negative() && a.is_nonpositive() {\n   |            ^ help:\
    \ a local variable with a similar name exists: `l`\n\nerror[E0425]: cannot find\
    \ value `a` in this scope\n  --> /tmp/tmp7gg9u1eb.rs:28:31\n   |\n28 |       \
    \  if a.is_negative() && a.is_nonpositive() {\n   |                          \
    \     ^ help: a local variable with a similar name exists: `l`\n\nerror[E0425]:\
    \ cannot find value `b` in this scope\n  --> /tmp/tmp7gg9u1eb.rs:31:12\n   |\n\
    31 |         if b.is_negative() && b.is_nonpositive() {\n   |            ^ help:\
    \ a local variable with a similar name exists: `l`\n\nerror[E0425]: cannot find\
    \ value `b` in this scope\n  --> /tmp/tmp7gg9u1eb.rs:31:31\n   |\n31 |       \
    \  if b.is_negative() && b.is_nonpositive() {\n   |                          \
    \     ^ help: a local variable with a similar name exists: `l`\n\nerror[E0282]:\
    \ type annotations needed\n  --> /tmp/tmp7gg9u1eb.rs:13:20\n   |\n13 |       \
    \  let cmp = |a, b| a.cmp(&b);\n   |                    ^ consider giving this\
    \ closure parameter a type\n   |\n   = note: type must be known at this point"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_value = l[0];\n    for x in l.iter() {\n        if\
    \ x < min_value {\n            min_value = x;\n        }\n    }\n    for x in\
    \ l.iter() {\n        if x == min_value {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfgbyu29m.rs:11:16\n   |\n\
    11 |         if x < min_value {\n   |                ^^^^^^^^^\n   |         \
    \       |\n   |                expected `&isize`, found `isize`\n   |        \
    \        help: consider borrowing here: `&min_value`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfgbyu29m.rs:12:25\n   |\n9  |     let mut min_value = l[0];\n\
    \   |                         ---- expected due to this value\n...\n12 |     \
    \        min_value = x;\n   |                         ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |        \
    \     min_value = *x;\n   |                         +\n\nerror[E0277]: can't compare\
    \ `&isize` with `isize`\n  --> /tmp/tmpfgbyu29m.rs:16:14\n   |\n16 |         if\
    \ x == min_value {\n   |              ^^ no implementation for `&isize == isize`\n\
    \   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    for elt in l {\n        if i > elt {\n  \
    \          return false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyo1_j5r6.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|&x| x >= l.iter().rev().next().unwrap())\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0zpjdokm.rs:9:28\n  |\n9 |\
    \     l.iter().all(|&x| x >= l.iter().rev().next().unwrap())\n  |            \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |     l.iter().all(|&x|\
    \ x >= *l.iter().rev().next().unwrap())\n  |                            +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|e| e == l.iter().min())\n        || l.iter().all(|e|\
    \ e == l.iter().max())\n}\n\nfn main() {\n    let candidate = monotonic;\n   \
    \ assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `Option<&isize>`\n --> /tmp/tmpcb76q3gb.rs:9:24\n\
    \  |\n9 |     l.iter().all(|e| e == l.iter().min())\n  |                     \
    \   ^^ no implementation for `&isize == Option<&isize>`\n  |\n  = help: the trait\
    \ `PartialEq<Option<&isize>>` is not implemented for `&isize`\n  = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n            f32\n           \
    \ f64\n            i128\n            i16\n            i32\n            i64\n \
    \           i8\n            isize\n          and 6 others\n\nerror[E0277]: can't\
    \ compare `&isize` with `Option<&isize>`\n  --> /tmp/tmpcb76q3gb.rs:10:31\n  \
    \ |\n10 |         || l.iter().all(|e| e == l.iter().max())\n   |             \
    \                  ^^ no implementation for `&isize == Option<&isize>`\n   |\n\
    \   = help: the trait `PartialEq<Option<&isize>>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 2 {\n        return l.iter().all(|x| x >= l);\n\
    \    }\n    l.iter().zip(l.iter().skip(2)).all(|(a, b)| a <= b)\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8s01xls5.rs:10:38\n   |\n\
    10 |         return l.iter().all(|x| x >= l);\n   |                          \
    \            ^ expected `&isize`, found struct `Vec`\n   |\n   = note: expected\
    \ reference `&isize`\n                 found struct `Vec<isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut it = l.iter();\n    it.next_back();\n    it.next_back();\n\
    \    it.next_back();\n\n    let mut last_element = 0;\n    let mut is_monotonic\
    \ = true;\n    for e in it.by_ref() {\n        last_element = e;\n        if last_element\
    \ == it.peek() {\n            it.next();\n        }\n        if last_element <\
    \ it.peek() {\n            is_monotonic = false;\n            break;\n       \
    \ }\n    }\n    is_monotonic\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp30nmdidn.rs:17:24\n   |\n\
    14 |     let mut last_element = 0;\n   |                            - expected\
    \ due to this value\n...\n17 |         last_element = e;\n   |               \
    \         ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n17 |         last_element = *e;\n   |                    \
    \    +\n\nerror[E0599]: no method named `peek` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmp30nmdidn.rs:18:31\n   |\n18 |         if\
    \ last_element == it.peek() {\n   |                               ^^^^ method\
    \ not found in `std::slice::Iter<'_, isize>`\n\nerror[E0599]: no method named\
    \ `peek` found for struct `std::slice::Iter` in the current scope\n  --> /tmp/tmp30nmdidn.rs:21:30\n\
    \   |\n21 |         if last_element < it.peek() {\n   |                      \
    \        ^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let len = l.len();\n\n    for i in 0..(len as usize) {\n    \
    \    let pivot = l[i];\n        let j = i;\n\n        for j in 0..(len as usize)\
    \ - i {\n            if l[j] > pivot {\n                break;\n            }\n\
    \            if l[j] <= pivot {\n                continue;\n            }\n  \
    \          l[j] -= 1;\n            i += 1;\n        }\n        if j == (len as\
    \ usize) - i {\n            return false;\n        }\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpvq4lntfo.rs:22:13\n   |\n8  | fn monotonic(l: Vec<isize>) -> bool\
    \ {\n   |              - help: consider changing this to be mutable: `mut l`\n\
    ...\n22 |             l[j] -= 1;\n   |             ^ cannot borrow as mutable\n\
    \nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpvq4lntfo.rs:23:13\n\
    \   |\n11 |     for i in 0..(len as usize) {\n   |         -\n   |         |\n\
    \   |         first assignment to `i`\n   |         help: consider making this\
    \ binding mutable: `mut i`\n...\n23 |             i += 1;\n   |             ^^^^^^\
    \ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0384, E0596.\nFor more information\
    \ about an error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|&x| {\n        let mut min_value = x;\n       \
    \ let mut max_value = x;\n        for x in l {\n            if x < min_value {\n\
    \                min_value = x;\n            }\n            if x > max_value {\n\
    \                max_value = x;\n            }\n        }\n        if min_value\
    \ == max_value {\n            false\n        } else {\n            true\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0507]: cannot move out of `l`, a captured variable in an `FnMut`\
    \ closure\n   --> /tmp/tmpztltoa3l.rs:12:18\n    |\n8   |   fn monotonic(l: Vec<isize>)\
    \ -> bool {\n    |                - captured outer variable\n9   |       l.iter().all(|&x|\
    \ {\n    |  __________________-\n10  | |         let mut min_value = x;\n11  |\
    \ |         let mut max_value = x;\n12  | |         for x in l {\n    | |    \
    \              ^\n    | |                  |\n    | |                  `l` moved\
    \ due to this implicit call to `.into_iter()`\n    | |                  move occurs\
    \ because `l` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    ...   |\n24  | |         }\n25  | |     })\n    | |_____- captured by this `FnMut`\
    \ closure\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n12  |         for x in &l\
    \ {\n    |                  +\n\nerror[E0505]: cannot move out of `l` because\
    \ it is borrowed\n  --> /tmp/tmpztltoa3l.rs:9:18\n   |\n9  |     l.iter().all(|&x|\
    \ {\n   |     -------- --- ^^^^ move out of `l` occurs here\n   |     |      \
    \  |\n   |     |        borrow later used by call\n   |     borrow of `l` occurs\
    \ here\n...\n12 |         for x in l {\n   |                  - move occurs due\
    \ to use in closure\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0505, E0507.\nFor more information about an error,\
    \ try `rustc --explain E0505`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut last = 0;\n    let mut next_max =\
    \ last;\n\n    for elt in l {\n        if elt > last {\n            return false;\n\
    \        }\n\n        i += 1;\n        last = next_max;\n        next_max = elt\
    \ + i;\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpc8bhw4kt.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut lx = l.iter().cloned().collect::<Vec<_>>();\n    lx.sort_unstable();\n\
    \    for (i, elem) in lx.iter().enumerate() {\n        if elem < lx[i-1] {\n \
    \           return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppecbig88.rs:12:19\n   |\n\
    12 |         if elem < lx[i-1] {\n   |                   ^^^^^^^\n   |       \
    \            |\n   |                   expected `&isize`, found `isize`\n   |\
    \                   help: consider borrowing here: `&lx[i-1]`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|&x| x <= l.iter().rev().next().unwrap())\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyt5lrwhh.rs:9:28\n  |\n9 |\
    \     l.iter().all(|&x| x <= l.iter().rev().next().unwrap())\n  |            \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |     l.iter().all(|&x|\
    \ x <= *l.iter().rev().next().unwrap())\n  |                            +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut is_increasing = true;\n    let mut last_value = l.last().unwrap();\n\
    \    for value in l {\n        if value > last_value {\n            is_increasing\
    \ = false;\n        } else {\n            last_value = value;\n        }\n   \
    \ }\n    is_increasing\n}\n\nfn main() {\n    let candidate = monotonic;\n   \
    \ assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy8quzrpg.rs:12:20\n   |\n\
    12 |         if value > last_value {\n   |                    ^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    12 |         if value > *last_value {\n   |                    +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy8quzrpg.rs:15:26\n   |\n10 |     let mut last_value\
    \ = l.last().unwrap();\n   |                          ----------------- expected\
    \ due to this value\n...\n15 |             last_value = value;\n   |         \
    \                 ^^^^^\n   |                          |\n   |               \
    \           expected `&isize`, found `isize`\n   |                          help:\
    \ consider borrowing here: `&value`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    for &i in l {\n        let prev_i = i;\n\
    \        i += 1;\n        if i >= prev_i {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdlvyo7so.rs:10:9\n   |\n\
    10 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() == 0 {\n        return false;\n    }\n\n    if l.len()\
    \ == 1 {\n        l[0] < l[0]\n    } else {\n        l.iter().zip(l.iter().skip(1)).all(|(a,b)|\
    \ a <= b)\n    }\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzmzf9sci.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|&i| i == i.cmp(&i.min(l).unwrap()))\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwfqp15d1.rs:9:41\n  |\n9 |\
    \     l.iter().all(|&i| i == i.cmp(&i.min(l).unwrap()))\n  |                 \
    \                        ^ expected `isize`, found struct `Vec`\n  |\n  = note:\
    \ expected type `isize`\n           found struct `Vec<isize>`\n\nerror[E0599]:\
    \ no method named `unwrap` found for type `isize` in the current scope\n --> /tmp/tmpwfqp15d1.rs:9:44\n\
    \  |\n9 |     l.iter().all(|&i| i == i.cmp(&i.min(l).unwrap()))\n  |         \
    \                                   ^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpwfqp15d1.rs:9:28\n  |\n9 |     l.iter().all(|&i|\
    \ i == i.cmp(&i.min(l).unwrap()))\n  |                            ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found enum `std::cmp::Ordering`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    let mut last = 0;\n    while l.len() > 0\
    \ {\n        last = l.max().unwrap();\n        if l.len() == 1 {\n           \
    \ if l[0] != last {\n                return false;\n            }\n        } else\
    \ {\n            let mut max = last;\n            for i in l.iter().rev() {\n\
    \                if max <= i {\n                    max = i;\n               \
    \ }\n            }\n            if max != last {\n                return false;\n\
    \            }\n        }\n        l.swap(l, l.iter().rev());\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpuu4l55pl.rs:12:18\n    |\n12  |         last = l.max().unwrap();\n\
    \    |                  ^^^- supplied 0 arguments\n    |                  |\n\
    \    |                  expected 1 argument\n    |\nnote: associated function\
    \ defined here\n\nerror[E0599]: no method named `unwrap` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmpuu4l55pl.rs:12:24\n   |\n12 |         last\
    \ = l.max().unwrap();\n   |                        ^^^^^^ help: there is an associated\
    \ function with a similar name: `swap`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpuu4l55pl.rs:20:27\n   |\n20 |                 if max <= i {\n   |  \
    \                         ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n20 |                 if max <= *i {\n   |  \
    \                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuu4l55pl.rs:21:27\n\
    \   |\n18 |             let mut max = last;\n   |                           ----\
    \ expected due to this value\n...\n21 |                     max = i;\n   |   \
    \                        ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n21 |                     max = *i;\n   |   \
    \                        +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuu4l55pl.rs:28:16\n\
    \   |\n28 |         l.swap(l, l.iter().rev());\n   |                ^ expected\
    \ `usize`, found struct `Vec`\n   |\n   = note: expected type `usize`\n      \
    \      found struct `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuu4l55pl.rs:28:19\n\
    \   |\n28 |         l.swap(l, l.iter().rev());\n   |                   ^^^^^^^^^^^^^^\
    \ expected `usize`, found struct `Rev`\n   |\n   = note: expected type `usize`\n\
    \            found struct `Rev<std::slice::Iter<'_, isize>>`\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome errors have detailed explanations: E0061, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n\n    if l.len()\
    \ == 1 {\n        return l.len() == 2 && l[0] > l[1];\n    }\n\n    let mut left\
    \ = l[0];\n    let mut right = l[1];\n    for &x in l {\n        if x < left {\n\
    \            left = x;\n        } else if x > right {\n            right = x;\n\
    \        }\n    }\n    left > right as u8 && monotonic(&l.iter().skip(1).collect::<Vec<_>>())\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt_fprj93.rs:19:9\n   |\n\
    19 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpt_fprj93.rs:26:12\n   |\n26 |     left > right as u8 && monotonic(&l.iter().skip(1).collect::<Vec<_>>())\n\
    \   |            ^^^^^^^^^^^ expected `isize`, found `u8`\n   |\nhelp: you can\
    \ convert a `u8` to an `isize`\n   |\n26 |     left > (right as u8).into() &&\
    \ monotonic(&l.iter().skip(1).collect::<Vec<_>>())\n   |            +        \
    \   ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt_fprj93.rs:26:37\n\
    \   |\n26 |     left > right as u8 && monotonic(&l.iter().skip(1).collect::<Vec<_>>())\n\
    \   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `&Vec<&isize>`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found reference `&Vec<&isize>`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.to_owned();\n    l.sort();\n    if l.len() != l.iter().cloned().rev().fold(0,\
    \ |a, b| a < b) { 1 } else { -1 }\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg43yzwcf.rs:11:62\n   |\n\
    11 |     if l.len() != l.iter().cloned().rev().fold(0, |a, b| a < b) { 1 } else\
    \ { -1 }\n   |                                                              ^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n11 |     if l.len()\
    \ != l.iter().cloned().rev().fold(0, |a, b| a < b.try_into().unwrap()) { 1 } else\
    \ { -1 }\n   |                                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpg43yzwcf.rs:11:58\n   |\n11 |\
    \     if l.len() != l.iter().cloned().rev().fold(0, |a, b| a < b) { 1 } else {\
    \ -1 }\n   |                                                          ^^^^^ expected\
    \ `usize`, found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg43yzwcf.rs:11:67\n\
    \   |\n8  | fn monotonic(l: Vec<isize>) -> bool {\n   |                      \
    \          ---- expected `bool` because of return type\n...\n11 |     if l.len()\
    \ != l.iter().cloned().rev().fold(0, |a, b| a < b) { 1 } else { -1 }\n   |   \
    \                                                                ^ expected `bool`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg43yzwcf.rs:11:78\n\
    \   |\n8  | fn monotonic(l: Vec<isize>) -> bool {\n   |                      \
    \          ---- expected `bool` because of return type\n...\n11 |     if l.len()\
    \ != l.iter().cloned().rev().fold(0, |a, b| a < b) { 1 } else { -1 }\n   |   \
    \                                                                           ^^\
    \ expected `bool`, found integer\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut iter = l.iter().cloned();\n    let mut cur = iter.next();\n\
    \    loop {\n        if !cur.is_ok() {\n            return false;\n        }\n\
    \        if cur.unwrap() < cur.unwrap().cmp(&mut iter.next()) {\n            return\
    \ false;\n        }\n        cur = iter.next();\n    }\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ok` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmp6pxbm8kr.rs:12:17\n   |\n12 |         if !cur.is_ok() {\n\
    \   |                 ^^^^^ method not found in `Option<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6pxbm8kr.rs:15:44\n   |\n15 |         if cur.unwrap()\
    \ < cur.unwrap().cmp(&mut iter.next()) {\n   |                               \
    \             ^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n \
    \  = note:      expected reference `&isize`\n           found mutable reference\
    \ `&mut Option<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6pxbm8kr.rs:15:27\n\
    \   |\n15 |         if cur.unwrap() < cur.unwrap().cmp(&mut iter.next()) {\n \
    \  |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found enum `std::cmp::Ordering`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut last = l[0];\n    for &e in l.iter().rev() {\n      \
    \  if *e < last {\n            return false;\n        }\n        last = *e;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp68jsvrv_.rs:11:12\n\
    \   |\n11 |         if *e < last {\n   |            ^^\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmp68jsvrv_.rs:14:16\n   |\n14 |        \
    \ last = *e;\n   |                ^^\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_val = l[0];\n    let mut max_val = l[0];\n    for\
    \ &v in l {\n        if v < min_val {\n            min_val = v;\n        }\n \
    \       if v > max_val {\n            max_val = v;\n        }\n    }\n    l.iter().all(|&v|\
    \ v >= min_val && v <= max_val)\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvry6_lvb.rs:11:9\n   |\n\
    11 |     for &v in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `v`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut sorted = l.iter().sorted();\n    let mut prev = 0;\n\
    \    for x in sorted {\n        if prev < x {\n            return false;\n   \
    \     }\n        prev = x;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmp9cm9bdg6.rs:9:31\n  |\n9 |     let mut sorted\
    \ = l.iter().sorted();\n  |                               ^^^^^^ method not found\
    \ in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() == 0 || l.len() == 1 {\n        return true;\n   \
    \ }\n\n    let mut min_val = l[0];\n    let mut max_val = l[0];\n    for i in\
    \ 1..l.len() {\n        if l[i] < min_val {\n            min_val = l[i];\n   \
    \     }\n        if l[i] > max_val {\n            max_val = l[i];\n        }\n\
    \    }\n    min_val > max_val\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkzt50bbg.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    for elt in l {\n        if elt < l[i] {\n\
    \            return false;\n        }\n        i += 1;\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpbpvet_er.rs:11:18\n\
    \    |\n8   | fn monotonic(l: Vec<isize>) -> bool {\n    |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9   |     let mut i = 0;\n10  |     for elt in l {\n    |           \
    \     - `l` moved due to this implicit call to `.into_iter()`\n11  |         if\
    \ elt < l[i] {\n    |                  ^ value borrowed here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `l`\n\
    help: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n10  |     for elt in &l {\n    |               \
    \ +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut cmp = l[0];\n    for i in 1..l.len() {\n        if cmp\
    \ >= l[i] {\n            cmp = l[i];\n        } else {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppuo4fs6j.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut s = l.iter().rev();\n    s.next().unwrap();\n    let\
    \ mut max_value = 0;\n    for value in l {\n        if value > max_value {\n \
    \           max_value = value;\n        }\n        if value != max_value + 1 {\n\
    \            return false;\n        }\n        s.next();\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0505]: cannot move out of `l` because it is borrowed\n  --> /tmp/tmp3ljgk4lh.rs:12:18\n\
    \   |\n9  |     let mut s = l.iter().rev();\n   |                 -------- borrow\
    \ of `l` occurs here\n...\n12 |     for value in l {\n   |                  ^\
    \ move out of `l` occurs here\n...\n19 |         s.next();\n   |         --------\
    \ borrow later used here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0505`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut low: Vec<isize> = vec![];\n    let mut high: Vec<isize>\
    \ = vec![];\n    low.extend(l.iter().cloned());\n    high.extend(l.iter().cloned());\n\
    \    let mut i = 1;\n    let mut j = 1;\n    while i <= high.len() {\n       \
    \ if low[i] < high[j] {\n            i += 1;\n        } else {\n            i\
    \ += 1;\n            j += 1;\n        }\n        if i == high.len() {\n      \
    \      if low[j] > high[j] {\n                i += 1;\n            } else {\n\
    \                i += 1;\n                j += 1;\n            }\n        }\n\
    \        if i == low.len() {\n            if low[j] > high[j] {\n            \
    \    i += 1;\n            } else {\n                i += 1;\n                j\
    \ += 1;\n            }\n        }\n        if low[i] < high[j] {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 4 but the index\
    \ is 4', /tmp/tmp27623_go.rs:23:16\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut last_max = 0;\n    let mut last_min = 0;\n    for el\
    \ in l {\n        if el > last_max {\n            last_max = el;\n        }\n\
    \        if el < last_min {\n            last_min = el;\n        }\n    }\n  \
    \  if last_min > last_max {\n        return true;\n    }\n    else {\n       \
    \ return false;\n    }\n}\n\nfn main() {\n    let candidate = monotonic;\n   \
    \ assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpasf08jgg.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l1 = l;\n    l1.reverse();\n    l1.partial_sort_unchecked(l1.iter().cloned().collect::<Vec<_>>());\n\
    \    let mut l2 = l;\n    l2.reverse();\n    l2.partial_sort_unchecked(l2.iter().cloned().collect::<Vec<_>>());\n\
    \    l1 == l2\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `partial_sort_unchecked` found for struct\
    \ `Vec<isize>` in the current scope\n  --> /tmp/tmp83z36mqp.rs:11:8\n   |\n11\
    \ |     l1.partial_sort_unchecked(l1.iter().cloned().collect::<Vec<_>>());\n \
    \  |        ^^^^^^^^^^^^^^^^^^^^^^ help: there is an associated function with\
    \ a similar name: `get_unchecked`\n\nerror[E0599]: no method named `partial_sort_unchecked`\
    \ found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp83z36mqp.rs:14:8\n\
    \   |\n14 |     l2.partial_sort_unchecked(l2.iter().cloned().collect::<Vec<_>>());\n\
    \   |        ^^^^^^^^^^^^^^^^^^^^^^ help: there is an associated function with\
    \ a similar name: `get_unchecked`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // O(N)\n    let mut max = l[0];\n    for e in l.iter().rev()\
    \ {\n        if e >= max {\n            max = e;\n        }\n    }\n    l == &max\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpksd2gdxf.rs:12:17\n   |\n\
    12 |         if e >= max {\n   |                 ^^^\n   |                 |\n\
    \   |                 expected `&isize`, found `isize`\n   |                 help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpksd2gdxf.rs:13:19\n\
    \   |\n10 |     let mut max = l[0];\n   |                   ---- expected due\
    \ to this value\n...\n13 |             max = e;\n   |                   ^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    13 |             max = *e;\n   |                   +\n\nerror[E0277]: can't compare\
    \ `Vec<isize>` with `&isize`\n  --> /tmp/tmpksd2gdxf.rs:16:7\n   |\n16 |     l\
    \ == &max\n   |       ^^ no implementation for `Vec<isize> == &isize`\n   |\n\
    \   = help: the trait `PartialEq<&isize>` is not implemented for `Vec<isize>`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n             <Vec<T, A> as PartialEq<&[U;\
    \ N]>>\n             <Vec<T, A> as PartialEq<&[U]>>\n             <Vec<T, A> as\
    \ PartialEq<&mut [U]>>\n             <Vec<T, A> as PartialEq<[U; N]>>\n      \
    \       <Vec<T, A> as PartialEq<[U]>>\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(true, |l, x| l.and_then(|y| x > y)).unwrap_or(true)\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `and_then` found for type `bool` in the current\
    \ scope\n --> /tmp/tmpogdwpbqp.rs:9:34\n  |\n9 |     l.iter().fold(true, |l, x|\
    \ l.and_then(|y| x > y)).unwrap_or(true)\n  |                                \
    \  ^^^^^^^^ help: there is an associated function with a similar name: `then`\n\
    \nerror[E0599]: no method named `unwrap_or` found for type `bool` in the current\
    \ scope\n --> /tmp/tmpogdwpbqp.rs:9:55\n  |\n9 |     l.iter().fold(true, |l, x|\
    \ l.and_then(|y| x > y)).unwrap_or(true)\n  |                                \
    \                       ^^^^^^^^^ method not found in `bool`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ prev = l.last().unwrap();\n    let mut cur = l.iter().skip(1).max().unwrap();\n\
    \n    for e in l.iter().rev() {\n        if e > prev {\n            return false;\n\
    \        }\n        prev = e;\n    }\n    cur > prev\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmblnxpoz.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min = l.iter().min().unwrap();\n    for x in l.iter()\
    \ {\n        if x >= min {\n            return false;\n        }\n        min\
    \ = x;\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8lwy4c8x.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter();\n    let mut last_one = None;\n    loop\
    \ {\n        let a = l.next().unwrap();\n        if a < 0 {\n            l.next_back();\n\
    \            if l.next().unwrap() == a {\n                last_one = Some(a -\
    \ 1);\n            } else {\n                last_one = None;\n            }\n\
    \        } else {\n            last_one = Some(a + 1);\n        }\n        if\
    \ l.next().is_some() {\n            return false;\n        }\n    }\n    last_one.is_some()\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7lsazrmg.rs:13:16\n   |\n\
    13 |         if a < 0 {\n   |                ^\n   |                |\n   |  \
    \              expected `&isize`, found integer\n   |                help: consider\
    \ borrowing here: `&0`\n\nwarning: unreachable expression\n  --> /tmp/tmp7lsazrmg.rs:27:5\n\
    \   |\n11 | /     loop {\n12 | |         let a = l.next().unwrap();\n13 | |  \
    \       if a < 0 {\n14 | |             l.next_back();\n...  |\n25 | |        \
    \ }\n26 | |     }\n   | |_____- any code following this expression is unreachable\n\
    27 |       last_one.is_some()\n   |       ^^^^^^^^^^^^^^^^^^ unreachable expression\n\
    \   |\n   = note: `#[warn(unreachable_code)]` on by default\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(true, |is1, i| {\n        is1 && i < (l.iter().rev().next().unwrap()\
    \ - 1)\n    })\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6x_bzz4o.rs:10:20\n   |\n\
    10 |         is1 && i < (l.iter().rev().next().unwrap() - 1)\n   |           \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                    |\n  \
    \ |                    expected `&isize`, found `isize`\n   |                \
    \    help: consider borrowing here: `&((l.iter().rev().next().unwrap() - 1))`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_elem = l[0];\n    let mut last_elem = l[0];\n   \
    \ let mut max = l[0];\n    for i in l {\n        if i < min_elem {\n         \
    \   min_elem = i;\n        }\n        if i > last_elem {\n            last_elem\
    \ = i;\n        }\n        if i > max {\n            max = i;\n        }\n   \
    \ }\n    last_elem <= min\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `min` in this scope\n  --> /tmp/tmphogb1tzc.rs:23:18\n\
    \   |\n23 |     last_elem <= min\n   |                  ^^^\n...\n26 | fn main()\
    \ {\n   | --------- similarly named function `main` defined here\n   |\nhelp:\
    \ a function with a similar name exists\n   |\n23 |     last_elem <= main\n  \
    \ |                  ~~~~\nhelp: consider importing this function\n   |\n1  |\
    \ use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut max = l[0];\n    while i < l.len()\
    \ {\n        if max < l[i] {\n            max = l[i];\n        }\n        i +=\
    \ 1;\n    }\n    i >= l.len()\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwaoyv80f.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|e| e < l.iter().rev().next().unwrap())\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpcj6j84xw.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_value = l.iter().min().unwrap();\n    let mut max_value\
    \ = l.iter().max().unwrap();\n    for &x in l {\n        if x > max_value {\n\
    \            max_value = x;\n        } else if x < min_value {\n            min_value\
    \ = x;\n        }\n    }\n    min_value < max_value\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpozputj7l.rs:11:9\n   |\n\
    11 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(true, |is_increasing, &x| {\n        if x < is_increasing\
    \ {\n            false\n        } else {\n            is_increasing\n        }\n\
    \    })\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1njvbqzc.rs:10:16\n   |\n\
    10 |         if x < is_increasing {\n   |                ^^^^^^^^^^^^^ expected\
    \ `isize`, found `bool`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // Sort descending\n    l.sort_unstable_by(|a, b| b.cmp(a));\n\
    \n    // Iterate through list, returning a flag for each monotonic element.\n\
    \    // The flag tells us if the list is increasing, decreasing or unbounded.\n\
    \    l.iter().all(|&a| {\n        let mut flag = false;\n\n        // Compare\
    \ with the previous value.\n        if let Some(b) = &l[a.saturating_sub(1).min(l.len()\
    \ - 2)] {\n            if a < b {\n                flag = true;\n            }\n\
    \        }\n\n        // Compare with the next value.\n        if let Some(b)\
    \ = &l[a.saturating_add(1).max(0)] {\n            if a > b {\n               \
    \ flag = true;\n            }\n        }\n\n        // If we have two non-monotonic\
    \ values, then we have no answer.\n        if !flag {\n            a.is_ok()\n\
    \        } else {\n            true\n        }\n    })\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcyrwwxb4.rs:18:53\n   |\n\
    18 |         if let Some(b) = &l[a.saturating_sub(1).min(l.len() - 2)] {\n   |\
    \                                                     ^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n18 |         if let Some(b) = &l[a.saturating_sub(1).min((l.len()\
    \ - 2).try_into().unwrap())] {\n   |                                         \
    \            +           +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpcyrwwxb4.rs:18:27\n   |\n18 |  \
    \       if let Some(b) = &l[a.saturating_sub(1).min(l.len() - 2)] {\n   |    \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcyrwwxb4.rs:19:20\n\
    \   |\n19 |             if a < b {\n   |                    ^ expected `isize`,\
    \ found reference\n   |\n   = note:   expected type `isize`\n           found\
    \ reference `&_`\nhelp: consider dereferencing the borrow\n   |\n19 |        \
    \     if a < *b {\n   |                    +\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpcyrwwxb4.rs:25:27\n   |\n25 |  \
    \       if let Some(b) = &l[a.saturating_add(1).max(0)] {\n   |              \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcyrwwxb4.rs:26:20\n\
    \   |\n26 |             if a > b {\n   |                    ^ expected "
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut cur = 0;\n    let mut last = l.iter().skip(1).next().unwrap();\n\
    \    for &x in &l {\n        let next = match last {\n            None => return\
    \ false,\n            Some(x1) => x1,\n        };\n        if x == next {\n  \
    \          continue;\n        }\n        if x < cur {\n            cur = next;\n\
    \        } else if x > cur {\n            return false;\n        }\n        last\
    \ = Some(next);\n    }\n    cur == l.last()\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb93e9bd7.rs:13:13\n   |\n\
    12 |         let next = match last {\n   |                          ---- this\
    \ expression has type `&isize`\n13 |             None => return false,\n   | \
    \            ^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected\
    \ type `isize`\n              found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb93e9bd7.rs:14:13\n   |\n12 |         let next = match\
    \ last {\n   |                          ---- this expression has type `&isize`\n\
    13 |             None => return false,\n14 |             Some(x1) => x1,\n   |\
    \             ^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb93e9bd7.rs:16:17\n   |\n16 |         if x ==\
    \ next {\n   |                 ^^^^ expected `isize`, found reference\n   |\n\
    \   = note:   expected type `isize`\n           found reference `&_`\nhelp: consider\
    \ dereferencing the borrow\n   |\n16 |         if x == *next {\n   |         \
    \        +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb93e9bd7.rs:20:19\n\
    \   |\n9  |     let mut cur = 0;\n   |                   - expected due to this\
    \ value\n...\n20 |             cur = next;\n   |                   ^^^^ expected\
    \ `isize`, found reference\n   |\n   = note:   expected type `isize`\n       \
    \    found reference `&_`\nhelp: consider dereferencing the borrow\n   |\n20 |\
    \             cur = *next;\n   |                   +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb93e9bd7.rs:24:16\n   |\n10 |     let mut last = l.iter().skip(1).next().unwrap();\n\
    \   |                    -------------------------------- expected due to this\
    \ value\n...\n24 |         last = Some(next);\n   |                ^^^^^^^^^^\
    \ expected `&isize`, found enum `Option`\n   |\n   = note: expected reference\
    \ `&isize`\n                   found enum `Option<&_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb93e9bd7.rs:26:12\n   |\n26 |     cur == l.last()\n   |\
    \            ^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = not"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min = l[0];\n    let mut max = l[0];\n    for x in l\
    \ {\n        if x < min {\n            min = x;\n        }\n        if x > max\
    \ {\n            max = x;\n        }\n    }\n    if min == max {\n        // Empty\
    \ list is monotonically increasing\n        return true;\n    }\n    if min >\
    \ max {\n        // If first element is greater than all others, it is monotonically\
    \ decreasing\n        return false;\n    }\n    let mut mid = min + (max - min)\
    \ / 2;\n    loop {\n        if l[mid] < mid {\n            max = mid;\n      \
    \  } else {\n            min = mid;\n        }\n        mid = min + (max - min)\
    \ / 2;\n        if mid == l[mid] {\n            break;\n        }\n    }\n   \
    \ l[mid] > l[min] && l[mid] > l[max]\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpm5ccirn8.rs:29:12\n\
    \   |\n29 |         if l[mid] < mid {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpm5ccirn8.rs:35:19\n   |\n35 |         if mid\
    \ == l[mid] {\n   |                   ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpm5ccirn8.rs:39:5\n   |\n39 |     l[mid] >\
    \ l[min] && l[mid] > l[max]\n   |     ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpm5ccirn8.rs:39:14\n   |\n39 |     l[mid] >\
    \ l[min] && l[mid] > l[max]\n   |              ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpm5ccirn8.rs:39:24\n   |\n39 |     l[mid] >\
    \ l[min] && l[mid] > l[max]\n   |                        ^^^^^^ slice indices\
    \ are of type `usize` or ranges of"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_val = l[0];\n    for el in l.iter().skip(1) {\n \
    \       if el > min_val {\n            min_val = el;\n        }\n    }\n    for\
    \ el in l.iter().skip(1) {\n        if el < min_val {\n            min_val = el;\n\
    \        }\n    }\n    min_val == l.first()\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj5s32reb.rs:11:17\n   |\n\
    11 |         if el > min_val {\n   |                 ^^^^^^^\n   |           \
    \      |\n   |                 expected `&isize`, found `isize`\n   |        \
    \         help: consider borrowing here: `&min_val`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj5s32reb.rs:12:23\n   |\n9  |     let mut min_val = l[0];\n\
    \   |                       ---- expected due to this value\n...\n12 |       \
    \      min_val = el;\n   |                       ^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n12 |             min_val\
    \ = *el;\n   |                       +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpj5s32reb.rs:16:17\n   |\n16 |         if el < min_val {\n   |      \
    \           ^^^^^^^\n   |                 |\n   |                 expected `&isize`,\
    \ found `isize`\n   |                 help: consider borrowing here: `&min_val`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpj5s32reb.rs:17:23\n   |\n9  |\
    \     let mut min_val = l[0];\n   |                       ---- expected due to\
    \ this value\n...\n17 |             min_val = el;\n   |                      \
    \ ^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n17 |             min_val = *el;\n   |                       +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpj5s32reb.rs:20:16\n   |\n20 |\
    \     min_val == l.first()\n   |                ^^^^^^^^^ expected `isize`, found\
    \ enum `Option`\n   |\n   = note: expected type `isize`\n              found enum\
    \ `Option<&isize>`\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // if elements are all same, all elements should follow each\
    \ other\n    if l.iter().all(|&x| *x == 0) {\n        return true;\n    }\n\n\
    \    // check if every element is smaller than the last element\n    for x in\
    \ l.iter().rs() {\n        if *x > *l.last() {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmplq28p_vs.rs:10:26\n\
    \   |\n10 |     if l.iter().all(|&x| *x == 0) {\n   |                        \
    \  ^^\n\nerror[E0599]: no method named `rs` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmplq28p_vs.rs:15:23\n   |\n15 |     for x\
    \ in l.iter().rs() {\n   |                       ^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror[E0614]: type `Option<&isize>` cannot be dereferenced\n  -->\
    \ /tmp/tmplq28p_vs.rs:16:17\n   |\n16 |         if *x > *l.last() {\n   |    \
    \             ^^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0599, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|x| x <= l.iter().rev().next().unwrap())\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1dxrt2s7.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut a = l.iter().min();\n    let mut b = l.iter().max();\n\
    \    while a.is_some() && b.is_some() {\n        if *a > *b {\n            b.next();\n\
    \        } else if *a < *b {\n            a.next();\n        } else {\n      \
    \      return false;\n        }\n    }\n    a.is_none() || b.is_none()\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `Option<&isize>` cannot be dereferenced\n  --> /tmp/tmp9bis6e68.rs:12:12\n\
    \   |\n12 |         if *a > *b {\n   |            ^^\n\nerror[E0614]: type `Option<&isize>`\
    \ cannot be dereferenced\n  --> /tmp/tmp9bis6e68.rs:12:17\n   |\n12 |        \
    \ if *a > *b {\n   |                 ^^\n\nerror[E0599]: no method named `next`\
    \ found for enum `Option` in the current scope\n  --> /tmp/tmp9bis6e68.rs:13:15\n\
    \   |\n13 |             b.next();\n   |               ^^^^ method not found in\
    \ `Option<&isize>`\n\nerror[E0614]: type `Option<&isize>` cannot be dereferenced\n\
    \  --> /tmp/tmp9bis6e68.rs:14:19\n   |\n14 |         } else if *a < *b {\n   |\
    \                   ^^\n\nerror[E0614]: type `Option<&isize>` cannot be dereferenced\n\
    \  --> /tmp/tmp9bis6e68.rs:14:24\n   |\n14 |         } else if *a < *b {\n   |\
    \                        ^^\n\nerror[E0599]: no method named `next` found for\
    \ enum `Option` in the current scope\n  --> /tmp/tmp9bis6e68.rs:15:15\n   |\n\
    15 |             a.next();\n   |               ^^^^ method not found in `Option<&isize>`\n\
    \nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0614.\nFor more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut prev: isize = 0;\n    for x in l.iter() {\n        match\
    \ prev {\n            0 => prev = x,\n            x => if x < prev {\n       \
    \         true\n            } else {\n                false\n            }\n \
    \       }\n    }\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb07i2vg2.rs:12:25\n   |\n\
    9  |     let mut prev: isize = 0;\n   |                   ----- expected due to\
    \ this type\n...\n12 |             0 => prev = x,\n   |                      \
    \   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n12 |             0 => prev = *x,\n   |                       \
    \  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb07i2vg2.rs:14:17\n   |\n\
    13 |               x => if x < prev {\n   |  __________________-\n14 | |     \
    \            true\n   | |                 ^^^^ expected `()`, found `bool`\n15\
    \ | |             } else {\n16 | |                 false\n17 | |             }\n\
    \   | |_____________- expected this to be `()`\n   |\nhelp: you might have meant\
    \ to return this value\n   |\n14 |                 return true;\n   |        \
    \         ++++++     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb07i2vg2.rs:16:17\n\
    \   |\n13 |               x => if x < prev {\n   |  __________________-\n14 |\
    \ |                 true\n15 | |             } else {\n16 | |                \
    \ false\n   | |                 ^^^^^ expected `()`, found `bool`\n17 | |    \
    \         }\n   | |_____________- expected this to be `()`\n   |\nhelp: you might\
    \ have meant to return this value\n   |\n16 |                 return false;\n\
    \   |                 ++++++      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb07i2vg2.rs:10:5\n\
    \   |\n8  |   fn monotonic(l: Vec<isize>) -> bool {\n   |                    \
    \              ---- expected `bool` because of return type\n9  |       let mut\
    \ prev: isize = 0;\n10 | /     for x in l.iter() {\n11 | |         match prev\
    \ {\n12 | |             0 => prev = x,\n13 | |             x => if x < prev {\n\
    ...  |\n18 | |         }\n19 | |     }\n   | |_____^ expected `bool`, found `()`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() == 0 {\n        return true;\n    }\n    let mut i\
    \ = 0;\n    for e in l.iter() {\n        if e < l[i as usize] {\n            i\
    \ += 1;\n        } else if e > l[i as usize] {\n            i -= 1;\n        }\
    \ else {\n            break;\n        }\n    }\n    i != l.len()\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe71hxc34.rs:14:16\n   |\n\
    14 |         if e < l[i as usize] {\n   |                ^^^^^^^^^^^^^\n   | \
    \               |\n   |                expected `&isize`, found `isize`\n   |\
    \                help: consider borrowing here: `&l[i as usize]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe71hxc34.rs:16:23\n   |\n16 |         } else\
    \ if e > l[i as usize] {\n   |                       ^^^^^^^^^^^^^\n   |     \
    \                  |\n   |                       expected `&isize`, found `isize`\n\
    \   |                       help: consider borrowing here: `&l[i as usize]`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.to_vec();\n    l.sort();\n    for (i, e) in l.iter().enumerate()\
    \ {\n        if e < l.last() {\n            return false;\n        }\n       \
    \ if e > l.first() {\n            return true;\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4idc1txf.rs:12:16\n   |\n\
    12 |         if e < l.last() {\n   |                ^^^^^^^^ expected `&isize`,\
    \ found enum `Option`\n   |\n   = note: expected reference `&isize`\n        \
    \           found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp4idc1txf.rs:15:16\n   |\n15 |         if e > l.first() {\n   |     \
    \           ^^^^^^^^^ expected `&isize`, found enum `Option`\n   |\n   = note:\
    \ expected reference `&isize`\n                   found enum `Option<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // Check if there are duplicates\n    let mut seen: Vec<usize>\
    \ = l.iter().collect();\n    for i in 0..seen.len() {\n        let j = seen.iter().position(|&x|\
    \ x == i).unwrap();\n        if j == i {\n            return false;\n        }\n\
    \        seen[j] -= 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate =\
    \ monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<usize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmp0aeht0at.rs:10:41\n     |\n\
    10   |     let mut seen: Vec<usize> = l.iter().collect();\n     |            \
    \                             ^^^^^^^ value of type `Vec<usize>` cannot be built\
    \ from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<usize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|x| x >= l.iter().cloned().collect::<Vec<usize>>().min())\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<usize>` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmpxd__tm8z.rs:9:45\n     |\n9 \
    \   |     l.iter().all(|x| x >= l.iter().cloned().collect::<Vec<usize>>().min())\n\
    \     |                                             ^^^^^^^ value of type `Vec<usize>`\
    \ cannot be built from `std::iter::Iterator<Item=isize>`\n     |\n     = help:\
    \ the trait `FromIterator<isize>` is not implemented for `Vec<usize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0061]: this function takes 1 argument but\
    \ 0 arguments were supplied\n   --> /tmp/tmpxd__tm8z.rs:9:69\n    |\n9   |   \
    \  l.iter().all(|x| x >= l.iter().cloned().collect::<Vec<usize>>().min())\n  \
    \  |                                                                     ^^^-\
    \ supplied 0 arguments\n    |                                                \
    \                     |\n    |                                               \
    \                      expected 1 argument\n    |\nnote: associated function defined\
    \ here\n\nerror[E0308]: mismatched types\n --> /tmp/tmpxd__tm8z.rs:9:27\n  |\n\
    9 |     l.iter().all(|x| x >= l.iter().cloned().collect::<Vec<usize>>().min())\n\
    \  |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&isize`, found struct `Vec`\n  |\n  = note: expected reference `&isize`\n\
    \                found struct `Vec<usize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter().cloned();\n    l.sort();\n    for i in l.windows(2)\
    \ {\n        if *i.first() > *i.last() {\n            return false;\n        }\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort` found for struct `Cloned` in the current\
    \ scope\n  --> /tmp/tmpgiemx697.rs:10:7\n   |\n10 |     l.sort();\n   |      \
    \ ^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror[E0599]:\
    \ no method named `windows` found for struct `Cloned` in the current scope\n \
    \ --> /tmp/tmpgiemx697.rs:11:16\n   |\n11 |     for i in l.windows(2) {\n   |\
    \                ^^^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut last = 0;\n    for i in l.iter() {\n        let next\
    \ = last + i;\n        if next < last {\n            return true;\n        }\n\
    \        last = next;\n    }\n    false\n}\n\nfn main() {\n    let candidate =\
    \ monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6rt8q50i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let len = l.len();\n    if len < 2 {\n        return true;\n\
    \    }\n    let mut cmp = -1;\n    for i in 0..len - 1 {\n        if cmp != i\
    \ {\n            cmp = i;\n        }\n        if l[i] > l[i + 1] {\n         \
    \   return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp70qbbddz.rs:13:19\n\
    \   |\n13 |     let mut cmp = -1;\n   |                   ^^ the trait `Neg` is\
    \ not implemented for `usize`\n   |\n   = help: the following other types implement\
    \ trait `Neg`:\n             &f32\n             &f64\n             &i128\n   \
    \          &i16\n             &i32\n             &i64\n             &i8\n    \
    \         &isize\n           and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min = l[0];\n    for &x in l.iter() {\n        if min\
    \ > x {\n            min = x;\n        }\n    }\n    let mut max = l[0];\n   \
    \ for &x in l.iter() {\n        if max < x {\n            max = x;\n        }\n\
    \    }\n    (min < max && l.iter().all(|&x| x < min)) || (max > min && l.iter().all(|&x|\
    \ x > max))\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp31dalb_f.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.len() > 0 && l.iter().all(|x| x.is_monotonic())\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_monotonic` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmpxd0a1mcy.rs:9:39\n  |\n9 |     l.len() >\
    \ 0 && l.iter().all(|x| x.is_monotonic())\n  |                               \
    \        ^^^^^^^^^^^^ method not found in `&isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // If length is 1 then return True\n    if l.len() == 1 {\n \
    \       return true;\n    }\n    // If length is not 1 then sort it and then compare\
    \ the 2 sorted lists.\n    l.sort_unstable();\n    l.iter().zip(l.iter().cloned()).all(|(x,\
    \ y)| x < y)\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprj75hspk.rs:15:54\n   |\n\
    15 |     l.iter().zip(l.iter().cloned()).all(|(x, y)| x < y)\n   |           \
    \                                           ^\n   |                          \
    \                            |\n   |                                         \
    \             expected `&isize`, found `isize`\n   |                         \
    \                             help: consider borrowing here: `&y`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    for i in l.iter().rev() {\n        if i > i.prev() {\n      \
    \      return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `prev` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmpkgidf792.rs:10:18\n   |\n10 |         if i > i.prev()\
    \ {\n   |                  ^^^^ method not found in `&isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut v = l.iter().cloned().collect::<Vec<isize>>();\n    std::cmp::Ordering::Greater(v[0])\
    \ || std::cmp::Ordering::Less(v[0])\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0618]: expected function, found enum variant `std::cmp::Ordering::Greater`\n\
    \  --> /tmp/tmp0ptth68p.rs:10:5\n   |\n10 |     std::cmp::Ordering::Greater(v[0])\
    \ || std::cmp::Ordering::Less(v[0])\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^------\n\
    \   |     |\n   |     call expression requires function\n   |\nhelp: `std::cmp::Ordering::Greater`\
    \ is a unit variant, you need to write it without the parentheses\n   |\n10 -\
    \     std::cmp::Ordering::Greater(v[0]) || std::cmp::Ordering::Less(v[0])\n10\
    \ +     std::cmp::Ordering::Greater || std::cmp::Ordering::Less(v[0])\n   | \n\
    \nerror[E0618]: expected function, found enum variant `std::cmp::Ordering::Less`\n\
    \  --> /tmp/tmp0ptth68p.rs:10:42\n   |\n10 |     std::cmp::Ordering::Greater(v[0])\
    \ || std::cmp::Ordering::Less(v[0])\n   |                                    \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^------\n   |                                  \
    \        |\n   |                                          call expression requires\
    \ function\n   |\nhelp: `std::cmp::Ordering::Less` is a unit variant, you need\
    \ to write it without the parentheses\n   |\n10 -     std::cmp::Ordering::Greater(v[0])\
    \ || std::cmp::Ordering::Less(v[0])\n10 +     std::cmp::Ordering::Greater(v[0])\
    \ || std::cmp::Ordering::Less\n   | \n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0618`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut index = 0;\n    let mut last_value = std::cmp::min(&l[0],\
    \ &l[1]);\n    while index < l.len() {\n        let value = &l[index];\n     \
    \   if value == last_value {\n            index += 1;\n        } else {\n    \
    \        if value > last_value {\n                return false;\n            }\
    \ else {\n                last_value = value;\n                index += 1;\n \
    \           }\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2v3su5_q.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min_val = std::isize::MAX;\n    let mut max_val = std::isize::MIN;\n\
    \    for i in l {\n        if i < min_val {\n            min_val = i;\n      \
    \  }\n        if i > max_val {\n            max_val = i;\n        }\n    }\n \
    \   let diff = max_val - min_val;\n    if diff < 0 {\n        return false;\n\
    \    }\n    if diff == 0 {\n        return true;\n    }\n    for i in l {\n  \
    \      if i < min_val {\n            return false;\n        }\n        if i >\
    \ max_val {\n            return false;\n        }\n    }\n    let mut diff2 =\
    \ max_val - min_val;\n    for i in l {\n        if i < min_val {\n           \
    \ if diff2 < 0 {\n                return false;\n            }\n        }\n  \
    \      if i > max_val {\n            if diff2 < 0 {\n                return false;\n\
    \            }\n        }\n        diff2 -= i;\n    }\n    let mut diff3 = max_val\
    \ - min_val;\n    for i in l {\n        if i < min_val {\n            if diff3\
    \ < 0 {\n                return false;\n            }\n        }\n        if i\
    \ > max_val {\n            if diff3 < 0 {\n                return false;\n   \
    \         }\n        }\n        diff3 -= i;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmp0v2ua3k6.rs:26:14\n\
    \    |\n8   | fn monotonic(l: Vec<isize>) -> bool {\n    |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n...\n11  |     for i in l {\n    |              - `l` moved due to this\
    \ implicit call to `.into_iter()`\n...\n26  |     for i in l {\n    |        \
    \      ^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `l`\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n11\
    \  |     for i in &l {\n    |              +\n\nerror[E0382]: use of moved value:\
    \ `l`\n  --> /tmp/tmp0v2ua3k6.rs:35:14\n   |\n8  | fn monotonic(l: Vec<isize>)\
    \ -> bool {\n   |              - move occurs because `l` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n...\n26 |     for i in l {\n   |\
    \              - `l` moved due to this implicit call to `.into_iter()`\n...\n\
    35 |     for i in l {\n   |              ^ value used here after move\n   |\n\
    help: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n   |\n26 |     for i in &l {\n   |              +\n\nerror[E0382]:\
    \ use of moved value: `l`\n  --> /tmp/tmp0v2ua3k6.rs:49:14\n   |\n8  | fn monotonic(l:\
    \ Vec<isize>) -> bool {\n   |              - move occurs because `l` has type\
    \ `Vec<isize>`, which does not implement the `Copy` trait\n...\n35 |     for i\
    \ in l {\n   |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n49 |     for i in l {\n   |              ^ value used here after move\n \
    \  |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid\
    \ moving into the `for` loop\n   |\n35 |     for i in &l {\n   |             \
    \ +\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut is_increasing = true;\n\n    for i in l.iter() {\n  \
    \      if *i <= *i + 1 {\n            is_increasing = false;\n            break;\n\
    \        }\n    }\n    is_increasing && is_decreasing(l.iter())\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_decreasing` in this scope\n  -->\
    \ /tmp/tmp_a2ql9nm.rs:17:22\n   |\n17 |     is_increasing && is_decreasing(l.iter())\n\
    \   |                      ^^^^^^^^^^^^^ help: a local variable with a similar\
    \ name exists: `is_increasing`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min = l[0];\n    let mut max = l[0];\n\n    for i in\
    \ 1..l.len() {\n        if l[i] < min {\n            min = l[i];\n        }\n\
    \        if l[i] > max {\n            max = l[i];\n        }\n    }\n    max <=\
    \ min\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfcqkigu5.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return true\n    }\n    for i in l.iter().rev()\
    \ {\n        if *i == 0 {\n            continue\n        }\n        if *i <= 0\
    \ {\n            return false\n        }\n        if *i > 0 {\n            return\
    \ true\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjqu5jprw.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j\
    \ {\n        let mut k = i;\n        while k > 0 && l[k] < l[k-1] {\n        \
    \    k -= 1;\n        }\n        let mut l = i;\n        while l < j && l++ >\
    \ l[k] {\n            k -= 1;\n        }\n        if k != i {\n            j =\
    \ k;\n        } else {\n            i += 1;\n        }\n    }\n    i == j\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpejsks3f_.rs:17:25\n\
    \   |\n17 |         while l < j && l++ > l[k] {\n   |         -----          \
    \ ^^ not a valid postfix operator\n   |         |\n   |         while parsing\
    \ the condition of this `while` expression\n   |\nhelp: use `+= 1` instead\n \
    \  |\n17 |         while l < j && { let tmp = l; l += 1; tmp } > l[k] {\n   |\
    \                        +++++++++++  ~~~~~~~~~~~~~~~\n17 -         while l <\
    \ j && l++ > l[k] {\n17 +         while l < j && l += 1 > l[k] {\n   | \n\nerror:\
    \ aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut is_increasing = true;\n    let mut is_decreasing = true;\n\
    \    for el in l.iter() {\n        if is_increasing && el > 0 {\n            is_increasing\
    \ = false;\n        }\n        if is_decreasing && el < 0 {\n            is_decreasing\
    \ = false;\n        }\n    }\n    is_increasing || is_decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpryirs7aw.rs:12:34\n   |\n\
    12 |         if is_increasing && el > 0 {\n   |                              \
    \    ^\n   |                                  |\n   |                        \
    \          expected `&isize`, found integer\n   |                            \
    \      help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpryirs7aw.rs:15:34\n   |\n15 |         if is_decreasing && el <\
    \ 0 {\n   |                                  ^\n   |                         \
    \         |\n   |                                  expected `&isize`, found integer\n\
    \   |                                  help: consider borrowing here: `&0`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(true, |a, e| a && e >= *a.clone() || a || (*a.clone()\
    \ >= e))\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `bool` cannot be dereferenced\n --> /tmp/tmp8w_jawxi.rs:9:42\n\
    \  |\n9 |     l.iter().fold(true, |a, e| a && e >= *a.clone() || a || (*a.clone()\
    \ >= e))\n  |                                          ^^^^^^^^^^\n\nerror[E0614]:\
    \ type `bool` cannot be dereferenced\n --> /tmp/tmp8w_jawxi.rs:9:62\n  |\n9 |\
    \     l.iter().fold(true, |a, e| a && e >= *a.clone() || a || (*a.clone() >= e))\n\
    \  |                                                              ^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut counter = l.iter().cloned().count();\n    if counter\
    \ == 1 {\n        counter = 0;\n    }\n    for _ in 0..(counter / 2) {\n     \
    \   if *l.iter().max() < *l.iter().min() {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `Option<&isize>` cannot be dereferenced\n  --> /tmp/tmpsm7xqngo.rs:14:12\n\
    \   |\n14 |         if *l.iter().max() < *l.iter().min() {\n   |            ^^^^^^^^^^^^^^^\n\
    \nerror[E0614]: type `Option<&isize>` cannot be dereferenced\n  --> /tmp/tmpsm7xqngo.rs:14:30\n\
    \   |\n14 |         if *l.iter().max() < *l.iter().min() {\n   |             \
    \                 ^^^^^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n\n    let mut\
    \ l1 = l.clone();\n    l1.sort();\n\n    let mut l2 = l.clone();\n    l2.sort();\n\
    \n    let mut i = 1;\n    while i <= l1.len() && i <= l2.len() {\n        if l1[i]\
    \ != l2[i] {\n            return false;\n        }\n\n        i += 1;\n    }\n\
    \n    i == l1.len() || i == l2.len()\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 4 but the index\
    \ is 4', /tmp/tmpf1rje9j4.rs:21:12\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().cloned().fold1(|a, x| a.cmp(x).unwrap() > 0, false)\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `fold1` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpd1w_k19t.rs:9:23\n  |\n9 |     l.iter().cloned().fold1(|a,\
    \ x| a.cmp(x).unwrap() > 0, false)\n  |                       ^^^^^ method not\
    \ found in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter().cloned();\n    let mut i = 0;\n    let mut\
    \ min_value = l.next().unwrap();\n    let mut max_value = min_value;\n    loop\
    \ {\n        i += 1\n        if i == l.len() {\n            if max_value < min_value\
    \ {\n                return false;\n            }\n            return true;\n\
    \        }\n        let mut value = l.next().unwrap();\n        if value > max_value\
    \ {\n            max_value = value;\n        }\n        if value < min_value {\n\
    \            min_value = value;\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp9nbzpnmg.rs:14:15\n\
    \   |\n14 |         i += 1\n   |               ^ help: add `;` here\n15 |    \
    \     if i == l.len() {\n   |         -- unexpected token\n\nerror: aborting due\
    \ to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut last = l;\n    let mut min = last.iter().min();\n   \
    \ for &x in l.iter().rev() {\n        let y = x - min;\n        if *y < min {\n\
    \            min = y;\n            max = x;\n        }\n    }\n    last <= min\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `max` in this scope\n  --> /tmp/tmpztqkbpab.rs:15:13\n\
    \   |\n15 |             max = x;\n   |             ^^^ not found in this scope\n\
    \   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n\
    \   |\n\nerror[E0277]: cannot subtract `Option<&isize>` from `isize`\n  --> /tmp/tmpztqkbpab.rs:12:19\n\
    \   |\n12 |         let y = x - min;\n   |                   ^ no implementation\
    \ for `isize - Option<&isize>`\n   |\n   = help: the trait `Sub<Option<&isize>>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpztqkbpab.rs:18:13\n\
    \   |\n18 |     last <= min\n   |             ^^^ expected struct `Vec`, found\
    \ enum `Option`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \   found enum `Option<&isize>`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut curr = l[0];\n    loop {\n        let mut flag = true;\n\
    \        for &curr in &l {\n            if curr > curr {\n                flag\
    \ = false;\n                break;\n            }\n        }\n        if flag\
    \ {\n            break;\n        }\n        curr = l[0];\n    }\n    flag == true\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `flag` in this scope\n  --> /tmp/tmpw1maj0wl.rs:23:5\n\
    \   |\n23 |     flag == true\n   |     ^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|&v| {\n        v.is_nonempty() &&\n           \
    \ v.iter().all(|&x| x.is_nonempty() && *x <= v)\n    })\n}\n\nfn main() {\n  \
    \  let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_nonempty` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp6mahhblj.rs:10:11\n   |\n10 |         v.is_nonempty()\
    \ &&\n   |           ^^^^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmp6mahhblj.rs:11:15\n\
    \   |\n11 |             v.iter().all(|&x| x.is_nonempty() && *x <= v)\n   |  \
    \             ^^^^ method not found in `isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut prev = l[0];\n    for &el in l {\n        if el < prev\
    \ {\n            return false;\n        }\n        prev = el;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfg4rkp24.rs:10:9\n   |\n\
    10 |     for &el in l {\n   |         ^^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `el`\n   |\n   = note:  \
    \ expected type `isize`\n           found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return false;\n    }\n    l.iter().fold(false,\
    \ |result, elem| {\n        let prev = &l[result - 1];\n        result || elem\
    \ > prev\n    })\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `{integer}` from `bool`\n  --> /tmp/tmpk9_a6boh.rs:13:30\n\
    \   |\n13 |         let prev = &l[result - 1];\n   |                       ------\
    \ ^ - {integer}\n   |                       |\n   |                       bool\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 1 {\n        return l.len() == 1 && l.is_empty();\n\
    \    }\n    let mut l = l;\n    let mut i = 0;\n    while i < l.len() - 1 {\n\
    \        if l[i] <= l[i + 1] {\n            i += 1;\n        } else {\n      \
    \      let tmp = l[i];\n            i += 1;\n            l.swap(i, tmp.clone());\n\
    \        }\n    }\n    l.is_empty()\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxu4c77fo.rs:20:23\n   |\n\
    20 |             l.swap(i, tmp.clone());\n   |                       ^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n20 |           \
    \  l.swap(i, tmp.clone().try_into().unwrap());\n   |                         \
    \         ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // From Wikipedia article on Monotonicity and non-decreasing\
    \ lists:\n    //   A list X is monotonically increasing if X is not empty and\
    \ all of X[0]<X[1],\n    //   and monotonically decreasing if X is not empty and\
    \ all of X[1]>X[0].\n    // So let's check if all elements are either increasing\
    \ or decreasing and\n    // the list is not empty.\n    if l.len() == 1 {\n  \
    \      return false;\n    }\n    l.iter().all(|v| v < l[0])\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfutyh4o6.rs:17:26\n   |\n\
    17 |     l.iter().all(|v| v < l[0])\n   |                          ^^^^\n   |\
    \                          |\n   |                          expected `&isize`,\
    \ found `isize`\n   |                          help: consider borrowing here:\
    \ `&l[0]`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i1 = l.iter().max();\n    let mut i2 = l.iter().min();\n\
    \    let mut i3 = l.iter().cmp(&i2).unwrap_or(0);\n    while i3 > 0 {\n      \
    \  i2 = i3;\n        i3 = l.iter().cmp(&i2).unwrap_or(0);\n    }\n    i1 == i2\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<&Option<&isize> as IntoIterator>::Item\
    \ == &isize`\n    --> /tmp/tmphq3fmsv_.rs:11:27\n     |\n11   |     let mut i3\
    \ = l.iter().cmp(&i2).unwrap_or(0);\n     |                           ^^^ expected\
    \ `isize`, found `&isize`\n     |\n     = note: expected reference `&isize`\n\
    \                found reference `&&isize`\nnote: required by a bound in `std::iter::Iterator::cmp`\n\
    \nerror[E0599]: no method named `unwrap_or` found for enum `std::cmp::Ordering`\
    \ in the current scope\n  --> /tmp/tmphq3fmsv_.rs:11:36\n   |\n11 |     let mut\
    \ i3 = l.iter().cmp(&i2).unwrap_or(0);\n   |                                 \
    \   ^^^^^^^^^ method not found in `std::cmp::Ordering`\n\nerror[E0277]: can't\
    \ compare `Option<&isize>` with `{integer}`\n  --> /tmp/tmphq3fmsv_.rs:12:14\n\
    \   |\n12 |     while i3 > 0 {\n   |              ^ no implementation for `Option<&isize>\
    \ < {integer}` and `Option<&isize> > {integer}`\n   |\n   = help: the trait `PartialOrd<{integer}>`\
    \ is not implemented for `Option<&isize>`\n   = help: the trait `PartialOrd` is\
    \ implemented for `Option<T>`\n\nerror[E0271]: type mismatch resolving `<&Option<&isize>\
    \ as IntoIterator>::Item == &isize`\n    --> /tmp/tmphq3fmsv_.rs:14:23\n     |\n\
    14   |         i3 = l.iter().cmp(&i2).unwrap_or(0);\n     |                  \
    \     ^^^ expected `isize`, found `&isize`\n     |\n     = note: expected reference\
    \ `&isize`\n                found reference `&&isize`\nnote: required by a bound\
    \ in `std::iter::Iterator::cmp`\n\nerror[E0599]: no method named `unwrap_or` found\
    \ for enum `std::cmp::Ordering` in the current scope\n  --> /tmp/tmphq3fmsv_.rs:14:32\n\
    \   |\n14 |         i3 = l.iter().cmp(&i2).unwrap_or(0);\n   |               \
    \                 ^^^^^^^^^ method not found in `std::cmp::Ordering`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0277, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut min = l[0];\n    let mut max = l[0];\n    for i in l.iter().rev()\
    \ {\n        if *i <= max {\n            max = *i;\n        } else {\n       \
    \     if *i < *min {\n                min = *i;\n            }\n        }\n  \
    \  }\n    !(*min > *max)\n}\n\nfn main() {\n    let candidate = monotonic;\n \
    \   assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp0sk4yy03.rs:15:21\n\
    \   |\n15 |             if *i < *min {\n   |                     ^^^^\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmp0sk4yy03.rs:20:7\n   |\n\
    20 |     !(*min > *max)\n   |       ^^^^\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n  --> /tmp/tmp0sk4yy03.rs:20:14\n   |\n20 |     !(*min > *max)\n\
    \   |              ^^^^\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(true, |a, x| a && x.is_monotonic())\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_monotonic` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmp6_d8esld.rs:9:39\n  |\n9 |     l.iter().fold(true,\
    \ |a, x| a && x.is_monotonic())\n  |                                       ^^^^^^^^^^^^\
    \ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|&x| x <= l.iter().rev().next().unwrap())\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe6rz_2wh.rs:9:28\n  |\n9 |\
    \     l.iter().all(|&x| x <= l.iter().rev().next().unwrap())\n  |            \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |     l.iter().all(|&x|\
    \ x <= *l.iter().rev().next().unwrap())\n  |                            +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut max = l[0];\n    for i in l.iter().rev() {\n        if\
    \ *i <= max {\n            return false;\n        }\n        max = i;\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx7jqbpl1.rs:14:15\n   |\n\
    9  |     let mut max = l[0];\n   |                   ---- expected due to this\
    \ value\n...\n14 |         max = i;\n   |               ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |        \
    \ max = *i;\n   |               +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|&i| i >= 0)\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplyesdjxf.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut is_monotonic = true;\n    let mut prev_value = std::i32::MIN;\n\
    \    for value in l {\n        if prev_value == value {\n            is_monotonic\
    \ = false;\n        } else if value > prev_value {\n            is_monotonic =\
    \ true;\n        }\n        prev_value = value;\n    }\n    is_monotonic\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgm7jzari.rs:12:26\n   |\n\
    12 |         if prev_value == value {\n   |                          ^^^^^ expected\
    \ `i32`, found `isize`\n   |\nhelp: you can convert an `isize` to an `i32` and\
    \ panic if the converted value doesn't fit\n   |\n12 |         if prev_value ==\
    \ value.try_into().unwrap() {\n   |                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgm7jzari.rs:14:27\n   |\n14 |\
    \         } else if value > prev_value {\n   |                           ^^^^^^^^^^\
    \ expected `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n14 |         } else if value\
    \ > prev_value.try_into().unwrap() {\n   |                                   \
    \  ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgm7jzari.rs:17:22\n\
    \   |\n10 |     let mut prev_value = std::i32::MIN;\n   |                    \
    \      ------------- expected due to this value\n...\n17 |         prev_value\
    \ = value;\n   |                      ^^^^^ expected `i32`, found `isize`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.len() > 1 &&\n    l.iter().all(|x| l.iter().all(|y| x <= y))\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbqh11c7k.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n    let mut m\
    \ = vec![l.iter().min().unwrap()];\n    let mut i = 1;\n    for &x in l {\n  \
    \      if x > m[0] {\n            m[0] = x;\n        } else {\n            m[i]\
    \ = x;\n        }\n        i += 1;\n    }\n    if i & 1 == 0 {\n        return\
    \ true;\n    }\n    for i in (0..i).rev() {\n        if i > m.len() - 1 {\n  \
    \          break;\n        }\n        if m[i] < m[i + 1] {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc5yyn74_.rs:14:9\n   |\n\
    14 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 1usize;\n    loop {\n        if l[i - 1] <= l[i]\
    \ {\n            return false;\n        }\n        i += 1;\n    }\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9m0_u373.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut last_i = 0;\n    for x in l.iter() {\n        let last_x\
    \ = l.last();\n        if x != last_x {\n            return false;\n        }\n\
    \        last_i = x;\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `Option<&isize>`\n  --> /tmp/tmpvcebo1o4.rs:12:14\n\
    \   |\n12 |         if x != last_x {\n   |              ^^ no implementation for\
    \ `&isize == Option<&isize>`\n   |\n   = help: the trait `PartialEq<Option<&isize>>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpvcebo1o4.rs:15:18\n   |\n9  |     let mut last_i = 0;\n   |        \
    \              - expected due to this value\n...\n15 |         last_i = x;\n \
    \  |                  ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n15 |         last_i = *x;\n   |            \
    \      +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().enumerate().all(|(i, e2)| {\n        assert!(i == e2.0);\n\
    \        let prev = e2.1;\n        prev <= i\n    })\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0609]: no field `0` on type `&isize`\n  --> /tmp/tmprvc043w4.rs:10:25\n\
    \   |\n10 |         assert!(i == e2.0);\n   |                         ^\n\nerror[E0609]:\
    \ no field `1` on type `&isize`\n  --> /tmp/tmprvc043w4.rs:11:23\n   |\n11 | \
    \        let prev = e2.1;\n   |                       ^\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0609`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(true, |prev, i| prev && i.is_positive())\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkjqinkcr.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|v| v <= l.iter().max())\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpaulpla_a.rs:9:27\n  |\n9 |\
    \     l.iter().all(|v| v <= l.iter().max())\n  |                           ^^^^^^^^^^^^^^\
    \ expected `&isize`, found enum `Option`\n  |\n  = note: expected reference `&isize`\n\
    \                  found enum `Option<&isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|&a| a < l.iter().skip(1).min().unwrap())\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb3tvb1n5.rs:9:27\n  |\n9 |\
    \     l.iter().all(|&a| a < l.iter().skip(1).min().unwrap())\n  |            \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |     l.iter().all(|&a|\
    \ a < *l.iter().skip(1).min().unwrap())\n  |                           +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = l.iter().cmp::<usize>().unwrap();\n    for i in i\
    \ {\n        if i.next() > i {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `usize` is not an iterator\n    --> /tmp/tmpza1akda7.rs:9:26\n\
    \     |\n9    |     let mut i = l.iter().cmp::<usize>().unwrap();\n     |    \
    \                      ^^^ `usize` is not an iterator\n     |\n     = help: the\
    \ trait `Iterator` is not implemented for `usize`\n     = note: if you want to\
    \ iterate between `start` until a value `end`, use the exclusive range syntax\
    \ `start..end` or the inclusive range syntax `start..=end`\n     = note: required\
    \ because of the requirements on the impl of `IntoIterator` for `usize`\nnote:\
    \ required by a bound in `std::iter::Iterator::cmp`\n\nerror[E0061]: this function\
    \ takes 1 argument but 0 arguments were supplied\n    --> /tmp/tmpza1akda7.rs:9:26\n\
    \     |\n9    |     let mut i = l.iter().cmp::<usize>().unwrap();\n     |    \
    \                      ^^^--------- supplied 0 arguments\n     |             \
    \             |\n     |                          expected 1 argument\n     |\n\
    note: associated function defined here\n\nerror[E0599]: no method named `unwrap`\
    \ found for enum `std::cmp::Ordering` in the current scope\n --> /tmp/tmpza1akda7.rs:9:41\n\
    \  |\n9 |     let mut i = l.iter().cmp::<usize>().unwrap();\n  |             \
    \                            ^^^^^^ method not found in `std::cmp::Ordering`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = l.len();\n\
    \    while i < k {\n        match l[i] {\n            None => return false,\n\
    \            Some(l1) => match l[j] {\n                None => return l1 < l[i],\n\
    \                Some(l2) => return l1 < l2 && l2 < l[i],\n            },\n  \
    \      }\n        i += 1;\n        j += 1;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl3przhz6.rs:14:13\n   |\n\
    13 |         match l[i] {\n   |               ---- this expression has type `isize`\n\
    14 |             None => return false,\n   |             ^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl3przhz6.rs:15:13\n\
    \   |\n13 |         match l[i] {\n   |               ---- this expression has\
    \ type `isize`\n14 |             None => return false,\n15 |             Some(l1)\
    \ => match l[j] {\n   |             ^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl3przhz6.rs:16:17\n   |\n15 |\
    \             Some(l1) => match l[j] {\n   |                               ----\
    \ this expression has type `isize`\n16 |                 None => return l1 < l[i],\n\
    \   |                 ^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl3przhz6.rs:17:17\n   |\n15 |             Some(l1)\
    \ => match l[j] {\n   |                               ---- this expression has\
    \ type `isize`\n16 |                 None => return l1 < l[i],\n17 |         \
    \        Some(l2) => return l1 < l2 && l2 < l[i],\n   |                 ^^^^^^^^\
    \ expected `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n\
    \              found enum `Option<_>`\n\nwarning: unreachable statement\n  -->\
    \ /tmp/tmpl3przhz6.rs:20:9\n   |\n13 | /         match l[i] {\n14 | |        \
    \     None => return false,\n15 | |             Some(l1) => match l[j] {\n16 |\
    \ |                 None => return l1 < l[i],\n17 | |                 Some(l2)\
    \ => return l1 < l2 && l2 < l[i],\n18 | |             },\n19 | |         }\n \
    \  | |_________- any code following this `match` expression is unreachable, as\
    \ all arms diverge\n20 |           i += 1;\n   |           ^^^^^^^ unreachable\
    \ statement\n   |\n   = note: `#[warn(unreachable_code)]` on b"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.to_owned();\n    l.sort_unstable();\n    l.iter().all(|&a|\
    \ a > l.iter().rev().next().unwrap())\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdr9haion.rs:11:27\n   |\n\
    11 |     l.iter().all(|&a| a > l.iter().rev().next().unwrap())\n   |         \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |     l.iter().all(|&a|\
    \ a > *l.iter().rev().next().unwrap())\n   |                           +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n    l.sort_unstable();\n\
    \    for (i, &elt) in l.iter().enumerate() {\n        if elt != i {\n        \
    \    return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdu8l9fh2.rs:12:19\n   |\n\
    12 |         if elt != i {\n   |                   ^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n12 |         if elt != i.try_into().unwrap() {\n  \
    \ |                    ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 1 {\n        return false;\n    }\n\n    let mut\
    \ i1 = 0 as isize;\n    let mut i2 = 0 as isize;\n\n    for v in l {\n       \
    \ let mut s1 = i1 as isize;\n        let mut s2 = i2 as isize;\n\n        loop\
    \ {\n            if v < l[i1] {\n                i1 = s1;\n                s1\
    \ = i1;\n            }\n\n            if v > l[i2] {\n                i2 = s2;\n\
    \                s2 = i2;\n            }\n\n            if v == l[i1] && v ==\
    \ l[i2] {\n                return false;\n            }\n        }\n    }\n\n\
    \    if i1 > i2 {\n        return true;\n    }\n\n    if i1 < i2 {\n        return\
    \ false;\n    }\n\n    // i1 == i2 -> all elements are equal\n    for v in l {\n\
    \        if v != l[i1] {\n            return false;\n        }\n    }\n\n    //\
    \ i1 == 1 -> all elements are equal\n    if l.len() == 1 {\n        return true;\n\
    \    }\n\n    // i1 == 0 -> all elements are equal\n    if l.len() == 0 {\n  \
    \      return true;\n    }\n\n    // i2 == 1 -> all elements are equal\n    if\
    \ l.len() == 1 {\n        return false;\n    }\n\n    // i2 == 0 -> all elements\
    \ are equal\n    if l.len() == 0 {\n        return false;\n    }\n\n    // i1\
    \ & i2 == 0 -> i1 < i2 -> l[i1] < l[i2] -> monotonic\n    // i1 & i2 != 0 -> i1\
    \ > i2 -> l[i1] > l[i2] -> monotonic\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpuyfge5iy.rs:21:20\n\
    \   |\n21 |             if v < l[i1] {\n   |                    ^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpuyfge5iy.rs:26:20\n   |\n26 |            \
    \ if v > l[i2] {\n   |                    ^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpuyfge5iy.rs:31:21\n   |\n31 |            \
    \ if v == l[i1] && v == l[i2] {\n   |                     ^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpuyfge5iy.rs:31:35\n   |\n31 |            \
    \ if v == l[i1] && v == l[i2] {\n   |                                   ^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpuyfge5iy.rs:47:17\n\
    \   |\n47 |         if v != l[i1] {\n   |                 ^^^^^ slice indices\
    \ are o"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().all(|&x| x <= l.iter().last())\n}\n\nfn main() {\n \
    \   let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnwseu2up.rs:9:28\n  |\n9 |\
    \     l.iter().all(|&x| x <= l.iter().last())\n  |                           \
    \ ^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n  |\n  = note: expected\
    \ type `isize`\n             found enum `Option<&isize>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    // Find first increasing element\n    let mut i = 1;\n    let\
    \ mut min_value = l[0];\n    loop {\n        if l[i] < min_value {\n         \
    \   min_value = l[i];\n        }\n        i += 1;\n        if i >= l.len() {\n\
    \            break;\n        }\n    }\n    i < l.len() && l[i] < min_value\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7m6rnkbk.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() == 1 {\n        l.iter().take(2).all(|&x| x <= l.iter().next().unwrap())\n\
    \    } else {\n        let mut m = l.iter().cloned().count();\n        loop {\n\
    \            if m.is_zero() {\n                return false;\n            }\n\
    \            for v in m {\n                if l.iter().any(|&x| x > v) {\n   \
    \                 m = m - v;\n                }\n            }\n        }\n  \
    \  }\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5gxaxjv9.rs:10:40\n   |\n\
    10 |         l.iter().take(2).all(|&x| x <= l.iter().next().unwrap())\n   |  \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |  \
    \       l.iter().take(2).all(|&x| x <= *l.iter().next().unwrap())\n   |      \
    \                                  +\n\nerror[E0599]: no method named `is_zero`\
    \ found for type `usize` in the current scope\n  --> /tmp/tmp5gxaxjv9.rs:14:18\n\
    \   |\n14 |             if m.is_zero() {\n   |                  ^^^^^^^ method\
    \ not found in `usize`\n\nerror[E0277]: `usize` is not an iterator\n  --> /tmp/tmp5gxaxjv9.rs:17:22\n\
    \   |\n17 |             for v in m {\n   |                      ^ `usize` is not\
    \ an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `usize`\n\
    \   = note: if you want to iterate between `start` until a value `end`, use the\
    \ exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5gxaxjv9.rs:19:29\n\
    \   |\n19 |                     m = m - v;\n   |                             ^\
    \ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from\
    \ `usize`\n  --> /tmp/tmp5gxaxjv9.rs:19:27\n   |\n19 |                     m =\
    \ m - v;\n   |                           ^ no implementation for `usize - isize`\n\
    \   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   =\
    \ help: the following other types implement trait `Sub<Rhs>`:\n             <&'a\
    \ f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128\
    \ as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as\
    \ Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an "
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    let mut m = l.iter().min_by_key(|&x| x);\n    let mut n = l.iter().max_by_key(|&x|\
    \ x);\n    m.unwrap() < n.unwrap()\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzts1gudv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(true, |a, b| {\n        a && b && a <= b\n    })\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnbz6veyf.rs:10:14\n   |\n\
    10 |         a && b && a <= b\n   |              ^ expected `bool`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpnbz6veyf.rs:10:24\n   |\n10 |\
    \         a && b && a <= b\n   |                        ^ expected `bool`, found\
    \ `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfn monotonic(l: Vec<isize>)\
    \ -> bool {\n    if l.len() == 0 {\n        return true;\n    }\n    let mut cur\
    \ = l.iter().min();\n    for e in l.iter().rev() {\n        if *e < *cur {\n \
    \           return false;\n        }\n        cur = e;\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `Option<&isize>` cannot be dereferenced\n  --> /tmp/tmpeqiygep9.rs:14:17\n\
    \   |\n14 |         if *e < *cur {\n   |                 ^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpeqiygep9.rs:17:15\n   |\n12 |     let mut cur\
    \ = l.iter().min();\n   |                   -------------- expected due to this\
    \ value\n...\n17 |         cur = e;\n   |               ^ expected enum `Option`,\
    \ found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n        \
    \   found reference `&isize`\nhelp: try wrapping the expression in `Some`\n  \
    \ |\n17 |         cur = Some(e);\n   |               +++++ +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
